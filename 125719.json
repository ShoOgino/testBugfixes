{"path":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d613b5ee68a090ed0e48d760ff0949da8f2443c4","date":1339448928,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // tv.fl diff from fl\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv,test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // multi-valued tv.fl \n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv\",\n                 \"tv.fl\",\"test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl glob\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv,[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use (multi-valued) fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv\",\n                 \"fl\", \"[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n  }\n\n","bugFix":null,"bugIntro":["4e32cd9d49e5cda7e131c54c05d8e970583b7063"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba3a184cc785359756dd0a77bbdb0e4f06bf727b","date":1344450045,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // tv.fl diff from fl\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv,test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // multi-valued tv.fl \n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv\",\n                 \"tv.fl\",\"test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl glob\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv,[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use (multi-valued) fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv\",\n                 \"fl\", \"[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // tv.fl diff from fl\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv,test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // multi-valued tv.fl \n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv\",\n                 \"tv.fl\",\"test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl glob\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv,[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use (multi-valued) fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv\",\n                 \"fl\", \"[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // tv.fl diff from fl\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv,test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // multi-valued tv.fl \n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv\",\n                 \"tv.fl\",\"test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl glob\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv,[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use (multi-valued) fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv\",\n                 \"fl\", \"[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // tv.fl diff from fl\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv,test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // multi-valued tv.fl \n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv\",\n                 \"tv.fl\",\"test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl glob\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv,[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use (multi-valued) fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv\",\n                 \"fl\", \"[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // tv.fl diff from fl\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv,test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // multi-valued tv.fl \n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv\",\n                 \"tv.fl\",\"test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl glob\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv,[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use (multi-valued) fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv\",\n                 \"fl\", \"[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // tv.fl diff from fl\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv,test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // multi-valued tv.fl \n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv\",\n                 \"tv.fl\",\"test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl glob\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv,[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use (multi-valued) fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv\",\n                 \"fl\", \"[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'doc-0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a76608e7f735dce831f49f9b0c6bc13f10adc5a6","date":1427421698,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posoffpaytv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // tv.fl diff from fl\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv,test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // multi-valued tv.fl \n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv\",\n                 \"tv.fl\",\"test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl glob\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posoffpaytv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv,[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use (multi-valued) fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv\",\n                 \"fl\", \"[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // tv.fl diff from fl\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv,test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // multi-valued tv.fl \n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv\",\n                 \"tv.fl\",\"test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl glob\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv,[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use (multi-valued) fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv\",\n                 \"fl\", \"[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posoffpaytv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // tv.fl diff from fl\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv,test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // multi-valued tv.fl \n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv\",\n                 \"tv.fl\",\"test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl glob\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posoffpaytv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv,[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use (multi-valued) fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv\",\n                 \"fl\", \"[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // tv.fl diff from fl\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv,test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // multi-valued tv.fl \n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv\",\n                 \"tv.fl\",\"test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl glob\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv,[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use (multi-valued) fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv\",\n                 \"fl\", \"[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e32cd9d49e5cda7e131c54c05d8e970583b7063","date":1450404956,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posoffpaytv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n    // tv.fl diff from fl\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv,test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n    // multi-valued tv.fl \n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv\",\n                 \"tv.fl\",\"test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n    // re-use fl glob\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posoffpaytv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n    // re-use fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv,[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n    // re-use (multi-valued) fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv\",\n                 \"fl\", \"[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posoffpaytv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // tv.fl diff from fl\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv,test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // multi-valued tv.fl \n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv\",\n                 \"tv.fl\",\"test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl glob\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posoffpaytv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv,[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n    // re-use (multi-valued) fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv\",\n                 \"fl\", \"[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}},\" +\n            \" 'uniqueKeyFieldName':'id'}\"\n    );\n\n  }\n\n","bugFix":["4eacd50421fb83ad5dbe90a00984962e7ec0df7c","d613b5ee68a090ed0e48d760ff0949da8f2443c4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa4d13fa31a8688899168167cbb4449e399b686f","date":1533611099,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#doBasics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/TermVectorComponentTest#testBasics().mjava","sourceNew":"  private void doBasics() throws Exception {\n    assertJQ(req(\"json.nl\", \"map\", \"qt\", tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n        , \"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posoffpaytv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n    // tv.fl diff from fl\n    assertJQ(req(\"json.nl\", \"map\",\n        \"qt\", tv,\n        \"q\", \"id:0\",\n        \"fl\", \"*,score\",\n        \"tv.fl\", \"test_basictv,test_offtv\",\n        TermVectorComponent.COMPONENT_NAME, \"true\",\n        TermVectorParams.TF, \"true\")\n        , \"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n    // multi-valued tv.fl \n    assertJQ(req(\"json.nl\", \"map\",\n        \"qt\", tv,\n        \"q\", \"id:0\",\n        \"fl\", \"*,score\",\n        \"tv.fl\", \"test_basictv\",\n        \"tv.fl\", \"test_offtv\",\n        TermVectorComponent.COMPONENT_NAME, \"true\",\n        TermVectorParams.TF, \"true\")\n        , \"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n    // re-use fl glob\n    assertJQ(req(\"json.nl\", \"map\",\n        \"qt\", tv,\n        \"q\", \"id:0\",\n        \"fl\", \"*,score\",\n        TermVectorComponent.COMPONENT_NAME, \"true\",\n        TermVectorParams.TF, \"true\")\n        , \"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posoffpaytv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n    // re-use fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\", \"map\",\n        \"qt\", tv,\n        \"q\", \"id:0\",\n        \"fl\", \"score,test_basictv,[docid],test_postv,val:sum(3,4)\",\n        TermVectorComponent.COMPONENT_NAME, \"true\",\n        TermVectorParams.TF, \"true\")\n        , \"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n    // re-use (multi-valued) fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\", \"map\",\n        \"qt\", tv,\n        \"q\", \"id:0\",\n        \"fl\", \"score,test_basictv\",\n        \"fl\", \"[docid],test_postv,val:sum(3,4)\",\n        TermVectorComponent.COMPONENT_NAME, \"true\",\n        TermVectorParams.TF, \"true\")\n        , \"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n\n  }\n\n","sourceOld":"  @Test\n  public void testBasics() throws Exception {\n    assertJQ(req(\"json.nl\",\"map\", \"qt\",tv, \"q\", \"id:0\", TermVectorComponent.COMPONENT_NAME, \"true\", TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posoffpaytv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n    // tv.fl diff from fl\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv,test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n    // multi-valued tv.fl \n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 \"tv.fl\", \"test_basictv\",\n                 \"tv.fl\",\"test_offtv\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n    // re-use fl glob\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"*,score\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_offtv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posofftv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_posoffpaytv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n    // re-use fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv,[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n    // re-use (multi-valued) fl, ignore things we can't handle\n    assertJQ(req(\"json.nl\",\"map\", \n                 \"qt\",tv, \n                 \"q\", \"id:0\", \n                 \"fl\", \"score,test_basictv\",\n                 \"fl\", \"[docid],test_postv,val:sum(3,4)\",\n                 TermVectorComponent.COMPONENT_NAME, \"true\", \n                 TermVectorParams.TF, \"true\")\n       ,\"/termVectors=={'0':{'uniqueKey':'0',\" +\n            \" 'test_basictv':{'anoth':{'tf':1},'titl':{'tf':2}},\" +\n            \" 'test_postv':{'anoth':{'tf':1},'titl':{'tf':2}}}}\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d613b5ee68a090ed0e48d760ff0949da8f2443c4":["c26f00b574427b55127e869b935845554afde1fa"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ba3a184cc785359756dd0a77bbdb0e4f06bf727b","a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"ba3a184cc785359756dd0a77bbdb0e4f06bf727b":["d613b5ee68a090ed0e48d760ff0949da8f2443c4"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["d613b5ee68a090ed0e48d760ff0949da8f2443c4","ba3a184cc785359756dd0a77bbdb0e4f06bf727b"],"4e32cd9d49e5cda7e131c54c05d8e970583b7063":["a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fa4d13fa31a8688899168167cbb4449e399b686f":["4e32cd9d49e5cda7e131c54c05d8e970583b7063"],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["ba3a184cc785359756dd0a77bbdb0e4f06bf727b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["d613b5ee68a090ed0e48d760ff0949da8f2443c4","ba3a184cc785359756dd0a77bbdb0e4f06bf727b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa4d13fa31a8688899168167cbb4449e399b686f"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["d613b5ee68a090ed0e48d760ff0949da8f2443c4"],"d613b5ee68a090ed0e48d760ff0949da8f2443c4":["ba3a184cc785359756dd0a77bbdb0e4f06bf727b","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"ba3a184cc785359756dd0a77bbdb0e4f06bf727b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c7869f64c874ebf7f317d22c00baf2b6857797a6","a76608e7f735dce831f49f9b0c6bc13f10adc5a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"4e32cd9d49e5cda7e131c54c05d8e970583b7063":["fa4d13fa31a8688899168167cbb4449e399b686f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4e32cd9d49e5cda7e131c54c05d8e970583b7063"],"fa4d13fa31a8688899168167cbb4449e399b686f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}