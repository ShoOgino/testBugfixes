{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyAbstractAnalyticsTest#getStatResult(String,String,VAL_TYPE).mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/LegacyAbstractAnalyticsTest#getStatResult(String,String,VAL_TYPE).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/AbstractAnalyticsStatsTest#getStatResult(String,String,VAL_TYPE).mjava","sourceNew":"  public Object getStatResult(String section, String name, VAL_TYPE type) throws XPathExpressionException {\n\n    // Construct the XPath expression. The form better not change or all these will fail.\n    StringBuilder sb = new StringBuilder(\"/response/lst[@name='\"+AnalyticsResponseHeadings.COMPLETED_OLD_HEADER+\"']/lst[@name='\").append(section).append(\"']\");\n\n    // This is a little fragile in that it demands the elements have the same name as type, i.e. when looking for a\n    // VAL_TYPE.DOUBLE, the element in question is <double name=\"blah\">47.0</double>.\n    sb.append(\"/\").append(type.toString()).append(\"[@name='\").append(name).append(\"']\");\n    String val = xPathFact.newXPath().compile(sb.toString()).evaluate(doc, XPathConstants.STRING).toString();\n    try {\n      switch (type) {\n        case INTEGER: return Integer.parseInt(val);\n        case DOUBLE:  return Double.parseDouble(val);\n        case FLOAT:   return Float.parseFloat(val);\n        case LONG:    return Long.parseLong(val);\n        case STRING:  assertTrue(rawResponse, val != null && val.length() > 0 ); return val;\n        case DATE:    assertTrue(rawResponse, val != null && val.length() > 0 ); return val;\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught exception in getStatResult, xPath = \" + sb.toString() + \" \\nraw data: \" + rawResponse);\n    }\n    fail(\"Unknown type used in getStatResult\");\n    return null; // Really can't get here, but the compiler thinks we can!\n  }\n\n","sourceOld":"  public Object getStatResult(String section, String name, VAL_TYPE type) throws XPathExpressionException {\n\n    // Construct the XPath expression. The form better not change or all these will fail.\n    StringBuilder sb = new StringBuilder(\"/response/lst[@name='\"+AnalyticsResponseHeadings.COMPLETED_OLD_HEADER+\"']/lst[@name='\").append(section).append(\"']\");\n\n    // This is a little fragile in that it demands the elements have the same name as type, i.e. when looking for a\n    // VAL_TYPE.DOUBLE, the element in question is <double name=\"blah\">47.0</double>.\n    sb.append(\"/\").append(type.toString()).append(\"[@name='\").append(name).append(\"']\");\n    String val = xPathFact.newXPath().compile(sb.toString()).evaluate(doc, XPathConstants.STRING).toString();\n    try {\n      switch (type) {\n        case INTEGER: return Integer.parseInt(val);\n        case DOUBLE:  return Double.parseDouble(val);\n        case FLOAT:   return Float.parseFloat(val);\n        case LONG:    return Long.parseLong(val);\n        case STRING:  assertTrue(rawResponse, val != null && val.length() > 0 ); return val;\n        case DATE:    assertTrue(rawResponse, val != null && val.length() > 0 ); return val;\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n      fail(\"Caught exception in getStatResult, xPath = \" + sb.toString() + \" \\nraw data: \" + rawResponse);\n    }\n    fail(\"Unknown type used in getStatResult\");\n    return null; // Really can't get here, but the compiler thinks we can!\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}