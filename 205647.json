{"path":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19e21d98da803ac6174cb50a880e6289139756ca","date":1323342587,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"efc85580874d26ca9617f9ad61628d56f6859762","date":1323367273,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    boolean abortOnConfigurationError = true;\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      abortOnConfigurationError = init.isAbortOnConfigurationError();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\", t);\n      SolrConfig.severeErrors.add( t );\n      SolrCore.log( t );\n    }\n\n    // Optionally abort if we found a sever error\n    if( abortOnConfigurationError && SolrConfig.severeErrors.size() > 0 ) {\n      StringWriter sw = new StringWriter();\n      PrintWriter out = new PrintWriter( sw );\n      out.println( \"Severe errors in solr configuration.\\n\" );\n      out.println( \"Check your log files for more detailed information on what may be wrong.\\n\" );\n      for( Throwable t : SolrConfig.severeErrors ) {\n        out.println( \"-------------------------------------------------------------\" );\n        t.printStackTrace( out );\n      }\n      out.flush();\n\n      // Servlet containers behave slightly differently if you throw an exception during \n      // initialization.  Resin will display that error for every page, jetty prints it in\n      // the logs, but continues normally.  (We will see a 404 rather then the real error)\n      // rather then leave the behavior undefined, lets cache the error and spit it out \n      // for every request.\n      abortErrorMessage = sw.toString();\n      //throw new ServletException( abortErrorMessage );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = createCoreContainer();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = createCoreContainer();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = createCoreContainer();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = createCoreContainer();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    CoreContainer.Initializer init = createInitializer();\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = init.initialize();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2","date":1389633998,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = createCoreContainer();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = createCoreContainer();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd","date":1419078070,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\" + this.getClass().getClassLoader());\n\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = createCoreContainer();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\");\n\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = createCoreContainer();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9bc766d645fa848f86c381c7f6acf2c881c99399","date":1425549246,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\" + this.getClass().getClassLoader());\n\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\" + this.getClass().getClassLoader());\n\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = createCoreContainer();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\" + this.getClass().getClassLoader());\n\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\" + this.getClass().getClassLoader());\n\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      this.cores = createCoreContainer();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"801f068cacbe29eabe66170e5d85e7c447b0113d","date":1430942267,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\" + this.getClass().getClassLoader());\n\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\" + this.getClass().getClassLoader());\n\n    try {\n      // web.xml configuration\n      this.pathPrefix = config.getInitParameter( \"path-prefix\" );\n\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cac08ebda61657f2bd130dc94173456fef381a30","date":1431669054,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\" + this.getClass().getClassLoader());\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\" + this.getClass().getClassLoader());\n\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"108c77096b1abf4c8c26991421f63f87d4c6b13c","date":1432228904,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\" + this.getClass().getClassLoader());\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      if (this.cores.getAuthenticationPlugin() != null) {\n        HttpClientConfigurer configurer = this.cores.getAuthenticationPlugin().getDefaultConfigurer();\n        if (configurer != null) {\n          configurer.configure((DefaultHttpClient)httpClient, new ModifiableSolrParams());\n        }\n      }\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\" + this.getClass().getClassLoader());\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"166170a424a34de012e5bfe2f46f82466c6c2f3f","date":1433621012,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\" + this.getClass().getClassLoader());\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      if (this.cores.getAuthenticationPlugin() != null) {\n        HttpClientConfigurer configurer = this.cores.getAuthenticationPlugin().getDefaultConfigurer();\n        if (configurer != null) {\n          configurer.configure((DefaultHttpClient)httpClient, new ModifiableSolrParams());\n        }\n      }\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\" + this.getClass().getClassLoader());\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      if (this.cores.getAuthenticationPlugin() != null) {\n        HttpClientConfigurer configurer = this.cores.getAuthenticationPlugin().getDefaultConfigurer();\n        if (configurer != null) {\n          configurer.configure((DefaultHttpClient)httpClient, new ModifiableSolrParams());\n        }\n      }\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"896e12033d56085efdb7b88bd289beb2645361dc","date":1434214735,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      if (this.cores.getAuthenticationPlugin() != null) {\n        HttpClientConfigurer configurer = this.cores.getAuthenticationPlugin().getDefaultConfigurer();\n        if (configurer != null) {\n          configurer.configure((DefaultHttpClient)httpClient, new ModifiableSolrParams());\n        }\n      }\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init()\" + this.getClass().getClassLoader());\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      if (this.cores.getAuthenticationPlugin() != null) {\n        HttpClientConfigurer configurer = this.cores.getAuthenticationPlugin().getDefaultConfigurer();\n        if (configurer != null) {\n          configurer.configure((DefaultHttpClient)httpClient, new ModifiableSolrParams());\n        }\n      }\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6d62214e818b74b9fa407c0c51956e44878a46a","date":1438266500,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    HttpClientUtil.HttpClientFactory.setHttpClientImpl(SolrHttpClient.SolrDefaultHttpClient.class, SolrHttpClient.SolrSystemDefaultHttpClient.class);\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      if (this.cores.getAuthenticationPlugin() != null) {\n        HttpClientConfigurer configurer = this.cores.getAuthenticationPlugin().getDefaultConfigurer();\n        if (configurer != null) {\n          configurer.configure((DefaultHttpClient)httpClient, new ModifiableSolrParams());\n        }\n      }\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      if (this.cores.getAuthenticationPlugin() != null) {\n        HttpClientConfigurer configurer = this.cores.getAuthenticationPlugin().getDefaultConfigurer();\n        if (configurer != null) {\n          configurer.configure((DefaultHttpClient)httpClient, new ModifiableSolrParams());\n        }\n      }\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03666d115305f32da464b8ac79286ddba8bdd47","date":1438267163,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    HttpClientUtil.HttpClientFactory.setHttpClientImpl(SolrHttpClient.SolrDefaultHttpClient.class, SolrHttpClient.SolrSystemDefaultHttpClient.class);\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      if (this.cores.getAuthenticationPlugin() != null) {\n        HttpClientConfigurer configurer = this.cores.getAuthenticationPlugin().getDefaultConfigurer();\n        if (configurer != null) {\n          configurer.configure((DefaultHttpClient) httpClient, new ModifiableSolrParams());\n        }\n      }\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    HttpClientUtil.HttpClientFactory.setHttpClientImpl(SolrHttpClient.SolrDefaultHttpClient.class, SolrHttpClient.SolrSystemDefaultHttpClient.class);\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      if (this.cores.getAuthenticationPlugin() != null) {\n        HttpClientConfigurer configurer = this.cores.getAuthenticationPlugin().getDefaultConfigurer();\n        if (configurer != null) {\n          configurer.configure((DefaultHttpClient)httpClient, new ModifiableSolrParams());\n        }\n      }\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96daba67b9f57acb9af8bfd3400fc9622b32cc95","date":1438618981,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      if (this.cores.getAuthenticationPlugin() != null) {\n        HttpClientConfigurer configurer = this.cores.getAuthenticationPlugin().getDefaultConfigurer();\n        if (configurer != null) {\n          configurer.configure((DefaultHttpClient) httpClient, new ModifiableSolrParams());\n        }\n      }\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    HttpClientUtil.HttpClientFactory.setHttpClientImpl(SolrHttpClient.SolrDefaultHttpClient.class, SolrHttpClient.SolrSystemDefaultHttpClient.class);\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      if (this.cores.getAuthenticationPlugin() != null) {\n        HttpClientConfigurer configurer = this.cores.getAuthenticationPlugin().getDefaultConfigurer();\n        if (configurer != null) {\n          configurer.configure((DefaultHttpClient) httpClient, new ModifiableSolrParams());\n        }\n      }\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3a34dae868734612eb6329aa0ef754f30bd2036","date":1438783154,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n\n      if (this.cores.getAuthenticationPlugin() != null) {\n        HttpClientConfigurer configurer = this.cores.getAuthenticationPlugin().getDefaultConfigurer();\n        if (configurer != null) {\n          configurer.configure((DefaultHttpClient) httpClient, new ModifiableSolrParams());\n        }\n      }\n\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      if (solrHome == null)\n        solrHome = SolrResourceLoader.locateSolrHome();\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome, extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aeabc53a9c50bd4c04c5261562b3e78cc2ea744","date":1474499907,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      Enumeration appenders = LogManager.getRootLogger().getAllAppenders();\n      while (appenders.hasMoreElements()) {\n        Appender appender = (Appender) appenders.nextElement();\n        if (appender instanceof ConsoleAppender) {\n          log.info(\"Property solr.log.muteconsole given. Muting ConsoleAppender named \" + appender.getName());\n          LogManager.getRootLogger().removeAppender(appender);\n        }\n      }\n    }\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"069f8802f1a6f43ae3b5e774663bfb1c8cfda1f3","date":1474530671,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      muteConsole();\n    }\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      Enumeration appenders = LogManager.getRootLogger().getAllAppenders();\n      while (appenders.hasMoreElements()) {\n        Appender appender = (Appender) appenders.nextElement();\n        if (appender instanceof ConsoleAppender) {\n          log.info(\"Property solr.log.muteconsole given. Muting ConsoleAppender named \" + appender.getName());\n          LogManager.getRootLogger().removeAppender(appender);\n        }\n      }\n    }\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a31d05872bcca4cee6768c210940d76cfc6a68f","date":1474544233,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      muteConsole();\n    }\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":["50fd776bfdfbf1b644edd777d559f521b4e8319e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      muteConsole();\n    }\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dc5d28253d71a72c17ec531a8e076eca3c74fe9c","date":1474571128,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f36e0de357fdea3ecaa37e3dec9652b328650f78","date":1474880540,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e6cfa8e55d8ce42ce69d7e1940ac5d86538b3674","date":1476479949,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.info(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.info(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.info(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f4989a33b68ac6c30af846eb822ea8e561998c","date":1481732210,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n    \n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n    \n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n    \n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n    \n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n    \n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n    \n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n    \n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n    \n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6130fcaa36d42a71fc464c80399af8098c42de5a","date":1493878512,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":["3646ead588297558973dbd1162e69791e822b944"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1607f0f76f30bb38ce4c6bf5542e7423babcf0aa","date":1493907698,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"21a62db66942c7fc8183cc7b4d395d759b87dc19","date":1494056847,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f85e0317037f2f84a7379222c6683b5d4b29a868","date":1494955156,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f","date":1495081498,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      this.cores = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = cores.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics();\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    log.trace(\"SolrDispatchFilter.init() done\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3","date":1503399053,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["50fd776bfdfbf1b644edd777d559f521b4e8319e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93baf46bd12096e0de407258b3b32cfaaf58e448","date":1522030569,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","date":1522059649,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3646ead588297558973dbd1162e69791e822b944","date":1525482176,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":["6130fcaa36d42a71fc464c80399af8098c42de5a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4bb519c79b76e52145e37b6681a7012525ed5f4b","date":1544694716,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e7e81cd6c3e108547bc12beb23ba00ae90448b9","date":1564060380,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      SolrResourceLoader.ensureUserFilesDataDir(solrHomePath);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n\n      coresInit = createCoreContainer(solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome),\n                                       extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"99d6782cf9de8c5ffeb8d0b0f103b578205af068","date":1566878682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      SolrResourceLoader.ensureUserFilesDataDir(solrHomePath);\n      SolrResourceLoader.ensureBlobsDir(solrHomePath);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      SolrResourceLoader.ensureUserFilesDataDir(solrHomePath);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      SolrResourceLoader.ensureUserFilesDataDir(solrHomePath);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      SolrResourceLoader.ensureUserFilesDataDir(solrHomePath);\n      SolrResourceLoader.ensureBlobsDir(solrHomePath);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      SolrResourceLoader.ensureUserFilesDataDir(solrHomePath);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      SolrResourceLoader.ensureUserFilesDataDir(solrHomePath);\n      SolrResourceLoader.ensureBlobsDir(solrHomePath);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrPaths.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      SolrPaths.ensureUserFilesDataDir(solrHomePath);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrResourceLoader.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      SolrResourceLoader.ensureUserFilesDataDir(solrHomePath);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"50fd776bfdfbf1b644edd777d559f521b4e8319e","date":1584646004,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    if (log.isTraceEnabled()) {\n      log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    }\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level={}\", logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrPaths.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      SolrPaths.ensureUserFilesDataDir(solrHomePath);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      if (log.isDebugEnabled()) {\n        log.debug(\"user.dir={}\", System.getProperty(\"user.dir\"));\n      }\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level=\" + logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrPaths.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      SolrPaths.ensureUserFilesDataDir(solrHomePath);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      log.debug(\"user.dir=\" + System.getProperty(\"user.dir\"));\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    if (log.isTraceEnabled()) {\n      log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    }\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    if (log.isInfoEnabled()) {\n      log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    }\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level={}\", logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrPaths.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      SolrPaths.ensureUserFilesDataDir(solrHomePath);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      if (log.isDebugEnabled()) {\n        log.debug(\"user.dir={}\", System.getProperty(\"user.dir\"));\n      }\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    if (log.isTraceEnabled()) {\n      log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    }\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level={}\", logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrPaths.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      SolrPaths.ensureUserFilesDataDir(solrHomePath);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      if (log.isDebugEnabled()) {\n        log.debug(\"user.dir={}\", System.getProperty(\"user.dir\"));\n      }\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac5c4637fb06d45efdeaf0f2d262b133ab2de181","date":1590122088,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    if (log.isTraceEnabled()) {\n      log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    }\n    CoreContainer coresInit = null;\n    try{\n\n    StartupLoggingUtils.checkLogDir();\n    if (log.isInfoEnabled()) {\n      log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    }\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level={}\", logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrPaths.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      SolrPaths.ensureUserFilesDataDir(solrHomePath);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      if (log.isDebugEnabled()) {\n        log.debug(\"user.dir={}\", System.getProperty(\"user.dir\"));\n      }\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    if (log.isTraceEnabled()) {\n      log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    }\n    CoreContainer coresInit = null;\n    try{\n\n    SolrRequestParsers.fileCleaningTracker = new SolrFileCleaningTracker();\n\n    StartupLoggingUtils.checkLogDir();\n    if (log.isInfoEnabled()) {\n      log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    }\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level={}\", logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrPaths.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      SolrPaths.ensureUserFilesDataDir(solrHomePath);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      if (log.isDebugEnabled()) {\n        log.debug(\"user.dir={}\", System.getProperty(\"user.dir\"));\n      }\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8c36bc16f489634a3fcf14294704824192273df","date":1593058738,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    if (log.isTraceEnabled()) {\n      log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    }\n    CoreContainer coresInit = null;\n    try{\n\n    StartupLoggingUtils.checkLogDir();\n    if (log.isInfoEnabled()) {\n      log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    }\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level={}\", logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrPaths.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      if (log.isDebugEnabled()) {\n        log.debug(\"user.dir={}\", System.getProperty(\"user.dir\"));\n      }\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    if (log.isTraceEnabled()) {\n      log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    }\n    CoreContainer coresInit = null;\n    try{\n\n    StartupLoggingUtils.checkLogDir();\n    if (log.isInfoEnabled()) {\n      log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    }\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level={}\", logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrPaths.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      SolrPaths.ensureUserFilesDataDir(solrHomePath);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      if (log.isDebugEnabled()) {\n        log.debug(\"user.dir={}\", System.getProperty(\"user.dir\"));\n      }\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c99002731351c8c955238845b0038682148eec53","date":1596830766,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    if (log.isTraceEnabled()) {\n      log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    }\n    CoreContainer coresInit = null;\n    try{\n\n    StartupLoggingUtils.checkLogDir();\n    if (log.isInfoEnabled()) {\n      log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    }\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level={}\", logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrPaths.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      RateLimitManager.Builder builder = new RateLimitManager.Builder(config);\n\n      this.rateLimitManager = builder.build();\n      if (log.isDebugEnabled()) {\n        log.debug(\"user.dir={}\", System.getProperty(\"user.dir\"));\n      }\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    if (log.isTraceEnabled()) {\n      log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    }\n    CoreContainer coresInit = null;\n    try{\n\n    StartupLoggingUtils.checkLogDir();\n    if (log.isInfoEnabled()) {\n      log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    }\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level={}\", logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrPaths.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      if (log.isDebugEnabled()) {\n        log.debug(\"user.dir={}\", System.getProperty(\"user.dir\"));\n      }\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2460e6297ab2074eb39fc76a9806e0a0b640c88c","date":1601285226,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/servlet/SolrDispatchFilter#init(FilterConfig).mjava","sourceNew":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    if (log.isTraceEnabled()) {\n      log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    }\n    CoreContainer coresInit = null;\n    try{\n\n    StartupLoggingUtils.checkLogDir();\n    if (log.isInfoEnabled()) {\n      log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    }\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level={}\", logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrPaths.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n\n      SolrZkClient zkClient = null;\n      ZkController zkController = coresInit.getZkController();\n\n      if (zkController != null) {\n        zkClient = zkController.getZkClient();\n      }\n\n      RateLimitManager.Builder builder = new RateLimitManager.Builder(zkClient);\n\n      this.rateLimitManager = builder.build();\n\n      if (zkController != null) {\n        zkController.zkStateReader.registerClusterPropertiesListener(this.rateLimitManager);\n      }\n\n      if (log.isDebugEnabled()) {\n        log.debug(\"user.dir={}\", System.getProperty(\"user.dir\"));\n      }\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(FilterConfig config) throws ServletException\n  {\n    SSLConfigurationsFactory.current().init();\n    if (log.isTraceEnabled()) {\n      log.trace(\"SolrDispatchFilter.init(): {}\", this.getClass().getClassLoader());\n    }\n    CoreContainer coresInit = null;\n    try{\n\n    StartupLoggingUtils.checkLogDir();\n    if (log.isInfoEnabled()) {\n      log.info(\"Using logger factory {}\", StartupLoggingUtils.getLoggerImplStr());\n    }\n    logWelcomeBanner();\n    String muteConsole = System.getProperty(SOLR_LOG_MUTECONSOLE);\n    if (muteConsole != null && !Arrays.asList(\"false\",\"0\",\"off\",\"no\").contains(muteConsole.toLowerCase(Locale.ROOT))) {\n      StartupLoggingUtils.muteConsole();\n    }\n    String logLevel = System.getProperty(SOLR_LOG_LEVEL);\n    if (logLevel != null) {\n      log.info(\"Log level override, property solr.log.level={}\", logLevel);\n      StartupLoggingUtils.changeLogLevel(logLevel);\n    }\n\n    String exclude = config.getInitParameter(\"excludePatterns\");\n    if(exclude != null) {\n      String[] excludeArray = exclude.split(\",\");\n      excludePatterns = new ArrayList<>();\n      for (String element : excludeArray) {\n        excludePatterns.add(Pattern.compile(element));\n      }\n    }\n    try {\n      Properties extraProperties = (Properties) config.getServletContext().getAttribute(PROPERTIES_ATTRIBUTE);\n      if (extraProperties == null)\n        extraProperties = new Properties();\n\n      String solrHome = (String) config.getServletContext().getAttribute(SOLRHOME_ATTRIBUTE);\n      final Path solrHomePath = solrHome == null ? SolrPaths.locateSolrHome() : Paths.get(solrHome);\n      coresInit = createCoreContainer(solrHomePath, extraProperties);\n      this.httpClient = coresInit.getUpdateShardHandler().getDefaultHttpClient();\n      setupJvmMetrics(coresInit);\n      RateLimitManager.Builder builder = new RateLimitManager.Builder(config);\n\n      this.rateLimitManager = builder.build();\n      if (log.isDebugEnabled()) {\n        log.debug(\"user.dir={}\", System.getProperty(\"user.dir\"));\n      }\n    }\n    catch( Throwable t ) {\n      // catch this so our filter still works\n      log.error( \"Could not start Solr. Check solr/home property and the logs\");\n      SolrCore.log( t );\n      if (t instanceof Error) {\n        throw (Error) t;\n      }\n    }\n\n    }finally{\n      log.trace(\"SolrDispatchFilter.init() done\");\n      this.cores = coresInit; // crucially final assignment \n      init.countDown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["7530de27b87b961b51f01bd1299b7004d46e8823","7116474e2e390259937401cf928323e0cbc75e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["c26f00b574427b55127e869b935845554afde1fa","19e21d98da803ac6174cb50a880e6289139756ca"],"51f4989a33b68ac6c30af846eb822ea8e561998c":["e6cfa8e55d8ce42ce69d7e1940ac5d86538b3674"],"4e7e81cd6c3e108547bc12beb23ba00ae90448b9":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["50fd776bfdfbf1b644edd777d559f521b4e8319e"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"3a31d05872bcca4cee6768c210940d76cfc6a68f":["069f8802f1a6f43ae3b5e774663bfb1c8cfda1f3"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["e9017cf144952056066919f1ebc7897ff9bd71b1","86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["9856095f7afb5a607bf5e65077615ed91273508c","0265144286422ad99682a00904cc2536b79c8535"],"6130fcaa36d42a71fc464c80399af8098c42de5a":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","51f4989a33b68ac6c30af846eb822ea8e561998c"],"e8c36bc16f489634a3fcf14294704824192273df":["ac5c4637fb06d45efdeaf0f2d262b133ab2de181"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["19e21d98da803ac6174cb50a880e6289139756ca"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["7116474e2e390259937401cf928323e0cbc75e60"],"21a62db66942c7fc8183cc7b4d395d759b87dc19":["1607f0f76f30bb38ce4c6bf5542e7423babcf0aa"],"0265144286422ad99682a00904cc2536b79c8535":["51f4989a33b68ac6c30af846eb822ea8e561998c"],"126d6ad24eed13163ba0959435d5a80e5672837c":["069f8802f1a6f43ae3b5e774663bfb1c8cfda1f3","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"e6cfa8e55d8ce42ce69d7e1940ac5d86538b3674":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7530de27b87b961b51f01bd1299b7004d46e8823":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"dc5d28253d71a72c17ec531a8e076eca3c74fe9c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["86d2df3ca94d97c62f70b0d321f5f597de2d3eb3","93baf46bd12096e0de407258b3b32cfaaf58e448"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["7b1605dda5afabdc06fd136fa0dd14ad326e3001","7530de27b87b961b51f01bd1299b7004d46e8823"],"4bb519c79b76e52145e37b6681a7012525ed5f4b":["3646ead588297558973dbd1162e69791e822b944"],"f85e0317037f2f84a7379222c6683b5d4b29a868":["21a62db66942c7fc8183cc7b4d395d759b87dc19"],"ac5c4637fb06d45efdeaf0f2d262b133ab2de181":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"069f8802f1a6f43ae3b5e774663bfb1c8cfda1f3":["4aeabc53a9c50bd4c04c5261562b3e78cc2ea744"],"1607f0f76f30bb38ce4c6bf5542e7423babcf0aa":["6130fcaa36d42a71fc464c80399af8098c42de5a"],"f36e0de357fdea3ecaa37e3dec9652b328650f78":["dc5d28253d71a72c17ec531a8e076eca3c74fe9c"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"9bc766d645fa848f86c381c7f6acf2c881c99399":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["96daba67b9f57acb9af8bfd3400fc9622b32cc95"],"c44cc06c26e456fe9c215072b79fce30babe3975":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"4aeabc53a9c50bd4c04c5261562b3e78cc2ea744":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["21a62db66942c7fc8183cc7b4d395d759b87dc19","f85e0317037f2f84a7379222c6683b5d4b29a868"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["3a31d05872bcca4cee6768c210940d76cfc6a68f"],"f03666d115305f32da464b8ac79286ddba8bdd47":["d6d62214e818b74b9fa407c0c51956e44878a46a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd","9bc766d645fa848f86c381c7f6acf2c881c99399"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["c44cc06c26e456fe9c215072b79fce30babe3975"],"d6d62214e818b74b9fa407c0c51956e44878a46a":["896e12033d56085efdb7b88bd289beb2645361dc"],"166170a424a34de012e5bfe2f46f82466c6c2f3f":["108c77096b1abf4c8c26991421f63f87d4c6b13c"],"96daba67b9f57acb9af8bfd3400fc9622b32cc95":["f03666d115305f32da464b8ac79286ddba8bdd47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a626ec4d1c92e59fe390724d6220081047b03ce7","f36e0de357fdea3ecaa37e3dec9652b328650f78"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"896e12033d56085efdb7b88bd289beb2645361dc":["166170a424a34de012e5bfe2f46f82466c6c2f3f"],"801f068cacbe29eabe66170e5d85e7c447b0113d":["9bc766d645fa848f86c381c7f6acf2c881c99399"],"efc85580874d26ca9617f9ad61628d56f6859762":["c26f00b574427b55127e869b935845554afde1fa","19e21d98da803ac6174cb50a880e6289139756ca"],"50fd776bfdfbf1b644edd777d559f521b4e8319e":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"2460e6297ab2074eb39fc76a9806e0a0b640c88c":["c99002731351c8c955238845b0038682148eec53"],"cac08ebda61657f2bd130dc94173456fef381a30":["801f068cacbe29eabe66170e5d85e7c447b0113d"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["4e7e81cd6c3e108547bc12beb23ba00ae90448b9"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["0265144286422ad99682a00904cc2536b79c8535"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"d264f386d864b5751209060e8886ca9845f70469":["7530de27b87b961b51f01bd1299b7004d46e8823"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a626ec4d1c92e59fe390724d6220081047b03ce7","e6cfa8e55d8ce42ce69d7e1940ac5d86538b3674"],"3646ead588297558973dbd1162e69791e822b944":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19e21d98da803ac6174cb50a880e6289139756ca":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c99002731351c8c955238845b0038682148eec53":["e8c36bc16f489634a3fcf14294704824192273df"],"108c77096b1abf4c8c26991421f63f87d4c6b13c":["cac08ebda61657f2bd130dc94173456fef381a30"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2460e6297ab2074eb39fc76a9806e0a0b640c88c"],"b0b597c65628ca9e73913a07e81691f8229bae35":["99d6782cf9de8c5ffeb8d0b0f103b578205af068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"7116474e2e390259937401cf928323e0cbc75e60":["37a0f60745e53927c4c876cfe5b5a58170f0646c","f56da6f4f15d95f318d2d6ac2a39a9183dfecff2"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"51f4989a33b68ac6c30af846eb822ea8e561998c":["9856095f7afb5a607bf5e65077615ed91273508c","0265144286422ad99682a00904cc2536b79c8535"],"4e7e81cd6c3e108547bc12beb23ba00ae90448b9":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["ac5c4637fb06d45efdeaf0f2d262b133ab2de181"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["4aeabc53a9c50bd4c04c5261562b3e78cc2ea744","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3a31d05872bcca4cee6768c210940d76cfc6a68f":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"6130fcaa36d42a71fc464c80399af8098c42de5a":["1607f0f76f30bb38ce4c6bf5542e7423babcf0aa"],"86d2df3ca94d97c62f70b0d321f5f597de2d3eb3":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","f67a921f6ec5ab488ce397cf05f95fcd8ce631b6","93baf46bd12096e0de407258b3b32cfaaf58e448"],"9856095f7afb5a607bf5e65077615ed91273508c":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"e8c36bc16f489634a3fcf14294704824192273df":["c99002731351c8c955238845b0038682148eec53"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["7530de27b87b961b51f01bd1299b7004d46e8823","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"f56da6f4f15d95f318d2d6ac2a39a9183dfecff2":["b96ad5eead3ef9b09cee72d7b54b8bfc369859bd"],"21a62db66942c7fc8183cc7b4d395d759b87dc19":["f85e0317037f2f84a7379222c6683b5d4b29a868","c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"126d6ad24eed13163ba0959435d5a80e5672837c":["dc5d28253d71a72c17ec531a8e076eca3c74fe9c"],"e6cfa8e55d8ce42ce69d7e1940ac5d86538b3674":["51f4989a33b68ac6c30af846eb822ea8e561998c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7530de27b87b961b51f01bd1299b7004d46e8823":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d264f386d864b5751209060e8886ca9845f70469"],"dc5d28253d71a72c17ec531a8e076eca3c74fe9c":["f36e0de357fdea3ecaa37e3dec9652b328650f78"],"f67a921f6ec5ab488ce397cf05f95fcd8ce631b6":["3646ead588297558973dbd1162e69791e822b944"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"4bb519c79b76e52145e37b6681a7012525ed5f4b":["4e7e81cd6c3e108547bc12beb23ba00ae90448b9"],"f85e0317037f2f84a7379222c6683b5d4b29a868":["c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f"],"ac5c4637fb06d45efdeaf0f2d262b133ab2de181":["e8c36bc16f489634a3fcf14294704824192273df"],"069f8802f1a6f43ae3b5e774663bfb1c8cfda1f3":["3a31d05872bcca4cee6768c210940d76cfc6a68f","126d6ad24eed13163ba0959435d5a80e5672837c"],"1607f0f76f30bb38ce4c6bf5542e7423babcf0aa":["21a62db66942c7fc8183cc7b4d395d759b87dc19"],"f36e0de357fdea3ecaa37e3dec9652b328650f78":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c26f00b574427b55127e869b935845554afde1fa":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","efc85580874d26ca9617f9ad61628d56f6859762","19e21d98da803ac6174cb50a880e6289139756ca"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"9bc766d645fa848f86c381c7f6acf2c881c99399":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","801f068cacbe29eabe66170e5d85e7c447b0113d"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"c5536d1fc2015d46bbeb8163f6f8b99483c7cc1f":["e9017cf144952056066919f1ebc7897ff9bd71b1","86d2df3ca94d97c62f70b0d321f5f597de2d3eb3"],"4aeabc53a9c50bd4c04c5261562b3e78cc2ea744":["069f8802f1a6f43ae3b5e774663bfb1c8cfda1f3"],"c44cc06c26e456fe9c215072b79fce30babe3975":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","b0b597c65628ca9e73913a07e81691f8229bae35"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"f03666d115305f32da464b8ac79286ddba8bdd47":["96daba67b9f57acb9af8bfd3400fc9622b32cc95"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"d6d62214e818b74b9fa407c0c51956e44878a46a":["f03666d115305f32da464b8ac79286ddba8bdd47"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["50fd776bfdfbf1b644edd777d559f521b4e8319e"],"166170a424a34de012e5bfe2f46f82466c6c2f3f":["896e12033d56085efdb7b88bd289beb2645361dc"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["e6cfa8e55d8ce42ce69d7e1940ac5d86538b3674"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"96daba67b9f57acb9af8bfd3400fc9622b32cc95":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"93baf46bd12096e0de407258b3b32cfaaf58e448":["f67a921f6ec5ab488ce397cf05f95fcd8ce631b6"],"896e12033d56085efdb7b88bd289beb2645361dc":["d6d62214e818b74b9fa407c0c51956e44878a46a"],"801f068cacbe29eabe66170e5d85e7c447b0113d":["cac08ebda61657f2bd130dc94173456fef381a30"],"efc85580874d26ca9617f9ad61628d56f6859762":[],"50fd776bfdfbf1b644edd777d559f521b4e8319e":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"2460e6297ab2074eb39fc76a9806e0a0b640c88c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cac08ebda61657f2bd130dc94173456fef381a30":["108c77096b1abf4c8c26991421f63f87d4c6b13c"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["e9017cf144952056066919f1ebc7897ff9bd71b1","6130fcaa36d42a71fc464c80399af8098c42de5a","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"3646ead588297558973dbd1162e69791e822b944":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"b96ad5eead3ef9b09cee72d7b54b8bfc369859bd":["9bc766d645fa848f86c381c7f6acf2c881c99399","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"19e21d98da803ac6174cb50a880e6289139756ca":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7b1605dda5afabdc06fd136fa0dd14ad326e3001","efc85580874d26ca9617f9ad61628d56f6859762"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c99002731351c8c955238845b0038682148eec53":["2460e6297ab2074eb39fc76a9806e0a0b640c88c"],"108c77096b1abf4c8c26991421f63f87d4c6b13c":["166170a424a34de012e5bfe2f46f82466c6c2f3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a7809d1d753b67f48b1a706e17034bf8b624ea3","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","efc85580874d26ca9617f9ad61628d56f6859762","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}