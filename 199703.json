{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTimeDifferencingMatrix().mjava","commits":[{"id":"be97db2343d6782775c916433312214085670d50","date":1589464325,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTimeDifferencingMatrix().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTimeDifferencingMatrix() throws Exception {\n    String cexpr = \"let(echo=\\\"c, d\\\",\\n\" +\n        \"               a=matrix(array(1,2,3,4,5),array(7.5,9,11,15.5,50.2)),\\n\" +\n        \"               b=setColumnLabels(a, array(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\")),\\n\" +\n        \"               c=diff(b, 2),\\n\" +\n        \"               d=getColumnLabels(c))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    List<String> columnsLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnsLabels.size(), 3);\n    assertEquals(columnsLabels.get(0), \"c\");\n    assertEquals(columnsLabels.get(1), \"d\");\n    assertEquals(columnsLabels.get(2), \"e\");\n    assertEquals(matrix.size(), 2);\n    List<Number> row1 = matrix.get(0);\n    List<Number> row2 = matrix.get(1);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 2.0, 0);\n    assertEquals(row1.get(1).doubleValue(), 2.0, 0);\n    assertEquals(row1.get(2).doubleValue(), 2.0, 0);\n    assertEquals(row2.size(), 3 );\n    assertEquals(row2.get(0).doubleValue(), 3.5, 0);\n    assertEquals(row2.get(1).doubleValue(), 6.5, 0);\n    assertEquals(row2.get(2).doubleValue(), 39.2, 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTimeDifferencingMatrix().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testTimeDifferencingMatrix().mjava","sourceNew":"  @Test\n  public void testTimeDifferencingMatrix() throws Exception {\n    String cexpr = \"let(echo=\\\"c, d\\\",\\n\" +\n        \"               a=matrix(array(1,2,3,4,5),array(7.5,9,11,15.5,50.2)),\\n\" +\n        \"               b=setColumnLabels(a, array(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\")),\\n\" +\n        \"               c=diff(b, 2),\\n\" +\n        \"               d=getColumnLabels(c))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    @SuppressWarnings({\"unchecked\"})\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    @SuppressWarnings({\"unchecked\"})\n    List<String> columnsLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnsLabels.size(), 3);\n    assertEquals(columnsLabels.get(0), \"c\");\n    assertEquals(columnsLabels.get(1), \"d\");\n    assertEquals(columnsLabels.get(2), \"e\");\n    assertEquals(matrix.size(), 2);\n    List<Number> row1 = matrix.get(0);\n    List<Number> row2 = matrix.get(1);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 2.0, 0);\n    assertEquals(row1.get(1).doubleValue(), 2.0, 0);\n    assertEquals(row1.get(2).doubleValue(), 2.0, 0);\n    assertEquals(row2.size(), 3 );\n    assertEquals(row2.get(0).doubleValue(), 3.5, 0);\n    assertEquals(row2.get(1).doubleValue(), 6.5, 0);\n    assertEquals(row2.get(2).doubleValue(), 39.2, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testTimeDifferencingMatrix() throws Exception {\n    String cexpr = \"let(echo=\\\"c, d\\\",\\n\" +\n        \"               a=matrix(array(1,2,3,4,5),array(7.5,9,11,15.5,50.2)),\\n\" +\n        \"               b=setColumnLabels(a, array(\\\"a\\\",\\\"b\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\")),\\n\" +\n        \"               c=diff(b, 2),\\n\" +\n        \"               d=getColumnLabels(c))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> matrix = (List<List<Number>>)tuples.get(0).get(\"c\");\n    List<String> columnsLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(columnsLabels.size(), 3);\n    assertEquals(columnsLabels.get(0), \"c\");\n    assertEquals(columnsLabels.get(1), \"d\");\n    assertEquals(columnsLabels.get(2), \"e\");\n    assertEquals(matrix.size(), 2);\n    List<Number> row1 = matrix.get(0);\n    List<Number> row2 = matrix.get(1);\n    assertEquals(row1.size(), 3);\n    assertEquals(row1.get(0).doubleValue(), 2.0, 0);\n    assertEquals(row1.get(1).doubleValue(), 2.0, 0);\n    assertEquals(row1.get(2).doubleValue(), 2.0, 0);\n    assertEquals(row2.size(), 3 );\n    assertEquals(row2.get(0).doubleValue(), 3.5, 0);\n    assertEquals(row2.get(1).doubleValue(), 6.5, 0);\n    assertEquals(row2.get(2).doubleValue(), 39.2, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["be97db2343d6782775c916433312214085670d50"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be97db2343d6782775c916433312214085670d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be97db2343d6782775c916433312214085670d50"],"be97db2343d6782775c916433312214085670d50":["9ba1b632c041956c93c41aa1143d16a567014891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}