{"path":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#isLessSerious(List[Violation],List[Violation]).mjava","commits":[{"id":"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4","date":1495700700,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#isLessSerious(List[Violation],List[Violation]).mjava","pathOld":"/dev/null","sourceNew":"    boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n      if (old == null || fresh.size() < old.size()) return true;\n      if(fresh.size() == old.size()){\n        for (int i = 0; i < old.size(); i++) {\n          if(fresh.get(i).equals(old.get(i))) {\n            if (fresh.get(i) != null &&\n                old.get(i).delta != null &&\n                Math.abs(fresh.get(i).delta) < Math.abs(old.get(i).delta))\n              return true;\n          }\n        }\n\n      }\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b","date":1495756308,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#isLessSerious(List[Violation],List[Violation]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#isLessSerious(List[Violation],List[Violation]).mjava","sourceNew":"    boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n      if (old == null || fresh.size() < old.size()) return true;\n      if(fresh.size() == old.size()){\n        for (int i = 0; i < fresh.size(); i++) {\n          Violation freshViolation = fresh.get(i);\n          Violation oldViolation = null;\n          for (Violation v : old) {\n            if(v.equals(freshViolation)){\n              oldViolation =v;\n            }\n          }\n          if (oldViolation != null && oldViolation.delta != null &&\n              Math.abs(fresh.get(i).delta) < Math.abs(oldViolation.delta)) return true;\n        }\n\n      }\n      return false;\n    }\n\n","sourceOld":"    boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n      if (old == null || fresh.size() < old.size()) return true;\n      if(fresh.size() == old.size()){\n        for (int i = 0; i < old.size(); i++) {\n          if(fresh.get(i).equals(old.get(i))) {\n            if (fresh.get(i) != null &&\n                old.get(i).delta != null &&\n                Math.abs(fresh.get(i).delta) < Math.abs(old.get(i).delta))\n              return true;\n          }\n        }\n\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f78c807c3692e5b227a71538672d87d78c3cd9ba","date":1495764154,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#isLessSerious(List[Violation],List[Violation]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#isLessSerious(List[Violation],List[Violation]).mjava","sourceNew":"    //check if the fresh set of violations is less serious than the last set of violations\n    boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n      if (old == null || fresh.size() < old.size()) return true;\n      if (fresh.size() == old.size()) {\n        for (int i = 0; i < fresh.size(); i++) {\n          Violation freshViolation = fresh.get(i);\n          Violation oldViolation = null;\n          for (Violation v : old) {\n            if (v.equals(freshViolation)) oldViolation = v;\n          }\n          if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n        }\n      }\n      return false;\n    }\n\n","sourceOld":"    boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n      if (old == null || fresh.size() < old.size()) return true;\n      if(fresh.size() == old.size()){\n        for (int i = 0; i < fresh.size(); i++) {\n          Violation freshViolation = fresh.get(i);\n          Violation oldViolation = null;\n          for (Violation v : old) {\n            if(v.equals(freshViolation)){\n              oldViolation =v;\n            }\n          }\n          if (oldViolation != null && oldViolation.delta != null &&\n              Math.abs(fresh.get(i).delta) < Math.abs(oldViolation.delta)) return true;\n        }\n\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#isLessSerious(List[Violation],List[Violation]).mjava","pathOld":"/dev/null","sourceNew":"    //check if the fresh set of violations is less serious than the last set of violations\n    boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n      if (old == null || fresh.size() < old.size()) return true;\n      if (fresh.size() == old.size()) {\n        for (int i = 0; i < fresh.size(); i++) {\n          Violation freshViolation = fresh.get(i);\n          Violation oldViolation = null;\n          for (Violation v : old) {\n            if (v.equals(freshViolation)) oldViolation = v;\n          }\n          if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n        }\n      }\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#isLessSerious(List[Violation],List[Violation]).mjava","pathOld":"/dev/null","sourceNew":"    //check if the fresh set of violations is less serious than the last set of violations\n    boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n      if (old == null || fresh.size() < old.size()) return true;\n      if (fresh.size() == old.size()) {\n        for (int i = 0; i < fresh.size(); i++) {\n          Violation freshViolation = fresh.get(i);\n          Violation oldViolation = null;\n          for (Violation v : old) {\n            if (v.equals(freshViolation)) oldViolation = v;\n          }\n          if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n        }\n      }\n      return false;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2","date":1498616740,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#isLessSerious(List[Violation],List[Violation]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#isLessSerious(List[Violation],List[Violation]).mjava","sourceNew":"    //check if the fresh set of violations is less serious than the last set of violations\n    boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n      if (old == null || fresh.size() < old.size()) return true;\n      if (fresh.size() == old.size()) {\n        for (int i = 0; i < fresh.size(); i++) {\n          Violation freshViolation = fresh.get(i);\n          Violation oldViolation = null;\n          for (Violation v : old) {\n            if (v.equals(freshViolation)) oldViolation = v;\n          }\n          if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n        }\n      }\n      return false;\n    }\n\n","sourceOld":"    //check if the fresh set of violations is less serious than the last set of violations\n    boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n      if (old == null || fresh.size() < old.size()) return true;\n      if (fresh.size() == old.size()) {\n        for (int i = 0; i < fresh.size(); i++) {\n          Violation freshViolation = fresh.get(i);\n          Violation oldViolation = null;\n          for (Violation v : old) {\n            if (v.equals(freshViolation)) oldViolation = v;\n          }\n          if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98f11c416d30e556e0004a9a84960702d12d35b1","date":1498628359,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Policy.Suggester#isLessSerious(List[Violation],List[Violation]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy.Suggester#isLessSerious(List[Violation],List[Violation]).mjava","sourceNew":"    //check if the fresh set of violations is less serious than the last set of violations\n    boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n      if (old == null || fresh.size() < old.size()) return true;\n      if (fresh.size() == old.size()) {\n        for (int i = 0; i < fresh.size(); i++) {\n          Violation freshViolation = fresh.get(i);\n          Violation oldViolation = null;\n          for (Violation v : old) {\n            if (v.equals(freshViolation)) oldViolation = v;\n          }\n          if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n        }\n      }\n      return false;\n    }\n\n","sourceOld":"    //check if the fresh set of violations is less serious than the last set of violations\n    boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n      if (old == null || fresh.size() < old.size()) return true;\n      if (fresh.size() == old.size()) {\n        for (int i = 0; i < fresh.size(); i++) {\n          Violation freshViolation = fresh.get(i);\n          Violation oldViolation = null;\n          for (Violation v : old) {\n            if (v.equals(freshViolation)) oldViolation = v;\n          }\n          if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n        }\n      }\n      return false;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f78c807c3692e5b227a71538672d87d78c3cd9ba":["901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b"],"98f11c416d30e556e0004a9a84960702d12d35b1":["f78c807c3692e5b227a71538672d87d78c3cd9ba","6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b":["f78c807c3692e5b227a71538672d87d78c3cd9ba"],"6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2":["98f11c416d30e556e0004a9a84960702d12d35b1"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["6249f3a9e6b3580715fd7ab5f4da0bf6e096f8f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","cd5edd1f2b162a5cfa08efd17851a07373a96817","a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"f78c807c3692e5b227a71538672d87d78c3cd9ba":["98f11c416d30e556e0004a9a84960702d12d35b1"],"98f11c416d30e556e0004a9a84960702d12d35b1":[],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["901d2a2f2fe0ff00c1c8578904e1f42e6ccbb21b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["98f11c416d30e556e0004a9a84960702d12d35b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}