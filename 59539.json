{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","commits":[{"id":"4497a62bc4277479a03071cdcaba45e97915cab0","date":1429346577,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      assertNotNull(overseer.getStats());\n      assertEquals(1, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cfac8a269377bb5c264180dfc67e9295f4e02f6d","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1168334ff18cba89b35f093ad62ed5bedd7eafc4","date":1446993752,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","sourceNew":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      // Wait till the leader election has finished\n      long maxWaitTimeForLeaderElection = 5000;\n      for (int i = 0; i < maxWaitTimeForLeaderElection / 200; i++) {\n        if (overseer.getStats().getSuccessCount(OverseerAction.LEADER.toLower()) > 0) {\n          break;\n        }\n        Thread.sleep(200);\n      }\n      assertNotNull(overseer.getStats());\n      assertEquals(1, (overseer.getStats().getSuccessCount(OverseerAction.LEADER.toLower())));\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.LEADER.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      assertNotNull(overseer.getStats());\n      assertEquals(1, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["cfac8a269377bb5c264180dfc67e9295f4e02f6d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d8a9442caf77529233e371fa6bfc13a1d4a01691","date":1446996109,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","sourceNew":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      // Wait till the leader election has finished\n      long maxWaitTimeForLeaderElection = 5000;\n      for (int i = 0; i < maxWaitTimeForLeaderElection / 200; i++) {\n        if (overseer.getStats().getSuccessCount(OverseerAction.LEADER.toLower()) > 0) {\n          break;\n        }\n        Thread.sleep(200);\n      }\n      assertNotNull(overseer.getStats());\n      assertEquals(1, (overseer.getStats().getSuccessCount(OverseerAction.LEADER.toLower())));\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.LEADER.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      // Wait till the leader election has finished\n      long maxWaitTimeForLeaderElection = 5000;\n      for (int i = 0; i < maxWaitTimeForLeaderElection / 200; i++) {\n        if (overseer.getStats().getSuccessCount(OverseerAction.LEADER.toLower()) > 0) {\n          break;\n        }\n        Thread.sleep(200);\n      }\n      assertNotNull(overseer.getStats());\n      assertEquals(1, (overseer.getStats().getSuccessCount(OverseerAction.LEADER.toLower())));\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.LEADER.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cfac8a269377bb5c264180dfc67e9295f4e02f6d","date":1447169310,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","sourceNew":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.RECOVERING, 1);\n\n      // Wait till the leader election has finished\n      long maxWaitTimeForLeaderElection = 5000;\n      for (int i = 0; i < maxWaitTimeForLeaderElection / 200; i++) {\n        if (overseer.getStats().getSuccessCount(OverseerAction.LEADER.toLower()) > 0) {\n          break;\n        }\n        Thread.sleep(200);\n      }\n      assertNotNull(overseer.getStats());\n      assertEquals(1, (overseer.getStats().getSuccessCount(OverseerAction.LEADER.toLower())));\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.LEADER.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["1168334ff18cba89b35f093ad62ed5bedd7eafc4","4497a62bc4277479a03071cdcaba45e97915cab0"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","sourceNew":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","sourceNew":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.publishState(collection, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7faee6ec986350688488b9513ac66bb38e260cd3","date":1493189582,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","sourceNew":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      MockZkController mockZkController = createMockZkController(zkClient, reader);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, mockZkController,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","sourceNew":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","sourceNew":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      MockZkController mockZkController = createMockZkController(zkClient, reader);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, mockZkController,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      MockZkController mockZkController = createMockZkController(zkClient, reader);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, mockZkController,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","sourceNew":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","sourceNew":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      MockZkController mockZkController = createMockZkController(zkClient, reader);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, mockZkController,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","sourceNew":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      MockZkController mockZkController = createMockZkController(zkClient, reader);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, mockZkController,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, null,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","sourceNew":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      MockZkController mockZkController = createMockZkController(server.getZkAddress(), zkClient, reader);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, mockZkController,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      MockZkController mockZkController = createMockZkController(zkClient, reader);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, mockZkController,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["7faee6ec986350688488b9513ac66bb38e260cd3"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","sourceNew":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader);\n      \n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer((HttpShardHandler) httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, zkController,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.createCollection(COLLECTION, 1);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1, true, overseers.get(0));\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    SolrZkClient zkClient = null;\n    try {\n      server.run();\n\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\");\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      MockZkController mockZkController = createMockZkController(server.getZkAddress(), zkClient, reader);\n      Overseer overseer = new Overseer(httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, mockZkController,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.createCollection(COLLECTION, 1);\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1);\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(zkClient);\n      close(reader);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","7faee6ec986350688488b9513ac66bb38e260cd3","4497a62bc4277479a03071cdcaba45e97915cab0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","sourceNew":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader);\n\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer((HttpShardHandler) httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, zkController,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.createCollection(COLLECTION, 1);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1, true, overseers.get(0));\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader);\n      \n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer((HttpShardHandler) httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, zkController,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.createCollection(COLLECTION, 1);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1, true, overseers.get(0));\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb8ae7c34bbb61a8b59bb942d9ce2c1fddbfd149","date":1586575561,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerTest#testOverseerStatsReset().mjava","sourceNew":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader);\n\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactory.init(new PluginInfo(\"shardHandlerFactory\", Collections.emptyMap()));\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer((HttpShardHandler) httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, zkController,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.createCollection(COLLECTION, 1);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1, true, overseers.get(0));\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(reader);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverseerStatsReset() throws Exception {\n    ZkStateReader reader = null;\n    MockZKController mockController = null;\n\n    try {\n\n      ZkController.createClusterZkNodes(zkClient);\n\n      reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      mockController = new MockZKController(server.getZkAddress(), \"node1\", overseers);\n\n      LeaderElector overseerElector = new LeaderElector(zkClient);\n      if (overseers.size() > 0) {\n        overseers.get(overseers.size() -1).close();\n        overseers.get(overseers.size() -1).getZkStateReader().getZkClient().close();\n      }\n      ZkController zkController = createMockZkController(server.getZkAddress(), zkClient, reader);\n\n      UpdateShardHandler updateShardHandler = new UpdateShardHandler(UpdateShardHandlerConfig.DEFAULT);\n      updateShardHandlers.add(updateShardHandler);\n      HttpShardHandlerFactory httpShardHandlerFactory = new HttpShardHandlerFactory();\n      httpShardHandlerFactorys.add(httpShardHandlerFactory);\n      Overseer overseer = new Overseer((HttpShardHandler) httpShardHandlerFactory.getShardHandler(), updateShardHandler, \"/admin/cores\", reader, zkController,\n          new CloudConfig.CloudConfigBuilder(\"127.0.0.1\", 8983, \"\").build());\n      overseers.add(overseer);\n      ElectionContext ec = new OverseerElectionContext(zkClient, overseer,\n          server.getZkAddress().replaceAll(\"/\", \"_\"));\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n\n      mockController.createCollection(COLLECTION, 1);\n\n      mockController.publishState(COLLECTION, \"core1\", \"core_node1\", \"shard1\", Replica.State.ACTIVE, 1, true, overseers.get(0));\n\n      assertNotNull(overseer.getStats());\n      assertTrue((overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())) > 0);\n\n      // shut it down\n      overseer.close();\n      ec.cancelElection();\n\n      // start it again\n      overseerElector.setup(ec);\n      overseerElector.joinElection(ec, false);\n      assertNotNull(overseer.getStats());\n      assertEquals(0, (overseer.getStats().getSuccessCount(OverseerAction.STATE.toLower())));\n\n    } finally {\n      close(mockController);\n      close(reader);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"5de502b5478255493125e7e801411ba17a6682ec":["cfac8a269377bb5c264180dfc67e9295f4e02f6d"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["5de502b5478255493125e7e801411ba17a6682ec"],"cfac8a269377bb5c264180dfc67e9295f4e02f6d":["d8a9442caf77529233e371fa6bfc13a1d4a01691"],"1168334ff18cba89b35f093ad62ed5bedd7eafc4":["4497a62bc4277479a03071cdcaba45e97915cab0"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["cfac8a269377bb5c264180dfc67e9295f4e02f6d"],"d8a9442caf77529233e371fa6bfc13a1d4a01691":["1168334ff18cba89b35f093ad62ed5bedd7eafc4"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["7faee6ec986350688488b9513ac66bb38e260cd3","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"4497a62bc4277479a03071cdcaba45e97915cab0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["5de502b5478255493125e7e801411ba17a6682ec","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7faee6ec986350688488b9513ac66bb38e260cd3":["6f20fd35e3055a0c5b387df0b986a68d65d86441"],"bb8ae7c34bbb61a8b59bb942d9ce2c1fddbfd149":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb8ae7c34bbb61a8b59bb942d9ce2c1fddbfd149"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"5de502b5478255493125e7e801411ba17a6682ec":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","28288370235ed02234a64753cdbf0c6ec096304a"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cfac8a269377bb5c264180dfc67e9295f4e02f6d":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"1168334ff18cba89b35f093ad62ed5bedd7eafc4":["d8a9442caf77529233e371fa6bfc13a1d4a01691"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["7faee6ec986350688488b9513ac66bb38e260cd3"],"d8a9442caf77529233e371fa6bfc13a1d4a01691":["cfac8a269377bb5c264180dfc67e9295f4e02f6d"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"4497a62bc4277479a03071cdcaba45e97915cab0":["1168334ff18cba89b35f093ad62ed5bedd7eafc4"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"7faee6ec986350688488b9513ac66bb38e260cd3":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4497a62bc4277479a03071cdcaba45e97915cab0"],"bb8ae7c34bbb61a8b59bb942d9ce2c1fddbfd149":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"560c18d71dad43d675158783c3840f8c80d6d39c":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb8ae7c34bbb61a8b59bb942d9ce2c1fddbfd149"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}