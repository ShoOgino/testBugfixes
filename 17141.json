{"path":"src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","commits":[{"id":"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1","date":1244392278,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryIndexReader#clone(boolean).mjava","sourceNew":"  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.closeDirectory = closeDirectory;\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n\n    return newReader;\n  }\n\n","sourceOld":"  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n\n    final SegmentInfos clonedInfos;\n    if (segmentInfos != null) {\n      clonedInfos = (SegmentInfos) segmentInfos.clone();\n    } else {\n      clonedInfos = null;\n    }\n    DirectoryIndexReader newReader = doReopen(clonedInfos, true, openReadOnly);\n    \n    if (this != newReader) {\n      newReader.init(directory, clonedInfos, closeDirectory, openReadOnly);\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      writeLock = null;\n      hasChanges = false;\n    }\n    \n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e54e4a9a2442944e55f58e835877841cdac1271","date":1244628560,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","sourceNew":"  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n\n    return newReader;\n  }\n\n","sourceOld":"  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.closeDirectory = closeDirectory;\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","sourceNew":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n\n    return newReader;\n  }\n\n","sourceOld":"  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/DirectoryReader#clone(boolean).mjava","sourceNew":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n\n    return newReader;\n  }\n\n","sourceOld":"  @Override\n  public final synchronized IndexReader clone(boolean openReadOnly) throws CorruptIndexException, IOException {\n    DirectoryReader newReader = doReopen((SegmentInfos) segmentInfos.clone(), true, openReadOnly);\n\n    if (this != newReader) {\n      newReader.deletionPolicy = deletionPolicy;\n    }\n    newReader.writer = writer;\n    // If we're cloning a non-readOnly reader, move the\n    // writeLock (if there is one) to the new reader:\n    if (!openReadOnly && writeLock != null) {\n      // In near real-time search, reader is always readonly\n      assert writer == null;\n      newReader.writeLock = writeLock;\n      newReader.hasChanges = hasChanges;\n      newReader.hasDeletions = hasDeletions;\n      writeLock = null;\n      hasChanges = false;\n    }\n\n    return newReader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8a9e385641d717e641408d8fbbc62be8fc766357":["4e54e4a9a2442944e55f58e835877841cdac1271"],"4e54e4a9a2442944e55f58e835877841cdac1271":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1":["4e54e4a9a2442944e55f58e835877841cdac1271"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4b0a12e9aa5d9fd24932c99a893fb6a04c74c1"],"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4e54e4a9a2442944e55f58e835877841cdac1271":["8a9e385641d717e641408d8fbbc62be8fc766357"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}