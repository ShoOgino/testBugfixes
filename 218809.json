{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(List[SegmentInfo]).mjava","commits":[{"id":"5270fb4f55a1b77663dda53cb8090c083f0a23b3","date":1305050821,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(List[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","sourceNew":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(List<SegmentInfo> infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(List[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(SegmentInfos).mjava","sourceNew":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(List<SegmentInfo> infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(SegmentInfos infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(List[SegmentInfo]).mjava","pathOld":"/dev/null","sourceNew":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(List<SegmentInfo> infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(List[SegmentInfo]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(List[SegmentInfo]).mjava","sourceNew":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(List<SegmentInfo> infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentCacheKey,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(new SegmentCacheKey(info, IOContext.Context.MERGE));\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }\n      }\n    }\n\n","sourceOld":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(List<SegmentInfo> infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentInfo,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(info);\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#clear(List[SegmentInfo]).mjava","sourceNew":null,"sourceOld":"    /** Forcefully clear changes for the specified segments.  This is called on successful merge. */\n    synchronized void clear(List<SegmentInfo> infos) throws IOException {\n      if (infos == null) {\n        for (Map.Entry<SegmentCacheKey,SegmentReader> ent: readerMap.entrySet()) {\n          ent.getValue().hasChanges = false;\n        }\n      } else {\n        for (final SegmentInfo info: infos) {\n          final SegmentReader r = readerMap.get(new SegmentCacheKey(info, IOContext.Context.MERGE));\n          if (r != null) {\n            r.hasChanges = false;\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"]},"commit2Childs":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","5270fb4f55a1b77663dda53cb8090c083f0a23b3"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5270fb4f55a1b77663dda53cb8090c083f0a23b3":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}