{"path":"lucene/core/src/java/org/apache/lucene/store/Lock.With#run().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Lock.With#run().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/Lock.With#run().mjava","sourceNew":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. Lock is released when\n     * {@link #doBody} exits.\n     * @throws LockObtainFailedException if lock could not\n     * be obtained\n     * @throws IOException if {@link Lock#obtain} throws IOException\n     */\n    public Object run() throws LockObtainFailedException, IOException {\n      boolean locked = false;\n      try {\n         locked = lock.obtain(lockWaitTimeout);\n         return doBody();\n      } finally {\n        if (locked)\n\t      lock.release();\n      }\n    }\n\n","sourceOld":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. Lock is released when\n     * {@link #doBody} exits.\n     * @throws LockObtainFailedException if lock could not\n     * be obtained\n     * @throws IOException if {@link Lock#obtain} throws IOException\n     */\n    public Object run() throws LockObtainFailedException, IOException {\n      boolean locked = false;\n      try {\n         locked = lock.obtain(lockWaitTimeout);\n         return doBody();\n      } finally {\n        if (locked)\n\t      lock.release();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Lock.With#run().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Lock.With#run().mjava","sourceNew":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. Lock is released when\n     * {@link #doBody} exits.\n     * @throws LockObtainFailedException if lock could not\n     * be obtained\n     * @throws IOException if {@link Lock#obtain} throws IOException\n     */\n    public Object run() throws IOException {\n      boolean locked = false;\n      try {\n         locked = lock.obtain(lockWaitTimeout);\n         return doBody();\n      } finally {\n        if (locked)\n\t      lock.release();\n      }\n    }\n\n","sourceOld":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. Lock is released when\n     * {@link #doBody} exits.\n     * @throws LockObtainFailedException if lock could not\n     * be obtained\n     * @throws IOException if {@link Lock#obtain} throws IOException\n     */\n    public Object run() throws LockObtainFailedException, IOException {\n      boolean locked = false;\n      try {\n         locked = lock.obtain(lockWaitTimeout);\n         return doBody();\n      } finally {\n        if (locked)\n\t      lock.release();\n      }\n    }\n\n","bugFix":["1b54a9bc667895a2095a886184bf69a3179e63df"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Lock.With#run().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Lock.With#run().mjava","sourceNew":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. Lock is released when\n     * {@link #doBody} exits.\n     * @throws LockObtainFailedException if lock could not\n     * be obtained\n     * @throws IOException if {@link Lock#obtain} throws IOException\n     */\n    public Object run() throws IOException {\n      boolean locked = false;\n      try {\n         locked = lock.obtain(lockWaitTimeout);\n         return doBody();\n      } finally {\n        if (locked)\n\t      lock.release();\n      }\n    }\n\n","sourceOld":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. Lock is released when\n     * {@link #doBody} exits.\n     * @throws LockObtainFailedException if lock could not\n     * be obtained\n     * @throws IOException if {@link Lock#obtain} throws IOException\n     */\n    public Object run() throws LockObtainFailedException, IOException {\n      boolean locked = false;\n      try {\n         locked = lock.obtain(lockWaitTimeout);\n         return doBody();\n      } finally {\n        if (locked)\n\t      lock.release();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Lock.With#run().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Lock.With#run().mjava","sourceNew":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. Lock is released when\n     * {@link #doBody} exits.\n     * @throws LockObtainFailedException if lock could not\n     * be obtained\n     * @throws IOException if {@link Lock#obtain} throws IOException\n     */\n    public Object run() throws IOException {\n      boolean locked = false;\n      try {\n         locked = lock.obtain(lockWaitTimeout);\n         return doBody();\n      } finally {\n        if (locked)\n          lock.release();\n      }\n    }\n\n","sourceOld":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. Lock is released when\n     * {@link #doBody} exits.\n     * @throws LockObtainFailedException if lock could not\n     * be obtained\n     * @throws IOException if {@link Lock#obtain} throws IOException\n     */\n    public Object run() throws IOException {\n      boolean locked = false;\n      try {\n         locked = lock.obtain(lockWaitTimeout);\n         return doBody();\n      } finally {\n        if (locked)\n\t      lock.release();\n      }\n    }\n\n","bugFix":null,"bugIntro":["0fcdcf196523675146a4df3193e91413533857ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0fcdcf196523675146a4df3193e91413533857ab","date":1390686560,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/Lock.With#run().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/Lock.With#run().mjava","sourceNew":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. Lock is released when\n     * {@link #doBody} exits.\n     * @throws LockObtainFailedException if lock could not\n     * be obtained\n     * @throws IOException if {@link Lock#obtain} throws IOException\n     */\n    public Object run() throws IOException {\n      boolean locked = false;\n      try {\n         locked = lock.obtain(lockWaitTimeout);\n         return doBody();\n      } finally {\n        if (locked) {\n          lock.close();\n        }\n      }\n    }\n\n","sourceOld":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. Lock is released when\n     * {@link #doBody} exits.\n     * @throws LockObtainFailedException if lock could not\n     * be obtained\n     * @throws IOException if {@link Lock#obtain} throws IOException\n     */\n    public Object run() throws IOException {\n      boolean locked = false;\n      try {\n         locked = lock.obtain(lockWaitTimeout);\n         return doBody();\n      } finally {\n        if (locked)\n          lock.release();\n      }\n    }\n\n","bugFix":["693a4c06f749274d170a2e87d4afb2709a810f46","4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/Lock.With#run().mjava","sourceNew":null,"sourceOld":"    /** Calls {@link #doBody} while <i>lock</i> is obtained.  Blocks if lock\n     * cannot be obtained immediately.  Retries to obtain lock once per second\n     * until it is obtained, or until it has tried ten times. Lock is released when\n     * {@link #doBody} exits.\n     * @throws LockObtainFailedException if lock could not\n     * be obtained\n     * @throws IOException if {@link Lock#obtain} throws IOException\n     */\n    public Object run() throws IOException {\n      boolean locked = false;\n      try {\n         locked = lock.obtain(lockWaitTimeout);\n         return doBody();\n      } finally {\n        if (locked) {\n          lock.close();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["0fcdcf196523675146a4df3193e91413533857ab"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0fcdcf196523675146a4df3193e91413533857ab":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["618635065f043788c9e034f96ca5cd5cea1b4592"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0fcdcf196523675146a4df3193e91413533857ab":["618635065f043788c9e034f96ca5cd5cea1b4592"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["0fcdcf196523675146a4df3193e91413533857ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}