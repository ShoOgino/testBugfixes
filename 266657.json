{"path":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRefBuilder).mjava","commits":[{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRef).mjava","sourceNew":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRefBuilder charsRef) {\n    final String value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        value = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.grow(value.length());\n    charsRef.setLength(value.length());\n    value.getChars(0, charsRef.length(), charsRef.chars(), 0);\n    return charsRef.get();\n  }\n\n","sourceOld":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRef charsRef) {\n    final String value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        value = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.grow(value.length());\n    charsRef.length = value.length();\n    value.getChars(0, charsRef.length, charsRef.chars, 0);\n    return charsRef;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331","date":1437383270,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRefBuilder).mjava","sourceNew":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRefBuilder charsRef) {\n    final String value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        value = DateFormatUtil.formatExternal(new Date(NumericUtils.prefixCodedToLong(indexedForm)));\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.grow(value.length());\n    charsRef.setLength(value.length());\n    value.getChars(0, charsRef.length(), charsRef.chars(), 0);\n    return charsRef.get();\n  }\n\n","sourceOld":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRefBuilder charsRef) {\n    final String value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        value = dateField.toExternal( new Date(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.grow(value.length());\n    charsRef.setLength(value.length());\n    value.getChars(0, charsRef.length(), charsRef.chars(), 0);\n    return charsRef.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRefBuilder).mjava","sourceNew":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRefBuilder charsRef) {\n    final String value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( LegacyNumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        value = Float.toString( LegacyNumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        value = Long.toString( LegacyNumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        value = Double.toString( LegacyNumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        value = DateFormatUtil.formatExternal(new Date(LegacyNumericUtils.prefixCodedToLong(indexedForm)));\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.grow(value.length());\n    charsRef.setLength(value.length());\n    value.getChars(0, charsRef.length(), charsRef.chars(), 0);\n    return charsRef.get();\n  }\n\n","sourceOld":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRefBuilder charsRef) {\n    final String value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( NumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(NumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        value = Long.toString( NumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(NumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        value = DateFormatUtil.formatExternal(new Date(NumericUtils.prefixCodedToLong(indexedForm)));\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.grow(value.length());\n    charsRef.setLength(value.length());\n    value.getChars(0, charsRef.length(), charsRef.chars(), 0);\n    return charsRef.get();\n  }\n\n","bugFix":null,"bugIntro":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRefBuilder).mjava","sourceNew":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRefBuilder charsRef) {\n    final String value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( LegacyNumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        value = Long.toString( LegacyNumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        value = DateFormatUtil.formatExternal(new Date(LegacyNumericUtils.prefixCodedToLong(indexedForm)));\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.grow(value.length());\n    charsRef.setLength(value.length());\n    value.getChars(0, charsRef.length(), charsRef.chars(), 0);\n    return charsRef.get();\n  }\n\n","sourceOld":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRefBuilder charsRef) {\n    final String value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( LegacyNumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        value = Float.toString( LegacyNumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        value = Long.toString( LegacyNumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        value = Double.toString( LegacyNumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        value = DateFormatUtil.formatExternal(new Date(LegacyNumericUtils.prefixCodedToLong(indexedForm)));\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.grow(value.length());\n    charsRef.setLength(value.length());\n    value.getChars(0, charsRef.length(), charsRef.chars(), 0);\n    return charsRef.get();\n  }\n\n","bugFix":["770342641f7b505eaa8dccdc666158bff2419109"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRefBuilder).mjava","sourceNew":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRefBuilder charsRef) {\n    final String value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( LegacyNumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        value = Long.toString( LegacyNumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        value = DateFormatUtil.formatExternal(new Date(LegacyNumericUtils.prefixCodedToLong(indexedForm)));\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.grow(value.length());\n    charsRef.setLength(value.length());\n    value.getChars(0, charsRef.length(), charsRef.chars(), 0);\n    return charsRef.get();\n  }\n\n","sourceOld":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRefBuilder charsRef) {\n    final String value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( LegacyNumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        value = Float.toString( LegacyNumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        value = Long.toString( LegacyNumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        value = Double.toString( LegacyNumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        value = DateFormatUtil.formatExternal(new Date(LegacyNumericUtils.prefixCodedToLong(indexedForm)));\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.grow(value.length());\n    charsRef.setLength(value.length());\n    value.getChars(0, charsRef.length(), charsRef.chars(), 0);\n    return charsRef.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3f6c7717a0f1decd1668144537943efcc70cd95","date":1459359762,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRefBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#indexedToReadable(BytesRef,CharsRefBuilder).mjava","sourceNew":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRefBuilder charsRef) {\n    final String value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( LegacyNumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        value = Long.toString( LegacyNumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        value = Instant.ofEpochMilli(LegacyNumericUtils.prefixCodedToLong(indexedForm)).toString();\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.grow(value.length());\n    charsRef.setLength(value.length());\n    value.getChars(0, charsRef.length(), charsRef.chars(), 0);\n    return charsRef.get();\n  }\n\n","sourceOld":"  @Override\n  public CharsRef indexedToReadable(BytesRef indexedForm, CharsRefBuilder charsRef) {\n    final String value;\n    switch (type) {\n      case INTEGER:\n        value = Integer.toString( LegacyNumericUtils.prefixCodedToInt(indexedForm) );\n        break;\n      case FLOAT:\n        value = Float.toString( NumericUtils.sortableIntToFloat(LegacyNumericUtils.prefixCodedToInt(indexedForm)) );\n        break;\n      case LONG:\n        value = Long.toString( LegacyNumericUtils.prefixCodedToLong(indexedForm) );\n        break;\n      case DOUBLE:\n        value = Double.toString( NumericUtils.sortableLongToDouble(LegacyNumericUtils.prefixCodedToLong(indexedForm)) );\n        break;\n      case DATE:\n        value = DateFormatUtil.formatExternal(new Date(LegacyNumericUtils.prefixCodedToLong(indexedForm)));\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n    charsRef.grow(value.length());\n    charsRef.setLength(value.length());\n    value.getChars(0, charsRef.length(), charsRef.chars(), 0);\n    return charsRef.get();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"770342641f7b505eaa8dccdc666158bff2419109":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"d3f6c7717a0f1decd1668144537943efcc70cd95":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["d3f6c7717a0f1decd1668144537943efcc70cd95"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["0c38a05f7a7b43c2dabbd25f12f9941c64bb2331"],"770342641f7b505eaa8dccdc666158bff2419109":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"0c38a05f7a7b43c2dabbd25f12f9941c64bb2331":["770342641f7b505eaa8dccdc666158bff2419109"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}