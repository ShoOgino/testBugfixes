{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","sourceNew":"  @Override\n  public DocData parse(DocData docData, String name, TrecContentSource trecSrc, \n      StringBuilder docBuf, ParsePathType pathType) throws IOException, InterruptedException {\n    // Set up a (per-thread) reused Reader over the read content, reset it to re-read from docBuf\n    Reader r = trecSrc.getTrecDocReader(docBuf);\n\n    // skip some of the text, optionally set date\n    Date date = null;\n    int h1 = docBuf.indexOf(DOCHDR);\n    if (h1>=0) {\n      int h2 = docBuf.indexOf(TERMINATING_DOCHDR,h1);\n      String dateStr = extract(docBuf, DATE, DATE_END, h2, null);\n      if (dateStr != null) {\n        date = trecSrc.parseDate(dateStr);\n      }\n      r.mark(h2+TERMINATING_DOCHDR_LENGTH);\n    }\n\n    r.reset();\n    HTMLParser htmlParser = trecSrc.getHtmlParser();\n    return htmlParser.parse(docData, name, date, null, r, null);\n  }\n\n","sourceOld":"  @Override\n  public DocData parse(DocData docData, String name, TrecContentSource trecSrc, \n      StringBuilder docBuf, ParsePathType pathType) throws IOException, InterruptedException {\n    // Set up a (per-thread) reused Reader over the read content, reset it to re-read from docBuf\n    Reader r = trecSrc.getTrecDocReader(docBuf);\n\n    // skip some of the text, optionally set date\n    Date date = null;\n    int h1 = docBuf.indexOf(DOCHDR);\n    if (h1>=0) {\n      int h2 = docBuf.indexOf(TERMINATING_DOCHDR,h1);\n      String dateStr = extract(docBuf, DATE, DATE_END, h2, null);\n      if (dateStr != null) {\n        date = trecSrc.parseDate(dateStr);\n      }\n      r.mark(h2+TERMINATING_DOCHDR_LENGTH);\n    }\n\n    r.reset();\n    HTMLParser htmlParser = trecSrc.getHtmlParser();\n    return htmlParser.parse(docData, name, date, null, r, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91e8768e9769f9e5175b1d99dcd27600bc9d4374","date":1342373687,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","sourceNew":"  @Override\n  public DocData parse(DocData docData, String name, TrecContentSource trecSrc, \n      StringBuilder docBuf, ParsePathType pathType) throws IOException {\n    // skip some of the non-html text, optionally set date\n    Date date = null;\n    int start = 0;\n    final int h1 = docBuf.indexOf(DOCHDR);\n    if (h1 >= 0) {\n      final int h2 = docBuf.indexOf(TERMINATING_DOCHDR, h1);\n      final String dateStr = extract(docBuf, DATE, DATE_END, h2, null);\n      if (dateStr != null) {\n        date = trecSrc.parseDate(dateStr);\n      }\n      start = h2 + TERMINATING_DOCHDR.length();\n    }\n    final String html = docBuf.substring(start);\n    return trecSrc.getHtmlParser().parse(docData, name, date, new StringReader(html), trecSrc);\n  }\n\n","sourceOld":"  @Override\n  public DocData parse(DocData docData, String name, TrecContentSource trecSrc, \n      StringBuilder docBuf, ParsePathType pathType) throws IOException, InterruptedException {\n    // Set up a (per-thread) reused Reader over the read content, reset it to re-read from docBuf\n    Reader r = trecSrc.getTrecDocReader(docBuf);\n\n    // skip some of the text, optionally set date\n    Date date = null;\n    int h1 = docBuf.indexOf(DOCHDR);\n    if (h1>=0) {\n      int h2 = docBuf.indexOf(TERMINATING_DOCHDR,h1);\n      String dateStr = extract(docBuf, DATE, DATE_END, h2, null);\n      if (dateStr != null) {\n        date = trecSrc.parseDate(dateStr);\n      }\n      r.mark(h2+TERMINATING_DOCHDR_LENGTH);\n    }\n\n    r.reset();\n    HTMLParser htmlParser = trecSrc.getHtmlParser();\n    return htmlParser.parse(docData, name, date, null, r, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","sourceNew":"  @Override\n  public DocData parse(DocData docData, String name, TrecContentSource trecSrc, \n      StringBuilder docBuf, ParsePathType pathType) throws IOException {\n    // skip some of the non-html text, optionally set date\n    Date date = null;\n    int start = 0;\n    final int h1 = docBuf.indexOf(DOCHDR);\n    if (h1 >= 0) {\n      final int h2 = docBuf.indexOf(TERMINATING_DOCHDR, h1);\n      final String dateStr = extract(docBuf, DATE, DATE_END, h2, null);\n      if (dateStr != null) {\n        date = trecSrc.parseDate(dateStr);\n      }\n      start = h2 + TERMINATING_DOCHDR.length();\n    }\n    final String html = docBuf.substring(start);\n    return trecSrc.getHtmlParser().parse(docData, name, date, new StringReader(html), trecSrc);\n  }\n\n","sourceOld":"  @Override\n  public DocData parse(DocData docData, String name, TrecContentSource trecSrc, \n      StringBuilder docBuf, ParsePathType pathType) throws IOException, InterruptedException {\n    // Set up a (per-thread) reused Reader over the read content, reset it to re-read from docBuf\n    Reader r = trecSrc.getTrecDocReader(docBuf);\n\n    // skip some of the text, optionally set date\n    Date date = null;\n    int h1 = docBuf.indexOf(DOCHDR);\n    if (h1>=0) {\n      int h2 = docBuf.indexOf(TERMINATING_DOCHDR,h1);\n      String dateStr = extract(docBuf, DATE, DATE_END, h2, null);\n      if (dateStr != null) {\n        date = trecSrc.parseDate(dateStr);\n      }\n      r.mark(h2+TERMINATING_DOCHDR_LENGTH);\n    }\n\n    r.reset();\n    HTMLParser htmlParser = trecSrc.getHtmlParser();\n    return htmlParser.parse(docData, name, date, null, r, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","sourceNew":"  @Override\n  public DocData parse(DocData docData, String name, TrecContentSource trecSrc, \n      StringBuilder docBuf, ParsePathType pathType) throws IOException {\n    // skip some of the non-html text, optionally set date\n    Date date = null;\n    int start = 0;\n    final int h1 = docBuf.indexOf(DOCHDR);\n    if (h1 >= 0) {\n      final int h2 = docBuf.indexOf(TERMINATING_DOCHDR, h1);\n      final String dateStr = extract(docBuf, DATE, DATE_END, h2, null);\n      if (dateStr != null) {\n        date = trecSrc.parseDate(dateStr);\n      }\n      start = h2 + TERMINATING_DOCHDR.length();\n    }\n    final String html = docBuf.substring(start);\n    return trecSrc.getHtmlParser().parse(docData, name, date, new StringReader(html), trecSrc);\n  }\n\n","sourceOld":"  @Override\n  public DocData parse(DocData docData, String name, TrecContentSource trecSrc, \n      StringBuilder docBuf, ParsePathType pathType) throws IOException, InterruptedException {\n    // Set up a (per-thread) reused Reader over the read content, reset it to re-read from docBuf\n    Reader r = trecSrc.getTrecDocReader(docBuf);\n\n    // skip some of the text, optionally set date\n    Date date = null;\n    int h1 = docBuf.indexOf(DOCHDR);\n    if (h1>=0) {\n      int h2 = docBuf.indexOf(TERMINATING_DOCHDR,h1);\n      String dateStr = extract(docBuf, DATE, DATE_END, h2, null);\n      if (dateStr != null) {\n        date = trecSrc.parseDate(dateStr);\n      }\n      r.mark(h2+TERMINATING_DOCHDR_LENGTH);\n    }\n\n    r.reset();\n    HTMLParser htmlParser = trecSrc.getHtmlParser();\n    return htmlParser.parse(docData, name, date, null, r, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","sourceNew":"  @Override\n  public DocData parse(DocData docData, String name, TrecContentSource trecSrc, \n      StringBuilder docBuf, ParsePathType pathType) throws IOException {\n    // skip some of the non-html text, optionally set date\n    Date date = null;\n    int start = 0;\n    final int h1 = docBuf.indexOf(DOCHDR);\n    if (h1 >= 0) {\n      final int h2 = docBuf.indexOf(TERMINATING_DOCHDR, h1);\n      final String dateStr = extract(docBuf, DATE, DATE_END, h2, null);\n      if (dateStr != null) {\n        date = trecSrc.parseDate(dateStr);\n      }\n      start = h2 + TERMINATING_DOCHDR.length();\n    }\n    final String html = docBuf.substring(start);\n    return trecSrc.getHtmlParser().parse(docData, name, date, new StringReader(html), trecSrc);\n  }\n\n","sourceOld":"  @Override\n  public DocData parse(DocData docData, String name, TrecContentSource trecSrc, \n      StringBuilder docBuf, ParsePathType pathType) throws IOException {\n    // skip some of the non-html text, optionally set date\n    Date date = null;\n    int start = 0;\n    final int h1 = docBuf.indexOf(DOCHDR);\n    if (h1 >= 0) {\n      final int h2 = docBuf.indexOf(TERMINATING_DOCHDR, h1);\n      final String dateStr = extract(docBuf, DATE, DATE_END, h2, null);\n      if (dateStr != null) {\n        date = trecSrc.parseDate(dateStr);\n      }\n      start = h2 + TERMINATING_DOCHDR.length();\n    }\n    final String html = docBuf.substring(start);\n    return trecSrc.getHtmlParser().parse(docData, name, date, new StringReader(html), trecSrc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/TrecGov2Parser#parse(DocData,String,TrecContentSource,StringBuilder,ParsePathType).mjava","sourceNew":"  @Override\n  public DocData parse(DocData docData, String name, TrecContentSource trecSrc, \n      StringBuilder docBuf, ParsePathType pathType) throws IOException {\n    // skip some of the non-html text, optionally set date\n    Date date = null;\n    int start = 0;\n    final int h1 = docBuf.indexOf(DOCHDR);\n    if (h1 >= 0) {\n      final int h2 = docBuf.indexOf(TERMINATING_DOCHDR, h1);\n      final String dateStr = extract(docBuf, DATE, DATE_END, h2, null);\n      if (dateStr != null) {\n        date = trecSrc.parseDate(dateStr);\n      }\n      start = h2 + TERMINATING_DOCHDR.length();\n    }\n    final String html = docBuf.substring(start);\n    return trecSrc.getHtmlParser().parse(docData, name, date, new StringReader(html), trecSrc);\n  }\n\n","sourceOld":"  @Override\n  public DocData parse(DocData docData, String name, TrecContentSource trecSrc, \n      StringBuilder docBuf, ParsePathType pathType) throws IOException {\n    // skip some of the non-html text, optionally set date\n    Date date = null;\n    int start = 0;\n    final int h1 = docBuf.indexOf(DOCHDR);\n    if (h1 >= 0) {\n      final int h2 = docBuf.indexOf(TERMINATING_DOCHDR, h1);\n      final String dateStr = extract(docBuf, DATE, DATE_END, h2, null);\n      if (dateStr != null) {\n        date = trecSrc.parseDate(dateStr);\n      }\n      start = h2 + TERMINATING_DOCHDR.length();\n    }\n    final String html = docBuf.substring(start);\n    return trecSrc.getHtmlParser().parse(docData, name, date, new StringReader(html), trecSrc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","91e8768e9769f9e5175b1d99dcd27600bc9d4374"],"91e8768e9769f9e5175b1d99dcd27600bc9d4374":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","91e8768e9769f9e5175b1d99dcd27600bc9d4374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["91e8768e9769f9e5175b1d99dcd27600bc9d4374"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["91e8768e9769f9e5175b1d99dcd27600bc9d4374"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["aba371508186796cc6151d8223a5b4e16d02e26e","91e8768e9769f9e5175b1d99dcd27600bc9d4374","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"91e8768e9769f9e5175b1d99dcd27600bc9d4374":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}