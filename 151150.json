{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","commits":[{"id":"cf4e43a4d7a969632d4bec76fd5bba149cb81487","date":1342043143,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, ZkStateReader.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // its okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, ZkStateReader.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if(data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String,String> newProps = new HashMap<String,String>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n    \n    // TODO: we should consider using version\n    zkClient.setData(path, ZkStateReader.toJSON(props), true);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, ZkStateReader.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // its okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, ZkStateReader.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if(data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String,String> newProps = new HashMap<String,String>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n    \n    // TODO: we should consider using version\n    zkClient.setData(path, ZkStateReader.toJSON(props), true);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, ZkStateReader.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // its okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, ZkStateReader.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if(data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String,String> newProps = new HashMap<String,String>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n    \n    // TODO: we should consider using version\n    zkClient.setData(path, ZkStateReader.toJSON(props), true);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","sourceNew":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, ZkStateReader.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // its okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, ZkStateReader.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if(data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String,Object> newProps = new HashMap<String,Object>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n    \n    // TODO: we should consider using version\n    zkClient.setData(path, ZkStateReader.toJSON(props), true);\n\n  }\n\n","sourceOld":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, ZkStateReader.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // its okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, ZkStateReader.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if(data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String,String> newProps = new HashMap<String,String>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n    \n    // TODO: we should consider using version\n    zkClient.setData(path, ZkStateReader.toJSON(props), true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","sourceNew":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, ZkStateReader.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // its okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, ZkStateReader.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if(data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String,Object> newProps = new HashMap<>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n    \n    // TODO: we should consider using version\n    zkClient.setData(path, ZkStateReader.toJSON(props), true);\n\n  }\n\n","sourceOld":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, ZkStateReader.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // its okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, ZkStateReader.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if(data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String,Object> newProps = new HashMap<String,Object>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n    \n    // TODO: we should consider using version\n    zkClient.setData(path, ZkStateReader.toJSON(props), true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","sourceNew":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, ZkStateReader.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, ZkStateReader.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if(data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String,Object> newProps = new HashMap<>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n    \n    // TODO: we should consider using version\n    zkClient.setData(path, ZkStateReader.toJSON(props), true);\n\n  }\n\n","sourceOld":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, ZkStateReader.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // its okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, ZkStateReader.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if(data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String,Object> newProps = new HashMap<>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n    \n    // TODO: we should consider using version\n    zkClient.setData(path, ZkStateReader.toJSON(props), true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","sourceNew":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, ZkStateReader.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, ZkStateReader.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if (data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String, Object> newProps = new HashMap<>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n\n    // TODO: we should consider using version\n    zkClient.setData(path, ZkStateReader.toJSON(props), true);\n\n  }\n\n","sourceOld":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, ZkStateReader.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, ZkStateReader.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if(data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String,Object> newProps = new HashMap<>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n    \n    // TODO: we should consider using version\n    zkClient.setData(path, ZkStateReader.toJSON(props), true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","sourceNew":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, ZkStateReader.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, ZkStateReader.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if (data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String, Object> newProps = new HashMap<>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n\n    // TODO: we should consider using version\n    zkClient.setData(path, ZkStateReader.toJSON(props), true);\n\n  }\n\n","sourceOld":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, ZkStateReader.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, ZkStateReader.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if(data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String,Object> newProps = new HashMap<>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n    \n    // TODO: we should consider using version\n    zkClient.setData(path, ZkStateReader.toJSON(props), true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","sourceNew":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, Utils.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, Utils.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if (data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String, Object> newProps = new HashMap<>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n\n    // TODO: we should consider using version\n    zkClient.setData(path, Utils.toJSON(props), true);\n\n  }\n\n","sourceOld":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, ZkStateReader.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, ZkStateReader.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if (data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String, Object> newProps = new HashMap<>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n\n    // TODO: we should consider using version\n    zkClient.setData(path, ZkStateReader.toJSON(props), true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","sourceNew":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    log.debug(\"Load collection config from:\" + path);\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, Utils.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, Utils.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if (data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String, Object> newProps = new HashMap<>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n\n    // TODO: we should consider using version\n    zkClient.setData(path, Utils.toJSON(props), true);\n\n  }\n\n","sourceOld":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, Utils.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, Utils.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if (data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String, Object> newProps = new HashMap<>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n\n    // TODO: we should consider using version\n    zkClient.setData(path, Utils.toJSON(props), true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","sourceNew":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    log.debug(\"Load collection config from:\" + path);\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, Utils.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, Utils.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if (data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String, Object> newProps = new HashMap<>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n\n    // TODO: we should consider using version\n    zkClient.setData(path, Utils.toJSON(props), true);\n\n  }\n\n","sourceOld":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, Utils.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, Utils.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if (data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String, Object> newProps = new HashMap<>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n\n    // TODO: we should consider using version\n    zkClient.setData(path, Utils.toJSON(props), true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","sourceNew":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    log.debug(\"Load collection config from:\" + path);\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, Utils.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, Utils.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if (data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String, Object> newProps = new HashMap<>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n\n    // TODO: we should consider using version\n    zkClient.setData(path, Utils.toJSON(props), true);\n\n  }\n\n","sourceOld":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    if (log.isInfoEnabled()) {\n      log.info(\"Load collection config from:\" + path);\n    }\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, Utils.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, Utils.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if (data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String, Object> newProps = new HashMap<>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n\n    // TODO: we should consider using version\n    zkClient.setData(path, Utils.toJSON(props), true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","date":1571071547,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","sourceNew":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    log.debug(\"Load collection config from:\" + path);\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, Utils.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, Utils.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if (data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String, Object> newProps = new HashMap<>(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n\n    // TODO: we should consider using version\n    zkClient.setData(path, Utils.toJSON(props), true);\n\n  }\n\n","sourceOld":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    log.debug(\"Load collection config from:\" + path);\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, Utils.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, Utils.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if (data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String, Object> newProps = new HashMap<>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n\n    // TODO: we should consider using version\n    zkClient.setData(path, Utils.toJSON(props), true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","sourceNew":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    log.debug(\"Load collection config from:\" + path);\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, Utils.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, Utils.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if (data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String, Object> newProps = new HashMap<>(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n\n    // TODO: we should consider using version\n    zkClient.setData(path, Utils.toJSON(props), true);\n\n  }\n\n","sourceOld":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    log.debug(\"Load collection config from:\" + path);\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, Utils.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, Utils.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if (data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String, Object> newProps = new HashMap<>();\n      newProps.putAll(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n\n    // TODO: we should consider using version\n    zkClient.setData(path, Utils.toJSON(props), true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#linkConfSet(SolrZkClient,String,String).mjava","sourceNew":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    log.debug(\"Load collection config from:{}\", path);\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, Utils.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, Utils.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if (data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String, Object> newProps = new HashMap<>(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n\n    // TODO: we should consider using version\n    zkClient.setData(path, Utils.toJSON(props), true);\n\n  }\n\n","sourceOld":"  public static void linkConfSet(SolrZkClient zkClient, String collection, String confSetName) throws KeeperException, InterruptedException {\n    String path = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    log.debug(\"Load collection config from:\" + path);\n    byte[] data;\n    try {\n      data = zkClient.getData(path, null, null, true);\n    } catch (NoNodeException e) {\n      // if there is no node, we will try and create it\n      // first try to make in case we are pre configuring\n      ZkNodeProps props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n      try {\n\n        zkClient.makePath(path, Utils.toJSON(props),\n            CreateMode.PERSISTENT, null, true);\n      } catch (KeeperException e2) {\n        // it's okay if the node already exists\n        if (e2.code() != KeeperException.Code.NODEEXISTS) {\n          throw e;\n        }\n        // if we fail creating, setdata\n        // TODO: we should consider using version\n        zkClient.setData(path, Utils.toJSON(props), true);\n      }\n      return;\n    }\n    // we found existing data, let's update it\n    ZkNodeProps props = null;\n    if (data != null) {\n      props = ZkNodeProps.load(data);\n      Map<String, Object> newProps = new HashMap<>(props.getProperties());\n      newProps.put(CONFIGNAME_PROP, confSetName);\n      props = new ZkNodeProps(newProps);\n    } else {\n      props = new ZkNodeProps(CONFIGNAME_PROP, confSetName);\n    }\n\n    // TODO: we should consider using version\n    zkClient.setData(path, Utils.toJSON(props), true);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fa64435b5902ce266c23755a4a00691a3285dab8"],"962cd4f5e313777f35da8f521265323e84184929":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"fa64435b5902ce266c23755a4a00691a3285dab8":["cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"ad4957cde742defe6db19689abdc267c5d948066":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b693a83132c9e45afcd564fd65a25b60ed80388b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","fbcfc050b9f253136eaa5950b57248b2109eac11"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"cf4e43a4d7a969632d4bec76fd5bba149cb81487":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf4e43a4d7a969632d4bec76fd5bba149cb81487"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b693a83132c9e45afcd564fd65a25b60ed80388b","962cd4f5e313777f35da8f521265323e84184929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad4957cde742defe6db19689abdc267c5d948066"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"b0b597c65628ca9e73913a07e81691f8229bae35":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"]},"commit2Childs":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["ad4957cde742defe6db19689abdc267c5d948066","b0b597c65628ca9e73913a07e81691f8229bae35"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"fa64435b5902ce266c23755a4a00691a3285dab8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["962cd4f5e313777f35da8f521265323e84184929","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ad4957cde742defe6db19689abdc267c5d948066":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"cf4e43a4d7a969632d4bec76fd5bba149cb81487":["fa64435b5902ce266c23755a4a00691a3285dab8","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","cf4e43a4d7a969632d4bec76fd5bba149cb81487","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["b693a83132c9e45afcd564fd65a25b60ed80388b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}