{"path":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","commits":[{"id":"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b","date":1313816278,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/queries/src/test/org/apache/lucene/search/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", Field.Store.NO,\n        Field.Index.ANALYZED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.optimize();\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexSearcher searcher = new IndexSearcher(directory, true);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    searcher.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","pathOld":"lucene/contrib/sandbox/src/test/org/apache/lucene/sandbox/queries/regex/TestSpanRegexQuery#testSpanRegex().mjava","sourceNew":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testSpanRegex() throws Exception {\n    Directory directory = newDirectory();\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    // doc.add(newField(\"field\", \"the quick brown fox jumps over the lazy dog\",\n    // Field.Store.NO, Field.Index.ANALYZED));\n    // writer.addDocument(doc);\n    // doc = new Document();\n    doc.add(newField(\"field\", \"auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newField(\"field\", \"first auto update\", TextField.TYPE_UNSTORED));\n    writer.addDocument(doc);\n    writer.forceMerge(1);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(directory);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    SpanQuery srq = new SpanMultiTermQueryWrapper<RegexQuery>(new RegexQuery(new Term(\"field\", \"aut.*\")));\n    SpanFirstQuery sfq = new SpanFirstQuery(srq, 1);\n    // SpanNearQuery query = new SpanNearQuery(new SpanQuery[] {srq, stq}, 6,\n    // true);\n    int numHits = searcher.search(sfq, null, 1000).totalHits;\n    assertEquals(1, numHits);\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"f9fdc0777b84633cc8cfa8995ff5b0d411e4515b":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f9fdc0777b84633cc8cfa8995ff5b0d411e4515b"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}