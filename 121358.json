{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/DistribStateManager#listTree(String).mjava","commits":[{"id":"014d96f9396e00db51d613291a3568fb75f058ad","date":1521025196,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/DistribStateManager#listTree(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/DistribStateManager#listTree(String).mjava","sourceNew":"  /**\n   * List a subtree including the root path, using breadth-first traversal.\n   * @param root root path\n   * @return list of full paths, with the root path being the first element\n   */\n  default List<String> listTree(String root) throws NoSuchElementException, IOException, KeeperException, InterruptedException {\n    Deque<String> queue = new LinkedList<String>();\n    List<String> tree = new ArrayList<String>();\n    if (!root.startsWith(\"/\")) {\n      root = \"/\" + root;\n    }\n    queue.add(root);\n    tree.add(root);\n    while (true) {\n      String node = queue.pollFirst();\n      if (node == null) {\n        break;\n      }\n      List<String> children = listData(node);\n      for (final String child : children) {\n        final String childPath = node + \"/\" + child;\n        queue.add(childPath);\n        tree.add(childPath);\n      }\n    }\n    return tree;\n  }\n\n","sourceOld":"  /**\n   * List a subtree including the root path, using breadth-first traversal.\n   * @param root root path\n   * @return list of full paths, with the root path being the first element\n   */\n  default List<String> listTree(String root) throws NoSuchElementException, IOException, KeeperException, InterruptedException {\n    Deque<String> queue = new LinkedList<String>();\n    List<String> tree = new ArrayList<String>();\n    if (!root.startsWith(\"/\")) {\n      root = \"/\" + root;\n    }\n    queue.add(root);\n    tree.add(root);\n    while (true) {\n      String node = queue.pollFirst();\n      if (node == null) {\n        break;\n      }\n      List<String> children = listData(node);\n      for (final String child : children) {\n        final String childPath = node + \"/\" + child;\n        queue.add(childPath);\n        tree.add(childPath);\n      }\n    }\n    return tree;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/DistribStateManager#listTree(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/DistribStateManager#listTree(String).mjava","sourceNew":"  /**\n   * List a subtree including the root path, using breadth-first traversal.\n   * @param root root path\n   * @return list of full paths, with the root path being the first element\n   */\n  default List<String> listTree(String root) throws NoSuchElementException, IOException, KeeperException, InterruptedException {\n    Deque<String> queue = new LinkedList<String>();\n    List<String> tree = new ArrayList<String>();\n    if (!root.startsWith(\"/\")) {\n      root = \"/\" + root;\n    }\n    queue.add(root);\n    tree.add(root);\n    while (true) {\n      String node = queue.pollFirst();\n      if (node == null) {\n        break;\n      }\n      List<String> children = listData(node);\n      for (final String child : children) {\n        final String childPath = node + (node.equals(\"/\") ? \"\" : \"/\") + child;\n        queue.add(childPath);\n        tree.add(childPath);\n      }\n    }\n    return tree;\n  }\n\n","sourceOld":"  /**\n   * List a subtree including the root path, using breadth-first traversal.\n   * @param root root path\n   * @return list of full paths, with the root path being the first element\n   */\n  default List<String> listTree(String root) throws NoSuchElementException, IOException, KeeperException, InterruptedException {\n    Deque<String> queue = new LinkedList<String>();\n    List<String> tree = new ArrayList<String>();\n    if (!root.startsWith(\"/\")) {\n      root = \"/\" + root;\n    }\n    queue.add(root);\n    tree.add(root);\n    while (true) {\n      String node = queue.pollFirst();\n      if (node == null) {\n        break;\n      }\n      List<String> children = listData(node);\n      for (final String child : children) {\n        final String childPath = node + \"/\" + child;\n        queue.add(childPath);\n        tree.add(childPath);\n      }\n    }\n    return tree;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"014d96f9396e00db51d613291a3568fb75f058ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["014d96f9396e00db51d613291a3568fb75f058ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["014d96f9396e00db51d613291a3568fb75f058ad"],"014d96f9396e00db51d613291a3568fb75f058ad":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}