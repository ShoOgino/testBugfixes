{"path":"src/java/org/apache/solr/handler/component/DistribFieldFacet[FacetComponent]#add(int,NamedList,int).mjava","commits":[{"id":"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76","date":1204055227,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/DistribFieldFacet[FacetComponent]#add(int,NamedList,int).mjava","pathOld":"/dev/null","sourceNew":"  void add(int shardNum, NamedList shardCounts, int numRequested) {\n    int sz = shardCounts.size();\n    int numReceived = sz;\n\n    OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n    long last = 0;\n    for (int i=0; i<sz; i++) {\n      String name = shardCounts.getName(i);\n      long count = ((Number)shardCounts.getVal(i)).longValue();\n      if (name == null) {\n        missingCount += count;\n        numReceived--;\n      } else {\n        ShardFacetCount sfc = counts.get(name);\n        if (sfc == null) {\n          sfc = new ShardFacetCount();\n          sfc.name = name;\n          sfc.termNum = termNum++;\n          counts.put(name, sfc);\n        }\n        sfc.count += count;\n        terms.fastSet(sfc.termNum);\n        last = count;\n      }\n    }\n\n    // the largest possible missing term is 0 if we received less\n    // than the number requested (provided mincount==0 like it should be for\n    // a shard request)\n    if (numRequested !=0 && numReceived < numRequested) {\n      last = 0;\n    }\n\n    missingMaxPossible += last;\n    missingMax[shardNum] = last;\n    counted[shardNum] = terms;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9ac277fcde6efbfb4b34a6b2cdbda483003cda18"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ac277fcde6efbfb4b34a6b2cdbda483003cda18","date":1220648479,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/DistribFieldFacet[FacetComponent]#add(int,NamedList,int).mjava","pathOld":"src/java/org/apache/solr/handler/component/DistribFieldFacet[FacetComponent]#add(int,NamedList,int).mjava","sourceNew":"  void add(int shardNum, NamedList shardCounts, int numRequested) {\n    int sz = shardCounts.size();\n    int numReceived = sz;\n\n    OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n    long last = 0;\n    for (int i=0; i<sz; i++) {\n      String name = shardCounts.getName(i);\n      long count = ((Number)shardCounts.getVal(i)).longValue();\n      if (name == null) {\n        missingCount += count;\n        numReceived--;\n      } else {\n        ShardFacetCount sfc = counts.get(name);\n        if (sfc == null) {\n          sfc = new ShardFacetCount();\n          sfc.name = name;\n          sfc.termNum = termNum++;\n          counts.put(name, sfc);\n        }\n        sfc.count += count;\n        terms.fastSet(sfc.termNum);\n        last = count;\n      }\n    }\n\n    // the largest possible missing term is 0 if we received less\n    // than the number requested (provided mincount==0 like it should be for\n    // a shard request)\n    if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n      last = 0;\n    }\n\n    missingMaxPossible += last;\n    missingMax[shardNum] = last;\n    counted[shardNum] = terms;\n  }\n\n","sourceOld":"  void add(int shardNum, NamedList shardCounts, int numRequested) {\n    int sz = shardCounts.size();\n    int numReceived = sz;\n\n    OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n    long last = 0;\n    for (int i=0; i<sz; i++) {\n      String name = shardCounts.getName(i);\n      long count = ((Number)shardCounts.getVal(i)).longValue();\n      if (name == null) {\n        missingCount += count;\n        numReceived--;\n      } else {\n        ShardFacetCount sfc = counts.get(name);\n        if (sfc == null) {\n          sfc = new ShardFacetCount();\n          sfc.name = name;\n          sfc.termNum = termNum++;\n          counts.put(name, sfc);\n        }\n        sfc.count += count;\n        terms.fastSet(sfc.termNum);\n        last = count;\n      }\n    }\n\n    // the largest possible missing term is 0 if we received less\n    // than the number requested (provided mincount==0 like it should be for\n    // a shard request)\n    if (numRequested !=0 && numReceived < numRequested) {\n      last = 0;\n    }\n\n    missingMaxPossible += last;\n    missingMax[shardNum] = last;\n    counted[shardNum] = terms;\n  }\n\n","bugFix":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1161f19bd84204b140d97fea16ff621e86ce7ab4","date":1235924971,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/DistribFieldFacet[FacetComponent]#add(int,NamedList,int).mjava","pathOld":"src/java/org/apache/solr/handler/component/DistribFieldFacet[FacetComponent]#add(int,NamedList,int).mjava","sourceNew":"  void add(int shardNum, NamedList shardCounts, int numRequested) {\n    int sz = shardCounts.size();\n    int numReceived = sz;\n\n    OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n    long last = 0;\n    for (int i=0; i<sz; i++) {\n      String name = shardCounts.getName(i);\n      long count = ((Number)shardCounts.getVal(i)).longValue();\n      if (name == null) {\n        missingCount += count;\n        numReceived--;\n      } else {\n        ShardFacetCount sfc = counts.get(name);\n        if (sfc == null) {\n          sfc = new ShardFacetCount();\n          sfc.name = name;\n          sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n          sfc.termNum = termNum++;\n          counts.put(name, sfc);\n        }\n        sfc.count += count;\n        terms.fastSet(sfc.termNum);\n        last = count;\n      }\n    }\n\n    // the largest possible missing term is 0 if we received less\n    // than the number requested (provided mincount==0 like it should be for\n    // a shard request)\n    if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n      last = 0;\n    }\n\n    missingMaxPossible += last;\n    missingMax[shardNum] = last;\n    counted[shardNum] = terms;\n  }\n\n","sourceOld":"  void add(int shardNum, NamedList shardCounts, int numRequested) {\n    int sz = shardCounts.size();\n    int numReceived = sz;\n\n    OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n    long last = 0;\n    for (int i=0; i<sz; i++) {\n      String name = shardCounts.getName(i);\n      long count = ((Number)shardCounts.getVal(i)).longValue();\n      if (name == null) {\n        missingCount += count;\n        numReceived--;\n      } else {\n        ShardFacetCount sfc = counts.get(name);\n        if (sfc == null) {\n          sfc = new ShardFacetCount();\n          sfc.name = name;\n          sfc.termNum = termNum++;\n          counts.put(name, sfc);\n        }\n        sfc.count += count;\n        terms.fastSet(sfc.termNum);\n        last = count;\n      }\n    }\n\n    // the largest possible missing term is 0 if we received less\n    // than the number requested (provided mincount==0 like it should be for\n    // a shard request)\n    if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n      last = 0;\n    }\n\n    missingMaxPossible += last;\n    missingMax[shardNum] = last;\n    counted[shardNum] = terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"718ab708b1705aae7831111fcddfc834665eee61","date":1241122833,"type":4,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/solr/handler/component/DistribFieldFacet[FacetComponent]#add(int,NamedList,int).mjava","sourceNew":null,"sourceOld":"  void add(int shardNum, NamedList shardCounts, int numRequested) {\n    int sz = shardCounts.size();\n    int numReceived = sz;\n\n    OpenBitSet terms = new OpenBitSet(termNum+sz);\n\n    long last = 0;\n    for (int i=0; i<sz; i++) {\n      String name = shardCounts.getName(i);\n      long count = ((Number)shardCounts.getVal(i)).longValue();\n      if (name == null) {\n        missingCount += count;\n        numReceived--;\n      } else {\n        ShardFacetCount sfc = counts.get(name);\n        if (sfc == null) {\n          sfc = new ShardFacetCount();\n          sfc.name = name;\n          sfc.indexed = ftype == null ? sfc.name : ftype.toInternal(sfc.name);\n          sfc.termNum = termNum++;\n          counts.put(name, sfc);\n        }\n        sfc.count += count;\n        terms.fastSet(sfc.termNum);\n        last = count;\n      }\n    }\n\n    // the largest possible missing term is 0 if we received less\n    // than the number requested (provided mincount==0 like it should be for\n    // a shard request)\n    if (numRequested<0 || numRequested != 0 && numReceived < numRequested) {\n      last = 0;\n    }\n\n    missingMaxPossible += last;\n    missingMax[shardNum] = last;\n    counted[shardNum] = terms;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"718ab708b1705aae7831111fcddfc834665eee61":["1161f19bd84204b140d97fea16ff621e86ce7ab4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1161f19bd84204b140d97fea16ff621e86ce7ab4":["9ac277fcde6efbfb4b34a6b2cdbda483003cda18"],"9ac277fcde6efbfb4b34a6b2cdbda483003cda18":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"718ab708b1705aae7831111fcddfc834665eee61":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76"],"1161f19bd84204b140d97fea16ff621e86ce7ab4":["718ab708b1705aae7831111fcddfc834665eee61"],"9ac277fcde6efbfb4b34a6b2cdbda483003cda18":["1161f19bd84204b140d97fea16ff621e86ce7ab4"],"5bb29c260c4bbaf4ce8a95d362844ebf77ec1f76":["9ac277fcde6efbfb4b34a6b2cdbda483003cda18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["718ab708b1705aae7831111fcddfc834665eee61","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}