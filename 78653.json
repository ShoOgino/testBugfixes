{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher.MultiSearcherCallableWithSort#call().mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher.MultiSearcherCallableWithSort#call().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiSearcher.MultiSearcherCallableWithSort#call().mjava","sourceNew":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);\n      // If one of the Sort fields is FIELD_DOC, need to fix its values, so that\n      // it will break ties by doc Id properly. Otherwise, it will compare to\n      // 'relative' doc Ids, that belong to two different searchables.\n      for (int j = 0; j < docs.fields.length; j++) {\n        if (docs.fields[j].getType() == SortField.DOC) {\n          // iterate over the score docs and change their fields value\n          for (int j2 = 0; j2 < docs.scoreDocs.length; j2++) {\n            FieldDoc fd = (FieldDoc) docs.scoreDocs[j2];\n            fd.fields[j] = Integer.valueOf(((Integer) fd.fields[j]).intValue() + starts[i]);\n          }\n          break;\n        }\n      }\n\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        fieldDoc.doc += starts[i]; // convert doc \n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);\n      // If one of the Sort fields is FIELD_DOC, need to fix its values, so that\n      // it will break ties by doc Id properly. Otherwise, it will compare to\n      // 'relative' doc Ids, that belong to two different searchables.\n      for (int j = 0; j < docs.fields.length; j++) {\n        if (docs.fields[j].getType() == SortField.DOC) {\n          // iterate over the score docs and change their fields value\n          for (int j2 = 0; j2 < docs.scoreDocs.length; j2++) {\n            FieldDoc fd = (FieldDoc) docs.scoreDocs[j2];\n            fd.fields[j] = Integer.valueOf(((Integer) fd.fields[j]).intValue() + starts[i]);\n          }\n          break;\n        }\n      }\n\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        fieldDoc.doc += starts[i]; // convert doc \n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41c254de87d45aece543872ed3ed365ab7d3ad7f","date":1294255671,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher.MultiSearcherCallableWithSort#call().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher.MultiSearcherCallableWithSort#call().mjava","sourceNew":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);\n      // If one of the Sort fields is FIELD_DOC, need to fix its values, so that\n      // it will break ties by doc Id properly. Otherwise, it will compare to\n      // 'relative' doc Ids, that belong to two different searchables.\n      for (int j = 0; j < docs.fields.length; j++) {\n        if (docs.fields[j].getType() == SortField.DOC) {\n          // iterate over the score docs and change their fields value\n          for (int j2 = 0; j2 < docs.scoreDocs.length; j2++) {\n            FieldDoc fd = (FieldDoc) docs.scoreDocs[j2];\n            fd.fields[j] = Integer.valueOf(((Integer) fd.fields[j]).intValue() + docBase);\n          }\n          break;\n        }\n      }\n\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        fieldDoc.doc += docBase; // convert doc \n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);\n      // If one of the Sort fields is FIELD_DOC, need to fix its values, so that\n      // it will break ties by doc Id properly. Otherwise, it will compare to\n      // 'relative' doc Ids, that belong to two different searchables.\n      for (int j = 0; j < docs.fields.length; j++) {\n        if (docs.fields[j].getType() == SortField.DOC) {\n          // iterate over the score docs and change their fields value\n          for (int j2 = 0; j2 < docs.scoreDocs.length; j2++) {\n            FieldDoc fd = (FieldDoc) docs.scoreDocs[j2];\n            fd.fields[j] = Integer.valueOf(((Integer) fd.fields[j]).intValue() + starts[i]);\n          }\n          break;\n        }\n      }\n\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        fieldDoc.doc += starts[i]; // convert doc \n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher.MultiSearcherCallableWithSort#call().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/MultiSearcher.MultiSearcherCallableWithSort#call().mjava","sourceNew":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);\n      // If one of the Sort fields is FIELD_DOC, need to fix its values, so that\n      // it will break ties by doc Id properly. Otherwise, it will compare to\n      // 'relative' doc Ids, that belong to two different searchables.\n      for (int j = 0; j < docs.fields.length; j++) {\n        if (docs.fields[j].getType() == SortField.DOC) {\n          // iterate over the score docs and change their fields value\n          for (int j2 = 0; j2 < docs.scoreDocs.length; j2++) {\n            FieldDoc fd = (FieldDoc) docs.scoreDocs[j2];\n            fd.fields[j] = Integer.valueOf(((Integer) fd.fields[j]).intValue() + starts[i]);\n          }\n          break;\n        }\n      }\n\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        fieldDoc.doc += starts[i]; // convert doc \n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);\n      // If one of the Sort fields is FIELD_DOC, need to fix its values, so that\n      // it will break ties by doc Id properly. Otherwise, it will compare to\n      // 'relative' doc Ids, that belong to two different searchables.\n      for (int j = 0; j < docs.fields.length; j++) {\n        if (docs.fields[j].getType() == SortField.DOC) {\n          // iterate over the score docs and change their fields value\n          for (int j2 = 0; j2 < docs.scoreDocs.length; j2++) {\n            FieldDoc fd = (FieldDoc) docs.scoreDocs[j2];\n            fd.fields[j] = Integer.valueOf(((Integer) fd.fields[j]).intValue() + starts[i]);\n          }\n          break;\n        }\n      }\n\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        fieldDoc.doc += starts[i]; // convert doc \n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher.SearcherCallableWithSort#call().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher.MultiSearcherCallableWithSort#call().mjava","sourceNew":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","sourceOld":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);\n      // If one of the Sort fields is FIELD_DOC, need to fix its values, so that\n      // it will break ties by doc Id properly. Otherwise, it will compare to\n      // 'relative' doc Ids, that belong to two different searchables.\n      for (int j = 0; j < docs.fields.length; j++) {\n        if (docs.fields[j].getType() == SortField.DOC) {\n          // iterate over the score docs and change their fields value\n          for (int j2 = 0; j2 < docs.scoreDocs.length; j2++) {\n            FieldDoc fd = (FieldDoc) docs.scoreDocs[j2];\n            fd.fields[j] = Integer.valueOf(((Integer) fd.fields[j]).intValue() + docBase);\n          }\n          break;\n        }\n      }\n\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        fieldDoc.doc += docBase; // convert doc \n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":["d868f38e751225153684493f6a89d784835297bd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher.MultiSearcherCallableWithSort#call().mjava","sourceNew":null,"sourceOld":"    public TopFieldDocs call() throws IOException {\n      final TopFieldDocs docs = searchable.search (weight, filter, nDocs, sort);\n      // If one of the Sort fields is FIELD_DOC, need to fix its values, so that\n      // it will break ties by doc Id properly. Otherwise, it will compare to\n      // 'relative' doc Ids, that belong to two different searchables.\n      for (int j = 0; j < docs.fields.length; j++) {\n        if (docs.fields[j].getType() == SortField.DOC) {\n          // iterate over the score docs and change their fields value\n          for (int j2 = 0; j2 < docs.scoreDocs.length; j2++) {\n            FieldDoc fd = (FieldDoc) docs.scoreDocs[j2];\n            fd.fields[j] = Integer.valueOf(((Integer) fd.fields[j]).intValue() + starts[i]);\n          }\n          break;\n        }\n      }\n\n      lock.lock();\n      try {\n        hq.setFields(docs.fields);\n      } finally {\n        lock.unlock();\n      }\n\n      final ScoreDoc[] scoreDocs = docs.scoreDocs;\n      for (int j = 0; j < scoreDocs.length; j++) { // merge scoreDocs into hq\n        final FieldDoc fieldDoc = (FieldDoc) scoreDocs[j];\n        fieldDoc.doc += starts[i]; // convert doc \n        //it would be so nice if we had a thread-safe insert \n        lock.lock();\n        try {\n          if (fieldDoc == hq.insertWithOverflow(fieldDoc))\n            break;\n        } finally {\n          lock.unlock();\n        }\n      }\n      return docs;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"41c254de87d45aece543872ed3ed365ab7d3ad7f":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["41c254de87d45aece543872ed3ed365ab7d3ad7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","41c254de87d45aece543872ed3ed365ab7d3ad7f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"41c254de87d45aece543872ed3ed365ab7d3ad7f":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}