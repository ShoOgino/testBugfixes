{"path":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","commits":[{"id":"eb58c4024f450cc56f3a748012536d763700adb5","date":1495748960,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n\n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n            format+\"! Only 'solr' is supported.\");\n      }\n\n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (String key : storedSyns.keySet()) {\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n\n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = storedSyns.get(key);\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                    \" but got \"+mapping.getClass().getName());\n          }\n\n          Set<String> sortedVals = new TreeSet<>();\n          sortedVals.addAll((List<String>)storedSyns.get(key));\n          cpsm.mappings.put(key, sortedVals);\n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n\n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n            format+\"! Only 'solr' is supported.\");\n      }\n\n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (String key : storedSyns.keySet()) {\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n\n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = storedSyns.get(key);\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                    \" but got \"+mapping.getClass().getName());\n          }\n\n          Set<String> sortedVals = new TreeSet<>();\n          sortedVals.addAll((List<String>)storedSyns.get(key));\n          cpsm.mappings.put(key, sortedVals);\n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"/dev/null","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n\n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n            format+\"! Only 'solr' is supported.\");\n      }\n\n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (String key : storedSyns.keySet()) {\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n\n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = storedSyns.get(key);\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                    \" but got \"+mapping.getClass().getName());\n          }\n\n          Set<String> sortedVals = new TreeSet<>();\n          sortedVals.addAll((List<String>)storedSyns.get(key));\n          cpsm.mappings.put(key, sortedVals);\n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f97fc3d287be2a8d7f513f0de3249b50dda47299","date":1568378558,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n\n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n            format+\"! Only 'solr' is supported.\");\n      }\n\n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (Map.Entry<String, Object> entry : storedSyns.entrySet()) {\n          String key = entry.getKey();\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n\n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = entry.getValue();\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                    \" but got \"+mapping.getClass().getName());\n          }\n\n          Set<String> sortedVals = new TreeSet<>();\n          sortedVals.addAll((List<String>) entry.getValue());\n          cpsm.mappings.put(key, sortedVals);\n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n\n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n            format+\"! Only 'solr' is supported.\");\n      }\n\n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (String key : storedSyns.keySet()) {\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n\n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = storedSyns.get(key);\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                    \" but got \"+mapping.getClass().getName());\n          }\n\n          Set<String> sortedVals = new TreeSet<>();\n          sortedVals.addAll((List<String>)storedSyns.get(key));\n          cpsm.mappings.put(key, sortedVals);\n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","date":1571071547,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n\n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n            format+\"! Only 'solr' is supported.\");\n      }\n\n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (Map.Entry<String, Object> entry : storedSyns.entrySet()) {\n          String key = entry.getKey();\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n\n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = entry.getValue();\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                    \" but got \"+mapping.getClass().getName());\n          }\n\n          Set<String> sortedVals = new TreeSet<>((List<String>) entry.getValue());\n          cpsm.mappings.put(key, sortedVals);\n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n\n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n            format+\"! Only 'solr' is supported.\");\n      }\n\n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (Map.Entry<String, Object> entry : storedSyns.entrySet()) {\n          String key = entry.getKey();\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n\n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = entry.getValue();\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                    \" but got \"+mapping.getClass().getName());\n          }\n\n          Set<String> sortedVals = new TreeSet<>();\n          sortedVals.addAll((List<String>) entry.getValue());\n          cpsm.mappings.put(key, sortedVals);\n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n\n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n            format+\"! Only 'solr' is supported.\");\n      }\n\n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (Map.Entry<String, Object> entry : storedSyns.entrySet()) {\n          String key = entry.getKey();\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n\n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = entry.getValue();\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                    \" but got \"+mapping.getClass().getName());\n          }\n\n          Set<String> sortedVals = new TreeSet<>((List<String>) entry.getValue());\n          cpsm.mappings.put(key, sortedVals);\n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n\n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n            format+\"! Only 'solr' is supported.\");\n      }\n\n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (Map.Entry<String, Object> entry : storedSyns.entrySet()) {\n          String key = entry.getKey();\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n\n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = entry.getValue();\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                    \" but got \"+mapping.getClass().getName());\n          }\n\n          Set<String> sortedVals = new TreeSet<>();\n          sortedVals.addAll((List<String>) entry.getValue());\n          cpsm.mappings.put(key, sortedVals);\n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/schema/analysis/ManagedSynonymGraphFilterFactory.SynonymManager#onManagedDataLoadedFromStorage(NamedList[#],Object).mjava","sourceNew":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n\n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n            format+\"! Only 'solr' is supported.\");\n      }\n\n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (Map.Entry<String, Object> entry : storedSyns.entrySet()) {\n          String key = entry.getKey();\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n\n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = entry.getValue();\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                    \" but got \"+mapping.getClass().getName());\n          }\n\n          Set<String> sortedVals = new TreeSet<>((List<String>) entry.getValue());\n          cpsm.mappings.put(key, sortedVals);\n        }\n      }\n      if (log.isInfoEnabled()) {\n        log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());\n      }\n    }\n\n","sourceOld":"    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected void onManagedDataLoadedFromStorage(NamedList<?> managedInitArgs, Object managedData)\n        throws SolrException\n    {\n      NamedList<Object> initArgs = (NamedList<Object>)managedInitArgs;\n\n      String format = (String)initArgs.get(\"format\");\n      if (format != null && !\"solr\".equals(format)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Invalid format \"+\n            format+\"! Only 'solr' is supported.\");\n      }\n\n      // the default behavior is to not ignore case, \n      // so if not supplied, then install the default\n      if (initArgs.get(IGNORE_CASE_INIT_ARG) == null) {\n        initArgs.add(IGNORE_CASE_INIT_ARG, Boolean.FALSE);\n      }\n\n      boolean ignoreCase = getIgnoreCase(managedInitArgs);\n      synonymMappings = new TreeMap<>();\n      if (managedData != null) {\n        Map<String,Object> storedSyns = (Map<String,Object>)managedData;\n        for (Map.Entry<String, Object> entry : storedSyns.entrySet()) {\n          String key = entry.getKey();\n\n          String caseKey = applyCaseSetting(ignoreCase, key);\n          CasePreservedSynonymMappings cpsm = synonymMappings.get(caseKey);\n          if (cpsm == null) {\n            cpsm = new CasePreservedSynonymMappings();\n            synonymMappings.put(caseKey, cpsm);\n          }\n\n          // give the nature of our JSON parsing solution, we really have\n          // no guarantees on what is in the file\n          Object mapping = entry.getValue();\n          if (!(mapping instanceof List)) {\n            throw new SolrException(ErrorCode.SERVER_ERROR,\n                \"Invalid synonym file format! Expected a list of synonyms for \"+key+\n                    \" but got \"+mapping.getClass().getName());\n          }\n\n          Set<String> sortedVals = new TreeSet<>((List<String>) entry.getValue());\n          cpsm.mappings.put(key, sortedVals);\n        }\n      }\n      log.info(\"Loaded {} synonym mappings for {}\", synonymMappings.size(), getResourceId());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["f97fc3d287be2a8d7f513f0de3249b50dda47299"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb58c4024f450cc56f3a748012536d763700adb5"],"eb58c4024f450cc56f3a748012536d763700adb5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"140be51d03394488536f4aacedace29f9b318347":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eb58c4024f450cc56f3a748012536d763700adb5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["140be51d03394488536f4aacedace29f9b318347"],"b0b597c65628ca9e73913a07e81691f8229bae35":["f97fc3d287be2a8d7f513f0de3249b50dda47299","23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"]},"commit2Childs":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["140be51d03394488536f4aacedace29f9b318347","b0b597c65628ca9e73913a07e81691f8229bae35"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"eb58c4024f450cc56f3a748012536d763700adb5":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","eb58c4024f450cc56f3a748012536d763700adb5","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"140be51d03394488536f4aacedace29f9b318347":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f97fc3d287be2a8d7f513f0de3249b50dda47299":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","b0b597c65628ca9e73913a07e81691f8229bae35"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["f97fc3d287be2a8d7f513f0de3249b50dda47299"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}