{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","sourceNew":"  public void testClone() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, 5);\n    char[] buf = t.buffer();\n    Token copy = assertCloneIsEqual(t);\n    assertEquals(t.toString(), copy.toString());\n    assertNotSame(buf, copy.buffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","sourceOld":"  public void testClone() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, 5);\n    char[] buf = t.buffer();\n    Token copy = assertCloneIsEqual(t);\n    assertEquals(t.toString(), copy.toString());\n    assertNotSame(buf, copy.buffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76fa9933adb0556e752e8af9734c4d0ae14622ff","date":1339178321,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","sourceNew":"  public void testClone() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, 5);\n    char[] buf = t.buffer();\n    Token copy = assertCloneIsEqual(t);\n    assertEquals(t.toString(), copy.toString());\n    assertNotSame(buf, copy.buffer());\n\n    BytesRef pl = new BytesRef(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","sourceOld":"  public void testClone() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, 5);\n    char[] buf = t.buffer();\n    Token copy = assertCloneIsEqual(t);\n    assertEquals(t.toString(), copy.toString());\n    assertNotSame(buf, copy.buffer());\n\n    Payload pl = new Payload(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","sourceNew":"  public void testClone() throws Exception {\n    Token t = new Token();\n    t.setOffset(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, 5);\n    char[] buf = t.buffer();\n    Token copy = assertCloneIsEqual(t);\n    assertEquals(t.toString(), copy.toString());\n    assertNotSame(buf, copy.buffer());\n\n    BytesRef pl = new BytesRef(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","sourceOld":"  public void testClone() throws Exception {\n    Token t = new Token(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, 5);\n    char[] buf = t.buffer();\n    Token copy = assertCloneIsEqual(t);\n    assertEquals(t.toString(), copy.toString());\n    assertNotSame(buf, copy.buffer());\n\n    BytesRef pl = new BytesRef(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93124590c6e2a8b45898cbae46f96c3a05d9bce0","date":1399415098,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestToken#testClone().mjava","sourceNew":"  public void testClone() throws Exception {\n    Token t = new Token();\n    t.setOffset(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, 5);\n    char[] buf = t.buffer();\n    Token copy = TestCharTermAttributeImpl.assertCloneIsEqual(t);\n    assertEquals(t.toString(), copy.toString());\n    assertNotSame(buf, copy.buffer());\n\n    BytesRef pl = new BytesRef(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = TestCharTermAttributeImpl.assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","sourceOld":"  public void testClone() throws Exception {\n    Token t = new Token();\n    t.setOffset(0, 5);\n    char[] content = \"hello\".toCharArray();\n    t.copyBuffer(content, 0, 5);\n    char[] buf = t.buffer();\n    Token copy = assertCloneIsEqual(t);\n    assertEquals(t.toString(), copy.toString());\n    assertNotSame(buf, copy.buffer());\n\n    BytesRef pl = new BytesRef(new byte[]{1,2,3,4});\n    t.setPayload(pl);\n    copy = assertCloneIsEqual(t);\n    assertEquals(pl, copy.getPayload());\n    assertNotSame(pl, copy.getPayload());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93124590c6e2a8b45898cbae46f96c3a05d9bce0":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93124590c6e2a8b45898cbae46f96c3a05d9bce0"]},"commit2Childs":{"93124590c6e2a8b45898cbae46f96c3a05d9bce0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76fa9933adb0556e752e8af9734c4d0ae14622ff"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["93124590c6e2a8b45898cbae46f96c3a05d9bce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"76fa9933adb0556e752e8af9734c4d0ae14622ff":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}