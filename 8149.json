{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#addViolatingReplicasForGroup(Condition,ComputedValueEvaluator,Violation.Ctx,String,Object,Violation,List[Row]).mjava","commits":[{"id":"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa","date":1559549598,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#addViolatingReplicasForGroup(Condition,ComputedValueEvaluator,Violation.Ctx,String,Object,Violation,List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#addViolatingReplicas(Condition,ComputedValueEvaluator,Violation.Ctx,String,Object,Violation,Policy.Session).mjava","sourceNew":"  void addViolatingReplicasForGroup(Condition tag,\n                                    ComputedValueEvaluator eval,\n                                    Violation.Ctx ctx, String tagName, Object tagVal,\n                                    Violation violation,\n                                    List<Row> nodes) {\n    if (tag.varType.addViolatingReplicas(ctx)) return;\n    for (Row row : nodes) {\n      if (tagVal.equals(row.getVal(tagName))) {\n        row.forEachReplica(eval.collName, ri -> {\n          if (Policy.ANY.equals(eval.shardName)\n              || eval.shardName.equals(ri.getShard()))\n            violation.addReplica(new Violation.ReplicaInfoAndErr(ri).withDelta(tag.delta(row.getVal(tag.name))));\n        });\n      }\n    }\n\n  }\n\n","sourceOld":"  void addViolatingReplicas(Condition tag,\n                            ComputedValueEvaluator eval,\n                            Violation.Ctx ctx, String tagName, Object tagVal,\n                            Violation violation,\n                            Policy.Session session) {\n    if (tag.varType.addViolatingReplicas(ctx)) return;\n    for (Row row : session.matrix) {\n      if (tagVal.equals(row.getVal(tagName))) {\n        row.forEachReplica(eval.collName, ri -> {\n          if (Policy.ANY.equals(eval.shardName)\n              || eval.shardName.equals(ri.getShard()))\n            violation.addReplica(new Violation.ReplicaInfoAndErr(ri).withDelta(tag.delta(row.getVal(tag.name))));\n        });\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7194afdfe9b45ca331c1cd5001cd9766688688b","date":1560867417,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#addViolatingReplicasForGroup(Condition,ComputedValueEvaluator,Violation.Ctx,String,Object,Violation,List[Row]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#addViolatingReplicasForGroup(Condition,ComputedValueEvaluator,Violation.Ctx,String,Object,Violation,List[Row]).mjava","sourceNew":"  void addViolatingReplicasForGroup(Condition tag,\n                                    ComputedValueEvaluator eval,\n                                    Violation.Ctx ctx, String tagName, Object tagVal,\n                                    Violation violation,\n                                    List<Row> nodes) {\n    if (tag.varType.addViolatingReplicas(ctx)) return;\n    for (Row row : nodes) {\n      boolean isPass;\n      if (tagVal instanceof Condition) {\n        Condition condition = (Condition) tagVal;\n        if(condition.computedType != null){\n          eval.node = row.node;\n          Object val = eval.apply(condition);\n          condition = new Condition(condition.name, val,condition.op, null, condition.clause);\n        }\n        isPass = condition.isPass(row);\n      }\n      else isPass = tagVal.equals(row.getVal(tagName));\n      if (isPass) {\n        row.forEachReplica(eval.collName, ri -> {\n          if (Policy.ANY.equals(eval.shardName)\n              || eval.shardName.equals(ri.getShard()))\n            violation.addReplica(new Violation.ReplicaInfoAndErr(ri).withDelta(tag.delta(row.getVal(tag.name))));\n        });\n      }\n    }\n\n  }\n\n","sourceOld":"  void addViolatingReplicasForGroup(Condition tag,\n                                    ComputedValueEvaluator eval,\n                                    Violation.Ctx ctx, String tagName, Object tagVal,\n                                    Violation violation,\n                                    List<Row> nodes) {\n    if (tag.varType.addViolatingReplicas(ctx)) return;\n    for (Row row : nodes) {\n      if (tagVal.equals(row.getVal(tagName))) {\n        row.forEachReplica(eval.collName, ri -> {\n          if (Policy.ANY.equals(eval.shardName)\n              || eval.shardName.equals(ri.getShard()))\n            violation.addReplica(new Violation.ReplicaInfoAndErr(ri).withDelta(tag.delta(row.getVal(tag.name))));\n        });\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Clause#addViolatingReplicasForGroup(Condition,ComputedValueEvaluator,Violation.Ctx,String,Object,Violation,List[Row]).mjava","sourceNew":null,"sourceOld":"  void addViolatingReplicasForGroup(Condition tag,\n                                    ComputedValueEvaluator eval,\n                                    Violation.Ctx ctx, String tagName, Object tagVal,\n                                    Violation violation,\n                                    List<Row> nodes) {\n    if (tag.varType.addViolatingReplicas(ctx)) return;\n    for (Row row : nodes) {\n      boolean isPass;\n      if (tagVal instanceof Condition) {\n        Condition condition = (Condition) tagVal;\n        if(condition.computedType != null){\n          eval.node = row.node;\n          Object val = eval.apply(condition);\n          condition = new Condition(condition.name, val,condition.op, null, condition.clause);\n        }\n        isPass = condition.isPass(row);\n      }\n      else isPass = tagVal.equals(row.getVal(tagName));\n      if (isPass) {\n        row.forEachReplica(eval.collName, ri -> {\n          if (Policy.ANY.equals(eval.shardName)\n              || eval.shardName.equals(ri.getShard()))\n            violation.addReplica(new Violation.ReplicaInfoAndErr(ri).withDelta(tag.delta(row.getVal(tag.name))));\n        });\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a7194afdfe9b45ca331c1cd5001cd9766688688b":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa"],"3f504512a03d978990cbff30db0522b354e846db":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a7194afdfe9b45ca331c1cd5001cd9766688688b":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["081849c2756a6c9b9883ab9e332f3f3fcf2f05fa"],"081849c2756a6c9b9883ab9e332f3f3fcf2f05fa":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}