{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.AssertingNormsProducer#getNorms(FieldInfo).mjava","commits":[{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.AssertingNormsProducer#getNorms(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public NumericDocValues getNorms(FieldInfo field) throws IOException {\n      assert field.getNormType() == FieldInfo.DocValuesType.NUMERIC;\n      NumericDocValues values = in.getNorms(field);\n      assert values != null;\n      return new AssertingAtomicReader.AssertingNumericDocValues(values, maxDoc);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.AssertingNormsProducer#getNorms(FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.AssertingNormsProducer#getNorms(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNorms(FieldInfo field) throws IOException {\n      assert field.getNormType() == FieldInfo.DocValuesType.NUMERIC;\n      NumericDocValues values = in.getNorms(field);\n      assert values != null;\n      return new AssertingLeafReader.AssertingNumericDocValues(values, maxDoc);\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNorms(FieldInfo field) throws IOException {\n      assert field.getNormType() == FieldInfo.DocValuesType.NUMERIC;\n      NumericDocValues values = in.getNorms(field);\n      assert values != null;\n      return new AssertingAtomicReader.AssertingNumericDocValues(values, maxDoc);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05da2d758a6089e737cdfc230e57a51b472b94b6","date":1413392310,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.AssertingNormsProducer#getNorms(FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.AssertingNormsProducer#getNorms(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNorms(FieldInfo field) throws IOException {\n      assert field.hasNorms();\n      NumericDocValues values = in.getNorms(field);\n      assert values != null;\n      return new AssertingLeafReader.AssertingNumericDocValues(values, maxDoc);\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNorms(FieldInfo field) throws IOException {\n      assert field.getNormType() == FieldInfo.DocValuesType.NUMERIC;\n      NumericDocValues values = in.getNorms(field);\n      assert values != null;\n      return new AssertingLeafReader.AssertingNumericDocValues(values, maxDoc);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.AssertingNormsProducer#getNorms(FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.AssertingNormsProducer#getNorms(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNorms(FieldInfo field) throws IOException {\n      assert field.hasNorms();\n      NumericDocValues values = in.getNorms(field);\n      assert values != null;\n      return new AssertingLeafReader.AssertingNumericDocValues(values, maxDoc);\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNorms(FieldInfo field) throws IOException {\n      assert field.getNormType() == FieldInfo.DocValuesType.NUMERIC;\n      NumericDocValues values = in.getNorms(field);\n      assert values != null;\n      return new AssertingLeafReader.AssertingNumericDocValues(values, maxDoc);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc046116d49cd3d0c50f7169cabaa295bc23a4a","date":1552989114,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.AssertingNormsProducer#getNorms(FieldInfo).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.AssertingNormsProducer#getNorms(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNorms(FieldInfo field) throws IOException {\n      if (merging) {\n        AssertingCodec.assertThread(\"NormsProducer\", creationThread);\n      }\n      assert field.hasNorms();\n      NumericDocValues values = in.getNorms(field);\n      assert values != null;\n      return new AssertingLeafReader.AssertingNumericDocValues(values, maxDoc);\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNorms(FieldInfo field) throws IOException {\n      assert field.hasNorms();\n      NumericDocValues values = in.getNorms(field);\n      assert values != null;\n      return new AssertingLeafReader.AssertingNumericDocValues(values, maxDoc);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["c9fb5f46e264daf5ba3860defe623a89d202dd87","05da2d758a6089e737cdfc230e57a51b472b94b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["05da2d758a6089e737cdfc230e57a51b472b94b6"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dbc046116d49cd3d0c50f7169cabaa295bc23a4a"]},"commit2Childs":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","dbc046116d49cd3d0c50f7169cabaa295bc23a4a"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"dbc046116d49cd3d0c50f7169cabaa295bc23a4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["05da2d758a6089e737cdfc230e57a51b472b94b6","c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}