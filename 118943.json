{"path":"src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(long).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(long).mjava","pathOld":"src/java/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(long).mjava","sourceNew":"  public Map getLatestAccessedItems(long n) {\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    try {\n      for (Map.Entry<Object, CacheEntry> entry : map.entrySet()) {\n        CacheEntry ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(entry.getValue());\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map getLatestAccessedItems(long n) {\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    try {\n      for (Map.Entry<Object, CacheEntry> entry : map.entrySet()) {\n        CacheEntry ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(entry.getValue());\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48dd7857ec646cce5ab6c5e7c48a27754559f4be","date":1234349649,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(int).mjava","pathOld":"src/common/org/apache/solr/common/util/ConcurrentLRUCache#getLatestAccessedItems(long).mjava","sourceNew":"  public Map<K,V> getLatestAccessedItems(int n) {\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    try {\n      for (Map.Entry<Object, CacheEntry> entry : map.entrySet()) {\n        CacheEntry ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  public Map getLatestAccessedItems(long n) {\n    // we need to grab the lock since we are changing lastAccessedCopy\n    markAndSweepLock.lock();\n    Map<K,V> result = new LinkedHashMap<K,V>();\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    try {\n      for (Map.Entry<Object, CacheEntry> entry : map.entrySet()) {\n        CacheEntry ce = entry.getValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          if (ce.lastAccessedCopy > tree.last().lastAccessedCopy) {\n            tree.remove(tree.last());\n            tree.add(entry.getValue());\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K,V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"48dd7857ec646cce5ab6c5e7c48a27754559f4be":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["48dd7857ec646cce5ab6c5e7c48a27754559f4be"],"48dd7857ec646cce5ab6c5e7c48a27754559f4be":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["48dd7857ec646cce5ab6c5e7c48a27754559f4be","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}