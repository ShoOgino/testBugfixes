{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","sourceNew":"  public void testSynonyms() throws Exception {\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.add(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n  }\n\n","sourceOld":"  public void testSynonyms() throws Exception {\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.add(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85f3a2d749715373feb8529516e92d3538103525","date":1379624134,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","sourceNew":"  public void testSynonyms() throws Exception {\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.parse(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n  }\n\n","sourceOld":"  public void testSynonyms() throws Exception {\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.add(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","sourceNew":"  public void testSynonyms() throws Exception {\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.parse(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n  }\n\n","sourceOld":"  public void testSynonyms() throws Exception {\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.parse(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","sourceNew":"  public void testSynonyms() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, analyzer);\n    parser.parse(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    analyzer.close();\n    \n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testSynonyms() throws Exception {\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.parse(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","sourceNew":"  public void testSynonyms() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, analyzer);\n    parser.parse(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    analyzer.close();\n    \n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testSynonyms() throws Exception {\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, new MockAnalyzer(random()));\n    parser.parse(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    \n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8adcebbdb54c09c53799ed05f287c1a1e04ca010","date":1573659646,"type":3,"author":"Christoph Büscher","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","sourceNew":"  public void testSynonyms() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, analyzer);\n    parser.parse(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    analyzer.close();\n    \n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n\n    /* all expansions, test types */\n    assertAnalyzesTo(analyzer, \"Lost in the forest\",\n        new String[] { \"Lost\", \"in\", \"the\", \"forest\", \"woods\", \"wood\"},\n        new String[] { \"word\", \"word\", \"word\", \"word\", \"SYNONYM\", \"SYNONYM\" });\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testSynonyms() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, analyzer);\n    parser.parse(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    analyzer.close();\n    \n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","sourceNew":"  public void testSynonyms() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, analyzer);\n    parser.parse(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    analyzer.close();\n    \n    analyzer = new Analyzer() {\n      @SuppressWarnings(\"deprecation\")\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n\n    /* all expansions, test types */\n    assertAnalyzesTo(analyzer, \"Lost in the forest\",\n        new String[] { \"Lost\", \"in\", \"the\", \"forest\", \"woods\", \"wood\"},\n        new String[] { \"word\", \"word\", \"word\", \"word\", \"SYNONYM\", \"SYNONYM\" });\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testSynonyms() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, analyzer);\n    parser.parse(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    analyzer.close();\n    \n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n\n    /* all expansions, test types */\n    assertAnalyzesTo(analyzer, \"Lost in the forest\",\n        new String[] { \"Lost\", \"in\", \"the\", \"forest\", \"woods\", \"wood\"},\n        new String[] { \"word\", \"word\", \"word\", \"word\", \"SYNONYM\", \"SYNONYM\" });\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","sourceNew":"  public void testSynonyms() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, analyzer);\n    parser.parse(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    analyzer.close();\n    \n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n\n    /* all expansions, test types */\n    assertAnalyzesTo(analyzer, \"Lost in the forest\",\n        new String[] { \"Lost\", \"in\", \"the\", \"forest\", \"woods\", \"wood\"},\n        new String[] { \"word\", \"word\", \"word\", \"word\", \"SYNONYM\", \"SYNONYM\" });\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testSynonyms() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, analyzer);\n    parser.parse(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    analyzer.close();\n    \n    analyzer = new Analyzer() {\n      @SuppressWarnings(\"deprecation\")\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n\n    /* all expansions, test types */\n    assertAnalyzesTo(analyzer, \"Lost in the forest\",\n        new String[] { \"Lost\", \"in\", \"the\", \"forest\", \"woods\", \"wood\"},\n        new String[] { \"word\", \"word\", \"word\", \"word\", \"SYNONYM\", \"SYNONYM\" });\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestWordnetSynonymParser#testSynonyms().mjava","sourceNew":"  @SuppressWarnings(\"deprecation\")\n  public void testSynonyms() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, analyzer);\n    parser.parse(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    analyzer.close();\n    \n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n\n    /* all expansions, test types */\n    assertAnalyzesTo(analyzer, \"Lost in the forest\",\n        new String[] { \"Lost\", \"in\", \"the\", \"forest\", \"woods\", \"wood\"},\n        new String[] { \"word\", \"word\", \"word\", \"word\", \"SYNONYM\", \"SYNONYM\" });\n    analyzer.close();\n  }\n\n","sourceOld":"  public void testSynonyms() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    WordnetSynonymParser parser = new WordnetSynonymParser(true, true, analyzer);\n    parser.parse(new StringReader(synonymsFile));\n    final SynonymMap map = parser.build();\n    analyzer.close();\n    \n    analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, new SynonymFilter(tokenizer, map, false));\n      }\n    };\n    \n    /* all expansions */\n    assertAnalyzesTo(analyzer, \"Lost in the woods\",\n        new String[] { \"Lost\", \"in\", \"the\", \"woods\", \"wood\", \"forest\" },\n        new int[] { 0, 5, 8, 12, 12, 12 },\n        new int[] { 4, 7, 11, 17, 17, 17 },\n        new int[] { 1, 1, 1, 1, 0, 0 });\n    \n    /* single quote */\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n    \n    /* multi words */\n    assertAnalyzesTo(analyzer, \"king's evil\",\n        new String[] { \"king's\", \"king's\", \"evil\", \"meany\" });\n\n    /* all expansions, test types */\n    assertAnalyzesTo(analyzer, \"Lost in the forest\",\n        new String[] { \"Lost\", \"in\", \"the\", \"forest\", \"woods\", \"wood\"},\n        new String[] { \"word\", \"word\", \"word\", \"word\", \"SYNONYM\", \"SYNONYM\" });\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8adcebbdb54c09c53799ed05f287c1a1e04ca010":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["8adcebbdb54c09c53799ed05f287c1a1e04ca010"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["85f3a2d749715373feb8529516e92d3538103525"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"85f3a2d749715373feb8529516e92d3538103525":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"8adcebbdb54c09c53799ed05f287c1a1e04ca010":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["85f3a2d749715373feb8529516e92d3538103525"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["8adcebbdb54c09c53799ed05f287c1a1e04ca010","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"85f3a2d749715373feb8529516e92d3538103525":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}