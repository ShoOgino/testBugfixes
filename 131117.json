{"path":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","commits":[{"id":"5cedf6c663f63b47755a40ae6cd1405a7fe6b24d","date":1435939256,"type":0,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"/dev/null","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTieredMergePolicy);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap();\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxIndexingThreads\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(SolrIndexConfig.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          SolrIndexConfig.LOCK_TYPE_NATIVE.equals(lockType) ||\n          SolrIndexConfig.LOCK_TYPE_SINGLE.equals(lockType) ||\n          SolrIndexConfig.LOCK_TYPE_NONE.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof Map);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof Map);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof Map);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c02b804ab16489b95429791a2d8fb0e0728354d4","date":1436551798,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTieredMergePolicy);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap();\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(SolrIndexConfig.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          SolrIndexConfig.LOCK_TYPE_NATIVE.equals(lockType) ||\n          SolrIndexConfig.LOCK_TYPE_SINGLE.equals(lockType) ||\n          SolrIndexConfig.LOCK_TYPE_NONE.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof Map);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof Map);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof Map);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTieredMergePolicy);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap();\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxIndexingThreads\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(SolrIndexConfig.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          SolrIndexConfig.LOCK_TYPE_NATIVE.equals(lockType) ||\n          SolrIndexConfig.LOCK_TYPE_SINGLE.equals(lockType) ||\n          SolrIndexConfig.LOCK_TYPE_NONE.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof Map);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof Map);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof Map);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b3091e174423680e7d6cce5f858d48cd5410bcf","date":1452177279,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTieredMergePolicy);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap();\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof Map);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof Map);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof Map);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTieredMergePolicy);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap();\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(SolrIndexConfig.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          SolrIndexConfig.LOCK_TYPE_NATIVE.equals(lockType) ||\n          SolrIndexConfig.LOCK_TYPE_SINGLE.equals(lockType) ||\n          SolrIndexConfig.LOCK_TYPE_NONE.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof Map);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof Map);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof Map);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e50357e583524185222c1c691f5c333b34f7cbb2","date":1452268776,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTieredMergePolicy);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap();\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof Map);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof Map);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof Map);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTieredMergePolicy);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap();\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof Map);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof Map);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof Map);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e02c0d6a64df9c63897458b31d88b5ec3b854a5","date":1454964111,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap();\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof Map);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof Map);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof Map);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTieredMergePolicy);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap();\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof Map);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof Map);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof Map);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ea771da4621a28e1340bdaeb615d8553e4d7c9d","date":1455040025,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = random().nextBoolean() ? solrConfigFileNameWarmerRandomMergePolicy : solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap();\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof Map);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof Map);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof Map);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap();\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof Map);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof Map);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmer)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof Map);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f7730fa9149de890ea12da1fa93be9f5e3a1edf","date":1455303885,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = random().nextBoolean() ? solrConfigFileNameWarmerRandomMergePolicy : solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap();\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof Map);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNull(m.get(\"mergePolicy\"));\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof Map);\n    } else {\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof Map);\n      assertNull(m.get(\"mergePolicyFactory\"));\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof Map);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = random().nextBoolean() ? solrConfigFileNameWarmerRandomMergePolicy : solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap();\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof Map);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof Map);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof Map);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f1f31880696765d6aec499d3b01fa501129af45","date":1474287317,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = random().nextBoolean() ? solrConfigFileNameWarmerRandomMergePolicy : solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNull(m.get(\"mergePolicy\"));\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    } else {\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof MapSerializable);\n      assertNull(m.get(\"mergePolicyFactory\"));\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = random().nextBoolean() ? solrConfigFileNameWarmerRandomMergePolicy : solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap();\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof Map);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNull(m.get(\"mergePolicy\"));\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof Map);\n    } else {\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof Map);\n      assertNull(m.get(\"mergePolicyFactory\"));\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof Map);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = random().nextBoolean() ? solrConfigFileNameWarmerRandomMergePolicy : solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNull(m.get(\"mergePolicy\"));\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    } else {\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof MapSerializable);\n      assertNull(m.get(\"mergePolicyFactory\"));\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = random().nextBoolean() ? solrConfigFileNameWarmerRandomMergePolicy : solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap();\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof Map);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNull(m.get(\"mergePolicy\"));\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof Map);\n    } else {\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof Map);\n      assertNull(m.get(\"mergePolicyFactory\"));\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof Map);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = random().nextBoolean() ? solrConfigFileNameWarmerRandomMergePolicy : solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNull(m.get(\"mergePolicy\"));\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    } else {\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof MapSerializable);\n      assertNull(m.get(\"mergePolicyFactory\"));\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = random().nextBoolean() ? solrConfigFileNameWarmerRandomMergePolicy : solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap();\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof Map);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNull(m.get(\"mergePolicy\"));\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof Map);\n    } else {\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof Map);\n      assertNull(m.get(\"mergePolicyFactory\"));\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof Map);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f7df713a0f1e310d18dd8da91c89a07a13f86f8","date":1483441921,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = random().nextBoolean() ? solrConfigFileNameWarmerRandomMergePolicy : solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNull(m.get(\"mergePolicy\"));\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    } else {\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof MapSerializable);\n      assertNull(m.get(\"mergePolicyFactory\"));\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = random().nextBoolean() ? solrConfigFileNameWarmerRandomMergePolicy : solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNull(m.get(\"mergePolicy\"));\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    } else {\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof MapSerializable);\n      assertNull(m.get(\"mergePolicyFactory\"));\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = random().nextBoolean() ? solrConfigFileNameWarmerRandomMergePolicy : solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNull(m.get(\"mergePolicy\"));\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    } else {\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof MapSerializable);\n      assertNull(m.get(\"mergePolicyFactory\"));\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = random().nextBoolean() ? solrConfigFileNameWarmerRandomMergePolicy : solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNull(m.get(\"mergePolicy\"));\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    } else {\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof MapSerializable);\n      assertNull(m.get(\"mergePolicyFactory\"));\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70d848516a5d0b23d183a2ceb4f4fb8634205956","date":1496408348,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = random().nextBoolean() ? solrConfigFileNameWarmerRandomMergePolicy : solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNull(m.get(\"mergePolicy\"));\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    } else {\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof MapSerializable);\n      assertNull(m.get(\"mergePolicyFactory\"));\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = random().nextBoolean() ? solrConfigFileNameWarmerRandomMergePolicy : solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNull(m.get(\"mergePolicy\"));\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    } else {\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof MapSerializable);\n      assertNull(m.get(\"mergePolicyFactory\"));\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = random().nextBoolean() ? solrConfigFileNameWarmerRandomMergePolicy : solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = random().nextBoolean() ? solrConfigFileNameTieredMergePolicy : solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    } else {\n      assertNotNull(solrIndexConfig.mergePolicyInfo);\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"maxMergeDocs\") instanceof Integer);\n    ++mSizeExpected; assertTrue(m.get(\"mergeFactor\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameTieredMergePolicyFactory) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNull(m.get(\"mergePolicy\"));\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    } else {\n      ++mSizeExpected; assertTrue(m.get(\"mergePolicy\") instanceof MapSerializable);\n      assertNull(m.get(\"mergePolicyFactory\"));\n    }\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicy) ||\n        solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"151c786e439f34edb91b77d019109463ab0a6548","date":1562001139,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramPerThreadHardLimitMB\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96","date":1576143009,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null, true);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramPerThreadHardLimitMB\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramPerThreadHardLimitMB\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null, true);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramPerThreadHardLimitMB\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramPerThreadHardLimitMB\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramPerThreadHardLimitMB\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName, null, true);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramPerThreadHardLimitMB\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d7561aa9163e566b45895f013690403401d5e5c","date":1596822876,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/SolrIndexConfigTest#testToMap().mjava","sourceNew":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n    \n    ++mSizeExpected; assertTrue(m.get(\"maxCommitMergeWaitTime\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramPerThreadHardLimitMB\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","sourceOld":"  public void testToMap() throws Exception {\n    final String solrConfigFileNameWarmer = solrConfigFileNameWarmerRandomMergePolicyFactory;\n    final String solrConfigFileNameTMP = solrConfigFileNameTieredMergePolicyFactory;\n    final String solrConfigFileName = (random().nextBoolean() ? solrConfigFileNameWarmer : solrConfigFileNameTMP);\n    SolrConfig solrConfig = new SolrConfig(instanceDir, solrConfigFileName);\n    SolrIndexConfig solrIndexConfig = new SolrIndexConfig(solrConfig, null, null);\n    assertNotNull(solrIndexConfig);\n    assertNotNull(solrIndexConfig.mergePolicyFactoryInfo);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      assertNotNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    } else {\n      assertNull(solrIndexConfig.mergedSegmentWarmerInfo);\n    }\n    assertNotNull(solrIndexConfig.mergeSchedulerInfo);\n\n    Map<String, Object> m = solrIndexConfig.toMap(new LinkedHashMap<>());\n    int mSizeExpected = 0;\n\n    ++mSizeExpected; assertTrue(m.get(\"useCompoundFile\") instanceof Boolean);\n\n    ++mSizeExpected; assertTrue(m.get(\"maxBufferedDocs\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramBufferSizeMB\") instanceof Double);\n\n    ++mSizeExpected; assertTrue(m.get(\"ramPerThreadHardLimitMB\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"writeLockTimeout\") instanceof Integer);\n\n    ++mSizeExpected; assertTrue(m.get(\"lockType\") instanceof String);\n    {\n      final String lockType = (String)m.get(\"lockType\");\n      assertTrue(DirectoryFactory.LOCK_TYPE_SIMPLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NATIVE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_SINGLE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_NONE.equals(lockType) ||\n          DirectoryFactory.LOCK_TYPE_HDFS.equals(lockType));\n    }\n\n    ++mSizeExpected; assertTrue(m.get(\"infoStreamEnabled\") instanceof Boolean);\n    {\n      assertFalse(Boolean.valueOf(m.get(\"infoStreamEnabled\").toString()).booleanValue());\n    }\n    \n    ++mSizeExpected; assertTrue(m.get(\"mergeScheduler\") instanceof MapSerializable);\n    ++mSizeExpected; assertTrue(m.get(\"mergePolicyFactory\") instanceof MapSerializable);\n    if (solrConfigFileName.equals(solrConfigFileNameWarmerRandomMergePolicyFactory)) {\n      ++mSizeExpected; assertTrue(m.get(\"mergedSegmentWarmer\") instanceof MapSerializable);\n    } else {\n      assertNull(m.get(\"mergedSegmentWarmer\"));\n    }\n    ++mSizeExpected; assertNotNull(m.get(\"metrics\"));\n\n    assertEquals(mSizeExpected, m.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"151c786e439f34edb91b77d019109463ab0a6548":["28288370235ed02234a64753cdbf0c6ec096304a"],"5cedf6c663f63b47755a40ae6cd1405a7fe6b24d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["e50357e583524185222c1c691f5c333b34f7cbb2"],"1f1f31880696765d6aec499d3b01fa501129af45":["8f7730fa9149de890ea12da1fa93be9f5e3a1edf"],"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96":["151c786e439f34edb91b77d019109463ab0a6548"],"2b3091e174423680e7d6cce5f858d48cd5410bcf":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"28288370235ed02234a64753cdbf0c6ec096304a":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8f7730fa9149de890ea12da1fa93be9f5e3a1edf","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["5cedf6c663f63b47755a40ae6cd1405a7fe6b24d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"df724d84dab24a0cc54bec95a8680867adc7f171":["151c786e439f34edb91b77d019109463ab0a6548","ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96"],"1ea771da4621a28e1340bdaeb615d8553e4d7c9d":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2f7df713a0f1e310d18dd8da91c89a07a13f86f8","70d848516a5d0b23d183a2ceb4f4fb8634205956"],"5d7561aa9163e566b45895f013690403401d5e5c":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["8f7730fa9149de890ea12da1fa93be9f5e3a1edf","1f1f31880696765d6aec499d3b01fa501129af45"],"e50357e583524185222c1c691f5c333b34f7cbb2":["2b3091e174423680e7d6cce5f858d48cd5410bcf"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"8f7730fa9149de890ea12da1fa93be9f5e3a1edf":["1ea771da4621a28e1340bdaeb615d8553e4d7c9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d7561aa9163e566b45895f013690403401d5e5c"]},"commit2Childs":{"151c786e439f34edb91b77d019109463ab0a6548":["ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96","df724d84dab24a0cc54bec95a8680867adc7f171"],"5cedf6c663f63b47755a40ae6cd1405a7fe6b24d":["c02b804ab16489b95429791a2d8fb0e0728354d4"],"6e02c0d6a64df9c63897458b31d88b5ec3b854a5":["1ea771da4621a28e1340bdaeb615d8553e4d7c9d"],"1f1f31880696765d6aec499d3b01fa501129af45":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96":["df724d84dab24a0cc54bec95a8680867adc7f171","ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"2b3091e174423680e7d6cce5f858d48cd5410bcf":["e50357e583524185222c1c691f5c333b34f7cbb2"],"70d848516a5d0b23d183a2ceb4f4fb8634205956":["28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["151c786e439f34edb91b77d019109463ab0a6548"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"c02b804ab16489b95429791a2d8fb0e0728354d4":["2b3091e174423680e7d6cce5f858d48cd5410bcf"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"1ea771da4621a28e1340bdaeb615d8553e4d7c9d":["8f7730fa9149de890ea12da1fa93be9f5e3a1edf"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"5d7561aa9163e566b45895f013690403401d5e5c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["5d7561aa9163e566b45895f013690403401d5e5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5cedf6c663f63b47755a40ae6cd1405a7fe6b24d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","2f7df713a0f1e310d18dd8da91c89a07a13f86f8"],"e50357e583524185222c1c691f5c333b34f7cbb2":["6e02c0d6a64df9c63897458b31d88b5ec3b854a5"],"2f7df713a0f1e310d18dd8da91c89a07a13f86f8":["70d848516a5d0b23d183a2ceb4f4fb8634205956","28288370235ed02234a64753cdbf0c6ec096304a","f03e4bed5023ec3ef93a771b8888cae991cf448d","e9017cf144952056066919f1ebc7897ff9bd71b1"],"8f7730fa9149de890ea12da1fa93be9f5e3a1edf":["1f1f31880696765d6aec499d3b01fa501129af45","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","df724d84dab24a0cc54bec95a8680867adc7f171","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}