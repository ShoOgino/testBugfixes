{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Temp40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","commits":[{"id":"38f154048324ef4d19e56e818d0621cafb4fd453","date":1377246558,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Temp40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","pathOld":"/dev/null","sourceNew":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.hasPayloads();\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      freq = 1;\n      if (indexOmitsTF) {\n        Arrays.fill(freqs, 1);\n      }\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Temp40PostingsReader.SegmentDocsEnumBase#reset(FieldInfo,StandardTermState).mjava","sourceNew":null,"sourceOld":"    DocsEnum reset(FieldInfo fieldInfo, StandardTermState termState) throws IOException {\n      indexOmitsTF = fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY;\n      storePayloads = fieldInfo.hasPayloads();\n      storeOffsets = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) >= 0;\n      freqOffset = termState.freqOffset;\n      skipOffset = termState.skipOffset;\n\n      // TODO: for full enum case (eg segment merging) this\n      // seek is unnecessary; maybe we can avoid in such\n      // cases\n      freqIn.seek(termState.freqOffset);\n      limit = termState.docFreq;\n      assert limit > 0;\n      ord = 0;\n      doc = -1;\n      accum = 0;\n      // if (DEBUG) System.out.println(\"  sde limit=\" + limit + \" freqFP=\" + freqOffset);\n      skipped = false;\n\n      start = -1;\n      count = 0;\n      freq = 1;\n      if (indexOmitsTF) {\n        Arrays.fill(freqs, 1);\n      }\n      maxBufferedDocId = -1;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38f154048324ef4d19e56e818d0621cafb4fd453":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["38f154048324ef4d19e56e818d0621cafb4fd453"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"38f154048324ef4d19e56e818d0621cafb4fd453":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38f154048324ef4d19e56e818d0621cafb4fd453","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}