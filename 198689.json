{"path":"src/test/org/apache/lucene/index/TestNorms#nextNorm().mjava","commits":[{"id":"e3fd53e9969a60409c90fe264ff605778ba323f6","date":1168218319,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#nextNorm().mjava","pathOld":"/dev/null","sourceNew":"  // return unique norm values that are unchanged by encoding/decoding\n  private float nextNorm() {\n    float norm = lastNorm + normDelta;\n    do {\n      float norm1 = Similarity.decodeNorm(Similarity.encodeNorm(norm));\n      if (norm1 > lastNorm) {\n        //System.out.println(norm1+\" > \"+lastNorm);\n        norm = norm1;\n        break;\n      }\n      norm += normDelta;\n    } while (true);\n    norms.add(numDocNorms, new Float(norm));\n    modifiedNorms.add(numDocNorms, new Float(norm));\n    //System.out.println(\"creating norm(\"+numDocNorms+\"): \"+norm);\n    numDocNorms ++;\n    lastNorm = (norm>10 ? 0 : norm); //there's a limit to how many distinct values can be stored in a ingle byte\n    return norm;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#nextNorm().mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#nextNorm().mjava","sourceNew":"  // return unique norm values that are unchanged by encoding/decoding\n  private float nextNorm() {\n    float norm = lastNorm + normDelta;\n    do {\n      float norm1 = Similarity.decodeNorm(Similarity.encodeNorm(norm));\n      if (norm1 > lastNorm) {\n        //System.out.println(norm1+\" > \"+lastNorm);\n        norm = norm1;\n        break;\n      }\n      norm += normDelta;\n    } while (true);\n    norms.add(numDocNorms, Float.valueOf(norm));\n    modifiedNorms.add(numDocNorms, Float.valueOf(norm));\n    //System.out.println(\"creating norm(\"+numDocNorms+\"): \"+norm);\n    numDocNorms ++;\n    lastNorm = (norm>10 ? 0 : norm); //there's a limit to how many distinct values can be stored in a ingle byte\n    return norm;\n  }\n\n","sourceOld":"  // return unique norm values that are unchanged by encoding/decoding\n  private float nextNorm() {\n    float norm = lastNorm + normDelta;\n    do {\n      float norm1 = Similarity.decodeNorm(Similarity.encodeNorm(norm));\n      if (norm1 > lastNorm) {\n        //System.out.println(norm1+\" > \"+lastNorm);\n        norm = norm1;\n        break;\n      }\n      norm += normDelta;\n    } while (true);\n    norms.add(numDocNorms, new Float(norm));\n    modifiedNorms.add(numDocNorms, new Float(norm));\n    //System.out.println(\"creating norm(\"+numDocNorms+\"): \"+norm);\n    numDocNorms ++;\n    lastNorm = (norm>10 ? 0 : norm); //there's a limit to how many distinct values can be stored in a ingle byte\n    return norm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0eb5b0b5b98c777dad412afbfb347d2c0889327","date":1259094367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestNorms#nextNorm().mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#nextNorm().mjava","sourceNew":"  // return unique norm values that are unchanged by encoding/decoding\n  private float nextNorm() {\n    float norm = lastNorm + normDelta;\n    do {\n      float norm1 = similarityOne.decodeNormValue(similarityOne.encodeNormValue(norm));\n      if (norm1 > lastNorm) {\n        //System.out.println(norm1+\" > \"+lastNorm);\n        norm = norm1;\n        break;\n      }\n      norm += normDelta;\n    } while (true);\n    norms.add(numDocNorms, Float.valueOf(norm));\n    modifiedNorms.add(numDocNorms, Float.valueOf(norm));\n    //System.out.println(\"creating norm(\"+numDocNorms+\"): \"+norm);\n    numDocNorms ++;\n    lastNorm = (norm>10 ? 0 : norm); //there's a limit to how many distinct values can be stored in a ingle byte\n    return norm;\n  }\n\n","sourceOld":"  // return unique norm values that are unchanged by encoding/decoding\n  private float nextNorm() {\n    float norm = lastNorm + normDelta;\n    do {\n      float norm1 = Similarity.decodeNorm(Similarity.encodeNorm(norm));\n      if (norm1 > lastNorm) {\n        //System.out.println(norm1+\" > \"+lastNorm);\n        norm = norm1;\n        break;\n      }\n      norm += normDelta;\n    } while (true);\n    norms.add(numDocNorms, Float.valueOf(norm));\n    modifiedNorms.add(numDocNorms, Float.valueOf(norm));\n    //System.out.println(\"creating norm(\"+numDocNorms+\"): \"+norm);\n    numDocNorms ++;\n    lastNorm = (norm>10 ? 0 : norm); //there's a limit to how many distinct values can be stored in a ingle byte\n    return norm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNorms#nextNorm().mjava","pathOld":"src/test/org/apache/lucene/index/TestNorms#nextNorm().mjava","sourceNew":"  // return unique norm values that are unchanged by encoding/decoding\n  private float nextNorm() {\n    float norm = lastNorm + normDelta;\n    do {\n      float norm1 = similarityOne.decodeNormValue(similarityOne.encodeNormValue(norm));\n      if (norm1 > lastNorm) {\n        //System.out.println(norm1+\" > \"+lastNorm);\n        norm = norm1;\n        break;\n      }\n      norm += normDelta;\n    } while (true);\n    norms.add(numDocNorms, Float.valueOf(norm));\n    modifiedNorms.add(numDocNorms, Float.valueOf(norm));\n    //System.out.println(\"creating norm(\"+numDocNorms+\"): \"+norm);\n    numDocNorms ++;\n    lastNorm = (norm>10 ? 0 : norm); //there's a limit to how many distinct values can be stored in a ingle byte\n    return norm;\n  }\n\n","sourceOld":"  // return unique norm values that are unchanged by encoding/decoding\n  private float nextNorm() {\n    float norm = lastNorm + normDelta;\n    do {\n      float norm1 = similarityOne.decodeNormValue(similarityOne.encodeNormValue(norm));\n      if (norm1 > lastNorm) {\n        //System.out.println(norm1+\" > \"+lastNorm);\n        norm = norm1;\n        break;\n      }\n      norm += normDelta;\n    } while (true);\n    norms.add(numDocNorms, Float.valueOf(norm));\n    modifiedNorms.add(numDocNorms, Float.valueOf(norm));\n    //System.out.println(\"creating norm(\"+numDocNorms+\"): \"+norm);\n    numDocNorms ++;\n    lastNorm = (norm>10 ? 0 : norm); //there's a limit to how many distinct values can be stored in a ingle byte\n    return norm;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bcde5e3f23911110baa101ed062b544162825b5":["e3fd53e9969a60409c90fe264ff605778ba323f6"],"e3fd53e9969a60409c90fe264ff605778ba323f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["6bcde5e3f23911110baa101ed062b544162825b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"]},"commit2Childs":{"6bcde5e3f23911110baa101ed062b544162825b5":["b0eb5b0b5b98c777dad412afbfb347d2c0889327"],"e3fd53e9969a60409c90fe264ff605778ba323f6":["6bcde5e3f23911110baa101ed062b544162825b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3fd53e9969a60409c90fe264ff605778ba323f6"],"b0eb5b0b5b98c777dad412afbfb347d2c0889327":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}