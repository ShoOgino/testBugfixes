{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread.AutoScalingWatcher#process(WatchedEvent).mjava","commits":[{"id":"7aa2c1715ef9a80383edea1048655da291ed9b8f","date":1495196478,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread.AutoScalingWatcher#process(WatchedEvent).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(WatchedEvent watchedEvent) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(watchedEvent.getType())) {\n        return;\n      }\n\n      try {\n        refreshAutoScalingConf(this);\n      } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n        log.warn(\"ZooKeeper watch triggered for autoscaling conf, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        log.error(\"A ZK error has occurred\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"Interrupted\", e);\n      } catch (Exception e)  {\n        log.error(\"Unexpected exception\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread.AutoScalingWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread.AutoScalingWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent watchedEvent) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(watchedEvent.getType())) {\n        return;\n      }\n\n      try {\n        refreshAutoScalingConf(this);\n      } catch (ConnectException e) {\n        log.warn(\"ZooKeeper watch triggered for autoscaling conf, but we cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"Interrupted\", e);\n      } catch (Exception e)  {\n        log.error(\"Unexpected exception\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent watchedEvent) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(watchedEvent.getType())) {\n        return;\n      }\n\n      try {\n        refreshAutoScalingConf(this);\n      } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n        log.warn(\"ZooKeeper watch triggered for autoscaling conf, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        log.error(\"A ZK error has occurred\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"Interrupted\", e);\n      } catch (Exception e)  {\n        log.error(\"Unexpected exception\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread.AutoScalingWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread.AutoScalingWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent watchedEvent) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(watchedEvent.getType())) {\n        return;\n      }\n\n      try {\n        refreshAutoScalingConf(this);\n      } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n        log.warn(\"ZooKeeper watch triggered for autoscaling conf, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        log.error(\"A ZK error has occurred\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"Interrupted\", e);\n      } catch (Exception e)  {\n        log.error(\"Unexpected exception\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent watchedEvent) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(watchedEvent.getType())) {\n        return;\n      }\n\n      try {\n        refreshAutoScalingConf(this);\n      } catch (ConnectException e) {\n        log.warn(\"ZooKeeper watch triggered for autoscaling conf, but we cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"Interrupted\", e);\n      } catch (Exception e)  {\n        log.error(\"Unexpected exception\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread.AutoScalingWatcher#process(WatchedEvent).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(WatchedEvent watchedEvent) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(watchedEvent.getType())) {\n        return;\n      }\n\n      try {\n        refreshAutoScalingConf(this);\n      } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n        log.warn(\"ZooKeeper watch triggered for autoscaling conf, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        log.error(\"A ZK error has occurred\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"Interrupted\", e);\n      } catch (Exception e)  {\n        log.error(\"Unexpected exception\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread.AutoScalingWatcher#process(WatchedEvent).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void process(WatchedEvent watchedEvent) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(watchedEvent.getType())) {\n        return;\n      }\n\n      try {\n        refreshAutoScalingConf(this);\n      } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n        log.warn(\"ZooKeeper watch triggered for autoscaling conf, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        log.error(\"A ZK error has occurred\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"Interrupted\", e);\n      } catch (Exception e)  {\n        log.error(\"Unexpected exception\", e);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread.AutoScalingWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread.AutoScalingWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent watchedEvent) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(watchedEvent.getType())) {\n        return;\n      }\n\n      try {\n        refreshAutoScalingConf(this);\n      } catch (ConnectException e) {\n        log.warn(\"ZooKeeper watch triggered for autoscaling conf, but we cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"Interrupted\", e);\n      } catch (Exception e)  {\n        log.error(\"Unexpected exception\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent watchedEvent) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(watchedEvent.getType())) {\n        return;\n      }\n\n      try {\n        refreshAutoScalingConf(this);\n      } catch (KeeperException.ConnectionLossException | KeeperException.SessionExpiredException e) {\n        log.warn(\"ZooKeeper watch triggered for autoscaling conf, but Solr cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (KeeperException e) {\n        log.error(\"A ZK error has occurred\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"A ZK error has occurred\", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"Interrupted\", e);\n      } catch (Exception e)  {\n        log.error(\"Unexpected exception\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread.AutoScalingWatcher#process(WatchedEvent).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread.AutoScalingWatcher#process(WatchedEvent).mjava","sourceNew":"    @Override\n    public void process(WatchedEvent watchedEvent) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(watchedEvent.getType())) {\n        return;\n      }\n\n      try {\n        refreshAutoScalingConf(this);\n      } catch (ConnectException e) {\n        log.warn(\"ZooKeeper watch triggered for autoscaling conf, but we cannot talk to ZK: \", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"Interrupted\", e);\n      } catch (Exception e)  {\n        log.error(\"Unexpected exception\", e);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void process(WatchedEvent watchedEvent) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(watchedEvent.getType())) {\n        return;\n      }\n\n      try {\n        refreshAutoScalingConf(this);\n      } catch (ConnectException e) {\n        log.warn(\"ZooKeeper watch triggered for autoscaling conf, but we cannot talk to ZK: [{}]\", e.getMessage());\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"Interrupted\", e);\n      } catch (Exception e)  {\n        log.error(\"Unexpected exception\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/OverseerTriggerThread.AutoScalingWatcher#process(WatchedEvent).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void process(WatchedEvent watchedEvent) {\n      // session events are not change events, and do not remove the watcher\n      if (Event.EventType.None.equals(watchedEvent.getType())) {\n        return;\n      }\n\n      try {\n        refreshAutoScalingConf(this);\n      } catch (ConnectException e) {\n        log.warn(\"ZooKeeper watch triggered for autoscaling conf, but we cannot talk to ZK: \", e);\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.warn(\"Interrupted\", e);\n      } catch (Exception e)  {\n        log.error(\"Unexpected exception\", e);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["7aa2c1715ef9a80383edea1048655da291ed9b8f"],"3f504512a03d978990cbff30db0522b354e846db":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"7aa2c1715ef9a80383edea1048655da291ed9b8f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57c238f5fb83803b49b37b3a1a12224a64d47542":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7aa2c1715ef9a80383edea1048655da291ed9b8f":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","7aa2c1715ef9a80383edea1048655da291ed9b8f","560c18d71dad43d675158783c3840f8c80d6d39c"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["3f504512a03d978990cbff30db0522b354e846db"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}