{"path":"solr/core/src/test/org/apache/solr/search/TestSurroundQueryParser#testQueryParser().mjava","commits":[{"id":"401ea1a2f466e72dbbfe83d8ec4d6e378904424b","date":1315403659,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSurroundQueryParser#testQueryParser().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueryParser() {\n    String v = \"a b c d e a b c f g h i j k l m l k j z z z\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    \n    v=\"abc abxy cde efg ef e  \";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    \n    v=\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1001 1002 1003 1004 1005 1006 1007 1008 1009\";\n    assertU(adoc(\"id\",\"3\", \"text\",v,  \"text_np\",v));\n    assertU(commit());\n \n  \n    // run through a series of syntax tests, not exhaustive yet\n    String localP = \"{!surround df=text}\";\n    String t1;\n\n    t1  = localP+\"1 N 2\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='1']\");\n    // but ordered search should fail\n    t1 = localP +\"2 W 1\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='0']\");\n\n    // alternate syntax\n    t1 = localP + \"3n(a,e)\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='1']\");\n\n    // wildcards\n    t1 =localP + \"100* w 20\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='0']\");\n    t1 =localP + \"100* n 20\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='1']\");\n\n    // nested\n    t1 = localP + \"(1003 2n 1001) 3N 1006\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='1']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5274cd24656972dfb7a0f3e76e9ecae9e73ceb20","date":1361491558,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSurroundQueryParser#testQueryParser().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSurroundQueryParser#testQueryParser().mjava","sourceNew":"  public void testQueryParser() {\n    String v = \"a b c d e a b c f g h i j k l m l k j z z z\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v, \"name\",v));\n    \n    v=\"abc abxy cde efg ef e  \";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    \n    v=\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1001 1002 1003 1004 1005 1006 1007 1008 1009\";\n    assertU(adoc(\"id\",\"3\", \"text\",v,  \"text_np\",v));\n    assertU(commit());\n \n  \n    // run through a series of syntax tests, not exhaustive yet\n    String localP = \"{!surround df=text}\";\n    String t1;\n\n    t1  = localP+\"1 N 2\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='1']\");\n    // but ordered search should fail\n    t1 = localP +\"2 W 1\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='0']\");\n\n    // alternate syntax\n    t1 = localP + \"3n(a,e)\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='1']\");\n\n    // wildcards\n    t1 =localP + \"100* w 20\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='0']\");\n    t1 =localP + \"100* n 20\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='1']\");\n\n    // nested\n    t1 = localP + \"(1003 2n 1001) 3N 1006\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='1']\");\n\n    // test highlighted response with ordered query and hl.usePhraseHighlighter=true\n    assertQ(req(\"q\", \"{!surround df=name}k w l\", \n                \"hl\", \"true\", \n                \"hl.fl\", \"name\", \n                \"hl.usePhraseHighlighter\", \"true\")\n        ,\"//*[@numFound='1']\"\n        ,\"//lst[@name='highlighting']/lst[@name='1']\"\n        ,\"//lst[@name='1']/arr[@name='name']/str[.='a b c d e a b c f g h i j <em>k</em> <em>l</em> m l k j z z z']\");\n\n    // test highlighted response with ordered query and hl.usePhraseHighlighter=false\n    assertQ(req(\"q\", \"{!surround df=name}k w l\", \n                \"hl\", \"true\", \n                \"hl.fl\", \"name\", \n                \"hl.usePhraseHighlighter\", \"false\")\n        ,\"//*[@numFound='1']\"\n        ,\"//lst[@name='highlighting']/lst[@name='1']\"\n        ,\"//lst[@name='1']/arr[@name='name']/str[.='a b c d e a b c f g h i j <em>k</em> <em>l</em> m <em>l</em> <em>k</em> j z z z']\");\n  }\n\n","sourceOld":"  public void testQueryParser() {\n    String v = \"a b c d e a b c f g h i j k l m l k j z z z\";\n    assertU(adoc(\"id\",\"1\", \"text\",v,  \"text_np\",v));\n    \n    v=\"abc abxy cde efg ef e  \";\n    assertU(adoc(\"id\",\"2\", \"text\",v,  \"text_np\",v));\n    \n    v=\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 1001 1002 1003 1004 1005 1006 1007 1008 1009\";\n    assertU(adoc(\"id\",\"3\", \"text\",v,  \"text_np\",v));\n    assertU(commit());\n \n  \n    // run through a series of syntax tests, not exhaustive yet\n    String localP = \"{!surround df=text}\";\n    String t1;\n\n    t1  = localP+\"1 N 2\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='1']\");\n    // but ordered search should fail\n    t1 = localP +\"2 W 1\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='0']\");\n\n    // alternate syntax\n    t1 = localP + \"3n(a,e)\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='1']\");\n\n    // wildcards\n    t1 =localP + \"100* w 20\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='0']\");\n    t1 =localP + \"100* n 20\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='1']\");\n\n    // nested\n    t1 = localP + \"(1003 2n 1001) 3N 1006\";\n    assertQ(req(\"q\", t1, \"indent\",\"true\")\n        ,\"//*[@numFound='1']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5274cd24656972dfb7a0f3e76e9ecae9e73ceb20":["401ea1a2f466e72dbbfe83d8ec4d6e378904424b"],"401ea1a2f466e72dbbfe83d8ec4d6e378904424b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5274cd24656972dfb7a0f3e76e9ecae9e73ceb20"]},"commit2Childs":{"5274cd24656972dfb7a0f3e76e9ecae9e73ceb20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"401ea1a2f466e72dbbfe83d8ec4d6e378904424b":["5274cd24656972dfb7a0f3e76e9ecae9e73ceb20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["401ea1a2f466e72dbbfe83d8ec4d6e378904424b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}