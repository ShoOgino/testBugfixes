{"path":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyArraySort().mjava","commits":[{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyArraySort().mjava","pathOld":"/dev/null","sourceNew":"  // should produce no exceptions\n  public void testEmptyArraySort() {\n    List<Integer> list = Collections.emptyList();\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["717ed5820286a38d2c0d24df07dad511eb303a83"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyArraySort().mjava","pathOld":"/dev/null","sourceNew":"  // should produce no exceptions\n  public void testEmptyArraySort() {\n    List<Integer> list = Collections.emptyList();\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyArraySort().mjava","pathOld":"/dev/null","sourceNew":"  // should produce no exceptions\n  public void testEmptyArraySort() {\n    List<Integer> list = Collections.emptyList();\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"717ed5820286a38d2c0d24df07dad511eb303a83","date":1300981246,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyArraySort().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyArraySort().mjava","sourceNew":"  // should produce no exceptions\n  public void testEmptyArraySort() {\n    List<Integer> list = Arrays.asList(new Integer[0]);\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","sourceOld":"  // should produce no exceptions\n  public void testEmptyArraySort() {\n    List<Integer> list = Collections.emptyList();\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","bugFix":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20bec0dc801c18dfd87add05a02af34d5f2177b4","date":1301137613,"type":6,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyListSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyArraySort().mjava","sourceNew":"  public void testEmptyListSort() {\n    // should produce no exceptions\n    List<Integer> list = Arrays.asList(new Integer[0]);\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n    \n    // check that empty non-random access lists pass sorting without ex (as sorting is not needed)\n    list = new LinkedList<Integer>();\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","sourceOld":"  // should produce no exceptions\n  public void testEmptyArraySort() {\n    List<Integer> list = Arrays.asList(new Integer[0]);\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20bec0dc801c18dfd87add05a02af34d5f2177b4","date":1301137613,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testOneElementListSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyArraySort().mjava","sourceNew":"  public void testOneElementListSort() {\n    // check that one-element non-random access lists pass sorting without ex (as sorting is not needed)\n    List<Integer> list = new LinkedList<Integer>();\n    list.add(1);\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","sourceOld":"  // should produce no exceptions\n  public void testEmptyArraySort() {\n    List<Integer> list = Arrays.asList(new Integer[0]);\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyArraySort().mjava","sourceNew":null,"sourceOld":"  // should produce no exceptions\n  public void testEmptyArraySort() {\n    List<Integer> list = Collections.emptyList();\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/TestCollectionUtil#testEmptyArraySort().mjava","sourceNew":null,"sourceOld":"  // should produce no exceptions\n  public void testEmptyArraySort() {\n    List<Integer> list = Collections.emptyList();\n    CollectionUtil.quickSort(list);\n    CollectionUtil.mergeSort(list);\n    CollectionUtil.insertionSort(list);\n    CollectionUtil.quickSort(list, Collections.reverseOrder());\n    CollectionUtil.mergeSort(list, Collections.reverseOrder());\n    CollectionUtil.insertionSort(list, Collections.reverseOrder());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","20bec0dc801c18dfd87add05a02af34d5f2177b4"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","20bec0dc801c18dfd87add05a02af34d5f2177b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20bec0dc801c18dfd87add05a02af34d5f2177b4":["717ed5820286a38d2c0d24df07dad511eb303a83"],"717ed5820286a38d2c0d24df07dad511eb303a83":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20bec0dc801c18dfd87add05a02af34d5f2177b4"]},"commit2Childs":{"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["717ed5820286a38d2c0d24df07dad511eb303a83","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"20bec0dc801c18dfd87add05a02af34d5f2177b4":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"717ed5820286a38d2c0d24df07dad511eb303a83":["20bec0dc801c18dfd87add05a02af34d5f2177b4"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}