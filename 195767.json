{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   */\n  public void connect() {\n    if (zkStateReader != null) return;\n    synchronized(this) {\n      if (zkStateReader != null) return;\n      try {\n        ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout, zkClientTimeout);\n        zk.makeCollectionsNodeWatches();\n        zk.makeShardZkNodeWatches(false);\n        zk.updateCloudState(true);\n        zkStateReader = zk;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      } catch (KeeperException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (IOException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (TimeoutException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   */\n  public void connect() {\n    if (zkStateReader != null) return;\n    synchronized(this) {\n      if (zkStateReader != null) return;\n      try {\n        ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout, zkClientTimeout);\n        zk.makeCollectionsNodeWatches();\n        zk.makeShardZkNodeWatches(false);\n        zk.updateCloudState(true);\n        zkStateReader = zk;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      } catch (KeeperException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (IOException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (TimeoutException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   */\n  public void connect() {\n    if (zkStateReader != null) return;\n    synchronized(this) {\n      if (zkStateReader != null) return;\n      try {\n        ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout, zkClientTimeout);\n        zk.makeCollectionsNodeWatches();\n        zk.makeShardZkNodeWatches(false);\n        zk.updateCloudState(true);\n        zkStateReader = zk;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      } catch (KeeperException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (IOException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (TimeoutException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   */\n  public void connect() {\n    if (zkStateReader != null) return;\n    synchronized(this) {\n      if (zkStateReader != null) return;\n      try {\n        ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout, zkClientTimeout);\n        zk.makeCollectionsNodeWatches();\n        zk.makeShardZkNodeWatches(false);\n        zk.updateCloudState(true);\n        zkStateReader = zk;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      } catch (KeeperException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (IOException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (TimeoutException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   */\n  public void connect() {\n    if (zkStateReader != null) return;\n    synchronized(this) {\n      if (zkStateReader != null) return;\n      try {\n        ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout, zkClientTimeout);\n        zk.makeCollectionsNodeWatches();\n        zk.makeShardZkNodeWatches(false);\n        zk.updateCloudState(true);\n        zkStateReader = zk;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      } catch (KeeperException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (IOException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (TimeoutException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   */\n  public void connect() {\n    if (zkStateReader != null) return;\n    synchronized(this) {\n      if (zkStateReader != null) return;\n      try {\n        ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout, zkClientTimeout);\n        zk.makeCollectionsNodeWatches();\n        zk.makeShardZkNodeWatches(false);\n        zk.updateCloudState(true);\n        zkStateReader = zk;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      } catch (KeeperException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (IOException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (TimeoutException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          try {\n            ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout,\n                zkClientTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   */\n  public void connect() {\n    if (zkStateReader != null) return;\n    synchronized(this) {\n      if (zkStateReader != null) return;\n      try {\n        ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout, zkClientTimeout);\n        zk.makeCollectionsNodeWatches();\n        zk.makeShardZkNodeWatches(false);\n        zk.updateCloudState(true);\n        zkStateReader = zk;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      } catch (KeeperException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (IOException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (TimeoutException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["ded8a990722c1633fea2f2be8ad72610e11e45bb","3d950d45735d4fdc1b2b4e01ec04b438a3f92d0c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          try {\n            ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout,\n                zkClientTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   */\n  public void connect() {\n    if (zkStateReader != null) return;\n    synchronized(this) {\n      if (zkStateReader != null) return;\n      try {\n        ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout, zkClientTimeout);\n        zk.makeCollectionsNodeWatches();\n        zk.makeShardZkNodeWatches(false);\n        zk.updateCloudState(true);\n        zkStateReader = zk;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      } catch (KeeperException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (IOException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (TimeoutException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          try {\n            ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout,\n                zkClientTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   */\n  public void connect() {\n    if (zkStateReader != null) return;\n    synchronized(this) {\n      if (zkStateReader != null) return;\n      try {\n        ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout, zkClientTimeout);\n        zk.makeCollectionsNodeWatches();\n        zk.makeShardZkNodeWatches(false);\n        zk.updateCloudState(true);\n        zkStateReader = zk;\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      } catch (KeeperException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (IOException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n\n      } catch (TimeoutException e) {\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd9ddb59e9d33950773d186a8b726b5610ae3aad","date":1341258232,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          try {\n            ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout,\n                zkClientTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          try {\n            ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout,\n                zkClientTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          try {\n            ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout,\n                zkClientTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   * @throws IOException\n   * @throws TimeoutException\n   * @throws InterruptedException\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          try {\n            ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout,\n                zkClientTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d950d45735d4fdc1b2b4e01ec04b438a3f92d0c","date":1381841262,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          try {\n            ZkStateReader zk = new ZkStateReader(zkHost, zkClientTimeout,\n                zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          try {\n            ZkStateReader zk = new ZkStateReader(zkHost, zkConnectTimeout,\n                zkClientTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          try {\n            zkStateReader = createZkStateReader(zkHost, zkClientTimeout, zkConnectTimeout);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          try {\n            ZkStateReader zk = new ZkStateReader(zkHost, zkClientTimeout,\n                zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          try {\n            ZkStateReader zk = new ZkStateReader(zkHost, zkClientTimeout,\n                zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          try {\n            zkStateReader = createZkStateReader(zkHost, zkClientTimeout, zkConnectTimeout);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"524e6015de751650042b84f0ac3932da90254cba","date":1402403861,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          ZkStateReader zk = null;\n          try {\n            zk = new ZkStateReader(zkHost, zkClientTimeout,\n                zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (Exception e) {\n            if (zk != null) zk.close();\n            // do not wrap because clients may be relying on the underlying exception being thrown\n            throw e;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          try {\n            ZkStateReader zk = new ZkStateReader(zkHost, zkClientTimeout,\n                zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ded8a990722c1633fea2f2be8ad72610e11e45bb","date":1402496402,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          ZkStateReader zk = null;\n          try {\n            zk = new ZkStateReader(zkHost, zkClientTimeout,\n                zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            if (zk != null) zk.close();\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (Exception e) {\n            if (zk != null) zk.close();\n            // do not wrap because clients may be relying on the underlying exception being thrown\n            throw e;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          ZkStateReader zk = null;\n          try {\n            zk = new ZkStateReader(zkHost, zkClientTimeout,\n                zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (Exception e) {\n            if (zk != null) zk.close();\n            // do not wrap because clients may be relying on the underlying exception being thrown\n            throw e;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          ZkStateReader zk = null;\n          try {\n            zk = new ZkStateReader(zkHost, zkClientTimeout, zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            if (zk != null) zk.close();\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (Exception e) {\n            if (zk != null) zk.close();\n            // do not wrap because clients may be relying on the underlying exception being thrown\n            throw e;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          ZkStateReader zk = null;\n          try {\n            zk = new ZkStateReader(zkHost, zkClientTimeout,\n                zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            if (zk != null) zk.close();\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (Exception e) {\n            if (zk != null) zk.close();\n            // do not wrap because clients may be relying on the underlying exception being thrown\n            throw e;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          ZkStateReader zk = null;\n          try {\n            zk = new ZkStateReader(zkHost, zkClientTimeout,\n                zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            if (zk != null) zk.close();\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (Exception e) {\n            if (zk != null) zk.close();\n            // do not wrap because clients may be relying on the underlying exception being thrown\n            throw e;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          ZkStateReader zk = null;\n          try {\n            zk = new ZkStateReader(zkHost, zkClientTimeout, zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            if (zk != null) zk.close();\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (Exception e) {\n            if (zk != null) zk.close();\n            // do not wrap because clients may be relying on the underlying exception being thrown\n            throw e;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#connect().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#connect().mjava","sourceNew":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          ZkStateReader zk = null;\n          try {\n            zk = new ZkStateReader(zkHost, zkClientTimeout,\n                zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            if (zk != null) zk.close();\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (Exception e) {\n            if (zk != null) zk.close();\n            // do not wrap because clients may be relying on the underlying exception being thrown\n            throw e;\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Connect to the zookeeper ensemble.\n   * This is an optional method that may be used to force a connect before any other requests are sent.\n   *\n   */\n  public void connect() {\n    if (zkStateReader == null) {\n      synchronized (this) {\n        if (zkStateReader == null) {\n          ZkStateReader zk = null;\n          try {\n            zk = new ZkStateReader(zkHost, zkClientTimeout,\n                zkConnectTimeout);\n            zk.createClusterStateWatchersAndUpdate();\n            zkStateReader = zk;\n          } catch (InterruptedException e) {\n            if (zk != null) zk.close();\n            Thread.currentThread().interrupt();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (KeeperException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (IOException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (TimeoutException e) {\n            if (zk != null) zk.close();\n            throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                \"\", e);\n          } catch (Exception e) {\n            if (zk != null) zk.close();\n            // do not wrap because clients may be relying on the underlying exception being thrown\n            throw e;\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ded8a990722c1633fea2f2be8ad72610e11e45bb":["524e6015de751650042b84f0ac3932da90254cba"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"3d950d45735d4fdc1b2b4e01ec04b438a3f92d0c":["bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bafca15d8e408346a67f4282ad1143b88023893b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["ded8a990722c1633fea2f2be8ad72610e11e45bb"],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","bd9ddb59e9d33950773d186a8b726b5610ae3aad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"524e6015de751650042b84f0ac3932da90254cba":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["3d950d45735d4fdc1b2b4e01ec04b438a3f92d0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"ded8a990722c1633fea2f2be8ad72610e11e45bb":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"c26f00b574427b55127e869b935845554afde1fa":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["bafca15d8e408346a67f4282ad1143b88023893b"],"3d950d45735d4fdc1b2b4e01ec04b438a3f92d0c":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["524e6015de751650042b84f0ac3932da90254cba"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"bd9ddb59e9d33950773d186a8b726b5610ae3aad":["3d950d45735d4fdc1b2b4e01ec04b438a3f92d0c","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"524e6015de751650042b84f0ac3932da90254cba":["ded8a990722c1633fea2f2be8ad72610e11e45bb"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","bd9ddb59e9d33950773d186a8b726b5610ae3aad","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}