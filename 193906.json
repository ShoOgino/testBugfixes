{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","sourceNew":"  /**\n   * Run the benchmark algorithm.\n   * @param args benchmark config and algorithm files\n   */\n  public static void main(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n\n  }\n\n","sourceOld":"  /**\n   * Run the benchmark algorithm.\n   * @param args benchmark config and algorithm files\n   */\n  public static void main(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","sourceNew":"  /**\n   * Run the benchmark algorithm.\n   * @param args benchmark config and algorithm files\n   */\n  public static void main(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n\n  }\n\n","sourceOld":"  /**\n   * Run the benchmark algorithm.\n   * @param args benchmark config and algorithm files\n   */\n  public static void main(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","sourceNew":"  /**\n   * Run the benchmark algorithm.\n   * @param args benchmark config and algorithm files\n   */\n  public static void main(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n\n  }\n\n","sourceOld":"  /**\n   * Run the benchmark algorithm.\n   * @param args benchmark config and algorithm files\n   */\n  public static void main(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"917831cb2d30726680ff49135409fa9cc6b3cc53","date":1300651959,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","sourceNew":"  /**\n   * Run the benchmark algorithm.\n   * @param args benchmark config and algorithm files\n   */\n  public static void main(String[] args) {\n    exec(args);\n  }\n\n","sourceOld":"  /**\n   * Run the benchmark algorithm.\n   * @param args benchmark config and algorithm files\n   */\n  public static void main(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","sourceNew":"  /**\n   * Run the benchmark algorithm.\n   * @param args benchmark config and algorithm files\n   */\n  public static void main(String[] args) {\n    exec(args);\n  }\n\n","sourceOld":"  /**\n   * Run the benchmark algorithm.\n   * @param args benchmark config and algorithm files\n   */\n  public static void main(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","sourceNew":"  /**\n   * Run the benchmark algorithm.\n   * @param args benchmark config and algorithm files\n   */\n  public static void main(String[] args) {\n    exec(args);\n  }\n\n","sourceOld":"  /**\n   * Run the benchmark algorithm.\n   * @param args benchmark config and algorithm files\n   */\n  public static void main(String[] args) {\n    // verify command line args\n    if (args.length < 1) {\n      System.err.println(\"Usage: java Benchmark <algorithm file>\");\n      System.exit(1);\n    }\n    \n    // verify input files \n    File algFile = new File(args[0]);\n    if (!algFile.exists() || !algFile.isFile() || !algFile.canRead()) {\n      System.err.println(\"cannot find/read algorithm file: \"+algFile.getAbsolutePath()); \n      System.exit(1);\n    }\n    \n    System.out.println(\"Running algorithm from: \"+algFile.getAbsolutePath());\n    \n    Benchmark benchmark = null;\n    try {\n      benchmark = new Benchmark(new FileReader(algFile));\n    } catch (Exception e) {\n      e.printStackTrace();\n      System.exit(1);\n    }\n\n    System.out.println(\"------------> algorithm:\");\n    System.out.println(benchmark.getAlgorithm().toString());\n\n    // execute\n    try {\n      benchmark.execute();\n    } catch (Exception e) {\n      System.err.println(\"Error: cannot execute the algorithm! \"+e.getMessage());\n      e.printStackTrace();\n    }\n\n    System.out.println(\"####################\");\n    System.out.println(\"###  D O N E !!! ###\");\n    System.out.println(\"####################\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/Benchmark#main(String[]).mjava","sourceNew":"  /**\n   * Run the benchmark algorithm.\n   * @param args benchmark config and algorithm files\n   */\n  public static void main(String[] args) {\n    exec(args);\n  }\n\n","sourceOld":"  /**\n   * Run the benchmark algorithm.\n   * @param args benchmark config and algorithm files\n   */\n  public static void main(String[] args) {\n    exec(args);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["917831cb2d30726680ff49135409fa9cc6b3cc53"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["868da859b43505d9d2a023bfeae6dd0c795f5295","917831cb2d30726680ff49135409fa9cc6b3cc53"],"917831cb2d30726680ff49135409fa9cc6b3cc53":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","917831cb2d30726680ff49135409fa9cc6b3cc53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","917831cb2d30726680ff49135409fa9cc6b3cc53","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"917831cb2d30726680ff49135409fa9cc6b3cc53":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}