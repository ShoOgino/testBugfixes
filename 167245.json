{"path":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#testPutRemoveClear().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#testPutRemoveClear().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxMonitoredMap#testPutRemoveClear().mjava","sourceNew":"  @Test\n  public void testPutRemoveClear() throws Exception {\n    MockInfoMBean mock = new MockInfoMBean();\n    monitoredMap.put(\"mock\", mock);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, Query.match(\n            Query.attr(\"name\"), Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n            .isEmpty());\n\n    monitoredMap.remove(\"mock\");\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertTrue(\"MBean for mock object found in MBeanServer even after removal\",\n            objects.isEmpty());\n\n    monitoredMap.put(\"mock\", mock);\n    monitoredMap.put(\"mock2\", mock);\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n            .isEmpty());\n\n    monitoredMap.clear();\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertTrue(\n            \"MBean for mock object found in MBeanServer even after clear has been called\",\n            objects.isEmpty());\n  }\n\n","sourceOld":"  @Test\n  public void testPutRemoveClear() throws Exception {\n    MockInfoMBean mock = new MockInfoMBean();\n    monitoredMap.put(\"mock\", mock);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, Query.match(\n            Query.attr(\"name\"), Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n            .isEmpty());\n\n    monitoredMap.remove(\"mock\");\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertTrue(\"MBean for mock object found in MBeanServer even after removal\",\n            objects.isEmpty());\n\n    monitoredMap.put(\"mock\", mock);\n    monitoredMap.put(\"mock2\", mock);\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n            .isEmpty());\n\n    monitoredMap.clear();\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertTrue(\n            \"MBean for mock object found in MBeanServer even after clear has been called\",\n            objects.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#testPutRemoveClear().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxMonitoredMap#testPutRemoveClear().mjava","sourceNew":"  @Test\n  public void testPutRemoveClear() throws Exception {\n    MockInfoMBean mock = new MockInfoMBean();\n    monitoredMap.put(\"mock\", mock);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, Query.match(\n            Query.attr(\"name\"), Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n            .isEmpty());\n\n    monitoredMap.remove(\"mock\");\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertTrue(\"MBean for mock object found in MBeanServer even after removal\",\n            objects.isEmpty());\n\n    monitoredMap.put(\"mock\", mock);\n    monitoredMap.put(\"mock2\", mock);\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n            .isEmpty());\n\n    monitoredMap.clear();\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertTrue(\n            \"MBean for mock object found in MBeanServer even after clear has been called\",\n            objects.isEmpty());\n  }\n\n","sourceOld":"  @Test\n  public void testPutRemoveClear() throws Exception {\n    MockInfoMBean mock = new MockInfoMBean();\n    monitoredMap.put(\"mock\", mock);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, Query.match(\n            Query.attr(\"name\"), Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n            .isEmpty());\n\n    monitoredMap.remove(\"mock\");\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertTrue(\"MBean for mock object found in MBeanServer even after removal\",\n            objects.isEmpty());\n\n    monitoredMap.put(\"mock\", mock);\n    monitoredMap.put(\"mock2\", mock);\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n            .isEmpty());\n\n    monitoredMap.clear();\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertTrue(\n            \"MBean for mock object found in MBeanServer even after clear has been called\",\n            objects.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#testPutRemoveClear().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestJmxMonitoredMap#testPutRemoveClear().mjava","sourceNew":"  @Test\n  public void testPutRemoveClear() throws Exception {\n    MockInfoMBean mock = new MockInfoMBean();\n    monitoredMap.put(\"mock\", mock);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, Query.match(\n            Query.attr(\"name\"), Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n            .isEmpty());\n\n    monitoredMap.remove(\"mock\");\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertTrue(\"MBean for mock object found in MBeanServer even after removal\",\n            objects.isEmpty());\n\n    monitoredMap.put(\"mock\", mock);\n    monitoredMap.put(\"mock2\", mock);\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n            .isEmpty());\n\n    monitoredMap.clear();\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertTrue(\n            \"MBean for mock object found in MBeanServer even after clear has been called\",\n            objects.isEmpty());\n  }\n\n","sourceOld":"  @Test\n  public void testPutRemoveClear() throws Exception {\n    MockInfoMBean mock = new MockInfoMBean();\n    monitoredMap.put(\"mock\", mock);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, Query.match(\n            Query.attr(\"name\"), Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n            .isEmpty());\n\n    monitoredMap.remove(\"mock\");\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertTrue(\"MBean for mock object found in MBeanServer even after removal\",\n            objects.isEmpty());\n\n    monitoredMap.put(\"mock\", mock);\n    monitoredMap.put(\"mock2\", mock);\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n            .isEmpty());\n\n    monitoredMap.clear();\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertTrue(\n            \"MBean for mock object found in MBeanServer even after clear has been called\",\n            objects.isEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e26e75cfb1a17b3f7431fafc9cb3caf5678681a5","date":1336412267,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#testPutRemoveClear().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#testPutRemoveClear().mjava","sourceNew":"  @Test\n  public void testPutRemoveClear() throws Exception {\n    MockInfoMBean mock = new MockInfoMBean();\n    monitoredMap.put(\"mock\", mock);\n\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, Query.match(\n        Query.attr(\"name\"), Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n        .isEmpty());\n\n    monitoredMap.remove(\"mock\");\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n        Query.value(\"mock\")));\n    assertTrue(\"MBean for mock object found in MBeanServer even after removal\",\n        objects.isEmpty());\n\n    monitoredMap.put(\"mock\", mock);\n    monitoredMap.put(\"mock2\", mock);\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n        Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n        .isEmpty());\n\n    monitoredMap.clear();\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n        Query.value(\"mock\")));\n    assertTrue(\n        \"MBean for mock object found in MBeanServer even after clear has been called\",\n        objects.isEmpty());\n\n  }\n\n","sourceOld":"  @Test\n  public void testPutRemoveClear() throws Exception {\n    MockInfoMBean mock = new MockInfoMBean();\n    monitoredMap.put(\"mock\", mock);\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, Query.match(\n            Query.attr(\"name\"), Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n            .isEmpty());\n\n    monitoredMap.remove(\"mock\");\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertTrue(\"MBean for mock object found in MBeanServer even after removal\",\n            objects.isEmpty());\n\n    monitoredMap.put(\"mock\", mock);\n    monitoredMap.put(\"mock2\", mock);\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n            .isEmpty());\n\n    monitoredMap.clear();\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n            Query.value(\"mock\")));\n    assertTrue(\n            \"MBean for mock object found in MBeanServer even after clear has been called\",\n            objects.isEmpty());\n  }\n\n","bugFix":["6ec2a01e62b7b206d9466aafaf04d8a9d6aee77b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#testPutRemoveClear().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testPutRemoveClear() throws Exception {\n    MockInfoMBean mock = new MockInfoMBean();\n    monitoredMap.put(\"mock\", mock);\n\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, Query.match(\n        Query.attr(\"name\"), Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n        .isEmpty());\n\n    monitoredMap.remove(\"mock\");\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n        Query.value(\"mock\")));\n    assertTrue(\"MBean for mock object found in MBeanServer even after removal\",\n        objects.isEmpty());\n\n    monitoredMap.put(\"mock\", mock);\n    monitoredMap.put(\"mock2\", mock);\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n        Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n        .isEmpty());\n\n    monitoredMap.clear();\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n        Query.value(\"mock\")));\n    assertTrue(\n        \"MBean for mock object found in MBeanServer even after clear has been called\",\n        objects.isEmpty());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/TestJmxMonitoredMap#testPutRemoveClear().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testPutRemoveClear() throws Exception {\n    MockInfoMBean mock = new MockInfoMBean();\n    monitoredMap.put(\"mock\", mock);\n\n\n    Set<ObjectInstance> objects = mbeanServer.queryMBeans(null, Query.match(\n        Query.attr(\"name\"), Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n        .isEmpty());\n\n    monitoredMap.remove(\"mock\");\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n        Query.value(\"mock\")));\n    assertTrue(\"MBean for mock object found in MBeanServer even after removal\",\n        objects.isEmpty());\n\n    monitoredMap.put(\"mock\", mock);\n    monitoredMap.put(\"mock2\", mock);\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n        Query.value(\"mock\")));\n    assertFalse(\"No MBean for mock object found in MBeanServer\", objects\n        .isEmpty());\n\n    monitoredMap.clear();\n    objects = mbeanServer.queryMBeans(null, Query.match(Query.attr(\"name\"),\n        Query.value(\"mock\")));\n    assertTrue(\n        \"MBean for mock object found in MBeanServer even after clear has been called\",\n        objects.isEmpty());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e26e75cfb1a17b3f7431fafc9cb3caf5678681a5":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"816521ebaad5add9cb96bb88c577394e2938c40b":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"e26e75cfb1a17b3f7431fafc9cb3caf5678681a5":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"c26f00b574427b55127e869b935845554afde1fa":["e26e75cfb1a17b3f7431fafc9cb3caf5678681a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}