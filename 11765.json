{"path":"src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","commits":[{"id":"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c","date":1249333745,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = field.multiValued() ? Integer.MAX_VALUE : precisionStep; \n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr, Field.Store.YES);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2a8ebea459a12fd73b3a200b86053f407cf33693"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a8ebea459a12fd73b3a200b86053f407cf33693","date":1249412793,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","pathOld":"src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","sourceNew":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr, Field.Store.YES);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = field.multiValued() ? Integer.MAX_VALUE : precisionStep; \n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr, Field.Store.YES);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","pathOld":"src/java/org/apache/solr/schema/TrieField#createField(SchemaField,String,float).mjava","sourceNew":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr, Field.Store.YES);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","sourceOld":"  @Override\n  public Field createField(SchemaField field, String externalVal, float boost) {\n    boolean indexed = field.indexed();\n    boolean stored = field.stored();\n\n    if (!indexed && !stored) {\n      if (log.isTraceEnabled())\n        log.trace(\"Ignoring unindexed/unstored field: \" + field);\n      return null;\n    }\n\n    int ps = precisionStep;\n\n    byte[] arr=null;\n    TokenStream ts=null;\n    // String indexedVal = indexed && precisionStep==0 ? readableToIndexed(externalVal) : null;\n\n    switch (type) {\n      case INTEGER:\n        int i = Integer.parseInt(externalVal);\n        if (stored) arr = toArr(i);\n        if (indexed) ts = new NumericTokenStream(ps).setIntValue(i);\n        break;\n      case FLOAT:\n        float f = Float.parseFloat(externalVal);\n        if (stored) arr = toArr(f);\n        if (indexed) ts = new NumericTokenStream(ps).setFloatValue(f);\n        break;\n      case LONG:\n        long l = Long.parseLong(externalVal);\n        if (stored) arr = toArr(l);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(l);\n        break;\n      case DOUBLE:\n        double d = Double.parseDouble(externalVal);\n        if (stored) arr = toArr(d);\n        if (indexed) ts = new NumericTokenStream(ps).setDoubleValue(d);\n        break;\n      case DATE:\n        long time = dateField.parseMath(null, externalVal).getTime();\n        if (stored) arr = toArr(time);\n        if (indexed) ts = new NumericTokenStream(ps).setLongValue(time);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n\n    Field f;\n    if (stored) {\n      f = new Field(field.getName(), arr, Field.Store.YES);\n      if (indexed) f.setTokenStream(ts);\n    } else {\n      f = new Field(field.getName(), ts);\n    }\n\n    // term vectors aren't supported\n\n    f.setOmitNorms(field.omitNorms());\n    f.setOmitTermFreqAndPositions(field.omitTf());\n    f.setBoost(boost);\n    return f;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["2a8ebea459a12fd73b3a200b86053f407cf33693"],"2a8ebea459a12fd73b3a200b86053f407cf33693":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["2a8ebea459a12fd73b3a200b86053f407cf33693"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2a8ebea459a12fd73b3a200b86053f407cf33693":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}