{"path":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      // if !success but no one else is in active mode,\n      // we are the leader anyway\n      // TODO: should we also be leader if there is only one other active?\n      // if we couldn't sync with it, it shouldn't be able to sync with us\n      if (!success\n          && !areAnyOtherReplicasActive(zkController, leaderProps, collection,\n              shardId)) {\n//        System.out\n//            .println(\"wasnt a success but no on else i active! I am the leader\");\n        \n        success = true;\n      }\n      \n      if (success) {\n        // solrcloud_debug\n        // System.out.println(\"Sync success\");\n        // we are the leader - tell all of our replias to sync with us\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        \n        // solrcloud_debug\n        // System.out.println(\"Sync failure\");\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb62cc3362417c3e5136f2f26d34a1072ad633eb","a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      // if !success but no one else is in active mode,\n      // we are the leader anyway\n      // TODO: should we also be leader if there is only one other active?\n      // if we couldn't sync with it, it shouldn't be able to sync with us\n      if (!success\n          && !areAnyOtherReplicasActive(zkController, leaderProps, collection,\n              shardId)) {\n//        System.out\n//            .println(\"wasnt a success but no on else i active! I am the leader\");\n        \n        success = true;\n      }\n      \n      if (success) {\n        // solrcloud_debug\n        // System.out.println(\"Sync success\");\n        // we are the leader - tell all of our replias to sync with us\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        \n        // solrcloud_debug\n        // System.out.println(\"Sync failure\");\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"/dev/null","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      // if !success but no one else is in active mode,\n      // we are the leader anyway\n      // TODO: should we also be leader if there is only one other active?\n      // if we couldn't sync with it, it shouldn't be able to sync with us\n      if (!success\n          && !areAnyOtherReplicasActive(zkController, leaderProps, collection,\n              shardId)) {\n//        System.out\n//            .println(\"wasnt a success but no on else i active! I am the leader\");\n        \n        success = true;\n      }\n      \n      if (success) {\n        // solrcloud_debug\n        // System.out.println(\"Sync success\");\n        // we are the leader - tell all of our replias to sync with us\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        \n        // solrcloud_debug\n        // System.out.println(\"Sync failure\");\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce9115008b2600dda16a6765e06b6b380458c02f","date":1343435746,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      // if !success but no one else is in active mode,\n      // we are the leader anyway\n      // TODO: should we also be leader if there is only one other active?\n      // if we couldn't sync with it, it shouldn't be able to sync with us\n      if (!success\n          && !areAnyOtherReplicasActive(zkController, leaderProps, collection,\n              shardId)) {\n        log.info(\"Sync was not a success but no on else i active! I am the leader\");\n        success = true;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        SolrException.log(log, \"Sync Failed\");\n        \n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      // if !success but no one else is in active mode,\n      // we are the leader anyway\n      // TODO: should we also be leader if there is only one other active?\n      // if we couldn't sync with it, it shouldn't be able to sync with us\n      if (!success\n          && !areAnyOtherReplicasActive(zkController, leaderProps, collection,\n              shardId)) {\n//        System.out\n//            .println(\"wasnt a success but no on else i active! I am the leader\");\n        \n        success = true;\n      }\n      \n      if (success) {\n        // solrcloud_debug\n        // System.out.println(\"Sync success\");\n        // we are the leader - tell all of our replias to sync with us\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        \n        // solrcloud_debug\n        // System.out.println(\"Sync failure\");\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      // if !success but no one else is in active mode,\n      // we are the leader anyway\n      // TODO: should we also be leader if there is only one other active?\n      // if we couldn't sync with it, it shouldn't be able to sync with us\n      if (!success\n          && !areAnyOtherReplicasActive(zkController, leaderProps, collection,\n              shardId)) {\n        log.info(\"Sync was not a success but no on else i active! I am the leader\");\n        success = true;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        SolrException.log(log, \"Sync Failed\");\n        \n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      // if !success but no one else is in active mode,\n      // we are the leader anyway\n      // TODO: should we also be leader if there is only one other active?\n      // if we couldn't sync with it, it shouldn't be able to sync with us\n      if (!success\n          && !areAnyOtherReplicasActive(zkController, leaderProps, collection,\n              shardId)) {\n//        System.out\n//            .println(\"wasnt a success but no on else i active! I am the leader\");\n        \n        success = true;\n      }\n      \n      if (success) {\n        // solrcloud_debug\n        // System.out.println(\"Sync success\");\n        // we are the leader - tell all of our replias to sync with us\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        \n        // solrcloud_debug\n        // System.out.println(\"Sync failure\");\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      // if !success but no one else is in active mode,\n      // we are the leader anyway\n      // TODO: should we also be leader if there is only one other active?\n      // if we couldn't sync with it, it shouldn't be able to sync with us\n      if (!success\n          && !areAnyOtherReplicasActive(zkController, leaderProps, collection,\n              shardId)) {\n        log.info(\"Sync was not a success but no on else i active! I am the leader\");\n        success = true;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        SolrException.log(log, \"Sync Failed\");\n        \n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      // if !success but no one else is in active mode,\n      // we are the leader anyway\n      // TODO: should we also be leader if there is only one other active?\n      // if we couldn't sync with it, it shouldn't be able to sync with us\n      if (!success\n          && !areAnyOtherReplicasActive(zkController, leaderProps, collection,\n              shardId)) {\n//        System.out\n//            .println(\"wasnt a success but no on else i active! I am the leader\");\n        \n        success = true;\n      }\n      \n      if (success) {\n        // solrcloud_debug\n        // System.out.println(\"Sync success\");\n        // we are the leader - tell all of our replias to sync with us\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        \n        // solrcloud_debug\n        // System.out.println(\"Sync failure\");\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      // if !success but no one else is in active mode,\n      // we are the leader anyway\n      // TODO: should we also be leader if there is only one other active?\n      // if we couldn't sync with it, it shouldn't be able to sync with us\n      if (!success\n          && !areAnyOtherReplicasActive(zkController, leaderProps, collection,\n              shardId)) {\n        log.info(\"Sync was not a success but no one else is active! I am the leader\");\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n        success = true;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        SolrException.log(log, \"Sync Failed\");\n        \n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      // if !success but no one else is in active mode,\n      // we are the leader anyway\n      // TODO: should we also be leader if there is only one other active?\n      // if we couldn't sync with it, it shouldn't be able to sync with us\n      if (!success\n          && !areAnyOtherReplicasActive(zkController, leaderProps, collection,\n              shardId)) {\n        log.info(\"Sync was not a success but no on else i active! I am the leader\");\n        success = true;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        SolrException.log(log, \"Sync Failed\");\n        \n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":["a6378064655e76cd7b908b1cab4ce425b384b508"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      // if !success but no one else is in active mode,\n      // we are the leader anyway\n      // TODO: should we also be leader if there is only one other active?\n      // if we couldn't sync with it, it shouldn't be able to sync with us\n      if (!success\n          && !areAnyOtherReplicasActive(zkController, leaderProps, collection,\n              shardId)) {\n        log.info(\"Sync was not a success but no one else is active! I am the leader\");\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n        success = true;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        SolrException.log(log, \"Sync Failed\");\n        \n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      // if !success but no one else is in active mode,\n      // we are the leader anyway\n      // TODO: should we also be leader if there is only one other active?\n      // if we couldn't sync with it, it shouldn't be able to sync with us\n      if (!success\n          && !areAnyOtherReplicasActive(zkController, leaderProps, collection,\n              shardId)) {\n        log.info(\"Sync was not a success but no on else i active! I am the leader\");\n        success = true;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        SolrException.log(log, \"Sync Failed\");\n        \n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    // if no one that is up is active, we are willing to wait...\n    // we don't want a recovering node to become leader and then\n    // a better candidate pops up a second later.\n//    int tries = 20;\n//    while (!areAnyReplicasActive(zkController, collection, shardId)) {\n//      if (tries-- == 0) {\n//        break;\n//      }\n//      try {\n//        Thread.sleep(500);\n//      } catch (InterruptedException e) {\n//        Thread.currentThread().interrupt();\n//      }\n//    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n\n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        SolrException.log(log, \"Sync Failed\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      // if !success but no one else is in active mode,\n      // we are the leader anyway\n      // TODO: should we also be leader if there is only one other active?\n      // if we couldn't sync with it, it shouldn't be able to sync with us\n      if (!success\n          && !areAnyOtherReplicasActive(zkController, leaderProps, collection,\n              shardId)) {\n        log.info(\"Sync was not a success but no one else is active! I am the leader\");\n        zkController.publish(core.getCoreDescriptor(), ZkStateReader.ACTIVE);\n        success = true;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        SolrException.log(log, \"Sync Failed\");\n        \n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08404c494c3d7f0f23c26191b824a38ac9384877","date":1348446583,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    // if no one that is up is active, we are willing to wait...\n    // we don't want a recovering node to become leader and then\n    // a better candidate pops up a second later.\n//    int tries = 20;\n//    while (!areAnyReplicasActive(zkController, collection, shardId)) {\n//      if (tries-- == 0) {\n//        break;\n//      }\n//      try {\n//        Thread.sleep(500);\n//      } catch (InterruptedException e) {\n//        Thread.currentThread().interrupt();\n//      }\n//    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        SolrException.log(log, \"Sync Failed\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    // if no one that is up is active, we are willing to wait...\n    // we don't want a recovering node to become leader and then\n    // a better candidate pops up a second later.\n//    int tries = 20;\n//    while (!areAnyReplicasActive(zkController, collection, shardId)) {\n//      if (tries-- == 0) {\n//        break;\n//      }\n//      try {\n//        Thread.sleep(500);\n//      } catch (InterruptedException e) {\n//        Thread.currentThread().interrupt();\n//      }\n//    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n\n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        SolrException.log(log, \"Sync Failed\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":["bb62cc3362417c3e5136f2f26d34a1072ad633eb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    // if no one that is up is active, we are willing to wait...\n    // we don't want a recovering node to become leader and then\n    // a better candidate pops up a second later.\n//    int tries = 20;\n//    while (!areAnyReplicasActive(zkController, collection, shardId)) {\n//      if (tries-- == 0) {\n//        break;\n//      }\n//      try {\n//        Thread.sleep(500);\n//      } catch (InterruptedException e) {\n//        Thread.currentThread().interrupt();\n//      }\n//    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor());\n        \n      } else {\n        SolrException.log(log, \"Sync Failed\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    // if no one that is up is active, we are willing to wait...\n    // we don't want a recovering node to become leader and then\n    // a better candidate pops up a second later.\n//    int tries = 20;\n//    while (!areAnyReplicasActive(zkController, collection, shardId)) {\n//      if (tries-- == 0) {\n//        break;\n//      }\n//      try {\n//        Thread.sleep(500);\n//      } catch (InterruptedException e) {\n//        Thread.currentThread().interrupt();\n//      }\n//    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps);\n        \n      } else {\n        SolrException.log(log, \"Sync Failed\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":["a678060dc71c218831c2b3b18d0064573c6a968d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa952fb2bc19496faf0ea17180293ee0e6ee1899","date":1362335394,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    // if no one that is up is active, we are willing to wait...\n    // we don't want a recovering node to become leader and then\n    // a better candidate pops up a second later.\n//    int tries = 20;\n//    while (!areAnyReplicasActive(zkController, collection, shardId)) {\n//      if (tries-- == 0) {\n//        break;\n//      }\n//      try {\n//        Thread.sleep(500);\n//      } catch (InterruptedException e) {\n//        Thread.currentThread().interrupt();\n//      }\n//    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next canidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    // if no one that is up is active, we are willing to wait...\n    // we don't want a recovering node to become leader and then\n    // a better candidate pops up a second later.\n//    int tries = 20;\n//    while (!areAnyReplicasActive(zkController, collection, shardId)) {\n//      if (tries-- == 0) {\n//        break;\n//      }\n//      try {\n//        Thread.sleep(500);\n//      } catch (InterruptedException e) {\n//        Thread.currentThread().interrupt();\n//      }\n//    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor());\n        \n      } else {\n        SolrException.log(log, \"Sync Failed\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":["87fe1cc88e77427574da7dc868511048fec39e54"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87fe1cc88e77427574da7dc868511048fec39e54","date":1372433111,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    // if no one that is up is active, we are willing to wait...\n    // we don't want a recovering node to become leader and then\n    // a better candidate pops up a second later.\n//    int tries = 20;\n//    while (!areAnyReplicasActive(zkController, collection, shardId)) {\n//      if (tries-- == 0) {\n//        break;\n//      }\n//      try {\n//        Thread.sleep(500);\n//      } catch (InterruptedException e) {\n//        Thread.currentThread().interrupt();\n//      }\n//    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    // if no one that is up is active, we are willing to wait...\n    // we don't want a recovering node to become leader and then\n    // a better candidate pops up a second later.\n//    int tries = 20;\n//    while (!areAnyReplicasActive(zkController, collection, shardId)) {\n//      if (tries-- == 0) {\n//        break;\n//      }\n//      try {\n//        Thread.sleep(500);\n//      } catch (InterruptedException e) {\n//        Thread.currentThread().interrupt();\n//      }\n//    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next canidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":["fa952fb2bc19496faf0ea17180293ee0e6ee1899"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0f158e8fb13a52c5da4094cd005429c54aa5cd","date":1372695052,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    // if no one that is up is active, we are willing to wait...\n    // we don't want a recovering node to become leader and then\n    // a better candidate pops up a second later.\n//    int tries = 20;\n//    while (!areAnyReplicasActive(zkController, collection, shardId)) {\n//      if (tries-- == 0) {\n//        break;\n//      }\n//      try {\n//        Thread.sleep(500);\n//      } catch (InterruptedException e) {\n//        Thread.currentThread().interrupt();\n//      }\n//    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    // if no one that is up is active, we are willing to wait...\n    // we don't want a recovering node to become leader and then\n    // a better candidate pops up a second later.\n//    int tries = 20;\n//    while (!areAnyReplicasActive(zkController, collection, shardId)) {\n//      if (tries-- == 0) {\n//        break;\n//      }\n//      try {\n//        Thread.sleep(500);\n//      } catch (InterruptedException e) {\n//        Thread.currentThread().interrupt();\n//      }\n//    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next canidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26cb11ce089e71fb909641e7030b53c7d9e3fff3","date":1390348343,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncReplicas(ZkController,SolrCore,ZkNodeProps).mjava","sourceNew":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps, boolean peerSyncOnlyWithActive) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId, peerSyncOnlyWithActive);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","sourceOld":"  private boolean syncReplicas(ZkController zkController, SolrCore core,\n      ZkNodeProps leaderProps) {\n    boolean success = false;\n    CloudDescriptor cloudDesc = core.getCoreDescriptor().getCloudDescriptor();\n    String collection = cloudDesc.getCollectionName();\n    String shardId = cloudDesc.getShardId();\n\n    if (isClosed) {\n      log.info(\"We have been closed, won't sync with replicas\");\n      return false;\n    }\n    \n    // first sync ourselves - we are the potential leader after all\n    try {\n      success = syncWithReplicas(zkController, core, leaderProps, collection,\n          shardId);\n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    try {\n      if (isClosed) {\n        log.info(\"We have been closed, won't attempt to sync replicas back to leader\");\n        return false;\n      }\n      \n      if (success) {\n        log.info(\"Sync Success - now sync replicas to me\");\n        \n        syncToMe(zkController, collection, shardId, leaderProps, core.getCoreDescriptor());\n        \n      } else {\n        log.info(\"Leader's attempt to sync with shard failed, moving to the next candidate\");\n        // lets see who seems ahead...\n      }\n      \n    } catch (Exception e) {\n      SolrException.log(log, \"Sync Failed\", e);\n    }\n    \n    return success;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["fa952fb2bc19496faf0ea17180293ee0e6ee1899","fe0f158e8fb13a52c5da4094cd005429c54aa5cd"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fe0f158e8fb13a52c5da4094cd005429c54aa5cd":["87fe1cc88e77427574da7dc868511048fec39e54"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["aba371508186796cc6151d8223a5b4e16d02e26e","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["ce9115008b2600dda16a6765e06b6b380458c02f"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a6378064655e76cd7b908b1cab4ce425b384b508":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"aba371508186796cc6151d8223a5b4e16d02e26e":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","ce9115008b2600dda16a6765e06b6b380458c02f"],"ce9115008b2600dda16a6765e06b6b380458c02f":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","ce9115008b2600dda16a6765e06b6b380458c02f"],"87fe1cc88e77427574da7dc868511048fec39e54":["fa952fb2bc19496faf0ea17180293ee0e6ee1899"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fa952fb2bc19496faf0ea17180293ee0e6ee1899":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"26cb11ce089e71fb909641e7030b53c7d9e3fff3":["fe0f158e8fb13a52c5da4094cd005429c54aa5cd"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["08404c494c3d7f0f23c26191b824a38ac9384877"],"08404c494c3d7f0f23c26191b824a38ac9384877":["a6378064655e76cd7b908b1cab4ce425b384b508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["26cb11ce089e71fb909641e7030b53c7d9e3fff3"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"fe0f158e8fb13a52c5da4094cd005429c54aa5cd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["05a14b2611ead08655a2b2bdc61632eb31316e57","a6378064655e76cd7b908b1cab4ce425b384b508"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"a6378064655e76cd7b908b1cab4ce425b384b508":["08404c494c3d7f0f23c26191b824a38ac9384877"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"ce9115008b2600dda16a6765e06b6b380458c02f":["6013b4c7388f1627659c8f96c44abd10a294d3a6","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0d22ac6a4146774c1bc8400160fc0b6150294e92","aba371508186796cc6151d8223a5b4e16d02e26e","ce9115008b2600dda16a6765e06b6b380458c02f","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"87fe1cc88e77427574da7dc868511048fec39e54":["fe0f158e8fb13a52c5da4094cd005429c54aa5cd"],"fa952fb2bc19496faf0ea17180293ee0e6ee1899":["37a0f60745e53927c4c876cfe5b5a58170f0646c","87fe1cc88e77427574da7dc868511048fec39e54"],"26cb11ce089e71fb909641e7030b53c7d9e3fff3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["fa952fb2bc19496faf0ea17180293ee0e6ee1899"],"08404c494c3d7f0f23c26191b824a38ac9384877":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","05a14b2611ead08655a2b2bdc61632eb31316e57","0d22ac6a4146774c1bc8400160fc0b6150294e92","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}