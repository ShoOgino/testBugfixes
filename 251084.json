{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testFieldScore().mjava","commits":[{"id":"18186b90a6780ae50b4d7164fe10e4b0baff9841","date":1360894495,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testFieldScore().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests default sort (by score) */\n  public void testFieldScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort();\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the same\n    assertEquals(expected.totalHits, actual.totalHits);\n    for (int i = 0; i < actual.scoreDocs.length; i++) {\n      assertEquals(actual.scoreDocs[i].doc, expected.scoreDocs[i].doc);\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f183729ece15402db94402d482f29ebac4f7f54","date":1360963151,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testFieldScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testFieldScore().mjava","sourceNew":"  /** Tests default sort (by score) */\n  public void testFieldScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort();\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the same\n    assertEquals(expected.totalHits, actual.totalHits);\n    for (int i = 0; i < actual.scoreDocs.length; i++) {\n      assertEquals(actual.scoreDocs[i].doc, expected.scoreDocs[i].doc);\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests default sort (by score) */\n  public void testFieldScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort();\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the same\n    assertEquals(expected.totalHits, actual.totalHits);\n    for (int i = 0; i < actual.scoreDocs.length; i++) {\n      assertEquals(actual.scoreDocs[i].doc, expected.scoreDocs[i].doc);\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testFieldScore().mjava","pathOld":"/dev/null","sourceNew":"  /** Tests default sort (by score) */\n  public void testFieldScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort();\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the same\n    assertEquals(expected.totalHits, actual.totalHits);\n    for (int i = 0; i < actual.scoreDocs.length; i++) {\n      assertEquals(actual.scoreDocs[i].doc, expected.scoreDocs[i].doc);\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95303ff3749680c743b9425f9cf99e6e4065e8a8","date":1361061922,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testFieldScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort2#testFieldScore().mjava","sourceNew":"  /** Tests default sort (by score) */\n  public void testFieldScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort();\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the same\n    assertEquals(expected.totalHits, actual.totalHits);\n    for (int i = 0; i < actual.scoreDocs.length; i++) {\n      assertEquals(actual.scoreDocs[i].doc, expected.scoreDocs[i].doc);\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Tests default sort (by score) */\n  public void testFieldScore() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(newTextField(\"value\", \"foo bar bar bar bar\", Field.Store.NO));\n    writer.addDocument(doc);\n    doc = new Document();\n    doc.add(newTextField(\"value\", \"foo foo foo foo foo\", Field.Store.NO));\n    writer.addDocument(doc);\n    IndexReader ir = writer.getReader();\n    writer.close();\n    \n    IndexSearcher searcher = new IndexSearcher(ir);\n    Sort sort = new Sort();\n\n    TopDocs actual = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10, sort);\n    assertEquals(2, actual.totalHits);\n\n    TopDocs expected = searcher.search(new TermQuery(new Term(\"value\", \"foo\")), 10);\n    // the two topdocs should be the same\n    assertEquals(expected.totalHits, actual.totalHits);\n    for (int i = 0; i < actual.scoreDocs.length; i++) {\n      assertEquals(actual.scoreDocs[i].doc, expected.scoreDocs[i].doc);\n    }\n\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5f183729ece15402db94402d482f29ebac4f7f54":["18186b90a6780ae50b4d7164fe10e4b0baff9841"],"18186b90a6780ae50b4d7164fe10e4b0baff9841":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":["3b41f996b22bd5518650f897d050088ff808ec03","5f183729ece15402db94402d482f29ebac4f7f54"],"3b41f996b22bd5518650f897d050088ff808ec03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","18186b90a6780ae50b4d7164fe10e4b0baff9841"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f183729ece15402db94402d482f29ebac4f7f54"]},"commit2Childs":{"5f183729ece15402db94402d482f29ebac4f7f54":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"18186b90a6780ae50b4d7164fe10e4b0baff9841":["5f183729ece15402db94402d482f29ebac4f7f54","3b41f996b22bd5518650f897d050088ff808ec03"],"95303ff3749680c743b9425f9cf99e6e4065e8a8":[],"3b41f996b22bd5518650f897d050088ff808ec03":["95303ff3749680c743b9425f9cf99e6e4065e8a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["18186b90a6780ae50b4d7164fe10e4b0baff9841","3b41f996b22bd5518650f897d050088ff808ec03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["95303ff3749680c743b9425f9cf99e6e4065e8a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}