{"path":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","sourceNew":"    public boolean isValidTermOrPhrase( final List<TermInfo> phraseCandidate ){\n      // check terminal\n      if( !terminal ) return false;\n\n      // if the candidate is a term, it is valid\n      if( phraseCandidate.size() == 1 ) return true;\n\n      // else check whether the candidate is valid phrase\n      // compare position-gaps between terms to slop\n      int pos = phraseCandidate.get( 0 ).getPosition();\n      for( int i = 1; i < phraseCandidate.size(); i++ ){\n        int nextPos = phraseCandidate.get( i ).getPosition();\n        if( Math.abs( nextPos - pos - 1 ) > slop ) return false;\n        pos = nextPos;\n      }\n      return true;\n    }\n\n","sourceOld":"    public boolean isValidTermOrPhrase( final List<TermInfo> phraseCandidate ){\n      // check terminal\n      if( !terminal ) return false;\n\n      // if the candidate is a term, it is valid\n      if( phraseCandidate.size() == 1 ) return true;\n\n      // else check whether the candidate is valid phrase\n      // compare position-gaps between terms to slop\n      int pos = phraseCandidate.get( 0 ).getPosition();\n      for( int i = 1; i < phraseCandidate.size(); i++ ){\n        int nextPos = phraseCandidate.get( i ).getPosition();\n        if( Math.abs( nextPos - pos - 1 ) > slop ) return false;\n        pos = nextPos;\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7327eec6fde8afb35c01f6234cb50c42a7c737d3","date":1374238360,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","sourceNew":"    public boolean isValidTermOrPhrase( final List<TermInfo> phraseCandidate ){\n      // check terminal\n      if( !terminal ) return false;\n\n      // if the candidate is a term, it is valid\n      if( phraseCandidate.size() == 1 ) return true;\n\n      \n      assert phraseCandidate.size() == positions.length;\n      // else check whether the candidate is valid phrase\n      // compare position-gaps between terms to slop\n      int pos = phraseCandidate.get( 0 ).getPosition();\n      int totalDistance = 0;\n      for( int i = 1; i < phraseCandidate.size(); i++ ){\n        int nextPos = phraseCandidate.get( i ).getPosition();\n        final int expectedDelta = positions[i] - positions[i - 1];\n        final int actualDelta = nextPos - pos;\n        totalDistance += Math.abs(expectedDelta - actualDelta);\n        pos = nextPos;\n      }\n      return totalDistance <= slop;\n    }\n\n","sourceOld":"    public boolean isValidTermOrPhrase( final List<TermInfo> phraseCandidate ){\n      // check terminal\n      if( !terminal ) return false;\n\n      // if the candidate is a term, it is valid\n      if( phraseCandidate.size() == 1 ) return true;\n\n      // else check whether the candidate is valid phrase\n      // compare position-gaps between terms to slop\n      int pos = phraseCandidate.get( 0 ).getPosition();\n      for( int i = 1; i < phraseCandidate.size(); i++ ){\n        int nextPos = phraseCandidate.get( i ).getPosition();\n        if( Math.abs( nextPos - pos - 1 ) > slop ) return false;\n        pos = nextPos;\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","sourceNew":"    public boolean isValidTermOrPhrase( final List<TermInfo> phraseCandidate ){\n      // check terminal\n      if( !terminal ) return false;\n\n      // if the candidate is a term, it is valid\n      if( phraseCandidate.size() == 1 ) return true;\n\n      \n      assert phraseCandidate.size() == positions.length;\n      // else check whether the candidate is valid phrase\n      // compare position-gaps between terms to slop\n      int pos = phraseCandidate.get( 0 ).getPosition();\n      int totalDistance = 0;\n      for( int i = 1; i < phraseCandidate.size(); i++ ){\n        int nextPos = phraseCandidate.get( i ).getPosition();\n        final int expectedDelta = positions[i] - positions[i - 1];\n        final int actualDelta = nextPos - pos;\n        totalDistance += Math.abs(expectedDelta - actualDelta);\n        pos = nextPos;\n      }\n      return totalDistance <= slop;\n    }\n\n","sourceOld":"    public boolean isValidTermOrPhrase( final List<TermInfo> phraseCandidate ){\n      // check terminal\n      if( !terminal ) return false;\n\n      // if the candidate is a term, it is valid\n      if( phraseCandidate.size() == 1 ) return true;\n\n      // else check whether the candidate is valid phrase\n      // compare position-gaps between terms to slop\n      int pos = phraseCandidate.get( 0 ).getPosition();\n      for( int i = 1; i < phraseCandidate.size(); i++ ){\n        int nextPos = phraseCandidate.get( i ).getPosition();\n        if( Math.abs( nextPos - pos - 1 ) > slop ) return false;\n        pos = nextPos;\n      }\n      return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08","date":1378464767,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery.QueryPhraseMap#isValidTermOrPhrase(List[TermInfo]).mjava","sourceNew":"    public boolean isValidTermOrPhrase( final List<TermInfo> phraseCandidate ){\n      // check terminal\n      if( !terminal ) return false;\n\n      // if the candidate is a term, it is valid\n      if( phraseCandidate.size() == 1 ) return true;\n\n      // else check whether the candidate is valid phrase\n      // compare position-gaps between terms to slop\n      int pos = phraseCandidate.get( 0 ).getPosition();\n      for( int i = 1; i < phraseCandidate.size(); i++ ){\n        int nextPos = phraseCandidate.get( i ).getPosition();\n        if( Math.abs( nextPos - pos - 1 ) > slop ) return false;\n        pos = nextPos;\n      }\n      return true;\n    }\n\n","sourceOld":"    public boolean isValidTermOrPhrase( final List<TermInfo> phraseCandidate ){\n      // check terminal\n      if( !terminal ) return false;\n\n      // if the candidate is a term, it is valid\n      if( phraseCandidate.size() == 1 ) return true;\n\n      \n      assert phraseCandidate.size() == positions.length;\n      // else check whether the candidate is valid phrase\n      // compare position-gaps between terms to slop\n      int pos = phraseCandidate.get( 0 ).getPosition();\n      int totalDistance = 0;\n      for( int i = 1; i < phraseCandidate.size(); i++ ){\n        int nextPos = phraseCandidate.get( i ).getPosition();\n        final int expectedDelta = positions[i] - positions[i - 1];\n        final int actualDelta = nextPos - pos;\n        totalDistance += Math.abs(expectedDelta - actualDelta);\n        pos = nextPos;\n      }\n      return totalDistance <= slop;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7327eec6fde8afb35c01f6234cb50c42a7c737d3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08":["7327eec6fde8afb35c01f6234cb50c42a7c737d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","7327eec6fde8afb35c01f6234cb50c42a7c737d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"7327eec6fde8afb35c01f6234cb50c42a7c737d3":["cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08"],"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}