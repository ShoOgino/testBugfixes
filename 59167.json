{"path":"backwards/src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    TermAttribute termAtt = stpf.getAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.term());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","sourceNew":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    TermAttribute termAtt = stpf.getAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.term());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n  }\n\n","sourceOld":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    TermAttribute termAtt = stpf.getAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.term());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":6,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestStopFilter#doTestStopPositons(StopFilter,boolean).mjava","sourceNew":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    TermAttribute termAtt = stpf.getAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.term());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n  }\n\n","sourceOld":"  private void doTestStopPositons(StopFilter stpf, boolean enableIcrements) throws IOException {\n    log(\"---> test with enable-increments-\"+(enableIcrements?\"enabled\":\"disabled\"));\n    stpf.setEnablePositionIncrements(enableIcrements);\n    TermAttribute termAtt = stpf.getAttribute(TermAttribute.class);\n    PositionIncrementAttribute posIncrAtt = stpf.getAttribute(PositionIncrementAttribute.class);\n    for (int i=0; i<20; i+=3) {\n      assertTrue(stpf.incrementToken());\n      log(\"Token \"+i+\": \"+stpf);\n      String w = English.intToEnglish(i).trim();\n      assertEquals(\"expecting token \"+i+\" to be \"+w,w,termAtt.term());\n      assertEquals(\"all but first token must have position increment of 3\",enableIcrements?(i==0?1:3):1,posIncrAtt.getPositionIncrement());\n    }\n    assertFalse(stpf.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}