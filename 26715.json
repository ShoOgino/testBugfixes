{"path":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#addRange(Object,int,long,long,int).mjava","commits":[{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#addRange(Object,int,long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#addRange(Object,int,long,long,int).mjava","sourceNew":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","sourceOld":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#addRange(Object,int,long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#addRange(Object,int,long,long,int).mjava","sourceNew":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","sourceOld":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#addRange(Object,int,long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#addRange(Object,int,long,long,int).mjava","sourceNew":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","sourceOld":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#addRange(Object,int,long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#addRange(Object,int,long,long,int).mjava","sourceNew":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","sourceOld":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#addRange(Object,int,long,long,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#addRange(Object,int,long,long,int).mjava","sourceNew":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","sourceOld":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["770342641f7b505eaa8dccdc666158bff2419109","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["770342641f7b505eaa8dccdc666158bff2419109"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["770342641f7b505eaa8dccdc666158bff2419109","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770342641f7b505eaa8dccdc666158bff2419109"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}