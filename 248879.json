{"path":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        if (VERBOSE) {\n          System.out.println(\"load field=\" + termsReader.field.name);\n        }\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        if (VERBOSE) {\n          System.out.println(\"load field=\" + termsReader.field.name);\n        }\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06e9e87a586e724774d060a39c60ed1178637952","date":1331555866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        if (VERBOSE) {\n          System.out.println(\"load field=\" + termsReader.field.name);\n        }\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        if (VERBOSE) {\n          System.out.println(\"load field=\" + termsReader.field.name);\n        }\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public InvertedFieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new InvertedFieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public InvertedFieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new InvertedFieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int getUniqueFieldCount() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public Iterator<String> iterator() {\n        return new UnmodifiableIterator<String>(fields.keySet().iterator());\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public Iterator<String> iterator() {\n        return new UnmodifiableIterator<String>(fields.keySet().iterator());\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public Iterator<String> iterator() {\n        return new UnmodifiableIterator<String>(fields.keySet().iterator());\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public FieldsEnum iterator() {\n        final Iterator<TermsReader> iter = fields.values().iterator();\n\n        return new FieldsEnum() {\n\n          private TermsReader current;\n\n          @Override\n          public String next() {\n            current = iter.next();\n            return current.field.name;\n          }\n\n          @Override\n          public Terms terms() {\n            return current;\n          }\n        };\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d56999cfc1772fd594a2a43a40007a11a188bd96","date":1345554776,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.unmodifiableSet(fields.keySet()).iterator();\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public Iterator<String> iterator() {\n        return new UnmodifiableIterator<String>(fields.keySet().iterator());\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.unmodifiableSet(fields.keySet()).iterator();\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public Iterator<String> iterator() {\n        return new UnmodifiableIterator<String>(fields.keySet().iterator());\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/memory/MemoryPostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.unmodifiableSet(fields.keySet()).iterator();\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, EXTENSION);\n    final IndexInput in = state.dir.openInput(fileName, IOContext.READONCE);\n\n    final SortedMap<String,TermsReader> fields = new TreeMap<String,TermsReader>();\n\n    try {\n      while(true) {\n        final int termCount = in.readVInt();\n        if (termCount == 0) {\n          break;\n        }\n        final TermsReader termsReader = new TermsReader(state.fieldInfos, in, termCount);\n        // System.out.println(\"load field=\" + termsReader.field.name);\n        fields.put(termsReader.field.name, termsReader);\n      }\n    } finally {\n      in.close();\n    }\n\n    return new FieldsProducer() {\n      @Override\n      public Iterator<String> iterator() {\n        return Collections.unmodifiableSet(fields.keySet()).iterator();\n      }\n\n      @Override\n      public Terms terms(String field) {\n        return fields.get(field);\n      }\n      \n      @Override\n      public int size() {\n        return fields.size();\n      }\n\n      @Override\n      public void close() {\n        // Drop ref to FST:\n        for(TermsReader termsReader : fields.values()) {\n          termsReader.fst = null;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","d56999cfc1772fd594a2a43a40007a11a188bd96"],"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","06e9e87a586e724774d060a39c60ed1178637952"],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"5a238fc456663f685a9db1ed8d680e348bb45171":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["d56999cfc1772fd594a2a43a40007a11a188bd96"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["06e9e87a586e724774d060a39c60ed1178637952"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"06e9e87a586e724774d060a39c60ed1178637952":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d56999cfc1772fd594a2a43a40007a11a188bd96":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["5a238fc456663f685a9db1ed8d680e348bb45171","fb07ab105350b80ed9d63ca64b117084ed7391bc","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","06e9e87a586e724774d060a39c60ed1178637952"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d56999cfc1772fd594a2a43a40007a11a188bd96","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","5a238fc456663f685a9db1ed8d680e348bb45171"],"06e9e87a586e724774d060a39c60ed1178637952":["38e3b736c7ca086d61b7dbb841c905ee115490da","d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"d56999cfc1772fd594a2a43a40007a11a188bd96":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["001b25b42373b22a52f399dbf072f1224632e8e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","38e3b736c7ca086d61b7dbb841c905ee115490da","5a238fc456663f685a9db1ed8d680e348bb45171","c7869f64c874ebf7f317d22c00baf2b6857797a6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}