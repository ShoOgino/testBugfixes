{"path":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#algLinesToText(String[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#algLinesToText(String[]).mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#algLinesToText(String[]).mjava","sourceNew":"  // catenate alg lines to make the alg text\n  private static String algLinesToText(String[] algLines) {\n    String indent = \"  \";\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < propLines.length; i++) {\n      sb.append(indent).append(propLines[i]).append(NEW_LINE);\n    }\n    for (int i = 0; i < algLines.length; i++) {\n      sb.append(indent).append(algLines[i]).append(NEW_LINE);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  // catenate alg lines to make the alg text\n  private static String algLinesToText(String[] algLines) {\n    String indent = \"  \";\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < propLines.length; i++) {\n      sb.append(indent).append(propLines[i]).append(NEW_LINE);\n    }\n    for (int i = 0; i < algLines.length; i++) {\n      sb.append(indent).append(algLines[i]).append(NEW_LINE);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aedcfb5ebceafe4a0285436fa86269ed6c926442","date":1271441603,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/BenchmarkTestCase#algLinesToText(String[]).mjava","pathOld":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#algLinesToText(String[]).mjava","sourceNew":"  // catenate alg lines to make the alg text\n  private String algLinesToText(String[] algLines) {\n    String indent = \"  \";\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < propLines.length; i++) {\n      sb.append(indent).append(propLines[i]).append(NEW_LINE);\n    }\n    for (int i = 0; i < algLines.length; i++) {\n      sb.append(indent).append(algLines[i]).append(NEW_LINE);\n    }\n    return sb.toString();\n  }\n\n","sourceOld":"  // catenate alg lines to make the alg text\n  private static String algLinesToText(String[] algLines) {\n    String indent = \"  \";\n    StringBuffer sb = new StringBuffer();\n    for (int i = 0; i < propLines.length; i++) {\n      sb.append(indent).append(propLines[i]).append(NEW_LINE);\n    }\n    for (int i = 0; i < algLines.length; i++) {\n      sb.append(indent).append(algLines[i]).append(NEW_LINE);\n    }\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aedcfb5ebceafe4a0285436fa86269ed6c926442":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aedcfb5ebceafe4a0285436fa86269ed6c926442"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"aedcfb5ebceafe4a0285436fa86269ed6c926442":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["aedcfb5ebceafe4a0285436fa86269ed6c926442"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}