{"path":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"/dev/null","sourceNew":"  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n    \n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":null,"sourceOld":"  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n    \n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n    \n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n  }\n\n","sourceOld":"  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n    \n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"/dev/null","sourceNew":"  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n    \n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afeb033b2bd36d8ce9d82142b197da4dde13068b","date":1269115863,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n    \n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n  }\n\n","sourceOld":"  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n    \n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b61dd7a57cd877fdc056d71912c8813a4c2d4e6","date":1277932343,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n    \n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c40faa1db365c9359484c8a8a60840342ec6f1f1","date":1277933550,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='1']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n    \n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edf01d89e7e385042b94858f6ffb75e3a4154ca4","date":1283846490,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdd1db40ae856a49ef526079829c557533f2b50f","date":1287093509,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9001fdb834e467ef899e41c747c42b27b4d45099","date":1296775304,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s1 asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s1 asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s1 asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s1 asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s1 asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s1 asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s1 asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s1 asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testSorting() throws IOException\n  {\n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s1\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s1\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s1\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s1\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s1\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s1\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( h.getCore(), new MapSolrParams( args) );\n    IndexReader reader = req.getSearcher().getIndexReader();\n    QueryElevationComponent booster = (QueryElevationComponent)req.getCore().getSearchComponent( \"elevate\" );\n\n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' should be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s1 asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n\n    //Test exclusive (not to be confused with exclusion)\n    args.put(QueryElevationParams.EXCLUSIVE, \"true\");\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"a\" },  new String[] {} );\n    assertQ( null, req\n        ,\"//*[@numFound='2']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='a']\"            \n        );\n\n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    args.remove( QueryElevationParams.EXCLUSIVE);\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["9001fdb834e467ef899e41c747c42b27b4d45099","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5f4e87790277826a2aea119328600dfb07761f32":["afeb033b2bd36d8ce9d82142b197da4dde13068b","c40faa1db365c9359484c8a8a60840342ec6f1f1"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","cdd1db40ae856a49ef526079829c557533f2b50f"],"c40faa1db365c9359484c8a8a60840342ec6f1f1":["8b61dd7a57cd877fdc056d71912c8813a4c2d4e6"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c220849f876de24a79f756f65b3eb045db59f63f":["cdd1db40ae856a49ef526079829c557533f2b50f"],"cdd1db40ae856a49ef526079829c557533f2b50f":["edf01d89e7e385042b94858f6ffb75e3a4154ca4"],"8b61dd7a57cd877fdc056d71912c8813a4c2d4e6":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"edf01d89e7e385042b94858f6ffb75e3a4154ca4":["c40faa1db365c9359484c8a8a60840342ec6f1f1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["9001fdb834e467ef899e41c747c42b27b4d45099"],"9001fdb834e467ef899e41c747c42b27b4d45099":["c220849f876de24a79f756f65b3eb045db59f63f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","9001fdb834e467ef899e41c747c42b27b4d45099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["9001fdb834e467ef899e41c747c42b27b4d45099"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["edf01d89e7e385042b94858f6ffb75e3a4154ca4","cdd1db40ae856a49ef526079829c557533f2b50f"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","9001fdb834e467ef899e41c747c42b27b4d45099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"c40faa1db365c9359484c8a8a60840342ec6f1f1":["5f4e87790277826a2aea119328600dfb07761f32","edf01d89e7e385042b94858f6ffb75e3a4154ca4"],"1da8d55113b689b06716246649de6f62430f15c0":["afeb033b2bd36d8ce9d82142b197da4dde13068b"],"cdd1db40ae856a49ef526079829c557533f2b50f":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c220849f876de24a79f756f65b3eb045db59f63f","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c220849f876de24a79f756f65b3eb045db59f63f":["9001fdb834e467ef899e41c747c42b27b4d45099","868da859b43505d9d2a023bfeae6dd0c795f5295"],"8b61dd7a57cd877fdc056d71912c8813a4c2d4e6":["c40faa1db365c9359484c8a8a60840342ec6f1f1"],"edf01d89e7e385042b94858f6ffb75e3a4154ca4":["cdd1db40ae856a49ef526079829c557533f2b50f","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"9001fdb834e467ef899e41c747c42b27b4d45099":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"afeb033b2bd36d8ce9d82142b197da4dde13068b":["5f4e87790277826a2aea119328600dfb07761f32","8b61dd7a57cd877fdc056d71912c8813a4c2d4e6"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}