{"path":"src/test/org/apache/solr/common/util/TestNamedListCodec#testRandom().mjava","commits":[{"id":"da0acfe5ceed804451d76c8f887855b3d060e132","date":1208287358,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/common/util/TestNamedListCodec#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws Exception {\n    Random r = new Random(0);\n    // let's keep it deterministic since just the wrong\n    // random stuff could cause failure because of an OOM (too big)\n\n    NamedList nl;\n    NamedList res;\n    String cmp;\n\n    for (int i=0; i<10000; i++) { // pump up the iterations for good stress testing\n      nl = rNamedList(3);\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      new NamedListCodec(null).marshal(nl,baos);\n      byte[] arr = baos.toByteArray();\n      // System.out.println(arr.length);\n      res = new NamedListCodec().unmarshal(new ByteArrayInputStream(arr));\n      cmp = TestDistributedSearch.compare(nl,res, 0, null);\n\n      if (cmp != null) {\n        System.out.println(nl);\n        System.out.println(res);\n        TestCase.fail(cmp);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2307281f021c98102266052f57b7938614dbb30d","date":1229692925,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/common/util/TestNamedListCodec#testRandom().mjava","pathOld":"src/test/org/apache/solr/common/util/TestNamedListCodec#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random r = new Random(0);\n    // let's keep it deterministic since just the wrong\n    // random stuff could cause failure because of an OOM (too big)\n\n    NamedList nl;\n    NamedList res;\n    String cmp;\n\n    for (int i=0; i<10000; i++) { // pump up the iterations for good stress testing\n      nl = rNamedList(3);\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      new NamedListCodec(null).marshal(nl,baos);\n      byte[] arr = baos.toByteArray();\n      // System.out.println(arr.length);\n      res = (NamedList) new NamedListCodec().unmarshal(new ByteArrayInputStream(arr));\n      cmp = TestDistributedSearch.compare(nl,res, 0, null);\n\n      if (cmp != null) {\n        System.out.println(nl);\n        System.out.println(res);\n        TestCase.fail(cmp);\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random r = new Random(0);\n    // let's keep it deterministic since just the wrong\n    // random stuff could cause failure because of an OOM (too big)\n\n    NamedList nl;\n    NamedList res;\n    String cmp;\n\n    for (int i=0; i<10000; i++) { // pump up the iterations for good stress testing\n      nl = rNamedList(3);\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      new NamedListCodec(null).marshal(nl,baos);\n      byte[] arr = baos.toByteArray();\n      // System.out.println(arr.length);\n      res = new NamedListCodec().unmarshal(new ByteArrayInputStream(arr));\n      cmp = TestDistributedSearch.compare(nl,res, 0, null);\n\n      if (cmp != null) {\n        System.out.println(nl);\n        System.out.println(res);\n        TestCase.fail(cmp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18a1b51b47d1035bf90ecfc7d16c739fe983647a","date":1229928361,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/common/util/TestNamedListCodec#testRandom().mjava","pathOld":"src/test/org/apache/solr/common/util/TestNamedListCodec#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random r = new Random(0);\n    // let's keep it deterministic since just the wrong\n    // random stuff could cause failure because of an OOM (too big)\n\n    NamedList nl;\n    NamedList res;\n    String cmp;\n\n    for (int i=0; i<10000; i++) { // pump up the iterations for good stress testing\n      nl = rNamedList(3);\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      new JavaBinCodec(null).marshal(nl,baos);\n      byte[] arr = baos.toByteArray();\n      // System.out.println(arr.length);\n      res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      cmp = TestDistributedSearch.compare(nl,res, 0, null);\n\n      if (cmp != null) {\n        System.out.println(nl);\n        System.out.println(res);\n        TestCase.fail(cmp);\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random r = new Random(0);\n    // let's keep it deterministic since just the wrong\n    // random stuff could cause failure because of an OOM (too big)\n\n    NamedList nl;\n    NamedList res;\n    String cmp;\n\n    for (int i=0; i<10000; i++) { // pump up the iterations for good stress testing\n      nl = rNamedList(3);\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      new NamedListCodec(null).marshal(nl,baos);\n      byte[] arr = baos.toByteArray();\n      // System.out.println(arr.length);\n      res = (NamedList) new NamedListCodec().unmarshal(new ByteArrayInputStream(arr));\n      cmp = TestDistributedSearch.compare(nl,res, 0, null);\n\n      if (cmp != null) {\n        System.out.println(nl);\n        System.out.println(res);\n        TestCase.fail(cmp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/TestNamedListCodec#testRandom().mjava","pathOld":"src/test/org/apache/solr/common/util/TestNamedListCodec#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random r = new Random(0);\n    // let's keep it deterministic since just the wrong\n    // random stuff could cause failure because of an OOM (too big)\n\n    NamedList nl;\n    NamedList res;\n    String cmp;\n\n    for (int i=0; i<10000; i++) { // pump up the iterations for good stress testing\n      nl = rNamedList(3);\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      new JavaBinCodec(null).marshal(nl,baos);\n      byte[] arr = baos.toByteArray();\n      // System.out.println(arr.length);\n      res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      cmp = TestDistributedSearch.compare(nl,res, 0, null);\n\n      if (cmp != null) {\n        System.out.println(nl);\n        System.out.println(res);\n        TestCase.fail(cmp);\n      }\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random r = new Random(0);\n    // let's keep it deterministic since just the wrong\n    // random stuff could cause failure because of an OOM (too big)\n\n    NamedList nl;\n    NamedList res;\n    String cmp;\n\n    for (int i=0; i<10000; i++) { // pump up the iterations for good stress testing\n      nl = rNamedList(3);\n      ByteArrayOutputStream baos = new ByteArrayOutputStream();\n      new JavaBinCodec(null).marshal(nl,baos);\n      byte[] arr = baos.toByteArray();\n      // System.out.println(arr.length);\n      res = (NamedList) new JavaBinCodec().unmarshal(new ByteArrayInputStream(arr));\n      cmp = TestDistributedSearch.compare(nl,res, 0, null);\n\n      if (cmp != null) {\n        System.out.println(nl);\n        System.out.println(res);\n        TestCase.fail(cmp);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da0acfe5ceed804451d76c8f887855b3d060e132":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":["2307281f021c98102266052f57b7938614dbb30d"],"ad94625fb8d088209f46650c8097196fec67f00c":["18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"2307281f021c98102266052f57b7938614dbb30d":["da0acfe5ceed804451d76c8f887855b3d060e132"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"da0acfe5ceed804451d76c8f887855b3d060e132":["2307281f021c98102266052f57b7938614dbb30d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["da0acfe5ceed804451d76c8f887855b3d060e132"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"18a1b51b47d1035bf90ecfc7d16c739fe983647a":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2307281f021c98102266052f57b7938614dbb30d":["18a1b51b47d1035bf90ecfc7d16c739fe983647a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}