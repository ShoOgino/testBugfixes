{"path":"lucene/src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[AtomicIndexReader],IndexReader).mjava","commits":[{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[AtomicIndexReader],IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[IndexReader],IndexReader).mjava","sourceNew":"  /**\n   * Gathers sub-readers from reader into a List.  See\n   * {@link Gather} for are more general way to gather\n   * whatever you need to, per reader.\n   *\n   * @lucene.experimental\n   * \n   * @param allSubReaders\n   * @param reader\n   */\n\n  public static void gatherSubReaders(final List<AtomicIndexReader> allSubReaders, IndexReader reader) {\n    try {\n      new Gather(reader) {\n        @Override\n        protected void add(int base, AtomicIndexReader r) {\n          allSubReaders.add(r);\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gathers sub-readers from reader into a List.  See\n   * {@link Gather} for are more general way to gather\n   * whatever you need to, per reader.\n   *\n   * @lucene.experimental\n   * \n   * @param allSubReaders\n   * @param reader\n   */\n\n  public static void gatherSubReaders(final List<IndexReader> allSubReaders, IndexReader reader) {\n    try {\n      new Gather(reader) {\n        @Override\n        protected void add(int base, IndexReader r) {\n          allSubReaders.add(r);\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[AtomicReader],IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil#gatherSubReaders(List[AtomicIndexReader],IndexReader).mjava","sourceNew":"  /**\n   * Gathers sub-readers from reader into a List.  See\n   * {@link Gather} for are more general way to gather\n   * whatever you need to, per reader.\n   *\n   * @lucene.experimental\n   * \n   * @param allSubReaders\n   * @param reader\n   */\n\n  public static void gatherSubReaders(final List<AtomicReader> allSubReaders, IndexReader reader) {\n    try {\n      new Gather(reader) {\n        @Override\n        protected void add(int base, AtomicReader r) {\n          allSubReaders.add(r);\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gathers sub-readers from reader into a List.  See\n   * {@link Gather} for are more general way to gather\n   * whatever you need to, per reader.\n   *\n   * @lucene.experimental\n   * \n   * @param allSubReaders\n   * @param reader\n   */\n\n  public static void gatherSubReaders(final List<AtomicIndexReader> allSubReaders, IndexReader reader) {\n    try {\n      new Gather(reader) {\n        @Override\n        protected void add(int base, AtomicIndexReader r) {\n          allSubReaders.add(r);\n        }\n      }.run();\n    } catch (IOException ioe) {\n      // won't happen\n      throw new RuntimeException(ioe);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da6d5ac19a80d65b1e864251f155d30960353b7e":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"da6d5ac19a80d65b1e864251f155d30960353b7e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da6d5ac19a80d65b1e864251f155d30960353b7e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}