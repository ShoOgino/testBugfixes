{"path":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(IndexReader,Bits).mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(IndexReader,Bits).mjava","pathOld":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(IndexReader).mjava","sourceNew":"  private FixedBitSet correctBits(IndexReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs);\n        int doc = docs.nextDoc();\n        if (doc != DocsEnum.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":"  private FixedBitSet correctBits(IndexReader reader) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    final Bits liveDocs = MultiFields.getLiveDocs(reader);\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(liveDocs, docs);\n        int doc = docs.nextDoc();\n        if (doc != DocsEnum.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(IndexReader,Bits).mjava","pathOld":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(IndexReader,Bits).mjava","sourceNew":"  private FixedBitSet correctBits(IndexReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs);\n        int doc = docs.nextDoc();\n        if (doc != DocsEnum.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":"  private FixedBitSet correctBits(IndexReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator();\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs);\n        int doc = docs.nextDoc();\n        if (doc != DocsEnum.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"872cff1d3a554e0cd64014cd97f88d3002b0f491","date":1323024658,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(IndexReader,Bits).mjava","pathOld":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(IndexReader,Bits).mjava","sourceNew":"  private FixedBitSet correctBits(IndexReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, false);\n        int doc = docs.nextDoc();\n        if (doc != DocsEnum.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":"  private FixedBitSet correctBits(IndexReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs);\n        int doc = docs.nextDoc();\n        if (doc != DocsEnum.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb","02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b65b350ca9588f9fc76ce7d6804160d06c45ff42","date":1323026297,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(IndexReader,Bits).mjava","pathOld":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(IndexReader,Bits).mjava","sourceNew":"  private FixedBitSet correctBits(IndexReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, false);\n        int doc = docs.nextDoc();\n        if (doc != DocsEnum.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":"  private FixedBitSet correctBits(IndexReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs);\n        int doc = docs.nextDoc();\n        if (doc != DocsEnum.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0e127513fa72fb902d0fdf25139f738dd04c1d1","date":1327855878,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(AtomicIndexReader,Bits).mjava","pathOld":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(IndexReader,Bits).mjava","sourceNew":"  private FixedBitSet correctBits(AtomicIndexReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, false);\n        int doc = docs.nextDoc();\n        if (doc != DocsEnum.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":"  private FixedBitSet correctBits(IndexReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, false);\n        int doc = docs.nextDoc();\n        if (doc != DocsEnum.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(AtomicReader,Bits).mjava","pathOld":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/DuplicateFilter#correctBits(IndexReader,Bits).mjava","sourceNew":"  private FixedBitSet correctBits(AtomicReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, false);\n        int doc = docs.nextDoc();\n        if (doc != DocsEnum.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","sourceOld":"  private FixedBitSet correctBits(IndexReader reader, Bits acceptDocs) throws IOException {\n    FixedBitSet bits = new FixedBitSet(reader.maxDoc()); //assume all are INvalid\n    Terms terms = reader.fields().terms(fieldName);\n\n    if (terms == null) {\n      return bits;\n    }\n\n    TermsEnum termsEnum = terms.iterator(null);\n    DocsEnum docs = null;\n    while (true) {\n      BytesRef currTerm = termsEnum.next();\n      if (currTerm == null) {\n        break;\n      } else {\n        docs = termsEnum.docs(acceptDocs, docs, false);\n        int doc = docs.nextDoc();\n        if (doc != DocsEnum.NO_MORE_DOCS) {\n          if (keepMode == KeepMode.KM_USE_FIRST_OCCURRENCE) {\n            bits.set(doc);\n          } else {\n            int lastDoc = doc;\n            while (true) {\n              lastDoc = doc;\n              doc = docs.nextDoc();\n              if (doc == DocsEnum.NO_MORE_DOCS) {\n                break;\n              }\n            }\n            bits.set(lastDoc);\n          }\n        }\n      }\n    }\n    return bits;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e0e127513fa72fb902d0fdf25139f738dd04c1d1":["872cff1d3a554e0cd64014cd97f88d3002b0f491"],"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":["3cc749c053615f5871f3b95715fe292f34e70a53","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["6620df8541b174097b1133a4fc370adb2e570524"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["3cc749c053615f5871f3b95715fe292f34e70a53"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["872cff1d3a554e0cd64014cd97f88d3002b0f491","e0e127513fa72fb902d0fdf25139f738dd04c1d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"]},"commit2Childs":{"e0e127513fa72fb902d0fdf25139f738dd04c1d1":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"6620df8541b174097b1133a4fc370adb2e570524":["3cc749c053615f5871f3b95715fe292f34e70a53"],"b65b350ca9588f9fc76ce7d6804160d06c45ff42":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"3cc749c053615f5871f3b95715fe292f34e70a53":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","872cff1d3a554e0cd64014cd97f88d3002b0f491"],"872cff1d3a554e0cd64014cd97f88d3002b0f491":["e0e127513fa72fb902d0fdf25139f738dd04c1d1","b65b350ca9588f9fc76ce7d6804160d06c45ff42","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b65b350ca9588f9fc76ce7d6804160d06c45ff42","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}