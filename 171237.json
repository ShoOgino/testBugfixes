{"path":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","commits":[{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.term(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    \n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = (SegToken) tokenIter.next();\n    termAtt.setTermBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8af2686913077ef96a1c1394c808f5fb18050594","date":1256808157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","sourceNew":"  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.term(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = (SegToken) tokenIter.next();\n    termAtt.setTermBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","sourceOld":"  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.term(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    \n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = (SegToken) tokenIter.next();\n    termAtt.setTermBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"573b8638be27860dcb2ce77889c694e5f8a76106","date":1256855390,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","sourceNew":"  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.term(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.setTermBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","sourceOld":"  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.term(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = (SegToken) tokenIter.next();\n    termAtt.setTermBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.term(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.setTermBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","sourceOld":"  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.term(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.setTermBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/WordTokenFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.term(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.setTermBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {   \n    if (tokenIter == null || !tokenIter.hasNext()) {\n      // there are no remaining tokens from the current sentence... are there more sentences?\n      if (input.incrementToken()) {\n        // a new sentence is available: process it.\n        tokenBuffer = wordSegmenter.segmentSentence(termAtt.term(), offsetAtt.startOffset());\n        tokenIter = tokenBuffer.iterator();\n        /* \n         * it should not be possible to have a sentence with 0 words, check just in case.\n         * returning EOS isn't the best either, but its the behavior of the original code.\n         */\n        if (!tokenIter.hasNext())\n          return false;\n      } else {\n        return false; // no more sentences, end of stream!\n      }\n    } \n    // WordTokenFilter must clear attributes, as it is creating new tokens.\n    clearAttributes();\n    // There are remaining tokens from the current sentence, return the next one. \n    SegToken nextWord = tokenIter.next();\n    termAtt.setTermBuffer(nextWord.charArray, 0, nextWord.charArray.length);\n    offsetAtt.setOffset(nextWord.startOffset, nextWord.endOffset);\n    typeAtt.setType(\"word\");\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8af2686913077ef96a1c1394c808f5fb18050594":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"573b8638be27860dcb2ce77889c694e5f8a76106":["8af2686913077ef96a1c1394c808f5fb18050594"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["573b8638be27860dcb2ce77889c694e5f8a76106"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"]},"commit2Childs":{"8af2686913077ef96a1c1394c808f5fb18050594":["573b8638be27860dcb2ce77889c694e5f8a76106"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["8af2686913077ef96a1c1394c808f5fb18050594"],"573b8638be27860dcb2ce77889c694e5f8a76106":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}