{"path":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","sourceNew":"  protected void addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n  }\n\n","sourceOld":"  protected void addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","sourceNew":"  protected void addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n  }\n\n","sourceOld":"  protected void addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","pathOld":"solr/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","sourceNew":"  protected void addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n  }\n\n","sourceOld":"  protected void addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7c87c58d71fb9a6f5bc4ae8247339ecbbf67edc","date":1332908462,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","sourceNew":"  /** Adds the main query to the query argument. If its blank then false is returned. */\n  protected boolean addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      if (altUserQuery == null)\n        return false;\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  protected void addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15cacbf46c73bd5b0e47b57128be8852cb236160","date":1332942979,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","sourceNew":"  protected void addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n  }\n\n","sourceOld":"  /** Adds the main query to the query argument. If its blank then false is returned. */\n  protected boolean addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      if (altUserQuery == null)\n        return false;\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":["738199265d7244d0d494cdc76ad36c750d9a1bcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"738199265d7244d0d494cdc76ad36c750d9a1bcd","date":1333253180,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","sourceNew":"  /** Adds the main query to the query argument. If its blank then false is returned. */\n  protected boolean addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      if (altUserQuery == null)\n        return false;\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  protected void addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n  }\n\n","bugFix":["15cacbf46c73bd5b0e47b57128be8852cb236160"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","sourceNew":"  /** Adds the main query to the query argument. If its blank then false is returned. */\n  protected boolean addMainQuery(BooleanQuery query, SolrParams solrParams) throws SyntaxError {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      if (altUserQuery == null)\n        return false;\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Adds the main query to the query argument. If its blank then false is returned. */\n  protected boolean addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      if (altUserQuery == null)\n        return false;\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","sourceNew":"  /** Adds the main query to the query argument. If its blank then false is returned. */\n  protected boolean addMainQuery(BooleanQuery query, SolrParams solrParams) throws SyntaxError {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      if (altUserQuery == null)\n        return false;\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Adds the main query to the query argument. If its blank then false is returned. */\n  protected boolean addMainQuery(BooleanQuery query, SolrParams solrParams) throws ParseException {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      if (altUserQuery == null)\n        return false;\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","sourceNew":"  /** Adds the main query to the query argument. If it's blank then false is returned. */\n  protected boolean addMainQuery(BooleanQuery query, SolrParams solrParams) throws SyntaxError {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      if (altUserQuery == null)\n        return false;\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Adds the main query to the query argument. If its blank then false is returned. */\n  protected boolean addMainQuery(BooleanQuery query, SolrParams solrParams) throws SyntaxError {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      if (altUserQuery == null)\n        return false;\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery.Builder,SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/DisMaxQParser#addMainQuery(BooleanQuery,SolrParams).mjava","sourceNew":"  /** Adds the main query to the query argument. If it's blank then false is returned. */\n  protected boolean addMainQuery(BooleanQuery.Builder query, SolrParams solrParams) throws SyntaxError {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      if (altUserQuery == null)\n        return false;\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  /** Adds the main query to the query argument. If it's blank then false is returned. */\n  protected boolean addMainQuery(BooleanQuery query, SolrParams solrParams) throws SyntaxError {\n    Map<String, Float> phraseFields = SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));\n    float tiebreaker = solrParams.getFloat(DisMaxParams.TIE, 0.0f);\n\n    /* a parser for dealing with user input, which will convert\n     * things to DisjunctionMaxQueries\n     */\n    SolrPluginUtils.DisjunctionMaxQueryParser up = getParser(queryFields, DisMaxParams.QS, solrParams, tiebreaker);\n\n    /* for parsing sloppy phrases using DisjunctionMaxQueries */\n    SolrPluginUtils.DisjunctionMaxQueryParser pp = getParser(phraseFields, DisMaxParams.PS, solrParams, tiebreaker);\n\n    /* * * Main User Query * * */\n    parsedUserQuery = null;\n    String userQuery = getString();\n    altUserQuery = null;\n    if (userQuery == null || userQuery.trim().length() < 1) {\n      // If no query is specified, we may have an alternate\n      altUserQuery = getAlternateUserQuery(solrParams);\n      if (altUserQuery == null)\n        return false;\n      query.add(altUserQuery, BooleanClause.Occur.MUST);\n    } else {\n      // There is a valid query string\n      userQuery = SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();\n      userQuery = SolrPluginUtils.stripIllegalOperators(userQuery).toString();\n\n      parsedUserQuery = getUserQuery(userQuery, up, solrParams);\n      query.add(parsedUserQuery, BooleanClause.Occur.MUST);\n\n      Query phrase = getPhraseQuery(userQuery, pp);\n      if (null != phrase) {\n        query.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["3cdb67100dc016748799a77218aa409478372d79"],"15cacbf46c73bd5b0e47b57128be8852cb236160":["d7c87c58d71fb9a6f5bc4ae8247339ecbbf67edc"],"3cdb67100dc016748799a77218aa409478372d79":["738199265d7244d0d494cdc76ad36c750d9a1bcd"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"d7c87c58d71fb9a6f5bc4ae8247339ecbbf67edc":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["738199265d7244d0d494cdc76ad36c750d9a1bcd","3cdb67100dc016748799a77218aa409478372d79"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"738199265d7244d0d494cdc76ad36c750d9a1bcd":["15cacbf46c73bd5b0e47b57128be8852cb236160"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"15cacbf46c73bd5b0e47b57128be8852cb236160":["738199265d7244d0d494cdc76ad36c750d9a1bcd"],"3cdb67100dc016748799a77218aa409478372d79":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","407687e67faf6e1f02a211ca078d8e3eed631027"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d7c87c58d71fb9a6f5bc4ae8247339ecbbf67edc"],"d7c87c58d71fb9a6f5bc4ae8247339ecbbf67edc":["15cacbf46c73bd5b0e47b57128be8852cb236160"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"738199265d7244d0d494cdc76ad36c750d9a1bcd":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}