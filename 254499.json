{"path":"solr/core/src/java/org/apache/solr/search/join/XCJFQuery.XCJFQueryWeight#getDocSet().mjava","commits":[{"id":"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0","date":1576656084,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/XCJFQuery.XCJFQueryWeight#getDocSet().mjava","pathOld":"/dev/null","sourceNew":"    private DocSet getDocSet() throws IOException {\n      SolrClientCache solrClientCache = new SolrClientCache();\n      TupleStream solrStream;\n      if (zkHost != null || solrUrl == null) {\n        solrStream = createCloudSolrStream(solrClientCache);\n      } else {\n        solrStream = createSolrStream();\n      }\n\n      FieldType fieldType = searcher.getSchema().getFieldType(toField);\n      JoinKeyCollector collector;\n      if (fieldType.isPointField()) {\n        collector = new PointJoinKeyCollector(searcher);\n      } else {\n        Terms terms = searcher.getSlowAtomicReader().terms(toField);\n        if (terms == null) {\n          return DocSet.EMPTY;\n        }\n        collector = new TermsJoinKeyCollector(fieldType, terms, searcher);\n      }\n\n      try {\n        solrStream.open();\n        while (true) {\n          Tuple tuple = solrStream.read();\n          if (tuple.EXCEPTION) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, tuple.getException());\n          }\n          if (tuple.EOF) {\n            break;\n          }\n\n          Object value = tuple.get(fromField);\n          collector.collect(value);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } finally {\n        solrStream.close();\n        solrClientCache.close();\n      }\n\n      return collector.getDocSet();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/XCJFQuery.XCJFQueryWeight#getDocSet().mjava","pathOld":"/dev/null","sourceNew":"    private DocSet getDocSet() throws IOException {\n      SolrClientCache solrClientCache = new SolrClientCache();\n      TupleStream solrStream;\n      if (zkHost != null || solrUrl == null) {\n        solrStream = createCloudSolrStream(solrClientCache);\n      } else {\n        solrStream = createSolrStream();\n      }\n\n      FieldType fieldType = searcher.getSchema().getFieldType(toField);\n      JoinKeyCollector collector;\n      if (fieldType.isPointField()) {\n        collector = new PointJoinKeyCollector(searcher);\n      } else {\n        Terms terms = searcher.getSlowAtomicReader().terms(toField);\n        if (terms == null) {\n          return DocSet.EMPTY;\n        }\n        collector = new TermsJoinKeyCollector(fieldType, terms, searcher);\n      }\n\n      try {\n        solrStream.open();\n        while (true) {\n          Tuple tuple = solrStream.read();\n          if (tuple.EXCEPTION) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, tuple.getException());\n          }\n          if (tuple.EOF) {\n            break;\n          }\n\n          Object value = tuple.get(fromField);\n          collector.collect(value);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } finally {\n        solrStream.close();\n        solrClientCache.close();\n      }\n\n      return collector.getDocSet();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d67f43c293f81a92c10131e75761f4e4e968b06c","date":1584534689,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/XCJFQuery.XCJFQueryWeight#getDocSet().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/XCJFQuery.XCJFQueryWeight#getDocSet().mjava","sourceNew":"    private DocSet getDocSet() throws IOException {\n      SolrClientCache solrClientCache = new SolrClientCache();\n      TupleStream solrStream;\n      if (zkHost != null || solrUrl == null) {\n        solrStream = createCloudSolrStream(solrClientCache);\n      } else {\n        solrStream = createSolrStream();\n      }\n\n      FieldType fieldType = searcher.getSchema().getFieldType(toField);\n      JoinKeyCollector collector;\n      if (fieldType.isPointField()) {\n        collector = new PointJoinKeyCollector(searcher);\n      } else {\n        Terms terms = searcher.getSlowAtomicReader().terms(toField);\n        if (terms == null) {\n          return DocSet.empty();\n        }\n        collector = new TermsJoinKeyCollector(fieldType, terms, searcher);\n      }\n\n      try {\n        solrStream.open();\n        while (true) {\n          Tuple tuple = solrStream.read();\n          if (tuple.EXCEPTION) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, tuple.getException());\n          }\n          if (tuple.EOF) {\n            break;\n          }\n\n          Object value = tuple.get(fromField);\n          collector.collect(value);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } finally {\n        solrStream.close();\n        solrClientCache.close();\n      }\n\n      return collector.getDocSet();\n    }\n\n","sourceOld":"    private DocSet getDocSet() throws IOException {\n      SolrClientCache solrClientCache = new SolrClientCache();\n      TupleStream solrStream;\n      if (zkHost != null || solrUrl == null) {\n        solrStream = createCloudSolrStream(solrClientCache);\n      } else {\n        solrStream = createSolrStream();\n      }\n\n      FieldType fieldType = searcher.getSchema().getFieldType(toField);\n      JoinKeyCollector collector;\n      if (fieldType.isPointField()) {\n        collector = new PointJoinKeyCollector(searcher);\n      } else {\n        Terms terms = searcher.getSlowAtomicReader().terms(toField);\n        if (terms == null) {\n          return DocSet.EMPTY;\n        }\n        collector = new TermsJoinKeyCollector(fieldType, terms, searcher);\n      }\n\n      try {\n        solrStream.open();\n        while (true) {\n          Tuple tuple = solrStream.read();\n          if (tuple.EXCEPTION) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, tuple.getException());\n          }\n          if (tuple.EOF) {\n            break;\n          }\n\n          Object value = tuple.get(fromField);\n          collector.collect(value);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } finally {\n        solrStream.close();\n        solrClientCache.close();\n      }\n\n      return collector.getDocSet();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa","date":1589312640,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/XCJFQuery.XCJFQueryWeight#getDocSet().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/XCJFQuery.XCJFQueryWeight#getDocSet().mjava","sourceNew":"    private DocSet getDocSet() throws IOException {\n      SolrClientCache solrClientCache = searcher.getCore().getCoreContainer().getSolrClientCache();\n      TupleStream solrStream;\n      if (zkHost != null || solrUrl == null) {\n        solrStream = createCloudSolrStream(solrClientCache);\n      } else {\n        solrStream = createSolrStream();\n      }\n\n      FieldType fieldType = searcher.getSchema().getFieldType(toField);\n      JoinKeyCollector collector;\n      if (fieldType.isPointField()) {\n        collector = new PointJoinKeyCollector(searcher);\n      } else {\n        Terms terms = searcher.getSlowAtomicReader().terms(toField);\n        if (terms == null) {\n          return DocSet.empty();\n        }\n        collector = new TermsJoinKeyCollector(fieldType, terms, searcher);\n      }\n\n      try {\n        solrStream.open();\n        while (true) {\n          Tuple tuple = solrStream.read();\n          if (tuple.EXCEPTION) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, tuple.getException());\n          }\n          if (tuple.EOF) {\n            break;\n          }\n\n          Object value = tuple.get(fromField);\n          collector.collect(value);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } finally {\n        solrStream.close();\n      }\n\n      return collector.getDocSet();\n    }\n\n","sourceOld":"    private DocSet getDocSet() throws IOException {\n      SolrClientCache solrClientCache = new SolrClientCache();\n      TupleStream solrStream;\n      if (zkHost != null || solrUrl == null) {\n        solrStream = createCloudSolrStream(solrClientCache);\n      } else {\n        solrStream = createSolrStream();\n      }\n\n      FieldType fieldType = searcher.getSchema().getFieldType(toField);\n      JoinKeyCollector collector;\n      if (fieldType.isPointField()) {\n        collector = new PointJoinKeyCollector(searcher);\n      } else {\n        Terms terms = searcher.getSlowAtomicReader().terms(toField);\n        if (terms == null) {\n          return DocSet.empty();\n        }\n        collector = new TermsJoinKeyCollector(fieldType, terms, searcher);\n      }\n\n      try {\n        solrStream.open();\n        while (true) {\n          Tuple tuple = solrStream.read();\n          if (tuple.EXCEPTION) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, tuple.getException());\n          }\n          if (tuple.EOF) {\n            break;\n          }\n\n          Object value = tuple.get(fromField);\n          collector.collect(value);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } finally {\n        solrStream.close();\n        solrClientCache.close();\n      }\n\n      return collector.getDocSet();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e62a54d8f17b7c7b5d395bad453c470cf4039a6f","date":1593091560,"type":5,"author":"Dan Fox","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/CrossCollectionJoinQuery.CrossCollectionJoinQueryWeight#getDocSet().mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/XCJFQuery.XCJFQueryWeight#getDocSet().mjava","sourceNew":"    private DocSet getDocSet() throws IOException {\n      SolrClientCache solrClientCache = searcher.getCore().getCoreContainer().getSolrClientCache();\n      TupleStream solrStream;\n      if (zkHost != null || solrUrl == null) {\n        solrStream = createCloudSolrStream(solrClientCache);\n      } else {\n        solrStream = createSolrStream();\n      }\n\n      FieldType fieldType = searcher.getSchema().getFieldType(toField);\n      JoinKeyCollector collector;\n      if (fieldType.isPointField()) {\n        collector = new PointJoinKeyCollector(searcher);\n      } else {\n        Terms terms = searcher.getSlowAtomicReader().terms(toField);\n        if (terms == null) {\n          return DocSet.empty();\n        }\n        collector = new TermsJoinKeyCollector(fieldType, terms, searcher);\n      }\n\n      try {\n        solrStream.open();\n        while (true) {\n          Tuple tuple = solrStream.read();\n          if (tuple.EXCEPTION) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, tuple.getException());\n          }\n          if (tuple.EOF) {\n            break;\n          }\n\n          Object value = tuple.get(fromField);\n          collector.collect(value);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } finally {\n        solrStream.close();\n      }\n\n      return collector.getDocSet();\n    }\n\n","sourceOld":"    private DocSet getDocSet() throws IOException {\n      SolrClientCache solrClientCache = searcher.getCore().getCoreContainer().getSolrClientCache();\n      TupleStream solrStream;\n      if (zkHost != null || solrUrl == null) {\n        solrStream = createCloudSolrStream(solrClientCache);\n      } else {\n        solrStream = createSolrStream();\n      }\n\n      FieldType fieldType = searcher.getSchema().getFieldType(toField);\n      JoinKeyCollector collector;\n      if (fieldType.isPointField()) {\n        collector = new PointJoinKeyCollector(searcher);\n      } else {\n        Terms terms = searcher.getSlowAtomicReader().terms(toField);\n        if (terms == null) {\n          return DocSet.empty();\n        }\n        collector = new TermsJoinKeyCollector(fieldType, terms, searcher);\n      }\n\n      try {\n        solrStream.open();\n        while (true) {\n          Tuple tuple = solrStream.read();\n          if (tuple.EXCEPTION) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, tuple.getException());\n          }\n          if (tuple.EOF) {\n            break;\n          }\n\n          Object value = tuple.get(fromField);\n          collector.collect(value);\n        }\n      } catch (IOException e) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, e);\n      } finally {\n        solrStream.close();\n      }\n\n      return collector.getDocSet();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["d67f43c293f81a92c10131e75761f4e4e968b06c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e62a54d8f17b7c7b5d395bad453c470cf4039a6f":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e62a54d8f17b7c7b5d395bad453c470cf4039a6f"],"d67f43c293f81a92c10131e75761f4e4e968b06c":["a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["e62a54d8f17b7c7b5d395bad453c470cf4039a6f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["246314af59d76a47fccc31e9494eefee01ec9c00","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"e62a54d8f17b7c7b5d395bad453c470cf4039a6f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["246314af59d76a47fccc31e9494eefee01ec9c00","d67f43c293f81a92c10131e75761f4e4e968b06c"],"d67f43c293f81a92c10131e75761f4e4e968b06c":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}