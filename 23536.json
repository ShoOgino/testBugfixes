{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.SetNonLazyFieldSelector#stringField(FieldInfo,String).mjava","commits":[{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.SetNonLazyFieldSelector#stringField(FieldInfo,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/DocumentStoredFieldVisitor#stringField(FieldInfo,IndexInput,int).mjava","sourceNew":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.storeTermVector);\n      ft.setStoreTermVectorPositions(fieldInfo.storePositionWithTermVector);\n      ft.setStoreTermVectorOffsets(fieldInfo.storeOffsetWithTermVector);\n      ft.setStoreTermVectors(fieldInfo.storeTermVector);\n      ft.setIndexed(fieldInfo.isIndexed);\n      ft.setOmitNorms(fieldInfo.omitNorms);\n      ft.setIndexOptions(fieldInfo.indexOptions);\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","sourceOld":"  @Override\n  public boolean stringField(FieldInfo fieldInfo, IndexInput in, int numUTF8Bytes) throws IOException {\n    if (accept(fieldInfo)) {\n      final byte[] b = new byte[numUTF8Bytes];\n      in.readBytes(b, 0, b.length);\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.storeTermVector);\n      ft.setStoreTermVectorPositions(fieldInfo.storePositionWithTermVector);\n      ft.setStoreTermVectorOffsets(fieldInfo.storeOffsetWithTermVector);\n      ft.setStoreTermVectors(fieldInfo.storeTermVector);\n      ft.setIndexed(fieldInfo.isIndexed);\n      ft.setOmitNorms(fieldInfo.omitNorms);\n      ft.setIndexOptions(fieldInfo.indexOptions);\n      doc.add(new Field(fieldInfo.name,\n          new String(b, \"UTF-8\"), ft\n      ));\n    } else {\n      in.seek(in.getFilePointer() + numUTF8Bytes);\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.SetNonLazyFieldSelector#stringField(FieldInfo,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.SetNonLazyFieldSelector#stringField(FieldInfo,String).mjava","sourceNew":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.storeTermVector);\n      ft.setStoreTermVectors(fieldInfo.storeTermVector);\n      ft.setIndexed(fieldInfo.isIndexed);\n      ft.setOmitNorms(fieldInfo.omitNorms);\n      ft.setIndexOptions(fieldInfo.indexOptions);\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","sourceOld":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.storeTermVector);\n      ft.setStoreTermVectorPositions(fieldInfo.storePositionWithTermVector);\n      ft.setStoreTermVectorOffsets(fieldInfo.storeOffsetWithTermVector);\n      ft.setStoreTermVectors(fieldInfo.storeTermVector);\n      ft.setIndexed(fieldInfo.isIndexed);\n      ft.setOmitNorms(fieldInfo.omitNorms);\n      ft.setIndexOptions(fieldInfo.indexOptions);\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.SetNonLazyFieldSelector#stringField(FieldInfo,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.SetNonLazyFieldSelector#stringField(FieldInfo,String).mjava","sourceNew":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setIndexed(fieldInfo.isIndexed());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","sourceOld":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.storeTermVector);\n      ft.setStoreTermVectors(fieldInfo.storeTermVector);\n      ft.setIndexed(fieldInfo.isIndexed);\n      ft.setOmitNorms(fieldInfo.omitNorms);\n      ft.setIndexOptions(fieldInfo.indexOptions);\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.SetNonLazyFieldSelector#stringField(FieldInfo,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.SetNonLazyFieldSelector#stringField(FieldInfo,String).mjava","sourceNew":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setIndexed(fieldInfo.isIndexed());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","sourceOld":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.storeTermVector);\n      ft.setStoreTermVectors(fieldInfo.storeTermVector);\n      ft.setIndexed(fieldInfo.isIndexed);\n      ft.setOmitNorms(fieldInfo.omitNorms);\n      ft.setIndexOptions(fieldInfo.indexOptions);\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.SetNonLazyFieldSelector#stringField(FieldInfo,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.SetNonLazyFieldSelector#stringField(FieldInfo,String).mjava","sourceNew":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","sourceOld":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setIndexed(fieldInfo.isIndexed());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.SetNonLazyFieldSelector#stringField(FieldInfo,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.SetNonLazyFieldSelector#stringField(FieldInfo,String).mjava","sourceNew":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","sourceOld":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setIndexed(fieldInfo.isIndexed());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d127639ae13222a8545b50e0ac545a6bcd2d7","date":1428704686,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.SetNonLazyFieldSelector#stringField(FieldInfo,String).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","3184874f7f3aca850248483485b4995343066875"],"06584e6e98d592b34e1329b384182f368d2025e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["3184874f7f3aca850248483485b4995343066875"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["06584e6e98d592b34e1329b384182f368d2025e8"],"3184874f7f3aca850248483485b4995343066875":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["399d127639ae13222a8545b50e0ac545a6bcd2d7"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","3184874f7f3aca850248483485b4995343066875"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"06584e6e98d592b34e1329b384182f368d2025e8":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06584e6e98d592b34e1329b384182f368d2025e8"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","399d127639ae13222a8545b50e0ac545a6bcd2d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}