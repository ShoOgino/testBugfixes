{"path":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"    /**\n     * Initializes the tests by adding 4 identical documents to the index.\n     */\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        // create test index\n        mDirectory = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(mDirectory,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        addDocument(writer, \"1\", \"I think it should work.\");\n        addDocument(writer, \"2\", \"I think it should work.\");\n        addDocument(writer, \"3\", \"I think it should work.\");\n        addDocument(writer, \"4\", \"I think it should work.\");\n        writer.close();\n        searcher = new IndexSearcher(mDirectory, true);\n    }\n\n","sourceOld":"    /**\n     * Initializes the tests by adding 4 identical documents to the index.\n     */\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        // create test index\n        mDirectory = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(mDirectory,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        addDocument(writer, \"1\", \"I think it should work.\");\n        addDocument(writer, \"2\", \"I think it should work.\");\n        addDocument(writer, \"3\", \"I think it should work.\");\n        addDocument(writer, \"4\", \"I think it should work.\");\n        writer.close();\n        searcher = new IndexSearcher(mDirectory, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7f8e68717c68517265937c911e1ce9f25750247","date":1274071103,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"    /**\n     * Initializes the tests by adding 4 identical documents to the index.\n     */\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        // create test index\n        mDirectory = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(mDirectory,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true)));\n        addDocument(writer, \"1\", \"I think it should work.\");\n        addDocument(writer, \"2\", \"I think it should work.\");\n        addDocument(writer, \"3\", \"I think it should work.\");\n        addDocument(writer, \"4\", \"I think it should work.\");\n        writer.close();\n        searcher = new IndexSearcher(mDirectory, true);\n    }\n\n","sourceOld":"    /**\n     * Initializes the tests by adding 4 identical documents to the index.\n     */\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        // create test index\n        mDirectory = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(mDirectory,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n        addDocument(writer, \"1\", \"I think it should work.\");\n        addDocument(writer, \"2\", \"I think it should work.\");\n        addDocument(writer, \"3\", \"I think it should work.\");\n        addDocument(writer, \"4\", \"I think it should work.\");\n        writer.close();\n        searcher = new IndexSearcher(mDirectory, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    // create test index\n    mDirectory = new RAMDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true)));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"    /**\n     * Initializes the tests by adding 4 identical documents to the index.\n     */\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        // create test index\n        mDirectory = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(mDirectory,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true)));\n        addDocument(writer, \"1\", \"I think it should work.\");\n        addDocument(writer, \"2\", \"I think it should work.\");\n        addDocument(writer, \"3\", \"I think it should work.\");\n        addDocument(writer, \"4\", \"I think it should work.\");\n        writer.close();\n        searcher = new IndexSearcher(mDirectory, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    // create test index\n    mDirectory = new RAMDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true)));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"    /**\n     * Initializes the tests by adding 4 identical documents to the index.\n     */\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        // create test index\n        mDirectory = new RAMDirectory();\n        final IndexWriter writer = new IndexWriter(mDirectory,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true)));\n        addDocument(writer, \"1\", \"I think it should work.\");\n        addDocument(writer, \"2\", \"I think it should work.\");\n        addDocument(writer, \"3\", \"I think it should work.\");\n        addDocument(writer, \"4\", \"I think it should work.\");\n        writer.close();\n        searcher = new IndexSearcher(mDirectory, true);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    // create test index\n    mDirectory = new RAMDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    // create test index\n    mDirectory = new RAMDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true)));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    // create test index\n    mDirectory = new RAMDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    // create test index\n    mDirectory = new RAMDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true)));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    // create test index\n    mDirectory = new RAMDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    // create test index\n    mDirectory = new RAMDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new IndexWriterConfig(TEST_VERSION_CURRENT,\n            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true)));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    // create test index\n    mDirectory = new MockRAMDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    // create test index\n    mDirectory = new RAMDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    // create test index\n    mDirectory = newDirectory(random);\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    // create test index\n    mDirectory = new MockRAMDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    // create test index\n    mDirectory = newDirectory(random);\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    random = newRandom();\n    // create test index\n    mDirectory = new RAMDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newInOrderLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newInOrderLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newInOrderLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newInOrderLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newInOrderLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n        mDirectory, new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                MockTokenFilter.ENGLISH_STOPSET, true));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = new IndexSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newInOrderLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newInOrderLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(random, MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(random, MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(random, MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newInOrderLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(random, MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newInOrderLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60e3b31201fd9bb5d73884faa5a38c63ea9239f2","date":1315756041,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, mDirectory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true))\n            .setMergePolicy(newLogMergePolicy()).setSimilarityProvider(new DefaultSimilarityProvider()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider());\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random,\n                                                           mDirectory, newIndexWriterConfig(TEST_VERSION_CURRENT,\n                                                                                            new MockAnalyzer(random, MockTokenizer.SIMPLE, true,\n                                                                                                             MockTokenFilter.ENGLISH_STOPSET, true)).setMergePolicy(newLogMergePolicy()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","date":1328532481,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, mDirectory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true))\n            .setMergePolicy(newLogMergePolicy()).setSimilarity(new DefaultSimilarity()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, mDirectory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true))\n            .setMergePolicy(newLogMergePolicy()).setSimilarityProvider(new DefaultSimilarityProvider()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    searcher.setSimilarityProvider(new DefaultSimilarityProvider());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#setUp().mjava","sourceNew":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, mDirectory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true))\n            .setMergePolicy(newLogMergePolicy()).setSimilarity(new DefaultSimilarity()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n  }\n\n","sourceOld":"  /**\n   * Initializes the tests by adding 4 identical documents to the index.\n   */\n  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    // create test index\n    mDirectory = newDirectory();\n    final RandomIndexWriter writer = new RandomIndexWriter(random, mDirectory, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(random, MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true))\n            .setMergePolicy(newLogMergePolicy()).setSimilarity(new DefaultSimilarity()));\n    addDocument(writer, \"1\", \"I think it should work.\");\n    addDocument(writer, \"2\", \"I think it should work.\");\n    addDocument(writer, \"3\", \"I think it should work.\");\n    addDocument(writer, \"4\", \"I think it should work.\");\n    reader = writer.getReader();\n    writer.close();\n    searcher = newSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2"],"c7f8e68717c68517265937c911e1ce9f25750247":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","43b04c27924fe393e38e9f0986e32c634f261859"],"c19f985e36a65cc969e8e564fe337a0d41512075":["43b04c27924fe393e38e9f0986e32c634f261859"],"43b04c27924fe393e38e9f0986e32c634f261859":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"c084e47df29de3330311d69dabf515ceaa989512":["c7f8e68717c68517265937c911e1ce9f25750247"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["43b04c27924fe393e38e9f0986e32c634f261859","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"5f4e87790277826a2aea119328600dfb07761f32":["c7f8e68717c68517265937c911e1ce9f25750247","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["c19f985e36a65cc969e8e564fe337a0d41512075"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"60e3b31201fd9bb5d73884faa5a38c63ea9239f2":["1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b"],"1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c7f8e68717c68517265937c911e1ce9f25750247":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"43b04c27924fe393e38e9f0986e32c634f261859":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","29ef99d61cda9641b6250bf9567329a6e65f901d"],"c19f985e36a65cc969e8e564fe337a0d41512075":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["60e3b31201fd9bb5d73884faa5a38c63ea9239f2","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["43b04c27924fe393e38e9f0986e32c634f261859"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c7f8e68717c68517265937c911e1ce9f25750247"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"962d04139994fce5193143ef35615499a9a96d78":[],"790e1fde4caa765b3faaad3fbcd25c6973450336":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}