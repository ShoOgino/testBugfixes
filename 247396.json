{"path":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<String>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<String>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","sourceNew":null,"sourceOld":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<String>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<String>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","pathOld":"contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","sourceNew":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<String>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<String>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","sourceOld":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<String>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<String>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<String>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<String>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d20d5e40789b1c42f4f926e3174b271256c43657","date":1301641092,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","sourceNew":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<String>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<String>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","sourceOld":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<String>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<String>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor#addEnvelopToDocument(Part,Map[String,Object]).mjava","sourceNew":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<String>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<String>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","sourceOld":"  private void addEnvelopToDocument(Part part, Map<String, Object> row) throws MessagingException {\n    MimeMessage mail = (MimeMessage) part;\n    Address[] adresses;\n    if ((adresses = mail.getFrom()) != null && adresses.length > 0)\n      row.put(FROM, adresses[0].toString());\n\n    List<String> to = new ArrayList<String>();\n    if ((adresses = mail.getRecipients(Message.RecipientType.TO)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.CC)) != null)\n      addAddressToList(adresses, to);\n    if ((adresses = mail.getRecipients(Message.RecipientType.BCC)) != null)\n      addAddressToList(adresses, to);\n    if (to.size() > 0)\n      row.put(TO_CC_BCC, to);\n\n    row.put(MESSAGE_ID, mail.getMessageID());\n    row.put(SUBJECT, mail.getSubject());\n\n    Date d = mail.getSentDate();\n    if (d != null) {\n      row.put(SENT_DATE, d);\n    }\n\n    List<String> flags = new ArrayList<String>();\n    for (Flags.Flag flag : mail.getFlags().getSystemFlags()) {\n      if (flag == Flags.Flag.ANSWERED)\n        flags.add(FLAG_ANSWERED);\n      else if (flag == Flags.Flag.DELETED)\n        flags.add(FLAG_DELETED);\n      else if (flag == Flags.Flag.DRAFT)\n        flags.add(FLAG_DRAFT);\n      else if (flag == Flags.Flag.FLAGGED)\n        flags.add(FLAG_FLAGGED);\n      else if (flag == Flags.Flag.RECENT)\n        flags.add(FLAG_RECENT);\n      else if (flag == Flags.Flag.SEEN)\n        flags.add(FLAG_SEEN);\n    }\n    flags.addAll(Arrays.asList(mail.getFlags().getUserFlags()));\n    row.put(FLAGS, flags);\n\n    String[] hdrs = mail.getHeader(\"X-Mailer\");\n    if (hdrs != null)\n      row.put(XMAILER, hdrs[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","d20d5e40789b1c42f4f926e3174b271256c43657"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d20d5e40789b1c42f4f926e3174b271256c43657":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c26f00b574427b55127e869b935845554afde1fa","d20d5e40789b1c42f4f926e3174b271256c43657"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"d20d5e40789b1c42f4f926e3174b271256c43657":["c26f00b574427b55127e869b935845554afde1fa"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}