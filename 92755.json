{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getOperandsOfType(StreamExpression,Class...).mjava","commits":[{"id":"f00f1c5fad501b66705121feb623f8cfbb6712f9","date":1431347838,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getOperandsOfType(StreamExpression,Class...).mjava","pathOld":"/dev/null","sourceNew":"  public List<StreamExpressionParameter> getOperandsOfType(StreamExpression expression, Class ... clazzes){\n    List<StreamExpressionParameter> parameters = new ArrayList<StreamExpressionParameter>();\n    \n    parameterLoop:\n     for(StreamExpressionParameter parameter : expression.getParameters()){\n      for(Class clazz : clazzes){\n        if(!clazz.isAssignableFrom(parameter.getClass())){\n          continue parameterLoop; // go to the next parameter since this parameter cannot be assigned to at least one of the classes\n        }\n      }\n      \n      parameters.add(parameter);\n    }\n    \n    return parameters;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5","date":1475846642,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getOperandsOfType(StreamExpression,Class...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getOperandsOfType(StreamExpression,Class...).mjava","sourceNew":"  public List<StreamExpressionParameter> getOperandsOfType(StreamExpression expression, Class ... clazzes){\n    List<StreamExpressionParameter> parameters = new ArrayList<>();\n    \n    parameterLoop:\n     for(StreamExpressionParameter parameter : expression.getParameters()){\n      for(Class clazz : clazzes){\n        if(!clazz.isAssignableFrom(parameter.getClass())){\n          continue parameterLoop; // go to the next parameter since this parameter cannot be assigned to at least one of the classes\n        }\n      }\n      \n      parameters.add(parameter);\n    }\n    \n    return parameters;\n  }\n\n","sourceOld":"  public List<StreamExpressionParameter> getOperandsOfType(StreamExpression expression, Class ... clazzes){\n    List<StreamExpressionParameter> parameters = new ArrayList<StreamExpressionParameter>();\n    \n    parameterLoop:\n     for(StreamExpressionParameter parameter : expression.getParameters()){\n      for(Class clazz : clazzes){\n        if(!clazz.isAssignableFrom(parameter.getClass())){\n          continue parameterLoop; // go to the next parameter since this parameter cannot be assigned to at least one of the classes\n        }\n      }\n      \n      parameters.add(parameter);\n    }\n    \n    return parameters;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getOperandsOfType(StreamExpression,Class...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getOperandsOfType(StreamExpression,Class...).mjava","sourceNew":"  public List<StreamExpressionParameter> getOperandsOfType(StreamExpression expression, Class ... clazzes){\n    List<StreamExpressionParameter> parameters = new ArrayList<>();\n    \n    parameterLoop:\n     for(StreamExpressionParameter parameter : expression.getParameters()){\n      for(Class clazz : clazzes){\n        if(!clazz.isAssignableFrom(parameter.getClass())){\n          continue parameterLoop; // go to the next parameter since this parameter cannot be assigned to at least one of the classes\n        }\n      }\n      \n      parameters.add(parameter);\n    }\n    \n    return parameters;\n  }\n\n","sourceOld":"  public List<StreamExpressionParameter> getOperandsOfType(StreamExpression expression, Class ... clazzes){\n    List<StreamExpressionParameter> parameters = new ArrayList<StreamExpressionParameter>();\n    \n    parameterLoop:\n     for(StreamExpressionParameter parameter : expression.getParameters()){\n      for(Class clazz : clazzes){\n        if(!clazz.isAssignableFrom(parameter.getClass())){\n          continue parameterLoop; // go to the next parameter since this parameter cannot be assigned to at least one of the classes\n        }\n      }\n      \n      parameters.add(parameter);\n    }\n    \n    return parameters;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804a8d5358fe7b7563b85ee7838714d720b89272","date":1591624987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getOperandsOfType(StreamExpression,Class...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getOperandsOfType(StreamExpression,Class...).mjava","sourceNew":"  public List<StreamExpressionParameter> getOperandsOfType(StreamExpression expression, Class ... clazzes) {\n    List<StreamExpressionParameter> parameters = new ArrayList<>();\n    \n    parameterLoop:\n     for (StreamExpressionParameter parameter : expression.getParameters()) {\n      for (Class clazz : clazzes) {\n        if (!clazz.isAssignableFrom(parameter.getClass())) {\n          continue parameterLoop; // go to the next parameter since this parameter cannot be assigned to at least one of the classes\n        }\n      }\n      parameters.add(parameter);\n    }\n    return parameters;\n  }\n\n","sourceOld":"  public List<StreamExpressionParameter> getOperandsOfType(StreamExpression expression, Class ... clazzes){\n    List<StreamExpressionParameter> parameters = new ArrayList<>();\n    \n    parameterLoop:\n     for(StreamExpressionParameter parameter : expression.getParameters()){\n      for(Class clazz : clazzes){\n        if(!clazz.isAssignableFrom(parameter.getClass())){\n          continue parameterLoop; // go to the next parameter since this parameter cannot be assigned to at least one of the classes\n        }\n      }\n      \n      parameters.add(parameter);\n    }\n    \n    return parameters;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getOperandsOfType(StreamExpression,Class...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/expr/StreamFactory#getOperandsOfType(StreamExpression,Class...).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public List<StreamExpressionParameter> getOperandsOfType(StreamExpression expression,\n                                                           @SuppressWarnings({\"rawtypes\"})Class ... clazzes) {\n    List<StreamExpressionParameter> parameters = new ArrayList<>();\n    \n    parameterLoop:\n     for (StreamExpressionParameter parameter : expression.getParameters()) {\n      for (@SuppressWarnings({\"rawtypes\"})Class clazz : clazzes) {\n        if (!clazz.isAssignableFrom(parameter.getClass())) {\n          continue parameterLoop; // go to the next parameter since this parameter cannot be assigned to at least one of the classes\n        }\n      }\n      parameters.add(parameter);\n    }\n    return parameters;\n  }\n\n","sourceOld":"  public List<StreamExpressionParameter> getOperandsOfType(StreamExpression expression, Class ... clazzes) {\n    List<StreamExpressionParameter> parameters = new ArrayList<>();\n    \n    parameterLoop:\n     for (StreamExpressionParameter parameter : expression.getParameters()) {\n      for (Class clazz : clazzes) {\n        if (!clazz.isAssignableFrom(parameter.getClass())) {\n          continue parameterLoop; // go to the next parameter since this parameter cannot be assigned to at least one of the classes\n        }\n      }\n      parameters.add(parameter);\n    }\n    return parameters;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["804a8d5358fe7b7563b85ee7838714d720b89272"],"804a8d5358fe7b7563b85ee7838714d720b89272":["c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f00f1c5fad501b66705121feb623f8cfbb6712f9","c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"f00f1c5fad501b66705121feb623f8cfbb6712f9":["c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c0dbd11ae1d6533e7454d66bfb1d5ea898dfa8e5":["804a8d5358fe7b7563b85ee7838714d720b89272","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f00f1c5fad501b66705121feb623f8cfbb6712f9"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"804a8d5358fe7b7563b85ee7838714d720b89272":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}