{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","commits":[{"id":"0c17d12803da6cadc96b3cdf15b0b940eddb28de","date":1323710889,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 10000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random);\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random, analyzer, num);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ceb6a6c707ada1df8bde804e25c98668e699a18","date":1323800602,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 10000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random);\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random, analyzer, num);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 10000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 10000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random);\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random, analyzer, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 10000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 10000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"0c17d12803da6cadc96b3cdf15b0b940eddb28de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ceb6a6c707ada1df8bde804e25c98668e699a18":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ceb6a6c707ada1df8bde804e25c98668e699a18","0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0c17d12803da6cadc96b3cdf15b0b940eddb28de":["4ceb6a6c707ada1df8bde804e25c98668e699a18","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ceb6a6c707ada1df8bde804e25c98668e699a18","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}