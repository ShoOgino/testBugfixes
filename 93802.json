{"path":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseRegistries(SolrQueryRequest).mjava","commits":[{"id":"449bfd05ae28dcff263bf35fdb5fb75ae72446d3","date":1484383935,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseRegistries(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private Set<String> parseRegistries(SolrQueryRequest req) {\n    String[] groupStr = req.getParams().getParams(\"group\");\n    String[] registryStr = req.getParams().getParams(\"registry\");\n    if ((groupStr == null || groupStr.length == 0) && (registryStr == null || registryStr.length == 0)) {\n      // return all registries\n      return container.getMetricManager().registryNames();\n    }\n    boolean allRegistries = false;\n    Set<String> initialPrefixes = Collections.emptySet();\n    if (groupStr != null && groupStr.length > 0) {\n      initialPrefixes = new HashSet<>();\n      for (String g : groupStr) {\n        List<String> split = StrUtils.splitSmart(g, ',');\n        for (String s : split) {\n          if (s.trim().equals(\"all\")) {\n            allRegistries = true;\n            break;\n          }\n          initialPrefixes.add(SolrMetricManager.overridableRegistryName(s.trim()));\n        }\n        if (allRegistries) {\n          return container.getMetricManager().registryNames();\n        }\n      }\n    }\n\n    if (registryStr != null && registryStr.length > 0) {\n      if (initialPrefixes.isEmpty()) {\n        initialPrefixes = new HashSet<>();\n      }\n      for (String r : registryStr) {\n        List<String> split = StrUtils.splitSmart(r, ',');\n        for (String s : split) {\n          if (s.trim().equals(\"all\")) {\n            allRegistries = true;\n            break;\n          }\n          initialPrefixes.add(SolrMetricManager.overridableRegistryName(s.trim()));\n        }\n        if (allRegistries) {\n          return container.getMetricManager().registryNames();\n        }\n      }\n    }\n    Set<String> validRegistries = new HashSet<>();\n    for (String r : container.getMetricManager().registryNames()) {\n      for (String prefix : initialPrefixes) {\n        if (r.startsWith(prefix)) {\n          validRegistries.add(r);\n          break;\n        }\n      }\n    }\n    return validRegistries;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseRegistries(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  private Set<String> parseRegistries(SolrQueryRequest req) {\n    String[] groupStr = req.getParams().getParams(\"group\");\n    String[] registryStr = req.getParams().getParams(\"registry\");\n    if ((groupStr == null || groupStr.length == 0) && (registryStr == null || registryStr.length == 0)) {\n      // return all registries\n      return container.getMetricManager().registryNames();\n    }\n    boolean allRegistries = false;\n    Set<String> initialPrefixes = Collections.emptySet();\n    if (groupStr != null && groupStr.length > 0) {\n      initialPrefixes = new HashSet<>();\n      for (String g : groupStr) {\n        List<String> split = StrUtils.splitSmart(g, ',');\n        for (String s : split) {\n          if (s.trim().equals(\"all\")) {\n            allRegistries = true;\n            break;\n          }\n          initialPrefixes.add(SolrMetricManager.overridableRegistryName(s.trim()));\n        }\n        if (allRegistries) {\n          return container.getMetricManager().registryNames();\n        }\n      }\n    }\n\n    if (registryStr != null && registryStr.length > 0) {\n      if (initialPrefixes.isEmpty()) {\n        initialPrefixes = new HashSet<>();\n      }\n      for (String r : registryStr) {\n        List<String> split = StrUtils.splitSmart(r, ',');\n        for (String s : split) {\n          if (s.trim().equals(\"all\")) {\n            allRegistries = true;\n            break;\n          }\n          initialPrefixes.add(SolrMetricManager.overridableRegistryName(s.trim()));\n        }\n        if (allRegistries) {\n          return container.getMetricManager().registryNames();\n        }\n      }\n    }\n    Set<String> validRegistries = new HashSet<>();\n    for (String r : container.getMetricManager().registryNames()) {\n      for (String prefix : initialPrefixes) {\n        if (r.startsWith(prefix)) {\n          validRegistries.add(r);\n          break;\n        }\n      }\n    }\n    return validRegistries;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseRegistries(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseRegistries(SolrQueryRequest).mjava","sourceNew":"  private Set<String> parseRegistries(SolrQueryRequest req) {\n    String[] groupStr = req.getParams().getParams(GROUP_PARAM);\n    String[] registryStr = req.getParams().getParams(REGISTRY_PARAM);\n    if ((groupStr == null || groupStr.length == 0) && (registryStr == null || registryStr.length == 0)) {\n      // return all registries\n      return container.getMetricManager().registryNames();\n    }\n    boolean allRegistries = false;\n    Set<String> initialPrefixes = Collections.emptySet();\n    if (groupStr != null && groupStr.length > 0) {\n      initialPrefixes = new HashSet<>();\n      for (String g : groupStr) {\n        List<String> split = StrUtils.splitSmart(g, ',');\n        for (String s : split) {\n          if (s.trim().equals(ALL)) {\n            allRegistries = true;\n            break;\n          }\n          initialPrefixes.add(SolrMetricManager.overridableRegistryName(s.trim()));\n        }\n        if (allRegistries) {\n          return container.getMetricManager().registryNames();\n        }\n      }\n    }\n\n    if (registryStr != null && registryStr.length > 0) {\n      if (initialPrefixes.isEmpty()) {\n        initialPrefixes = new HashSet<>();\n      }\n      for (String r : registryStr) {\n        List<String> split = StrUtils.splitSmart(r, ',');\n        for (String s : split) {\n          if (s.trim().equals(ALL)) {\n            allRegistries = true;\n            break;\n          }\n          initialPrefixes.add(SolrMetricManager.overridableRegistryName(s.trim()));\n        }\n        if (allRegistries) {\n          return container.getMetricManager().registryNames();\n        }\n      }\n    }\n    Set<String> validRegistries = new HashSet<>();\n    for (String r : container.getMetricManager().registryNames()) {\n      for (String prefix : initialPrefixes) {\n        if (r.startsWith(prefix)) {\n          validRegistries.add(r);\n          break;\n        }\n      }\n    }\n    return validRegistries;\n  }\n\n","sourceOld":"  private Set<String> parseRegistries(SolrQueryRequest req) {\n    String[] groupStr = req.getParams().getParams(\"group\");\n    String[] registryStr = req.getParams().getParams(\"registry\");\n    if ((groupStr == null || groupStr.length == 0) && (registryStr == null || registryStr.length == 0)) {\n      // return all registries\n      return container.getMetricManager().registryNames();\n    }\n    boolean allRegistries = false;\n    Set<String> initialPrefixes = Collections.emptySet();\n    if (groupStr != null && groupStr.length > 0) {\n      initialPrefixes = new HashSet<>();\n      for (String g : groupStr) {\n        List<String> split = StrUtils.splitSmart(g, ',');\n        for (String s : split) {\n          if (s.trim().equals(\"all\")) {\n            allRegistries = true;\n            break;\n          }\n          initialPrefixes.add(SolrMetricManager.overridableRegistryName(s.trim()));\n        }\n        if (allRegistries) {\n          return container.getMetricManager().registryNames();\n        }\n      }\n    }\n\n    if (registryStr != null && registryStr.length > 0) {\n      if (initialPrefixes.isEmpty()) {\n        initialPrefixes = new HashSet<>();\n      }\n      for (String r : registryStr) {\n        List<String> split = StrUtils.splitSmart(r, ',');\n        for (String s : split) {\n          if (s.trim().equals(\"all\")) {\n            allRegistries = true;\n            break;\n          }\n          initialPrefixes.add(SolrMetricManager.overridableRegistryName(s.trim()));\n        }\n        if (allRegistries) {\n          return container.getMetricManager().registryNames();\n        }\n      }\n    }\n    Set<String> validRegistries = new HashSet<>();\n    for (String r : container.getMetricManager().registryNames()) {\n      for (String prefix : initialPrefixes) {\n        if (r.startsWith(prefix)) {\n          validRegistries.add(r);\n          break;\n        }\n      }\n    }\n    return validRegistries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseRegistries(SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseRegistries(SolrQueryRequest).mjava","sourceNew":"  private Set<String> parseRegistries(SolrQueryRequest req) {\n    String[] groupStr = req.getParams().getParams(GROUP_PARAM);\n    String[] registryStr = req.getParams().getParams(REGISTRY_PARAM);\n    if ((groupStr == null || groupStr.length == 0) && (registryStr == null || registryStr.length == 0)) {\n      // return all registries\n      return container.getMetricManager().registryNames();\n    }\n    boolean allRegistries = false;\n    Set<String> initialPrefixes = Collections.emptySet();\n    if (groupStr != null && groupStr.length > 0) {\n      initialPrefixes = new HashSet<>();\n      for (String g : groupStr) {\n        List<String> split = StrUtils.splitSmart(g, ',');\n        for (String s : split) {\n          if (s.trim().equals(ALL)) {\n            allRegistries = true;\n            break;\n          }\n          initialPrefixes.add(SolrMetricManager.overridableRegistryName(s.trim()));\n        }\n        if (allRegistries) {\n          return container.getMetricManager().registryNames();\n        }\n      }\n    }\n\n    if (registryStr != null && registryStr.length > 0) {\n      if (initialPrefixes.isEmpty()) {\n        initialPrefixes = new HashSet<>();\n      }\n      for (String r : registryStr) {\n        List<String> split = StrUtils.splitSmart(r, ',');\n        for (String s : split) {\n          if (s.trim().equals(ALL)) {\n            allRegistries = true;\n            break;\n          }\n          initialPrefixes.add(SolrMetricManager.overridableRegistryName(s.trim()));\n        }\n        if (allRegistries) {\n          return container.getMetricManager().registryNames();\n        }\n      }\n    }\n    Set<String> validRegistries = new HashSet<>();\n    for (String r : container.getMetricManager().registryNames()) {\n      for (String prefix : initialPrefixes) {\n        if (r.startsWith(prefix)) {\n          validRegistries.add(r);\n          break;\n        }\n      }\n    }\n    return validRegistries;\n  }\n\n","sourceOld":"  private Set<String> parseRegistries(SolrQueryRequest req) {\n    String[] groupStr = req.getParams().getParams(\"group\");\n    String[] registryStr = req.getParams().getParams(\"registry\");\n    if ((groupStr == null || groupStr.length == 0) && (registryStr == null || registryStr.length == 0)) {\n      // return all registries\n      return container.getMetricManager().registryNames();\n    }\n    boolean allRegistries = false;\n    Set<String> initialPrefixes = Collections.emptySet();\n    if (groupStr != null && groupStr.length > 0) {\n      initialPrefixes = new HashSet<>();\n      for (String g : groupStr) {\n        List<String> split = StrUtils.splitSmart(g, ',');\n        for (String s : split) {\n          if (s.trim().equals(\"all\")) {\n            allRegistries = true;\n            break;\n          }\n          initialPrefixes.add(SolrMetricManager.overridableRegistryName(s.trim()));\n        }\n        if (allRegistries) {\n          return container.getMetricManager().registryNames();\n        }\n      }\n    }\n\n    if (registryStr != null && registryStr.length > 0) {\n      if (initialPrefixes.isEmpty()) {\n        initialPrefixes = new HashSet<>();\n      }\n      for (String r : registryStr) {\n        List<String> split = StrUtils.splitSmart(r, ',');\n        for (String s : split) {\n          if (s.trim().equals(\"all\")) {\n            allRegistries = true;\n            break;\n          }\n          initialPrefixes.add(SolrMetricManager.overridableRegistryName(s.trim()));\n        }\n        if (allRegistries) {\n          return container.getMetricManager().registryNames();\n        }\n      }\n    }\n    Set<String> validRegistries = new HashSet<>();\n    for (String r : container.getMetricManager().registryNames()) {\n      for (String prefix : initialPrefixes) {\n        if (r.startsWith(prefix)) {\n          validRegistries.add(r);\n          break;\n        }\n      }\n    }\n    return validRegistries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseRegistries(String[],String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#parseRegistries(SolrQueryRequest).mjava","sourceNew":"  public Set<String> parseRegistries(String[] groupStr, String[] registryStr) {\n    if ((groupStr == null || groupStr.length == 0) && (registryStr == null || registryStr.length == 0)) {\n      // return all registries\n      return metricManager.registryNames();\n    }\n    boolean allRegistries = false;\n    Set<String> initialPrefixes = Collections.emptySet();\n    if (groupStr != null && groupStr.length > 0) {\n      initialPrefixes = new HashSet<>();\n      for (String g : groupStr) {\n        List<String> split = StrUtils.splitSmart(g, ',');\n        for (String s : split) {\n          if (s.trim().equals(ALL)) {\n            allRegistries = true;\n            break;\n          }\n          initialPrefixes.add(SolrMetricManager.overridableRegistryName(s.trim()));\n        }\n        if (allRegistries) {\n          return metricManager.registryNames();\n        }\n      }\n    }\n\n    if (registryStr != null && registryStr.length > 0) {\n      if (initialPrefixes.isEmpty()) {\n        initialPrefixes = new HashSet<>();\n      }\n      for (String r : registryStr) {\n        List<String> split = StrUtils.splitSmart(r, ',');\n        for (String s : split) {\n          if (s.trim().equals(ALL)) {\n            allRegistries = true;\n            break;\n          }\n          initialPrefixes.add(SolrMetricManager.overridableRegistryName(s.trim()));\n        }\n        if (allRegistries) {\n          return metricManager.registryNames();\n        }\n      }\n    }\n    Set<String> validRegistries = new HashSet<>();\n    for (String r : metricManager.registryNames()) {\n      for (String prefix : initialPrefixes) {\n        if (r.startsWith(prefix)) {\n          validRegistries.add(r);\n          break;\n        }\n      }\n    }\n    return validRegistries;\n  }\n\n","sourceOld":"  private Set<String> parseRegistries(SolrQueryRequest req) {\n    String[] groupStr = req.getParams().getParams(GROUP_PARAM);\n    String[] registryStr = req.getParams().getParams(REGISTRY_PARAM);\n    if ((groupStr == null || groupStr.length == 0) && (registryStr == null || registryStr.length == 0)) {\n      // return all registries\n      return container.getMetricManager().registryNames();\n    }\n    boolean allRegistries = false;\n    Set<String> initialPrefixes = Collections.emptySet();\n    if (groupStr != null && groupStr.length > 0) {\n      initialPrefixes = new HashSet<>();\n      for (String g : groupStr) {\n        List<String> split = StrUtils.splitSmart(g, ',');\n        for (String s : split) {\n          if (s.trim().equals(ALL)) {\n            allRegistries = true;\n            break;\n          }\n          initialPrefixes.add(SolrMetricManager.overridableRegistryName(s.trim()));\n        }\n        if (allRegistries) {\n          return container.getMetricManager().registryNames();\n        }\n      }\n    }\n\n    if (registryStr != null && registryStr.length > 0) {\n      if (initialPrefixes.isEmpty()) {\n        initialPrefixes = new HashSet<>();\n      }\n      for (String r : registryStr) {\n        List<String> split = StrUtils.splitSmart(r, ',');\n        for (String s : split) {\n          if (s.trim().equals(ALL)) {\n            allRegistries = true;\n            break;\n          }\n          initialPrefixes.add(SolrMetricManager.overridableRegistryName(s.trim()));\n        }\n        if (allRegistries) {\n          return container.getMetricManager().registryNames();\n        }\n      }\n    }\n    Set<String> validRegistries = new HashSet<>();\n    for (String r : container.getMetricManager().registryNames()) {\n      for (String prefix : initialPrefixes) {\n        if (r.startsWith(prefix)) {\n          validRegistries.add(r);\n          break;\n        }\n      }\n    }\n    return validRegistries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["449bfd05ae28dcff263bf35fdb5fb75ae72446d3"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"449bfd05ae28dcff263bf35fdb5fb75ae72446d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","449bfd05ae28dcff263bf35fdb5fb75ae72446d3"],"816521ebaad5add9cb96bb88c577394e2938c40b":["449bfd05ae28dcff263bf35fdb5fb75ae72446d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["449bfd05ae28dcff263bf35fdb5fb75ae72446d3","507e7decdf00981d09a74632ea30299a4ce6ba72"],"449bfd05ae28dcff263bf35fdb5fb75ae72446d3":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","507e7decdf00981d09a74632ea30299a4ce6ba72","816521ebaad5add9cb96bb88c577394e2938c40b"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","507e7decdf00981d09a74632ea30299a4ce6ba72","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}