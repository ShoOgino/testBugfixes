{"path":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#tryForcedException().mjava","commits":[{"id":"824ab25acd22f2eca198755bafab3cb8b7878493","date":1341276186,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#tryForcedException().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestForUtil#tryForcedException().mjava","sourceNew":"  // Test correctness of ignored forced exception\n  public void tryForcedException() throws Exception {\n    int sz=128;\n    Integer[] buff= new Integer[sz];\n    int[] data = new int[sz];\n    int[] copy = new int[sz];\n    byte[] res = new byte[4+sz*8];\n    IntBuffer resBuffer = ByteBuffer.wrap(res).asIntBuffer();\n    for (int i=0; i<sz-1; ++i)\n      buff[i]=gen.nextInt() & 1;\n    buff[sz-1]=gen.nextInt() & 0xffffffff;   // create only one exception\n\n    Collections.shuffle(Arrays.asList(buff),new Random(seed));\n    for (int i=0; i<sz; ++i)\n      data[i] = buff[i];\n\n    int ensz = PForUtil.compress(data,sz,resBuffer);\n\n    if (ensz > sz*8+4) {\n      println(\"Excceed? \"+ensz+\">\"+(sz*8+4));\n      ensz=sz*8+4;\n    }\n    resBuffer.rewind();\n    PForUtil.decompress(resBuffer,copy);\n\n    //println(getHex(data,sz)+\"\\n\");\n    //println(getHex(res,ensz)+\"\\n\");\n    //println(getHex(copy,sz)+\"\\n\");\n    \n    assert cmp(data,sz,copy,sz)==true;\n  }\n\n","sourceOld":"  // Test correctness of ignored forced exception\n  public void tryForcedException() throws Exception {\n    int sz=128;\n    Integer[] buff= new Integer[sz];\n    int[] data = new int[sz];\n    int[] copy = new int[sz];\n    byte[] res = new byte[4+sz*8];\n    IntBuffer resBuffer = ByteBuffer.wrap(res).asIntBuffer();\n    for (int i=0; i<sz-1; ++i)\n      buff[i]=gen.nextInt() & 0;\n    buff[sz-1]=gen.nextInt() & 0xffffffff;   // create only one exception\n\n    Collections.shuffle(Arrays.asList(buff),new Random(seed));\n    for (int i=0; i<sz; ++i)\n      data[i] = buff[i];\n\n    int ensz = ForUtil.compress(data,sz,resBuffer);\n\n    if (ensz > sz*8+4) {\n      println(\"Excceed? \"+ensz+\">\"+(sz*8+4));\n      ensz=sz*8+4;\n    }\n    resBuffer.rewind();\n    ForUtil.decompress(resBuffer,copy);\n\n//    println(getHex(data,sz)+\"\\n\");\n//    println(getHex(res,ensz)+\"\\n\");\n//    println(getHex(copy,sz)+\"\\n\");\n    \n    assert cmp(data,sz,copy,sz)==true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5373bc7574123da55ae25e216b6d768ccb1dcd91","date":1342013351,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#testForcedException().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/pfor/TestPForUtil#tryForcedException().mjava","sourceNew":"  /**\n   * Test correctness of ignored forced exception.\n   * The trailing forced exceptions shouldn't be reverted\n   * since they're not necessary. \n   */\n  public void testForcedException() throws Exception {\n    initRandom();\n    int sz=ForPostingsFormat.DEFAULT_BLOCK_SIZE;\n    Integer[] buff= new Integer[sz];\n    int[] data = new int[sz];\n    int[] copy = new int[sz];\n    byte[] res = new byte[4+sz*8];\n    IntBuffer resBuffer = ByteBuffer.wrap(res).asIntBuffer();\n    for (int i=0; i<sz-1; ++i)\n      buff[i]=gen.nextInt() & 1;\n    buff[sz-1]=gen.nextInt() & 0xffffffff;   // create only one exception\n\n    Collections.shuffle(Arrays.asList(buff),gen);\n    for (int i=0; i<sz; ++i)\n      data[i] = buff[i];\n\n    int ensz = PForUtil.compress(data,sz,resBuffer);\n\n    assert (ensz <= sz*8+4);  // must not exceed the loose upperbound\n\n    resBuffer.rewind();\n    PForUtil.decompress(resBuffer,copy);\n\n    //println(getHex(data,sz)+\"\\n\");\n    //println(getHex(res,ensz)+\"\\n\");\n    //println(getHex(copy,sz)+\"\\n\");\n    \n    assert cmp(data,sz,copy,sz)==true;\n  }\n\n","sourceOld":"  // Test correctness of ignored forced exception\n  public void tryForcedException() throws Exception {\n    int sz=128;\n    Integer[] buff= new Integer[sz];\n    int[] data = new int[sz];\n    int[] copy = new int[sz];\n    byte[] res = new byte[4+sz*8];\n    IntBuffer resBuffer = ByteBuffer.wrap(res).asIntBuffer();\n    for (int i=0; i<sz-1; ++i)\n      buff[i]=gen.nextInt() & 1;\n    buff[sz-1]=gen.nextInt() & 0xffffffff;   // create only one exception\n\n    Collections.shuffle(Arrays.asList(buff),new Random(seed));\n    for (int i=0; i<sz; ++i)\n      data[i] = buff[i];\n\n    int ensz = PForUtil.compress(data,sz,resBuffer);\n\n    if (ensz > sz*8+4) {\n      println(\"Excceed? \"+ensz+\">\"+(sz*8+4));\n      ensz=sz*8+4;\n    }\n    resBuffer.rewind();\n    PForUtil.decompress(resBuffer,copy);\n\n    //println(getHex(data,sz)+\"\\n\");\n    //println(getHex(res,ensz)+\"\\n\");\n    //println(getHex(copy,sz)+\"\\n\");\n    \n    assert cmp(data,sz,copy,sz)==true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"824ab25acd22f2eca198755bafab3cb8b7878493":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5373bc7574123da55ae25e216b6d768ccb1dcd91":["824ab25acd22f2eca198755bafab3cb8b7878493"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"824ab25acd22f2eca198755bafab3cb8b7878493":["5373bc7574123da55ae25e216b6d768ccb1dcd91"],"5373bc7574123da55ae25e216b6d768ccb1dcd91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["824ab25acd22f2eca198755bafab3cb8b7878493","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5373bc7574123da55ae25e216b6d768ccb1dcd91","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}