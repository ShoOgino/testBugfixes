{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/TestLang#testLang().mjava","commits":[{"id":"61ee8f1fa567e6cea780b707334c8b330b66662e","date":1522686751,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/TestLang#testLang().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLang() {\n    List<String> functions = new ArrayList();\n    for(String f : allFunctions) {\n      functions.add(f);\n    }\n    StreamFactory factory = new StreamFactory();\n    Lang.register(factory);\n    Map<String,Class<? extends Expressible>> registeredFunctions = factory.getFunctionNames();\n\n    //Check that each function that is expected is registered.\n    for(String func : functions) {\n      assertTrue(\"Testing function:\"+func, registeredFunctions.containsKey(func));\n    }\n\n    //Check that ech function that is registered is expected.\n    Set<String> keys = registeredFunctions.keySet();\n    for(String key : keys) {\n      assertTrue(\"Testing key:\"+key, functions.contains(key));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1d9fafc37d38653a61d38a03af732cb227a0dc","date":1523640711,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/TestLang#testLang().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/TestLang#testLang().mjava","sourceNew":"  @Test\n  public void testLang() {\n    List<String> functions = new ArrayList();\n    for(String f : allFunctions) {\n      functions.add(f);\n    }\n    StreamFactory factory = new StreamFactory();\n    Lang.register(factory);\n    Map<String,Class<? extends Expressible>> registeredFunctions = factory.getFunctionNames();\n\n    //Check that each function that is expected is registered.\n    for(String func : functions) {\n      assertTrue(\"Testing function:\"+func, registeredFunctions.containsKey(func));\n    }\n\n    //Check that each function that is registered is expected.\n    Set<String> keys = registeredFunctions.keySet();\n    for(String key : keys) {\n      assertTrue(\"Testing key:\"+key, functions.contains(key));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLang() {\n    List<String> functions = new ArrayList();\n    for(String f : allFunctions) {\n      functions.add(f);\n    }\n    StreamFactory factory = new StreamFactory();\n    Lang.register(factory);\n    Map<String,Class<? extends Expressible>> registeredFunctions = factory.getFunctionNames();\n\n    //Check that each function that is expected is registered.\n    for(String func : functions) {\n      assertTrue(\"Testing function:\"+func, registeredFunctions.containsKey(func));\n    }\n\n    //Check that ech function that is registered is expected.\n    Set<String> keys = registeredFunctions.keySet();\n    for(String key : keys) {\n      assertTrue(\"Testing key:\"+key, functions.contains(key));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60c716cf818aff6857d8490cd0fb8b5aa432408f","date":1577074826,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/TestLang#testLang().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/TestLang#testLang().mjava","sourceNew":"  @Test\n  public void testLang() {\n    List<String> functions = new ArrayList();\n    for(String f : allFunctions) {\n      functions.add(f);\n    }\n    StreamFactory factory = new StreamFactory();\n    Lang.register(factory);\n    Map<String, Supplier<Class<? extends Expressible>>> registeredFunctions = factory.getFunctionNames();\n\n    //Check that each function that is expected is registered.\n    for(String func : functions) {\n      assertTrue(\"Testing function:\"+func, registeredFunctions.containsKey(func));\n    }\n\n    //Check that each function that is registered is expected.\n    Set<String> keys = registeredFunctions.keySet();\n    for(String key : keys) {\n      assertTrue(\"Testing key:\"+key, functions.contains(key));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLang() {\n    List<String> functions = new ArrayList();\n    for(String f : allFunctions) {\n      functions.add(f);\n    }\n    StreamFactory factory = new StreamFactory();\n    Lang.register(factory);\n    Map<String,Class<? extends Expressible>> registeredFunctions = factory.getFunctionNames();\n\n    //Check that each function that is expected is registered.\n    for(String func : functions) {\n      assertTrue(\"Testing function:\"+func, registeredFunctions.containsKey(func));\n    }\n\n    //Check that each function that is registered is expected.\n    Set<String> keys = registeredFunctions.keySet();\n    for(String key : keys) {\n      assertTrue(\"Testing key:\"+key, functions.contains(key));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","date":1577276097,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/TestLang#testLang().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/TestLang#testLang().mjava","sourceNew":"  @Test\n  public void testLang() {\n    List<String> functions = new ArrayList();\n    for(String f : allFunctions) {\n      functions.add(f);\n    }\n    StreamFactory factory = new StreamFactory();\n    Lang.register(factory);\n    Map<String, Supplier<Class<? extends Expressible>>> registeredFunctions = factory.getFunctionNames();\n\n    //Check that each function that is expected is registered.\n    for(String func : functions) {\n      assertTrue(\"Testing function:\"+func, registeredFunctions.containsKey(func));\n    }\n\n    //Check that each function that is registered is expected.\n    Set<String> keys = registeredFunctions.keySet();\n    for(String key : keys) {\n      assertTrue(\"Testing key:\"+key, functions.contains(key));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLang() {\n    List<String> functions = new ArrayList();\n    for(String f : allFunctions) {\n      functions.add(f);\n    }\n    StreamFactory factory = new StreamFactory();\n    Lang.register(factory);\n    Map<String,Class<? extends Expressible>> registeredFunctions = factory.getFunctionNames();\n\n    //Check that each function that is expected is registered.\n    for(String func : functions) {\n      assertTrue(\"Testing function:\"+func, registeredFunctions.containsKey(func));\n    }\n\n    //Check that each function that is registered is expected.\n    Set<String> keys = registeredFunctions.keySet();\n    for(String key : keys) {\n      assertTrue(\"Testing key:\"+key, functions.contains(key));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/TestLang#testLang().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/TestLang#testLang().mjava","sourceNew":"  @Test\n  public void testLang() {\n    List<String> functions = new ArrayList<>();\n    for(String f : allFunctions) {\n      functions.add(f);\n    }\n    StreamFactory factory = new StreamFactory();\n    Lang.register(factory);\n    Map<String, Supplier<Class<? extends Expressible>>> registeredFunctions = factory.getFunctionNames();\n\n    //Check that each function that is expected is registered.\n    for(String func : functions) {\n      assertTrue(\"Testing function:\"+func, registeredFunctions.containsKey(func));\n    }\n\n    //Check that each function that is registered is expected.\n    Set<String> keys = registeredFunctions.keySet();\n    for(String key : keys) {\n      assertTrue(\"Testing key:\"+key, functions.contains(key));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLang() {\n    List<String> functions = new ArrayList();\n    for(String f : allFunctions) {\n      functions.add(f);\n    }\n    StreamFactory factory = new StreamFactory();\n    Lang.register(factory);\n    Map<String, Supplier<Class<? extends Expressible>>> registeredFunctions = factory.getFunctionNames();\n\n    //Check that each function that is expected is registered.\n    for(String func : functions) {\n      assertTrue(\"Testing function:\"+func, registeredFunctions.containsKey(func));\n    }\n\n    //Check that each function that is registered is expected.\n    Set<String> keys = registeredFunctions.keySet();\n    for(String key : keys) {\n      assertTrue(\"Testing key:\"+key, functions.contains(key));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["60c716cf818aff6857d8490cd0fb8b5aa432408f"],"60c716cf818aff6857d8490cd0fb8b5aa432408f":["cf1d9fafc37d38653a61d38a03af732cb227a0dc"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":["cf1d9fafc37d38653a61d38a03af732cb227a0dc","60c716cf818aff6857d8490cd0fb8b5aa432408f"],"cf1d9fafc37d38653a61d38a03af732cb227a0dc":["61ee8f1fa567e6cea780b707334c8b330b66662e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61ee8f1fa567e6cea780b707334c8b330b66662e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60c716cf818aff6857d8490cd0fb8b5aa432408f":["9ba1b632c041956c93c41aa1143d16a567014891","96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":[],"cf1d9fafc37d38653a61d38a03af732cb227a0dc":["60c716cf818aff6857d8490cd0fb8b5aa432408f","96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["61ee8f1fa567e6cea780b707334c8b330b66662e"],"61ee8f1fa567e6cea780b707334c8b330b66662e":["cf1d9fafc37d38653a61d38a03af732cb227a0dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}