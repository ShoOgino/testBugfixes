{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK | Lucene40StoredFieldsWriter.FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","sourceOld":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK | Lucene40StoredFieldsWriter.FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40StoredFieldsReader#visitDocument(int,StoredFieldVisitor).mjava","sourceNew":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK | Lucene40StoredFieldsWriter.FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","sourceOld":"  public final void visitDocument(int n, StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    seekIndex(n);\n    fieldsStream.seek(indexStream.readLong());\n\n    final int numFields = fieldsStream.readVInt();\n    for (int fieldIDX = 0; fieldIDX < numFields; fieldIDX++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldNumber);\n      \n      int bits = fieldsStream.readByte() & 0xFF;\n      assert bits <= (Lucene40StoredFieldsWriter.FIELD_IS_NUMERIC_MASK | Lucene40StoredFieldsWriter.FIELD_IS_BINARY): \"bits=\" + Integer.toHexString(bits);\n\n      switch(visitor.needsField(fieldInfo)) {\n        case YES:\n          readField(visitor, fieldInfo, bits);\n          break;\n        case NO: \n          skipField(bits);\n          break;\n        case STOP: \n          return;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}