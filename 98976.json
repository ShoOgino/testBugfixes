{"path":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"/dev/null","sourceNew":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    for (int i = 0; i < terms.size(); i++) {\n      buffer.append(((Term)terms.elementAt(i)).text());\n      if (i != terms.size()-1)\n\tbuffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (boost != 1.0f) {\n      buffer.append(\"^\");\n      buffer.append(Float.toString(boost));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d6b713d70957a68221ed7eff815add0e3ca05f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30faa4b88cfbc42b6a2df0a91069f710f8ea88bd","date":1014079440,"type":3,"author":"Brian Goetz","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    for (int i = 0; i < terms.size(); i++) {\n      buffer.append(((Term)terms.elementAt(i)).text());\n      if (i != terms.size()-1)\n\tbuffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    if (boost != 1.0f) {\n      buffer.append(\"^\");\n      buffer.append(Float.toString(boost));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    for (int i = 0; i < terms.size(); i++) {\n      buffer.append(((Term)terms.elementAt(i)).text());\n      if (i != terms.size()-1)\n\tbuffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (boost != 1.0f) {\n      buffer.append(\"^\");\n      buffer.append(Float.toString(boost));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c7454619ea6a0710272c1dd947345cee64489f6","date":1026927484,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    for (int i = 0; i < terms.size(); i++) {\n      buffer.append(((Term)terms.elementAt(i)).text());\n      if (i != terms.size()-1)\n\tbuffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    if (boost != 1.0f) {\n      buffer.append(\"^\");\n      buffer.append(Float.toString(boost));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public final String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    for (int i = 0; i < terms.size(); i++) {\n      buffer.append(((Term)terms.elementAt(i)).text());\n      if (i != terms.size()-1)\n\tbuffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    if (boost != 1.0f) {\n      buffer.append(\"^\");\n      buffer.append(Float.toString(boost));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    for (int i = 0; i < terms.size(); i++) {\n      buffer.append(((Term)terms.elementAt(i)).text());\n      if (i != terms.size()-1)\n\tbuffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    if (getBoost() != 1.0f) {\n      buffer.append(\"^\");\n      buffer.append(Float.toString(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    for (int i = 0; i < terms.size(); i++) {\n      buffer.append(((Term)terms.elementAt(i)).text());\n      if (i != terms.size()-1)\n\tbuffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    if (boost != 1.0f) {\n      buffer.append(\"^\");\n      buffer.append(Float.toString(boost));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df8dadf22de84eeb1294e70792e292ecf8ded564","date":1130577981,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    for (int i = 0; i < terms.size(); i++) {\n      buffer.append(((Term)terms.elementAt(i)).text());\n      if (i != terms.size()-1)\n  buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    for (int i = 0; i < terms.size(); i++) {\n      buffer.append(((Term)terms.elementAt(i)).text());\n      if (i != terms.size()-1)\n\tbuffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    if (getBoost() != 1.0f) {\n      buffer.append(\"^\");\n      buffer.append(Float.toString(getBoost()));\n    }\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19f758d6efad251890e720eb5370329f6ab5b509","date":1217253519,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    for (int i = 0; i < terms.size(); i++) {\n      buffer.append(((Term)terms.get(i)).text());\n      if (i != terms.size()-1)\n  buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    for (int i = 0; i < terms.size(); i++) {\n      buffer.append(((Term)terms.elementAt(i)).text());\n      if (i != terms.size()-1)\n  buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6b713d70957a68221ed7eff815add0e3ca05f17","date":1219658536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    for (int i = 0; i < terms.size(); i++) {\n      buffer.append(((Term)terms.get(i)).text());\n      if (i != terms.size()-1)\n  buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (!field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    for (int i = 0; i < terms.size(); i++) {\n      buffer.append(((Term)terms.get(i)).text());\n      if (i != terms.size()-1)\n  buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ad7cae1b81f98b1ce24b2aa239f8166cf9ae108","date":1221993701,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.size(); i++) {\n      int pos = ((Integer)positions.get(i)).intValue();\n      String s = pieces[pos];\n      if (s == null) {\n        s = ((Term)terms.get(i)).text();\n      } else {\n        s = s + \"|\" + ((Term)terms.get(i)).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    for (int i = 0; i < terms.size(); i++) {\n      buffer.append(((Term)terms.get(i)).text());\n      if (i != terms.size()-1)\n  buffer.append(\" \");\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.size(); i++) {\n      int pos = ((Integer)positions.get(i)).intValue();\n      String s = pieces[pos];\n      if (s == null) {\n        s = ((Term)terms.get(i)).text();\n      } else {\n        s = s + \"|\" + ((Term)terms.get(i)).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String f) {\n    StringBuffer buffer = new StringBuffer();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.size(); i++) {\n      int pos = ((Integer)positions.get(i)).intValue();\n      String s = pieces[pos];\n      if (s == null) {\n        s = ((Term)terms.get(i)).text();\n      } else {\n        s = s + \"|\" + ((Term)terms.get(i)).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.size(); i++) {\n      int pos = positions.get(i).intValue();\n      String s = pieces[pos];\n      if (s == null) {\n        s = (terms.get(i)).text();\n      } else {\n        s = s + \"|\" + (terms.get(i)).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.size(); i++) {\n      int pos = ((Integer)positions.get(i)).intValue();\n      String s = pieces[pos];\n      if (s == null) {\n        s = ((Term)terms.get(i)).text();\n      } else {\n        s = s + \"|\" + ((Term)terms.get(i)).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.size(); i++) {\n      int pos = positions.get(i).intValue();\n      String s = pieces[pos];\n      if (s == null) {\n        s = (terms.get(i)).text();\n      } else {\n        s = s + \"|\" + (terms.get(i)).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.size(); i++) {\n      int pos = positions.get(i).intValue();\n      String s = pieces[pos];\n      if (s == null) {\n        s = (terms.get(i)).text();\n      } else {\n        s = s + \"|\" + (terms.get(i)).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#toString(String).mjava","sourceNew":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.size(); i++) {\n      int pos = positions.get(i).intValue();\n      String s = pieces[pos];\n      if (s == null) {\n        s = (terms.get(i)).text();\n      } else {\n        s = s + \"|\" + (terms.get(i)).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","sourceOld":"  /** Prints a user-readable version of this query. */\n  @Override\n  public String toString(String f) {\n    StringBuilder buffer = new StringBuilder();\n    if (field != null && !field.equals(f)) {\n      buffer.append(field);\n      buffer.append(\":\");\n    }\n\n    buffer.append(\"\\\"\");\n    String[] pieces = new String[maxPosition + 1];\n    for (int i = 0; i < terms.size(); i++) {\n      int pos = positions.get(i).intValue();\n      String s = pieces[pos];\n      if (s == null) {\n        s = (terms.get(i)).text();\n      } else {\n        s = s + \"|\" + (terms.get(i)).text();\n      }\n      pieces[pos] = s;\n    }\n    for (int i = 0; i < pieces.length; i++) {\n      if (i > 0) {\n        buffer.append(' ');\n      }\n      String s = pieces[i];\n      if (s == null) {\n        buffer.append('?');\n      } else {\n        buffer.append(s);\n      }\n    }\n    buffer.append(\"\\\"\");\n\n    if (slop != 0) {\n      buffer.append(\"~\");\n      buffer.append(slop);\n    }\n\n    buffer.append(ToStringUtils.boost(getBoost()));\n\n    return buffer.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4ad7cae1b81f98b1ce24b2aa239f8166cf9ae108":["d6b713d70957a68221ed7eff815add0e3ca05f17"],"30faa4b88cfbc42b6a2df0a91069f710f8ea88bd":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"486cfd5a3f7481938475c113415d896f7a74a4a9":["ef82ff03e4016c705811b2658e81471a645c0e49"],"19f758d6efad251890e720eb5370329f6ab5b509":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"df8dadf22de84eeb1294e70792e292ecf8ded564":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["9c7454619ea6a0710272c1dd947345cee64489f6"],"ef82ff03e4016c705811b2658e81471a645c0e49":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6b713d70957a68221ed7eff815add0e3ca05f17":["19f758d6efad251890e720eb5370329f6ab5b509"],"9c7454619ea6a0710272c1dd947345cee64489f6":["30faa4b88cfbc42b6a2df0a91069f710f8ea88bd"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["4ad7cae1b81f98b1ce24b2aa239f8166cf9ae108"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["486cfd5a3f7481938475c113415d896f7a74a4a9"]},"commit2Childs":{"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["30faa4b88cfbc42b6a2df0a91069f710f8ea88bd"],"4ad7cae1b81f98b1ce24b2aa239f8166cf9ae108":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"30faa4b88cfbc42b6a2df0a91069f710f8ea88bd":["9c7454619ea6a0710272c1dd947345cee64489f6"],"486cfd5a3f7481938475c113415d896f7a74a4a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"19f758d6efad251890e720eb5370329f6ab5b509":["d6b713d70957a68221ed7eff815add0e3ca05f17"],"df8dadf22de84eeb1294e70792e292ecf8ded564":["19f758d6efad251890e720eb5370329f6ab5b509"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["df8dadf22de84eeb1294e70792e292ecf8ded564"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"ef82ff03e4016c705811b2658e81471a645c0e49":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"d6b713d70957a68221ed7eff815add0e3ca05f17":["4ad7cae1b81f98b1ce24b2aa239f8166cf9ae108"],"9c7454619ea6a0710272c1dd947345cee64489f6":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}