{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (TermFreq k : keys) {\n      List<LookupResult> list = lookup.lookup(_TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (TermFreq k : keys) {\n      List<LookupResult> list = lookup.lookup(_TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreqPayload[] keys = new TermFreqPayload[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreqPayload(this.keys[i], i);\n    lookup.build(new TermFreqPayloadArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (TermFreqPayload k : keys) {\n      List<LookupResult> list = lookup.lookup(_TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreq[] keys = new TermFreq[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreq(this.keys[i], i);\n    lookup.build(new TermFreqArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (TermFreq k : keys) {\n      List<LookupResult> list = lookup.lookup(_TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    Input[] keys = new Input[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new Input(this.keys[i], i);\n    lookup.build(new InputArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (Input k : keys) {\n      List<LookupResult> list = lookup.lookup(_TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    TermFreqPayload[] keys = new TermFreqPayload[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new TermFreqPayload(this.keys[i], i);\n    lookup.build(new TermFreqPayloadArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (TermFreqPayload k : keys) {\n      List<LookupResult> list = lookup.lookup(_TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    Input[] keys = new Input[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new Input(this.keys[i], i);\n    lookup.build(new InputArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (Input k : keys) {\n      List<LookupResult> list = lookup.lookup(TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    Input[] keys = new Input[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new Input(this.keys[i], i);\n    lookup.build(new InputArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (Input k : keys) {\n      List<LookupResult> list = lookup.lookup(_TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    Input[] keys = new Input[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new Input(this.keys[i], i);\n    lookup.build(new InputArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (Input k : keys) {\n      List<LookupResult> list = lookup.lookup(TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    Input[] keys = new Input[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new Input(this.keys[i], i);\n    lookup.build(new InputArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (Input k : keys) {\n      List<LookupResult> list = lookup.lookup(TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    Input[] keys = new Input[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new Input(this.keys[i], i);\n    lookup.build(new InputArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (Input k : keys) {\n      List<LookupResult> list = lookup.lookup(TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    Input[] keys = new Input[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new Input(this.keys[i], i);\n    lookup.build(new InputArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TestUtil.createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (Input k : keys) {\n      List<LookupResult> list = lookup.lookup(TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    Input[] keys = new Input[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new Input(this.keys[i], i);\n    lookup.build(new InputArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (Input k : keys) {\n      List<LookupResult> list = lookup.lookup(TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    Input[] keys = new Input[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new Input(this.keys[i], i);\n    lookup.build(new InputArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = TEMP_DIR;\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (Input k : keys) {\n      List<LookupResult> list = lookup.lookup(TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    Input[] keys = new Input[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new Input(this.keys[i], i);\n    lookup.build(new InputArrayIterator(keys));\n\n    // Store the suggester.\n    Path storeDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    lookup.store(Files.newOutputStream(storeDir.resolve(\"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(Files.newInputStream(storeDir.resolve(\"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (Input k : keys) {\n      List<LookupResult> list = lookup.lookup(TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    Input[] keys = new Input[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new Input(this.keys[i], i);\n    lookup.build(new InputArrayIterator(keys));\n\n    // Store the suggester.\n    File storeDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    lookup.store(new FileOutputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(new FileInputStream(new File(storeDir, \"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (Input k : keys) {\n      List<LookupResult> list = lookup.lookup(TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass, boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup;\n    Directory tempDir = getDirectory();\n    if (lookupClass == TSTLookup.class) {\n      lookup = new TSTLookup(tempDir, \"suggest\");\n    } else if (lookupClass == FSTCompletionLookup.class) {\n      lookup = new FSTCompletionLookup(tempDir, \"suggest\");\n    } else {\n      lookup = lookupClass.newInstance();\n    }\n    Input[] keys = new Input[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new Input(this.keys[i], i);\n    lookup.build(new InputArrayIterator(keys));\n\n    // Store the suggester.\n    Path storeDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    lookup.store(Files.newOutputStream(storeDir.resolve(\"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(Files.newInputStream(storeDir.resolve(\"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (Input k : keys) {\n      List<LookupResult> list = lookup.lookup(TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n    tempDir.close();\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass,\n      boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup = lookupClass.newInstance();\n    Input[] keys = new Input[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new Input(this.keys[i], i);\n    lookup.build(new InputArrayIterator(keys));\n\n    // Store the suggester.\n    Path storeDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    lookup.store(Files.newOutputStream(storeDir.resolve(\"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(Files.newInputStream(storeDir.resolve(\"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (Input k : keys) {\n      List<LookupResult> list = lookup.lookup(TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b88a121b875f9ae2ac50f85cf46dcb680f126357","date":1555416009,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/PersistenceTest#runTest(Class[#-extends-Lookup],boolean).mjava","sourceNew":"  private void runTest(Class<? extends Lookup> lookupClass, boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup;\n    Directory tempDir = getDirectory();\n    if (lookupClass == TSTLookup.class) {\n      lookup = new TSTLookup(tempDir, \"suggest\");\n    } else if (lookupClass == FSTCompletionLookup.class) {\n      lookup = new FSTCompletionLookup(tempDir, \"suggest\");\n    } else {\n      lookup = lookupClass.getConstructor().newInstance();\n    }\n    Input[] keys = new Input[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new Input(this.keys[i], i);\n    lookup.build(new InputArrayIterator(keys));\n\n    // Store the suggester.\n    Path storeDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    lookup.store(Files.newOutputStream(storeDir.resolve(\"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.getConstructor().newInstance();\n    lookup.load(Files.newInputStream(storeDir.resolve(\"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (Input k : keys) {\n      List<LookupResult> list = lookup.lookup(TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n    tempDir.close();\n  }\n\n","sourceOld":"  private void runTest(Class<? extends Lookup> lookupClass, boolean supportsExactWeights) throws Exception {\n\n    // Add all input keys.\n    Lookup lookup;\n    Directory tempDir = getDirectory();\n    if (lookupClass == TSTLookup.class) {\n      lookup = new TSTLookup(tempDir, \"suggest\");\n    } else if (lookupClass == FSTCompletionLookup.class) {\n      lookup = new FSTCompletionLookup(tempDir, \"suggest\");\n    } else {\n      lookup = lookupClass.newInstance();\n    }\n    Input[] keys = new Input[this.keys.length];\n    for (int i = 0; i < keys.length; i++)\n      keys[i] = new Input(this.keys[i], i);\n    lookup.build(new InputArrayIterator(keys));\n\n    // Store the suggester.\n    Path storeDir = createTempDir(LuceneTestCase.getTestClass().getSimpleName());\n    lookup.store(Files.newOutputStream(storeDir.resolve(\"lookup.dat\")));\n\n    // Re-read it from disk.\n    lookup = lookupClass.newInstance();\n    lookup.load(Files.newInputStream(storeDir.resolve(\"lookup.dat\")));\n\n    // Assert validity.\n    Random random = random();\n    long previous = Long.MIN_VALUE;\n    for (Input k : keys) {\n      List<LookupResult> list = lookup.lookup(TestUtil.bytesToCharSequence(k.term, random), false, 1);\n      assertEquals(1, list.size());\n      LookupResult lookupResult = list.get(0);\n      assertNotNull(k.term.utf8ToString(), lookupResult.key);\n\n      if (supportsExactWeights) { \n        assertEquals(k.term.utf8ToString(), k.v, lookupResult.value);\n      } else {\n        assertTrue(lookupResult.value + \">=\" + previous, lookupResult.value >= previous);\n        previous = lookupResult.value;\n      }\n    }\n    tempDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b88a121b875f9ae2ac50f85cf46dcb680f126357":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["6613659748fe4411a7dcf85266e55db1f95f7315"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"f4abec28b874149a7223e32cc7a01704c27790de":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["b88a121b875f9ae2ac50f85cf46dcb680f126357"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}