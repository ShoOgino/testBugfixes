{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,IOContext,CompressionMode,int,CompressingStoredFieldsIndex).mjava","commits":[{"id":"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","date":1349450075,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,IOContext,CompressionMode,int,CompressingStoredFieldsIndex).mjava","pathOld":"/dev/null","sourceNew":"  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si,\n      IOContext context, CompressionMode compressionMode, int chunkSize, CompressingStoredFieldsIndex storedFieldsIndex) throws IOException {\n    assert directory != null;\n    this.directory = directory;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION), context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n\n      CodecUtil.writeHeader(indexStream, CODEC_NAME_IDX, VERSION_CURRENT);\n      CodecUtil.writeHeader(fieldsStream, CODEC_NAME_DAT, VERSION_CURRENT);\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n\n      indexStream.writeVInt(storedFieldsIndex.getId());\n      indexWriter = storedFieldsIndex.newWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n      fieldsStream.writeVInt(compressionMode.getId());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexStream);\n        abort();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a96cceee825e15cd8e042b683d404086e2a58d1","date":1351872237,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,IOContext,CompressionMode,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#CompressingStoredFieldsWriter(Directory,SegmentInfo,IOContext,CompressionMode,int,CompressingStoredFieldsIndex).mjava","sourceNew":"  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si,\n      IOContext context, CompressionMode compressionMode, int chunkSize) throws IOException {\n    assert directory != null;\n    this.directory = directory;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION), context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n\n      CodecUtil.writeHeader(indexStream, CODEC_NAME_IDX, VERSION_CURRENT);\n      CodecUtil.writeHeader(fieldsStream, CODEC_NAME_DAT, VERSION_CURRENT);\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n\n      indexWriter = new CompressingStoredFieldsIndexWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n      fieldsStream.writeVInt(compressionMode.getId());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexStream);\n        abort();\n      }\n    }\n  }\n\n","sourceOld":"  public CompressingStoredFieldsWriter(Directory directory, SegmentInfo si,\n      IOContext context, CompressionMode compressionMode, int chunkSize, CompressingStoredFieldsIndex storedFieldsIndex) throws IOException {\n    assert directory != null;\n    this.directory = directory;\n    this.segment = si.name;\n    this.compressionMode = compressionMode;\n    this.compressor = compressionMode.newCompressor();\n    this.chunkSize = chunkSize;\n    this.docBase = 0;\n    this.bufferedDocs = new GrowableByteArrayDataOutput(chunkSize);\n    this.endOffsets = new int[16];\n    this.numBufferedDocs = 0;\n\n    boolean success = false;\n    IndexOutput indexStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_INDEX_EXTENSION), context);\n    try {\n      fieldsStream = directory.createOutput(IndexFileNames.segmentFileName(segment, \"\", FIELDS_EXTENSION), context);\n\n      CodecUtil.writeHeader(indexStream, CODEC_NAME_IDX, VERSION_CURRENT);\n      CodecUtil.writeHeader(fieldsStream, CODEC_NAME_DAT, VERSION_CURRENT);\n      assert HEADER_LENGTH_IDX == indexStream.getFilePointer();\n      assert HEADER_LENGTH_DAT == fieldsStream.getFilePointer();\n\n      indexStream.writeVInt(storedFieldsIndex.getId());\n      indexWriter = storedFieldsIndex.newWriter(indexStream);\n      indexStream = null;\n\n      fieldsStream.writeVInt(PackedInts.VERSION_CURRENT);\n      fieldsStream.writeVInt(compressionMode.getId());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(indexStream);\n        abort();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a96cceee825e15cd8e042b683d404086e2a58d1":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0a96cceee825e15cd8e042b683d404086e2a58d1"]},"commit2Childs":{"0a96cceee825e15cd8e042b683d404086e2a58d1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["0a96cceee825e15cd8e042b683d404086e2a58d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}