{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#removeData(String,int).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#removeData(String,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void removeData(String path, int version) throws NoSuchElementException, BadVersionException, IOException {\n    multiLock.lock();\n    try {\n      Node n = traverse(path, false, CreateMode.PERSISTENT);\n      if (n == null) {\n        throw new NoSuchElementException(path);\n      }\n      Node parent = n.parent;\n      if (parent == null) {\n        throw new IOException(\"Cannot remove root node\");\n      }\n      parent.removeChild(n.name, version);\n    } finally {\n      multiLock.unlock();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e3e55745c6667006f67aaa604466b9974425f4","date":1518776937,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#removeData(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#removeData(String,int).mjava","sourceNew":"  @Override\n  public void removeData(String path, int version) throws NoSuchElementException, NotEmptyException, BadVersionException, IOException {\n    multiLock.lock();\n    try {\n      Node n = traverse(path, false, CreateMode.PERSISTENT);\n      if (n == null) {\n        throw new NoSuchElementException(path);\n      }\n      Node parent = n.parent;\n      if (parent == null) {\n        throw new IOException(\"Cannot remove root node\");\n      }\n      if (!n.children.isEmpty()) {\n        throw new NotEmptyException(path);\n      }\n      parent.removeChild(n.name, version);\n    } finally {\n      multiLock.unlock();\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void removeData(String path, int version) throws NoSuchElementException, BadVersionException, IOException {\n    multiLock.lock();\n    try {\n      Node n = traverse(path, false, CreateMode.PERSISTENT);\n      if (n == null) {\n        throw new NoSuchElementException(path);\n      }\n      Node parent = n.parent;\n      if (parent == null) {\n        throw new IOException(\"Cannot remove root node\");\n      }\n      parent.removeChild(n.name, version);\n    } finally {\n      multiLock.unlock();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef2d9523abb6906938bf5685963ce2d30d541cd7","date":1544417732,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#removeData(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#removeData(String,int).mjava","sourceNew":"  @Override\n  public void removeData(String path, int version) throws NoSuchElementException, NotEmptyException, BadVersionException, IOException {\n    multiLock.lock();\n    Node parent;\n    Node n;\n    try {\n      n = traverse(path, false, CreateMode.PERSISTENT);\n      if (n == null) {\n        throw new NoSuchElementException(path);\n      }\n      parent = n.parent;\n      if (parent == null) {\n        throw new IOException(\"Cannot remove root node\");\n      }\n      if (!n.children.isEmpty()) {\n        throw new NotEmptyException(path);\n      }\n    } finally {\n      multiLock.unlock();\n    }\n    \n    // outside the lock to avoid deadlock with update lock\n    parent.removeChild(n.name, version);\n  }\n\n","sourceOld":"  @Override\n  public void removeData(String path, int version) throws NoSuchElementException, NotEmptyException, BadVersionException, IOException {\n    multiLock.lock();\n    try {\n      Node n = traverse(path, false, CreateMode.PERSISTENT);\n      if (n == null) {\n        throw new NoSuchElementException(path);\n      }\n      Node parent = n.parent;\n      if (parent == null) {\n        throw new IOException(\"Cannot remove root node\");\n      }\n      if (!n.children.isEmpty()) {\n        throw new NotEmptyException(path);\n      }\n      parent.removeChild(n.name, version);\n    } finally {\n      multiLock.unlock();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#removeData(String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#removeData(String,int).mjava","sourceNew":"  @Override\n  public void removeData(String path, int version) throws NoSuchElementException, NotEmptyException, BadVersionException, IOException {\n    multiLock.lock();\n    Node parent;\n    Node n;\n    try {\n      n = traverse(path, false, CreateMode.PERSISTENT);\n      if (n == null) {\n        throw new NoSuchElementException(path);\n      }\n      parent = n.parent;\n      if (parent == null) {\n        throw new IOException(\"Cannot remove root node\");\n      }\n      if (!n.children.isEmpty()) {\n        throw new NotEmptyException(path);\n      }\n    } finally {\n      multiLock.unlock();\n    }\n    \n    // outside the lock to avoid deadlock with update lock\n    parent.removeChild(n.name, version);\n  }\n\n","sourceOld":"  @Override\n  public void removeData(String path, int version) throws NoSuchElementException, NotEmptyException, BadVersionException, IOException {\n    multiLock.lock();\n    Node parent;\n    Node n;\n    try {\n      n = traverse(path, false, CreateMode.PERSISTENT);\n      if (n == null) {\n        throw new NoSuchElementException(path);\n      }\n      parent = n.parent;\n      if (parent == null) {\n        throw new IOException(\"Cannot remove root node\");\n      }\n      if (!n.children.isEmpty()) {\n        throw new NotEmptyException(path);\n      }\n    } finally {\n      multiLock.unlock();\n    }\n    \n    // outside the lock to avoid deadlock with update lock\n    parent.removeChild(n.name, version);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef2d9523abb6906938bf5685963ce2d30d541cd7":["01e3e55745c6667006f67aaa604466b9974425f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["ef2d9523abb6906938bf5685963ce2d30d541cd7"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"01e3e55745c6667006f67aaa604466b9974425f4":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"ef2d9523abb6906938bf5685963ce2d30d541cd7":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["01e3e55745c6667006f67aaa604466b9974425f4"],"01e3e55745c6667006f67aaa604466b9974425f4":["ef2d9523abb6906938bf5685963ce2d30d541cd7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}