{"path":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"/dev/null","sourceNew":"  private void createNewCollection(String collection)\n      throws MalformedURLException, SolrServerException, IOException {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    for (SolrServer client : clients) {\n      CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n          ((CommonsHttpSolrServer) client).getBaseURL());\n      Create createCmd = new Create();\n      createCmd.setCoreName(collection);\n      createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator + collection);\n      server.request(createCmd);\n      collectionClients.add(createNewSolrServer(collection,\n          ((CommonsHttpSolrServer) client).getBaseURL()));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["99a533edf1b9ea2c1b85e012d6e826545389e9c8","e19067e820b148e8dc0b240da4f2771cf7b68252"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"/dev/null","sourceNew":"  private void createNewCollection(String collection)\n      throws MalformedURLException, SolrServerException, IOException {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    for (SolrServer client : clients) {\n      CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n          ((CommonsHttpSolrServer) client).getBaseURL());\n      Create createCmd = new Create();\n      createCmd.setCoreName(collection);\n      createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator + collection);\n      server.request(createCmd);\n      collectionClients.add(createNewSolrServer(collection,\n          ((CommonsHttpSolrServer) client).getBaseURL()));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"/dev/null","sourceNew":"  private void createNewCollection(String collection)\n      throws MalformedURLException, SolrServerException, IOException {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    for (SolrServer client : clients) {\n      CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n          ((CommonsHttpSolrServer) client).getBaseURL());\n      Create createCmd = new Create();\n      createCmd.setCoreName(collection);\n      createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator + collection);\n      server.request(createCmd);\n      collectionClients.add(createNewSolrServer(collection,\n          ((CommonsHttpSolrServer) client).getBaseURL()));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99a533edf1b9ea2c1b85e012d6e826545389e9c8","date":1329256696,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(String collection)\n      throws MalformedURLException, SolrServerException, IOException {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (SolrServer client : clients) {\n      CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n          ((CommonsHttpSolrServer) client).getBaseURL());\n      Create createCmd = new Create();\n      createCmd.setCoreName(collection);\n      createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator + collection + unique++);\n      server.request(createCmd);\n      collectionClients.add(createNewSolrServer(collection,\n          ((CommonsHttpSolrServer) client).getBaseURL()));\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(String collection)\n      throws MalformedURLException, SolrServerException, IOException {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    for (SolrServer client : clients) {\n      CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n          ((CommonsHttpSolrServer) client).getBaseURL());\n      Create createCmd = new Create();\n      createCmd.setCoreName(collection);\n      createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator + collection);\n      server.request(createCmd);\n      collectionClients.add(createNewSolrServer(collection,\n          ((CommonsHttpSolrServer) client).getBaseURL()));\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8","date":1329853856,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection)\n      throws MalformedURLException, SolrServerException, IOException, InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        public Object call() {\n          CommonsHttpSolrServer server;\n          try {\n            server = new CommonsHttpSolrServer(\n                ((CommonsHttpSolrServer) client).getBaseURL());\n            \n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection,\n          ((CommonsHttpSolrServer) client).getBaseURL()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(String collection)\n      throws MalformedURLException, SolrServerException, IOException {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (SolrServer client : clients) {\n      CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n          ((CommonsHttpSolrServer) client).getBaseURL());\n      Create createCmd = new Create();\n      createCmd.setCoreName(collection);\n      createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator + collection + unique++);\n      server.request(createCmd);\n      collectionClients.add(createNewSolrServer(collection,\n          ((CommonsHttpSolrServer) client).getBaseURL()));\n    }\n  }\n\n","bugFix":null,"bugIntro":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection)\n      throws MalformedURLException, SolrServerException, IOException, InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        public Object call() {\n          CommonsHttpSolrServer server;\n          try {\n            server = new CommonsHttpSolrServer(\n                ((CommonsHttpSolrServer) client).getBaseURL());\n            \n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection,\n          ((CommonsHttpSolrServer) client).getBaseURL()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(String collection)\n      throws MalformedURLException, SolrServerException, IOException {\n    List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (SolrServer client : clients) {\n      CommonsHttpSolrServer server = new CommonsHttpSolrServer(\n          ((CommonsHttpSolrServer) client).getBaseURL());\n      Create createCmd = new Create();\n      createCmd.setCoreName(collection);\n      createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator + collection + unique++);\n      server.request(createCmd);\n      collectionClients.add(createNewSolrServer(collection,\n          ((CommonsHttpSolrServer) client).getBaseURL()));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7321b77a7bc3edfebd637ef273e9dfaa9969eba6","date":1333023097,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection)\n      throws MalformedURLException, SolrServerException, IOException, InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(\n                ((HttpSolrServer) client).getBaseURL());\n            \n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection,\n          ((HttpSolrServer) client).getBaseURL()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection)\n      throws MalformedURLException, SolrServerException, IOException, InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        public Object call() {\n          CommonsHttpSolrServer server;\n          try {\n            server = new CommonsHttpSolrServer(\n                ((CommonsHttpSolrServer) client).getBaseURL());\n            \n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection,\n          ((CommonsHttpSolrServer) client).getBaseURL()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["e19067e820b148e8dc0b240da4f2771cf7b68252"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(\n                ((HttpSolrServer) client).getBaseURL());\n            \n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection,\n          ((HttpSolrServer) client).getBaseURL()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection)\n      throws MalformedURLException, SolrServerException, IOException, InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(\n                ((HttpSolrServer) client).getBaseURL());\n            \n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection,\n          ((HttpSolrServer) client).getBaseURL()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":["d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(\n                ((HttpSolrServer) client).getBaseURL());\n            \n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection,\n          ((HttpSolrServer) client).getBaseURL()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection)\n      throws MalformedURLException, SolrServerException, IOException, InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(\n                ((HttpSolrServer) client).getBaseURL());\n            \n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection,\n          ((HttpSolrServer) client).getBaseURL()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e19067e820b148e8dc0b240da4f2771cf7b68252","date":1347730768,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            \n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(\n                ((HttpSolrServer) client).getBaseURL());\n            \n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection,\n          ((HttpSolrServer) client).getBaseURL()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f","7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            \n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            \n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a69439d0df009e0bb0038d1e427159f449dd670d","date":1355704683,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(30000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            \n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(30000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            \n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(30000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique));\n\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(30000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(30000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique));\n\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(30000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique);\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91e069c492cf4895697ef7b81df0ffb9a8bd4b48","date":1382134253,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(30000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique));\n\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(30000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique));\n\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Request> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":["d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c3e46d3417c353d7be14509cfab11b315927fe","date":1382292560,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(60000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique));\n\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(30000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique));\n\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d750082a4223c20902ef11ff6a9831d55738ea4","date":1382309916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server = null;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(60000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique));\n\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          } finally {\n            if (server != null) {\n              server.shutdown();\n            }\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(60000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique));\n\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server = null;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(60000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique));\n\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          } finally {\n            if (server != null) {\n              server.shutdown();\n            }\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<SolrServer>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server = null;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(60000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique));\n\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          } finally {\n            if (server != null) {\n              server.shutdown();\n            }\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1f22cfa77230b5f05b7784feae5367f6bbb488","date":1395968145,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server = null;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(60000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(createTempDir(collection).getAbsolutePath()));\n            server.request(createCmd);\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          } finally {\n            if (server != null) {\n              server.shutdown();\n            }\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server = null;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(60000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique));\n\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          } finally {\n            if (server != null) {\n              server.shutdown();\n            }\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server = null;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(60000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(createTempDir(collection).getAbsolutePath()));\n            server.request(createCmd);\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          } finally {\n            if (server != null) {\n              server.shutdown();\n            }\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server = null;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(60000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(dataDir.getAbsolutePath() + File.separator\n                + collection + frozeUnique));\n\n            server.request(createCmd);\n\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          } finally {\n            if (server != null) {\n              server.shutdown();\n            }\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server = null;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(60000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n            server.request(createCmd);\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          } finally {\n            if (server != null) {\n              server.shutdown();\n            }\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server = null;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(60000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(createTempDir(collection).getAbsolutePath()));\n            server.request(createCmd);\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          } finally {\n            if (server != null) {\n              server.shutdown();\n            }\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrClient client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrClient) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrClient) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrClient client = null;\n          try {\n            client = new HttpSolrClient(baseUrl);\n            client.setConnectionTimeout(15000);\n            client.setSoTimeout(60000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n            client.request(createCmd);\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          } finally {\n            if (client != null) {\n              client.shutdown();\n            }\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrServer> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrServer client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrServer) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrServer) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrServer server = null;\n          try {\n            server = new HttpSolrServer(baseUrl);\n            server.setConnectionTimeout(15000);\n            server.setSoTimeout(60000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n            server.request(createCmd);\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          } finally {\n            if (server != null) {\n              server.shutdown();\n            }\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrServer(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrClient client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrClient) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrClient) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n\n          try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n            client.setConnectionTimeout(15000);\n            client.setSoTimeout(60000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n            client.request(createCmd);\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrClient client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrClient) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrClient) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n          HttpSolrClient client = null;\n          try {\n            client = new HttpSolrClient(baseUrl);\n            client.setConnectionTimeout(15000);\n            client.setSoTimeout(60000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n            client.request(createCmd);\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          } finally {\n            if (client != null) {\n              client.shutdown();\n            }\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043df2e9a841864922c32756a44c939ed768cb89","date":1459876536,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrClient client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrClient) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrClient) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = () -> {\n\n        try (HttpSolrClient client1 = new HttpSolrClient(baseUrl)) {\n          client1.setConnectionTimeout(15000);\n          client1.setSoTimeout(60000);\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection);\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          client1.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrClient client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrClient) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrClient) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n\n          try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n            client.setConnectionTimeout(15000);\n            client.setSoTimeout(60000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n            client.request(createCmd);\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6284684320a9808c41a5e43de958b2da22f89bd","date":1459977490,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrClient client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrClient) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrClient) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = () -> {\n\n        try (HttpSolrClient client1 = new HttpSolrClient(baseUrl)) {\n          client1.setConnectionTimeout(15000);\n          client1.setSoTimeout(60000);\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection);\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          client1.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrClient client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrClient) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrClient) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = new Callable() {\n        @Override\n        public Object call() {\n\n          try (HttpSolrClient client = new HttpSolrClient(baseUrl)) {\n            client.setConnectionTimeout(15000);\n            client.setSoTimeout(60000);\n            Create createCmd = new Create();\n            createCmd.setCoreName(collection);\n            createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n            client.request(createCmd);\n          } catch (Exception e) {\n            e.printStackTrace();\n            //fails\n          }\n          return null;\n        }\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrClient client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrClient) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrClient) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = () -> {\n\n        try (HttpSolrClient client1 = getHttpSolrClient(baseUrl)) {\n          client1.setConnectionTimeout(15000);\n          client1.setSoTimeout(60000);\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection);\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          client1.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrClient client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrClient) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrClient) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = () -> {\n\n        try (HttpSolrClient client1 = new HttpSolrClient(baseUrl)) {\n          client1.setConnectionTimeout(15000);\n          client1.setSoTimeout(60000);\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection);\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          client1.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrClient client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrClient) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrClient) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = () -> {\n\n        try (HttpSolrClient client1 = getHttpSolrClient(baseUrl)) {\n          client1.setConnectionTimeout(15000);\n          client1.setSoTimeout(60000);\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection);\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          client1.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrClient client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrClient) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrClient) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = () -> {\n\n        try (HttpSolrClient client1 = new HttpSolrClient(baseUrl)) {\n          client1.setConnectionTimeout(15000);\n          client1.setSoTimeout(60000);\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection);\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          client1.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    try {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(collection, 2, 1)\n          .setCreateNodeSet(\"\")\n          .process(cloudClient).getStatus());\n    } catch (Exception e) {\n      e.printStackTrace();\n      //fails\n    }\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0 ;\n    for (final JettySolrRunner runner : jettys) {\n      unique++;\n      final int frozeUnique = unique;\n      Callable call = () -> {\n\n        try {\n          assertTrue(CollectionAdminRequest\n              .addReplicaToShard(collection, \"shard\"+ ((frozeUnique%2)+1))\n              .setNode(runner.getNodeName())\n              .process(cloudClient).isSuccess());\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, runner.getBaseUrl().toString()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrClient client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrClient) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrClient) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = () -> {\n\n        try (HttpSolrClient client1 = getHttpSolrClient(baseUrl)) {\n          client1.setConnectionTimeout(15000);\n          client1.setSoTimeout(60000);\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection);\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          client1.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    try {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(collection, 2, 1)\n          .setCreateNodeSet(\"\")\n          .process(cloudClient).getStatus());\n    } catch (Exception e) {\n      e.printStackTrace();\n      //fails\n    }\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0 ;\n    for (final JettySolrRunner runner : jettys) {\n      unique++;\n      final int frozeUnique = unique;\n      Callable call = () -> {\n\n        try {\n          assertTrue(CollectionAdminRequest\n              .addReplicaToShard(collection, \"shard\"+ ((frozeUnique%2)+1))\n              .setNode(runner.getNodeName())\n              .process(cloudClient).isSuccess());\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, runner.getBaseUrl().toString()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrClient client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrClient) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrClient) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = () -> {\n\n        try (HttpSolrClient client1 = getHttpSolrClient(baseUrl)) {\n          client1.setConnectionTimeout(15000);\n          client1.setSoTimeout(60000);\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection);\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          client1.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"197bbedf08450ade98a11f4a0001448059666bec","date":1498534625,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    try {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(collection, \"conf1\", 2, 1)\n          .setCreateNodeSet(\"\")\n          .process(cloudClient).getStatus());\n    } catch (Exception e) {\n      e.printStackTrace();\n      //fails\n    }\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0 ;\n    for (final JettySolrRunner runner : jettys) {\n      unique++;\n      final int frozeUnique = unique;\n      Callable call = () -> {\n\n        try {\n          assertTrue(CollectionAdminRequest\n              .addReplicaToShard(collection, \"shard\"+ ((frozeUnique%2)+1))\n              .setNode(runner.getNodeName())\n              .process(cloudClient).isSuccess());\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, runner.getBaseUrl().toString()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    try {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(collection, 2, 1)\n          .setCreateNodeSet(\"\")\n          .process(cloudClient).getStatus());\n    } catch (Exception e) {\n      e.printStackTrace();\n      //fails\n    }\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0 ;\n    for (final JettySolrRunner runner : jettys) {\n      unique++;\n      final int frozeUnique = unique;\n      Callable call = () -> {\n\n        try {\n          assertTrue(CollectionAdminRequest\n              .addReplicaToShard(collection, \"shard\"+ ((frozeUnique%2)+1))\n              .setNode(runner.getNodeName())\n              .process(cloudClient).isSuccess());\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, runner.getBaseUrl().toString()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","date":1498540685,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    try {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(collection, \"conf1\", 2, 1)\n          .setCreateNodeSet(\"\")\n          .process(cloudClient).getStatus());\n    } catch (Exception e) {\n      e.printStackTrace();\n      //fails\n    }\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0 ;\n    for (final JettySolrRunner runner : jettys) {\n      unique++;\n      final int frozeUnique = unique;\n      Callable call = () -> {\n\n        try {\n          assertTrue(CollectionAdminRequest\n              .addReplicaToShard(collection, \"shard\"+ ((frozeUnique%2)+1))\n              .setNode(runner.getNodeName())\n              .process(cloudClient).isSuccess());\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, runner.getBaseUrl().toString()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    try {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(collection, 2, 1)\n          .setCreateNodeSet(\"\")\n          .process(cloudClient).getStatus());\n    } catch (Exception e) {\n      e.printStackTrace();\n      //fails\n    }\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0 ;\n    for (final JettySolrRunner runner : jettys) {\n      unique++;\n      final int frozeUnique = unique;\n      Callable call = () -> {\n\n        try {\n          assertTrue(CollectionAdminRequest\n              .addReplicaToShard(collection, \"shard\"+ ((frozeUnique%2)+1))\n              .setNode(runner.getNodeName())\n              .process(cloudClient).isSuccess());\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, runner.getBaseUrl().toString()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  private void createNewCollection(final String collection) throws InterruptedException {\n    try {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(collection, \"conf1\", 2, 1)\n          .setCreateNodeSet(\"\")\n          .process(cloudClient).getStatus());\n    } catch (Exception e) {\n      e.printStackTrace();\n      //fails\n    }\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0 ;\n    for (final JettySolrRunner runner : jettys) {\n      unique++;\n      final int frozeUnique = unique;\n      Callable call = () -> {\n\n        try {\n          assertTrue(CollectionAdminRequest\n              .addReplicaToShard(collection, \"shard\"+ ((frozeUnique%2)+1))\n              .setNode(runner.getNodeName())\n              .process(cloudClient).isSuccess());\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, runner.getBaseUrl().toString()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0;\n    for (final SolrClient client : clients) {\n      unique++;\n      final String baseUrl = ((HttpSolrClient) client).getBaseURL()\n          .substring(\n              0,\n              ((HttpSolrClient) client).getBaseURL().length()\n                  - DEFAULT_COLLECTION.length() -1);\n      final int frozeUnique = unique;\n      Callable call = () -> {\n\n        try (HttpSolrClient client1 = getHttpSolrClient(baseUrl)) {\n          client1.setConnectionTimeout(15000);\n          client1.setSoTimeout(60000);\n          Create createCmd = new Create();\n          createCmd.setCoreName(collection);\n          createCmd.setDataDir(getDataDir(createTempDir(collection).toFile().getAbsolutePath()));\n          client1.request(createCmd);\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, baseUrl));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#createNewCollection(String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void createNewCollection(final String collection) throws InterruptedException {\n    try {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(collection, \"conf1\", 2, 1)\n          .setCreateNodeSet(\"\")\n          .process(cloudClient).getStatus());\n    } catch (Exception e) {\n      e.printStackTrace();\n      //fails\n    }\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0 ;\n    for (final JettySolrRunner runner : jettys) {\n      unique++;\n      final int frozeUnique = unique;\n      @SuppressWarnings({\"rawtypes\"})\n      Callable call = () -> {\n\n        try {\n          assertTrue(CollectionAdminRequest\n              .addReplicaToShard(collection, \"shard\"+ ((frozeUnique%2)+1))\n              .setNode(runner.getNodeName())\n              .process(cloudClient).isSuccess());\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, runner.getBaseUrl().toString()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","sourceOld":"  private void createNewCollection(final String collection) throws InterruptedException {\n    try {\n      assertEquals(0, CollectionAdminRequest\n          .createCollection(collection, \"conf1\", 2, 1)\n          .setCreateNodeSet(\"\")\n          .process(cloudClient).getStatus());\n    } catch (Exception e) {\n      e.printStackTrace();\n      //fails\n    }\n    final List<SolrClient> collectionClients = new ArrayList<>();\n    otherCollectionClients.put(collection, collectionClients);\n    int unique = 0 ;\n    for (final JettySolrRunner runner : jettys) {\n      unique++;\n      final int frozeUnique = unique;\n      Callable call = () -> {\n\n        try {\n          assertTrue(CollectionAdminRequest\n              .addReplicaToShard(collection, \"shard\"+ ((frozeUnique%2)+1))\n              .setNode(runner.getNodeName())\n              .process(cloudClient).isSuccess());\n        } catch (Exception e) {\n          e.printStackTrace();\n          //fails\n        }\n        return null;\n      };\n     \n      collectionClients.add(createNewSolrClient(collection, runner.getBaseUrl().toString()));\n      pending.add(completionService.submit(call));\n      while (pending != null && pending.size() > 0) {\n        \n        Future<Object> future = completionService.take();\n        if (future == null) return;\n        pending.remove(future);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["e19067e820b148e8dc0b240da4f2771cf7b68252","a69439d0df009e0bb0038d1e427159f449dd670d"],"197bbedf08450ade98a11f4a0001448059666bec":["a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a69439d0df009e0bb0038d1e427159f449dd670d","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["99a533edf1b9ea2c1b85e012d6e826545389e9c8","d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["b6284684320a9808c41a5e43de958b2da22f89bd"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a69439d0df009e0bb0038d1e427159f449dd670d":["7530de27b87b961b51f01bd1299b7004d46e8823"],"bafca15d8e408346a67f4282ad1143b88023893b":["f4abec28b874149a7223e32cc7a01704c27790de"],"e98520789adb1d5ad05afb4956eca0944a929688":["28288370235ed02234a64753cdbf0c6ec096304a"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","197bbedf08450ade98a11f4a0001448059666bec"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"99a533edf1b9ea2c1b85e012d6e826545389e9c8":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"043df2e9a841864922c32756a44c939ed768cb89":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"e19067e820b148e8dc0b240da4f2771cf7b68252":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"f4abec28b874149a7223e32cc7a01704c27790de":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"a3c3e46d3417c353d7be14509cfab11b315927fe":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"28288370235ed02234a64753cdbf0c6ec096304a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","197bbedf08450ade98a11f4a0001448059666bec"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a69439d0df009e0bb0038d1e427159f449dd670d"],"b6284684320a9808c41a5e43de958b2da22f89bd":["cc3b13b430571c2e169f98fe38e1e7666f88522d","043df2e9a841864922c32756a44c939ed768cb89"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["7321b77a7bc3edfebd637ef273e9dfaa9969eba6","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"2d750082a4223c20902ef11ff6a9831d55738ea4":["a3c3e46d3417c353d7be14509cfab11b315927fe"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["b6284684320a9808c41a5e43de958b2da22f89bd","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8":["99a533edf1b9ea2c1b85e012d6e826545389e9c8"],"7530de27b87b961b51f01bd1299b7004d46e8823":["e19067e820b148e8dc0b240da4f2771cf7b68252"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"197bbedf08450ade98a11f4a0001448059666bec":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","28288370235ed02234a64753cdbf0c6ec096304a"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["f4abec28b874149a7223e32cc7a01704c27790de"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a69439d0df009e0bb0038d1e427159f449dd670d":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["a3c3e46d3417c353d7be14509cfab11b315927fe"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["043df2e9a841864922c32756a44c939ed768cb89","b6284684320a9808c41a5e43de958b2da22f89bd"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["e19067e820b148e8dc0b240da4f2771cf7b68252","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"99a533edf1b9ea2c1b85e012d6e826545389e9c8":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","bb1f22cfa77230b5f05b7784feae5367f6bbb488"],"043df2e9a841864922c32756a44c939ed768cb89":["b6284684320a9808c41a5e43de958b2da22f89bd"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["197bbedf08450ade98a11f4a0001448059666bec","b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"bb1f22cfa77230b5f05b7784feae5367f6bbb488":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"7321b77a7bc3edfebd637ef273e9dfaa9969eba6":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"e19067e820b148e8dc0b240da4f2771cf7b68252":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"f4abec28b874149a7223e32cc7a01704c27790de":["bafca15d8e408346a67f4282ad1143b88023893b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4"],"28288370235ed02234a64753cdbf0c6ec096304a":["e98520789adb1d5ad05afb4956eca0944a929688"],"a3c3e46d3417c353d7be14509cfab11b315927fe":["2d750082a4223c20902ef11ff6a9831d55738ea4"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"b6284684320a9808c41a5e43de958b2da22f89bd":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","99a533edf1b9ea2c1b85e012d6e826545389e9c8","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"2d750082a4223c20902ef11ff6a9831d55738ea4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"d90ea89f2d30bb2f567b801c0ba81e1c2f3dc9c8":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","7321b77a7bc3edfebd637ef273e9dfaa9969eba6"],"7530de27b87b961b51f01bd1299b7004d46e8823":["a69439d0df009e0bb0038d1e427159f449dd670d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","37a0f60745e53927c4c876cfe5b5a58170f0646c","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0d22ac6a4146774c1bc8400160fc0b6150294e92","fbedfa79ef95dc2b5b49f7d54d80e0b47867f9b4","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}