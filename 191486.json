{"path":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Term).mjava","commits":[{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Term).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns {@link DocsEnum} for the specified term.\n   *  This will return null if either the field or\n   *  term does not exist. \n   *  @see TermsEnum#docs(Bits, DocsEnum) */\n  public final DocsEnum termDocsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes(), true)) {\n          return termsEnum.docs(getLiveDocs(), null);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Term).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified term.\n   *  This will return null if either the field or\n   *  term does not exist. \n   *  @see TermsEnum#docs(Bits, DocsEnum) */\n  public final DocsEnum termDocsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum.docs(getLiveDocs(), null);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified term.\n   *  This will return null if either the field or\n   *  term does not exist. \n   *  @see TermsEnum#docs(Bits, DocsEnum) */\n  public final DocsEnum termDocsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes(), true)) {\n          return termsEnum.docs(getLiveDocs(), null);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":["8028ab7a24273833d53d35eb160dba5b57283cf5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Term).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified term.\n   *  This will return null if either the field or\n   *  term does not exist. \n   *  @see TermsEnum#docs(Bits, DocsEnum) */\n  public final DocsEnum termDocsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum.docs(getLiveDocs(), null);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified term.\n   *  This will return null if either the field or\n   *  term does not exist. \n   *  @see TermsEnum#docs(Bits, DocsEnum) */\n  public final DocsEnum termDocsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes(), true)) {\n          return termsEnum.docs(getLiveDocs(), null);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7704e64a78bc9f245268f5c002d1e66b6c9f309f","date":1400878491,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Term).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified term.\n   *  This will return null if either the field or\n   *  term does not exist.\n   *  @see TermsEnum#docs(Bits, DocsEnum) */\n  public final DocsEnum termDocsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum.docs(getLiveDocs(), null);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified term.\n   *  This will return null if either the field or\n   *  term does not exist. \n   *  @see TermsEnum#docs(Bits, DocsEnum) */\n  public final DocsEnum termDocsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum.docs(getLiveDocs(), null);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LeafReader#termDocsEnum(Term).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AtomicReader#termDocsEnum(Term).mjava","sourceNew":"  /** Returns {@link DocsEnum} for the specified term.\n   *  This will return null if either the field or\n   *  term does not exist.\n   *  @see TermsEnum#docs(Bits, DocsEnum) */\n  public final DocsEnum termDocsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum.docs(getLiveDocs(), null);\n        }\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /** Returns {@link DocsEnum} for the specified term.\n   *  This will return null if either the field or\n   *  term does not exist.\n   *  @see TermsEnum#docs(Bits, DocsEnum) */\n  public final DocsEnum termDocsEnum(Term term) throws IOException {\n    assert term.field() != null;\n    assert term.bytes() != null;\n    final Fields fields = fields();\n    if (fields != null) {\n      final Terms terms = fields.terms(term.field());\n      if (terms != null) {\n        final TermsEnum termsEnum = terms.iterator(null);\n        if (termsEnum.seekExact(term.bytes())) {\n          return termsEnum.docs(getLiveDocs(), null);\n        }\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7704e64a78bc9f245268f5c002d1e66b6c9f309f":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6a0e3c1c21aac8ecf75706605133012833585c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["7704e64a78bc9f245268f5c002d1e66b6c9f309f"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"7704e64a78bc9f245268f5c002d1e66b6c9f309f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["7704e64a78bc9f245268f5c002d1e66b6c9f309f"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}