{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testInvalidUTF16().mjava","commits":[{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new TestIndexWriter.StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new TestIndexWriter.StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new TestIndexWriter.StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new TestIndexWriter.StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], TextField.TYPE_STORED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new TestIndexWriter.StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], Field.Store.YES, Field.Index.ANALYZED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new TestIndexWriter.StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], TextField.TYPE_STORED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new TestIndexWriter.StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], TextField.TYPE_STORED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new TestIndexWriter.StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], TextField.TYPE_STORED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new TestIndexWriter.StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], TextField.TYPE_STORED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new TestIndexWriter.StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], TextField.TYPE_STORED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new TestIndexWriter.StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], TextField.TYPE_STORED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir, true);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testInvalidUTF16().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testInvalidUTF16().mjava","sourceNew":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new TestIndexWriter.StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], TextField.TYPE_STORED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testInvalidUTF16() throws Throwable {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new TestIndexWriter.StringSplitAnalyzer()));\n    Document doc = new Document();\n\n    final int count = utf8Data.length/2;\n    for(int i=0;i<count;i++)\n      doc.add(newField(\"f\" + i, utf8Data[2*i], TextField.TYPE_STORED));\n    w.addDocument(doc);\n    w.close();\n\n    IndexReader ir = IndexReader.open(dir);\n    Document doc2 = ir.document(0);\n    for(int i=0;i<count;i++) {\n      assertEquals(\"field \" + i + \" was not indexed correctly\", 1, ir.docFreq(new Term(\"f\"+i, utf8Data[2*i+1])));\n      assertEquals(\"field \" + i + \" is incorrect\", utf8Data[2*i+1], doc2.getField(\"f\"+i).stringValue());\n    }\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["1509f151d7692d84fae414b2b799ac06ba60fcb4","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["1509f151d7692d84fae414b2b799ac06ba60fcb4","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}