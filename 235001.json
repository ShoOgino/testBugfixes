{"path":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testOneMatchQuery().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testOneMatchQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testOneMatchQuery().mjava","sourceNew":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    assertSame(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE, q.getRewriteMethod());\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","sourceOld":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    assertSame(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE, q.getRewriteMethod());\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d71f97edfefd34211f08b56b3190ee1d0959c252","date":1342638504,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testOneMatchQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testOneMatchQuery().mjava","sourceNew":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","sourceOld":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    assertSame(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE, q.getRewriteMethod());\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testOneMatchQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testOneMatchQuery().mjava","sourceNew":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","sourceOld":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    assertSame(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE, q.getRewriteMethod());\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testOneMatchQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testOneMatchQuery().mjava","sourceNew":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","sourceOld":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    assertSame(MultiTermQuery.CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE, q.getRewriteMethod());\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testOneMatchQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testOneMatchQuery().mjava","sourceNew":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    LegacyNumericRangeQuery<Integer> q = LegacyNumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","sourceOld":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    NumericRangeQuery<Integer> q = NumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testOneMatchQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testOneMatchQuery().mjava","sourceNew":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    LegacyNumericRangeQuery<Integer> q = LegacyNumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","sourceOld":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    LegacyNumericRangeQuery<Integer> q = LegacyNumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testOneMatchQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testOneMatchQuery().mjava","sourceNew":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    LegacyNumericRangeQuery<Integer> q = LegacyNumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","sourceOld":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    LegacyNumericRangeQuery<Integer> q = LegacyNumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testOneMatchQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testOneMatchQuery().mjava","sourceNew":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    LegacyNumericRangeQuery<Integer> q = LegacyNumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","sourceOld":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    LegacyNumericRangeQuery<Integer> q = LegacyNumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/legacy/TestNumericRangeQuery32#testOneMatchQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery32#testOneMatchQuery().mjava","sourceNew":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    LegacyNumericRangeQuery<Integer> q = LegacyNumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","sourceOld":"  @Test\n  public void testOneMatchQuery() throws Exception {\n    LegacyNumericRangeQuery<Integer> q = LegacyNumericRangeQuery.newIntRange(\"ascfield8\", 8, 1000, 1000, true, true);\n    TopDocs topDocs = searcher.search(q, noDocs);\n    ScoreDoc[] sd = topDocs.scoreDocs;\n    assertNotNull(sd);\n    assertEquals(\"Score doc count\", 1, sd.length );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d71f97edfefd34211f08b56b3190ee1d0959c252":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["770342641f7b505eaa8dccdc666158bff2419109","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"aba371508186796cc6151d8223a5b4e16d02e26e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d71f97edfefd34211f08b56b3190ee1d0959c252"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d71f97edfefd34211f08b56b3190ee1d0959c252"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["770342641f7b505eaa8dccdc666158bff2419109"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["770342641f7b505eaa8dccdc666158bff2419109","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["d71f97edfefd34211f08b56b3190ee1d0959c252"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"d71f97edfefd34211f08b56b3190ee1d0959c252":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","770342641f7b505eaa8dccdc666158bff2419109"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d71f97edfefd34211f08b56b3190ee1d0959c252","aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}