{"path":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#updateEntry(ServerBaseEntry).mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#updateEntry(ServerBaseEntry).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#updateEntry(ServerBaseEntry).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#updateEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry updateEntry(ServerBaseEntry entry) throws StorageException {\n\n        if (entry == null)\n            throw new StorageException(\"entry is null\");\n        if(entry.getId() == null)\n            throw new StorageException(\"entry id is null\");\n        if(entry.getServiceConfig() == null)\n            throw new StorageException(\"service config is not set -- null\");\n        if(entry.getFeedId() == null)\n            throw new StorageException(\"feed id is null\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"update entry \" + entry.getId() + \" -- feed: \"\n                    + entry.getFeedId());\n        StorageModifier modifier = this.controller.getStorageModifier();\n        ReferenceCounter<StorageQuery> query = this.controller.getStorageQuery();\n        // try to set concurrency Lock\n        String key = entry.getId();\n        setLock(key);\n        try {\n            \n            \n            if(query.get().isEntryStored(entry.getId(),entry.getFeedId())){\n                \n                if(query.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion())){\n                    entry.setVersion(entry.getVersion()+1);\n                    StorageEntryWrapper wrapper = new StorageEntryWrapper(entry,\n                            StorageOperation.UPDATE);  \n                    modifier.updateEntry(wrapper);\n                }else\n                    throw new ModificationConflictException(\"The entry version does not match -- entry \"+entry.getId()+\" feed:\"+entry.getFeedId()+\" version: \"+entry.getVersion());\n              \n            }else\n                throw new ResourceNotFoundException(\"Entry for entry id: \"+entry.getId()+\" is not stored\");\n            \n        } catch (IOException e) {\n            LOG.error(\"Can't update entry for feedID: \" + entry.getFeedId()\n                    + \"; entryId: \" + entry.getId() + \" -- \" + e.getMessage(),\n                    e);\n            StorageException ex = new StorageException(\"Can't update Entry -- \"\n                    + e.getMessage(), e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n\n        }\n\n        finally{\n            if(query != null)\n                query.decrementRef();\n            // release lock for concurrency\n            releaseLock(key);\n        }\n\n        return entry.getEntry();\n\n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#updateEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry updateEntry(ServerBaseEntry entry) throws StorageException {\n\n        if (entry == null)\n            throw new StorageException(\"entry is null\");\n        if(entry.getId() == null)\n            throw new StorageException(\"entry id is null\");\n        if(entry.getServiceConfig() == null)\n            throw new StorageException(\"service config is not set -- null\");\n        if(entry.getFeedId() == null)\n            throw new StorageException(\"feed id is null\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"update entry \" + entry.getId() + \" -- feed: \"\n                    + entry.getFeedId());\n        StorageModifier modifier = this.controller.getStorageModifier();\n        ReferenceCounter<StorageQuery> query = this.controller.getStorageQuery();\n        // try to set concurrency Lock\n        String key = entry.getId();\n        setLock(key);\n        try {\n            \n            \n            if(query.get().isEntryStored(entry.getId(),entry.getFeedId())){\n                \n                if(query.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion())){\n                    entry.setVersion(entry.getVersion()+1);\n                    StorageEntryWrapper wrapper = new StorageEntryWrapper(entry,\n                            StorageOperation.UPDATE);  \n                    modifier.updateEntry(wrapper);\n                }else\n                    throw new ModificationConflictException(\"The entry version does not match -- entry \"+entry.getId()+\" feed:\"+entry.getFeedId()+\" version: \"+entry.getVersion());\n              \n            }else\n                throw new ResourceNotFoundException(\"Entry for entry id: \"+entry.getId()+\" is not stored\");\n            \n        } catch (IOException e) {\n            LOG.error(\"Can't update entry for feedID: \" + entry.getFeedId()\n                    + \"; entryId: \" + entry.getId() + \" -- \" + e.getMessage(),\n                    e);\n            StorageException ex = new StorageException(\"Can't update Entry -- \"\n                    + e.getMessage(), e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n\n        }\n\n        finally{\n            if(query != null)\n                query.decrementRef();\n            // release lock for concurrency\n            releaseLock(key);\n        }\n\n        return entry.getEntry();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageImplementation#updateEntry(ServerBaseEntry).mjava","sourceNew":null,"sourceOld":"    /**\n     * @see org.apache.lucene.gdata.storage.Storage#updateEntry(org.apache.lucene.gdata.data.ServerBaseEntry)\n     */\n    public BaseEntry updateEntry(ServerBaseEntry entry) throws StorageException {\n\n        if (entry == null)\n            throw new StorageException(\"entry is null\");\n        if(entry.getId() == null)\n            throw new StorageException(\"entry id is null\");\n        if(entry.getServiceConfig() == null)\n            throw new StorageException(\"service config is not set -- null\");\n        if(entry.getFeedId() == null)\n            throw new StorageException(\"feed id is null\");\n        if (LOG.isInfoEnabled())\n            LOG.info(\"update entry \" + entry.getId() + \" -- feed: \"\n                    + entry.getFeedId());\n        StorageModifier modifier = this.controller.getStorageModifier();\n        ReferenceCounter<StorageQuery> query = this.controller.getStorageQuery();\n        // try to set concurrency Lock\n        String key = entry.getId();\n        setLock(key);\n        try {\n            \n            \n            if(query.get().isEntryStored(entry.getId(),entry.getFeedId())){\n                \n                if(query.get().checkEntryVersion(entry.getId(),entry.getFeedId(),entry.getVersion())){\n                    entry.setVersion(entry.getVersion()+1);\n                    StorageEntryWrapper wrapper = new StorageEntryWrapper(entry,\n                            StorageOperation.UPDATE);  \n                    modifier.updateEntry(wrapper);\n                }else\n                    throw new ModificationConflictException(\"The entry version does not match -- entry \"+entry.getId()+\" feed:\"+entry.getFeedId()+\" version: \"+entry.getVersion());\n              \n            }else\n                throw new ResourceNotFoundException(\"Entry for entry id: \"+entry.getId()+\" is not stored\");\n            \n        } catch (IOException e) {\n            LOG.error(\"Can't update entry for feedID: \" + entry.getFeedId()\n                    + \"; entryId: \" + entry.getId() + \" -- \" + e.getMessage(),\n                    e);\n            StorageException ex = new StorageException(\"Can't update Entry -- \"\n                    + e.getMessage(), e);\n            ex.setStackTrace(e.getStackTrace());\n            throw ex;\n\n        }\n\n        finally{\n            if(query != null)\n                query.decrementRef();\n            // release lock for concurrency\n            releaseLock(key);\n        }\n\n        return entry.getEntry();\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}