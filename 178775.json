{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getLegacyBinary(FieldInfo).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getLegacyBinary(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private LegacyBinaryDocValues getLegacyBinary(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new LegacyBinaryDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public BytesRef get(int docID) {\n        try {\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getLegacyBinary(FieldInfo).mjava","pathOld":"/dev/null","sourceNew":"  private LegacyBinaryDocValues getLegacyBinary(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new LegacyBinaryDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public BytesRef get(int docID) {\n        try {\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesReader#getLegacyBinary(FieldInfo).mjava","sourceNew":null,"sourceOld":"  private LegacyBinaryDocValues getLegacyBinary(FieldInfo fieldInfo) throws IOException {\n    final OneField field = fields.get(fieldInfo.name);\n\n    // SegmentCoreReaders already verifies this field is\n    // valid:\n    assert field != null;\n\n    final IndexInput in = data.clone();\n    final BytesRefBuilder scratch = new BytesRefBuilder();\n    final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n    return new LegacyBinaryDocValues() {\n      final BytesRefBuilder term = new BytesRefBuilder();\n\n      @Override\n      public BytesRef get(int docID) {\n        try {\n          if (docID < 0 || docID >= maxDoc) {\n            throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n          }\n          in.seek(field.dataStartFilePointer + (9+field.pattern.length() + field.maxLength+2)*docID);\n          SimpleTextUtil.readLine(in, scratch);\n          assert StringHelper.startsWith(scratch.get(), LENGTH);\n          int len;\n          try {\n            len = decoder.parse(new String(scratch.bytes(), LENGTH.length, scratch.length() - LENGTH.length, StandardCharsets.UTF_8)).intValue();\n          } catch (ParseException pe) {\n            throw new CorruptIndexException(\"failed to parse int length\", in, pe);\n          }\n          term.grow(len);\n          term.setLength(len);\n          in.readBytes(term.bytes(), 0, len);\n          return term.get();\n        } catch (IOException ioe) {\n          throw new RuntimeException(ioe);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7558b5077dd4abd457be151475f13b541f4f13e"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}