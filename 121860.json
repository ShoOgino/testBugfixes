{"path":"lucene/replicator/src/java/org/apache/lucene/replicator/IndexReplicationHandler#getSegmentsFile(List[String],boolean).mjava","commits":[{"id":"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4","date":1368446242,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/IndexReplicationHandler#getSegmentsFile(List[String],boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Verifies that the last file is segments_N and fails otherwise. It also\n   * removes and returns the file from the list, because it needs to be handled\n   * last, after all files. This is important in order to guarantee that if a\n   * reader sees the new segments_N, all other segment files are already on\n   * stable storage.\n   * <p>\n   * The reason why the code fails instead of putting segments_N file last is\n   * that this indicates an error in the Revision implementation.\n   */\n  public static String getSegmentsFile(List<String> files, boolean allowEmpty) {\n    if (files.isEmpty()) {\n      if (allowEmpty) {\n        return null;\n      } else {\n        throw new IllegalStateException(\"empty list of files not allowed\");\n      }\n    }\n    \n    String segmentsFile = files.remove(files.size() - 1);\n    if (!segmentsFile.startsWith(IndexFileNames.SEGMENTS) || segmentsFile.equals(IndexFileNames.SEGMENTS_GEN)) {\n      throw new IllegalStateException(\"last file to copy+sync must be segments_N but got \" + segmentsFile\n          + \"; check your Revision implementation!\");\n    }\n    return segmentsFile;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/IndexReplicationHandler#getSegmentsFile(List[String],boolean).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/IndexReplicationHandler#getSegmentsFile(List[String],boolean).mjava","sourceNew":"  /**\n   * Verifies that the last file is segments_N and fails otherwise. It also\n   * removes and returns the file from the list, because it needs to be handled\n   * last, after all files. This is important in order to guarantee that if a\n   * reader sees the new segments_N, all other segment files are already on\n   * stable storage.\n   * <p>\n   * The reason why the code fails instead of putting segments_N file last is\n   * that this indicates an error in the Revision implementation.\n   */\n  public static String getSegmentsFile(List<String> files, boolean allowEmpty) {\n    if (files.isEmpty()) {\n      if (allowEmpty) {\n        return null;\n      } else {\n        throw new IllegalStateException(\"empty list of files not allowed\");\n      }\n    }\n    \n    String segmentsFile = files.remove(files.size() - 1);\n    if (!segmentsFile.startsWith(IndexFileNames.SEGMENTS) || segmentsFile.equals(IndexFileNames.SEGMENTS_GEN)) {\n      throw new IllegalStateException(\"last file to copy+sync must be segments_N but got \" + segmentsFile\n          + \"; check your Revision implementation!\");\n    }\n    return segmentsFile;\n  }\n\n","sourceOld":"  /**\n   * Verifies that the last file is segments_N and fails otherwise. It also\n   * removes and returns the file from the list, because it needs to be handled\n   * last, after all files. This is important in order to guarantee that if a\n   * reader sees the new segments_N, all other segment files are already on\n   * stable storage.\n   * <p>\n   * The reason why the code fails instead of putting segments_N file last is\n   * that this indicates an error in the Revision implementation.\n   */\n  public static String getSegmentsFile(List<String> files, boolean allowEmpty) {\n    if (files.isEmpty()) {\n      if (allowEmpty) {\n        return null;\n      } else {\n        throw new IllegalStateException(\"empty list of files not allowed\");\n      }\n    }\n    \n    String segmentsFile = files.remove(files.size() - 1);\n    if (!segmentsFile.startsWith(IndexFileNames.SEGMENTS) || segmentsFile.equals(IndexFileNames.SEGMENTS_GEN)) {\n      throw new IllegalStateException(\"last file to copy+sync must be segments_N but got \" + segmentsFile\n          + \"; check your Revision implementation!\");\n    }\n    return segmentsFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/IndexReplicationHandler#getSegmentsFile(List[String],boolean).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/IndexReplicationHandler#getSegmentsFile(List[String],boolean).mjava","sourceNew":"  /**\n   * Verifies that the last file is segments_N and fails otherwise. It also\n   * removes and returns the file from the list, because it needs to be handled\n   * last, after all files. This is important in order to guarantee that if a\n   * reader sees the new segments_N, all other segment files are already on\n   * stable storage.\n   * <p>\n   * The reason why the code fails instead of putting segments_N file last is\n   * that this indicates an error in the Revision implementation.\n   */\n  public static String getSegmentsFile(List<String> files, boolean allowEmpty) {\n    if (files.isEmpty()) {\n      if (allowEmpty) {\n        return null;\n      } else {\n        throw new IllegalStateException(\"empty list of files not allowed\");\n      }\n    }\n    \n    String segmentsFile = files.remove(files.size() - 1);\n    if (!segmentsFile.startsWith(IndexFileNames.SEGMENTS) || segmentsFile.equals(IndexFileNames.SEGMENTS_GEN)) {\n      throw new IllegalStateException(\"last file to copy+sync must be segments_N but got \" + segmentsFile\n          + \"; check your Revision implementation!\");\n    }\n    return segmentsFile;\n  }\n\n","sourceOld":"  /**\n   * Verifies that the last file is segments_N and fails otherwise. It also\n   * removes and returns the file from the list, because it needs to be handled\n   * last, after all files. This is important in order to guarantee that if a\n   * reader sees the new segments_N, all other segment files are already on\n   * stable storage.\n   * <p>\n   * The reason why the code fails instead of putting segments_N file last is\n   * that this indicates an error in the Revision implementation.\n   */\n  public static String getSegmentsFile(List<String> files, boolean allowEmpty) {\n    if (files.isEmpty()) {\n      if (allowEmpty) {\n        return null;\n      } else {\n        throw new IllegalStateException(\"empty list of files not allowed\");\n      }\n    }\n    \n    String segmentsFile = files.remove(files.size() - 1);\n    if (!segmentsFile.startsWith(IndexFileNames.SEGMENTS) || segmentsFile.equals(IndexFileNames.SEGMENTS_GEN)) {\n      throw new IllegalStateException(\"last file to copy+sync must be segments_N but got \" + segmentsFile\n          + \"; check your Revision implementation!\");\n    }\n    return segmentsFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46e4a8bdfbafda795ef9c39a2bc2d47095770299","date":1410411846,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/IndexReplicationHandler#getSegmentsFile(List[String],boolean).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/IndexReplicationHandler#getSegmentsFile(List[String],boolean).mjava","sourceNew":"  /**\n   * Verifies that the last file is segments_N and fails otherwise. It also\n   * removes and returns the file from the list, because it needs to be handled\n   * last, after all files. This is important in order to guarantee that if a\n   * reader sees the new segments_N, all other segment files are already on\n   * stable storage.\n   * <p>\n   * The reason why the code fails instead of putting segments_N file last is\n   * that this indicates an error in the Revision implementation.\n   */\n  public static String getSegmentsFile(List<String> files, boolean allowEmpty) {\n    if (files.isEmpty()) {\n      if (allowEmpty) {\n        return null;\n      } else {\n        throw new IllegalStateException(\"empty list of files not allowed\");\n      }\n    }\n    \n    String segmentsFile = files.remove(files.size() - 1);\n    if (!segmentsFile.startsWith(IndexFileNames.SEGMENTS) || segmentsFile.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n      throw new IllegalStateException(\"last file to copy+sync must be segments_N but got \" + segmentsFile\n          + \"; check your Revision implementation!\");\n    }\n    return segmentsFile;\n  }\n\n","sourceOld":"  /**\n   * Verifies that the last file is segments_N and fails otherwise. It also\n   * removes and returns the file from the list, because it needs to be handled\n   * last, after all files. This is important in order to guarantee that if a\n   * reader sees the new segments_N, all other segment files are already on\n   * stable storage.\n   * <p>\n   * The reason why the code fails instead of putting segments_N file last is\n   * that this indicates an error in the Revision implementation.\n   */\n  public static String getSegmentsFile(List<String> files, boolean allowEmpty) {\n    if (files.isEmpty()) {\n      if (allowEmpty) {\n        return null;\n      } else {\n        throw new IllegalStateException(\"empty list of files not allowed\");\n      }\n    }\n    \n    String segmentsFile = files.remove(files.size() - 1);\n    if (!segmentsFile.startsWith(IndexFileNames.SEGMENTS) || segmentsFile.equals(IndexFileNames.SEGMENTS_GEN)) {\n      throw new IllegalStateException(\"last file to copy+sync must be segments_N but got \" + segmentsFile\n          + \"; check your Revision implementation!\");\n    }\n    return segmentsFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7166881391ea0f64d02756406371ce34719e4e8","date":1567583487,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/replicator/src/java/org/apache/lucene/replicator/IndexReplicationHandler#getSegmentsFile(List[String],boolean).mjava","pathOld":"lucene/replicator/src/java/org/apache/lucene/replicator/IndexReplicationHandler#getSegmentsFile(List[String],boolean).mjava","sourceNew":"  /**\n   * Verifies that the last file is segments_N and fails otherwise. It also\n   * removes and returns the file from the list, because it needs to be handled\n   * last, after all files. This is important in order to guarantee that if a\n   * reader sees the new segments_N, all other segment files are already on\n   * stable storage.\n   * <p>\n   * The reason why the code fails instead of putting segments_N file last is\n   * that this indicates an error in the Revision implementation.\n   */\n  public static String getSegmentsFile(List<String> files, boolean allowEmpty) {\n    if (files.isEmpty()) {\n      if (allowEmpty) {\n        return null;\n      } else {\n        throw new IllegalStateException(\"empty list of files not allowed\");\n      }\n    }\n    \n    String segmentsFile = files.remove(files.size() - 1);\n    if (!segmentsFile.startsWith(IndexFileNames.SEGMENTS)) {\n      throw new IllegalStateException(\"last file to copy+sync must be segments_N but got \" + segmentsFile\n          + \"; check your Revision implementation!\");\n    }\n    return segmentsFile;\n  }\n\n","sourceOld":"  /**\n   * Verifies that the last file is segments_N and fails otherwise. It also\n   * removes and returns the file from the list, because it needs to be handled\n   * last, after all files. This is important in order to guarantee that if a\n   * reader sees the new segments_N, all other segment files are already on\n   * stable storage.\n   * <p>\n   * The reason why the code fails instead of putting segments_N file last is\n   * that this indicates an error in the Revision implementation.\n   */\n  public static String getSegmentsFile(List<String> files, boolean allowEmpty) {\n    if (files.isEmpty()) {\n      if (allowEmpty) {\n        return null;\n      } else {\n        throw new IllegalStateException(\"empty list of files not allowed\");\n      }\n    }\n    \n    String segmentsFile = files.remove(files.size() - 1);\n    if (!segmentsFile.startsWith(IndexFileNames.SEGMENTS) || segmentsFile.equals(IndexFileNames.OLD_SEGMENTS_GEN)) {\n      throw new IllegalStateException(\"last file to copy+sync must be segments_N but got \" + segmentsFile\n          + \"; check your Revision implementation!\");\n    }\n    return segmentsFile;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7166881391ea0f64d02756406371ce34719e4e8":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7166881391ea0f64d02756406371ce34719e4e8"]},"commit2Childs":{"46e4a8bdfbafda795ef9c39a2bc2d47095770299":["f7166881391ea0f64d02756406371ce34719e4e8"],"9854b7e4603d5c26909c27363aa7bc9fc4d11ef4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9854b7e4603d5c26909c27363aa7bc9fc4d11ef4"],"f7166881391ea0f64d02756406371ce34719e4e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["46e4a8bdfbafda795ef9c39a2bc2d47095770299"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}