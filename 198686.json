{"path":"lucene/backwards/src/java/org/apache/lucene/queryParser/QueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/queryParser/QueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","pathOld":"backwards/src/java/org/apache/lucene/queryParser/QueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":"  /**\n   * By default QueryParser uses {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it \n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score \n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","sourceOld":"  /**\n   * By default QueryParser uses {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it \n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score \n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/queryParser/QueryParser#setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod).mjava","sourceNew":null,"sourceOld":"  /**\n   * By default QueryParser uses {@link MultiTermQuery#CONSTANT_SCORE_AUTO_REWRITE_DEFAULT}\n   * when creating a PrefixQuery, WildcardQuery or RangeQuery. This implementation is generally preferable because it \n   * a) Runs faster b) Does not have the scarcity of terms unduly influence score \n   * c) avoids any \"TooManyBooleanClauses\" exception.\n   * However, if your application really needs to use the\n   * old-fashioned BooleanQuery expansion rewriting and the above\n   * points are not relevant then use this to change\n   * the rewrite method.\n   */\n  public void setMultiTermRewriteMethod(MultiTermQuery.RewriteMethod method) {\n    multiTermRewriteMethod = method;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}