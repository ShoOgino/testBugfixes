{"path":"lucene/core/src/java/org/apache/lucene/search/QueryCachingPolicy.CacheOnLargeSegments#CacheOnLargeSegments(int,float).mjava","commits":[{"id":"6a8b15d9e1f79336cd1cd8018a8f636616e9a76b","date":1430252234,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/QueryCachingPolicy.CacheOnLargeSegments#CacheOnLargeSegments(int,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryCachingPolicy.CacheOnLargeSegments#CacheOnLargeSegments(float).mjava","sourceNew":"    /**\n     * Create a {@link CacheOnLargeSegments} instance that only caches on a\n     * given segment if the total number of documents in the index is greater\n     * than {@code minIndexSize} and the number of documents in the segment\n     * divided by the total number of documents in the index is greater than\n     * or equal to {@code minSizeRatio}.\n     */\n    public CacheOnLargeSegments(int minIndexSize, float minSizeRatio) {\n      if (minSizeRatio <= 0 || minSizeRatio >= 1) {\n        throw new IllegalArgumentException(\"minSizeRatio must be in ]0, 1[, got \" + minSizeRatio);\n      }\n      this.minIndexSize = minIndexSize;\n      this.minSizeRatio = minSizeRatio;\n    }\n\n","sourceOld":"    /**\n     * Create a {@link CacheOnLargeSegments} instance that only caches on a\n     * given segment if its number of documents divided by the total number of\n     * documents in the index is greater than or equal to\n     * <code>minSizeRatio</code>.\n     */\n    public CacheOnLargeSegments(float minSizeRatio) {\n      if (minSizeRatio <= 0 || minSizeRatio >= 1) {\n        throw new IllegalArgumentException(\"minSizeRatio must be in ]0, 1[, got \" + minSizeRatio);\n      }\n      this.minSizeRatio = minSizeRatio;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aac61ee5b4492f174e60bd54939aba9539906edf","date":1461245473,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/QueryCachingPolicy.CacheOnLargeSegments#CacheOnLargeSegments(int,float).mjava","sourceNew":null,"sourceOld":"    /**\n     * Create a {@link CacheOnLargeSegments} instance that only caches on a\n     * given segment if the total number of documents in the index is greater\n     * than {@code minIndexSize} and the number of documents in the segment\n     * divided by the total number of documents in the index is greater than\n     * or equal to {@code minSizeRatio}.\n     */\n    public CacheOnLargeSegments(int minIndexSize, float minSizeRatio) {\n      if (minSizeRatio <= 0 || minSizeRatio >= 1) {\n        throw new IllegalArgumentException(\"minSizeRatio must be in ]0, 1[, got \" + minSizeRatio);\n      }\n      this.minIndexSize = minIndexSize;\n      this.minSizeRatio = minSizeRatio;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aac61ee5b4492f174e60bd54939aba9539906edf":["6a8b15d9e1f79336cd1cd8018a8f636616e9a76b"],"6a8b15d9e1f79336cd1cd8018a8f636616e9a76b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aac61ee5b4492f174e60bd54939aba9539906edf"]},"commit2Childs":{"aac61ee5b4492f174e60bd54939aba9539906edf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6a8b15d9e1f79336cd1cd8018a8f636616e9a76b":["aac61ee5b4492f174e60bd54939aba9539906edf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6a8b15d9e1f79336cd1cd8018a8f636616e9a76b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}