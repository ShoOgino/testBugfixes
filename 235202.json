{"path":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","pathOld":"/dev/null","sourceNew":"  public void testCommands() throws Exception {\n\n    ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result)\n          throws KeeperException, InterruptedException {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    };\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n    compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n        \"{name :sample, operation:delete}\");\n\n    compareOutput(apiBag, \"/cluster/configs\", POST, \"{create:{name : newconf, baseConfigSet: sample }}\", null,\n        \"{operation:create, name :newconf,  baseConfigSet: sample }\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b50c1c2a0759631f795331625c5e27716a1f2db4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","pathOld":"/dev/null","sourceNew":"  public void testCommands() throws Exception {\n\n    ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result)\n          throws KeeperException, InterruptedException {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    };\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n    compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n        \"{name :sample, operation:delete}\");\n\n    compareOutput(apiBag, \"/cluster/configs\", POST, \"{create:{name : newconf, baseConfigSet: sample }}\", null,\n        \"{operation:create, name :newconf,  baseConfigSet: sample }\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b50c1c2a0759631f795331625c5e27716a1f2db4","date":1496267048,"type":3,"author":"Mark Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n\n    ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result)\n          throws KeeperException, InterruptedException {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    };\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n    compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n        \"{name :sample, operation:delete}\");\n\n    compareOutput(apiBag, \"/cluster/configs\", POST, \"{create:{name : newconf, baseConfigSet: sample }}\", null,\n        \"{operation:create, name :newconf,  baseConfigSet: sample, immutable: false }\");\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n\n    ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result)\n          throws KeeperException, InterruptedException {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    };\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n    compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n        \"{name :sample, operation:delete}\");\n\n    compareOutput(apiBag, \"/cluster/configs\", POST, \"{create:{name : newconf, baseConfigSet: sample }}\", null,\n        \"{operation:create, name :newconf,  baseConfigSet: sample }\");\n  }\n\n","bugFix":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f","date":1496281877,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n\n    ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result)\n          throws KeeperException, InterruptedException {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    };\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n    compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n        \"{name :sample, operation:delete}\");\n\n    compareOutput(apiBag, \"/cluster/configs\", POST, \"{create:{name : newconf, baseConfigSet: sample }}\", null,\n        \"{operation:create, name :newconf,  baseConfigSet: sample, immutable: false }\");\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n\n    ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result)\n          throws KeeperException, InterruptedException {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    };\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n    compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n        \"{name :sample, operation:delete}\");\n\n    compareOutput(apiBag, \"/cluster/configs\", POST, \"{create:{name : newconf, baseConfigSet: sample }}\", null,\n        \"{operation:create, name :newconf,  baseConfigSet: sample }\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n\n    ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result)\n          throws KeeperException, InterruptedException {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    };\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n    compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n        \"{name :sample, operation:delete}\");\n\n    compareOutput(apiBag, \"/cluster/configs\", POST, \"{create:{name : newconf, baseConfigSet: sample }}\", null,\n        \"{operation:create, name :newconf,  baseConfigSet: sample, immutable: false }\");\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n\n    ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result)\n          throws KeeperException, InterruptedException {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    };\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n    compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n        \"{name :sample, operation:delete}\");\n\n    compareOutput(apiBag, \"/cluster/configs\", POST, \"{create:{name : newconf, baseConfigSet: sample }}\", null,\n        \"{operation:create, name :newconf,  baseConfigSet: sample }\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n\n    ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result)\n          throws KeeperException, InterruptedException {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    };\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n    compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n        \"{name :sample, operation:delete}\");\n\n    compareOutput(apiBag, \"/cluster/configs\", POST, \"{create:{name : newconf, baseConfigSet: sample }}\", null,\n        \"{operation:create, name :newconf,  baseConfigSet: sample, immutable: false }\");\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n\n    ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result)\n          throws KeeperException, InterruptedException {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    };\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n    compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n        \"{name :sample, operation:delete}\");\n\n    compareOutput(apiBag, \"/cluster/configs\", POST, \"{create:{name : newconf, baseConfigSet: sample }}\", null,\n        \"{operation:create, name :newconf,  baseConfigSet: sample }\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n\n    try (ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result)\n          throws KeeperException, InterruptedException {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    }) {\n      ApiBag apiBag = new ApiBag(false);\n      for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n      compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n          \"{name :sample, operation:delete}\");\n\n      compareOutput(apiBag, \"/cluster/configs\", POST, \"{create:{name : newconf, baseConfigSet: sample }}\", null,\n          \"{operation:create, name :newconf,  baseConfigSet: sample, immutable: false }\");\n    }\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n\n    ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result)\n          throws KeeperException, InterruptedException {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    };\n    ApiBag apiBag = new ApiBag(false);\n    for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n    compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n        \"{name :sample, operation:delete}\");\n\n    compareOutput(apiBag, \"/cluster/configs\", POST, \"{create:{name : newconf, baseConfigSet: sample }}\", null,\n        \"{operation:create, name :newconf,  baseConfigSet: sample, immutable: false }\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testCommands() throws Exception {\n\n    try (ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result)\n          throws KeeperException, InterruptedException {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    }) {\n      ApiBag apiBag = new ApiBag(false);\n      for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n      compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n          \"{name :sample, operation:delete}\");\n\n      compareOutput(apiBag, \"/cluster/configs\", POST, \"{create:{name : newconf, baseConfigSet: sample }}\", null,\n          \"{operation:create, name :newconf,  baseConfigSet: sample, immutable: false }\");\n    }\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n\n    try (ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result)\n          throws KeeperException, InterruptedException {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    }) {\n      ApiBag apiBag = new ApiBag(false);\n      for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n      compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n          \"{name :sample, operation:delete}\");\n\n      compareOutput(apiBag, \"/cluster/configs\", POST, \"{create:{name : newconf, baseConfigSet: sample }}\", null,\n          \"{operation:create, name :newconf,  baseConfigSet: sample, immutable: false }\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852cb03cf4922477072449dd9de2fab588d1adb","date":1600862151,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n\n    try (ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n\n      @Override\n      protected void checkErrors() {\n      }\n\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result) {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    }) {\n      ApiBag apiBag = new ApiBag(false);\n\n      ClusterAPI o = new ClusterAPI(null, handler);\n      apiBag.registerObject(o);\n      apiBag.registerObject(o.configSetCommands);\n//      for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n      compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n          \"{name :sample, operation:delete}\");\n\n      compareOutput(apiBag, \"/cluster/configs\", POST, \"{create:{name : newconf, baseConfigSet: sample }}\", null,\n          \"{operation:create, name :newconf,  baseConfigSet: sample, immutable: false }\");\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  public void testCommands() throws Exception {\n\n    try (ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result)\n          throws KeeperException, InterruptedException {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    }) {\n      ApiBag apiBag = new ApiBag(false);\n      for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n      compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n          \"{name :sample, operation:delete}\");\n\n      compareOutput(apiBag, \"/cluster/configs\", POST, \"{create:{name : newconf, baseConfigSet: sample }}\", null,\n          \"{operation:create, name :newconf,  baseConfigSet: sample, immutable: false }\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01ee5edcdd3cffaab03842feda0c26516290698","date":1601586820,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/TestConfigsApi#testCommands().mjava","sourceNew":"  public void testCommands() throws Exception {\n\n    try (ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n\n      @Override\n      protected void checkErrors() {\n      }\n\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result) {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    }) {\n      ApiBag apiBag = new ApiBag(false);\n\n      ClusterAPI o = new ClusterAPI(null, handler);\n      apiBag.registerObject(o);\n      apiBag.registerObject(o.configSetCommands);\n//      for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n      compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n          \"{name :sample, operation:delete}\");\n    }\n  }\n\n","sourceOld":"  public void testCommands() throws Exception {\n\n    try (ConfigSetsHandler handler = new ConfigSetsHandler(null) {\n\n      @Override\n      protected void checkErrors() {\n      }\n\n      @Override\n      protected void sendToZk(SolrQueryResponse rsp,\n                              ConfigSetOperation operation,\n                              Map<String, Object> result) {\n        result.put(QUEUE_OPERATION, operation.action.toLower());\n        rsp.add(ZkNodeProps.class.getName(), new ZkNodeProps(result));\n      }\n    }) {\n      ApiBag apiBag = new ApiBag(false);\n\n      ClusterAPI o = new ClusterAPI(null, handler);\n      apiBag.registerObject(o);\n      apiBag.registerObject(o.configSetCommands);\n//      for (Api api : handler.getApis()) apiBag.register(api, EMPTY_MAP);\n      compareOutput(apiBag, \"/cluster/configs/sample\", DELETE, null, null,\n          \"{name :sample, operation:delete}\");\n\n      compareOutput(apiBag, \"/cluster/configs\", POST, \"{create:{name : newconf, baseConfigSet: sample }}\", null,\n          \"{operation:create, name :newconf,  baseConfigSet: sample, immutable: false }\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b50c1c2a0759631f795331625c5e27716a1f2db4":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"c01ee5edcdd3cffaab03842feda0c26516290698":["1852cb03cf4922477072449dd9de2fab588d1adb"],"ba055e19afc289adcb5bedaf68513793a7254012":["28288370235ed02234a64753cdbf0c6ec096304a"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"1852cb03cf4922477072449dd9de2fab588d1adb":["e98520789adb1d5ad05afb4956eca0944a929688"],"28288370235ed02234a64753cdbf0c6ec096304a":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","b50c1c2a0759631f795331625c5e27716a1f2db4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c01ee5edcdd3cffaab03842feda0c26516290698"],"e98520789adb1d5ad05afb4956eca0944a929688":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"b50c1c2a0759631f795331625c5e27716a1f2db4":["42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"c01ee5edcdd3cffaab03842feda0c26516290698":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba055e19afc289adcb5bedaf68513793a7254012":["e98520789adb1d5ad05afb4956eca0944a929688"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["b50c1c2a0759631f795331625c5e27716a1f2db4","e9017cf144952056066919f1ebc7897ff9bd71b1","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","28288370235ed02234a64753cdbf0c6ec096304a","42dc7f2d60851668d9efa2d12baa1d4ebe54b12f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"1852cb03cf4922477072449dd9de2fab588d1adb":["c01ee5edcdd3cffaab03842feda0c26516290698"],"42dc7f2d60851668d9efa2d12baa1d4ebe54b12f":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["ba055e19afc289adcb5bedaf68513793a7254012"],"e98520789adb1d5ad05afb4956eca0944a929688":["1852cb03cf4922477072449dd9de2fab588d1adb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}