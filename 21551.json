{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getValueSource(SchemaField,QParser).mjava","commits":[{"id":"8af63063406a531a215fa9c65fae3eee06bc7ab3","date":1362428737,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getValueSource(SchemaField,QParser).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the indexed value as converted to the default \n   * currency for the field, normalized to it's most granular form based \n   * on the default fractional digits.\n   * </p>\n   * <p>\n   * For example: If the default Currency specified for a field is \n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of \"cents\" (ie: value in dollars * 100) \n   * after converting each document's native currency to USD -- because the \n   * default fractional digits for <code>USD</code> is \"<code>2</code>\".  \n   * So for a document whose indexed value was currently equivilent to \n   * \"<code>5.43,USD</code>\" using the the exchange provider for this field, \n   * this ValueSource would return a value of \"<code>543<code>\"\n   * </p>\n   *\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see Currency#getDefaultFractionDigits\n   * @see getConvertedValueSource\n   */\n  public RawCurrencyValueSource getValueSource(SchemaField field, \n                                               QParser parser) {\n    field.checkFieldCacheSource(parser);\n    return new RawCurrencyValueSource(field, defaultCurrency, parser);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["653d425b452724a3b737efbcf27d1dd389483fec","9f4251f14d2db68330fc1e6f0495c053a905d560","9f4251f14d2db68330fc1e6f0495c053a905d560"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"653d425b452724a3b737efbcf27d1dd389483fec","date":1362430275,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getValueSource(SchemaField,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getValueSource(SchemaField,QParser).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the indexed value as converted to the default \n   * currency for the field, normalized to it's most granular form based \n   * on the default fractional digits.\n   * </p>\n   * <p>\n   * For example: If the default Currency specified for a field is \n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of \"cents\" (ie: value in dollars * 100) \n   * after converting each document's native currency to USD -- because the \n   * default fractional digits for <code>USD</code> is \"<code>2</code>\".  \n   * So for a document whose indexed value was currently equivilent to \n   * \"<code>5.43,USD</code>\" using the the exchange provider for this field, \n   * this ValueSource would return a value of \"<code>543</code>\"\n   * </p>\n   *\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see Currency#getDefaultFractionDigits\n   * @see #getConvertedValueSource\n   */\n  public RawCurrencyValueSource getValueSource(SchemaField field, \n                                               QParser parser) {\n    field.checkFieldCacheSource(parser);\n    return new RawCurrencyValueSource(field, defaultCurrency, parser);\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the indexed value as converted to the default \n   * currency for the field, normalized to it's most granular form based \n   * on the default fractional digits.\n   * </p>\n   * <p>\n   * For example: If the default Currency specified for a field is \n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of \"cents\" (ie: value in dollars * 100) \n   * after converting each document's native currency to USD -- because the \n   * default fractional digits for <code>USD</code> is \"<code>2</code>\".  \n   * So for a document whose indexed value was currently equivilent to \n   * \"<code>5.43,USD</code>\" using the the exchange provider for this field, \n   * this ValueSource would return a value of \"<code>543<code>\"\n   * </p>\n   *\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see Currency#getDefaultFractionDigits\n   * @see getConvertedValueSource\n   */\n  public RawCurrencyValueSource getValueSource(SchemaField field, \n                                               QParser parser) {\n    field.checkFieldCacheSource(parser);\n    return new RawCurrencyValueSource(field, defaultCurrency, parser);\n  }\n\n","bugFix":["8af63063406a531a215fa9c65fae3eee06bc7ab3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getValueSource(SchemaField,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getValueSource(SchemaField,QParser).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the indexed value as converted to the default \n   * currency for the field, normalized to its most granular form based \n   * on the default fractional digits.\n   * </p>\n   * <p>\n   * For example: If the default Currency specified for a field is \n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of \"cents\" (ie: value in dollars * 100) \n   * after converting each document's native currency to USD -- because the \n   * default fractional digits for <code>USD</code> is \"<code>2</code>\".  \n   * So for a document whose indexed value was currently equivilent to \n   * \"<code>5.43,USD</code>\" using the the exchange provider for this field, \n   * this ValueSource would return a value of \"<code>543</code>\"\n   * </p>\n   *\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see Currency#getDefaultFractionDigits\n   * @see #getConvertedValueSource\n   */\n  public RawCurrencyValueSource getValueSource(SchemaField field, \n                                               QParser parser) {\n    field.checkFieldCacheSource(parser);\n    return new RawCurrencyValueSource(field, defaultCurrency, parser);\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the indexed value as converted to the default \n   * currency for the field, normalized to it's most granular form based \n   * on the default fractional digits.\n   * </p>\n   * <p>\n   * For example: If the default Currency specified for a field is \n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of \"cents\" (ie: value in dollars * 100) \n   * after converting each document's native currency to USD -- because the \n   * default fractional digits for <code>USD</code> is \"<code>2</code>\".  \n   * So for a document whose indexed value was currently equivilent to \n   * \"<code>5.43,USD</code>\" using the the exchange provider for this field, \n   * this ValueSource would return a value of \"<code>543</code>\"\n   * </p>\n   *\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see Currency#getDefaultFractionDigits\n   * @see #getConvertedValueSource\n   */\n  public RawCurrencyValueSource getValueSource(SchemaField field, \n                                               QParser parser) {\n    field.checkFieldCacheSource(parser);\n    return new RawCurrencyValueSource(field, defaultCurrency, parser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"897d47a3d78c0956b96658436566279d040b95b9","date":1447761616,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getValueSource(SchemaField,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getValueSource(SchemaField,QParser).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the indexed value as converted to the default \n   * currency for the field, normalized to its most granular form based \n   * on the default fractional digits.\n   * </p>\n   * <p>\n   * For example: If the default Currency specified for a field is \n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of \"cents\" (ie: value in dollars * 100) \n   * after converting each document's native currency to USD -- because the \n   * default fractional digits for <code>USD</code> is \"<code>2</code>\".  \n   * So for a document whose indexed value was currently equivilent to \n   * \"<code>5.43,USD</code>\" using the the exchange provider for this field, \n   * this ValueSource would return a value of \"<code>543</code>\"\n   * </p>\n   *\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see Currency#getDefaultFractionDigits\n   * @see #getConvertedValueSource\n   */\n  public RawCurrencyValueSource getValueSource(SchemaField field, \n                                               QParser parser) {\n    field.checkFieldCacheSource();\n    return new RawCurrencyValueSource(field, defaultCurrency, parser);\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the indexed value as converted to the default \n   * currency for the field, normalized to its most granular form based \n   * on the default fractional digits.\n   * </p>\n   * <p>\n   * For example: If the default Currency specified for a field is \n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of \"cents\" (ie: value in dollars * 100) \n   * after converting each document's native currency to USD -- because the \n   * default fractional digits for <code>USD</code> is \"<code>2</code>\".  \n   * So for a document whose indexed value was currently equivilent to \n   * \"<code>5.43,USD</code>\" using the the exchange provider for this field, \n   * this ValueSource would return a value of \"<code>543</code>\"\n   * </p>\n   *\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see Currency#getDefaultFractionDigits\n   * @see #getConvertedValueSource\n   */\n  public RawCurrencyValueSource getValueSource(SchemaField field, \n                                               QParser parser) {\n    field.checkFieldCacheSource(parser);\n    return new RawCurrencyValueSource(field, defaultCurrency, parser);\n  }\n\n","bugFix":null,"bugIntro":["79900e89f08cc17c4bcf49789dd61a2236ee7840"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79900e89f08cc17c4bcf49789dd61a2236ee7840","date":1492541915,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getValueSource(SchemaField,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getValueSource(SchemaField,QParser).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the indexed value as converted to the default \n   * currency for the field, normalized to its most granular form based \n   * on the default fractional digits.\n   * </p>\n   * <p>\n   * For example: If the default Currency specified for a field is \n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of \"cents\" (ie: value in dollars * 100) \n   * after converting each document's native currency to USD -- because the \n   * default fractional digits for <code>USD</code> is \"<code>2</code>\".  \n   * So for a document whose indexed value was currently equivilent to \n   * \"<code>5.43,USD</code>\" using the the exchange provider for this field, \n   * this ValueSource would return a value of \"<code>543</code>\"\n   * </p>\n   *\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see Currency#getDefaultFractionDigits\n   * @see #getConvertedValueSource\n   */\n  public RawCurrencyValueSource getValueSource(SchemaField field, \n                                               QParser parser) {\n    getAmountField(field).checkFieldCacheSource();\n    getCurrencyField(field).checkFieldCacheSource();\n    return new RawCurrencyValueSource(field, defaultCurrency, parser);\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the indexed value as converted to the default \n   * currency for the field, normalized to its most granular form based \n   * on the default fractional digits.\n   * </p>\n   * <p>\n   * For example: If the default Currency specified for a field is \n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of \"cents\" (ie: value in dollars * 100) \n   * after converting each document's native currency to USD -- because the \n   * default fractional digits for <code>USD</code> is \"<code>2</code>\".  \n   * So for a document whose indexed value was currently equivilent to \n   * \"<code>5.43,USD</code>\" using the the exchange provider for this field, \n   * this ValueSource would return a value of \"<code>543</code>\"\n   * </p>\n   *\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see Currency#getDefaultFractionDigits\n   * @see #getConvertedValueSource\n   */\n  public RawCurrencyValueSource getValueSource(SchemaField field, \n                                               QParser parser) {\n    field.checkFieldCacheSource();\n    return new RawCurrencyValueSource(field, defaultCurrency, parser);\n  }\n\n","bugFix":["897d47a3d78c0956b96658436566279d040b95b9"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getValueSource(SchemaField,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getValueSource(SchemaField,QParser).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the indexed value as converted to the default \n   * currency for the field, normalized to its most granular form based \n   * on the default fractional digits.\n   * </p>\n   * <p>\n   * For example: If the default Currency specified for a field is \n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of \"cents\" (ie: value in dollars * 100) \n   * after converting each document's native currency to USD -- because the \n   * default fractional digits for <code>USD</code> is \"<code>2</code>\".  \n   * So for a document whose indexed value was currently equivilent to \n   * \"<code>5.43,USD</code>\" using the the exchange provider for this field, \n   * this ValueSource would return a value of \"<code>543</code>\"\n   * </p>\n   *\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see Currency#getDefaultFractionDigits\n   * @see #getConvertedValueSource\n   */\n  public RawCurrencyValueSource getValueSource(SchemaField field, \n                                               QParser parser) {\n    getAmountField(field).checkFieldCacheSource();\n    getCurrencyField(field).checkFieldCacheSource();\n    return new RawCurrencyValueSource(field, defaultCurrency, parser);\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the indexed value as converted to the default \n   * currency for the field, normalized to its most granular form based \n   * on the default fractional digits.\n   * </p>\n   * <p>\n   * For example: If the default Currency specified for a field is \n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of \"cents\" (ie: value in dollars * 100) \n   * after converting each document's native currency to USD -- because the \n   * default fractional digits for <code>USD</code> is \"<code>2</code>\".  \n   * So for a document whose indexed value was currently equivilent to \n   * \"<code>5.43,USD</code>\" using the the exchange provider for this field, \n   * this ValueSource would return a value of \"<code>543</code>\"\n   * </p>\n   *\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see Currency#getDefaultFractionDigits\n   * @see #getConvertedValueSource\n   */\n  public RawCurrencyValueSource getValueSource(SchemaField field, \n                                               QParser parser) {\n    field.checkFieldCacheSource();\n    return new RawCurrencyValueSource(field, defaultCurrency, parser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":5,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getValueSource(SchemaField,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getValueSource(SchemaField,QParser).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the indexed value as converted to the default \n   * currency for the field, normalized to its most granular form based \n   * on the default fractional digits.\n   * </p>\n   * <p>\n   * For example: If the default Currency specified for a field is \n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of \"cents\" (ie: value in dollars * 100) \n   * after converting each document's native currency to USD -- because the \n   * default fractional digits for <code>USD</code> is \"<code>2</code>\".  \n   * So for a document whose indexed value was currently equivilent to \n   * \"<code>5.43,USD</code>\" using the the exchange provider for this field, \n   * this ValueSource would return a value of \"<code>543</code>\"\n   * </p>\n   *\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see Currency#getDefaultFractionDigits\n   * @see #getConvertedValueSource\n   */\n  public RawCurrencyValueSource getValueSource(SchemaField field,\n                                               QParser parser) {\n    getAmountField(field).checkFieldCacheSource();\n    getCurrencyField(field).checkFieldCacheSource();\n    return new RawCurrencyValueSource(field, defaultCurrency, parser);\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the indexed value as converted to the default \n   * currency for the field, normalized to its most granular form based \n   * on the default fractional digits.\n   * </p>\n   * <p>\n   * For example: If the default Currency specified for a field is \n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of \"cents\" (ie: value in dollars * 100) \n   * after converting each document's native currency to USD -- because the \n   * default fractional digits for <code>USD</code> is \"<code>2</code>\".  \n   * So for a document whose indexed value was currently equivilent to \n   * \"<code>5.43,USD</code>\" using the the exchange provider for this field, \n   * this ValueSource would return a value of \"<code>543</code>\"\n   * </p>\n   *\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see Currency#getDefaultFractionDigits\n   * @see #getConvertedValueSource\n   */\n  public RawCurrencyValueSource getValueSource(SchemaField field, \n                                               QParser parser) {\n    getAmountField(field).checkFieldCacheSource();\n    getCurrencyField(field).checkFieldCacheSource();\n    return new RawCurrencyValueSource(field, defaultCurrency, parser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getValueSource(SchemaField,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getValueSource(SchemaField,QParser).mjava","sourceNew":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the indexed value as converted to the default \n   * currency for the field, normalized to its most granular form based \n   * on the default fractional digits.\n   * </p>\n   * <p>\n   * For example: If the default Currency specified for a field is \n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of \"cents\" (ie: value in dollars * 100) \n   * after converting each document's native currency to USD -- because the \n   * default fractional digits for <code>USD</code> is \"<code>2</code>\".  \n   * So for a document whose indexed value was currently equivilent to \n   * \"<code>5.43,USD</code>\" using the the exchange provider for this field, \n   * this ValueSource would return a value of \"<code>543</code>\"\n   * </p>\n   *\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see Currency#getDefaultFractionDigits\n   * @see #getConvertedValueSource\n   */\n  public RawCurrencyValueSource getValueSource(SchemaField field,\n                                               QParser parser) {\n    getAmountField(field).checkFieldCacheSource();\n    getCurrencyField(field).checkFieldCacheSource();\n    return new RawCurrencyValueSource(field, defaultCurrency, parser);\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the indexed value as converted to the default \n   * currency for the field, normalized to its most granular form based \n   * on the default fractional digits.\n   * </p>\n   * <p>\n   * For example: If the default Currency specified for a field is \n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of \"cents\" (ie: value in dollars * 100) \n   * after converting each document's native currency to USD -- because the \n   * default fractional digits for <code>USD</code> is \"<code>2</code>\".  \n   * So for a document whose indexed value was currently equivilent to \n   * \"<code>5.43,USD</code>\" using the the exchange provider for this field, \n   * this ValueSource would return a value of \"<code>543</code>\"\n   * </p>\n   *\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see Currency#getDefaultFractionDigits\n   * @see #getConvertedValueSource\n   */\n  public RawCurrencyValueSource getValueSource(SchemaField field, \n                                               QParser parser) {\n    getAmountField(field).checkFieldCacheSource();\n    getCurrencyField(field).checkFieldCacheSource();\n    return new RawCurrencyValueSource(field, defaultCurrency, parser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyField#getValueSource(SchemaField,QParser).mjava","sourceNew":null,"sourceOld":"  /**\n   * <p>\n   * Returns a ValueSource over this field in which the numeric value for \n   * each document represents the indexed value as converted to the default \n   * currency for the field, normalized to its most granular form based \n   * on the default fractional digits.\n   * </p>\n   * <p>\n   * For example: If the default Currency specified for a field is \n   * <code>USD</code>, then the values returned by this value source would \n   * represent the equivilent number of \"cents\" (ie: value in dollars * 100) \n   * after converting each document's native currency to USD -- because the \n   * default fractional digits for <code>USD</code> is \"<code>2</code>\".  \n   * So for a document whose indexed value was currently equivilent to \n   * \"<code>5.43,USD</code>\" using the the exchange provider for this field, \n   * this ValueSource would return a value of \"<code>543</code>\"\n   * </p>\n   *\n   * @see #PARAM_DEFAULT_CURRENCY\n   * @see #DEFAULT_DEFAULT_CURRENCY\n   * @see Currency#getDefaultFractionDigits\n   * @see #getConvertedValueSource\n   */\n  public RawCurrencyValueSource getValueSource(SchemaField field, \n                                               QParser parser) {\n    getAmountField(field).checkFieldCacheSource();\n    getCurrencyField(field).checkFieldCacheSource();\n    return new RawCurrencyValueSource(field, defaultCurrency, parser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["897d47a3d78c0956b96658436566279d040b95b9"],"653d425b452724a3b737efbcf27d1dd389483fec":["8af63063406a531a215fa9c65fae3eee06bc7ab3"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["653d425b452724a3b737efbcf27d1dd389483fec"],"8af63063406a531a215fa9c65fae3eee06bc7ab3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"897d47a3d78c0956b96658436566279d040b95b9":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["897d47a3d78c0956b96658436566279d040b95b9"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f107636c2cc82350a2607d774c092da5b73152e5"],"28288370235ed02234a64753cdbf0c6ec096304a":["79900e89f08cc17c4bcf49789dd61a2236ee7840","f107636c2cc82350a2607d774c092da5b73152e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"f107636c2cc82350a2607d774c092da5b73152e5":["79900e89f08cc17c4bcf49789dd61a2236ee7840"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"653d425b452724a3b737efbcf27d1dd389483fec":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["897d47a3d78c0956b96658436566279d040b95b9"],"8af63063406a531a215fa9c65fae3eee06bc7ab3":["653d425b452724a3b737efbcf27d1dd389483fec"],"897d47a3d78c0956b96658436566279d040b95b9":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","79900e89f08cc17c4bcf49789dd61a2236ee7840"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8af63063406a531a215fa9c65fae3eee06bc7ab3"],"79900e89f08cc17c4bcf49789dd61a2236ee7840":["28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}