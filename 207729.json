{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#addPosition(int,BytesRef,int,int).mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n\n    final int delta = position - lastPosition;\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n\n    final int delta = position - lastPosition;\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#addPosition(int,BytesRef,int,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n\n    final int delta = position - lastPosition;\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (writePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n\n    final int delta = position - lastPosition;\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (storePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91d86ebcdb45ce6a1b2584e2603f76db47523d0a","date":1396466913,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":null,"sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n\n    final int delta = position - lastPosition;\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (writePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsWriter#addPosition(int,BytesRef,int,int).mjava","sourceNew":null,"sourceOld":"  /** Add a new position & payload */\n  @Override\n  public void addPosition(int position, BytesRef payload, int startOffset, int endOffset) throws IOException {\n    assert indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n\n    final int delta = position - lastPosition;\n    assert delta >= 0: \"position=\" + position + \" lastPosition=\" + lastPosition;            // not quite right (if pos=0 is repeated twice we don't catch it)\n    lastPosition = position;\n\n    if (writePayloads) {\n      final int payloadLength = payload == null ? 0 : payload.length;\n      if (payloadLength != lastPayloadLength) {\n        lastPayloadLength = payloadLength;\n        // TODO: explore whether we get better compression\n        // by not storing payloadLength into prox stream?\n        posOut.write((delta<<1)|1);\n        posOut.write(payloadLength);\n      } else {\n        posOut.write(delta << 1);\n      }\n\n      if (payloadLength > 0) {\n        payloadOut.writeBytes(payload.bytes, payload.offset, payloadLength);\n      }\n    } else {\n      posOut.write(delta);\n    }\n\n    lastPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91d86ebcdb45ce6a1b2584e2603f76db47523d0a"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"91d86ebcdb45ce6a1b2584e2603f76db47523d0a":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["5eb2511ababf862ea11e10761c70ee560cd84510","91d86ebcdb45ce6a1b2584e2603f76db47523d0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}