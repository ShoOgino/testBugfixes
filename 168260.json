{"path":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#rateLimit(Directory).mjava","commits":[{"id":"1eafe65017ee691866644025d85b041b4880c5e3","date":1355253547,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#rateLimit(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private Directory rateLimit(Directory directory) {\n    if (maxWriteMBPerSecDefault != null || maxWriteMBPerSecFlush != null || maxWriteMBPerSecMerge != null || maxWriteMBPerSecRead != null) {\n      directory = new RateLimitedDirectoryWrapper(directory);\n      if (maxWriteMBPerSecDefault != null) {\n        ((RateLimitedDirectoryWrapper)directory).setMaxWriteMBPerSec(maxWriteMBPerSecDefault, Context.DEFAULT);\n      }\n      if (maxWriteMBPerSecFlush != null) {\n        ((RateLimitedDirectoryWrapper)directory).setMaxWriteMBPerSec(maxWriteMBPerSecFlush, Context.FLUSH);\n      }\n      if (maxWriteMBPerSecMerge != null) {\n        ((RateLimitedDirectoryWrapper)directory).setMaxWriteMBPerSec(maxWriteMBPerSecMerge, Context.MERGE);\n      }\n      if (maxWriteMBPerSecRead != null) {\n        ((RateLimitedDirectoryWrapper)directory).setMaxWriteMBPerSec(maxWriteMBPerSecRead, Context.READ);\n      }\n    }\n    return directory;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#rateLimit(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private Directory rateLimit(Directory directory) {\n    if (maxWriteMBPerSecDefault != null || maxWriteMBPerSecFlush != null || maxWriteMBPerSecMerge != null || maxWriteMBPerSecRead != null) {\n      directory = new RateLimitedDirectoryWrapper(directory);\n      if (maxWriteMBPerSecDefault != null) {\n        ((RateLimitedDirectoryWrapper)directory).setMaxWriteMBPerSec(maxWriteMBPerSecDefault, Context.DEFAULT);\n      }\n      if (maxWriteMBPerSecFlush != null) {\n        ((RateLimitedDirectoryWrapper)directory).setMaxWriteMBPerSec(maxWriteMBPerSecFlush, Context.FLUSH);\n      }\n      if (maxWriteMBPerSecMerge != null) {\n        ((RateLimitedDirectoryWrapper)directory).setMaxWriteMBPerSec(maxWriteMBPerSecMerge, Context.MERGE);\n      }\n      if (maxWriteMBPerSecRead != null) {\n        ((RateLimitedDirectoryWrapper)directory).setMaxWriteMBPerSec(maxWriteMBPerSecRead, Context.READ);\n      }\n    }\n    return directory;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CachingDirectoryFactory#rateLimit(Directory).mjava","sourceNew":null,"sourceOld":"  private Directory rateLimit(Directory directory) {\n    if (maxWriteMBPerSecDefault != null || maxWriteMBPerSecFlush != null || maxWriteMBPerSecMerge != null || maxWriteMBPerSecRead != null) {\n      directory = new RateLimitedDirectoryWrapper(directory);\n      if (maxWriteMBPerSecDefault != null) {\n        ((RateLimitedDirectoryWrapper)directory).setMaxWriteMBPerSec(maxWriteMBPerSecDefault, Context.DEFAULT);\n      }\n      if (maxWriteMBPerSecFlush != null) {\n        ((RateLimitedDirectoryWrapper)directory).setMaxWriteMBPerSec(maxWriteMBPerSecFlush, Context.FLUSH);\n      }\n      if (maxWriteMBPerSecMerge != null) {\n        ((RateLimitedDirectoryWrapper)directory).setMaxWriteMBPerSec(maxWriteMBPerSecMerge, Context.MERGE);\n      }\n      if (maxWriteMBPerSecRead != null) {\n        ((RateLimitedDirectoryWrapper)directory).setMaxWriteMBPerSec(maxWriteMBPerSecRead, Context.READ);\n      }\n    }\n    return directory;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1eafe65017ee691866644025d85b041b4880c5e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1eafe65017ee691866644025d85b041b4880c5e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5faf65b6692f15cca0f87bf8666c87899afc619f":["1eafe65017ee691866644025d85b041b4880c5e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5faf65b6692f15cca0f87bf8666c87899afc619f"]},"commit2Childs":{"1eafe65017ee691866644025d85b041b4880c5e3":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","5faf65b6692f15cca0f87bf8666c87899afc619f"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eafe65017ee691866644025d85b041b4880c5e3","d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}