{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testSearchPhraseSlop().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testSearchPhraseSlop().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testSearchPhraseSlop().mjava","sourceNew":"  public void testSearchPhraseSlop() throws Exception {\n    // \"a b c\"~0\n    Query query = pqF( \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    List<TermInfo> phraseCandidate = new ArrayList<TermInfo>();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 2 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 4 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\"~1\n    query = pqF( 1F, 1, \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    assertNotNull( fq.searchPhrase( F, phraseCandidate ) );\n    \n    // \"a b c\" w/ position-gap = 3\n    phraseCandidate.clear();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 3 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 6 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n  }\n\n","sourceOld":"  public void testSearchPhraseSlop() throws Exception {\n    // \"a b c\"~0\n    Query query = pqF( \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    List<TermInfo> phraseCandidate = new ArrayList<TermInfo>();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 2 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 4 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\"~1\n    query = pqF( 1F, 1, \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    assertNotNull( fq.searchPhrase( F, phraseCandidate ) );\n    \n    // \"a b c\" w/ position-gap = 3\n    phraseCandidate.clear();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 3 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 6 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79acd0ca7a7750de61516c6b6687a37c8765313b","date":1338910729,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testSearchPhraseSlop().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testSearchPhraseSlop().mjava","sourceNew":"  public void testSearchPhraseSlop() throws Exception {\n    // \"a b c\"~0\n    Query query = pqF( \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    List<TermInfo> phraseCandidate = new ArrayList<TermInfo>();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 2, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 4, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\"~1\n    query = pqF( 1F, 1, \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    assertNotNull( fq.searchPhrase( F, phraseCandidate ) );\n    \n    // \"a b c\" w/ position-gap = 3\n    phraseCandidate.clear();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 3, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 6, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n  }\n\n","sourceOld":"  public void testSearchPhraseSlop() throws Exception {\n    // \"a b c\"~0\n    Query query = pqF( \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    List<TermInfo> phraseCandidate = new ArrayList<TermInfo>();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 2 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 4 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\"~1\n    query = pqF( 1F, 1, \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    assertNotNull( fq.searchPhrase( F, phraseCandidate ) );\n    \n    // \"a b c\" w/ position-gap = 3\n    phraseCandidate.clear();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 3 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 6 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7327eec6fde8afb35c01f6234cb50c42a7c737d3","date":1374238360,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testSearchPhraseSlop().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testSearchPhraseSlop().mjava","sourceNew":"  public void testSearchPhraseSlop() throws Exception {\n    // \"a b c\"~0\n    Query query = pqF( \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    List<TermInfo> phraseCandidate = new ArrayList<TermInfo>();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 2, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 4, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\"~2\n    query = pqF( 1F, 2, \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    assertNotNull( fq.searchPhrase( F, phraseCandidate ) );\n    \n    // \"a b c\" w/ position-gap = 3\n    phraseCandidate.clear();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 3, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 6, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n  }\n\n","sourceOld":"  public void testSearchPhraseSlop() throws Exception {\n    // \"a b c\"~0\n    Query query = pqF( \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    List<TermInfo> phraseCandidate = new ArrayList<TermInfo>();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 2, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 4, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\"~1\n    query = pqF( 1F, 1, \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    assertNotNull( fq.searchPhrase( F, phraseCandidate ) );\n    \n    // \"a b c\" w/ position-gap = 3\n    phraseCandidate.clear();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 3, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 6, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testSearchPhraseSlop().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testSearchPhraseSlop().mjava","sourceNew":"  public void testSearchPhraseSlop() throws Exception {\n    // \"a b c\"~0\n    Query query = pqF( \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    List<TermInfo> phraseCandidate = new ArrayList<TermInfo>();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 2, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 4, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\"~2\n    query = pqF( 1F, 2, \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    assertNotNull( fq.searchPhrase( F, phraseCandidate ) );\n    \n    // \"a b c\" w/ position-gap = 3\n    phraseCandidate.clear();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 3, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 6, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n  }\n\n","sourceOld":"  public void testSearchPhraseSlop() throws Exception {\n    // \"a b c\"~0\n    Query query = pqF( \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    List<TermInfo> phraseCandidate = new ArrayList<TermInfo>();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 2, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 4, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\"~1\n    query = pqF( 1F, 1, \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    assertNotNull( fq.searchPhrase( F, phraseCandidate ) );\n    \n    // \"a b c\" w/ position-gap = 3\n    phraseCandidate.clear();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 3, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 6, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08","date":1378464767,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testSearchPhraseSlop().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testSearchPhraseSlop().mjava","sourceNew":"  public void testSearchPhraseSlop() throws Exception {\n    // \"a b c\"~0\n    Query query = pqF( \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    List<TermInfo> phraseCandidate = new ArrayList<TermInfo>();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 2, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 4, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\"~1\n    query = pqF( 1F, 1, \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    assertNotNull( fq.searchPhrase( F, phraseCandidate ) );\n    \n    // \"a b c\" w/ position-gap = 3\n    phraseCandidate.clear();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 3, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 6, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n  }\n\n","sourceOld":"  public void testSearchPhraseSlop() throws Exception {\n    // \"a b c\"~0\n    Query query = pqF( \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    List<TermInfo> phraseCandidate = new ArrayList<TermInfo>();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 2, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 4, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\"~2\n    query = pqF( 1F, 2, \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    assertNotNull( fq.searchPhrase( F, phraseCandidate ) );\n    \n    // \"a b c\" w/ position-gap = 3\n    phraseCandidate.clear();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 3, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 6, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testSearchPhraseSlop().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testSearchPhraseSlop().mjava","sourceNew":"  public void testSearchPhraseSlop() throws Exception {\n    // \"a b c\"~0\n    Query query = pqF( \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    List<TermInfo> phraseCandidate = new ArrayList<>();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 2, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 4, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\"~1\n    query = pqF( 1F, 1, \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    assertNotNull( fq.searchPhrase( F, phraseCandidate ) );\n    \n    // \"a b c\" w/ position-gap = 3\n    phraseCandidate.clear();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 3, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 6, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n  }\n\n","sourceOld":"  public void testSearchPhraseSlop() throws Exception {\n    // \"a b c\"~0\n    Query query = pqF( \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    List<TermInfo> phraseCandidate = new ArrayList<TermInfo>();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 2, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 4, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\"~1\n    query = pqF( 1F, 1, \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    assertNotNull( fq.searchPhrase( F, phraseCandidate ) );\n    \n    // \"a b c\" w/ position-gap = 3\n    phraseCandidate.clear();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 3, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 6, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testSearchPhraseSlop().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testSearchPhraseSlop().mjava","sourceNew":"  public void testSearchPhraseSlop() throws Exception {\n    // \"a b c\"~0\n    Query query = pqF( \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n\n    // \"a b c\" w/ position-gap = 2\n    List<TermInfo> phraseCandidate = new ArrayList<>();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 2, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 4, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\"~1\n    query = pqF( 1F, 1, \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    fq = new FieldQuery( query, true, true );\n\n    // \"a b c\" w/ position-gap = 2\n    assertNotNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\" w/ position-gap = 3\n    phraseCandidate.clear();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 3, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 6, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n  }\n\n","sourceOld":"  public void testSearchPhraseSlop() throws Exception {\n    // \"a b c\"~0\n    Query query = pqF( \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    List<TermInfo> phraseCandidate = new ArrayList<>();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 2, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 4, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\"~1\n    query = pqF( 1F, 1, \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    assertNotNull( fq.searchPhrase( F, phraseCandidate ) );\n    \n    // \"a b c\" w/ position-gap = 3\n    phraseCandidate.clear();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 3, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 6, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testSearchPhraseSlop().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testSearchPhraseSlop().mjava","sourceNew":"  public void testSearchPhraseSlop() throws Exception {\n    // \"a b c\"~0\n    Query query = pqF( \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n\n    // \"a b c\" w/ position-gap = 2\n    List<TermInfo> phraseCandidate = new ArrayList<>();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 2, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 4, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\"~1\n    query = pqF( 1F, 1, \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    fq = new FieldQuery( query, true, true );\n\n    // \"a b c\" w/ position-gap = 2\n    assertNotNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\" w/ position-gap = 3\n    phraseCandidate.clear();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 3, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 6, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n  }\n\n","sourceOld":"  public void testSearchPhraseSlop() throws Exception {\n    // \"a b c\"~0\n    Query query = pqF( \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    List<TermInfo> phraseCandidate = new ArrayList<>();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 2, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 4, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n\n    // \"a b c\"~1\n    query = pqF( 1F, 1, \"a\", \"b\", \"c\" );\n\n    // phraseHighlight = true, fieldMatch = true\n    fq = new FieldQuery( query, true, true );\n    \n    // \"a b c\" w/ position-gap = 2\n    assertNotNull( fq.searchPhrase( F, phraseCandidate ) );\n    \n    // \"a b c\" w/ position-gap = 3\n    phraseCandidate.clear();\n    phraseCandidate.add( new TermInfo( \"a\", 0, 1, 0, 1 ) );\n    phraseCandidate.add( new TermInfo( \"b\", 2, 3, 3, 1 ) );\n    phraseCandidate.add( new TermInfo( \"c\", 4, 5, 6, 1 ) );\n    assertNull( fq.searchPhrase( F, phraseCandidate ) );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79acd0ca7a7750de61516c6b6687a37c8765313b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["79acd0ca7a7750de61516c6b6687a37c8765313b"],"7327eec6fde8afb35c01f6234cb50c42a7c737d3":["79acd0ca7a7750de61516c6b6687a37c8765313b"],"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08":["7327eec6fde8afb35c01f6234cb50c42a7c737d3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","0e7bc21595222ae4f75509300fbb7726691f387f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e7bc21595222ae4f75509300fbb7726691f387f"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["79acd0ca7a7750de61516c6b6687a37c8765313b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"79acd0ca7a7750de61516c6b6687a37c8765313b":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","7327eec6fde8afb35c01f6234cb50c42a7c737d3"],"0e7bc21595222ae4f75509300fbb7726691f387f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"7327eec6fde8afb35c01f6234cb50c42a7c737d3":["cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08"],"cfd0cdef6d792d7bc9c123a4d51723e2ba3f6e08":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}