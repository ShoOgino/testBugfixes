{"path":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","commits":[{"id":"b3a34dae868734612eb6329aa0ef754f30bd2036","date":1438783154,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPkiAuth() throws Exception {\n    waitForThingsToLevelOut(10);\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = new Predicate<AuthorizationContext>() {\n      @Override\n      public boolean test(AuthorizationContext context) {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n      }\n    };\n\n    MockAuthenticationPlugin.predicate = new Predicate<ServletRequest>() {\n      @Override\n      public boolean test(ServletRequest servletRequest) {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n      }\n    };\n    QueryRequest query = new QueryRequest(params);\n    LocalSolrQueryRequest lsqr = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return null;\n      }\n    };\n    query.process(cloudClient);\n    log.info(\"count :{}\", count);\n    assertTrue(count.get() > 2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["3c81adfe72846787d1a6df3a2efec1cdf72c5d88"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bdcb86c29922edae9a14852e636303bc52df094","date":1438887454,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","sourceNew":"  @Test\n  public void testPkiAuth() throws Exception {\n    waitForThingsToLevelOut(10);\n\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n\n    try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n        TIMEOUT, TIMEOUT)) {\n      zkStateReader.getZkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n    }\n    String baseUrl = jettys.get(0).getBaseUrl().toString();\n    TestAuthorizationFramework.verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = new Predicate<AuthorizationContext>() {\n      @Override\n      public boolean test(AuthorizationContext context) {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n      }\n    };\n\n    MockAuthenticationPlugin.predicate = new Predicate<ServletRequest>() {\n      @Override\n      public boolean test(ServletRequest servletRequest) {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n      }\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cloudClient);\n    log.info(\"count :{}\", count);\n    assertTrue(count.get() > 2);\n  }\n\n","sourceOld":"  @Test\n  public void testPkiAuth() throws Exception {\n    waitForThingsToLevelOut(10);\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = new Predicate<AuthorizationContext>() {\n      @Override\n      public boolean test(AuthorizationContext context) {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n      }\n    };\n\n    MockAuthenticationPlugin.predicate = new Predicate<ServletRequest>() {\n      @Override\n      public boolean test(ServletRequest servletRequest) {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n      }\n    };\n    QueryRequest query = new QueryRequest(params);\n    LocalSolrQueryRequest lsqr = new LocalSolrQueryRequest(null, new ModifiableSolrParams()) {\n      @Override\n      public Principal getUserPrincipal() {\n        return null;\n      }\n    };\n    query.process(cloudClient);\n    log.info(\"count :{}\", count);\n    assertTrue(count.get() > 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a153e7211b3ae0ca3365e260e03daf216143f556","date":1438951292,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","sourceNew":"  @Test\n  public void testPkiAuth() throws Exception {\n    waitForThingsToLevelOut(10);\n\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n\n    try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n        TIMEOUT, TIMEOUT)) {\n      zkStateReader.getZkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n    }\n    for (JettySolrRunner jetty : jettys) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      TestAuthorizationFramework.verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = new Predicate<AuthorizationContext>() {\n      @Override\n      public boolean test(AuthorizationContext context) {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n      }\n    };\n\n    MockAuthenticationPlugin.predicate = new Predicate<ServletRequest>() {\n      @Override\n      public boolean test(ServletRequest servletRequest) {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n      }\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cloudClient);\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(),count.get() > 2);\n  }\n\n","sourceOld":"  @Test\n  public void testPkiAuth() throws Exception {\n    waitForThingsToLevelOut(10);\n\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n\n    try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n        TIMEOUT, TIMEOUT)) {\n      zkStateReader.getZkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n    }\n    String baseUrl = jettys.get(0).getBaseUrl().toString();\n    TestAuthorizationFramework.verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = new Predicate<AuthorizationContext>() {\n      @Override\n      public boolean test(AuthorizationContext context) {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n      }\n    };\n\n    MockAuthenticationPlugin.predicate = new Predicate<ServletRequest>() {\n      @Override\n      public boolean test(ServletRequest servletRequest) {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n      }\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cloudClient);\n    log.info(\"count :{}\", count);\n    assertTrue(count.get() > 2);\n  }\n\n","bugFix":null,"bugIntro":["3c81adfe72846787d1a6df3a2efec1cdf72c5d88"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ca39aa9ac422d6585b43cdf5b24ad8874ddc8fa8","date":1439117478,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","sourceNew":"  @Test\n  public void testPkiAuth() throws Exception {\n    waitForThingsToLevelOut(10);\n\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n\n    try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n        TIMEOUT, TIMEOUT)) {\n      zkStateReader.getZkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n    }\n    for (JettySolrRunner jetty : jettys) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = new Predicate<AuthorizationContext>() {\n      @Override\n      public boolean test(AuthorizationContext context) {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n      }\n    };\n\n    MockAuthenticationPlugin.predicate = new Predicate<ServletRequest>() {\n      @Override\n      public boolean test(ServletRequest servletRequest) {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n      }\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cloudClient);\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(),count.get() > 2);\n  }\n\n","sourceOld":"  @Test\n  public void testPkiAuth() throws Exception {\n    waitForThingsToLevelOut(10);\n\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n\n    try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n        TIMEOUT, TIMEOUT)) {\n      zkStateReader.getZkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n    }\n    for (JettySolrRunner jetty : jettys) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      TestAuthorizationFramework.verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = new Predicate<AuthorizationContext>() {\n      @Override\n      public boolean test(AuthorizationContext context) {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n      }\n    };\n\n    MockAuthenticationPlugin.predicate = new Predicate<ServletRequest>() {\n      @Override\n      public boolean test(ServletRequest servletRequest) {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n      }\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cloudClient);\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(),count.get() > 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","sourceNew":"  @Test\n  public void testPkiAuth() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    // TODO make a SolrJ helper class for this\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n    zkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = new Predicate<AuthorizationContext>() {\n      @Override\n      public boolean test(AuthorizationContext context) {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n      }\n    };\n\n    MockAuthenticationPlugin.predicate = new Predicate<ServletRequest>() {\n      @Override\n      public boolean test(ServletRequest servletRequest) {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n      }\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cluster.getSolrClient(), \"collection\");\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(),count.get() > 2);\n  }\n\n","sourceOld":"  @Test\n  public void testPkiAuth() throws Exception {\n    waitForThingsToLevelOut(10);\n\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n\n    try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n        TIMEOUT, TIMEOUT)) {\n      zkStateReader.getZkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n    }\n    for (JettySolrRunner jetty : jettys) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = new Predicate<AuthorizationContext>() {\n      @Override\n      public boolean test(AuthorizationContext context) {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n      }\n    };\n\n    MockAuthenticationPlugin.predicate = new Predicate<ServletRequest>() {\n      @Override\n      public boolean test(ServletRequest servletRequest) {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n      }\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cloudClient);\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(),count.get() > 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","sourceNew":"  @Test\n  public void testPkiAuth() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    // TODO make a SolrJ helper class for this\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n    zkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = new Predicate<AuthorizationContext>() {\n      @Override\n      public boolean test(AuthorizationContext context) {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n      }\n    };\n\n    MockAuthenticationPlugin.predicate = new Predicate<ServletRequest>() {\n      @Override\n      public boolean test(ServletRequest servletRequest) {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n      }\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cluster.getSolrClient(), \"collection\");\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(),count.get() > 2);\n  }\n\n","sourceOld":"  @Test\n  public void testPkiAuth() throws Exception {\n    waitForThingsToLevelOut(10);\n\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n\n    try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n        TIMEOUT, TIMEOUT)) {\n      zkStateReader.getZkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n    }\n    for (JettySolrRunner jetty : jettys) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      verifySecurityStatus(cloudClient.getLbClient().getHttpClient(), baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = new Predicate<AuthorizationContext>() {\n      @Override\n      public boolean test(AuthorizationContext context) {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n      }\n    };\n\n    MockAuthenticationPlugin.predicate = new Predicate<ServletRequest>() {\n      @Override\n      public boolean test(ServletRequest servletRequest) {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n      }\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cloudClient);\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(),count.get() > 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c81adfe72846787d1a6df3a2efec1cdf72c5d88","date":1515408210,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","sourceNew":"  @Test\n  public void testPkiAuth() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    // TODO make a SolrJ helper class for this\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n    zkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = context -> {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n    };\n\n    MockAuthenticationPlugin.predicate = servletRequest -> {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cluster.getSolrClient(), \"collection\");\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(), count.get() > 2);\n\n  }\n\n","sourceOld":"  @Test\n  public void testPkiAuth() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    // TODO make a SolrJ helper class for this\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n    zkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = new Predicate<AuthorizationContext>() {\n      @Override\n      public boolean test(AuthorizationContext context) {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n      }\n    };\n\n    MockAuthenticationPlugin.predicate = new Predicate<ServletRequest>() {\n      @Override\n      public boolean test(ServletRequest servletRequest) {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n      }\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cluster.getSolrClient(), \"collection\");\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(),count.get() > 2);\n  }\n\n","bugFix":["a153e7211b3ae0ca3365e260e03daf216143f556","b3a34dae868734612eb6329aa0ef754f30bd2036"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","sourceNew":"  @Test\n  public void testPkiAuth() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    // TODO make a SolrJ helper class for this\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n    zkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = context -> {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n    };\n\n    MockAuthenticationPlugin.predicate = servletRequest -> {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cluster.getSolrClient(), \"collection\");\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(), count.get() > 2);\n\n  }\n\n","sourceOld":"  @Test\n  public void testPkiAuth() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    // TODO make a SolrJ helper class for this\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n    zkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = new Predicate<AuthorizationContext>() {\n      @Override\n      public boolean test(AuthorizationContext context) {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n      }\n    };\n\n    MockAuthenticationPlugin.predicate = new Predicate<ServletRequest>() {\n      @Override\n      public boolean test(ServletRequest servletRequest) {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n      }\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cluster.getSolrClient(), \"collection\");\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(),count.get() > 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85397dd93927c17347c6bf89800cd0fc566c2d03","date":1544610812,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","sourceNew":"  @Test\n  public void testPkiAuth() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    // TODO make a SolrJ helper class for this\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n    zkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = context -> {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n    };\n\n    MockAuthenticationPlugin.predicate = servletRequest -> {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cluster.getSolrClient(), \"collection\");\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(), count.get() > 2);\n    assertPkiAuthMetricsMinimums(2, 2, 0, 0, 0, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testPkiAuth() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    // TODO make a SolrJ helper class for this\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n    zkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = context -> {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n    };\n\n    MockAuthenticationPlugin.predicate = servletRequest -> {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cluster.getSolrClient(), \"collection\");\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(), count.get() > 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb2fdf8e419623d01c2500e64f326b01ea4b760b","date":1544656477,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","sourceNew":"  @Test\n  public void testPkiAuth() throws Exception {\n    // TODO make a SolrJ helper class for this\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n    zkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = context -> {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n    };\n\n    MockAuthenticationPlugin.predicate = servletRequest -> {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cluster.getSolrClient(), COLLECTION);\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(), count.get() > 2);\n    assertPkiAuthMetricsMinimums(2, 2, 0, 0, 0, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testPkiAuth() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"collection\", \"conf\", 2, 1).process(cluster.getSolrClient());\n\n    // TODO make a SolrJ helper class for this\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n    zkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = context -> {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n    };\n\n    MockAuthenticationPlugin.predicate = servletRequest -> {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cluster.getSolrClient(), \"collection\");\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(), count.get() > 2);\n    assertPkiAuthMetricsMinimums(2, 2, 0, 0, 0, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1747a7f5fca08ea77329319431be445d363ba102","date":1565643834,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","sourceNew":"  @Test\n  public void testPkiAuth() throws Exception {\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = context -> {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n    };\n\n    MockAuthenticationPlugin.predicate = servletRequest -> {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cluster.getSolrClient(), COLLECTION);\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(), count.get() > 2);\n    assertPkiAuthMetricsMinimums(2, 2, 0, 0, 0, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testPkiAuth() throws Exception {\n    // TODO make a SolrJ helper class for this\n    byte[] bytes = Utils.toJSON(makeMap(\"authorization\", singletonMap(\"class\", MockAuthorizationPlugin.class.getName()),\n        \"authentication\", singletonMap(\"class\", MockAuthenticationPlugin.class.getName())));\n    zkClient().setData(ZkStateReader.SOLR_SECURITY_CONF_PATH, bytes, true);\n\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = context -> {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n    };\n\n    MockAuthenticationPlugin.predicate = servletRequest -> {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cluster.getSolrClient(), COLLECTION);\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(), count.get() > 2);\n    assertPkiAuthMetricsMinimums(2, 2, 0, 0, 0, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42210058b8ae092085fa2658880b69931512e8bf","date":1579289439,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","pathOld":"solr/core/src/test/org/apache/solr/security/PKIAuthenticationIntegrationTest#testPkiAuth().mjava","sourceNew":"  @Test\n  public void testPkiAuth() throws Exception {\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = context -> {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n    };\n\n    MockAuthenticationPlugin.predicate = servletRequest -> {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cluster.getSolrClient(), COLLECTION);\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(), count.get() > 2);\n    assertPkiAuthMetricsMinimums(2, 2, 0, 0, 0, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testPkiAuth() throws Exception {\n    HttpClient httpClient = cluster.getSolrClient().getHttpClient();\n    for (JettySolrRunner jetty : cluster.getJettySolrRunners()) {\n      String baseUrl = jetty.getBaseUrl().toString();\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authorization\", \"authorization/class\", MockAuthorizationPlugin.class.getName(), 20);\n      verifySecurityStatus(httpClient, baseUrl + \"/admin/authentication\", \"authentication.enabled\", \"true\", 20);\n    }\n    log.info(\"Starting test\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"__user\", \"solr\");\n    params.add(\"__pwd\", \"SolrRocks\");\n    // This should work fine.\n    final AtomicInteger count = new AtomicInteger();\n\n\n    MockAuthorizationPlugin.predicate = context -> {\n        if (\"/select\".equals(context.getResource())) {\n          Principal principal = context.getUserPrincipal();\n          log.info(\"principalIs : {}\", principal);\n          if (principal != null && principal.getName().equals(\"solr\")) {\n            count.incrementAndGet();\n          }\n        }\n        return true;\n    };\n\n    MockAuthenticationPlugin.predicate = servletRequest -> {\n        String s = ((HttpServletRequest) servletRequest).getQueryString();\n        if (s != null && s.contains(\"__user=solr\") && s.contains(\"__pwd=SolrRocks\")) {\n          servletRequest.setAttribute(Principal.class.getName(), \"solr\");\n        }\n        return true;\n    };\n    QueryRequest query = new QueryRequest(params);\n    query.process(cluster.getSolrClient(), COLLECTION);\n    assertTrue(\"all nodes must get the user solr , no:of nodes got solr : \" + count.get(), count.get() > 2);\n    assertPkiAuthMetricsMinimums(2, 2, 0, 0, 0, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6bdcb86c29922edae9a14852e636303bc52df094":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"b94236357aaa22b76c10629851fe4e376e0cea82":["636a04bc82e662bf141a55f1d10f52e1c76c727b","3c81adfe72846787d1a6df3a2efec1cdf72c5d88"],"3c81adfe72846787d1a6df3a2efec1cdf72c5d88":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"ca39aa9ac422d6585b43cdf5b24ad8874ddc8fa8":["a153e7211b3ae0ca3365e260e03daf216143f556"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["ca39aa9ac422d6585b43cdf5b24ad8874ddc8fa8","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"42210058b8ae092085fa2658880b69931512e8bf":["1747a7f5fca08ea77329319431be445d363ba102"],"a153e7211b3ae0ca3365e260e03daf216143f556":["6bdcb86c29922edae9a14852e636303bc52df094"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["ca39aa9ac422d6585b43cdf5b24ad8874ddc8fa8"],"85397dd93927c17347c6bf89800cd0fc566c2d03":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1747a7f5fca08ea77329319431be445d363ba102":["eb2fdf8e419623d01c2500e64f326b01ea4b760b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["42210058b8ae092085fa2658880b69931512e8bf"],"eb2fdf8e419623d01c2500e64f326b01ea4b760b":["85397dd93927c17347c6bf89800cd0fc566c2d03"]},"commit2Childs":{"6bdcb86c29922edae9a14852e636303bc52df094":["a153e7211b3ae0ca3365e260e03daf216143f556"],"b94236357aaa22b76c10629851fe4e376e0cea82":["85397dd93927c17347c6bf89800cd0fc566c2d03"],"3c81adfe72846787d1a6df3a2efec1cdf72c5d88":["b94236357aaa22b76c10629851fe4e376e0cea82"],"ca39aa9ac422d6585b43cdf5b24ad8874ddc8fa8":["f03e4bed5023ec3ef93a771b8888cae991cf448d","636a04bc82e662bf141a55f1d10f52e1c76c727b"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["6bdcb86c29922edae9a14852e636303bc52df094"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"a153e7211b3ae0ca3365e260e03daf216143f556":["ca39aa9ac422d6585b43cdf5b24ad8874ddc8fa8"],"42210058b8ae092085fa2658880b69931512e8bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["b94236357aaa22b76c10629851fe4e376e0cea82","3c81adfe72846787d1a6df3a2efec1cdf72c5d88","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"85397dd93927c17347c6bf89800cd0fc566c2d03":["eb2fdf8e419623d01c2500e64f326b01ea4b760b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"1747a7f5fca08ea77329319431be445d363ba102":["42210058b8ae092085fa2658880b69931512e8bf"],"eb2fdf8e419623d01c2500e64f326b01ea4b760b":["1747a7f5fca08ea77329319431be445d363ba102"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}