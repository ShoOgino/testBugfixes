{"path":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#getReader(IOContext).mjava","sourceNew":"  /** Returns a {@link SegmentReader}. */\n  public SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, context);\n      if (liveDocs == null) {\n        liveDocs = reader.getLiveDocs();\n      }\n    }\n    \n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","sourceOld":"  /** Returns a {@link SegmentReader}. */\n  public SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, context);\n      if (liveDocs == null) {\n        liveDocs = reader.getLiveDocs();\n      }\n    }\n    \n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","sourceNew":"  /** Returns a {@link SegmentReader}. */\n  public SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, writer.segmentInfos.getIndexCreatedVersionMajor(), context);\n      if (liveDocs == null) {\n        liveDocs = reader.getLiveDocs();\n      }\n    }\n    \n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","sourceOld":"  /** Returns a {@link SegmentReader}. */\n  public SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, context);\n      if (liveDocs == null) {\n        liveDocs = reader.getLiveDocs();\n      }\n    }\n    \n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","sourceNew":"  /** Returns a {@link SegmentReader}. */\n  public SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, writer.segmentInfos.getIndexCreatedVersionMajor(), context);\n      if (liveDocs == null) {\n        liveDocs = reader.getLiveDocs();\n      }\n    }\n    \n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","sourceOld":"  /** Returns a {@link SegmentReader}. */\n  public SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, context);\n      if (liveDocs == null) {\n        liveDocs = reader.getLiveDocs();\n      }\n    }\n    \n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","sourceNew":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, writer.segmentInfos.getIndexCreatedVersionMajor(), context);\n      if (liveDocs == null) {\n        liveDocs = reader.getLiveDocs();\n      }\n    }\n    \n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","sourceOld":"  /** Returns a {@link SegmentReader}. */\n  public SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, writer.segmentInfos.getIndexCreatedVersionMajor(), context);\n      if (liveDocs == null) {\n        liveDocs = reader.getLiveDocs();\n      }\n    }\n    \n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","sourceNew":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, writer.segmentInfos.getIndexCreatedVersionMajor(), context);\n      if (liveDocs == null) {\n        liveDocs = reader.getLiveDocs();\n      }\n    }\n    \n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","sourceOld":"  /** Returns a {@link SegmentReader}. */\n  public SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, writer.segmentInfos.getIndexCreatedVersionMajor(), context);\n      if (liveDocs == null) {\n        liveDocs = reader.getLiveDocs();\n      }\n    }\n    \n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","sourceNew":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, writer.segmentInfos.getIndexCreatedVersionMajor(), context);\n      if (liveDocs == null) {\n        liveDocs = reader.getLiveDocs();\n      }\n    }\n    \n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","sourceOld":"  /** Returns a {@link SegmentReader}. */\n  public SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, writer.segmentInfos.getIndexCreatedVersionMajor(), context);\n      if (liveDocs == null) {\n        liveDocs = reader.getLiveDocs();\n      }\n    }\n    \n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d60c1bb96a28a26d197c36299f7b6c9c5da617a1","date":1522484702,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","sourceNew":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, indexCreatedVersionMajor, context);\n      pendingDeletes.onNewReader(reader, info);\n    }\n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","sourceOld":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, writer.segmentInfos.getIndexCreatedVersionMajor(), context);\n      if (liveDocs == null) {\n        liveDocs = reader.getLiveDocs();\n      }\n    }\n    \n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa5e39259dfd4a68287c824d3b7e1bc9097dc895","date":1522505041,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","sourceNew":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, indexCreatedVersionMajor, context);\n      pendingDeletes.onNewReader(reader, info);\n    }\n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","sourceOld":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, writer.segmentInfos.getIndexCreatedVersionMajor(), context);\n      if (liveDocs == null) {\n        liveDocs = reader.getLiveDocs();\n      }\n    }\n    \n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72","date":1523453225,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","sourceNew":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, indexCreatedVersionMajor, context);\n      pendingDeletes.onNewReader(reader, info);\n    } else if (liveDocsSharedPending) {\n      markAsShared();\n    }\n\n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","sourceOld":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, indexCreatedVersionMajor, context);\n      pendingDeletes.onNewReader(reader, info);\n    }\n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","sourceNew":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, indexCreatedVersionMajor, context);\n      pendingDeletes.onNewReader(reader, info);\n    } else if (liveDocsSharedPending) {\n      markAsShared();\n    }\n\n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","sourceOld":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, indexCreatedVersionMajor, context);\n      pendingDeletes.onNewReader(reader, info);\n    }\n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"940aa0d841c8d021f8bb56c2fc372aed5394c1ef","date":1525437522,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","sourceNew":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, indexCreatedVersionMajor, context);\n      pendingDeletes.onNewReader(reader, info);\n    }\n\n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","sourceOld":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, indexCreatedVersionMajor, context);\n      pendingDeletes.onNewReader(reader, info);\n    } else if (liveDocsSharedPending) {\n      markAsShared();\n    }\n\n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790693f23f4e88a59fbb25e47cc25f6d493b03cb","date":1553077690,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","sourceNew":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, indexCreatedVersionMajor, true, context);\n      pendingDeletes.onNewReader(reader, info);\n    }\n\n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","sourceOld":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, indexCreatedVersionMajor, context);\n      pendingDeletes.onNewReader(reader, info);\n    }\n\n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","sourceNew":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, indexCreatedVersionMajor, true, context, readerAttributes);\n      pendingDeletes.onNewReader(reader, info);\n    }\n\n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","sourceOld":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, indexCreatedVersionMajor, true, context);\n      pendingDeletes.onNewReader(reader, info);\n    }\n\n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4e83191a3e02851a0b67e5335e6922f3e9ea86d","date":1583489709,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","sourceNew":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, indexCreatedVersionMajor, true, context);\n      pendingDeletes.onNewReader(reader, info);\n    }\n\n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","sourceOld":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, indexCreatedVersionMajor, true, context, readerAttributes);\n      pendingDeletes.onNewReader(reader, info);\n    }\n\n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bec68e7c41fed133827595747d853cad504e481e","date":1583501052,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#getReader(IOContext).mjava","sourceNew":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, indexCreatedVersionMajor, context);\n      pendingDeletes.onNewReader(reader, info);\n    }\n\n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","sourceOld":"  /** Returns a {@link SegmentReader}. */\n  public synchronized SegmentReader getReader(IOContext context) throws IOException {\n    if (reader == null) {\n      // We steal returned ref:\n      reader = new SegmentReader(info, indexCreatedVersionMajor, true, context);\n      pendingDeletes.onNewReader(reader, info);\n    }\n\n    // Ref for caller\n    reader.incRef();\n    return reader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["940aa0d841c8d021f8bb56c2fc372aed5394c1ef"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["790693f23f4e88a59fbb25e47cc25f6d493b03cb"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"bec68e7c41fed133827595747d853cad504e481e":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["28288370235ed02234a64753cdbf0c6ec096304a","d60c1bb96a28a26d197c36299f7b6c9c5da617a1"],"d60c1bb96a28a26d197c36299f7b6c9c5da617a1":["28288370235ed02234a64753cdbf0c6ec096304a"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895","9ae87c7be37e537f40fa3bb2c35fa4a368d12a72"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["92212fd254551a0b1156aafc3a1a6ed1a43932ad","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["31741cf1390044e38a2ec3127cf302ba841bfd75","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"940aa0d841c8d021f8bb56c2fc372aed5394c1ef":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bec68e7c41fed133827595747d853cad504e481e"]},"commit2Childs":{"790693f23f4e88a59fbb25e47cc25f6d493b03cb":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["31741cf1390044e38a2ec3127cf302ba841bfd75","92212fd254551a0b1156aafc3a1a6ed1a43932ad"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["a4e83191a3e02851a0b67e5335e6922f3e9ea86d"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"bec68e7c41fed133827595747d853cad504e481e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["43345f1452f9510f8aaadae6156fe0c834e7d957","9ae87c7be37e537f40fa3bb2c35fa4a368d12a72"],"d60c1bb96a28a26d197c36299f7b6c9c5da617a1":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["940aa0d841c8d021f8bb56c2fc372aed5394c1ef"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895","d60c1bb96a28a26d197c36299f7b6c9c5da617a1"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","28288370235ed02234a64753cdbf0c6ec096304a"],"a4e83191a3e02851a0b67e5335e6922f3e9ea86d":["bec68e7c41fed133827595747d853cad504e481e"],"940aa0d841c8d021f8bb56c2fc372aed5394c1ef":["790693f23f4e88a59fbb25e47cc25f6d493b03cb"],"9ae87c7be37e537f40fa3bb2c35fa4a368d12a72":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}