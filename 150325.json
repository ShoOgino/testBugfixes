{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#getMatchingChild(XMLStreamReader).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#getMatchingChild(XMLStreamReader).mjava","pathOld":"/dev/null","sourceNew":"    private Node getMatchingChild(XMLStreamReader parser) {\n      if (childNodes == null)\n        return null;\n      String localName = parser.getLocalName();\n      for (Node n : childNodes) {\n        if (n.name.equals(localName)) {\n          if (n.attribAndValues == null)\n            return n;\n          if (checkForAttributes(parser, n.attribAndValues))\n            return n;\n        }\n      }\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5bb8a93dd58a4cde932f3e3ee4e13dc6832949","date":1252931993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#getMatchingChild(XMLStreamReader).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#getMatchingChild(XMLStreamReader).mjava","sourceNew":"    /**check if the current tag is to be parsed or not. if yes return the Node object\n     */\n    private Node getMatchingChild(XMLStreamReader parser) {\n      if (childNodes == null)\n        return null;\n      String localName = parser.getLocalName();\n      for (Node n : childNodes) {\n        if (n.name.equals(localName)) {\n          if (n.attribAndValues == null)\n            return n;\n          if (checkForAttributes(parser, n.attribAndValues))\n            return n;\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    private Node getMatchingChild(XMLStreamReader parser) {\n      if (childNodes == null)\n        return null;\n      String localName = parser.getLocalName();\n      for (Node n : childNodes) {\n        if (n.name.equals(localName)) {\n          if (n.attribAndValues == null)\n            return n;\n          if (checkForAttributes(parser, n.attribAndValues))\n            return n;\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f2a93a28913071a0b713be1d4b8a1181388d550","date":1254814948,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#getMatchingNode(XMLStreamReader,List[Node]).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader.Node#getMatchingChild(XMLStreamReader).mjava","sourceNew":"    /**\n     * Check if the current tag is to be parsed or not. We step through the\n     * supplied List \"searchList\" looking for a match. If matched, return the\n     * Node object.\n     */\n    private Node getMatchingNode(XMLStreamReader parser,List<Node> searchL){\n      if (searchL == null)\n        return null;\n      String localName = parser.getLocalName();\n      for (Node n : searchL) {\n        if (n.name.equals(localName)) {\n          if (n.attribAndValues == null)\n            return n;\n          if (checkForAttributes(parser, n.attribAndValues))\n            return n;\n        }\n      }\n      return null;\n    }\n\n","sourceOld":"    /**check if the current tag is to be parsed or not. if yes return the Node object\n     */\n    private Node getMatchingChild(XMLStreamReader parser) {\n      if (childNodes == null)\n        return null;\n      String localName = parser.getLocalName();\n      for (Node n : childNodes) {\n        if (n.name.equals(localName)) {\n          if (n.attribAndValues == null)\n            return n;\n          if (checkForAttributes(parser, n.attribAndValues))\n            return n;\n        }\n      }\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb5bb8a93dd58a4cde932f3e3ee4e13dc6832949":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f2a93a28913071a0b713be1d4b8a1181388d550":["cb5bb8a93dd58a4cde932f3e3ee4e13dc6832949"]},"commit2Childs":{"cb5bb8a93dd58a4cde932f3e3ee4e13dc6832949":["7f2a93a28913071a0b713be1d4b8a1181388d550"],"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["cb5bb8a93dd58a4cde932f3e3ee4e13dc6832949"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7f2a93a28913071a0b713be1d4b8a1181388d550":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","7f2a93a28913071a0b713be1d4b8a1181388d550"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}