{"path":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testNegativeScore().mjava","commits":[{"id":"89fdbc9d0b2292ddcdb7d6b745c47a190b1d7988","date":1476202055,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testNegativeScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testNegativeScore() throws Exception {\n    DisjunctionMaxQuery q = new DisjunctionMaxQuery(\n        Arrays.asList(\n            new BoostQuery(tq(\"hed\", \"albino\"), -1f), \n            new BoostQuery(tq(\"hed\", \"elephant\"), -1f)\n        ), 0.0f);\n    \n    ScoreDoc[] h = s.search(q, 1000).scoreDocs;\n\n    assertEquals(\"all docs should match \" + q.toString(), 4, h.length);\n    \n    for (int i = 0; i < h.length; i++) {\n      assertTrue(\"score should be negative\", h[i].score < 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testNegativeScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testNegativeScore() throws Exception {\n    DisjunctionMaxQuery q = new DisjunctionMaxQuery(\n        Arrays.asList(\n            new BoostQuery(tq(\"hed\", \"albino\"), -1f), \n            new BoostQuery(tq(\"hed\", \"elephant\"), -1f)\n        ), 0.0f);\n    \n    ScoreDoc[] h = s.search(q, 1000).scoreDocs;\n\n    assertEquals(\"all docs should match \" + q.toString(), 4, h.length);\n    \n    for (int i = 0; i < h.length; i++) {\n      assertTrue(\"score should be negative\", h[i].score < 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","date":1512565563,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testNegativeScore().mjava","sourceNew":null,"sourceOld":"  public void testNegativeScore() throws Exception {\n    DisjunctionMaxQuery q = new DisjunctionMaxQuery(\n        Arrays.asList(\n            new BoostQuery(tq(\"hed\", \"albino\"), -1f), \n            new BoostQuery(tq(\"hed\", \"elephant\"), -1f)\n        ), 0.0f);\n    \n    ScoreDoc[] h = s.search(q, 1000).scoreDocs;\n\n    assertEquals(\"all docs should match \" + q.toString(), 4, h.length);\n    \n    for (int i = 0; i < h.length; i++) {\n      assertTrue(\"score should be negative\", h[i].score < 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["89fdbc9d0b2292ddcdb7d6b745c47a190b1d7988"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89fdbc9d0b2292ddcdb7d6b745c47a190b1d7988":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89fdbc9d0b2292ddcdb7d6b745c47a190b1d7988"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"]},"commit2Childs":{"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89fdbc9d0b2292ddcdb7d6b745c47a190b1d7988","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"89fdbc9d0b2292ddcdb7d6b745c47a190b1d7988":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}