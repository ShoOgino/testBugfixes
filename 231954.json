{"path":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","commits":[{"id":"4b3d16cba9355e2e97962eb1c441bbd0b6735c15","date":1357426290,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/sandbox/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","sourceNew":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      FakePassageFormatter f1 = new FakePassageFormatter();\n      PostingsHighlighter p1 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f1);\n      FakePassageFormatter f2 = new FakePassageFormatter();\n      PostingsHighlighter p2 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f2);\n      BooleanQuery bq = new BooleanQuery(false);\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      TopDocs td = is.search(bq, 1);\n      p1.highlight(\"body\", bq, is, td, n);\n      p2.highlight(\"body\", bq, is, td, n+1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","sourceOld":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      FakePassageFormatter f1 = new FakePassageFormatter();\n      PostingsHighlighter p1 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f1);\n      FakePassageFormatter f2 = new FakePassageFormatter();\n      PostingsHighlighter p2 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f2);\n      BooleanQuery bq = new BooleanQuery(false);\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      TopDocs td = is.search(bq, 1);\n      p1.highlight(\"body\", bq, is, td, n);\n      p2.highlight(\"body\", bq, is, td, n+1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      FakePassageFormatter f1 = new FakePassageFormatter();\n      PostingsHighlighter p1 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f1);\n      FakePassageFormatter f2 = new FakePassageFormatter();\n      PostingsHighlighter p2 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f2);\n      BooleanQuery bq = new BooleanQuery(false);\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      TopDocs td = is.search(bq, 1);\n      p1.highlight(\"body\", bq, is, td, n);\n      p2.highlight(\"body\", bq, is, td, n+1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4831dd345148fcd7c33877b449ade21fc45459d8","date":1363963811,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","sourceNew":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      final FakePassageFormatter f1 = new FakePassageFormatter();\n      PostingsHighlighter p1 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT)) {\n          @Override\n          protected PassageFormatter getFormatter(String field) {\n            assertEquals(\"body\", field);\n            return f1;\n          }\n        };\n\n      final FakePassageFormatter f2 = new FakePassageFormatter();\n      PostingsHighlighter p2 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT)) {\n          @Override\n          protected PassageFormatter getFormatter(String field) {\n            assertEquals(\"body\", field);\n            return f2;\n          }\n        };\n\n      BooleanQuery bq = new BooleanQuery(false);\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      TopDocs td = is.search(bq, 1);\n      p1.highlight(\"body\", bq, is, td, n);\n      p2.highlight(\"body\", bq, is, td, n+1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","sourceOld":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      FakePassageFormatter f1 = new FakePassageFormatter();\n      PostingsHighlighter p1 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f1);\n      FakePassageFormatter f2 = new FakePassageFormatter();\n      PostingsHighlighter p2 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT), \n                                                       new PassageScorer(),\n                                                       f2);\n      BooleanQuery bq = new BooleanQuery(false);\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      TopDocs td = is.search(bq, 1);\n      p1.highlight(\"body\", bq, is, td, n);\n      p2.highlight(\"body\", bq, is, td, n+1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"157d49068cfc35be5fed366f40bc20cbcddea695","date":1364791189,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","sourceNew":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      final FakePassageFormatter f1 = new FakePassageFormatter();\n      PostingsHighlighter p1 = new PostingsHighlighter(Integer.MAX_VALUE-1) {\n          @Override\n          protected PassageFormatter getFormatter(String field) {\n            assertEquals(\"body\", field);\n            return f1;\n          }\n        };\n\n      final FakePassageFormatter f2 = new FakePassageFormatter();\n      PostingsHighlighter p2 = new PostingsHighlighter(Integer.MAX_VALUE-1) {\n          @Override\n          protected PassageFormatter getFormatter(String field) {\n            assertEquals(\"body\", field);\n            return f2;\n          }\n        };\n\n      BooleanQuery bq = new BooleanQuery(false);\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      TopDocs td = is.search(bq, 1);\n      p1.highlight(\"body\", bq, is, td, n);\n      p2.highlight(\"body\", bq, is, td, n+1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","sourceOld":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      final FakePassageFormatter f1 = new FakePassageFormatter();\n      PostingsHighlighter p1 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT)) {\n          @Override\n          protected PassageFormatter getFormatter(String field) {\n            assertEquals(\"body\", field);\n            return f1;\n          }\n        };\n\n      final FakePassageFormatter f2 = new FakePassageFormatter();\n      PostingsHighlighter p2 = new PostingsHighlighter(Integer.MAX_VALUE-1, \n                                                       BreakIterator.getSentenceInstance(Locale.ROOT)) {\n          @Override\n          protected PassageFormatter getFormatter(String field) {\n            assertEquals(\"body\", field);\n            return f2;\n          }\n        };\n\n      BooleanQuery bq = new BooleanQuery(false);\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      TopDocs td = is.search(bq, 1);\n      p1.highlight(\"body\", bq, is, td, n);\n      p2.highlight(\"body\", bq, is, td, n+1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","sourceNew":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      final FakePassageFormatter f1 = new FakePassageFormatter();\n      PostingsHighlighter p1 = new PostingsHighlighter(Integer.MAX_VALUE-1) {\n          @Override\n          protected PassageFormatter getFormatter(String field) {\n            assertEquals(\"body\", field);\n            return f1;\n          }\n        };\n\n      final FakePassageFormatter f2 = new FakePassageFormatter();\n      PostingsHighlighter p2 = new PostingsHighlighter(Integer.MAX_VALUE-1) {\n          @Override\n          protected PassageFormatter getFormatter(String field) {\n            assertEquals(\"body\", field);\n            return f2;\n          }\n        };\n\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      TopDocs td = is.search(bq.build(), 1);\n      p1.highlight(\"body\", bq.build(), is, td, n);\n      p2.highlight(\"body\", bq.build(), is, td, n+1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","sourceOld":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      final FakePassageFormatter f1 = new FakePassageFormatter();\n      PostingsHighlighter p1 = new PostingsHighlighter(Integer.MAX_VALUE-1) {\n          @Override\n          protected PassageFormatter getFormatter(String field) {\n            assertEquals(\"body\", field);\n            return f1;\n          }\n        };\n\n      final FakePassageFormatter f2 = new FakePassageFormatter();\n      PostingsHighlighter p2 = new PostingsHighlighter(Integer.MAX_VALUE-1) {\n          @Override\n          protected PassageFormatter getFormatter(String field) {\n            assertEquals(\"body\", field);\n            return f2;\n          }\n        };\n\n      BooleanQuery bq = new BooleanQuery(false);\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      TopDocs td = is.search(bq, 1);\n      p1.highlight(\"body\", bq, is, td, n);\n      p2.highlight(\"body\", bq, is, td, n+1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"381618eac2691bb34ab9a3fca76ad55c6274517e","date":1495564791,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","sourceNew":null,"sourceOld":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      final FakePassageFormatter f1 = new FakePassageFormatter();\n      PostingsHighlighter p1 = new PostingsHighlighter(Integer.MAX_VALUE-1) {\n          @Override\n          protected PassageFormatter getFormatter(String field) {\n            assertEquals(\"body\", field);\n            return f1;\n          }\n        };\n\n      final FakePassageFormatter f2 = new FakePassageFormatter();\n      PostingsHighlighter p2 = new PostingsHighlighter(Integer.MAX_VALUE-1) {\n          @Override\n          protected PassageFormatter getFormatter(String field) {\n            assertEquals(\"body\", field);\n            return f2;\n          }\n        };\n\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      TopDocs td = is.search(bq.build(), 1);\n      p1.highlight(\"body\", bq.build(), is, td, n);\n      p2.highlight(\"body\", bq.build(), is, td, n+1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestPostingsHighlighterRanking#checkQuery(IndexSearcher,Query,int,int).mjava","sourceNew":null,"sourceOld":"  private void checkQuery(IndexSearcher is, Query query, int doc, int maxTopN) throws IOException {\n    for (int n = 1; n < maxTopN; n++) {\n      final FakePassageFormatter f1 = new FakePassageFormatter();\n      PostingsHighlighter p1 = new PostingsHighlighter(Integer.MAX_VALUE-1) {\n          @Override\n          protected PassageFormatter getFormatter(String field) {\n            assertEquals(\"body\", field);\n            return f1;\n          }\n        };\n\n      final FakePassageFormatter f2 = new FakePassageFormatter();\n      PostingsHighlighter p2 = new PostingsHighlighter(Integer.MAX_VALUE-1) {\n          @Override\n          protected PassageFormatter getFormatter(String field) {\n            assertEquals(\"body\", field);\n            return f2;\n          }\n        };\n\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(query, BooleanClause.Occur.MUST);\n      bq.add(new TermQuery(new Term(\"id\", Integer.toString(doc))), BooleanClause.Occur.MUST);\n      TopDocs td = is.search(bq.build(), 1);\n      p1.highlight(\"body\", bq.build(), is, td, n);\n      p2.highlight(\"body\", bq.build(), is, td, n+1);\n      assertTrue(f2.seen.containsAll(f1.seen));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["157d49068cfc35be5fed366f40bc20cbcddea695"],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","381618eac2691bb34ab9a3fca76ad55c6274517e"],"4831dd345148fcd7c33877b449ade21fc45459d8":["4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"157d49068cfc35be5fed366f40bc20cbcddea695":["4831dd345148fcd7c33877b449ade21fc45459d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["381618eac2691bb34ab9a3fca76ad55c6274517e"]},"commit2Childs":{"381618eac2691bb34ab9a3fca76ad55c6274517e":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["381618eac2691bb34ab9a3fca76ad55c6274517e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"4b3d16cba9355e2e97962eb1c441bbd0b6735c15":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4831dd345148fcd7c33877b449ade21fc45459d8"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"4831dd345148fcd7c33877b449ade21fc45459d8":["157d49068cfc35be5fed366f40bc20cbcddea695"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4b3d16cba9355e2e97962eb1c441bbd0b6735c15"],"157d49068cfc35be5fed366f40bc20cbcddea695":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}