{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads in the posting lists we do not store the length of\n    // every payload. Instead we omit the length for a payload if the previous payload had\n    // the same length.\n    // However, in order to support skipping the payload length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength             --> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload length equals the length at the previous\n    //         skip point\n    if (curStorePayloads) {\n      int delta = curDoc - lastSkipDoc[level];\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\n        // the current payload length equals the length at the previous skip point,\n        // so we don't store the length again\n        skipBuffer.writeVInt(delta * 2);\n      } else {\n        // the payload length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload length as VInt.\n        skipBuffer.writeVInt(delta * 2 + 1);\n        skipBuffer.writeVInt(curPayloadLength);\n        lastSkipPayloadLength[level] = curPayloadLength;\n      }\n    } else {\n      // current field does not store payloads\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\n    }\n\n    // TODO: not sure it really helps to shove this somewhere else if its the same as the last skip\n    if (curStoreOffsets) {\n      skipBuffer.writeVInt(curOffsetLength);\n    }\n\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads in the posting lists we do not store the length of\n    // every payload. Instead we omit the length for a payload if the previous payload had\n    // the same length.\n    // However, in order to support skipping the payload length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength             --> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload length equals the length at the previous\n    //         skip point\n    if (curStorePayloads) {\n      int delta = curDoc - lastSkipDoc[level];\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\n        // the current payload length equals the length at the previous skip point,\n        // so we don't store the length again\n        skipBuffer.writeVInt(delta * 2);\n      } else {\n        // the payload length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload length as VInt.\n        skipBuffer.writeVInt(delta * 2 + 1);\n        skipBuffer.writeVInt(curPayloadLength);\n        lastSkipPayloadLength[level] = curPayloadLength;\n      }\n    } else {\n      // current field does not store payloads\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\n    }\n\n    // TODO: not sure it really helps to shove this somewhere else if its the same as the last skip\n    if (curStoreOffsets) {\n      skipBuffer.writeVInt(curOffsetLength);\n    }\n\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f2b0c06e932a0421837e6c7ff4c710f5c0b4d4b","date":1336312740,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads/offsets in the posting lists we do not store the length of\n    // every payload/offset. Instead we omit the length if the previous lengths were the same\n    //\n    // However, in order to support skipping, the length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads/offsets\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads/offsets\n    //           SkipDatum                 --> DocSkip, PayloadLength?,OffsetLength?,FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength,OffsetLength--> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload/offset lengths equals the lengths at the previous\n    //         skip point\n    int delta = curDoc - lastSkipDoc[level];\n    \n    if (curStorePayloads || curStoreOffsets) {\n      assert curStorePayloads || curPayloadLength == lastSkipPayloadLength[level];\n      assert curStoreOffsets  || curOffsetLength == lastSkipOffsetLength[level];\n\n      if (curPayloadLength == lastSkipPayloadLength[level] && curOffsetLength == lastSkipOffsetLength[level]) {\n        // the current payload/offset lengths equals the lengths at the previous skip point,\n        // so we don't store the lengths again\n        skipBuffer.writeVInt(delta << 1);\n      } else {\n        // the payload and/or offset length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload and/or offset lengths as VInts.\n        skipBuffer.writeVInt(delta << 1 | 1);\n\n        if (curStorePayloads) {\n          skipBuffer.writeVInt(curPayloadLength);\n          lastSkipPayloadLength[level] = curPayloadLength;\n        }\n        if (curStoreOffsets) {\n          skipBuffer.writeVInt(curOffsetLength);\n          lastSkipOffsetLength[level] = curOffsetLength;\n        }\n      }\n    } else {\n      // current field does not store payloads or offsets\n      skipBuffer.writeVInt(delta);\n    }\n\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads in the posting lists we do not store the length of\n    // every payload. Instead we omit the length for a payload if the previous payload had\n    // the same length.\n    // However, in order to support skipping the payload length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads\n    //           SkipDatum                 --> DocSkip, PayloadLength?, FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength             --> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload length equals the length at the previous\n    //         skip point\n    if (curStorePayloads) {\n      int delta = curDoc - lastSkipDoc[level];\n      if (curPayloadLength == lastSkipPayloadLength[level]) {\n        // the current payload length equals the length at the previous skip point,\n        // so we don't store the length again\n        skipBuffer.writeVInt(delta * 2);\n      } else {\n        // the payload length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload length as VInt.\n        skipBuffer.writeVInt(delta * 2 + 1);\n        skipBuffer.writeVInt(curPayloadLength);\n        lastSkipPayloadLength[level] = curPayloadLength;\n      }\n    } else {\n      // current field does not store payloads\n      skipBuffer.writeVInt(curDoc - lastSkipDoc[level]);\n    }\n\n    // TODO: not sure it really helps to shove this somewhere else if its the same as the last skip\n    if (curStoreOffsets) {\n      skipBuffer.writeVInt(curOffsetLength);\n    }\n\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6616b1fd222bb5a60f7f7856ace312252bc97890","date":1350142044,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads/offsets in the posting lists we do not store the length of\n    // every payload/offset. Instead we omit the length if the previous lengths were the same\n    //\n    // However, in order to support skipping, the length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads/offsets\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads/offsets\n    //           SkipDatum                 --> DocSkip, PayloadLength?,OffsetLength?,FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength,OffsetLength--> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload/offset lengths equals the lengths at the previous\n    //         skip point\n    int delta = curDoc - lastSkipDoc[level];\n    \n    if (curStorePayloads || curStoreOffsets) {\n      assert curStorePayloads || curPayloadLength == lastSkipPayloadLength[level];\n      assert curStoreOffsets  || curOffsetLength == lastSkipOffsetLength[level];\n\n      if (curPayloadLength == lastSkipPayloadLength[level] && curOffsetLength == lastSkipOffsetLength[level]) {\n        // the current payload/offset lengths equals the lengths at the previous skip point,\n        // so we don't store the lengths again\n        skipBuffer.writeVInt(delta << 1);\n      } else {\n        // the payload and/or offset length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload and/or offset lengths as VInts.\n        skipBuffer.writeVInt(delta << 1 | 1);\n\n        if (curStorePayloads) {\n          skipBuffer.writeVInt(curPayloadLength);\n          lastSkipPayloadLength[level] = curPayloadLength;\n        }\n        if (curStoreOffsets) {\n          skipBuffer.writeVInt(curOffsetLength);\n          lastSkipOffsetLength[level] = curOffsetLength;\n        }\n      }\n    } else {\n      // current field does not store payloads or offsets\n      skipBuffer.writeVInt(delta);\n    }\n\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads/offsets in the posting lists we do not store the length of\n    // every payload/offset. Instead we omit the length if the previous lengths were the same\n    //\n    // However, in order to support skipping, the length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads/offsets\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads/offsets\n    //           SkipDatum                 --> DocSkip, PayloadLength?,OffsetLength?,FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength,OffsetLength--> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload/offset lengths equals the lengths at the previous\n    //         skip point\n    int delta = curDoc - lastSkipDoc[level];\n    \n    if (curStorePayloads || curStoreOffsets) {\n      assert curStorePayloads || curPayloadLength == lastSkipPayloadLength[level];\n      assert curStoreOffsets  || curOffsetLength == lastSkipOffsetLength[level];\n\n      if (curPayloadLength == lastSkipPayloadLength[level] && curOffsetLength == lastSkipOffsetLength[level]) {\n        // the current payload/offset lengths equals the lengths at the previous skip point,\n        // so we don't store the lengths again\n        skipBuffer.writeVInt(delta << 1);\n      } else {\n        // the payload and/or offset length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload and/or offset lengths as VInts.\n        skipBuffer.writeVInt(delta << 1 | 1);\n\n        if (curStorePayloads) {\n          skipBuffer.writeVInt(curPayloadLength);\n          lastSkipPayloadLength[level] = curPayloadLength;\n        }\n        if (curStoreOffsets) {\n          skipBuffer.writeVInt(curOffsetLength);\n          lastSkipOffsetLength[level] = curOffsetLength;\n        }\n      }\n    } else {\n      // current field does not store payloads or offsets\n      skipBuffer.writeVInt(delta);\n    }\n\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads/offsets in the posting lists we do not store the length of\n    // every payload/offset. Instead we omit the length if the previous lengths were the same\n    //\n    // However, in order to support skipping, the length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads/offsets\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads/offsets\n    //           SkipDatum                 --> DocSkip, PayloadLength?,OffsetLength?,FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength,OffsetLength--> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload/offset lengths equals the lengths at the previous\n    //         skip point\n    int delta = curDoc - lastSkipDoc[level];\n    \n    if (curStorePayloads || curStoreOffsets) {\n      assert curStorePayloads || curPayloadLength == lastSkipPayloadLength[level];\n      assert curStoreOffsets  || curOffsetLength == lastSkipOffsetLength[level];\n\n      if (curPayloadLength == lastSkipPayloadLength[level] && curOffsetLength == lastSkipOffsetLength[level]) {\n        // the current payload/offset lengths equals the lengths at the previous skip point,\n        // so we don't store the lengths again\n        skipBuffer.writeVInt(delta << 1);\n      } else {\n        // the payload and/or offset length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload and/or offset lengths as VInts.\n        skipBuffer.writeVInt(delta << 1 | 1);\n\n        if (curStorePayloads) {\n          skipBuffer.writeVInt(curPayloadLength);\n          lastSkipPayloadLength[level] = curPayloadLength;\n        }\n        if (curStoreOffsets) {\n          skipBuffer.writeVInt(curOffsetLength);\n          lastSkipOffsetLength[level] = curOffsetLength;\n        }\n      }\n    } else {\n      // current field does not store payloads or offsets\n      skipBuffer.writeVInt(delta);\n    }\n\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads/offsets in the posting lists we do not store the length of\n    // every payload/offset. Instead we omit the length if the previous lengths were the same\n    //\n    // However, in order to support skipping, the length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads/offsets\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads/offsets\n    //           SkipDatum                 --> DocSkip, PayloadLength?,OffsetLength?,FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength,OffsetLength--> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload/offset lengths equals the lengths at the previous\n    //         skip point\n    int delta = curDoc - lastSkipDoc[level];\n    \n    if (curStorePayloads || curStoreOffsets) {\n      assert curStorePayloads || curPayloadLength == lastSkipPayloadLength[level];\n      assert curStoreOffsets  || curOffsetLength == lastSkipOffsetLength[level];\n\n      if (curPayloadLength == lastSkipPayloadLength[level] && curOffsetLength == lastSkipOffsetLength[level]) {\n        // the current payload/offset lengths equals the lengths at the previous skip point,\n        // so we don't store the lengths again\n        skipBuffer.writeVInt(delta << 1);\n      } else {\n        // the payload and/or offset length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload and/or offset lengths as VInts.\n        skipBuffer.writeVInt(delta << 1 | 1);\n\n        if (curStorePayloads) {\n          skipBuffer.writeVInt(curPayloadLength);\n          lastSkipPayloadLength[level] = curPayloadLength;\n        }\n        if (curStoreOffsets) {\n          skipBuffer.writeVInt(curOffsetLength);\n          lastSkipOffsetLength[level] = curOffsetLength;\n        }\n      }\n    } else {\n      // current field does not store payloads or offsets\n      skipBuffer.writeVInt(delta);\n    }\n\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40SkipListWriter#writeSkipData(int,IndexOutput).mjava","sourceNew":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads/offsets in the posting lists we do not store the length of\n    // every payload/offset. Instead we omit the length if the previous lengths were the same\n    //\n    // However, in order to support skipping, the length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads/offsets\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads/offsets\n    //           SkipDatum                 --> DocSkip, PayloadLength?,OffsetLength?,FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength,OffsetLength--> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload/offset lengths equals the lengths at the previous\n    //         skip point\n    int delta = curDoc - lastSkipDoc[level];\n    \n    if (curStorePayloads || curStoreOffsets) {\n      assert curStorePayloads || curPayloadLength == lastSkipPayloadLength[level];\n      assert curStoreOffsets  || curOffsetLength == lastSkipOffsetLength[level];\n\n      if (curPayloadLength == lastSkipPayloadLength[level] && curOffsetLength == lastSkipOffsetLength[level]) {\n        // the current payload/offset lengths equals the lengths at the previous skip point,\n        // so we don't store the lengths again\n        skipBuffer.writeVInt(delta << 1);\n      } else {\n        // the payload and/or offset length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload and/or offset lengths as VInts.\n        skipBuffer.writeVInt(delta << 1 | 1);\n\n        if (curStorePayloads) {\n          skipBuffer.writeVInt(curPayloadLength);\n          lastSkipPayloadLength[level] = curPayloadLength;\n        }\n        if (curStoreOffsets) {\n          skipBuffer.writeVInt(curOffsetLength);\n          lastSkipOffsetLength[level] = curOffsetLength;\n        }\n      }\n    } else {\n      // current field does not store payloads or offsets\n      skipBuffer.writeVInt(delta);\n    }\n\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","sourceOld":"  @Override\n  protected void writeSkipData(int level, IndexOutput skipBuffer) throws IOException {\n    // To efficiently store payloads/offsets in the posting lists we do not store the length of\n    // every payload/offset. Instead we omit the length if the previous lengths were the same\n    //\n    // However, in order to support skipping, the length at every skip point must be known.\n    // So we use the same length encoding that we use for the posting lists for the skip data as well:\n    // Case 1: current field does not store payloads/offsets\n    //           SkipDatum                 --> DocSkip, FreqSkip, ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           DocSkip records the document number before every SkipInterval th  document in TermFreqs. \n    //           Document numbers are represented as differences from the previous value in the sequence.\n    // Case 2: current field stores payloads/offsets\n    //           SkipDatum                 --> DocSkip, PayloadLength?,OffsetLength?,FreqSkip,ProxSkip\n    //           DocSkip,FreqSkip,ProxSkip --> VInt\n    //           PayloadLength,OffsetLength--> VInt    \n    //         In this case DocSkip/2 is the difference between\n    //         the current and the previous value. If DocSkip\n    //         is odd, then a PayloadLength encoded as VInt follows,\n    //         if DocSkip is even, then it is assumed that the\n    //         current payload/offset lengths equals the lengths at the previous\n    //         skip point\n    int delta = curDoc - lastSkipDoc[level];\n    \n    if (curStorePayloads || curStoreOffsets) {\n      assert curStorePayloads || curPayloadLength == lastSkipPayloadLength[level];\n      assert curStoreOffsets  || curOffsetLength == lastSkipOffsetLength[level];\n\n      if (curPayloadLength == lastSkipPayloadLength[level] && curOffsetLength == lastSkipOffsetLength[level]) {\n        // the current payload/offset lengths equals the lengths at the previous skip point,\n        // so we don't store the lengths again\n        skipBuffer.writeVInt(delta << 1);\n      } else {\n        // the payload and/or offset length is different from the previous one. We shift the DocSkip, \n        // set the lowest bit and store the current payload and/or offset lengths as VInts.\n        skipBuffer.writeVInt(delta << 1 | 1);\n\n        if (curStorePayloads) {\n          skipBuffer.writeVInt(curPayloadLength);\n          lastSkipPayloadLength[level] = curPayloadLength;\n        }\n        if (curStoreOffsets) {\n          skipBuffer.writeVInt(curOffsetLength);\n          lastSkipOffsetLength[level] = curOffsetLength;\n        }\n      }\n    } else {\n      // current field does not store payloads or offsets\n      skipBuffer.writeVInt(delta);\n    }\n\n    skipBuffer.writeVInt((int) (curFreqPointer - lastSkipFreqPointer[level]));\n    skipBuffer.writeVInt((int) (curProxPointer - lastSkipProxPointer[level]));\n\n    lastSkipDoc[level] = curDoc;\n    \n    lastSkipFreqPointer[level] = curFreqPointer;\n    lastSkipProxPointer[level] = curProxPointer;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["1f2b0c06e932a0421837e6c7ff4c710f5c0b4d4b"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["1f2b0c06e932a0421837e6c7ff4c710f5c0b4d4b","6616b1fd222bb5a60f7f7856ace312252bc97890"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["1f2b0c06e932a0421837e6c7ff4c710f5c0b4d4b","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"1f2b0c06e932a0421837e6c7ff4c710f5c0b4d4b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"6616b1fd222bb5a60f7f7856ace312252bc97890":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1f2b0c06e932a0421837e6c7ff4c710f5c0b4d4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"1f2b0c06e932a0421837e6c7ff4c710f5c0b4d4b":["6616b1fd222bb5a60f7f7856ace312252bc97890","c7492bcb52be51e55d596134b95b2e53cc4ffb91","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}