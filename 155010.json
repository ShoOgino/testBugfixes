{"path":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testPhraseVersusSloppyPhraseWithHoles().mjava","commits":[{"id":"92749b51992f15c9e464fd464baf3372bd5573a2","date":1330019010,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testPhraseVersusSloppyPhraseWithHoles().mjava","pathOld":"/dev/null","sourceNew":"  /** same as above, with posincs */\n  public void testPhraseVersusSloppyPhraseWithHoles() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    PhraseQuery q1 = new PhraseQuery();\n    q1.add(t1);\n    q1.add(t2, 2);\n    PhraseQuery q2 = new PhraseQuery();\n    q2.add(t1);\n    q2.add(t2, 2);\n    q2.setSlop(1);\n    assertSubsetOf(q1, q2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testPhraseVersusSloppyPhraseWithHoles().mjava","pathOld":"/dev/null","sourceNew":"  /** same as above, with posincs */\n  public void testPhraseVersusSloppyPhraseWithHoles() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    PhraseQuery q1 = new PhraseQuery();\n    q1.add(t1);\n    q1.add(t2, 2);\n    PhraseQuery q2 = new PhraseQuery();\n    q2.add(t1);\n    q2.add(t2, 2);\n    q2.setSlop(1);\n    assertSubsetOf(q1, q2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testPhraseVersusSloppyPhraseWithHoles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSimpleSearchEquivalence#testPhraseVersusSloppyPhraseWithHoles().mjava","sourceNew":"  /** same as above, with posincs */\n  public void testPhraseVersusSloppyPhraseWithHoles() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    PhraseQuery.Builder builder = new PhraseQuery.Builder();\n    builder.add(t1, 0);\n    builder.add(t2, 2);\n    PhraseQuery q1 = builder.build();\n    builder.setSlop(2);\n    PhraseQuery q2 = builder.build();\n    assertSubsetOf(q1, q2);\n  }\n\n","sourceOld":"  /** same as above, with posincs */\n  public void testPhraseVersusSloppyPhraseWithHoles() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    PhraseQuery q1 = new PhraseQuery();\n    q1.add(t1);\n    q1.add(t2, 2);\n    PhraseQuery q2 = new PhraseQuery();\n    q2.add(t1);\n    q2.add(t2, 2);\n    q2.setSlop(1);\n    assertSubsetOf(q1, q2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9e1499c5d26c936238506df90a3c02c76707722":["92749b51992f15c9e464fd464baf3372bd5573a2"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","92749b51992f15c9e464fd464baf3372bd5573a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92749b51992f15c9e464fd464baf3372bd5573a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9e1499c5d26c936238506df90a3c02c76707722"]},"commit2Childs":{"e9e1499c5d26c936238506df90a3c02c76707722":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","92749b51992f15c9e464fd464baf3372bd5573a2"],"92749b51992f15c9e464fd464baf3372bd5573a2":["e9e1499c5d26c936238506df90a3c02c76707722","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}