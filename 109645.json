{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#indexMultiValuedDocuments(int,RandomIndexWriter).mjava","commits":[{"id":"8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56","date":1416564641,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#indexMultiValuedDocuments(int,RandomIndexWriter).mjava","pathOld":"/dev/null","sourceNew":"  private List<Suggestion> indexMultiValuedDocuments(int numDocs, RandomIndexWriter writer) throws IOException {\n    List<Suggestion> suggestionList = new ArrayList<>(numDocs);\n\n    for(int i=0; i<numDocs; i++) {\n      Document doc = new Document();\n      Field field;\n      BytesRef payloadValue;\n      Set<BytesRef> contextValues = new HashSet<>();\n      long numericValue = -1; //-1 for missing weight\n      BytesRef term;\n\n      payloadValue = new BytesRef(\"payload_\" + i);\n      field = new StoredField(PAYLOAD_FIELD_NAME, payloadValue);\n      doc.add(field);\n\n      if (usually()) {\n        numericValue = 100 + i;\n        field = new NumericDocValuesField(WEIGHT_FIELD_NAME, numericValue);\n        doc.add(field);\n      }\n\n      int numContexts = atLeast(1);\n      for (int j=0; j<numContexts; j++) {\n        BytesRef contextValue = new BytesRef(\"context_\" + i + \"_\" + j);\n        field = new StoredField(CONTEXT_FIELD_NAME, contextValue);\n        doc.add(field);\n        contextValues.add(contextValue);\n      }\n\n      int numSuggestions = atLeast(2);\n      for (int j=0; j<numSuggestions; j++) {\n        term = new BytesRef(\"field_\" + i + \"_\" + j);\n        field = new StoredField(FIELD_NAME, term);\n        doc.add(field);\n\n        Suggestion suggestionValue = new Suggestion();\n        suggestionValue.payload = payloadValue;\n        suggestionValue.contexts = contextValues;\n        suggestionValue.weight = numericValue;\n        suggestionValue.term = term;\n        suggestionList.add(suggestionValue);\n      }\n      writer.addDocument(doc);\n    }\n    return suggestionList;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56"]},"commit2Childs":{"8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8509b01f6a6e91741fdd2d1cc7a3c11d6bbe0f56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}