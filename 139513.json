{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedField(FieldInfo,DocValuesProducer).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    Iterable<BytesRef> values = LegacyDocValuesIterables.valuesIterable(valuesProducer.getSorted(field));\n    Iterable<Number> docToOrd = LegacyDocValuesIterables.sortedOrdIterable(valuesProducer, field, numDocs);\n    \n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED;\n    writeFieldEntry(field, DocValuesType.SORTED);\n\n    int valueCount = 0;\n    int maxLength = -1;\n    for(BytesRef value : values) {\n      maxLength = Math.max(maxLength, value.length);\n      valueCount++;\n    }\n\n    // write numValues\n    SimpleTextUtil.write(data, NUMVALUES);\n    SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // write maxLength\n    SimpleTextUtil.write(data, MAXLENGTH);\n    SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    int maxBytesLength = Integer.toString(maxLength).length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesLength; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern for encoding lengths\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n    final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n    \n    int maxOrdBytes = Long.toString(valueCount+1L).length();\n    sb.setLength(0);\n    for (int i = 0; i < maxOrdBytes; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern for ords\n    SimpleTextUtil.write(data, ORDPATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n    final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n    // for asserts:\n    int valuesSeen = 0;\n\n    for(BytesRef value : values) {\n      // write length\n      SimpleTextUtil.write(data, LENGTH);\n      SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n      SimpleTextUtil.writeNewline(data);\n        \n      // write bytes -- don't use SimpleText.write\n      // because it escapes:\n      data.writeBytes(value.bytes, value.offset, value.length);\n\n      // pad to fit\n      for (int i = value.length; i < maxLength; i++) {\n        data.writeByte((byte)' ');\n      }\n      SimpleTextUtil.writeNewline(data);\n      valuesSeen++;\n      assert valuesSeen <= valueCount;\n    }\n\n    assert valuesSeen == valueCount;\n\n    for(Number ord : docToOrd) {\n      SimpleTextUtil.write(data, ordEncoder.format(ord.longValue()+1), scratch);\n      SimpleTextUtil.writeNewline(data);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED;\n    writeFieldEntry(field, DocValuesType.SORTED);\n\n    int valueCount = 0;\n    int maxLength = -1;\n    for(BytesRef value : values) {\n      maxLength = Math.max(maxLength, value.length);\n      valueCount++;\n    }\n\n    // write numValues\n    SimpleTextUtil.write(data, NUMVALUES);\n    SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // write maxLength\n    SimpleTextUtil.write(data, MAXLENGTH);\n    SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    int maxBytesLength = Integer.toString(maxLength).length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesLength; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern for encoding lengths\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n    final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n    \n    int maxOrdBytes = Long.toString(valueCount+1L).length();\n    sb.setLength(0);\n    for (int i = 0; i < maxOrdBytes; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern for ords\n    SimpleTextUtil.write(data, ORDPATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n    final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n    // for asserts:\n    int valuesSeen = 0;\n\n    for(BytesRef value : values) {\n      // write length\n      SimpleTextUtil.write(data, LENGTH);\n      SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n      SimpleTextUtil.writeNewline(data);\n        \n      // write bytes -- don't use SimpleText.write\n      // because it escapes:\n      data.writeBytes(value.bytes, value.offset, value.length);\n\n      // pad to fit\n      for (int i = value.length; i < maxLength; i++) {\n        data.writeByte((byte)' ');\n      }\n      SimpleTextUtil.writeNewline(data);\n      valuesSeen++;\n      assert valuesSeen <= valueCount;\n    }\n\n    assert valuesSeen == valueCount;\n\n    for(Number ord : docToOrd) {\n      SimpleTextUtil.write(data, ordEncoder.format(ord.longValue()+1), scratch);\n      SimpleTextUtil.writeNewline(data);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedField(FieldInfo,DocValuesProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    Iterable<BytesRef> values = LegacyDocValuesIterables.valuesIterable(valuesProducer.getSorted(field));\n    Iterable<Number> docToOrd = LegacyDocValuesIterables.sortedOrdIterable(valuesProducer, field, numDocs);\n    \n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED;\n    writeFieldEntry(field, DocValuesType.SORTED);\n\n    int valueCount = 0;\n    int maxLength = -1;\n    for(BytesRef value : values) {\n      maxLength = Math.max(maxLength, value.length);\n      valueCount++;\n    }\n\n    // write numValues\n    SimpleTextUtil.write(data, NUMVALUES);\n    SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // write maxLength\n    SimpleTextUtil.write(data, MAXLENGTH);\n    SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    int maxBytesLength = Integer.toString(maxLength).length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesLength; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern for encoding lengths\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n    final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n    \n    int maxOrdBytes = Long.toString(valueCount+1L).length();\n    sb.setLength(0);\n    for (int i = 0; i < maxOrdBytes; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern for ords\n    SimpleTextUtil.write(data, ORDPATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n    final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n    // for asserts:\n    int valuesSeen = 0;\n\n    for(BytesRef value : values) {\n      // write length\n      SimpleTextUtil.write(data, LENGTH);\n      SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n      SimpleTextUtil.writeNewline(data);\n        \n      // write bytes -- don't use SimpleText.write\n      // because it escapes:\n      data.writeBytes(value.bytes, value.offset, value.length);\n\n      // pad to fit\n      for (int i = value.length; i < maxLength; i++) {\n        data.writeByte((byte)' ');\n      }\n      SimpleTextUtil.writeNewline(data);\n      valuesSeen++;\n      assert valuesSeen <= valueCount;\n    }\n\n    assert valuesSeen == valueCount;\n\n    for(Number ord : docToOrd) {\n      SimpleTextUtil.write(data, ordEncoder.format(ord.longValue()+1), scratch);\n      SimpleTextUtil.writeNewline(data);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedField(FieldInfo,DocValuesProducer).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedField(FieldInfo,DocValuesProducer).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED;\n    writeFieldEntry(field, DocValuesType.SORTED);\n\n    int valueCount = 0;\n    int maxLength = -1;\n    TermsEnum terms = valuesProducer.getSorted(field).termsEnum();\n    for(BytesRef value = terms.next(); value != null; value = terms.next()) {\n      maxLength = Math.max(maxLength, value.length);\n      valueCount++;\n    }\n\n    // write numValues\n    SimpleTextUtil.write(data, NUMVALUES);\n    SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // write maxLength\n    SimpleTextUtil.write(data, MAXLENGTH);\n    SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    int maxBytesLength = Integer.toString(maxLength).length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesLength; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern for encoding lengths\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n    final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n    \n    int maxOrdBytes = Long.toString(valueCount+1L).length();\n    sb.setLength(0);\n    for (int i = 0; i < maxOrdBytes; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern for ords\n    SimpleTextUtil.write(data, ORDPATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n    final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n    // for asserts:\n    int valuesSeen = 0;\n\n    terms = valuesProducer.getSorted(field).termsEnum();\n    for(BytesRef value = terms.next(); value != null; value = terms.next()) {\n      // write length\n      SimpleTextUtil.write(data, LENGTH);\n      SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n      SimpleTextUtil.writeNewline(data);\n        \n      // write bytes -- don't use SimpleText.write\n      // because it escapes:\n      data.writeBytes(value.bytes, value.offset, value.length);\n\n      // pad to fit\n      for (int i = value.length; i < maxLength; i++) {\n        data.writeByte((byte)' ');\n      }\n      SimpleTextUtil.writeNewline(data);\n      valuesSeen++;\n      assert valuesSeen <= valueCount;\n    }\n\n    assert valuesSeen == valueCount;\n\n    SortedDocValues values = valuesProducer.getSorted(field);\n    for (int i = 0; i < numDocs; ++i) {\n      if (values.docID() < i) {\n        values.nextDoc();\n        assert values.docID() >= i;\n      }\n      int ord = -1;\n      if (values.docID() == i) {\n        ord = values.ordValue();\n      }\n      SimpleTextUtil.write(data, ordEncoder.format(ord+1L), scratch);\n      SimpleTextUtil.writeNewline(data);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    Iterable<BytesRef> values = LegacyDocValuesIterables.valuesIterable(valuesProducer.getSorted(field));\n    Iterable<Number> docToOrd = LegacyDocValuesIterables.sortedOrdIterable(valuesProducer, field, numDocs);\n    \n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED;\n    writeFieldEntry(field, DocValuesType.SORTED);\n\n    int valueCount = 0;\n    int maxLength = -1;\n    for(BytesRef value : values) {\n      maxLength = Math.max(maxLength, value.length);\n      valueCount++;\n    }\n\n    // write numValues\n    SimpleTextUtil.write(data, NUMVALUES);\n    SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // write maxLength\n    SimpleTextUtil.write(data, MAXLENGTH);\n    SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    int maxBytesLength = Integer.toString(maxLength).length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesLength; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern for encoding lengths\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n    final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n    \n    int maxOrdBytes = Long.toString(valueCount+1L).length();\n    sb.setLength(0);\n    for (int i = 0; i < maxOrdBytes; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern for ords\n    SimpleTextUtil.write(data, ORDPATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n    final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n    // for asserts:\n    int valuesSeen = 0;\n\n    for(BytesRef value : values) {\n      // write length\n      SimpleTextUtil.write(data, LENGTH);\n      SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n      SimpleTextUtil.writeNewline(data);\n        \n      // write bytes -- don't use SimpleText.write\n      // because it escapes:\n      data.writeBytes(value.bytes, value.offset, value.length);\n\n      // pad to fit\n      for (int i = value.length; i < maxLength; i++) {\n        data.writeByte((byte)' ');\n      }\n      SimpleTextUtil.writeNewline(data);\n      valuesSeen++;\n      assert valuesSeen <= valueCount;\n    }\n\n    assert valuesSeen == valueCount;\n\n    for(Number ord : docToOrd) {\n      SimpleTextUtil.write(data, ordEncoder.format(ord.longValue()+1), scratch);\n      SimpleTextUtil.writeNewline(data);\n    }\n  }\n\n","bugFix":["6652c74b2358a0b13223817a6a793bf1c9d0749d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesWriter#addSortedField(FieldInfo,DocValuesProducer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, DocValuesProducer valuesProducer) throws IOException {\n    assert fieldSeen(field.name);\n    assert field.getDocValuesType() == DocValuesType.SORTED;\n    writeFieldEntry(field, DocValuesType.SORTED);\n\n    int valueCount = 0;\n    int maxLength = -1;\n    TermsEnum terms = valuesProducer.getSorted(field).termsEnum();\n    for(BytesRef value = terms.next(); value != null; value = terms.next()) {\n      maxLength = Math.max(maxLength, value.length);\n      valueCount++;\n    }\n\n    // write numValues\n    SimpleTextUtil.write(data, NUMVALUES);\n    SimpleTextUtil.write(data, Integer.toString(valueCount), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    // write maxLength\n    SimpleTextUtil.write(data, MAXLENGTH);\n    SimpleTextUtil.write(data, Integer.toString(maxLength), scratch);\n    SimpleTextUtil.writeNewline(data);\n    \n    int maxBytesLength = Integer.toString(maxLength).length();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < maxBytesLength; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern for encoding lengths\n    SimpleTextUtil.write(data, PATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n    final DecimalFormat encoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n    \n    int maxOrdBytes = Long.toString(valueCount+1L).length();\n    sb.setLength(0);\n    for (int i = 0; i < maxOrdBytes; i++) {\n      sb.append('0');\n    }\n    \n    // write our pattern for ords\n    SimpleTextUtil.write(data, ORDPATTERN);\n    SimpleTextUtil.write(data, sb.toString(), scratch);\n    SimpleTextUtil.writeNewline(data);\n    final DecimalFormat ordEncoder = new DecimalFormat(sb.toString(), new DecimalFormatSymbols(Locale.ROOT));\n\n    // for asserts:\n    int valuesSeen = 0;\n\n    terms = valuesProducer.getSorted(field).termsEnum();\n    for(BytesRef value = terms.next(); value != null; value = terms.next()) {\n      // write length\n      SimpleTextUtil.write(data, LENGTH);\n      SimpleTextUtil.write(data, encoder.format(value.length), scratch);\n      SimpleTextUtil.writeNewline(data);\n        \n      // write bytes -- don't use SimpleText.write\n      // because it escapes:\n      data.writeBytes(value.bytes, value.offset, value.length);\n\n      // pad to fit\n      for (int i = value.length; i < maxLength; i++) {\n        data.writeByte((byte)' ');\n      }\n      SimpleTextUtil.writeNewline(data);\n      valuesSeen++;\n      assert valuesSeen <= valueCount;\n    }\n\n    assert valuesSeen == valueCount;\n\n    SortedDocValues values = valuesProducer.getSorted(field);\n    for (int i = 0; i < numDocs; ++i) {\n      if (values.docID() < i) {\n        values.nextDoc();\n        assert values.docID() >= i;\n      }\n      int ord = -1;\n      if (values.docID() == i) {\n        ord = values.ordValue();\n      }\n      SimpleTextUtil.write(data, ordEncoder.format(ord+1L), scratch);\n      SimpleTextUtil.writeNewline(data);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7558b5077dd4abd457be151475f13b541f4f13e"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f7558b5077dd4abd457be151475f13b541f4f13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}