{"path":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","date":1365631993,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_QUERY_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8b3f2faaf05547a6ed4e2769b664522af9514b3","date":1466522779,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof MatchNoDocsQuery);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":["d4f427d8edde643497b73a09bd7ff67d44e60cf2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestWildcard#testEmptyTerm().mjava","sourceNew":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof MatchNoDocsQuery);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  /**\n   * Tests if a WildcardQuery with an empty term is rewritten to an empty BooleanQuery\n   */\n  public void testEmptyTerm() throws IOException {\n    Directory indexStore = getIndexStore(\"field\", new String[]{\"nowildcard\", \"nowildcardx\"});\n    IndexReader reader = DirectoryReader.open(indexStore);\n    IndexSearcher searcher = newSearcher(reader);\n\n    MultiTermQuery wq = new WildcardQuery(new Term(\"field\", \"\"));\n    wq.setRewriteMethod(MultiTermQuery.SCORING_BOOLEAN_REWRITE);\n    assertMatches(searcher, wq, 0);\n    Query q = searcher.rewrite(wq);\n    assertTrue(q instanceof BooleanQuery);\n    assertEquals(0, ((BooleanQuery) q).clauses().size());\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173","2713584a660051cd646423be682771e3bbd99985"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2713584a660051cd646423be682771e3bbd99985":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d8b3f2faaf05547a6ed4e2769b664522af9514b3":["2713584a660051cd646423be682771e3bbd99985"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2713584a660051cd646423be682771e3bbd99985","d8b3f2faaf05547a6ed4e2769b664522af9514b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d8b3f2faaf05547a6ed4e2769b664522af9514b3"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3b0e8c39ca08b5a02de6edcd33d6f3b90b865173"],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d8b3f2faaf05547a6ed4e2769b664522af9514b3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d8b3f2faaf05547a6ed4e2769b664522af9514b3":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b0e8c39ca08b5a02de6edcd33d6f3b90b865173":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}