{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#processGroup().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#processGroup().mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#processGroup().mjava","sourceNew":"  // Called when we transition to another group; if the\n  // group is competitive we insert into the group queue\n  private void processGroup() {\n    totalGroupCount++;\n    //System.out.println(\"    processGroup ord=\" + lastGroupOrd + \" competes=\" + groupCompetes + \" count=\" + subDocUpto + \" groupDoc=\" + topGroupDoc);\n    if (groupCompetes) {\n      if (!queueFull) {\n        // Startup transient: always add a new OneGroup\n        final OneGroup og = new OneGroup();\n        og.count = subDocUpto;\n        og.topGroupDoc = docBase + topGroupDoc;\n        og.docs = pendingSubDocs;\n        pendingSubDocs = new int[10];\n        if (needsScores) {\n          og.scores = pendingSubScores;\n          pendingSubScores = new float[10];\n        }\n        og.readerContext = currentReaderContext;\n        //og.groupOrd = lastGroupOrd;\n        og.comparatorSlot = bottomSlot;\n        final OneGroup bottomGroup = groupQueue.add(og);\n        //System.out.println(\"      ADD group=\" + getGroupString(lastGroupOrd) + \" newBottom=\" + getGroupString(bottomGroup.groupOrd));\n        queueFull = groupQueue.size() == topNGroups;\n        if (queueFull) {\n          // Queue just became full; now set the real bottom\n          // in the comparators:\n          bottomSlot = bottomGroup.comparatorSlot;\n          //System.out.println(\"    set bottom=\" + bottomSlot);\n          for (int i = 0; i < comparators.length; i++) {\n            comparators[i].setBottom(bottomSlot);\n          }\n          //System.out.println(\"     QUEUE FULL\");\n        } else {\n          // Queue not full yet -- just advance bottomSlot:\n          bottomSlot = groupQueue.size();\n        }\n      } else {\n        // Replace bottom element in PQ and then updateTop\n        final OneGroup og = groupQueue.top();\n        assert og != null;\n        og.count = subDocUpto;\n        og.topGroupDoc = docBase + topGroupDoc;\n        // Swap pending docs\n        final int[] savDocs = og.docs;\n        og.docs = pendingSubDocs;\n        pendingSubDocs = savDocs;\n        if (needsScores) {\n          // Swap pending scores\n          final float[] savScores = og.scores;\n          og.scores = pendingSubScores;\n          pendingSubScores = savScores;\n        }\n        og.readerContext = currentReaderContext;\n        //og.groupOrd = lastGroupOrd;\n        bottomSlot = groupQueue.updateTop().comparatorSlot;\n\n        //System.out.println(\"    set bottom=\" + bottomSlot);\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottomSlot);\n        }\n      }\n    }\n    subDocUpto = 0;\n  }\n\n","sourceOld":"  // Called when we transition to another group; if the\n  // group is competitive we insert into the group queue\n  private void processGroup() {\n    totalGroupCount++;\n    //System.out.println(\"    processGroup ord=\" + lastGroupOrd + \" competes=\" + groupCompetes + \" count=\" + subDocUpto + \" groupDoc=\" + topGroupDoc);\n    if (groupCompetes) {\n      if (!queueFull) {\n        // Startup transient: always add a new OneGroup\n        final OneGroup og = new OneGroup();\n        og.count = subDocUpto;\n        og.topGroupDoc = docBase + topGroupDoc;\n        og.docs = pendingSubDocs;\n        pendingSubDocs = new int[10];\n        if (needsScores) {\n          og.scores = pendingSubScores;\n          pendingSubScores = new float[10];\n        }\n        og.readerContext = currentReaderContext;\n        //og.groupOrd = lastGroupOrd;\n        og.comparatorSlot = bottomSlot;\n        final OneGroup bottomGroup = groupQueue.add(og);\n        //System.out.println(\"      ADD group=\" + getGroupString(lastGroupOrd) + \" newBottom=\" + getGroupString(bottomGroup.groupOrd));\n        queueFull = groupQueue.size() == topNGroups;\n        if (queueFull) {\n          // Queue just became full; now set the real bottom\n          // in the comparators:\n          bottomSlot = bottomGroup.comparatorSlot;\n          //System.out.println(\"    set bottom=\" + bottomSlot);\n          for (int i = 0; i < comparators.length; i++) {\n            comparators[i].setBottom(bottomSlot);\n          }\n          //System.out.println(\"     QUEUE FULL\");\n        } else {\n          // Queue not full yet -- just advance bottomSlot:\n          bottomSlot = groupQueue.size();\n        }\n      } else {\n        // Replace bottom element in PQ and then updateTop\n        final OneGroup og = groupQueue.top();\n        assert og != null;\n        og.count = subDocUpto;\n        og.topGroupDoc = docBase + topGroupDoc;\n        // Swap pending docs\n        final int[] savDocs = og.docs;\n        og.docs = pendingSubDocs;\n        pendingSubDocs = savDocs;\n        if (needsScores) {\n          // Swap pending scores\n          final float[] savScores = og.scores;\n          og.scores = pendingSubScores;\n          pendingSubScores = savScores;\n        }\n        og.readerContext = currentReaderContext;\n        //og.groupOrd = lastGroupOrd;\n        bottomSlot = groupQueue.updateTop().comparatorSlot;\n\n        //System.out.println(\"    set bottom=\" + bottomSlot);\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottomSlot);\n        }\n      }\n    }\n    subDocUpto = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"901e951cec2e6af4e503209a6721c8834db23279","date":1420556599,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#processGroup().mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#processGroup().mjava","sourceNew":"  // Called when we transition to another group; if the\n  // group is competitive we insert into the group queue\n  private void processGroup() {\n    totalGroupCount++;\n    //System.out.println(\"    processGroup ord=\" + lastGroupOrd + \" competes=\" + groupCompetes + \" count=\" + subDocUpto + \" groupDoc=\" + topGroupDoc);\n    if (groupCompetes) {\n      if (!queueFull) {\n        // Startup transient: always add a new OneGroup\n        final OneGroup og = new OneGroup();\n        og.count = subDocUpto;\n        og.topGroupDoc = docBase + topGroupDoc;\n        og.docs = pendingSubDocs;\n        pendingSubDocs = new int[10];\n        if (needsScores) {\n          og.scores = pendingSubScores;\n          pendingSubScores = new float[10];\n        }\n        og.readerContext = currentReaderContext;\n        //og.groupOrd = lastGroupOrd;\n        og.comparatorSlot = bottomSlot;\n        final OneGroup bottomGroup = groupQueue.add(og);\n        //System.out.println(\"      ADD group=\" + getGroupString(lastGroupOrd) + \" newBottom=\" + getGroupString(bottomGroup.groupOrd));\n        queueFull = groupQueue.size() == topNGroups;\n        if (queueFull) {\n          // Queue just became full; now set the real bottom\n          // in the comparators:\n          bottomSlot = bottomGroup.comparatorSlot;\n          //System.out.println(\"    set bottom=\" + bottomSlot);\n          for (int i = 0; i < comparators.length; i++) {\n            leafComparators[i].setBottom(bottomSlot);\n          }\n          //System.out.println(\"     QUEUE FULL\");\n        } else {\n          // Queue not full yet -- just advance bottomSlot:\n          bottomSlot = groupQueue.size();\n        }\n      } else {\n        // Replace bottom element in PQ and then updateTop\n        final OneGroup og = groupQueue.top();\n        assert og != null;\n        og.count = subDocUpto;\n        og.topGroupDoc = docBase + topGroupDoc;\n        // Swap pending docs\n        final int[] savDocs = og.docs;\n        og.docs = pendingSubDocs;\n        pendingSubDocs = savDocs;\n        if (needsScores) {\n          // Swap pending scores\n          final float[] savScores = og.scores;\n          og.scores = pendingSubScores;\n          pendingSubScores = savScores;\n        }\n        og.readerContext = currentReaderContext;\n        //og.groupOrd = lastGroupOrd;\n        bottomSlot = groupQueue.updateTop().comparatorSlot;\n\n        //System.out.println(\"    set bottom=\" + bottomSlot);\n        for (int i = 0; i < comparators.length; i++) {\n          leafComparators[i].setBottom(bottomSlot);\n        }\n      }\n    }\n    subDocUpto = 0;\n  }\n\n","sourceOld":"  // Called when we transition to another group; if the\n  // group is competitive we insert into the group queue\n  private void processGroup() {\n    totalGroupCount++;\n    //System.out.println(\"    processGroup ord=\" + lastGroupOrd + \" competes=\" + groupCompetes + \" count=\" + subDocUpto + \" groupDoc=\" + topGroupDoc);\n    if (groupCompetes) {\n      if (!queueFull) {\n        // Startup transient: always add a new OneGroup\n        final OneGroup og = new OneGroup();\n        og.count = subDocUpto;\n        og.topGroupDoc = docBase + topGroupDoc;\n        og.docs = pendingSubDocs;\n        pendingSubDocs = new int[10];\n        if (needsScores) {\n          og.scores = pendingSubScores;\n          pendingSubScores = new float[10];\n        }\n        og.readerContext = currentReaderContext;\n        //og.groupOrd = lastGroupOrd;\n        og.comparatorSlot = bottomSlot;\n        final OneGroup bottomGroup = groupQueue.add(og);\n        //System.out.println(\"      ADD group=\" + getGroupString(lastGroupOrd) + \" newBottom=\" + getGroupString(bottomGroup.groupOrd));\n        queueFull = groupQueue.size() == topNGroups;\n        if (queueFull) {\n          // Queue just became full; now set the real bottom\n          // in the comparators:\n          bottomSlot = bottomGroup.comparatorSlot;\n          //System.out.println(\"    set bottom=\" + bottomSlot);\n          for (int i = 0; i < comparators.length; i++) {\n            comparators[i].setBottom(bottomSlot);\n          }\n          //System.out.println(\"     QUEUE FULL\");\n        } else {\n          // Queue not full yet -- just advance bottomSlot:\n          bottomSlot = groupQueue.size();\n        }\n      } else {\n        // Replace bottom element in PQ and then updateTop\n        final OneGroup og = groupQueue.top();\n        assert og != null;\n        og.count = subDocUpto;\n        og.topGroupDoc = docBase + topGroupDoc;\n        // Swap pending docs\n        final int[] savDocs = og.docs;\n        og.docs = pendingSubDocs;\n        pendingSubDocs = savDocs;\n        if (needsScores) {\n          // Swap pending scores\n          final float[] savScores = og.scores;\n          og.scores = pendingSubScores;\n          pendingSubScores = savScores;\n        }\n        og.readerContext = currentReaderContext;\n        //og.groupOrd = lastGroupOrd;\n        bottomSlot = groupQueue.updateTop().comparatorSlot;\n\n        //System.out.println(\"    set bottom=\" + bottomSlot);\n        for (int i = 0; i < comparators.length; i++) {\n          comparators[i].setBottom(bottomSlot);\n        }\n      }\n    }\n    subDocUpto = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7558b5077dd4abd457be151475f13b541f4f13e","date":1475830751,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#processGroup().mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#processGroup().mjava","sourceNew":"  // Called when we transition to another group; if the\n  // group is competitive we insert into the group queue\n  private void processGroup() throws IOException {\n    totalGroupCount++;\n    //System.out.println(\"    processGroup ord=\" + lastGroupOrd + \" competes=\" + groupCompetes + \" count=\" + subDocUpto + \" groupDoc=\" + topGroupDoc);\n    if (groupCompetes) {\n      if (!queueFull) {\n        // Startup transient: always add a new OneGroup\n        final OneGroup og = new OneGroup();\n        og.count = subDocUpto;\n        og.topGroupDoc = docBase + topGroupDoc;\n        og.docs = pendingSubDocs;\n        pendingSubDocs = new int[10];\n        if (needsScores) {\n          og.scores = pendingSubScores;\n          pendingSubScores = new float[10];\n        }\n        og.readerContext = currentReaderContext;\n        //og.groupOrd = lastGroupOrd;\n        og.comparatorSlot = bottomSlot;\n        final OneGroup bottomGroup = groupQueue.add(og);\n        //System.out.println(\"      ADD group=\" + getGroupString(lastGroupOrd) + \" newBottom=\" + getGroupString(bottomGroup.groupOrd));\n        queueFull = groupQueue.size() == topNGroups;\n        if (queueFull) {\n          // Queue just became full; now set the real bottom\n          // in the comparators:\n          bottomSlot = bottomGroup.comparatorSlot;\n          //System.out.println(\"    set bottom=\" + bottomSlot);\n          for (int i = 0; i < comparators.length; i++) {\n            leafComparators[i].setBottom(bottomSlot);\n          }\n          //System.out.println(\"     QUEUE FULL\");\n        } else {\n          // Queue not full yet -- just advance bottomSlot:\n          bottomSlot = groupQueue.size();\n        }\n      } else {\n        // Replace bottom element in PQ and then updateTop\n        final OneGroup og = groupQueue.top();\n        assert og != null;\n        og.count = subDocUpto;\n        og.topGroupDoc = docBase + topGroupDoc;\n        // Swap pending docs\n        final int[] savDocs = og.docs;\n        og.docs = pendingSubDocs;\n        pendingSubDocs = savDocs;\n        if (needsScores) {\n          // Swap pending scores\n          final float[] savScores = og.scores;\n          og.scores = pendingSubScores;\n          pendingSubScores = savScores;\n        }\n        og.readerContext = currentReaderContext;\n        //og.groupOrd = lastGroupOrd;\n        bottomSlot = groupQueue.updateTop().comparatorSlot;\n\n        //System.out.println(\"    set bottom=\" + bottomSlot);\n        for (int i = 0; i < comparators.length; i++) {\n          leafComparators[i].setBottom(bottomSlot);\n        }\n      }\n    }\n    subDocUpto = 0;\n  }\n\n","sourceOld":"  // Called when we transition to another group; if the\n  // group is competitive we insert into the group queue\n  private void processGroup() {\n    totalGroupCount++;\n    //System.out.println(\"    processGroup ord=\" + lastGroupOrd + \" competes=\" + groupCompetes + \" count=\" + subDocUpto + \" groupDoc=\" + topGroupDoc);\n    if (groupCompetes) {\n      if (!queueFull) {\n        // Startup transient: always add a new OneGroup\n        final OneGroup og = new OneGroup();\n        og.count = subDocUpto;\n        og.topGroupDoc = docBase + topGroupDoc;\n        og.docs = pendingSubDocs;\n        pendingSubDocs = new int[10];\n        if (needsScores) {\n          og.scores = pendingSubScores;\n          pendingSubScores = new float[10];\n        }\n        og.readerContext = currentReaderContext;\n        //og.groupOrd = lastGroupOrd;\n        og.comparatorSlot = bottomSlot;\n        final OneGroup bottomGroup = groupQueue.add(og);\n        //System.out.println(\"      ADD group=\" + getGroupString(lastGroupOrd) + \" newBottom=\" + getGroupString(bottomGroup.groupOrd));\n        queueFull = groupQueue.size() == topNGroups;\n        if (queueFull) {\n          // Queue just became full; now set the real bottom\n          // in the comparators:\n          bottomSlot = bottomGroup.comparatorSlot;\n          //System.out.println(\"    set bottom=\" + bottomSlot);\n          for (int i = 0; i < comparators.length; i++) {\n            leafComparators[i].setBottom(bottomSlot);\n          }\n          //System.out.println(\"     QUEUE FULL\");\n        } else {\n          // Queue not full yet -- just advance bottomSlot:\n          bottomSlot = groupQueue.size();\n        }\n      } else {\n        // Replace bottom element in PQ and then updateTop\n        final OneGroup og = groupQueue.top();\n        assert og != null;\n        og.count = subDocUpto;\n        og.topGroupDoc = docBase + topGroupDoc;\n        // Swap pending docs\n        final int[] savDocs = og.docs;\n        og.docs = pendingSubDocs;\n        pendingSubDocs = savDocs;\n        if (needsScores) {\n          // Swap pending scores\n          final float[] savScores = og.scores;\n          og.scores = pendingSubScores;\n          pendingSubScores = savScores;\n        }\n        og.readerContext = currentReaderContext;\n        //og.groupOrd = lastGroupOrd;\n        bottomSlot = groupQueue.updateTop().comparatorSlot;\n\n        //System.out.println(\"    set bottom=\" + bottomSlot);\n        for (int i = 0; i < comparators.length; i++) {\n          leafComparators[i].setBottom(bottomSlot);\n        }\n      }\n    }\n    subDocUpto = 0;\n  }\n\n","bugFix":["3ce36a160d1241ae9c70e109dc3fdfdfb009674a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#processGroup().mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/BlockGroupingCollector#processGroup().mjava","sourceNew":"  // Called when we transition to another group; if the\n  // group is competitive we insert into the group queue\n  private void processGroup() throws IOException {\n    totalGroupCount++;\n    //System.out.println(\"    processGroup ord=\" + lastGroupOrd + \" competes=\" + groupCompetes + \" count=\" + subDocUpto + \" groupDoc=\" + topGroupDoc);\n    if (groupCompetes) {\n      if (!queueFull) {\n        // Startup transient: always add a new OneGroup\n        final OneGroup og = new OneGroup();\n        og.count = subDocUpto;\n        og.topGroupDoc = docBase + topGroupDoc;\n        og.docs = pendingSubDocs;\n        pendingSubDocs = new int[10];\n        if (needsScores) {\n          og.scores = pendingSubScores;\n          pendingSubScores = new float[10];\n        }\n        og.readerContext = currentReaderContext;\n        //og.groupOrd = lastGroupOrd;\n        og.comparatorSlot = bottomSlot;\n        final OneGroup bottomGroup = groupQueue.add(og);\n        //System.out.println(\"      ADD group=\" + getGroupString(lastGroupOrd) + \" newBottom=\" + getGroupString(bottomGroup.groupOrd));\n        queueFull = groupQueue.size() == topNGroups;\n        if (queueFull) {\n          // Queue just became full; now set the real bottom\n          // in the comparators:\n          bottomSlot = bottomGroup.comparatorSlot;\n          //System.out.println(\"    set bottom=\" + bottomSlot);\n          for (int i = 0; i < comparators.length; i++) {\n            leafComparators[i].setBottom(bottomSlot);\n          }\n          //System.out.println(\"     QUEUE FULL\");\n        } else {\n          // Queue not full yet -- just advance bottomSlot:\n          bottomSlot = groupQueue.size();\n        }\n      } else {\n        // Replace bottom element in PQ and then updateTop\n        final OneGroup og = groupQueue.top();\n        assert og != null;\n        og.count = subDocUpto;\n        og.topGroupDoc = docBase + topGroupDoc;\n        // Swap pending docs\n        final int[] savDocs = og.docs;\n        og.docs = pendingSubDocs;\n        pendingSubDocs = savDocs;\n        if (needsScores) {\n          // Swap pending scores\n          final float[] savScores = og.scores;\n          og.scores = pendingSubScores;\n          pendingSubScores = savScores;\n        }\n        og.readerContext = currentReaderContext;\n        //og.groupOrd = lastGroupOrd;\n        bottomSlot = groupQueue.updateTop().comparatorSlot;\n\n        //System.out.println(\"    set bottom=\" + bottomSlot);\n        for (int i = 0; i < comparators.length; i++) {\n          leafComparators[i].setBottom(bottomSlot);\n        }\n      }\n    }\n    subDocUpto = 0;\n  }\n\n","sourceOld":"  // Called when we transition to another group; if the\n  // group is competitive we insert into the group queue\n  private void processGroup() {\n    totalGroupCount++;\n    //System.out.println(\"    processGroup ord=\" + lastGroupOrd + \" competes=\" + groupCompetes + \" count=\" + subDocUpto + \" groupDoc=\" + topGroupDoc);\n    if (groupCompetes) {\n      if (!queueFull) {\n        // Startup transient: always add a new OneGroup\n        final OneGroup og = new OneGroup();\n        og.count = subDocUpto;\n        og.topGroupDoc = docBase + topGroupDoc;\n        og.docs = pendingSubDocs;\n        pendingSubDocs = new int[10];\n        if (needsScores) {\n          og.scores = pendingSubScores;\n          pendingSubScores = new float[10];\n        }\n        og.readerContext = currentReaderContext;\n        //og.groupOrd = lastGroupOrd;\n        og.comparatorSlot = bottomSlot;\n        final OneGroup bottomGroup = groupQueue.add(og);\n        //System.out.println(\"      ADD group=\" + getGroupString(lastGroupOrd) + \" newBottom=\" + getGroupString(bottomGroup.groupOrd));\n        queueFull = groupQueue.size() == topNGroups;\n        if (queueFull) {\n          // Queue just became full; now set the real bottom\n          // in the comparators:\n          bottomSlot = bottomGroup.comparatorSlot;\n          //System.out.println(\"    set bottom=\" + bottomSlot);\n          for (int i = 0; i < comparators.length; i++) {\n            leafComparators[i].setBottom(bottomSlot);\n          }\n          //System.out.println(\"     QUEUE FULL\");\n        } else {\n          // Queue not full yet -- just advance bottomSlot:\n          bottomSlot = groupQueue.size();\n        }\n      } else {\n        // Replace bottom element in PQ and then updateTop\n        final OneGroup og = groupQueue.top();\n        assert og != null;\n        og.count = subDocUpto;\n        og.topGroupDoc = docBase + topGroupDoc;\n        // Swap pending docs\n        final int[] savDocs = og.docs;\n        og.docs = pendingSubDocs;\n        pendingSubDocs = savDocs;\n        if (needsScores) {\n          // Swap pending scores\n          final float[] savScores = og.scores;\n          og.scores = pendingSubScores;\n          pendingSubScores = savScores;\n        }\n        og.readerContext = currentReaderContext;\n        //og.groupOrd = lastGroupOrd;\n        bottomSlot = groupQueue.updateTop().comparatorSlot;\n\n        //System.out.println(\"    set bottom=\" + bottomSlot);\n        for (int i = 0; i < comparators.length; i++) {\n          leafComparators[i].setBottom(bottomSlot);\n        }\n      }\n    }\n    subDocUpto = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f7558b5077dd4abd457be151475f13b541f4f13e":["901e951cec2e6af4e503209a6721c8834db23279"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"901e951cec2e6af4e503209a6721c8834db23279":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["901e951cec2e6af4e503209a6721c8834db23279","f7558b5077dd4abd457be151475f13b541f4f13e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7558b5077dd4abd457be151475f13b541f4f13e"]},"commit2Childs":{"f7558b5077dd4abd457be151475f13b541f4f13e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["901e951cec2e6af4e503209a6721c8834db23279"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"901e951cec2e6af4e503209a6721c8834db23279":["f7558b5077dd4abd457be151475f13b541f4f13e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}