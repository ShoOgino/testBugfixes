{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrServerTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    DebugServlet.clear();\n    try {\n      client.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    client.setAllowCompression(true);\n    try {\n      client.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    client.setAllowCompression(false);\n    try {\n      client.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    HttpClient httpclient = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      httpclient.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\");\n    client.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = client.query(q);\n    assertEquals(0, response.getStatus());\n    client.shutdown();\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrServer server = new HttpSolrServer(jetty.getBaseUrl().toString() +\n                                               \"/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    DebugServlet.clear();\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(true);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    server.setAllowCompression(false);\n    try {\n      server.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    HttpClient client = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = client.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      client.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    server = new HttpSolrServer(jetty.getBaseUrl().toString() + \"/collection1\");\n    server.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = server.query(q);\n    assertEquals(0, response.getStatus());\n    server.shutdown();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\");\n    try {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      \n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (Throwable t) {}\n      assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n      client.setAllowCompression(true);\n      try {\n        client.query(q);\n      } catch (Throwable t) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n      client.setAllowCompression(false);\n      try {\n        client.query(q);\n      } catch (Throwable t) {}\n      assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    } finally {\n      client.shutdown();\n    }\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    CloseableHttpClient httpclient = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      httpclient.close();\n    }\n    \n    // verify compressed response can be handled\n    client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\");\n    try {\n      client.setAllowCompression(true);\n      SolrQuery q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\");\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    // verify request header gets set\n    DebugServlet.clear();\n    try {\n      client.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    client.setAllowCompression(true);\n    try {\n      client.query(q);\n    } catch (Throwable t) {}\n    assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    client.setAllowCompression(false);\n    try {\n      client.query(q);\n    } catch (Throwable t) {}\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    HttpClient httpclient = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      httpclient.getConnectionManager().shutdown();\n    }\n    \n    // verify compressed response can be handled\n    client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\");\n    client.setAllowCompression(true);\n    q = new SolrQuery(\"foo\");\n    QueryResponse response = client.query(q);\n    assertEquals(0, response.getStatus());\n    client.shutdown();\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":["b4407017a35dea85f652ec066e4565818dd75436"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      \n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (Throwable t) {}\n      assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n      client.setAllowCompression(true);\n      try {\n        client.query(q);\n      } catch (Throwable t) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n      client.setAllowCompression(false);\n      try {\n        client.query(q);\n      } catch (Throwable t) {}\n      assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    CloseableHttpClient httpclient = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      httpclient.close();\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      client.setAllowCompression(true);\n      SolrQuery q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\");\n    try {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      \n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (Throwable t) {}\n      assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n      client.setAllowCompression(true);\n      try {\n        client.query(q);\n      } catch (Throwable t) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n      client.setAllowCompression(false);\n      try {\n        client.query(q);\n      } catch (Throwable t) {}\n      assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    } finally {\n      client.shutdown();\n    }\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    CloseableHttpClient httpclient = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      httpclient.close();\n    }\n    \n    // verify compressed response can be handled\n    client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\");\n    try {\n      client.setAllowCompression(true);\n      SolrQuery q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    } finally {\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b4407017a35dea85f652ec066e4565818dd75436","date":1431296729,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      \n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n      client.setAllowCompression(true);\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n      client.setAllowCompression(false);\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    CloseableHttpClient httpclient = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      httpclient.close();\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      client.setAllowCompression(true);\n      SolrQuery q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      \n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (Throwable t) {}\n      assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n      client.setAllowCompression(true);\n      try {\n        client.query(q);\n      } catch (Throwable t) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n      client.setAllowCompression(false);\n      try {\n        client.query(q);\n      } catch (Throwable t) {}\n      assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    CloseableHttpClient httpclient = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n      \n    } finally {\n      if(entity!=null) {\n        entity.getContent().close();\n      }\n      httpclient.close();\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      client.setAllowCompression(true);\n      SolrQuery q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","bugFix":["6784d0cc613dc1ee97030eaaa5e0754edc22d164","bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNull(DebugServlet.headers.toString(), DebugServlet.headers.get(\"Accept-Encoding\")); \n    }\n    \n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\", null, null, true)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\", null, null, false)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n    }\n\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, true);\n    \n    RequestConfig config = RequestConfig.custom().setDecompressionEnabled(false).build();   \n    get.setConfig(config);\n    \n    CloseableHttpClient httpclient = HttpClientUtil.createClient(params);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get, HttpClientUtil.createNewHttpClientRequestContext());\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertNotNull(Arrays.asList(response.getAllHeaders()).toString(), ceheader);\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      HttpClientUtil.close(httpclient);\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      SolrQuery q = new SolrQuery(\"*:*\");\n      \n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n      client.setAllowCompression(true);\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n      client.setAllowCompression(false);\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    CloseableHttpClient httpclient = HttpClientUtil.createClient(null);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get);\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      httpclient.close();\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      client.setAllowCompression(true);\n      SolrQuery q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try (HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNull(DebugServlet.headers.toString(), DebugServlet.headers.get(\"Accept-Encoding\")); \n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, true)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, false)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n    }\n\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, true);\n    \n    RequestConfig config = RequestConfig.custom().setDecompressionEnabled(false).build();   \n    get.setConfig(config);\n    \n    CloseableHttpClient httpclient = HttpClientUtil.createClient(params);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get, HttpClientUtil.createNewHttpClientRequestContext());\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertNotNull(Arrays.asList(response.getAllHeaders()).toString(), ceheader);\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      HttpClientUtil.close(httpclient);\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNull(DebugServlet.headers.toString(), DebugServlet.headers.get(\"Accept-Encoding\")); \n    }\n    \n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\", null, null, true)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\", null, null, false)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n    }\n\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, true);\n    \n    RequestConfig config = RequestConfig.custom().setDecompressionEnabled(false).build();   \n    get.setConfig(config);\n    \n    CloseableHttpClient httpclient = HttpClientUtil.createClient(params);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get, HttpClientUtil.createNewHttpClientRequestContext());\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertNotNull(Arrays.asList(response.getAllHeaders()).toString(), ceheader);\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      HttpClientUtil.close(httpclient);\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try (HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNull(DebugServlet.headers.toString(), DebugServlet.headers.get(\"Accept-Encoding\")); \n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, true)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, false)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n    }\n\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, true);\n    \n    RequestConfig config = RequestConfig.custom().setDecompressionEnabled(false).build();   \n    get.setConfig(config);\n    \n    CloseableHttpClient httpclient = HttpClientUtil.createClient(params);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get, HttpClientUtil.createNewHttpClientRequestContext());\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertNotNull(Arrays.asList(response.getAllHeaders()).toString(), ceheader);\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      HttpClientUtil.close(httpclient);\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\")) {\n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNull(DebugServlet.headers.toString(), DebugServlet.headers.get(\"Accept-Encoding\")); \n    }\n    \n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\", null, null, true)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/debug/foo\", null, null, false)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n    }\n\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, true);\n    \n    RequestConfig config = RequestConfig.custom().setDecompressionEnabled(false).build();   \n    get.setConfig(config);\n    \n    CloseableHttpClient httpclient = HttpClientUtil.createClient(params);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get, HttpClientUtil.createNewHttpClientRequestContext());\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertNotNull(Arrays.asList(response.getAllHeaders()).toString(), ceheader);\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      HttpClientUtil.close(httpclient);\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = new HttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"070b525fb213c5643ba35e1b60f1a1d4f7b23312","date":1475678176,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try (HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNull(DebugServlet.headers.toString(), DebugServlet.headers.get(\"Accept-Encoding\")); \n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, true)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, false)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n    }\n\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, true);\n    \n    RequestConfig config = RequestConfig.custom().setDecompressionEnabled(false).build();   \n    get.setConfig(config);\n    \n    CloseableHttpClient httpclient = HttpClientUtil.createClient(params);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get, HttpClientUtil.createNewHttpClientRequestContext(null));\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertNotNull(Arrays.asList(response.getAllHeaders()).toString(), ceheader);\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      HttpClientUtil.close(httpclient);\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try (HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNull(DebugServlet.headers.toString(), DebugServlet.headers.get(\"Accept-Encoding\")); \n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, true)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, false)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n    }\n\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, true);\n    \n    RequestConfig config = RequestConfig.custom().setDecompressionEnabled(false).build();   \n    get.setConfig(config);\n    \n    CloseableHttpClient httpclient = HttpClientUtil.createClient(params);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get, HttpClientUtil.createNewHttpClientRequestContext());\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertNotNull(Arrays.asList(response.getAllHeaders()).toString(), ceheader);\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      HttpClientUtil.close(httpclient);\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07cebc9816f8c940e8e9683abbdc742fe95e25d7","date":1475696954,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try (HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNull(DebugServlet.headers.toString(), DebugServlet.headers.get(\"Accept-Encoding\")); \n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, true)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, false)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n    }\n\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, true);\n    \n    RequestConfig config = RequestConfig.custom().setDecompressionEnabled(false).build();   \n    get.setConfig(config);\n    \n    CloseableHttpClient httpclient = HttpClientUtil.createClient(params);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get, HttpClientUtil.createNewHttpClientRequestContext());\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertNotNull(Arrays.asList(response.getAllHeaders()).toString(), ceheader);\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      HttpClientUtil.close(httpclient);\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try (HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNull(DebugServlet.headers.toString(), DebugServlet.headers.get(\"Accept-Encoding\")); \n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, true)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, false)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n    }\n\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, true);\n    \n    RequestConfig config = RequestConfig.custom().setDecompressionEnabled(false).build();   \n    get.setConfig(config);\n    \n    CloseableHttpClient httpclient = HttpClientUtil.createClient(params);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get, HttpClientUtil.createNewHttpClientRequestContext(null));\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertNotNull(Arrays.asList(response.getAllHeaders()).toString(), ceheader);\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      HttpClientUtil.close(httpclient);\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    final SolrQuery q = new SolrQuery(\"*:*\");\n    \n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try (HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // verify request header gets set\n      DebugServlet.clear();\n      expectThrows(ParseException.class, () -> client.query(q));\n      assertNull(DebugServlet.headers.toString(), DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, true)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, false)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n    }\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, true);\n    \n    RequestConfig config = RequestConfig.custom().setDecompressionEnabled(false).build();   \n    get.setConfig(config);\n    \n    CloseableHttpClient httpclient = HttpClientUtil.createClient(params);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get, HttpClientUtil.createNewHttpClientRequestContext());\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertNotNull(Arrays.asList(response.getAllHeaders()).toString(), ceheader);\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      HttpClientUtil.close(httpclient);\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      QueryResponse response = client.query(new SolrQuery(\"foo\"));\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try (HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNull(DebugServlet.headers.toString(), DebugServlet.headers.get(\"Accept-Encoding\")); \n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, true)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, false)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n    }\n\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, true);\n    \n    RequestConfig config = RequestConfig.custom().setDecompressionEnabled(false).build();   \n    get.setConfig(config);\n    \n    CloseableHttpClient httpclient = HttpClientUtil.createClient(params);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get, HttpClientUtil.createNewHttpClientRequestContext());\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertNotNull(Arrays.asList(response.getAllHeaders()).toString(), ceheader);\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      HttpClientUtil.close(httpclient);\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","bugFix":null,"bugIntro":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    final SolrQuery q = new SolrQuery(\"*:*\");\n    \n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try (HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // verify request header gets set\n      DebugServlet.clear();\n      expectThrows(ParseException.class, () -> client.query(q));\n      assertNull(DebugServlet.headers.toString(), DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, true)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, false)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n    }\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, true);\n    \n    RequestConfig config = RequestConfig.custom().setDecompressionEnabled(false).build();   \n    get.setConfig(config);\n    \n    CloseableHttpClient httpclient = HttpClientUtil.createClient(params);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get, HttpClientUtil.createNewHttpClientRequestContext());\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertNotNull(Arrays.asList(response.getAllHeaders()).toString(), ceheader);\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      HttpClientUtil.close(httpclient);\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      QueryResponse response = client.query(new SolrQuery(\"foo\"));\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try (HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNull(DebugServlet.headers.toString(), DebugServlet.headers.get(\"Accept-Encoding\")); \n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, true)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, false)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n    }\n\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, true);\n    \n    RequestConfig config = RequestConfig.custom().setDecompressionEnabled(false).build();   \n    get.setConfig(config);\n    \n    CloseableHttpClient httpclient = HttpClientUtil.createClient(params);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get, HttpClientUtil.createNewHttpClientRequestContext());\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertNotNull(Arrays.asList(response.getAllHeaders()).toString(), ceheader);\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      HttpClientUtil.close(httpclient);\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    final SolrQuery q = new SolrQuery(\"*:*\");\n    \n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try (HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // verify request header gets set\n      DebugServlet.clear();\n      expectThrows(ParseException.class, () -> client.query(q));\n      assertNull(DebugServlet.headers.toString(), DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, true)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, false)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n    }\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, true);\n    \n    RequestConfig config = RequestConfig.custom().setDecompressionEnabled(false).build();   \n    get.setConfig(config);\n    \n    CloseableHttpClient httpclient = HttpClientUtil.createClient(params);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get, HttpClientUtil.createNewHttpClientRequestContext());\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertNotNull(Arrays.asList(response.getAllHeaders()).toString(), ceheader);\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      HttpClientUtil.close(httpclient);\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      QueryResponse response = client.query(new SolrQuery(\"foo\"));\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    SolrQuery q = new SolrQuery(\"*:*\");\n    \n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try (HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // verify request header gets set\n      DebugServlet.clear();\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNull(DebugServlet.headers.toString(), DebugServlet.headers.get(\"Accept-Encoding\")); \n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, true)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, false)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n    }\n\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, true);\n    \n    RequestConfig config = RequestConfig.custom().setDecompressionEnabled(false).build();   \n    get.setConfig(config);\n    \n    CloseableHttpClient httpclient = HttpClientUtil.createClient(params);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get, HttpClientUtil.createNewHttpClientRequestContext());\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertNotNull(Arrays.asList(response.getAllHeaders()).toString(), ceheader);\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      HttpClientUtil.close(httpclient);\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      q = new SolrQuery(\"foo\");\n      QueryResponse response = client.query(q);\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f","date":1589320207,"type":3,"author":"Samuel García Martínez","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/BasicHttpSolrClientTest#testCompression().mjava","sourceNew":"  @Test\n  public void testCompression() throws Exception {\n    final SolrQuery q = new SolrQuery(\"*:*\");\n    \n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try (HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // verify request header gets set\n      DebugServlet.clear();\n      expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> client.query(q));\n      assertNull(DebugServlet.headers.toString(), DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, true)) {\n      try {\n        client.query(q);\n      } catch (BaseHttpSolrClient.RemoteSolrException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, false)) {\n      try {\n        client.query(q);\n      } catch (BaseHttpSolrClient.RemoteSolrException ignored) {}\n    }\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, true);\n    \n    RequestConfig config = RequestConfig.custom().setDecompressionEnabled(false).build();   \n    get.setConfig(config);\n    \n    CloseableHttpClient httpclient = HttpClientUtil.createClient(params);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get, HttpClientUtil.createNewHttpClientRequestContext());\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertNotNull(Arrays.asList(response.getAllHeaders()).toString(), ceheader);\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      HttpClientUtil.close(httpclient);\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      QueryResponse response = client.query(new SolrQuery(\"foo\"));\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testCompression() throws Exception {\n    final SolrQuery q = new SolrQuery(\"*:*\");\n    \n    final String clientUrl = jetty.getBaseUrl().toString() + \"/debug/foo\";\n    try (HttpSolrClient client = getHttpSolrClient(clientUrl)) {\n      // verify request header gets set\n      DebugServlet.clear();\n      expectThrows(ParseException.class, () -> client.query(q));\n      assertNull(DebugServlet.headers.toString(), DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, true)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n      assertNotNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(clientUrl, null, null, false)) {\n      try {\n        client.query(q);\n      } catch (ParseException ignored) {}\n    }\n    assertNull(DebugServlet.headers.get(\"Accept-Encoding\"));\n    \n    // verify server compresses output\n    HttpGet get = new HttpGet(jetty.getBaseUrl().toString() + \"/collection1\" +\n                              \"/select?q=foo&wt=xml\");\n    get.setHeader(\"Accept-Encoding\", \"gzip\");\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(HttpClientUtil.PROP_ALLOW_COMPRESSION, true);\n    \n    RequestConfig config = RequestConfig.custom().setDecompressionEnabled(false).build();   \n    get.setConfig(config);\n    \n    CloseableHttpClient httpclient = HttpClientUtil.createClient(params);\n    HttpEntity entity = null;\n    try {\n      HttpResponse response = httpclient.execute(get, HttpClientUtil.createNewHttpClientRequestContext());\n      entity = response.getEntity();\n      Header ceheader = entity.getContentEncoding();\n      assertNotNull(Arrays.asList(response.getAllHeaders()).toString(), ceheader);\n      assertEquals(\"gzip\", ceheader.getValue());\n    } finally {\n      if (entity != null) {\n        entity.getContent().close();\n      }\n      HttpClientUtil.close(httpclient);\n    }\n    \n    // verify compressed response can be handled\n    try (HttpSolrClient client = getHttpSolrClient(jetty.getBaseUrl().toString() + \"/collection1\")) {\n      QueryResponse response = client.query(new SolrQuery(\"foo\"));\n      assertEquals(0, response.getStatus());\n    }\n  }\n\n","bugFix":["d1a307447328c95a00248512b40d7a5ff12ecd6a","b4407017a35dea85f652ec066e4565818dd75436"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"070b525fb213c5643ba35e1b60f1a1d4f7b23312":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"b4407017a35dea85f652ec066e4565818dd75436":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8061ddd97f3352007d927dae445884a6f3d857b":["07cebc9816f8c940e8e9683abbdc742fe95e25d7","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"859081acf00749f5dd462772c571d611d4a4d2db":["b4407017a35dea85f652ec066e4565818dd75436"],"07cebc9816f8c940e8e9683abbdc742fe95e25d7":["070b525fb213c5643ba35e1b60f1a1d4f7b23312"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["07cebc9816f8c940e8e9683abbdc742fe95e25d7"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["07cebc9816f8c940e8e9683abbdc742fe95e25d7","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"070b525fb213c5643ba35e1b60f1a1d4f7b23312":["07cebc9816f8c940e8e9683abbdc742fe95e25d7"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"b4407017a35dea85f652ec066e4565818dd75436":["859081acf00749f5dd462772c571d611d4a4d2db"],"bafca15d8e408346a67f4282ad1143b88023893b":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"07cebc9816f8c940e8e9683abbdc742fe95e25d7":["f8061ddd97f3352007d927dae445884a6f3d857b","d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["070b525fb213c5643ba35e1b60f1a1d4f7b23312"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["b4407017a35dea85f652ec066e4565818dd75436"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["f8061ddd97f3352007d927dae445884a6f3d857b","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","ba4636b043a2611cc1c43bad730a78b6d5bc4a5f"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ba4636b043a2611cc1c43bad730a78b6d5bc4a5f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}