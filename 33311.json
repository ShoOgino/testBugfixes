{"path":"backwards/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, deletionPolicy, mfl.getLimit(), null, commit);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#IndexWriter(Directory,Analyzer,IndexDeletionPolicy,MaxFieldLength,IndexCommit).mjava","sourceNew":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, deletionPolicy, mfl.getLimit(), null, commit);\n  }\n\n","sourceOld":"  /**\n   * Expert: constructs an IndexWriter on specific commit\n   * point, with a custom {@link IndexDeletionPolicy}, for\n   * the index in <code>d</code>.  Text will be analyzed\n   * with <code>a</code>.\n   *\n   * <p> This is only meaningful if you've used a {@link\n   * IndexDeletionPolicy} in that past that keeps more than\n   * just the last commit.\n   * \n   * <p>This operation is similar to {@link #rollback()},\n   * except that method can only rollback what's been done\n   * with the current instance of IndexWriter since its last\n   * commit, whereas this method can rollback to an\n   * arbitrary commit point from the past, assuming the\n   * {@link IndexDeletionPolicy} has preserved past\n   * commits.\n   *\n   * @param d the index directory\n   * @param a the analyzer to use\n   * @param deletionPolicy see <a href=\"#deletionPolicy\">above</a>\n   * @param mfl whether or not to limit field lengths, value is in number of terms/tokens.  See {@link org.apache.lucene.index.IndexWriter.MaxFieldLength}.\n   * @param commit which commit to open\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws LockObtainFailedException if another writer\n   *  has this index open (<code>write.lock</code> could not\n   *  be obtained)\n   * @throws IOException if the directory cannot be read/written to, or\n   *  if it does not exist and <code>create</code> is\n   *  <code>false</code> or if there is any other low-level\n   *  IO error\n   */\n  public IndexWriter(Directory d, Analyzer a, IndexDeletionPolicy deletionPolicy, MaxFieldLength mfl, IndexCommit commit)\n       throws CorruptIndexException, LockObtainFailedException, IOException {\n    init(d, a, false, deletionPolicy, mfl.getLimit(), null, commit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}