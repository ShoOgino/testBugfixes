{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/DeltaBytesWriter#write(BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/DeltaBytesWriter#write(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  void write(BytesRef text) throws IOException {\n    int start = 0;\n    int upto = text.offset;\n    final int length = text.length;\n    final byte[] bytes = text.bytes;\n\n    final int limit = length < lastLength ? length : lastLength;\n    while(start < limit) {\n      if (bytes[upto] != lastBytes[start])\n        break;\n      start++;\n      upto++;\n    }\n\n    final int suffix = length - start;\n    out.writeVInt(start);                       // prefix\n    out.writeVInt(suffix);                      // suffix\n    out.writeBytes(bytes, upto, suffix);\n    if (lastBytes.length < length) {\n      lastBytes = ArrayUtil.grow(lastBytes, length);\n    }\n    // TODO: is this copy really necessary?  I don't think\n    // caller actually modifies these bytes, so we can save\n    // by reference?\n    System.arraycopy(bytes, upto, lastBytes, start, suffix);\n    lastLength = length;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DeltaBytesWriter#write(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/DeltaBytesWriter#write(BytesRef).mjava","sourceNew":"  void write(BytesRef text) throws IOException {\n    int start = 0;\n    int upto = text.offset;\n    final int length = text.length;\n    final byte[] bytes = text.bytes;\n\n    final int limit = length < lastLength ? length : lastLength;\n    while(start < limit) {\n      if (bytes[upto] != lastBytes[start])\n        break;\n      start++;\n      upto++;\n    }\n\n    final int suffix = length - start;\n    out.writeVInt(start);                       // prefix\n    out.writeVInt(suffix);                      // suffix\n    out.writeBytes(bytes, upto, suffix);\n    if (lastBytes.length < length) {\n      lastBytes = ArrayUtil.grow(lastBytes, length);\n    }\n    // TODO: is this copy really necessary?  I don't think\n    // caller actually modifies these bytes, so we can save\n    // by reference?\n    System.arraycopy(bytes, upto, lastBytes, start, suffix);\n    lastLength = length;\n  }\n\n","sourceOld":"  void write(BytesRef text) throws IOException {\n    int start = 0;\n    int upto = text.offset;\n    final int length = text.length;\n    final byte[] bytes = text.bytes;\n\n    final int limit = length < lastLength ? length : lastLength;\n    while(start < limit) {\n      if (bytes[upto] != lastBytes[start])\n        break;\n      start++;\n      upto++;\n    }\n\n    final int suffix = length - start;\n    out.writeVInt(start);                       // prefix\n    out.writeVInt(suffix);                      // suffix\n    out.writeBytes(bytes, upto, suffix);\n    if (lastBytes.length < length) {\n      lastBytes = ArrayUtil.grow(lastBytes, length);\n    }\n    // TODO: is this copy really necessary?  I don't think\n    // caller actually modifies these bytes, so we can save\n    // by reference?\n    System.arraycopy(bytes, upto, lastBytes, start, suffix);\n    lastLength = length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DeltaBytesWriter#write(BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/DeltaBytesWriter#write(BytesRef).mjava","sourceNew":"  void write(BytesRef text) throws IOException {\n    int start = 0;\n    int upto = text.offset;\n    final int length = text.length;\n    final byte[] bytes = text.bytes;\n\n    final int limit = length < lastLength ? length : lastLength;\n    while(start < limit) {\n      if (bytes[upto] != lastBytes[start])\n        break;\n      start++;\n      upto++;\n    }\n\n    final int suffix = length - start;\n    out.writeVInt(start);                       // prefix\n    out.writeVInt(suffix);                      // suffix\n    out.writeBytes(bytes, upto, suffix);\n    if (lastBytes.length < length) {\n      lastBytes = ArrayUtil.grow(lastBytes, length);\n    }\n    // TODO: is this copy really necessary?  I don't think\n    // caller actually modifies these bytes, so we can save\n    // by reference?\n    System.arraycopy(bytes, upto, lastBytes, start, suffix);\n    lastLength = length;\n  }\n\n","sourceOld":"  void write(BytesRef text) throws IOException {\n    int start = 0;\n    int upto = text.offset;\n    final int length = text.length;\n    final byte[] bytes = text.bytes;\n\n    final int limit = length < lastLength ? length : lastLength;\n    while(start < limit) {\n      if (bytes[upto] != lastBytes[start])\n        break;\n      start++;\n      upto++;\n    }\n\n    final int suffix = length - start;\n    out.writeVInt(start);                       // prefix\n    out.writeVInt(suffix);                      // suffix\n    out.writeBytes(bytes, upto, suffix);\n    if (lastBytes.length < length) {\n      lastBytes = ArrayUtil.grow(lastBytes, length);\n    }\n    // TODO: is this copy really necessary?  I don't think\n    // caller actually modifies these bytes, so we can save\n    // by reference?\n    System.arraycopy(bytes, upto, lastBytes, start, suffix);\n    lastLength = length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","99cf56f3a650b908f7017a72f9d23940418f8a52"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99cf56f3a650b908f7017a72f9d23940418f8a52"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}