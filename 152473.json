{"path":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores);\n      }\n      final Weight matchWeight = match.createWeight(searcher, needsScores);\n      final Weight contextWeight = context.createWeight(searcher, false);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public float getValueForNormalization() throws IOException {\n          return matchWeight.getValueForNormalization();\n        }\n\n        @Override\n        public void normalize(float norm, float topLevelBoost) {\n          matchWeight.normalize(norm, topLevelBoost);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context, acceptDocs);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context, acceptDocs);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.asTwoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores);\n      }\n      final Weight matchWeight = match.createWeight(searcher, needsScores);\n      final Weight contextWeight = context.createWeight(searcher, false);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public float getValueForNormalization() throws IOException {\n          return matchWeight.getValueForNormalization();\n        }\n\n        @Override\n        public void normalize(float norm, float topLevelBoost) {\n          matchWeight.normalize(norm, topLevelBoost);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.asTwoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores);\n      }\n      final Weight matchWeight = match.createWeight(searcher, needsScores);\n      final Weight contextWeight = context.createWeight(searcher, false);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public float getValueForNormalization() throws IOException {\n          return matchWeight.getValueForNormalization();\n        }\n\n        @Override\n        public void normalize(float norm, float topLevelBoost) {\n          matchWeight.normalize(norm, topLevelBoost);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context, acceptDocs);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context, acceptDocs);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.asTwoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dcad5b67a3707b9c95d1ce3d3818cb98ea30991","date":1441121770,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores);\n      final Weight contextWeight = searcher.createWeight(context, false);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public float getValueForNormalization() throws IOException {\n          return matchWeight.getValueForNormalization();\n        }\n\n        @Override\n        public void normalize(float norm, float topLevelBoost) {\n          matchWeight.normalize(norm, topLevelBoost);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.asTwoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores);\n      }\n      final Weight matchWeight = match.createWeight(searcher, needsScores);\n      final Weight contextWeight = context.createWeight(searcher, false);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public float getValueForNormalization() throws IOException {\n          return matchWeight.getValueForNormalization();\n        }\n\n        @Override\n        public void normalize(float norm, float topLevelBoost) {\n          matchWeight.normalize(norm, topLevelBoost);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.asTwoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores);\n      final Weight contextWeight = searcher.createWeight(context, false);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public float getValueForNormalization() throws IOException {\n          return matchWeight.getValueForNormalization();\n        }\n\n        @Override\n        public void normalize(float norm, float boost) {\n          matchWeight.normalize(norm, boost);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.asTwoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores);\n      final Weight contextWeight = searcher.createWeight(context, false);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public float getValueForNormalization() throws IOException {\n          return matchWeight.getValueForNormalization();\n        }\n\n        @Override\n        public void normalize(float norm, float topLevelBoost) {\n          matchWeight.normalize(norm, topLevelBoost);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.asTwoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores);\n      final Weight contextWeight = searcher.createWeight(context, false);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public float getValueForNormalization() throws IOException {\n          return matchWeight.getValueForNormalization();\n        }\n\n        @Override\n        public void normalize(float norm, float boost) {\n          matchWeight.normalize(norm, boost);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores);\n      final Weight contextWeight = searcher.createWeight(context, false);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public float getValueForNormalization() throws IOException {\n          return matchWeight.getValueForNormalization();\n        }\n\n        @Override\n        public void normalize(float norm, float boost) {\n          matchWeight.normalize(norm, boost);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.asTwoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores, boost);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores, boost);\n      final Weight contextWeight = searcher.createWeight(context, false, boost);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores);\n      final Weight contextWeight = searcher.createWeight(context, false);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public float getValueForNormalization() throws IOException {\n          return matchWeight.getValueForNormalization();\n        }\n\n        @Override\n        public void normalize(float norm, float boost) {\n          matchWeight.normalize(norm, boost);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/BoostingQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n      if (needsScores == false) {\n        return match.createWeight(searcher, needsScores);\n      }\n      final Weight matchWeight = searcher.createWeight(match, needsScores);\n      final Weight contextWeight = searcher.createWeight(context, false);\n      return new Weight(this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n          matchWeight.extractTerms(terms);\n          if (boost >= 1) {\n            contextWeight.extractTerms(terms);\n          }\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          final Explanation matchExplanation = matchWeight.explain(context, doc);\n          final Explanation contextExplanation = contextWeight.explain(context, doc);\n          if (matchExplanation.isMatch() == false || contextExplanation.isMatch() == false) {\n            return matchExplanation;\n          }\n          return Explanation.match(matchExplanation.getValue() * boost, \"product of:\",\n              matchExplanation,\n              Explanation.match(boost, \"boost\"));\n        }\n\n        @Override\n        public float getValueForNormalization() throws IOException {\n          return matchWeight.getValueForNormalization();\n        }\n\n        @Override\n        public void normalize(float norm, float boost) {\n          matchWeight.normalize(norm, boost);\n        }\n\n        @Override\n        public Scorer scorer(LeafReaderContext context) throws IOException {\n          final Scorer matchScorer = matchWeight.scorer(context);\n          if (matchScorer == null) {\n            return null;\n          }\n          final Scorer contextScorer = contextWeight.scorer(context);\n          if (contextScorer == null) {\n            return matchScorer;\n          }\n          TwoPhaseIterator contextTwoPhase = contextScorer.twoPhaseIterator();\n          DocIdSetIterator contextApproximation = contextTwoPhase == null\n              ? contextScorer.iterator()\n              : contextTwoPhase.approximation();\n          return new FilterScorer(matchScorer) {\n            @Override\n            public float score() throws IOException {\n              if (contextApproximation.docID() < docID()) {\n                contextApproximation.advance(docID());\n              }\n              assert contextApproximation.docID() >= docID();\n              float score = super.score();\n              if (contextApproximation.docID() == docID()\n                  && (contextTwoPhase == null || contextTwoPhase.matches())) {\n                score *= boost;\n              }\n              return score;\n            }\n          };\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"8dcad5b67a3707b9c95d1ce3d3818cb98ea30991":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["8dcad5b67a3707b9c95d1ce3d3818cb98ea30991"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["8dcad5b67a3707b9c95d1ce3d3818cb98ea30991"],"8dcad5b67a3707b9c95d1ce3d3818cb98ea30991":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}