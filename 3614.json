{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.Type.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.Type.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97d4692d0c601ff773f0a2231967312428a904e4","date":1366026608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.Type.SCORE) {\n        c = d.score;\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = d.id;\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.Type.SCORE) {\n        c = new Float(d.score);\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = new Integer(d.id);\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","sourceNew":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.Type.SCORE) {\n        c = d.score;\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = d.id;\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.Type.SCORE) {\n        c = d.score;\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = d.id;\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#fillFields(GroupDoc,Sort).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.Type.SCORE) {\n        c = d.score;\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = d.id;\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","sourceOld":"  private Comparable<?>[] fillFields(GroupDoc d, Sort sort) {\n    final SortField[] sortFields = sort.getSort();\n    final Comparable<?>[] fields = new Comparable[sortFields.length];\n    for(int fieldIDX=0;fieldIDX<sortFields.length;fieldIDX++) {\n      final Comparable<?> c;\n      final SortField sf = sortFields[fieldIDX];\n      if (sf.getType() == SortField.Type.SCORE) {\n        c = d.score;\n      } else if (sf.getField().equals(\"sort1\")) {\n        c = d.sort1;\n      } else if (sf.getField().equals(\"sort2\")) {\n        c = d.sort2;\n      } else {\n        assertEquals(\"id\", sf.getField());\n        c = d.id;\n      }\n      fields[fieldIDX] = c;\n    }\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["97d4692d0c601ff773f0a2231967312428a904e4"],"97d4692d0c601ff773f0a2231967312428a904e4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["97d4692d0c601ff773f0a2231967312428a904e4"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"97d4692d0c601ff773f0a2231967312428a904e4":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}