{"path":"lucene/facet/src/java/org/apache/lucene/facet/DoubleRange#getFilter(ValueSource).mjava","commits":[{"id":"56d44586f4c409c6c6c5942b9f0227df806b7300","date":1386027853,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/DoubleRange#getFilter(ValueSource).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a new {@link Filter} accepting only documents\n   *  in this range.  Note that this filter is not\n   *  efficient: it's a linear scan of all docs, testing\n   *  each value.  If the {@link ValueSource} is static,\n   *  e.g. an indexed numeric field, then it's more\n   *  efficient to use {@link NumericRangeFilter}. */\n  public Filter getFilter(final ValueSource valueSource) {\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n\n        // TODO: this is just like ValueSourceScorer,\n        // ValueSourceFilter (spatial),\n        // ValueSourceRangeFilter (solr); also,\n        // https://issues.apache.org/jira/browse/LUCENE-4251\n\n        final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n\n        final int maxDoc = context.reader().maxDoc();\n\n        return new DocIdSet() {\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int doc = -1;\n\n              @Override\n              public int nextDoc() throws IOException {\n                while (true) {\n                  doc++;\n                  if (doc == maxDoc) {\n                    return doc = NO_MORE_DOCS;\n                  }\n                  if (acceptDocs != null && acceptDocs.get(doc) == false) {\n                    continue;\n                  }\n                  double v = values.doubleVal(doc);\n                  if (accept(v)) {\n                    return doc;\n                  }\n                }\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                doc = target-1;\n                return nextDoc();\n              }\n\n              @Override\n              public int docID() {\n                return doc;\n              }\n\n              @Override\n              public long cost() {\n                // Since we do a linear scan over all\n                // documents, our cost is O(maxDoc):\n                return maxDoc;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4edc984f0f4ac77c37e48ace2932f780f888453c","date":1388475218,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRange#getFilter(ValueSource).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DoubleRange#getFilter(ValueSource).mjava","sourceNew":"  /** Returns a new {@link Filter} accepting only documents\n   *  in this range.  Note that this filter is not\n   *  efficient: it's a linear scan of all docs, testing\n   *  each value.  If the {@link ValueSource} is static,\n   *  e.g. an indexed numeric field, then it's more\n   *  efficient to use {@link NumericRangeFilter}. */\n  public Filter getFilter(final ValueSource valueSource) {\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n\n        // TODO: this is just like ValueSourceScorer,\n        // ValueSourceFilter (spatial),\n        // ValueSourceRangeFilter (solr); also,\n        // https://issues.apache.org/jira/browse/LUCENE-4251\n\n        final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n\n        final int maxDoc = context.reader().maxDoc();\n\n        return new DocIdSet() {\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int doc = -1;\n\n              @Override\n              public int nextDoc() throws IOException {\n                while (true) {\n                  doc++;\n                  if (doc == maxDoc) {\n                    return doc = NO_MORE_DOCS;\n                  }\n                  if (acceptDocs != null && acceptDocs.get(doc) == false) {\n                    continue;\n                  }\n                  double v = values.doubleVal(doc);\n                  if (accept(v)) {\n                    return doc;\n                  }\n                }\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                doc = target-1;\n                return nextDoc();\n              }\n\n              @Override\n              public int docID() {\n                return doc;\n              }\n\n              @Override\n              public long cost() {\n                // Since we do a linear scan over all\n                // documents, our cost is O(maxDoc):\n                return maxDoc;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /** Returns a new {@link Filter} accepting only documents\n   *  in this range.  Note that this filter is not\n   *  efficient: it's a linear scan of all docs, testing\n   *  each value.  If the {@link ValueSource} is static,\n   *  e.g. an indexed numeric field, then it's more\n   *  efficient to use {@link NumericRangeFilter}. */\n  public Filter getFilter(final ValueSource valueSource) {\n    return new Filter() {\n      @Override\n      public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n\n        // TODO: this is just like ValueSourceScorer,\n        // ValueSourceFilter (spatial),\n        // ValueSourceRangeFilter (solr); also,\n        // https://issues.apache.org/jira/browse/LUCENE-4251\n\n        final FunctionValues values = valueSource.getValues(Collections.emptyMap(), context);\n\n        final int maxDoc = context.reader().maxDoc();\n\n        return new DocIdSet() {\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return new DocIdSetIterator() {\n              int doc = -1;\n\n              @Override\n              public int nextDoc() throws IOException {\n                while (true) {\n                  doc++;\n                  if (doc == maxDoc) {\n                    return doc = NO_MORE_DOCS;\n                  }\n                  if (acceptDocs != null && acceptDocs.get(doc) == false) {\n                    continue;\n                  }\n                  double v = values.doubleVal(doc);\n                  if (accept(v)) {\n                    return doc;\n                  }\n                }\n              }\n\n              @Override\n              public int advance(int target) throws IOException {\n                doc = target-1;\n                return nextDoc();\n              }\n\n              @Override\n              public int docID() {\n                return doc;\n              }\n\n              @Override\n              public long cost() {\n                // Since we do a linear scan over all\n                // documents, our cost is O(maxDoc):\n                return maxDoc;\n              }\n            };\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4edc984f0f4ac77c37e48ace2932f780f888453c":["56d44586f4c409c6c6c5942b9f0227df806b7300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["4edc984f0f4ac77c37e48ace2932f780f888453c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56d44586f4c409c6c6c5942b9f0227df806b7300","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4edc984f0f4ac77c37e48ace2932f780f888453c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4edc984f0f4ac77c37e48ace2932f780f888453c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}