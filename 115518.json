{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map[Object,Object],LeafReaderContext).mjava","commits":[{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":1,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map[Object,Object],LeafReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction#createScaleInfo(Map,LeafReaderContext).mjava","sourceNew":"  private ScaleInfo createScaleInfo(Map<Object, Object> context, LeafReaderContext readerContext) throws IOException {\n    final List<LeafReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (LeafReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n        if ( ! vals.exists(i) ) {\n          continue;\n        }\n        float val = vals.floatVal(i);\n        if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n          // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n          // which don't make sense to factor into the scale function\n          continue;\n        }\n        if (val < minVal) {\n          minVal = val;\n        }\n        if (val > maxVal) {\n          maxVal = val;\n        }\n      }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(ScaleFloatFunction.this, scaleInfo);\n    return scaleInfo;\n  }\n\n","sourceOld":"  private ScaleInfo createScaleInfo(Map context, LeafReaderContext readerContext) throws IOException {\n    final List<LeafReaderContext> leaves = ReaderUtil.getTopLevelContext(readerContext).leaves();\n\n    float minVal = Float.POSITIVE_INFINITY;\n    float maxVal = Float.NEGATIVE_INFINITY;\n\n    for (LeafReaderContext leaf : leaves) {\n      int maxDoc = leaf.reader().maxDoc();\n      FunctionValues vals =  source.getValues(context, leaf);\n      for (int i=0; i<maxDoc; i++) {\n        if ( ! vals.exists(i) ) {\n          continue;\n        }\n        float val = vals.floatVal(i);\n        if ((Float.floatToRawIntBits(val) & (0xff<<23)) == 0xff<<23) {\n          // if the exponent in the float is all ones, then this is +Inf, -Inf or NaN\n          // which don't make sense to factor into the scale function\n          continue;\n        }\n        if (val < minVal) {\n          minVal = val;\n        }\n        if (val > maxVal) {\n          maxVal = val;\n        }\n      }\n    }\n\n    if (minVal == Float.POSITIVE_INFINITY) {\n    // must have been an empty index\n      minVal = maxVal = 0;\n    }\n\n    ScaleInfo scaleInfo = new ScaleInfo();\n    scaleInfo.minVal = minVal;\n    scaleInfo.maxVal = maxVal;\n    context.put(ScaleFloatFunction.this, scaleInfo);\n    return scaleInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}