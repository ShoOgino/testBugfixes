{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getDataPath(String).mjava","commits":[{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getDataPath(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getDataFile(String).mjava","sourceNew":"  /**\n   * Gets a resource from the classpath as {@link Path}. This method should only\n   * be used, if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  protected Path getDataPath(String name) throws IOException {\n    try {\n      return Paths.get(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets a resource from the classpath as {@link File}. This method should only\n   * be used, if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  protected File getDataFile(String name) throws IOException {\n    try {\n      return new File(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72fe0b51e0cceded28af2898cb5388a9173f8a28","date":1410651299,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getDataPath(String).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getDataPath(String).mjava","sourceNew":"  /**\n   * Gets a resource from the test's classpath as {@link Path}. This method should only\n   * be used, if a real file is needed. To get a stream, code should prefer\n   * {@link #getDataInputStream(String)}.\n   */\n  protected Path getDataPath(String name) throws IOException {\n    try {\n      return Paths.get(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets a resource from the classpath as {@link Path}. This method should only\n   * be used, if a real file is needed. To get a stream, code should prefer\n   * {@link Class#getResourceAsStream} using {@code this.getClass()}.\n   */\n  protected Path getDataPath(String name) throws IOException {\n    try {\n      return Paths.get(this.getClass().getResource(name).toURI());\n    } catch (Exception e) {\n      throw new IOException(\"Cannot find resource: \" + name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"72fe0b51e0cceded28af2898cb5388a9173f8a28":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["72fe0b51e0cceded28af2898cb5388a9173f8a28"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4abec28b874149a7223e32cc7a01704c27790de"],"72fe0b51e0cceded28af2898cb5388a9173f8a28":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4abec28b874149a7223e32cc7a01704c27790de":["72fe0b51e0cceded28af2898cb5388a9173f8a28"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}