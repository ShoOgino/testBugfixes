{"path":"src/test/org/apache/solr/analysis/TestSynonymFilter#tokAt(List,String,int,int,int).mjava","commits":[{"id":"751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226","date":1172784996,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/TestSynonymFilter#tokAt(List,String,int,int,int).mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#tokAt(List,String,int).mjava","sourceNew":"  public boolean tokAt(List lst, String val, int tokPos, int startOff, int endOff) {\n    int pos=0;\n    for (Iterator iter = lst.iterator(); iter.hasNext();) {\n      Token tok = (Token)iter.next();\n      pos += tok.getPositionIncrement();\n      if (pos==tokPos && tok.termText().equals(val)\n          && (startOff==-1 || tok.startOffset()==startOff)\n          && (endOff==-1 || tok.endOffset()==endOff)\n           )\n      {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean tokAt(List lst, String val, int tokPos) {\n    int pos=0;\n    for (Iterator iter = lst.iterator(); iter.hasNext();) {\n      Token tok = (Token)iter.next();\n      pos += tok.getPositionIncrement();\n      if (pos==tokPos && tok.termText().equals(val)) return true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de4d615b00f60dce1293e87276b0685ce0f0d621","date":1179940685,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/analysis/BaseTokenTestCase#tokAt(List[Token],String,int,int,int).mjava","pathOld":"src/test/org/apache/solr/analysis/TestSynonymFilter#tokAt(List,String,int,int,int).mjava","sourceNew":"  public boolean tokAt(List<Token> lst, String val, int tokPos, int startOff, int endOff) {\n    int pos=0;\n    for (Iterator iter = lst.iterator(); iter.hasNext();) {\n      Token tok = (Token)iter.next();\n      pos += tok.getPositionIncrement();\n      if (pos==tokPos && tok.termText().equals(val)\n          && (startOff==-1 || tok.startOffset()==startOff)\n          && (endOff  ==-1 || tok.endOffset()  ==endOff  )\n           )\n      {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  public boolean tokAt(List lst, String val, int tokPos, int startOff, int endOff) {\n    int pos=0;\n    for (Iterator iter = lst.iterator(); iter.hasNext();) {\n      Token tok = (Token)iter.next();\n      pos += tok.getPositionIncrement();\n      if (pos==tokPos && tok.termText().equals(val)\n          && (startOff==-1 || tok.startOffset()==startOff)\n          && (endOff==-1 || tok.endOffset()==endOff)\n           )\n      {\n        return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"de4d615b00f60dce1293e87276b0685ce0f0d621":["751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"de4d615b00f60dce1293e87276b0685ce0f0d621":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226"],"751bd9c20e69c4ab60e9b7c5f01ad1a3ff353226":["de4d615b00f60dce1293e87276b0685ce0f0d621"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de4d615b00f60dce1293e87276b0685ce0f0d621","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}