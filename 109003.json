{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","commits":[{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll().mjava","sourceNew":"  synchronized void lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      final Set<String> newFilesSet = new HashSet<String>();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortThreadState(perThread, newFilesSet);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes(newFilesSet);\n      putEvent(new DeleteNewFilesEvent(newFilesSet));\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  synchronized void lockAndAbortAll() {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        if (perThread.isActive()) { // we might be closed or \n          try {\n            perThread.dwpt.abort();\n          } finally {\n            perThread.dwpt.checkAndResetHasAborted();\n            flushControl.doOnAbort(perThread);\n          }\n        }\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll().mjava","sourceNew":"  synchronized void lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      final Set<String> newFilesSet = new HashSet<String>();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortThreadState(perThread, newFilesSet);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes(newFilesSet);\n      putEvent(new DeleteNewFilesEvent(newFilesSet));\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  synchronized void lockAndAbortAll() {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        if (perThread.isActive()) { // we might be closed or \n          try {\n            perThread.dwpt.abort();\n          } finally {\n            perThread.dwpt.checkAndResetHasAborted();\n            flushControl.doOnAbort(perThread);\n          }\n        }\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"/dev/null","sourceNew":"  synchronized void lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      final Set<String> newFilesSet = new HashSet<String>();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortThreadState(perThread, newFilesSet);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes(newFilesSet);\n      putEvent(new DeleteNewFilesEvent(newFilesSet));\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  synchronized void lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      final Set<String> newFilesSet = new HashSet<>();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortThreadState(perThread, newFilesSet);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes(newFilesSet);\n      putEvent(new DeleteNewFilesEvent(newFilesSet));\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  synchronized void lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      final Set<String> newFilesSet = new HashSet<String>();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortThreadState(perThread, newFilesSet);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes(newFilesSet);\n      putEvent(new DeleteNewFilesEvent(newFilesSet));\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9299079153fd7895bf3cf6835cf7019af2ba89b3","date":1417813477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  synchronized void lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  synchronized void lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      final Set<String> newFilesSet = new HashSet<>();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortThreadState(perThread, newFilesSet);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes(newFilesSet);\n      putEvent(new DeleteNewFilesEvent(newFilesSet));\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["98a04f56464afdffd4c430d6c47a0c868a38354e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acf0fc8b8488d15344408e0ed0ab484f4a3e1bf2","date":1424979404,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  synchronized void lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98a04f56464afdffd4c430d6c47a0c868a38354e","date":1424985833,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  synchronized void lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","bugFix":["9299079153fd7895bf3cf6835cf7019af2ba89b3","7af110b00ea8df9429309d83e38e0533d82e144f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  synchronized void lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8881d151c969a46b4293caa77faa7ecd63239100","date":1436824297,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (!success) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f6df47cbfd656ea50ca2996361f7954531ee18b","date":1464133540,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.seqNo.addAndGet(perThreadPool.getActiveThreadStateCount()+1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"16ebfabc294f23b88b6a39722a02c9d39b353195","date":1464343867,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount()+1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.seqNo.addAndGet(perThreadPool.getActiveThreadStateCount()+1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount()+1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount()+1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount()+1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) throws IOException {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    // Make sure we move all pending tickets into the flush queue:\n    ticketQueue.forcePurge(indexWriter);\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount()+1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount()+1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) throws IOException {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    // Make sure we move all pending tickets into the flush queue:\n    ticketQueue.forcePurge(indexWriter);\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount()+1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount()+1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) throws IOException {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    // Make sure we move all pending tickets into the flush queue:\n    ticketQueue.forcePurge(indexWriter);\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount()+1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","sourceOld":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount()+1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c","date":1521393811,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  /** Locks all currently active DWPT and aborts them.\n   *  The returned Closeable should be closed once the locks for the aborted\n   *  DWPTs can be released. */\n  synchronized Closeable lockAndAbortAll(IndexWriter indexWriter) throws IOException {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    // Make sure we move all pending tickets into the flush queue:\n    ticketQueue.forcePurge(indexWriter);\n    List<ThreadState> threadStates = new ArrayList<>();\n    AtomicBoolean released = new AtomicBoolean(false);\n    final Closeable release = () -> {\n      assert indexWriter.holdsFullFlushLock();\n      if (released.compareAndSet(false, true)) { // only once\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAllAbortedThread\");\n        }\n        perThreadPool.clearAbort();\n        for (ThreadState state : threadStates) {\n          state.unlock();\n        }\n      }\n    };\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        threadStates.add(perThread);\n        abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount() + 1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=true\");\n      }\n      return release;\n    } catch (Throwable t) {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=false\");\n      }\n      try {\n        // if something happens here we unlock all states again\n        release.close();\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","sourceOld":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) throws IOException {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    // Make sure we move all pending tickets into the flush queue:\n    ticketQueue.forcePurge(indexWriter);\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount()+1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"203e3fcf513c02ee2c07015f2ce277e26dc60907","date":1521404157,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  /** Locks all currently active DWPT and aborts them.\n   *  The returned Closeable should be closed once the locks for the aborted\n   *  DWPTs can be released. */\n  synchronized Closeable lockAndAbortAll(IndexWriter indexWriter) throws IOException {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    // Make sure we move all pending tickets into the flush queue:\n    ticketQueue.forcePurge(indexWriter);\n    List<ThreadState> threadStates = new ArrayList<>();\n    AtomicBoolean released = new AtomicBoolean(false);\n    final Closeable release = () -> {\n      assert indexWriter.holdsFullFlushLock();\n      if (released.compareAndSet(false, true)) { // only once\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAllAbortedThread\");\n        }\n        perThreadPool.clearAbort();\n        for (ThreadState state : threadStates) {\n          state.unlock();\n        }\n      }\n    };\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        threadStates.add(perThread);\n        abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount() + 1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=true\");\n      }\n      return release;\n    } catch (Throwable t) {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=false\");\n      }\n      try {\n        // if something happens here we unlock all states again\n        release.close();\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","sourceOld":"  /** Returns how many documents were aborted. */\n  synchronized long lockAndAbortAll(IndexWriter indexWriter) throws IOException {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    // Make sure we move all pending tickets into the flush queue:\n    ticketQueue.forcePurge(indexWriter);\n    long abortedDocCount = 0;\n    boolean success = false;\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        abortedDocCount += abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount()+1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      success = true;\n      return abortedDocCount;\n    } finally {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=\" + success);\n      }\n      if (success == false) {\n        // if something happens here we unlock all states again\n        unlockAllAfterAbortAll(indexWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b8498afacfc8322268ca0d659d274fcce08d557","date":1524577248,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriter#lockAndAbortAll(IndexWriter).mjava","sourceNew":"  /** Locks all currently active DWPT and aborts them.\n   *  The returned Closeable should be closed once the locks for the aborted\n   *  DWPTs can be released. */\n  synchronized Closeable lockAndAbortAll() throws IOException {\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    // Make sure we move all pending tickets into the flush queue:\n    ticketQueue.forcePurge(ticket -> {\n      if (ticket.getFlushedSegment() != null) {\n        pendingNumDocs.addAndGet(-ticket.getFlushedSegment().segmentInfo.info.maxDoc());\n      }\n    });\n    List<ThreadState> threadStates = new ArrayList<>();\n    AtomicBoolean released = new AtomicBoolean(false);\n    final Closeable release = () -> {\n      if (released.compareAndSet(false, true)) { // only once\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAllAbortedThread\");\n        }\n        perThreadPool.clearAbort();\n        for (ThreadState state : threadStates) {\n          state.unlock();\n        }\n      }\n    };\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        threadStates.add(perThread);\n        abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount() + 1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=true\");\n      }\n      return release;\n    } catch (Throwable t) {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=false\");\n      }\n      try {\n        // if something happens here we unlock all states again\n        release.close();\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","sourceOld":"  /** Locks all currently active DWPT and aborts them.\n   *  The returned Closeable should be closed once the locks for the aborted\n   *  DWPTs can be released. */\n  synchronized Closeable lockAndAbortAll(IndexWriter indexWriter) throws IOException {\n    assert indexWriter.holdsFullFlushLock();\n    if (infoStream.isEnabled(\"DW\")) {\n      infoStream.message(\"DW\", \"lockAndAbortAll\");\n    }\n    // Make sure we move all pending tickets into the flush queue:\n    ticketQueue.forcePurge(indexWriter);\n    List<ThreadState> threadStates = new ArrayList<>();\n    AtomicBoolean released = new AtomicBoolean(false);\n    final Closeable release = () -> {\n      assert indexWriter.holdsFullFlushLock();\n      if (released.compareAndSet(false, true)) { // only once\n        if (infoStream.isEnabled(\"DW\")) {\n          infoStream.message(\"DW\", \"unlockAllAbortedThread\");\n        }\n        perThreadPool.clearAbort();\n        for (ThreadState state : threadStates) {\n          state.unlock();\n        }\n      }\n    };\n    try {\n      deleteQueue.clear();\n      final int limit = perThreadPool.getMaxThreadStates();\n      perThreadPool.setAbort();\n      for (int i = 0; i < limit; i++) {\n        final ThreadState perThread = perThreadPool.getThreadState(i);\n        perThread.lock();\n        threadStates.add(perThread);\n        abortThreadState(perThread);\n      }\n      deleteQueue.clear();\n\n      // jump over any possible in flight ops:\n      deleteQueue.skipSequenceNumbers(perThreadPool.getActiveThreadStateCount() + 1);\n\n      flushControl.abortPendingFlushes();\n      flushControl.waitForFlush();\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=true\");\n      }\n      return release;\n    } catch (Throwable t) {\n      if (infoStream.isEnabled(\"DW\")) {\n        infoStream.message(\"DW\", \"finished lockAndAbortAll success=false\");\n      }\n      try {\n        // if something happens here we unlock all states again\n        release.close();\n      } catch (Throwable t1) {\n        t.addSuppressed(t1);\n      }\n      throw t;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7af110b00ea8df9429309d83e38e0533d82e144f"],"7af110b00ea8df9429309d83e38e0533d82e144f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"98a04f56464afdffd4c430d6c47a0c868a38354e":["9299079153fd7895bf3cf6835cf7019af2ba89b3","acf0fc8b8488d15344408e0ed0ab484f4a3e1bf2"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["191128ac5b85671b1671e2c857437694283b6ebf"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7af110b00ea8df9429309d83e38e0533d82e144f"],"8881d151c969a46b4293caa77faa7ecd63239100":["98a04f56464afdffd4c430d6c47a0c868a38354e"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["28288370235ed02234a64753cdbf0c6ec096304a","af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c"],"6483e4260c08168709c02238ae083a51519a28dd":["8881d151c969a46b4293caa77faa7ecd63239100","16ebfabc294f23b88b6a39722a02c9d39b353195"],"191128ac5b85671b1671e2c857437694283b6ebf":["8881d151c969a46b4293caa77faa7ecd63239100","6483e4260c08168709c02238ae083a51519a28dd"],"16ebfabc294f23b88b6a39722a02c9d39b353195":["0f6df47cbfd656ea50ca2996361f7954531ee18b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["191128ac5b85671b1671e2c857437694283b6ebf","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["191128ac5b85671b1671e2c857437694283b6ebf","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8881d151c969a46b4293caa77faa7ecd63239100","191128ac5b85671b1671e2c857437694283b6ebf"],"af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["9299079153fd7895bf3cf6835cf7019af2ba89b3","98a04f56464afdffd4c430d6c47a0c868a38354e"],"6b8498afacfc8322268ca0d659d274fcce08d557":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"acf0fc8b8488d15344408e0ed0ab484f4a3e1bf2":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0f6df47cbfd656ea50ca2996361f7954531ee18b":["8881d151c969a46b4293caa77faa7ecd63239100"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b8498afacfc8322268ca0d659d274fcce08d557"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"7af110b00ea8df9429309d83e38e0533d82e144f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"98a04f56464afdffd4c430d6c47a0c868a38354e":["8881d151c969a46b4293caa77faa7ecd63239100","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"8881d151c969a46b4293caa77faa7ecd63239100":["6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0f6df47cbfd656ea50ca2996361f7954531ee18b"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["6b8498afacfc8322268ca0d659d274fcce08d557"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"16ebfabc294f23b88b6a39722a02c9d39b353195":["6483e4260c08168709c02238ae083a51519a28dd"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["203e3fcf513c02ee2c07015f2ce277e26dc60907","af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"af02a5a3ff2c1e52a02c0f07ff02c7197e43e59c":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"6b8498afacfc8322268ca0d659d274fcce08d557":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"acf0fc8b8488d15344408e0ed0ab484f4a3e1bf2":["98a04f56464afdffd4c430d6c47a0c868a38354e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["98a04f56464afdffd4c430d6c47a0c868a38354e","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","acf0fc8b8488d15344408e0ed0ab484f4a3e1bf2"],"0f6df47cbfd656ea50ca2996361f7954531ee18b":["16ebfabc294f23b88b6a39722a02c9d39b353195"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}