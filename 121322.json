{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","commits":[{"id":"ee5183ac042828ef74f90f0874eaba7daeb409bd","date":1536546264,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","pathOld":"/dev/null","sourceNew":"  public void testSysPropSuggestions() {\n    String diagnostics = \"{\" +\n        \"  'diagnostics': {\" +\n        \"    'sortedNodes': [\" +\n        \"      {\" +\n        \"        'node': '127.0.0.1:63191_solr',\" +\n        \"        'isLive': true,\" +\n        \"        'cores': 3.0,\" +\n        \"        'sysprop.zone': 'east',\" +\n        \"        'freedisk': 1727.1459312438965,\" +\n        \"        'heapUsage': 24.97510064011647,\" +\n        \"        'sysLoadAvg': 272.75390625,\" +\n        \"        'totaldisk': 1037.938980102539,\" +\n        \"        'replicas': {\" +\n        \"          'zonesTest': {\" +\n        \"            'shard1': [\" +\n        \"              {\" +\n        \"                'core_node5': {\" +\n        \"                  'core': 'zonesTest_shard1_replica_n2',\" +\n        \"                  'leader': 'true',\" +\n        \"                  'base_url': 'https://127.0.0.1:63191/solr',\" +\n        \"                  'node_name': '127.0.0.1:63191_solr',\" +\n        \"                  'state': 'active',\" +\n        \"                  'type': 'NRT',\" +\n        \"                  'force_set_state': 'false',\" +\n        \"                  'INDEX.sizeInGB': 6.426125764846802E-8,\" +\n        \"                  'shard': 'shard1',\" +\n        \"                  'collection': 'zonesTest'\" +\n        \"                }\" +\n        \"              },\" +\n        \"              {\" +\n        \"                'core_node7': {\" +\n        \"                  'core': 'zonesTest_shard1_replica_n4',\" +\n        \"                  'base_url': 'https://127.0.0.1:63191/solr',\" +\n        \"                  'node_name': '127.0.0.1:63191_solr',\" +\n        \"                  'state': 'active',\" +\n        \"                  'type': 'NRT',\" +\n        \"                  'force_set_state': 'false',\" +\n        \"                  'INDEX.sizeInGB': 6.426125764846802E-8,\" +\n        \"                  'shard': 'shard1',\" +\n        \"                  'collection': 'zonesTest'\" +\n        \"                }\" +\n        \"              },\" +\n        \"              {\" +\n        \"                'core_node12': {\" +\n        \"                  'core': 'zonesTest_shard1_replica_n10',\" +\n        \"                  'base_url': 'https://127.0.0.1:63191/solr',\" +\n        \"                  'node_name': '127.0.0.1:63191_solr',\" +\n        \"                  'state': 'active',\" +\n        \"                  'type': 'NRT',\" +\n        \"                  'force_set_state': 'false',\" +\n        \"                  'INDEX.sizeInGB': 6.426125764846802E-8,\" +\n        \"                  'shard': 'shard1',\" +\n        \"                  'collection': 'zonesTest'\" +\n        \"                }\" +\n        \"              }\" +\n        \"            ]\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      {\" +\n        \"        'node': '127.0.0.1:63192_solr',\" +\n        \"        'isLive': true,\" +\n        \"        'cores': 3.0,\" +\n        \"        'sysprop.zone': 'east',\" +\n        \"        'freedisk': 1727.1459312438965,\" +\n        \"        'heapUsage': 24.98878807983566,\" +\n        \"        'sysLoadAvg': 272.75390625,\" +\n        \"        'totaldisk': 1037.938980102539,\" +\n        \"        'replicas': {\" +\n        \"          'zonesTest': {\" +\n        \"            'shard2': [\" +\n        \"              {\" +\n        \"                'core_node3': {\" +\n        \"                  'core': 'zonesTest_shard1_replica_n1',\" +\n        \"                  'base_url': 'https://127.0.0.1:63192/solr',\" +\n        \"                  'node_name': '127.0.0.1:63192_solr',\" +\n        \"                  'state': 'active',\" +\n        \"                  'type': 'NRT',\" +\n        \"                  'force_set_state': 'false',\" +\n        \"                  'INDEX.sizeInGB': 6.426125764846802E-8,\" +\n        \"                  'shard': 'shard2',\" +\n        \"                  'collection': 'zonesTest'\" +\n        \"                }\" +\n        \"              },\" +\n        \"              {\" +\n        \"                'core_node9': {\" +\n        \"                  'core': 'zonesTest_shard1_replica_n6',\" +\n        \"                  'base_url': 'https://127.0.0.1:63192/solr',\" +\n        \"                  'node_name': '127.0.0.1:63192_solr',\" +\n        \"                  'state': 'active',\" +\n        \"                  'type': 'NRT',\" +\n        \"                  'force_set_state': 'false',\" +\n        \"                  'INDEX.sizeInGB': 6.426125764846802E-8,\" +\n        \"                  'shard': 'shard2',\" +\n        \"                  'collection': 'zonesTest'\" +\n        \"                }\" +\n        \"              },\" +\n        \"              {\" +\n        \"                'core_node11': {\" +\n        \"                  'core': 'zonesTest_shard1_replica_n8',\" +\n        \"                  'base_url': 'https://127.0.0.1:63192/solr',\" +\n        \"                  'node_name': '127.0.0.1:63192_solr',\" +\n        \"                  'state': 'active',\" +\n        \"                  'type': 'NRT',\" +\n        \"                  'force_set_state': 'false',\" +\n        \"                  'INDEX.sizeInGB': 6.426125764846802E-8,\" +\n        \"                  'shard': 'shard2',\" +\n        \"                  'collection': 'zonesTest'\" +\n        \"                }\" +\n        \"              }\" +\n        \"            ]\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      {\" +\n        \"        'node': '127.0.0.1:63219_solr',\" +\n        \"        'isLive': true,\" +\n        \"        'cores': 0.0,\" +\n        \"        'sysprop.zone': 'west',\" +\n        \"        'freedisk': 1768.6174201965332,\" +\n        \"        'heapUsage': 24.98878807983566,\" +\n        \"        'sysLoadAvg': 272.75390625,\" +\n        \"        'totaldisk': 1037.938980102539,\" +\n        \"        'replicas': {}\" +\n        \"      },\" +\n        \"      {\" +\n        \"        'node': '127.0.0.1:63229_solr',\" +\n        \"        'isLive': true,\" +\n        \"        'cores': 0.0,\" +\n        \"        'sysprop.zone': 'west',\" +\n        \"        'freedisk': 1768.6174201965332,\" +\n        \"        'heapUsage': 24.98878807983566,\" +\n        \"        'sysLoadAvg': 272.75390625,\" +\n        \"        'totaldisk': 1037.938980102539,\" +\n        \"        'replicas': {}\" +\n        \"      }\" +\n        \"    ],\" +\n        \"    'liveNodes': [\" +\n        \"      '127.0.0.1:63191_solr',\" +\n        \"      '127.0.0.1:63192_solr',\" +\n        \"      '127.0.0.1:63219_solr',\" +\n        \"      '127.0.0.1:63229_solr'\" +\n        \"    ],\" +\n        \"    'config': {\" +\n        \"      'cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 1},\" +\n        \"        {'maximize': 'freedisk', 'precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg', 'precision': 10}\" +\n        \"      ],\" +\n        \"      'cluster-policy': [\" +\n        \"        {'replica': '<3', 'shard': '#EACH', 'sysprop.zone': [east, west]}\" +\n        \"      ]\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n    Map<String, Object> m = (Map<String, Object>) Utils.fromJSONString(diagnostics);\n\n    Map<String, Object> conf = (Map<String, Object>) Utils.getObjectByPath(m, false, \"diagnostics/config\");\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\")));\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9fe59d880401d7b6a9bd963ae45c19b2e6798c1","date":1537498541,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","sourceNew":"  public void testSysPropSuggestions() throws IOException {\n\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSysPropSuggestions.json\");\n\n    Map<String, Object> conf = (Map<String, Object>) Utils.getObjectByPath(m, false, \"diagnostics/config\");\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\")));\n\n    }\n  }\n\n","sourceOld":"  public void testSysPropSuggestions() {\n    String diagnostics = \"{\" +\n        \"  'diagnostics': {\" +\n        \"    'sortedNodes': [\" +\n        \"      {\" +\n        \"        'node': '127.0.0.1:63191_solr',\" +\n        \"        'isLive': true,\" +\n        \"        'cores': 3.0,\" +\n        \"        'sysprop.zone': 'east',\" +\n        \"        'freedisk': 1727.1459312438965,\" +\n        \"        'heapUsage': 24.97510064011647,\" +\n        \"        'sysLoadAvg': 272.75390625,\" +\n        \"        'totaldisk': 1037.938980102539,\" +\n        \"        'replicas': {\" +\n        \"          'zonesTest': {\" +\n        \"            'shard1': [\" +\n        \"              {\" +\n        \"                'core_node5': {\" +\n        \"                  'core': 'zonesTest_shard1_replica_n2',\" +\n        \"                  'leader': 'true',\" +\n        \"                  'base_url': 'https://127.0.0.1:63191/solr',\" +\n        \"                  'node_name': '127.0.0.1:63191_solr',\" +\n        \"                  'state': 'active',\" +\n        \"                  'type': 'NRT',\" +\n        \"                  'force_set_state': 'false',\" +\n        \"                  'INDEX.sizeInGB': 6.426125764846802E-8,\" +\n        \"                  'shard': 'shard1',\" +\n        \"                  'collection': 'zonesTest'\" +\n        \"                }\" +\n        \"              },\" +\n        \"              {\" +\n        \"                'core_node7': {\" +\n        \"                  'core': 'zonesTest_shard1_replica_n4',\" +\n        \"                  'base_url': 'https://127.0.0.1:63191/solr',\" +\n        \"                  'node_name': '127.0.0.1:63191_solr',\" +\n        \"                  'state': 'active',\" +\n        \"                  'type': 'NRT',\" +\n        \"                  'force_set_state': 'false',\" +\n        \"                  'INDEX.sizeInGB': 6.426125764846802E-8,\" +\n        \"                  'shard': 'shard1',\" +\n        \"                  'collection': 'zonesTest'\" +\n        \"                }\" +\n        \"              },\" +\n        \"              {\" +\n        \"                'core_node12': {\" +\n        \"                  'core': 'zonesTest_shard1_replica_n10',\" +\n        \"                  'base_url': 'https://127.0.0.1:63191/solr',\" +\n        \"                  'node_name': '127.0.0.1:63191_solr',\" +\n        \"                  'state': 'active',\" +\n        \"                  'type': 'NRT',\" +\n        \"                  'force_set_state': 'false',\" +\n        \"                  'INDEX.sizeInGB': 6.426125764846802E-8,\" +\n        \"                  'shard': 'shard1',\" +\n        \"                  'collection': 'zonesTest'\" +\n        \"                }\" +\n        \"              }\" +\n        \"            ]\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      {\" +\n        \"        'node': '127.0.0.1:63192_solr',\" +\n        \"        'isLive': true,\" +\n        \"        'cores': 3.0,\" +\n        \"        'sysprop.zone': 'east',\" +\n        \"        'freedisk': 1727.1459312438965,\" +\n        \"        'heapUsage': 24.98878807983566,\" +\n        \"        'sysLoadAvg': 272.75390625,\" +\n        \"        'totaldisk': 1037.938980102539,\" +\n        \"        'replicas': {\" +\n        \"          'zonesTest': {\" +\n        \"            'shard2': [\" +\n        \"              {\" +\n        \"                'core_node3': {\" +\n        \"                  'core': 'zonesTest_shard1_replica_n1',\" +\n        \"                  'base_url': 'https://127.0.0.1:63192/solr',\" +\n        \"                  'node_name': '127.0.0.1:63192_solr',\" +\n        \"                  'state': 'active',\" +\n        \"                  'type': 'NRT',\" +\n        \"                  'force_set_state': 'false',\" +\n        \"                  'INDEX.sizeInGB': 6.426125764846802E-8,\" +\n        \"                  'shard': 'shard2',\" +\n        \"                  'collection': 'zonesTest'\" +\n        \"                }\" +\n        \"              },\" +\n        \"              {\" +\n        \"                'core_node9': {\" +\n        \"                  'core': 'zonesTest_shard1_replica_n6',\" +\n        \"                  'base_url': 'https://127.0.0.1:63192/solr',\" +\n        \"                  'node_name': '127.0.0.1:63192_solr',\" +\n        \"                  'state': 'active',\" +\n        \"                  'type': 'NRT',\" +\n        \"                  'force_set_state': 'false',\" +\n        \"                  'INDEX.sizeInGB': 6.426125764846802E-8,\" +\n        \"                  'shard': 'shard2',\" +\n        \"                  'collection': 'zonesTest'\" +\n        \"                }\" +\n        \"              },\" +\n        \"              {\" +\n        \"                'core_node11': {\" +\n        \"                  'core': 'zonesTest_shard1_replica_n8',\" +\n        \"                  'base_url': 'https://127.0.0.1:63192/solr',\" +\n        \"                  'node_name': '127.0.0.1:63192_solr',\" +\n        \"                  'state': 'active',\" +\n        \"                  'type': 'NRT',\" +\n        \"                  'force_set_state': 'false',\" +\n        \"                  'INDEX.sizeInGB': 6.426125764846802E-8,\" +\n        \"                  'shard': 'shard2',\" +\n        \"                  'collection': 'zonesTest'\" +\n        \"                }\" +\n        \"              }\" +\n        \"            ]\" +\n        \"          }\" +\n        \"        }\" +\n        \"      },\" +\n        \"      {\" +\n        \"        'node': '127.0.0.1:63219_solr',\" +\n        \"        'isLive': true,\" +\n        \"        'cores': 0.0,\" +\n        \"        'sysprop.zone': 'west',\" +\n        \"        'freedisk': 1768.6174201965332,\" +\n        \"        'heapUsage': 24.98878807983566,\" +\n        \"        'sysLoadAvg': 272.75390625,\" +\n        \"        'totaldisk': 1037.938980102539,\" +\n        \"        'replicas': {}\" +\n        \"      },\" +\n        \"      {\" +\n        \"        'node': '127.0.0.1:63229_solr',\" +\n        \"        'isLive': true,\" +\n        \"        'cores': 0.0,\" +\n        \"        'sysprop.zone': 'west',\" +\n        \"        'freedisk': 1768.6174201965332,\" +\n        \"        'heapUsage': 24.98878807983566,\" +\n        \"        'sysLoadAvg': 272.75390625,\" +\n        \"        'totaldisk': 1037.938980102539,\" +\n        \"        'replicas': {}\" +\n        \"      }\" +\n        \"    ],\" +\n        \"    'liveNodes': [\" +\n        \"      '127.0.0.1:63191_solr',\" +\n        \"      '127.0.0.1:63192_solr',\" +\n        \"      '127.0.0.1:63219_solr',\" +\n        \"      '127.0.0.1:63229_solr'\" +\n        \"    ],\" +\n        \"    'config': {\" +\n        \"      'cluster-preferences': [\" +\n        \"        {'minimize': 'cores', 'precision': 1},\" +\n        \"        {'maximize': 'freedisk', 'precision': 100},\" +\n        \"        {'minimize': 'sysLoadAvg', 'precision': 10}\" +\n        \"      ],\" +\n        \"      'cluster-policy': [\" +\n        \"        {'replica': '<3', 'shard': '#EACH', 'sysprop.zone': [east, west]}\" +\n        \"      ]\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n\n    Map<String, Object> m = (Map<String, Object>) Utils.fromJSONString(diagnostics);\n\n    Map<String, Object> conf = (Map<String, Object>) Utils.getObjectByPath(m, false, \"diagnostics/config\");\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\")));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":["00473ada9520f7423d1a7b4cfdb16f49856ddcac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"986a3b20441337c17126faebcbab4e2248154bdf","date":1537886823,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","sourceNew":"  public void testSysPropSuggestions() throws IOException {\n\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSysPropSuggestions.json\");\n\n    Map<String, Object> conf = (Map<String, Object>) Utils.getObjectByPath(m, false, \"diagnostics/config\");\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n\n    }\n  }\n\n","sourceOld":"  public void testSysPropSuggestions() throws IOException {\n\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSysPropSuggestions.json\");\n\n    Map<String, Object> conf = (Map<String, Object>) Utils.getObjectByPath(m, false, \"diagnostics/config\");\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          Utils.getObjectByPath(suggestion, true, \"operation/command/move-replica/targetNode\")));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00473ada9520f7423d1a7b4cfdb16f49856ddcac","date":1540213439,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","sourceNew":"  public void testSysPropSuggestions() {\n\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSysPropSuggestions.json\");\n\n    Map<String, Object> conf = (Map<String, Object>) Utils.getObjectByPath(m, false, \"diagnostics/config\");\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n\n    }\n  }\n\n","sourceOld":"  public void testSysPropSuggestions() throws IOException {\n\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSysPropSuggestions.json\");\n\n    Map<String, Object> conf = (Map<String, Object>) Utils.getObjectByPath(m, false, \"diagnostics/config\");\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n\n    }\n  }\n\n","bugFix":["e9fe59d880401d7b6a9bd963ae45c19b2e6798c1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe52ff382a90016f1f6f34f2a026c4749eebb1b8","date":1541503646,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","sourceNew":"  public void testSysPropSuggestions() {\n\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSysPropSuggestions.json\");\n\n    Map<String, Object> conf = (Map<String, Object>) getObjectByPath(m, false, \"diagnostics/config\");\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n\n    }\n  }\n\n","sourceOld":"  public void testSysPropSuggestions() {\n\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSysPropSuggestions.json\");\n\n    Map<String, Object> conf = (Map<String, Object>) Utils.getObjectByPath(m, false, \"diagnostics/config\");\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ddd9a76400512cda8f22bbc69e3d8b85672a91a","date":1559288755,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","sourceNew":"  public void testSysPropSuggestions() {\n\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSysPropSuggestions.json\");\n\n    Map<String, Object> conf = (Map<String, Object>) getObjectByPath(m, false, \"diagnostics/config\");\n    if(useNodeset){\n      conf = (Map<String, Object>) Utils.fromJSONString(\"{\" +\n          \"    'cluster-preferences':[{\" +\n          \"      'minimize':'cores',\" +\n          \"      'precision':1},\" +\n          \"      {\" +\n          \"        'maximize':'freedisk',\" +\n          \"        'precision':100},\" +\n          \"      {\" +\n          \"        'minimize':'sysLoadAvg',\" +\n          \"        'precision':10}],\" +\n          \"    'cluster-policy':[{\" +\n          \"      'replica':'<3',\" +\n          \"      'shard':'#EACH',\" +\n          \"      nodeset: {'sysprop.zone':['east','west']}}]}\");\n    }\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n\n    }\n  }\n\n","sourceOld":"  public void testSysPropSuggestions() {\n\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSysPropSuggestions.json\");\n\n    Map<String, Object> conf = (Map<String, Object>) getObjectByPath(m, false, \"diagnostics/config\");\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","sourceNew":"  public void testSysPropSuggestions() {\n\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSysPropSuggestions.json\");\n\n    Map<String, Object> conf = (Map<String, Object>) getObjectByPath(m, false, \"diagnostics/config\");\n    if(useNodeset){\n      conf = (Map<String, Object>) Utils.fromJSONString(\"{\" +\n          \"    'cluster-preferences':[{\" +\n          \"      'minimize':'cores',\" +\n          \"      'precision':1},\" +\n          \"      {\" +\n          \"        'maximize':'freedisk',\" +\n          \"        'precision':100},\" +\n          \"      {\" +\n          \"        'minimize':'sysLoadAvg',\" +\n          \"        'precision':10}],\" +\n          \"    'cluster-policy':[{\" +\n          \"      'replica':'<3',\" +\n          \"      'shard':'#EACH',\" +\n          \"      nodeset: {'sysprop.zone':['east','west']}}]}\");\n    }\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n\n    }\n  }\n\n","sourceOld":"  public void testSysPropSuggestions() {\n\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSysPropSuggestions.json\");\n\n    Map<String, Object> conf = (Map<String, Object>) getObjectByPath(m, false, \"diagnostics/config\");\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7194afdfe9b45ca331c1cd5001cd9766688688b","date":1560867417,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","sourceNew":"  public void testSysPropSuggestions() {\n\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSysPropSuggestions.json\");\n\n    Map<String, Object> conf = (Map<String, Object>) getObjectByPath(m, false, \"diagnostics/config\");\n    if(useNodeset){\n      conf = (Map<String, Object>) Utils.fromJSONString(\"{\" +\n          \"    'cluster-preferences':[{\" +\n          \"      'minimize':'cores',\" +\n          \"      'precision':1},\" +\n          \"      {\" +\n          \"        'maximize':'freedisk',\" +\n          \"        'precision':100},\" +\n          \"      {\" +\n          \"        'minimize':'sysLoadAvg',\" +\n          \"        'precision':10}],\" +\n          \"    'cluster-policy':[\" +\n          \"{'replica':'<3',\" +\n          \"      'shard':'#EACH',\" +\n          \"      nodeset: {'sysprop.zone':'east'}}, \" +\n          \"{'replica':'<3',\" +\n          \"      'shard':'#EACH',\" +\n          \"      nodeset: {'sysprop.zone':'west'}} \" +\n          \" ]}\");\n    }\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n\n    }\n  }\n\n","sourceOld":"  public void testSysPropSuggestions() {\n\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSysPropSuggestions.json\");\n\n    Map<String, Object> conf = (Map<String, Object>) getObjectByPath(m, false, \"diagnostics/config\");\n    if(useNodeset){\n      conf = (Map<String, Object>) Utils.fromJSONString(\"{\" +\n          \"    'cluster-preferences':[{\" +\n          \"      'minimize':'cores',\" +\n          \"      'precision':1},\" +\n          \"      {\" +\n          \"        'maximize':'freedisk',\" +\n          \"        'precision':100},\" +\n          \"      {\" +\n          \"        'minimize':'sysLoadAvg',\" +\n          \"        'precision':10}],\" +\n          \"    'cluster-policy':[{\" +\n          \"      'replica':'<3',\" +\n          \"      'shard':'#EACH',\" +\n          \"      nodeset: {'sysprop.zone':['east','west']}}]}\");\n    }\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testSysPropSuggestions() {\n\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSysPropSuggestions.json\");\n\n    Map<String, Object> conf = (Map<String, Object>) getObjectByPath(m, false, \"diagnostics/config\");\n    if(useNodeset){\n      conf = (Map<String, Object>) Utils.fromJSONString(\"{\" +\n          \"    'cluster-preferences':[{\" +\n          \"      'minimize':'cores',\" +\n          \"      'precision':1},\" +\n          \"      {\" +\n          \"        'maximize':'freedisk',\" +\n          \"        'precision':100},\" +\n          \"      {\" +\n          \"        'minimize':'sysLoadAvg',\" +\n          \"        'precision':10}],\" +\n          \"    'cluster-policy':[\" +\n          \"{'replica':'<3',\" +\n          \"      'shard':'#EACH',\" +\n          \"      nodeset: {'sysprop.zone':'east'}}, \" +\n          \"{'replica':'<3',\" +\n          \"      'shard':'#EACH',\" +\n          \"      nodeset: {'sysprop.zone':'west'}} \" +\n          \" ]}\");\n    }\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n\n    }\n  }\n\n","sourceOld":"  public void testSysPropSuggestions() {\n\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSysPropSuggestions.json\");\n\n    Map<String, Object> conf = (Map<String, Object>) getObjectByPath(m, false, \"diagnostics/config\");\n    if(useNodeset){\n      conf = (Map<String, Object>) Utils.fromJSONString(\"{\" +\n          \"    'cluster-preferences':[{\" +\n          \"      'minimize':'cores',\" +\n          \"      'precision':1},\" +\n          \"      {\" +\n          \"        'maximize':'freedisk',\" +\n          \"        'precision':100},\" +\n          \"      {\" +\n          \"        'minimize':'sysLoadAvg',\" +\n          \"        'precision':10}],\" +\n          \"    'cluster-policy':[\" +\n          \"{'replica':'<3',\" +\n          \"      'shard':'#EACH',\" +\n          \"      nodeset: {'sysprop.zone':'east'}}, \" +\n          \"{'replica':'<3',\" +\n          \"      'shard':'#EACH',\" +\n          \"      nodeset: {'sysprop.zone':'west'}} \" +\n          \" ]}\");\n    }\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy2#testSysPropSuggestions().mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  public void testSysPropSuggestions() {\n\n    Map<String, Object> m = (Map<String, Object>) loadFromResource(\"testSysPropSuggestions.json\");\n\n    Map<String, Object> conf = (Map<String, Object>) getObjectByPath(m, false, \"diagnostics/config\");\n    if(useNodeset){\n      conf = (Map<String, Object>) Utils.fromJSONString(\"{\" +\n          \"    'cluster-preferences':[{\" +\n          \"      'minimize':'cores',\" +\n          \"      'precision':1},\" +\n          \"      {\" +\n          \"        'maximize':'freedisk',\" +\n          \"        'precision':100},\" +\n          \"      {\" +\n          \"        'minimize':'sysLoadAvg',\" +\n          \"        'precision':10}],\" +\n          \"    'cluster-policy':[\" +\n          \"{'replica':'<3',\" +\n          \"      'shard':'#EACH',\" +\n          \"      nodeset: {'sysprop.zone':'east'}}, \" +\n          \"{'replica':'<3',\" +\n          \"      'shard':'#EACH',\" +\n          \"      nodeset: {'sysprop.zone':'west'}} \" +\n          \" ]}\");\n    }\n    Policy policy = new Policy(conf);\n    SolrCloudManager cloudManagerFromDiagnostics = createCloudManagerFromDiagnostics(m);\n    Policy.Session session = policy.createSession(cloudManagerFromDiagnostics);\n    List<Violation> violations = session.getViolations();\n    for (Violation violation : violations) {\n      assertEquals(1.0d, violation.replicaCountDelta.doubleValue(), 0.0001);\n    }\n    assertEquals(2, violations.size());\n    List<Suggester.SuggestionInfo> suggestions = PolicyHelper.getSuggestions(new AutoScalingConfig(conf), cloudManagerFromDiagnostics);\n    assertEquals(2, suggestions.size());\n    for (Suggester.SuggestionInfo suggestion : suggestions) {\n      assertTrue(ImmutableSet.of(\"127.0.0.1:63219_solr\", \"127.0.0.1:63229_solr\").contains(\n          suggestion._get(\"operation/command/move-replica/targetNode\", null)));\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["a7194afdfe9b45ca331c1cd5001cd9766688688b"],"e9fe59d880401d7b6a9bd963ae45c19b2e6798c1":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"a7194afdfe9b45ca331c1cd5001cd9766688688b":["9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["00473ada9520f7423d1a7b4cfdb16f49856ddcac"],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"00473ada9520f7423d1a7b4cfdb16f49856ddcac":["986a3b20441337c17126faebcbab4e2248154bdf"],"986a3b20441337c17126faebcbab4e2248154bdf":["e9fe59d880401d7b6a9bd963ae45c19b2e6798c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"e9fe59d880401d7b6a9bd963ae45c19b2e6798c1":["986a3b20441337c17126faebcbab4e2248154bdf"],"a7194afdfe9b45ca331c1cd5001cd9766688688b":["9ba1b632c041956c93c41aa1143d16a567014891"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee5183ac042828ef74f90f0874eaba7daeb409bd"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"ee5183ac042828ef74f90f0874eaba7daeb409bd":["e9fe59d880401d7b6a9bd963ae45c19b2e6798c1"],"9ddd9a76400512cda8f22bbc69e3d8b85672a91a":["a7194afdfe9b45ca331c1cd5001cd9766688688b","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"fe52ff382a90016f1f6f34f2a026c4749eebb1b8":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","9ddd9a76400512cda8f22bbc69e3d8b85672a91a"],"00473ada9520f7423d1a7b4cfdb16f49856ddcac":["fe52ff382a90016f1f6f34f2a026c4749eebb1b8"],"986a3b20441337c17126faebcbab4e2248154bdf":["00473ada9520f7423d1a7b4cfdb16f49856ddcac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}