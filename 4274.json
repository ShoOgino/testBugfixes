{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#get(CharSequence).mjava","commits":[{"id":"6ecc52400551de6a7d8daf646be839487911627c","date":1330076979,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#get(CharSequence).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#get(String).mjava","sourceNew":"  @Override\n  public Object get(CharSequence key) {\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    if (list == null || list.isEmpty()) {\n      return null;\n    }\n    for (TernaryTreeNode n : list) {\n      if (charSeqEquals(n.token, key)) {\n        return n.val;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public Object get(String key) {\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    if (list == null || list.isEmpty()) {\n      return null;\n    }\n    for (TernaryTreeNode n : list) {\n      if (n.token.equals(key)) {\n        return n.val;\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3c850c5222a1ce7d619563f67bf047a11b32b6","date":1330703995,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#get(CharSequence).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#get(CharSequence).mjava","sourceNew":"  public Object get(CharSequence key) {\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    if (list == null || list.isEmpty()) {\n      return null;\n    }\n    for (TernaryTreeNode n : list) {\n      if (charSeqEquals(n.token, key)) {\n        return n.val;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  @Override\n  public Object get(CharSequence key) {\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    if (list == null || list.isEmpty()) {\n      return null;\n    }\n    for (TernaryTreeNode n : list) {\n      if (charSeqEquals(n.token, key)) {\n        return n.val;\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#get(CharSequence).mjava","pathOld":"/dev/null","sourceNew":"  public Object get(CharSequence key) {\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    if (list == null || list.isEmpty()) {\n      return null;\n    }\n    for (TernaryTreeNode n : list) {\n      if (charSeqEquals(n.token, key)) {\n        return n.val;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#get(CharSequence).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTLookup#get(CharSequence).mjava","sourceNew":"  public Object get(CharSequence key) {\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    if (list == null || list.isEmpty()) {\n      return null;\n    }\n    for (TernaryTreeNode n : list) {\n      if (charSeqEquals(n.token, key)) {\n        return n.val;\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  public Object get(CharSequence key) {\n    List<TernaryTreeNode> list = autocomplete.prefixCompletion(root, key, 0);\n    if (list == null || list.isEmpty()) {\n      return null;\n    }\n    for (TernaryTreeNode n : list) {\n      if (charSeqEquals(n.token, key)) {\n        return n.val;\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ecc52400551de6a7d8daf646be839487911627c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["6ecc52400551de6a7d8daf646be839487911627c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6ecc52400551de6a7d8daf646be839487911627c"],"6ecc52400551de6a7d8daf646be839487911627c":["dc3c850c5222a1ce7d619563f67bf047a11b32b6"],"dc3c850c5222a1ce7d619563f67bf047a11b32b6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}