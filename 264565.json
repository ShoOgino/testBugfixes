{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","commits":[{"id":"280bf88d9ed3d9923e393961b594d9553970e4fd","date":1343099563,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","pathOld":"/dev/null","sourceNew":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this.clazz = clazz;\n    final ServiceLoader<S> loader = ServiceLoader.load(clazz);\n    final LinkedHashMap<String,Class<S>> services = new LinkedHashMap<String,Class<S>>();\n    for (final S service : loader) {\n      final String clazzName = service.getClass().getSimpleName();\n      int suffixIndex = -1;\n      for (String suffix : suffixes) {\n        suffixIndex = clazzName.lastIndexOf(suffix);\n        if (suffixIndex != -1) {\n          break;\n        }\n      }\n      final String name = clazzName.substring(0, suffixIndex).toLowerCase(Locale.ROOT);\n      // only add the first one for each name, later services will be ignored\n      // this allows to place services before others in classpath to make \n      // them used instead of others\n      if (!services.containsKey(name)) {\n        assert checkServiceName(name);\n        services.put(name, (Class<S>) service.getClass());\n      }\n    }\n    this.modifiableServices = services; // hack, remove when IBM J9 is fixed!\n    this.services = Collections.unmodifiableMap(services);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af79e6e6f8d805b540b016bfa1cc561c5fc5bc94","date":1343134693,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","sourceNew":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this.clazz = clazz;\n    final ServiceLoader<S> loader = ServiceLoader.load(clazz);\n    final LinkedHashMap<String,Class<? extends S>> services = new LinkedHashMap<String,Class<? extends S>>();\n    for (final S service : loader) {\n      final String clazzName = service.getClass().getSimpleName();\n      int suffixIndex = -1;\n      for (String suffix : suffixes) {\n        suffixIndex = clazzName.lastIndexOf(suffix);\n        if (suffixIndex != -1) {\n          break;\n        }\n      }\n      final String name = clazzName.substring(0, suffixIndex).toLowerCase(Locale.ROOT);\n      // only add the first one for each name, later services will be ignored\n      // this allows to place services before others in classpath to make \n      // them used instead of others\n      if (!services.containsKey(name)) {\n        assert checkServiceName(name);\n        @SuppressWarnings(\"unchecked\")\n        final Class<? extends S> sclazz = (Class<? extends S>) service.getClass();\n        services.put(name, sclazz);\n      }\n    }\n    this.services = Collections.unmodifiableMap(services);\n  }\n\n","sourceOld":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this.clazz = clazz;\n    final ServiceLoader<S> loader = ServiceLoader.load(clazz);\n    final LinkedHashMap<String,Class<S>> services = new LinkedHashMap<String,Class<S>>();\n    for (final S service : loader) {\n      final String clazzName = service.getClass().getSimpleName();\n      int suffixIndex = -1;\n      for (String suffix : suffixes) {\n        suffixIndex = clazzName.lastIndexOf(suffix);\n        if (suffixIndex != -1) {\n          break;\n        }\n      }\n      final String name = clazzName.substring(0, suffixIndex).toLowerCase(Locale.ROOT);\n      // only add the first one for each name, later services will be ignored\n      // this allows to place services before others in classpath to make \n      // them used instead of others\n      if (!services.containsKey(name)) {\n        assert checkServiceName(name);\n        services.put(name, (Class<S>) service.getClass());\n      }\n    }\n    this.modifiableServices = services; // hack, remove when IBM J9 is fixed!\n    this.services = Collections.unmodifiableMap(services);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea7538701c642dae4232a10272f8c4aca31a70f6","date":1343135007,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","sourceNew":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this.clazz = clazz;\n    final ServiceLoader<S> loader = ServiceLoader.load(clazz);\n    final LinkedHashMap<String,Class<? extends S>> services = new LinkedHashMap<String,Class<? extends S>>();\n    for (final S service : loader) {\n      final String clazzName = service.getClass().getSimpleName();\n      int suffixIndex = -1;\n      for (String suffix : suffixes) {\n        suffixIndex = clazzName.lastIndexOf(suffix);\n        if (suffixIndex != -1) {\n          break;\n        }\n      }\n      final String name = clazzName.substring(0, suffixIndex).toLowerCase(Locale.ROOT);\n      // only add the first one for each name, later services will be ignored\n      // this allows to place services before others in classpath to make \n      // them used instead of others\n      if (!services.containsKey(name)) {\n        assert checkServiceName(name);\n        services.put(name, service.getClass().asSubclass(clazz));\n      }\n    }\n    this.services = Collections.unmodifiableMap(services);\n  }\n\n","sourceOld":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this.clazz = clazz;\n    final ServiceLoader<S> loader = ServiceLoader.load(clazz);\n    final LinkedHashMap<String,Class<? extends S>> services = new LinkedHashMap<String,Class<? extends S>>();\n    for (final S service : loader) {\n      final String clazzName = service.getClass().getSimpleName();\n      int suffixIndex = -1;\n      for (String suffix : suffixes) {\n        suffixIndex = clazzName.lastIndexOf(suffix);\n        if (suffixIndex != -1) {\n          break;\n        }\n      }\n      final String name = clazzName.substring(0, suffixIndex).toLowerCase(Locale.ROOT);\n      // only add the first one for each name, later services will be ignored\n      // this allows to place services before others in classpath to make \n      // them used instead of others\n      if (!services.containsKey(name)) {\n        assert checkServiceName(name);\n        @SuppressWarnings(\"unchecked\")\n        final Class<? extends S> sclazz = (Class<? extends S>) service.getClass();\n        services.put(name, sclazz);\n      }\n    }\n    this.services = Collections.unmodifiableMap(services);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5974da97d735dd78f13f46406caf64c9448e4f4","date":1343143368,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","sourceNew":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this.clazz = clazz;\n    final SPIClassIterator<S> loader = SPIClassIterator.get(clazz);\n    final LinkedHashMap<String,Class<? extends S>> services = new LinkedHashMap<String,Class<? extends S>>();\n    while (loader.hasNext()) {\n      final Class<? extends S> service = loader.next();\n      final String clazzName = service.getSimpleName();\n      int suffixIndex = -1;\n      for (String suffix : suffixes) {\n        suffixIndex = clazzName.lastIndexOf(suffix);\n        if (suffixIndex != -1) {\n          break;\n        }\n      }\n      final String name = clazzName.substring(0, suffixIndex).toLowerCase(Locale.ROOT);\n      // only add the first one for each name, later services will be ignored\n      // this allows to place services before others in classpath to make \n      // them used instead of others\n      if (!services.containsKey(name)) {\n        assert checkServiceName(name);\n        services.put(name, service);\n      }\n    }\n    this.services = Collections.unmodifiableMap(services);\n  }\n\n","sourceOld":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this.clazz = clazz;\n    final ServiceLoader<S> loader = ServiceLoader.load(clazz);\n    final LinkedHashMap<String,Class<? extends S>> services = new LinkedHashMap<String,Class<? extends S>>();\n    for (final S service : loader) {\n      final String clazzName = service.getClass().getSimpleName();\n      int suffixIndex = -1;\n      for (String suffix : suffixes) {\n        suffixIndex = clazzName.lastIndexOf(suffix);\n        if (suffixIndex != -1) {\n          break;\n        }\n      }\n      final String name = clazzName.substring(0, suffixIndex).toLowerCase(Locale.ROOT);\n      // only add the first one for each name, later services will be ignored\n      // this allows to place services before others in classpath to make \n      // them used instead of others\n      if (!services.containsKey(name)) {\n        assert checkServiceName(name);\n        services.put(name, service.getClass().asSubclass(clazz));\n      }\n    }\n    this.services = Collections.unmodifiableMap(services);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bb7d4caf24bc521fa8ac35f463f50724b4a91d8","date":1343155480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","sourceNew":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this(clazz, suffixes, Thread.currentThread().getContextClassLoader());\n  }\n\n","sourceOld":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this.clazz = clazz;\n    final SPIClassIterator<S> loader = SPIClassIterator.get(clazz);\n    final LinkedHashMap<String,Class<? extends S>> services = new LinkedHashMap<String,Class<? extends S>>();\n    while (loader.hasNext()) {\n      final Class<? extends S> service = loader.next();\n      final String clazzName = service.getSimpleName();\n      int suffixIndex = -1;\n      for (String suffix : suffixes) {\n        suffixIndex = clazzName.lastIndexOf(suffix);\n        if (suffixIndex != -1) {\n          break;\n        }\n      }\n      final String name = clazzName.substring(0, suffixIndex).toLowerCase(Locale.ROOT);\n      // only add the first one for each name, later services will be ignored\n      // this allows to place services before others in classpath to make \n      // them used instead of others\n      if (!services.containsKey(name)) {\n        assert checkServiceName(name);\n        services.put(name, service);\n      }\n    }\n    this.services = Collections.unmodifiableMap(services);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","pathOld":"/dev/null","sourceNew":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this(clazz, suffixes, Thread.currentThread().getContextClassLoader());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","pathOld":"/dev/null","sourceNew":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this(clazz, suffixes, Thread.currentThread().getContextClassLoader());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","pathOld":"/dev/null","sourceNew":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this(clazz, suffixes, Thread.currentThread().getContextClassLoader());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"409fbcbea5146d19c121f029071d605b1b68bb25","date":1497969834,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","sourceNew":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this(clazz, suffixes, null);\n  }\n\n","sourceOld":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this(clazz, suffixes, Thread.currentThread().getContextClassLoader());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","sourceNew":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this(clazz, suffixes, null);\n  }\n\n","sourceOld":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this(clazz, suffixes, Thread.currentThread().getContextClassLoader());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","sourceNew":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this(clazz, suffixes, null);\n  }\n\n","sourceOld":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this(clazz, suffixes, Thread.currentThread().getContextClassLoader());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b1b329156f9702cbfcdd80795c864111bcd341b","date":1561167997,"type":4,"author":"Tomoko Uchida","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AnalysisSPILoader#AnalysisSPILoader(Class[S],String[]).mjava","sourceNew":null,"sourceOld":"  public AnalysisSPILoader(Class<S> clazz, String[] suffixes) {\n    this(clazz, suffixes, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7bb7d4caf24bc521fa8ac35f463f50724b4a91d8":["e5974da97d735dd78f13f46406caf64c9448e4f4"],"280bf88d9ed3d9923e393961b594d9553970e4fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"af79e6e6f8d805b540b016bfa1cc561c5fc5bc94":["280bf88d9ed3d9923e393961b594d9553970e4fd"],"e5974da97d735dd78f13f46406caf64c9448e4f4":["ea7538701c642dae4232a10272f8c4aca31a70f6"],"7b1b329156f9702cbfcdd80795c864111bcd341b":["28288370235ed02234a64753cdbf0c6ec096304a"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7bb7d4caf24bc521fa8ac35f463f50724b4a91d8"],"28288370235ed02234a64753cdbf0c6ec096304a":["5a1a22b1ad88b436661458df567f3fdb446392a4","409fbcbea5146d19c121f029071d605b1b68bb25"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"ea7538701c642dae4232a10272f8c4aca31a70f6":["af79e6e6f8d805b540b016bfa1cc561c5fc5bc94"],"409fbcbea5146d19c121f029071d605b1b68bb25":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["5a1a22b1ad88b436661458df567f3fdb446392a4","409fbcbea5146d19c121f029071d605b1b68bb25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b1b329156f9702cbfcdd80795c864111bcd341b"]},"commit2Childs":{"7bb7d4caf24bc521fa8ac35f463f50724b4a91d8":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"280bf88d9ed3d9923e393961b594d9553970e4fd":["af79e6e6f8d805b540b016bfa1cc561c5fc5bc94"],"af79e6e6f8d805b540b016bfa1cc561c5fc5bc94":["ea7538701c642dae4232a10272f8c4aca31a70f6"],"e5974da97d735dd78f13f46406caf64c9448e4f4":["7bb7d4caf24bc521fa8ac35f463f50724b4a91d8"],"7b1b329156f9702cbfcdd80795c864111bcd341b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["7b1b329156f9702cbfcdd80795c864111bcd341b"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["28288370235ed02234a64753cdbf0c6ec096304a","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","409fbcbea5146d19c121f029071d605b1b68bb25","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["280bf88d9ed3d9923e393961b594d9553970e4fd","5a1a22b1ad88b436661458df567f3fdb446392a4","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"ea7538701c642dae4232a10272f8c4aca31a70f6":["e5974da97d735dd78f13f46406caf64c9448e4f4"],"409fbcbea5146d19c121f029071d605b1b68bb25":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}