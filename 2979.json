{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40CompoundFormat#testReadNestedCFP().mjava","commits":[{"id":"04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3","date":1412358952,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40CompoundFormat#testReadNestedCFP().mjava","pathOld":"/dev/null","sourceNew":"  public void testReadNestedCFP() throws IOException {\n    Directory newDir = newDirectory();\n    // manually manipulates directory\n    if (newDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)newDir).setEnableVirusScanner(false);\n    }\n    Lucene40CompoundReader csw = new Lucene40CompoundReader(newDir, \"d.cfs\", newIOContext(random()), true);\n    Lucene40CompoundReader nested = new Lucene40CompoundReader(newDir, \"b.cfs\", newIOContext(random()), true);\n    IndexOutput out = nested.createOutput(\"b.xyz\", newIOContext(random()));\n    IndexOutput out1 = nested.createOutput(\"b_1.xyz\", newIOContext(random()));\n    out.writeInt(0);\n    out1.writeInt(1);\n    out.close();\n    out1.close();\n    nested.close();\n    newDir.copy(csw, \"b.cfs\", \"b.cfs\", newIOContext(random()));\n    newDir.copy(csw, \"b.cfe\", \"b.cfe\", newIOContext(random()));\n    newDir.deleteFile(\"b.cfs\");\n    newDir.deleteFile(\"b.cfe\");\n    csw.close();\n    \n    assertEquals(2, newDir.listAll().length);\n    csw = new Lucene40CompoundReader(newDir, \"d.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, csw.listAll().length);\n    nested = new Lucene40CompoundReader(csw, \"b.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, nested.listAll().length);\n    IndexInput openInput = nested.openInput(\"b.xyz\", newIOContext(random()));\n    assertEquals(0, openInput.readInt());\n    openInput.close();\n    openInput = nested.openInput(\"b_1.xyz\", newIOContext(random()));\n    assertEquals(1, openInput.readInt());\n    openInput.close();\n    nested.close();\n    csw.close();\n    newDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40CompoundFormat#testReadNestedCFP().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testReadNestedCFP().mjava","sourceNew":"  public void testReadNestedCFP() throws IOException {\n    Directory newDir = newDirectory();\n    // manually manipulates directory\n    if (newDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)newDir).setEnableVirusScanner(false);\n    }\n    Lucene40CompoundReader csw = new Lucene40CompoundReader(newDir, \"d.cfs\", newIOContext(random()), true);\n    Lucene40CompoundReader nested = new Lucene40CompoundReader(newDir, \"b.cfs\", newIOContext(random()), true);\n    IndexOutput out = nested.createOutput(\"b.xyz\", newIOContext(random()));\n    IndexOutput out1 = nested.createOutput(\"b_1.xyz\", newIOContext(random()));\n    out.writeInt(0);\n    out1.writeInt(1);\n    out.close();\n    out1.close();\n    nested.close();\n    newDir.copy(csw, \"b.cfs\", \"b.cfs\", newIOContext(random()));\n    newDir.copy(csw, \"b.cfe\", \"b.cfe\", newIOContext(random()));\n    newDir.deleteFile(\"b.cfs\");\n    newDir.deleteFile(\"b.cfe\");\n    csw.close();\n    \n    assertEquals(2, newDir.listAll().length);\n    csw = new Lucene40CompoundReader(newDir, \"d.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, csw.listAll().length);\n    nested = new Lucene40CompoundReader(csw, \"b.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, nested.listAll().length);\n    IndexInput openInput = nested.openInput(\"b.xyz\", newIOContext(random()));\n    assertEquals(0, openInput.readInt());\n    openInput.close();\n    openInput = nested.openInput(\"b_1.xyz\", newIOContext(random()));\n    assertEquals(1, openInput.readInt());\n    openInput.close();\n    nested.close();\n    csw.close();\n    newDir.close();\n  }\n\n","sourceOld":"  public void testReadNestedCFP() throws IOException {\n    Directory newDir = newDirectory();\n    // manually manipulates directory\n    if (newDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)newDir).setEnableVirusScanner(false);\n    }\n    CompoundFileDirectory csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random()), true);\n    CompoundFileDirectory nested = new CompoundFileDirectory(newDir, \"b.cfs\", newIOContext(random()), true);\n    IndexOutput out = nested.createOutput(\"b.xyz\", newIOContext(random()));\n    IndexOutput out1 = nested.createOutput(\"b_1.xyz\", newIOContext(random()));\n    out.writeInt(0);\n    out1.writeInt(1);\n    out.close();\n    out1.close();\n    nested.close();\n    newDir.copy(csw, \"b.cfs\", \"b.cfs\", newIOContext(random()));\n    newDir.copy(csw, \"b.cfe\", \"b.cfe\", newIOContext(random()));\n    newDir.deleteFile(\"b.cfs\");\n    newDir.deleteFile(\"b.cfe\");\n    csw.close();\n    \n    assertEquals(2, newDir.listAll().length);\n    csw = new CompoundFileDirectory(newDir, \"d.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, csw.listAll().length);\n    nested = new CompoundFileDirectory(csw, \"b.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, nested.listAll().length);\n    IndexInput openInput = nested.openInput(\"b.xyz\", newIOContext(random()));\n    assertEquals(0, openInput.readInt());\n    openInput.close();\n    openInput = nested.openInput(\"b_1.xyz\", newIOContext(random()));\n    assertEquals(1, openInput.readInt());\n    openInput.close();\n    nested.close();\n    csw.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/TestLucene40CompoundFormat#testReadNestedCFP().mjava","sourceNew":null,"sourceOld":"  public void testReadNestedCFP() throws IOException {\n    Directory newDir = newDirectory();\n    // manually manipulates directory\n    if (newDir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)newDir).setEnableVirusScanner(false);\n    }\n    Lucene40CompoundReader csw = new Lucene40CompoundReader(newDir, \"d.cfs\", newIOContext(random()), true);\n    Lucene40CompoundReader nested = new Lucene40CompoundReader(newDir, \"b.cfs\", newIOContext(random()), true);\n    IndexOutput out = nested.createOutput(\"b.xyz\", newIOContext(random()));\n    IndexOutput out1 = nested.createOutput(\"b_1.xyz\", newIOContext(random()));\n    out.writeInt(0);\n    out1.writeInt(1);\n    out.close();\n    out1.close();\n    nested.close();\n    newDir.copy(csw, \"b.cfs\", \"b.cfs\", newIOContext(random()));\n    newDir.copy(csw, \"b.cfe\", \"b.cfe\", newIOContext(random()));\n    newDir.deleteFile(\"b.cfs\");\n    newDir.deleteFile(\"b.cfe\");\n    csw.close();\n    \n    assertEquals(2, newDir.listAll().length);\n    csw = new Lucene40CompoundReader(newDir, \"d.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, csw.listAll().length);\n    nested = new Lucene40CompoundReader(csw, \"b.cfs\", newIOContext(random()), false);\n    \n    assertEquals(2, nested.listAll().length);\n    IndexInput openInput = nested.openInput(\"b.xyz\", newIOContext(random()));\n    assertEquals(0, openInput.readInt());\n    openInput.close();\n    openInput = nested.openInput(\"b_1.xyz\", newIOContext(random()));\n    assertEquals(1, openInput.readInt());\n    openInput.close();\n    nested.close();\n    csw.close();\n    newDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04aeacf8a807c3559b1089fdbe6c2c16ac9a07e3","9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}