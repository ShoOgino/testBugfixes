{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDeltaDistance(PlanetModel,DistanceStyle,double,double,double).mjava","commits":[{"id":"8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5","date":1510144003,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoStandardPath.PathSegment#pathDeltaDistance(PlanetModel,DistanceStyle,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"    /** Compute delta path distance.\n     *@param planetModel is the planet model.\n     *@param distanceStyle is the distance style.\n     *@param x is the point x.\n     *@param y is the point y.\n     *@param z is the point z.\n     *@return the distance metric, in aggregation form, or Double.POSITIVE_INFINITY if outside the segment.\n     */\n    public double pathDeltaDistance(final PlanetModel planetModel, final DistanceStyle distanceStyle, final double x, final double y, final double z) {\n      if (!isWithin(x,y,z))\n        return Double.POSITIVE_INFINITY;\n      // (1) Compute normalizedPerpPlane.  If degenerate, then return point distance from start to point.\n      // Want no allocations or expensive operations!  so we do this the hard way\n      final double perpX = normalizedConnectingPlane.y * z - normalizedConnectingPlane.z * y;\n      final double perpY = normalizedConnectingPlane.z * x - normalizedConnectingPlane.x * z;\n      final double perpZ = normalizedConnectingPlane.x * y - normalizedConnectingPlane.y * x;\n      final double magnitude = Math.sqrt(perpX * perpX + perpY * perpY + perpZ * perpZ);\n      if (Math.abs(magnitude) < Vector.MINIMUM_RESOLUTION) {\n        final double theDistance = distanceStyle.computeDistance(start, x,y,z);\n        return distanceStyle.aggregateDistances(theDistance, theDistance);\n      }\n      final double normFactor = 1.0/magnitude;\n      final Plane normalizedPerpPlane = new Plane(perpX * normFactor, perpY * normFactor, perpZ * normFactor, 0.0);\n      \n      // Old computation: too expensive, because it calculates the intersection point twice.\n      //return distanceStyle.computeDistance(planetModel, normalizedConnectingPlane, x, y, z, startCutoffPlane, endCutoffPlane) +\n      //  distanceStyle.computeDistance(planetModel, normalizedPerpPlane, start.x, start.y, start.z, upperConnectingPlane, lowerConnectingPlane);\n\n      final GeoPoint[] intersectionPoints = normalizedConnectingPlane.findIntersections(planetModel, normalizedPerpPlane);\n      GeoPoint thePoint;\n      if (intersectionPoints.length == 0)\n        throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      else if (intersectionPoints.length == 1)\n        thePoint = intersectionPoints[0];\n      else {\n        if (startCutoffPlane.isWithin(intersectionPoints[0]) && endCutoffPlane.isWithin(intersectionPoints[0]))\n          thePoint = intersectionPoints[0];\n        else if (startCutoffPlane.isWithin(intersectionPoints[1]) && endCutoffPlane.isWithin(intersectionPoints[1]))\n          thePoint = intersectionPoints[1];\n        else\n          throw new RuntimeException(\"Can't find world intersection for point x=\"+x+\" y=\"+y+\" z=\"+z);\n      }\n      final double theDistance = distanceStyle.toAggregationForm(distanceStyle.computeDistance(thePoint, x, y, z));\n      return distanceStyle.aggregateDistances(theDistance, theDistance);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5"]},"commit2Childs":{"8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b5d3e58ee2fe34bdd9e28dc47d2b236056d90d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}