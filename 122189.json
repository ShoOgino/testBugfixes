{"path":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#dropChanges().mjava","commits":[{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#dropChanges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndLiveDocs#dropChanges().mjava","sourceNew":"  public synchronized void dropChanges() {\n    // Discard (don't save) changes when we are dropping\n    // the reader; this is used only on the sub-readers\n    // after a successful merge.  If deletes had\n    // accumulated on those sub-readers while the merge\n    // is running, by now we have carried forward those\n    // deletes onto the newly merged segment, so we can\n    // discard them on the sub-readers:\n    pendingDeleteCount = 0;\n    dropMergingUpdates();\n  }\n\n","sourceOld":"  public synchronized void dropChanges() {\n    // Discard (don't save) changes when we are dropping\n    // the reader; this is used only on the sub-readers\n    // after a successful merge.  If deletes had\n    // accumulated on those sub-readers while the merge\n    // is running, by now we have carried forward those\n    // deletes onto the newly merged segment, so we can\n    // discard them on the sub-readers:\n    pendingDeleteCount = 0;\n    dropMergingUpdates();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#dropChanges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#dropChanges().mjava","sourceNew":"  public synchronized void dropChanges() {\n    assert Thread.holdsLock(writer);\n    // Discard (don't save) changes when we are dropping\n    // the reader; this is used only on the sub-readers\n    // after a successful merge.  If deletes had\n    // accumulated on those sub-readers while the merge\n    // is running, by now we have carried forward those\n    // deletes onto the newly merged segment, so we can\n    // discard them on the sub-readers:\n    pendingDeleteCount = 0;\n    dropMergingUpdates();\n  }\n\n","sourceOld":"  public synchronized void dropChanges() {\n    // Discard (don't save) changes when we are dropping\n    // the reader; this is used only on the sub-readers\n    // after a successful merge.  If deletes had\n    // accumulated on those sub-readers while the merge\n    // is running, by now we have carried forward those\n    // deletes onto the newly merged segment, so we can\n    // discard them on the sub-readers:\n    pendingDeleteCount = 0;\n    dropMergingUpdates();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#dropChanges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#dropChanges().mjava","sourceNew":"  public synchronized void dropChanges() {\n    assert Thread.holdsLock(writer);\n    // Discard (don't save) changes when we are dropping\n    // the reader; this is used only on the sub-readers\n    // after a successful merge.  If deletes had\n    // accumulated on those sub-readers while the merge\n    // is running, by now we have carried forward those\n    // deletes onto the newly merged segment, so we can\n    // discard them on the sub-readers:\n    pendingDeleteCount = 0;\n    dropMergingUpdates();\n  }\n\n","sourceOld":"  public synchronized void dropChanges() {\n    // Discard (don't save) changes when we are dropping\n    // the reader; this is used only on the sub-readers\n    // after a successful merge.  If deletes had\n    // accumulated on those sub-readers while the merge\n    // is running, by now we have carried forward those\n    // deletes onto the newly merged segment, so we can\n    // discard them on the sub-readers:\n    pendingDeleteCount = 0;\n    dropMergingUpdates();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#dropChanges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#dropChanges().mjava","sourceNew":"  public synchronized void dropChanges() {\n    assert Thread.holdsLock(writer);\n    // Discard (don't save) changes when we are dropping\n    // the reader; this is used only on the sub-readers\n    // after a successful merge.  If deletes had\n    // accumulated on those sub-readers while the merge\n    // is running, by now we have carried forward those\n    // deletes onto the newly merged segment, so we can\n    // discard them on the sub-readers:\n    pendingDeleteCount = 0;\n    dropMergingUpdates();\n  }\n\n","sourceOld":"  public synchronized void dropChanges() {\n    // Discard (don't save) changes when we are dropping\n    // the reader; this is used only on the sub-readers\n    // after a successful merge.  If deletes had\n    // accumulated on those sub-readers while the merge\n    // is running, by now we have carried forward those\n    // deletes onto the newly merged segment, so we can\n    // discard them on the sub-readers:\n    pendingDeleteCount = 0;\n    dropMergingUpdates();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d60c1bb96a28a26d197c36299f7b6c9c5da617a1","date":1522484702,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#dropChanges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#dropChanges().mjava","sourceNew":"  public synchronized void dropChanges() {\n    // Discard (don't save) changes when we are dropping\n    // the reader; this is used only on the sub-readers\n    // after a successful merge.  If deletes had\n    // accumulated on those sub-readers while the merge\n    // is running, by now we have carried forward those\n    // deletes onto the newly merged segment, so we can\n    // discard them on the sub-readers:\n    pendingDeletes.reset();\n    dropMergingUpdates();\n  }\n\n","sourceOld":"  public synchronized void dropChanges() {\n    assert Thread.holdsLock(writer);\n    // Discard (don't save) changes when we are dropping\n    // the reader; this is used only on the sub-readers\n    // after a successful merge.  If deletes had\n    // accumulated on those sub-readers while the merge\n    // is running, by now we have carried forward those\n    // deletes onto the newly merged segment, so we can\n    // discard them on the sub-readers:\n    pendingDeleteCount = 0;\n    dropMergingUpdates();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa5e39259dfd4a68287c824d3b7e1bc9097dc895","date":1522505041,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#dropChanges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#dropChanges().mjava","sourceNew":"  public synchronized void dropChanges() {\n    // Discard (don't save) changes when we are dropping\n    // the reader; this is used only on the sub-readers\n    // after a successful merge.  If deletes had\n    // accumulated on those sub-readers while the merge\n    // is running, by now we have carried forward those\n    // deletes onto the newly merged segment, so we can\n    // discard them on the sub-readers:\n    pendingDeletes.reset();\n    dropMergingUpdates();\n  }\n\n","sourceOld":"  public synchronized void dropChanges() {\n    assert Thread.holdsLock(writer);\n    // Discard (don't save) changes when we are dropping\n    // the reader; this is used only on the sub-readers\n    // after a successful merge.  If deletes had\n    // accumulated on those sub-readers while the merge\n    // is running, by now we have carried forward those\n    // deletes onto the newly merged segment, so we can\n    // discard them on the sub-readers:\n    pendingDeleteCount = 0;\n    dropMergingUpdates();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e408502500aa10cb479d224850a7deebf3f0e9","date":1523604873,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#dropChanges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#dropChanges().mjava","sourceNew":"  public synchronized void dropChanges() {\n    // Discard (don't save) changes when we are dropping\n    // the reader; this is used only on the sub-readers\n    // after a successful merge.  If deletes had\n    // accumulated on those sub-readers while the merge\n    // is running, by now we have carried forward those\n    // deletes onto the newly merged segment, so we can\n    // discard them on the sub-readers:\n    pendingDeletes.dropChanges();\n    dropMergingUpdates();\n  }\n\n","sourceOld":"  public synchronized void dropChanges() {\n    // Discard (don't save) changes when we are dropping\n    // the reader; this is used only on the sub-readers\n    // after a successful merge.  If deletes had\n    // accumulated on those sub-readers while the merge\n    // is running, by now we have carried forward those\n    // deletes onto the newly merged segment, so we can\n    // discard them on the sub-readers:\n    pendingDeletes.reset();\n    dropMergingUpdates();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6453827f947004a68ad9db7418781e9df2f660","date":1523626811,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#dropChanges().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates#dropChanges().mjava","sourceNew":"  public synchronized void dropChanges() {\n    // Discard (don't save) changes when we are dropping\n    // the reader; this is used only on the sub-readers\n    // after a successful merge.  If deletes had\n    // accumulated on those sub-readers while the merge\n    // is running, by now we have carried forward those\n    // deletes onto the newly merged segment, so we can\n    // discard them on the sub-readers:\n    pendingDeletes.dropChanges();\n    dropMergingUpdates();\n  }\n\n","sourceOld":"  public synchronized void dropChanges() {\n    // Discard (don't save) changes when we are dropping\n    // the reader; this is used only on the sub-readers\n    // after a successful merge.  If deletes had\n    // accumulated on those sub-readers while the merge\n    // is running, by now we have carried forward those\n    // deletes onto the newly merged segment, so we can\n    // discard them on the sub-readers:\n    pendingDeletes.reset();\n    dropMergingUpdates();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f6e408502500aa10cb479d224850a7deebf3f0e9":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["28288370235ed02234a64753cdbf0c6ec096304a","d60c1bb96a28a26d197c36299f7b6c9c5da617a1"],"d60c1bb96a28a26d197c36299f7b6c9c5da617a1":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c6453827f947004a68ad9db7418781e9df2f660"],"5c6453827f947004a68ad9db7418781e9df2f660":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895","f6e408502500aa10cb479d224850a7deebf3f0e9"]},"commit2Childs":{"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"f6e408502500aa10cb479d224850a7deebf3f0e9":["5c6453827f947004a68ad9db7418781e9df2f660"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["f6e408502500aa10cb479d224850a7deebf3f0e9","5c6453827f947004a68ad9db7418781e9df2f660"],"d60c1bb96a28a26d197c36299f7b6c9c5da617a1":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895","d60c1bb96a28a26d197c36299f7b6c9c5da617a1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5c6453827f947004a68ad9db7418781e9df2f660":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}