{"path":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosReader#read(Directory,String,IOContext).mjava","commits":[{"id":"e92a321a2612261e1010a4038c8586e30b081552","date":1328456689,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", PreFlexRWFieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, PreFlexRWFieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < PreFlexRWFieldInfosWriter.FORMAT_CURRENT && format != PreFlexRWFieldInfosWriter.FORMAT_PREFLEX_RW) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, PreFlexRWFieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = format == PreFlexRWFieldInfosWriter.FORMAT_PREFLEX_RW ? input.readInt() : i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & PreFlexRWFieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & PreFlexRWFieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & PreFlexRWFieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & PreFlexRWFieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & PreFlexRWFieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & PreFlexRWFieldInfosWriter.OMIT_POSITIONS) != 0) {\n          if (format <= PreFlexRWFieldInfosWriter.FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        Type normType = isIndexed && !omitNorms ? Type.FIXED_INTS_8 : null;\n        if (format == PreFlexRWFieldInfosWriter.FORMAT_PREFLEX_RW && normType != null) {\n          // RW can have norms but doesn't write them\n          normType = input.readByte() != 0 ? Type.FIXED_INTS_8 : null;\n        }\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, normType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", PreFlexRWFieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, PreFlexRWFieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < PreFlexRWFieldInfosWriter.FORMAT_CURRENT && format != PreFlexRWFieldInfosWriter.FORMAT_PREFLEX_RW) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, PreFlexRWFieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = format == PreFlexRWFieldInfosWriter.FORMAT_PREFLEX_RW ? input.readInt() : i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & PreFlexRWFieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & PreFlexRWFieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & PreFlexRWFieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & PreFlexRWFieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & PreFlexRWFieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & PreFlexRWFieldInfosWriter.OMIT_POSITIONS) != 0) {\n          if (format <= PreFlexRWFieldInfosWriter.FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        Type normType = isIndexed && !omitNorms ? Type.FIXED_INTS_8 : null;\n        if (format == PreFlexRWFieldInfosWriter.FORMAT_PREFLEX_RW && normType != null) {\n          // RW can have norms but doesn't write them\n          normType = input.readByte() != 0 ? Type.FIXED_INTS_8 : null;\n        }\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, normType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", PreFlexRWFieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, PreFlexRWFieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < PreFlexRWFieldInfosWriter.FORMAT_CURRENT && format != PreFlexRWFieldInfosWriter.FORMAT_PREFLEX_RW) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, PreFlexRWFieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = format == PreFlexRWFieldInfosWriter.FORMAT_PREFLEX_RW ? input.readInt() : i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & PreFlexRWFieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & PreFlexRWFieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & PreFlexRWFieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & PreFlexRWFieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & PreFlexRWFieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & PreFlexRWFieldInfosWriter.OMIT_POSITIONS) != 0) {\n          if (format <= PreFlexRWFieldInfosWriter.FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        Type normType = isIndexed && !omitNorms ? Type.FIXED_INTS_8 : null;\n        if (format == PreFlexRWFieldInfosWriter.FORMAT_PREFLEX_RW && normType != null) {\n          // RW can have norms but doesn't write them\n          normType = input.readByte() != 0 ? Type.FIXED_INTS_8 : null;\n        }\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, normType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", PreFlexRWFieldInfosWriter.FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, PreFlexRWFieldInfosWriter.FORMAT_CURRENT);\n      }\n      if (format < PreFlexRWFieldInfosWriter.FORMAT_CURRENT && format != PreFlexRWFieldInfosWriter.FORMAT_PREFLEX_RW) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, PreFlexRWFieldInfosWriter.FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = format == PreFlexRWFieldInfosWriter.FORMAT_PREFLEX_RW ? input.readInt() : i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & PreFlexRWFieldInfosWriter.IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & PreFlexRWFieldInfosWriter.STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & PreFlexRWFieldInfosWriter.OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & PreFlexRWFieldInfosWriter.STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & PreFlexRWFieldInfosWriter.OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & PreFlexRWFieldInfosWriter.OMIT_POSITIONS) != 0) {\n          if (format <= PreFlexRWFieldInfosWriter.FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        \n        Type normType = isIndexed && !omitNorms ? Type.FIXED_INTS_8 : null;\n        if (format == PreFlexRWFieldInfosWriter.FORMAT_PREFLEX_RW && normType != null) {\n          // RW can have norms but doesn't write them\n          normType = input.readByte() != 0 ? Type.FIXED_INTS_8 : null;\n        }\n        \n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, normType);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e92a321a2612261e1010a4038c8586e30b081552"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e92a321a2612261e1010a4038c8586e30b081552":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e92a321a2612261e1010a4038c8586e30b081552"],"e92a321a2612261e1010a4038c8586e30b081552":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}