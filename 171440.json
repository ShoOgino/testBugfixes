{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#addSnapshot(Map[String,Object],Snapshot,PropertyFilter,boolean).mjava","commits":[{"id":"0d6879a535f14bc53be7c86de58142558c4f9eee","date":1492512399,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#addSnapshot(Map[String,Object],Snapshot,PropertyFilter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // some snapshots represent time in ns, other snapshots represent raw values (eg. chunk size)\n  static void addSnapshot(Map<String, Object> response, Snapshot snapshot, PropertyFilter propertyFilter, boolean ms) {\n    BiConsumer<String, Object> filter = (k, v) -> {\n      if (propertyFilter.accept(k)) {\n        response.put(k, v);\n      }\n    };\n    filter.accept((ms ? MIN_MS: MIN), nsToMs(ms, snapshot.getMin()));\n    filter.accept((ms ? MAX_MS: MAX), nsToMs(ms, snapshot.getMax()));\n    filter.accept((ms ? MEAN_MS : MEAN), nsToMs(ms, snapshot.getMean()));\n    filter.accept((ms ? MEDIAN_MS: MEDIAN), nsToMs(ms, snapshot.getMedian()));\n    filter.accept((ms ? STDDEV_MS: STDDEV), nsToMs(ms, snapshot.getStdDev()));\n    filter.accept((ms ? P75_MS: P75), nsToMs(ms, snapshot.get75thPercentile()));\n    filter.accept((ms ? P95_MS: P95), nsToMs(ms, snapshot.get95thPercentile()));\n    filter.accept((ms ? P99_MS: P99), nsToMs(ms, snapshot.get99thPercentile()));\n    filter.accept((ms ? P999_MS: P999), nsToMs(ms, snapshot.get999thPercentile()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#addSnapshot(Map[String,Object],Snapshot,PropertyFilter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  // some snapshots represent time in ns, other snapshots represent raw values (eg. chunk size)\n  static void addSnapshot(Map<String, Object> response, Snapshot snapshot, PropertyFilter propertyFilter, boolean ms) {\n    BiConsumer<String, Object> filter = (k, v) -> {\n      if (propertyFilter.accept(k)) {\n        response.put(k, v);\n      }\n    };\n    filter.accept((ms ? MIN_MS: MIN), nsToMs(ms, snapshot.getMin()));\n    filter.accept((ms ? MAX_MS: MAX), nsToMs(ms, snapshot.getMax()));\n    filter.accept((ms ? MEAN_MS : MEAN), nsToMs(ms, snapshot.getMean()));\n    filter.accept((ms ? MEDIAN_MS: MEDIAN), nsToMs(ms, snapshot.getMedian()));\n    filter.accept((ms ? STDDEV_MS: STDDEV), nsToMs(ms, snapshot.getStdDev()));\n    filter.accept((ms ? P75_MS: P75), nsToMs(ms, snapshot.get75thPercentile()));\n    filter.accept((ms ? P95_MS: P95), nsToMs(ms, snapshot.get95thPercentile()));\n    filter.accept((ms ? P99_MS: P99), nsToMs(ms, snapshot.get99thPercentile()));\n    filter.accept((ms ? P999_MS: P999), nsToMs(ms, snapshot.get999thPercentile()));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#addSnapshot(MapWriter.EntryWriter,Snapshot,Predicate[CharSequence],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#addSnapshot(Map[String,Object],Snapshot,PropertyFilter,boolean).mjava","sourceNew":"  // some snapshots represent time in ns, other snapshots represent raw values (eg. chunk size)\n  static void addSnapshot(MapWriter.EntryWriter ew, Snapshot snapshot, Predicate<CharSequence> propertyFilter, boolean ms) {\n    BiConsumer<String, Object> filter = (k, v) -> {\n      if (propertyFilter.test(k)) {\n        ew.putNoEx(k, v);\n      }\n    };\n    filter.accept((ms ? MIN_MS: MIN), nsToMs(ms, snapshot.getMin()));\n    filter.accept((ms ? MAX_MS: MAX), nsToMs(ms, snapshot.getMax()));\n    filter.accept((ms ? MEAN_MS : MEAN), nsToMs(ms, snapshot.getMean()));\n    filter.accept((ms ? MEDIAN_MS: MEDIAN), nsToMs(ms, snapshot.getMedian()));\n    filter.accept((ms ? STDDEV_MS: STDDEV), nsToMs(ms, snapshot.getStdDev()));\n    filter.accept((ms ? P75_MS: P75), nsToMs(ms, snapshot.get75thPercentile()));\n    filter.accept((ms ? P95_MS: P95), nsToMs(ms, snapshot.get95thPercentile()));\n    filter.accept((ms ? P99_MS: P99), nsToMs(ms, snapshot.get99thPercentile()));\n    filter.accept((ms ? P999_MS: P999), nsToMs(ms, snapshot.get999thPercentile()));\n  }\n\n","sourceOld":"  // some snapshots represent time in ns, other snapshots represent raw values (eg. chunk size)\n  static void addSnapshot(Map<String, Object> response, Snapshot snapshot, PropertyFilter propertyFilter, boolean ms) {\n    BiConsumer<String, Object> filter = (k, v) -> {\n      if (propertyFilter.accept(k)) {\n        response.put(k, v);\n      }\n    };\n    filter.accept((ms ? MIN_MS: MIN), nsToMs(ms, snapshot.getMin()));\n    filter.accept((ms ? MAX_MS: MAX), nsToMs(ms, snapshot.getMax()));\n    filter.accept((ms ? MEAN_MS : MEAN), nsToMs(ms, snapshot.getMean()));\n    filter.accept((ms ? MEDIAN_MS: MEDIAN), nsToMs(ms, snapshot.getMedian()));\n    filter.accept((ms ? STDDEV_MS: STDDEV), nsToMs(ms, snapshot.getStdDev()));\n    filter.accept((ms ? P75_MS: P75), nsToMs(ms, snapshot.get75thPercentile()));\n    filter.accept((ms ? P95_MS: P95), nsToMs(ms, snapshot.get95thPercentile()));\n    filter.accept((ms ? P99_MS: P99), nsToMs(ms, snapshot.get99thPercentile()));\n    filter.accept((ms ? P999_MS: P999), nsToMs(ms, snapshot.get999thPercentile()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"233211c3dbff6f367588be5bbb4ac77f72eae193":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0d6879a535f14bc53be7c86de58142558c4f9eee"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}