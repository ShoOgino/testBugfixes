{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#issueCreateJob(Integer,Integer,List[String],boolean,boolean).mjava","commits":[{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#issueCreateJob(Integer,Integer,List[String],boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = Utils.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionMessageHandler.NUM_SLICES, numberOfSlices.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", Utils.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = OverseerSolrResponseSerializer.deserialize(bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","sourceOld":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = Utils.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionMessageHandler.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", Utils.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = OverseerSolrResponseSerializer.deserialize(bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}