{"path":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","sourceNew":"    public SearchTerm getCustomSearch(Folder folder) {\n      return new ReceivedDateTerm(ComparisonTerm.GE, since);\n    }\n\n","sourceOld":"    public SearchTerm getCustomSearch(Folder folder) {\n      return new ReceivedDateTerm(ComparisonTerm.GE, since);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","pathOld":"solr/contrib/dataimporthandler/src/extras/main/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","sourceNew":"    public SearchTerm getCustomSearch(Folder folder) {\n      return new ReceivedDateTerm(ComparisonTerm.GE, since);\n    }\n\n","sourceOld":"    public SearchTerm getCustomSearch(Folder folder) {\n      return new ReceivedDateTerm(ComparisonTerm.GE, since);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","sourceNew":"    @Override\n    public SearchTerm getCustomSearch(Folder folder) {\n      return new ReceivedDateTerm(ComparisonTerm.GE, since);\n    }\n\n","sourceOld":"    public SearchTerm getCustomSearch(Folder folder) {\n      return new ReceivedDateTerm(ComparisonTerm.GE, since);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","sourceNew":"    @Override\n    public SearchTerm getCustomSearch(Folder folder) {\n      return new ReceivedDateTerm(ComparisonTerm.GE, since);\n    }\n\n","sourceOld":"    public SearchTerm getCustomSearch(Folder folder) {\n      return new ReceivedDateTerm(ComparisonTerm.GE, since);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36113efe922ae370819b20fba837a1a37d3dd2d8","date":1404234826,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","sourceNew":"    @SuppressWarnings(\"serial\")\n    public SearchTerm getCustomSearch(final Folder folder) {\n      LOG.info(\"Building mail filter for messages in \" + folder.getName()\n          + \" that occur after \" + sinceDateParser.format(since));\n      return new DateTerm(ComparisonTerm.GE, since) {\n        private int matched = 0;\n        private int seen = 0;\n        \n        @Override\n        public boolean match(Message msg) {\n          boolean isMatch = false;\n          ++seen;\n          try {\n            Date msgDate = msg.getReceivedDate();\n            if (msgDate == null) msgDate = msg.getSentDate();\n            \n            if (msgDate != null && msgDate.getTime() >= since.getTime()) {\n              ++matched;\n              isMatch = true;\n            } else {\n              String msgDateStr = (msgDate != null) ? sinceDateParser.format(msgDate) : \"null\";\n              String sinceDateStr = (since != null) ? sinceDateParser.format(since) : \"null\";\n              LOG.debug(\"Message \" + msg.getSubject() + \" was received at [\" + msgDateStr\n                  + \"], since filter is [\" + sinceDateStr + \"]\");\n            }\n          } catch (MessagingException e) {\n            LOG.warn(\"Failed to process message due to: \"+e, e);\n          }\n          \n          if (seen % 100 == 0) {\n            LOG.info(\"Matched \" + matched + \" of \" + seen + \" messages since: \"\n                + sinceDateParser.format(since));\n          }\n          \n          return isMatch;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SearchTerm getCustomSearch(Folder folder) {\n      return new ReceivedDateTerm(ComparisonTerm.GE, since);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bac5e4f5082317c9a942b1deeeb22d6700ecff7","date":1404338458,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","sourceNew":"    @Override\n    public SearchTerm getCustomSearch(Folder folder) {\n      return new ReceivedDateTerm(ComparisonTerm.GE, since);\n    }\n\n","sourceOld":"    @SuppressWarnings(\"serial\")\n    public SearchTerm getCustomSearch(final Folder folder) {\n      LOG.info(\"Building mail filter for messages in \" + folder.getName()\n          + \" that occur after \" + sinceDateParser.format(since));\n      return new DateTerm(ComparisonTerm.GE, since) {\n        private int matched = 0;\n        private int seen = 0;\n        \n        @Override\n        public boolean match(Message msg) {\n          boolean isMatch = false;\n          ++seen;\n          try {\n            Date msgDate = msg.getReceivedDate();\n            if (msgDate == null) msgDate = msg.getSentDate();\n            \n            if (msgDate != null && msgDate.getTime() >= since.getTime()) {\n              ++matched;\n              isMatch = true;\n            } else {\n              String msgDateStr = (msgDate != null) ? sinceDateParser.format(msgDate) : \"null\";\n              String sinceDateStr = (since != null) ? sinceDateParser.format(since) : \"null\";\n              LOG.debug(\"Message \" + msg.getSubject() + \" was received at [\" + msgDateStr\n                  + \"], since filter is [\" + sinceDateStr + \"]\");\n            }\n          } catch (MessagingException e) {\n            LOG.warn(\"Failed to process message due to: \"+e, e);\n          }\n          \n          if (seen % 100 == 0) {\n            LOG.info(\"Matched \" + matched + \" of \" + seen + \" messages since: \"\n                + sinceDateParser.format(since));\n          }\n          \n          return isMatch;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cd303657ee7726e12c45f9fd39b0285acf10c07","date":1405460668,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","sourceNew":"    @SuppressWarnings(\"serial\")\n    public SearchTerm getCustomSearch(final Folder folder) {\n      LOG.info(\"Building mail filter for messages in \" + folder.getName()\n          + \" that occur after \" + sinceDateParser.format(since));\n      return new DateTerm(ComparisonTerm.GE, since) {\n        private int matched = 0;\n        private int seen = 0;\n        \n        @Override\n        public boolean match(Message msg) {\n          boolean isMatch = false;\n          ++seen;\n          try {\n            Date msgDate = msg.getReceivedDate();\n            if (msgDate == null) msgDate = msg.getSentDate();\n            \n            if (msgDate != null && msgDate.getTime() >= since.getTime()) {\n              ++matched;\n              isMatch = true;\n            } else {\n              String msgDateStr = (msgDate != null) ? sinceDateParser.format(msgDate) : \"null\";\n              String sinceDateStr = (since != null) ? sinceDateParser.format(since) : \"null\";\n              LOG.debug(\"Message \" + msg.getSubject() + \" was received at [\" + msgDateStr\n                  + \"], since filter is [\" + sinceDateStr + \"]\");\n            }\n          } catch (MessagingException e) {\n            LOG.warn(\"Failed to process message due to: \"+e, e);\n          }\n          \n          if (seen % 100 == 0) {\n            LOG.info(\"Matched \" + matched + \" of \" + seen + \" messages since: \"\n                + sinceDateParser.format(since));\n          }\n          \n          return isMatch;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public SearchTerm getCustomSearch(Folder folder) {\n      return new ReceivedDateTerm(ComparisonTerm.GE, since);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","sourceNew":"    @SuppressWarnings(\"serial\")\n    public SearchTerm getCustomSearch(final Folder folder) {\n      log.info(\"Building mail filter for messages in \" + folder.getName()\n          + \" that occur after \" + sinceDateParser.format(since));\n      return new DateTerm(ComparisonTerm.GE, since) {\n        private int matched = 0;\n        private int seen = 0;\n        \n        @Override\n        public boolean match(Message msg) {\n          boolean isMatch = false;\n          ++seen;\n          try {\n            Date msgDate = msg.getReceivedDate();\n            if (msgDate == null) msgDate = msg.getSentDate();\n            \n            if (msgDate != null && msgDate.getTime() >= since.getTime()) {\n              ++matched;\n              isMatch = true;\n            } else {\n              String msgDateStr = (msgDate != null) ? sinceDateParser.format(msgDate) : \"null\";\n              String sinceDateStr = (since != null) ? sinceDateParser.format(since) : \"null\";\n              log.debug(\"Message \" + msg.getSubject() + \" was received at [\" + msgDateStr\n                  + \"], since filter is [\" + sinceDateStr + \"]\");\n            }\n          } catch (MessagingException e) {\n            log.warn(\"Failed to process message due to: \"+e, e);\n          }\n          \n          if (seen % 100 == 0) {\n            log.info(\"Matched \" + matched + \" of \" + seen + \" messages since: \"\n                + sinceDateParser.format(since));\n          }\n          \n          return isMatch;\n        }\n      };\n    }\n\n","sourceOld":"    @SuppressWarnings(\"serial\")\n    public SearchTerm getCustomSearch(final Folder folder) {\n      LOG.info(\"Building mail filter for messages in \" + folder.getName()\n          + \" that occur after \" + sinceDateParser.format(since));\n      return new DateTerm(ComparisonTerm.GE, since) {\n        private int matched = 0;\n        private int seen = 0;\n        \n        @Override\n        public boolean match(Message msg) {\n          boolean isMatch = false;\n          ++seen;\n          try {\n            Date msgDate = msg.getReceivedDate();\n            if (msgDate == null) msgDate = msg.getSentDate();\n            \n            if (msgDate != null && msgDate.getTime() >= since.getTime()) {\n              ++matched;\n              isMatch = true;\n            } else {\n              String msgDateStr = (msgDate != null) ? sinceDateParser.format(msgDate) : \"null\";\n              String sinceDateStr = (since != null) ? sinceDateParser.format(since) : \"null\";\n              LOG.debug(\"Message \" + msg.getSubject() + \" was received at [\" + msgDateStr\n                  + \"], since filter is [\" + sinceDateStr + \"]\");\n            }\n          } catch (MessagingException e) {\n            LOG.warn(\"Failed to process message due to: \"+e, e);\n          }\n          \n          if (seen % 100 == 0) {\n            LOG.info(\"Matched \" + matched + \" of \" + seen + \" messages since: \"\n                + sinceDateParser.format(since));\n          }\n          \n          return isMatch;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","sourceNew":"    @SuppressWarnings(\"serial\")\n    public SearchTerm getCustomSearch(final Folder folder) {\n      if (log.isInfoEnabled()) {\n        log.info(\"Building mail filter for messages in {} that occur after {}\"\n            , folder.getName(), sinceDateParser.format(since));\n      }\n      return new DateTerm(ComparisonTerm.GE, since) {\n        private int matched = 0;\n        private int seen = 0;\n        \n        @Override\n        public boolean match(Message msg) {\n          boolean isMatch = false;\n          ++seen;\n          try {\n            Date msgDate = msg.getReceivedDate();\n            if (msgDate == null) msgDate = msg.getSentDate();\n            \n            if (msgDate != null && msgDate.getTime() >= since.getTime()) {\n              ++matched;\n              isMatch = true;\n            } else {\n              String msgDateStr = (msgDate != null) ? sinceDateParser.format(msgDate) : \"null\";\n              String sinceDateStr = (since != null) ? sinceDateParser.format(since) : \"null\";\n              if (log.isDebugEnabled()) {\n                log.debug(\"Message {} was received at [{}], since filter is [{}]\"\n                    , msg.getSubject(), msgDateStr, sinceDateStr);\n              }\n            }\n          } catch (MessagingException e) {\n            log.warn(\"Failed to process message due to: {}\", e, e);\n          }\n          \n          if (seen % 100 == 0) {\n            if (log.isInfoEnabled()) {\n              log.info(\"Matched {} of {} messages since: {}\"\n                  , matched, seen, sinceDateParser.format(since));\n            }\n          }\n          \n          return isMatch;\n        }\n      };\n    }\n\n","sourceOld":"    @SuppressWarnings(\"serial\")\n    public SearchTerm getCustomSearch(final Folder folder) {\n      log.info(\"Building mail filter for messages in \" + folder.getName()\n          + \" that occur after \" + sinceDateParser.format(since));\n      return new DateTerm(ComparisonTerm.GE, since) {\n        private int matched = 0;\n        private int seen = 0;\n        \n        @Override\n        public boolean match(Message msg) {\n          boolean isMatch = false;\n          ++seen;\n          try {\n            Date msgDate = msg.getReceivedDate();\n            if (msgDate == null) msgDate = msg.getSentDate();\n            \n            if (msgDate != null && msgDate.getTime() >= since.getTime()) {\n              ++matched;\n              isMatch = true;\n            } else {\n              String msgDateStr = (msgDate != null) ? sinceDateParser.format(msgDate) : \"null\";\n              String sinceDateStr = (since != null) ? sinceDateParser.format(since) : \"null\";\n              log.debug(\"Message \" + msg.getSubject() + \" was received at [\" + msgDateStr\n                  + \"], since filter is [\" + sinceDateStr + \"]\");\n            }\n          } catch (MessagingException e) {\n            log.warn(\"Failed to process message due to: \"+e, e);\n          }\n          \n          if (seen % 100 == 0) {\n            log.info(\"Matched \" + matched + \" of \" + seen + \" messages since: \"\n                + sinceDateParser.format(since));\n          }\n          \n          return isMatch;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler-extras/src/java/org/apache/solr/handler/dataimport/MailEntityProcessor.MailsSinceLastCheckFilter#getCustomSearch(Folder).mjava","sourceNew":null,"sourceOld":"    @SuppressWarnings(\"serial\")\n    public SearchTerm getCustomSearch(final Folder folder) {\n      if (log.isInfoEnabled()) {\n        log.info(\"Building mail filter for messages in {} that occur after {}\"\n            , folder.getName(), sinceDateParser.format(since));\n      }\n      return new DateTerm(ComparisonTerm.GE, since) {\n        private int matched = 0;\n        private int seen = 0;\n        \n        @Override\n        public boolean match(Message msg) {\n          boolean isMatch = false;\n          ++seen;\n          try {\n            Date msgDate = msg.getReceivedDate();\n            if (msgDate == null) msgDate = msg.getSentDate();\n            \n            if (msgDate != null && msgDate.getTime() >= since.getTime()) {\n              ++matched;\n              isMatch = true;\n            } else {\n              String msgDateStr = (msgDate != null) ? sinceDateParser.format(msgDate) : \"null\";\n              String sinceDateStr = (since != null) ? sinceDateParser.format(since) : \"null\";\n              if (log.isDebugEnabled()) {\n                log.debug(\"Message {} was received at [{}], since filter is [{}]\"\n                    , msg.getSubject(), msgDateStr, sinceDateStr);\n              }\n            }\n          } catch (MessagingException e) {\n            log.warn(\"Failed to process message due to: {}\", e, e);\n          }\n          \n          if (seen % 100 == 0) {\n            if (log.isInfoEnabled()) {\n              log.info(\"Matched {} of {} messages since: {}\"\n                  , matched, seen, sinceDateParser.format(since));\n            }\n          }\n          \n          return isMatch;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"36113efe922ae370819b20fba837a1a37d3dd2d8":["7530de27b87b961b51f01bd1299b7004d46e8823"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"0bac5e4f5082317c9a942b1deeeb22d6700ecff7":["36113efe922ae370819b20fba837a1a37d3dd2d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0cd303657ee7726e12c45f9fd39b0285acf10c07":["0bac5e4f5082317c9a942b1deeeb22d6700ecff7"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["0cd303657ee7726e12c45f9fd39b0285acf10c07"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36113efe922ae370819b20fba837a1a37d3dd2d8":["0bac5e4f5082317c9a942b1deeeb22d6700ecff7"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"0bac5e4f5082317c9a942b1deeeb22d6700ecff7":["0cd303657ee7726e12c45f9fd39b0285acf10c07"],"0cd303657ee7726e12c45f9fd39b0285acf10c07":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","36113efe922ae370819b20fba837a1a37d3dd2d8"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}