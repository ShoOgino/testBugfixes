{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#init(Map[String,String]).mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/WordDelimiterFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#WordDelimiterFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterFilterFactory#init(Map[String,String]).mjava","sourceNew":"  /** Creates a new WordDelimiterFilterFactory */\n  public WordDelimiterFilterFactory(Map<String, String> args) {\n    super(args);\n    int flags = 0;\n    if (getInt(args, \"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(args, \"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(args, \"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(args, \"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(args, \"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(args, \"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(args, \"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(args, \"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(args, \"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n    wordFiles = args.remove(PROTECTED_TOKENS);\n    types = args.remove(TYPES);\n    this.flags = flags;\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    if (getInt(\"generateWordParts\", 1) != 0) {\n      flags |= GENERATE_WORD_PARTS;\n    }\n    if (getInt(\"generateNumberParts\", 1) != 0) {\n      flags |= GENERATE_NUMBER_PARTS;\n    }\n    if (getInt(\"catenateWords\", 0) != 0) {\n      flags |= CATENATE_WORDS;\n    }\n    if (getInt(\"catenateNumbers\", 0) != 0) {\n      flags |= CATENATE_NUMBERS;\n    }\n    if (getInt(\"catenateAll\", 0) != 0) {\n      flags |= CATENATE_ALL;\n    }\n    if (getInt(\"splitOnCaseChange\", 1) != 0) {\n      flags |= SPLIT_ON_CASE_CHANGE;\n    }\n    if (getInt(\"splitOnNumerics\", 1) != 0) {\n      flags |= SPLIT_ON_NUMERICS;\n    }\n    if (getInt(\"preserveOriginal\", 0) != 0) {\n      flags |= PRESERVE_ORIGINAL;\n    }\n    if (getInt(\"stemEnglishPossessive\", 1) != 0) {\n      flags |= STEM_ENGLISH_POSSESSIVE;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}