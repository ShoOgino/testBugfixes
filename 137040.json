{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/lt/TestLithuanianStemming#testNounsI().mjava","commits":[{"id":"6cc97ef80489825587c37e0ca2efa790041f7f76","date":1437752845,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/lt/TestLithuanianStemming#testNounsI().mjava","pathOld":"/dev/null","sourceNew":"  public void testNounsI() throws IOException {\n    // n. decl. I (-as)\n    checkOneTerm(a, \"vaikas\",    \"vaik\"); // nom. sing.\n    checkOneTerm(a, \"vaikai\",    \"vaik\"); // nom. pl.\n    checkOneTerm(a, \"vaiko\",     \"vaik\"); // gen. sg.\n    checkOneTerm(a, \"vaikų\",     \"vaik\"); // gen. pl.\n    checkOneTerm(a, \"vaikui\",    \"vaik\"); // dat. sg.\n    checkOneTerm(a, \"vaikams\",   \"vaik\"); // dat. pl.\n    checkOneTerm(a, \"vaiką\",     \"vaik\"); // acc. sg.\n    checkOneTerm(a, \"vaikus\",    \"vaik\"); // acc. pl.\n    checkOneTerm(a, \"vaiku\",     \"vaik\"); // ins. sg.\n    checkOneTerm(a, \"vaikais\",   \"vaik\"); // ins. pl.\n    checkOneTerm(a, \"vaike\",     \"vaik\"); // loc. sg.\n    checkOneTerm(a, \"vaikuose\",  \"vaik\"); // loc. pl.\n    checkOneTerm(a, \"vaike\",     \"vaik\"); // voc. sg.\n    checkOneTerm(a, \"vaikai\",    \"vaik\"); // voc. pl.\n    \n    // n. decl. I (-is)\n    checkOneTerm(a, \"brolis\",    \"brol\"); // nom. sing.\n    checkOneTerm(a, \"broliai\",   \"brol\"); // nom. pl.\n    checkOneTerm(a, \"brolio\",    \"brol\"); // gen. sg.\n    checkOneTerm(a, \"brolių\",    \"brol\"); // gen. pl.\n    checkOneTerm(a, \"broliui\",   \"brol\"); // dat. sg.\n    checkOneTerm(a, \"broliams\",  \"brol\"); // dat. pl.\n    checkOneTerm(a, \"brolį\",     \"brol\"); // acc. sg.\n    checkOneTerm(a, \"brolius\",   \"brol\"); // acc. pl.\n    checkOneTerm(a, \"broliu\",    \"brol\"); // ins. sg.\n    checkOneTerm(a, \"broliais\",  \"brol\"); // ins. pl.\n    checkOneTerm(a, \"brolyje\",   \"brol\"); // loc. sg.\n    checkOneTerm(a, \"broliuose\", \"brol\"); // loc. pl.\n    checkOneTerm(a, \"broli\",     \"brol\"); // voc. sg.\n    checkOneTerm(a, \"broliai\",   \"brol\"); // voc. pl.\n    \n    // n. decl. I (-ys)\n    // note: some forms don't conflate\n    checkOneTerm(a, \"arklys\",    \"arkl\");     // nom. sing.\n    checkOneTerm(a, \"arkliai\",   \"arkliai\");  // nom. pl.\n    checkOneTerm(a, \"arklio\",    \"arkl\");     // gen. sg.\n    checkOneTerm(a, \"arklių\",    \"arkl\");     // gen. pl.\n    checkOneTerm(a, \"arkliui\",   \"arkliui\");  // dat. sg.\n    checkOneTerm(a, \"arkliams\",  \"arkliam\");  // dat. pl.\n    checkOneTerm(a, \"arklį\",     \"arkl\");     // acc. sg.\n    checkOneTerm(a, \"arklius\",   \"arklius\");  // acc. pl.\n    checkOneTerm(a, \"arkliu\",    \"arkl\");     // ins. sg.\n    checkOneTerm(a, \"arkliais\",  \"arkliais\"); // ins. pl.\n    checkOneTerm(a, \"arklyje\",   \"arklyj\");   // loc. sg.\n    checkOneTerm(a, \"arkliuose\", \"arkliuos\"); // loc. pl.\n    checkOneTerm(a, \"arkly\",     \"arkl\");     // voc. sg.\n    checkOneTerm(a, \"arkliai\",   \"arkliai\");  // voc. pl.\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6cc97ef80489825587c37e0ca2efa790041f7f76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6cc97ef80489825587c37e0ca2efa790041f7f76"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6cc97ef80489825587c37e0ca2efa790041f7f76"],"6cc97ef80489825587c37e0ca2efa790041f7f76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}