{"path":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#verbose(Object...).mjava","commits":[{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#verbose(Object...).mjava","pathOld":"/dev/null","sourceNew":"  /***\n  @Test\n  public void testGetRealtime() throws Exception {\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReader r1 = sr1.getCore().getRealtimeReader();\n\n    assertU(adoc(\"id\",\"1\"));\n\n    IndexReader r2 = sr1.getCore().getRealtimeReader();\n    assertNotSame(r1, r2);\n    int refcount = r2.getRefCount();\n\n    // make sure a new reader wasn't opened\n    IndexReader r3 = sr1.getCore().getRealtimeReader();\n    assertSame(r2, r3);\n    assertEquals(refcount+1, r3.getRefCount());\n\n    assertU(commit());\n\n    // this is not critical, but currently a commit does not refresh the reader\n    // if nothing has changed\n    IndexReader r4 = sr1.getCore().getRealtimeReader();\n    assertEquals(refcount+2, r4.getRefCount());\n\n\n    r1.decRef();\n    r2.decRef();\n    r3.decRef();\n    r4.decRef();\n    sr1.close();\n  }\n  ***/\n\n\n  public static void verbose(Object... args) {\n    if (!VERBOSE) return;\n    StringBuilder sb = new StringBuilder(\"TEST:\");\n    sb.append(Thread.currentThread().getName());\n    sb.append(':');\n    for (Object o : args) {\n      sb.append(' ');\n      sb.append(o.toString());\n    }\n    System.out.println(sb.toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e","date":1320267737,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestRealTimeGet#verbose(Object...).mjava","sourceNew":null,"sourceOld":"  /***\n  @Test\n  public void testGetRealtime() throws Exception {\n    SolrQueryRequest sr1 = req(\"q\",\"foo\");\n    IndexReader r1 = sr1.getCore().getRealtimeReader();\n\n    assertU(adoc(\"id\",\"1\"));\n\n    IndexReader r2 = sr1.getCore().getRealtimeReader();\n    assertNotSame(r1, r2);\n    int refcount = r2.getRefCount();\n\n    // make sure a new reader wasn't opened\n    IndexReader r3 = sr1.getCore().getRealtimeReader();\n    assertSame(r2, r3);\n    assertEquals(refcount+1, r3.getRefCount());\n\n    assertU(commit());\n\n    // this is not critical, but currently a commit does not refresh the reader\n    // if nothing has changed\n    IndexReader r4 = sr1.getCore().getRealtimeReader();\n    assertEquals(refcount+2, r4.getRefCount());\n\n\n    r1.decRef();\n    r2.decRef();\n    r3.decRef();\n    r4.decRef();\n    sr1.close();\n  }\n  ***/\n\n\n  public static void verbose(Object... args) {\n    if (!VERBOSE) return;\n    StringBuilder sb = new StringBuilder(\"TEST:\");\n    sb.append(Thread.currentThread().getName());\n    sb.append(':');\n    for (Object o : args) {\n      sb.append(' ');\n      sb.append(o.toString());\n    }\n    System.out.println(sb.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e"]},"commit2Childs":{"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}