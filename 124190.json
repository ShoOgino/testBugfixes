{"path":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","commits":[{"id":"b69cd84ea1afad0c686a964bdc267f3a298b8c0e","date":1280257599,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testCSVOutput() throws Exception {\r\n    // test our basic types,and that fields come back in the requested order\r\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\r\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\r\n\r\n    // test retrieving score, csv.header\r\n    assertEquals(\"1,0.0,hi\\n\"\r\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\r\n\r\n    // test multivalued\r\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test separator change\r\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test mv separator change\r\n    assertEquals(\"2,hi|there\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test mv separator change for a single field\r\n    assertEquals(\"2,hi|there,nice:output\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\r\n\r\n    // test retrieving fields from index\r\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\r\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\r\n      assertTrue(result.indexOf(field) >= 0);\r\n    }\r\n\r\n    // test null values\r\n    assertEquals(\"2,,hi|there\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\r\n\r\n    // test alternate null value\r\n    assertEquals(\"2,NULL,hi|there\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\r\n\r\n    // test alternate newline\r\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test alternate encapsulator\r\n    assertEquals(\"2,'hi,there'\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test using escape instead of encapsulator\r\n    assertEquals(\"2,hi\\\\,there\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test multiple lines\r\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\r\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\r\n\r\n\r\n    // now test SolrDocumentList\r\n    SolrDocument d = new SolrDocument();\r\n    SolrDocument d1 = d;\r\n    d.addField(\"id\",\"1\");\r\n    d.addField(\"foo_i\",-1);\r\n    d.addField(\"foo_s\",\"hi\");\r\n    d.addField(\"foo_l\",\"12345678987654321L\");\r\n    d.addField(\"foo_b\",false);\r\n    d.addField(\"foo_f\",1.414f);\r\n    d.addField(\"foo_d\",-1.0E300);\r\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\r\n    d.addField(\"score\", \"2.718\");\r\n\r\n    d = new SolrDocument();\r\n    SolrDocument d2 = d;\r\n    d.addField(\"id\",\"2\");\r\n    d.addField(\"v_ss\",\"hi\");\r\n    d.addField(\"v_ss\",\"there\");\r\n    d.addField(\"v2_ss\",\"nice\");\r\n    d.addField(\"v2_ss\",\"output\");\r\n    d.addField(\"score\", \"89.83\");\r\n\r\n    SolrDocumentList sdl = new SolrDocumentList();\r\n    sdl.add(d1);\r\n    sdl.add(d2);\r\n    \r\n    SolrQueryRequest req = req(\"q\",\"*:*\");\r\n    SolrQueryResponse rsp = new SolrQueryResponse();\r\n    rsp.add(\"response\", sdl);\r\n    QueryResponseWriter w = new CSVResponseWriter();\r\n    \r\n    SolrPluginUtils.setReturnFields(\"id,foo_s\", rsp);\r\n    StringWriter buf = new StringWriter();\r\n    w.write(buf, req, rsp);\r\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\r\n\r\n    // try scores\r\n    SolrPluginUtils.setReturnFields(\"id,score,foo_s\", rsp);\r\n    buf = new StringWriter();\r\n    w.write(buf, req, rsp);\r\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\r\n\r\n    // get field values from docs... should be ordered and not include score unless requested\r\n    SolrPluginUtils.setReturnFields(\"*\", rsp);\r\n    buf = new StringWriter();\r\n    w.write(buf, req, rsp);\r\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\r\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\r\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\r\n      buf.toString());\r\n    \r\n\r\n    // get field values and scores - just check that the scores are there... we don't guarantee where\r\n    SolrPluginUtils.setReturnFields(\"*,score\", rsp);\r\n    buf = new StringWriter();\r\n    w.write(buf, req, rsp);\r\n    String s = buf.toString();\r\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testCSVOutput() throws Exception {\r\n    // test our basic types,and that fields come back in the requested order\r\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\r\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\r\n\r\n    // test retrieving score, csv.header\r\n    assertEquals(\"1,0.0,hi\\n\"\r\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\r\n\r\n    // test multivalued\r\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test separator change\r\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test mv separator change\r\n    assertEquals(\"2,hi|there\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test mv separator change for a single field\r\n    assertEquals(\"2,hi|there,nice:output\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\r\n\r\n    // test retrieving fields from index\r\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\r\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\r\n      assertTrue(result.indexOf(field) >= 0);\r\n    }\r\n\r\n    // test null values\r\n    assertEquals(\"2,,hi|there\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\r\n\r\n    // test alternate null value\r\n    assertEquals(\"2,NULL,hi|there\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\r\n\r\n    // test alternate newline\r\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test alternate encapsulator\r\n    assertEquals(\"2,'hi,there'\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test using escape instead of encapsulator\r\n    assertEquals(\"2,hi\\\\,there\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test multiple lines\r\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\r\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\r\n\r\n\r\n    // now test SolrDocumentList\r\n    SolrDocument d = new SolrDocument();\r\n    SolrDocument d1 = d;\r\n    d.addField(\"id\",\"1\");\r\n    d.addField(\"foo_i\",-1);\r\n    d.addField(\"foo_s\",\"hi\");\r\n    d.addField(\"foo_l\",\"12345678987654321L\");\r\n    d.addField(\"foo_b\",false);\r\n    d.addField(\"foo_f\",1.414f);\r\n    d.addField(\"foo_d\",-1.0E300);\r\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\r\n    d.addField(\"score\", \"2.718\");\r\n\r\n    d = new SolrDocument();\r\n    SolrDocument d2 = d;\r\n    d.addField(\"id\",\"2\");\r\n    d.addField(\"v_ss\",\"hi\");\r\n    d.addField(\"v_ss\",\"there\");\r\n    d.addField(\"v2_ss\",\"nice\");\r\n    d.addField(\"v2_ss\",\"output\");\r\n    d.addField(\"score\", \"89.83\");\r\n\r\n    SolrDocumentList sdl = new SolrDocumentList();\r\n    sdl.add(d1);\r\n    sdl.add(d2);\r\n    \r\n    SolrQueryRequest req = req(\"q\",\"*:*\");\r\n    SolrQueryResponse rsp = new SolrQueryResponse();\r\n    rsp.add(\"response\", sdl);\r\n    QueryResponseWriter w = new CSVResponseWriter();\r\n    \r\n    SolrPluginUtils.setReturnFields(\"id,foo_s\", rsp);\r\n    StringWriter buf = new StringWriter();\r\n    w.write(buf, req, rsp);\r\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\r\n\r\n    // try scores\r\n    SolrPluginUtils.setReturnFields(\"id,score,foo_s\", rsp);\r\n    buf = new StringWriter();\r\n    w.write(buf, req, rsp);\r\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\r\n\r\n    // get field values from docs... should be ordered and not include score unless requested\r\n    SolrPluginUtils.setReturnFields(\"*\", rsp);\r\n    buf = new StringWriter();\r\n    w.write(buf, req, rsp);\r\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\r\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\r\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\r\n      buf.toString());\r\n    \r\n\r\n    // get field values and scores - just check that the scores are there... we don't guarantee where\r\n    SolrPluginUtils.setReturnFields(\"*,score\", rsp);\r\n    buf = new StringWriter();\r\n    w.write(buf, req, rsp);\r\n    String s = buf.toString();\r\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","date":1286051536,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    SolrPluginUtils.setReturnFields(\"id,foo_s\", rsp);\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    SolrPluginUtils.setReturnFields(\"id,score,foo_s\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    SolrPluginUtils.setReturnFields(\"*\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    SolrPluginUtils.setReturnFields(\"*,score\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n  }\n\n","sourceOld":"  @Test\r\n  public void testCSVOutput() throws Exception {\r\n    // test our basic types,and that fields come back in the requested order\r\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\r\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\r\n\r\n    // test retrieving score, csv.header\r\n    assertEquals(\"1,0.0,hi\\n\"\r\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\r\n\r\n    // test multivalued\r\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test separator change\r\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test mv separator change\r\n    assertEquals(\"2,hi|there\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test mv separator change for a single field\r\n    assertEquals(\"2,hi|there,nice:output\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\r\n\r\n    // test retrieving fields from index\r\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\r\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\r\n      assertTrue(result.indexOf(field) >= 0);\r\n    }\r\n\r\n    // test null values\r\n    assertEquals(\"2,,hi|there\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\r\n\r\n    // test alternate null value\r\n    assertEquals(\"2,NULL,hi|there\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\r\n\r\n    // test alternate newline\r\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test alternate encapsulator\r\n    assertEquals(\"2,'hi,there'\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test using escape instead of encapsulator\r\n    assertEquals(\"2,hi\\\\,there\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test multiple lines\r\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\r\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\r\n\r\n\r\n    // now test SolrDocumentList\r\n    SolrDocument d = new SolrDocument();\r\n    SolrDocument d1 = d;\r\n    d.addField(\"id\",\"1\");\r\n    d.addField(\"foo_i\",-1);\r\n    d.addField(\"foo_s\",\"hi\");\r\n    d.addField(\"foo_l\",\"12345678987654321L\");\r\n    d.addField(\"foo_b\",false);\r\n    d.addField(\"foo_f\",1.414f);\r\n    d.addField(\"foo_d\",-1.0E300);\r\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\r\n    d.addField(\"score\", \"2.718\");\r\n\r\n    d = new SolrDocument();\r\n    SolrDocument d2 = d;\r\n    d.addField(\"id\",\"2\");\r\n    d.addField(\"v_ss\",\"hi\");\r\n    d.addField(\"v_ss\",\"there\");\r\n    d.addField(\"v2_ss\",\"nice\");\r\n    d.addField(\"v2_ss\",\"output\");\r\n    d.addField(\"score\", \"89.83\");\r\n\r\n    SolrDocumentList sdl = new SolrDocumentList();\r\n    sdl.add(d1);\r\n    sdl.add(d2);\r\n    \r\n    SolrQueryRequest req = req(\"q\",\"*:*\");\r\n    SolrQueryResponse rsp = new SolrQueryResponse();\r\n    rsp.add(\"response\", sdl);\r\n    QueryResponseWriter w = new CSVResponseWriter();\r\n    \r\n    SolrPluginUtils.setReturnFields(\"id,foo_s\", rsp);\r\n    StringWriter buf = new StringWriter();\r\n    w.write(buf, req, rsp);\r\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\r\n\r\n    // try scores\r\n    SolrPluginUtils.setReturnFields(\"id,score,foo_s\", rsp);\r\n    buf = new StringWriter();\r\n    w.write(buf, req, rsp);\r\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\r\n\r\n    // get field values from docs... should be ordered and not include score unless requested\r\n    SolrPluginUtils.setReturnFields(\"*\", rsp);\r\n    buf = new StringWriter();\r\n    w.write(buf, req, rsp);\r\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\r\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\r\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\r\n      buf.toString());\r\n    \r\n\r\n    // get field values and scores - just check that the scores are there... we don't guarantee where\r\n    SolrPluginUtils.setReturnFields(\"*,score\", rsp);\r\n    buf = new StringWriter();\r\n    w.write(buf, req, rsp);\r\n    String s = buf.toString();\r\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec37903d98e1860441604f204ba0c5e6725c96fb","date":1287360434,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    SolrPluginUtils.setReturnFields(\"id,foo_s\", rsp);\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    SolrPluginUtils.setReturnFields(\"id,score,foo_s\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    SolrPluginUtils.setReturnFields(\"*\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    SolrPluginUtils.setReturnFields(\"*,score\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    SolrPluginUtils.setReturnFields(\"id,foo_s\", rsp);\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    SolrPluginUtils.setReturnFields(\"id,score,foo_s\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    SolrPluginUtils.setReturnFields(\"*\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    SolrPluginUtils.setReturnFields(\"*,score\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    SolrPluginUtils.setReturnFields(\"id,foo_s\", rsp);\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    SolrPluginUtils.setReturnFields(\"id,score,foo_s\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    SolrPluginUtils.setReturnFields(\"*\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    SolrPluginUtils.setReturnFields(\"*,score\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    SolrPluginUtils.setReturnFields(\"id,foo_s\", rsp);\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    SolrPluginUtils.setReturnFields(\"id,score,foo_s\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    SolrPluginUtils.setReturnFields(\"*\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    SolrPluginUtils.setReturnFields(\"*,score\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    SolrPluginUtils.setReturnFields(\"id,foo_s\", rsp);\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    SolrPluginUtils.setReturnFields(\"id,score,foo_s\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    SolrPluginUtils.setReturnFields(\"*\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    SolrPluginUtils.setReturnFields(\"*,score\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\r\n  public void testCSVOutput() throws Exception {\r\n    // test our basic types,and that fields come back in the requested order\r\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\r\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\r\n\r\n    // test retrieving score, csv.header\r\n    assertEquals(\"1,0.0,hi\\n\"\r\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\r\n\r\n    // test multivalued\r\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test separator change\r\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test mv separator change\r\n    assertEquals(\"2,hi|there\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test mv separator change for a single field\r\n    assertEquals(\"2,hi|there,nice:output\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\r\n\r\n    // test retrieving fields from index\r\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\r\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\r\n      assertTrue(result.indexOf(field) >= 0);\r\n    }\r\n\r\n    // test null values\r\n    assertEquals(\"2,,hi|there\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\r\n\r\n    // test alternate null value\r\n    assertEquals(\"2,NULL,hi|there\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\r\n\r\n    // test alternate newline\r\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test alternate encapsulator\r\n    assertEquals(\"2,'hi,there'\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test using escape instead of encapsulator\r\n    assertEquals(\"2,hi\\\\,there\\n\"\r\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\r\n\r\n    // test multiple lines\r\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\r\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\r\n\r\n\r\n    // now test SolrDocumentList\r\n    SolrDocument d = new SolrDocument();\r\n    SolrDocument d1 = d;\r\n    d.addField(\"id\",\"1\");\r\n    d.addField(\"foo_i\",-1);\r\n    d.addField(\"foo_s\",\"hi\");\r\n    d.addField(\"foo_l\",\"12345678987654321L\");\r\n    d.addField(\"foo_b\",false);\r\n    d.addField(\"foo_f\",1.414f);\r\n    d.addField(\"foo_d\",-1.0E300);\r\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\r\n    d.addField(\"score\", \"2.718\");\r\n\r\n    d = new SolrDocument();\r\n    SolrDocument d2 = d;\r\n    d.addField(\"id\",\"2\");\r\n    d.addField(\"v_ss\",\"hi\");\r\n    d.addField(\"v_ss\",\"there\");\r\n    d.addField(\"v2_ss\",\"nice\");\r\n    d.addField(\"v2_ss\",\"output\");\r\n    d.addField(\"score\", \"89.83\");\r\n\r\n    SolrDocumentList sdl = new SolrDocumentList();\r\n    sdl.add(d1);\r\n    sdl.add(d2);\r\n    \r\n    SolrQueryRequest req = req(\"q\",\"*:*\");\r\n    SolrQueryResponse rsp = new SolrQueryResponse();\r\n    rsp.add(\"response\", sdl);\r\n    QueryResponseWriter w = new CSVResponseWriter();\r\n    \r\n    SolrPluginUtils.setReturnFields(\"id,foo_s\", rsp);\r\n    StringWriter buf = new StringWriter();\r\n    w.write(buf, req, rsp);\r\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\r\n\r\n    // try scores\r\n    SolrPluginUtils.setReturnFields(\"id,score,foo_s\", rsp);\r\n    buf = new StringWriter();\r\n    w.write(buf, req, rsp);\r\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\r\n\r\n    // get field values from docs... should be ordered and not include score unless requested\r\n    SolrPluginUtils.setReturnFields(\"*\", rsp);\r\n    buf = new StringWriter();\r\n    w.write(buf, req, rsp);\r\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\r\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\r\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\r\n      buf.toString());\r\n    \r\n\r\n    // get field values and scores - just check that the scores are there... we don't guarantee where\r\n    SolrPluginUtils.setReturnFields(\"*,score\", rsp);\r\n    buf = new StringWriter();\r\n    w.write(buf, req, rsp);\r\n    String s = buf.toString();\r\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( ReturnFields.getReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( ReturnFields.getReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( ReturnFields.getReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( ReturnFields.getReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    SolrPluginUtils.setReturnFields(\"id,foo_s\", rsp);\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    SolrPluginUtils.setReturnFields(\"id,score,foo_s\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    SolrPluginUtils.setReturnFields(\"*\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    SolrPluginUtils.setReturnFields(\"*,score\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"794957d0f3853445bdf9319bfb72f8b8c2443a7d","date":1301088393,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( ReturnFields.getReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( ReturnFields.getReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( ReturnFields.getReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( ReturnFields.getReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    SolrPluginUtils.setReturnFields(\"id,foo_s\", rsp);\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    SolrPluginUtils.setReturnFields(\"id,score,foo_s\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    SolrPluginUtils.setReturnFields(\"*\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    SolrPluginUtils.setReturnFields(\"*,score\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    SolrPluginUtils.setReturnFields(\"id,foo_s\", rsp);\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    SolrPluginUtils.setReturnFields(\"id,score,foo_s\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    SolrPluginUtils.setReturnFields(\"*\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    SolrPluginUtils.setReturnFields(\"*,score\", rsp);\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","pathOld":"solr/src/test/org/apache/solr/response/TestCSVResponseWriter#testCSVOutput().mjava","sourceNew":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCSVOutput() throws Exception {\n    // test our basic types,and that fields come back in the requested order\n    assertEquals(\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\\n1,hi,-1,12345678987654321,false,1.414,-1.0E300,2000-01-02T03:04:05Z\\n\"\n    , h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"fl\",\"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt\")));\n\n    // test retrieving score, csv.header\n    assertEquals(\"1,0.0,hi\\n\"\n    , h.query(req(\"q\",\"id:1^0\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,score,foo_s\")));\n\n    // test multivalued\n    assertEquals(\"2,\\\"hi,there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss\")));\n\n    // test separator change\n    assertEquals(\"2|\\\"hi|there\\\"\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change\n    assertEquals(\"2,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,v_ss\")));\n\n    // test mv separator change for a single field\n    assertEquals(\"2,hi|there,nice:output\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"f.v2_ss.csv.separator\",\":\", \"fl\",\"id,v_ss,v2_ss\")));\n\n    // test retrieving fields from index\n    String result = h.query(req(\"q\",\"*:*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,score\"));\n    for (String field : \"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss,score\".split(\",\")) {\n      assertTrue(result.indexOf(field) >= 0);\n    }\n\n    // test null values\n    assertEquals(\"2,,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate null value\n    assertEquals(\"2,NULL,hi|there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.mv.separator\",\"|\", \"csv.null\",\"NULL\",\"fl\",\"id,foo_s,v_ss\")));\n\n    // test alternate newline\n    assertEquals(\"2,\\\"hi,there\\\"\\r\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.newline\",\"\\r\\n\", \"fl\",\"id,v_ss\")));\n\n    // test alternate encapsulator\n    assertEquals(\"2,'hi,there'\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.encapsulator\",\"'\", \"fl\",\"id,v_ss\")));\n\n    // test using escape instead of encapsulator\n    assertEquals(\"2,hi\\\\,there\\n\"\n    , h.query(req(\"q\",\"id:2\", \"wt\",\"csv\", \"csv.header\",\"false\", \"csv.escape\",\"\\\\\", \"fl\",\"id,v_ss\")));\n\n    // test multiple lines\n    assertEquals(\"1,,hi\\n2,\\\"hi,there\\\",\\n\"\n    , h.query(req(\"q\",\"id:[1 TO 2]\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"id,v_ss,foo_s\")));\n\n\n    // now test SolrDocumentList\n    SolrDocument d = new SolrDocument();\n    SolrDocument d1 = d;\n    d.addField(\"id\",\"1\");\n    d.addField(\"foo_i\",-1);\n    d.addField(\"foo_s\",\"hi\");\n    d.addField(\"foo_l\",\"12345678987654321L\");\n    d.addField(\"foo_b\",false);\n    d.addField(\"foo_f\",1.414f);\n    d.addField(\"foo_d\",-1.0E300);\n    d.addField(\"foo_dt\", DateUtil.parseDate(\"2000-01-02T03:04:05Z\"));\n    d.addField(\"score\", \"2.718\");\n\n    d = new SolrDocument();\n    SolrDocument d2 = d;\n    d.addField(\"id\",\"2\");\n    d.addField(\"v_ss\",\"hi\");\n    d.addField(\"v_ss\",\"there\");\n    d.addField(\"v2_ss\",\"nice\");\n    d.addField(\"v2_ss\",\"output\");\n    d.addField(\"score\", \"89.83\");\n\n    SolrDocumentList sdl = new SolrDocumentList();\n    sdl.add(d1);\n    sdl.add(d2);\n    \n    SolrQueryRequest req = req(\"q\",\"*:*\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.add(\"response\", sdl);\n    QueryResponseWriter w = new CSVResponseWriter();\n    \n    rsp.setReturnFields( new ReturnFields(\"id,foo_s\", req) );\n    StringWriter buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_s\\n1,hi\\n2,\\n\", buf.toString());\n\n    // try scores\n    rsp.setReturnFields( new ReturnFields(\"id,score,foo_s\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,score,foo_s\\n1,2.718,hi\\n2,89.83,\\n\", buf.toString());\n\n    // get field values from docs... should be ordered and not include score unless requested\n    rsp.setReturnFields( new ReturnFields(\"*\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    assertEquals(\"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt,v_ss,v2_ss\\n\" +\n        \"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\\n\" +\n        \"2,,,,,,,,\\\"hi,there\\\",\\\"nice,output\\\"\\n\",\n      buf.toString());\n    \n\n    // get field values and scores - just check that the scores are there... we don't guarantee where\n    rsp.setReturnFields( new ReturnFields(\"*,score\", req) );\n    buf = new StringWriter();\n    w.write(buf, req, rsp);\n    String s = buf.toString();\n    assertTrue(s.indexOf(\"score\") >=0 && s.indexOf(\"2.718\") > 0 && s.indexOf(\"89.83\") > 0 );\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b69cd84ea1afad0c686a964bdc267f3a298b8c0e"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["6aedf81f068e430dec27d94310415cc6ff52731c"],"b69cd84ea1afad0c686a964bdc267f3a298b8c0e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","ec37903d98e1860441604f204ba0c5e6725c96fb"],"ec37903d98e1860441604f204ba0c5e6725c96fb":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["b69cd84ea1afad0c686a964bdc267f3a298b8c0e"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade","ec37903d98e1860441604f204ba0c5e6725c96fb"],"6aedf81f068e430dec27d94310415cc6ff52731c":["ec37903d98e1860441604f204ba0c5e6725c96fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"794957d0f3853445bdf9319bfb72f8b8c2443a7d":["c26f00b574427b55127e869b935845554afde1fa","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b69cd84ea1afad0c686a964bdc267f3a298b8c0e":["3242a09f703274d3b9283f2064a1a33064b53a1b","3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"ec37903d98e1860441604f204ba0c5e6725c96fb":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","6aedf81f068e430dec27d94310415cc6ff52731c"],"3e904610f0db3fdf2ea10c5701f5f4f86c1e9ade":["ec37903d98e1860441604f204ba0c5e6725c96fb","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3242a09f703274d3b9283f2064a1a33064b53a1b","b69cd84ea1afad0c686a964bdc267f3a298b8c0e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"6aedf81f068e430dec27d94310415cc6ff52731c":["794957d0f3853445bdf9319bfb72f8b8c2443a7d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}