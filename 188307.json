{"path":"solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager#testUploadConfig().mjava","commits":[{"id":"6c8a2521797f14d1d697a17a0069f5619cd211a6","date":1424361535,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager#testUploadConfig().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUploadConfig() throws IOException {\n\n    zkServer.ensurePathExists(\"/solr\");\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(\"/solr\"), 10000)) {\n\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertEquals(0, configManager.listConfigs().size());\n\n      byte[] testdata = \"test data\".getBytes(Charsets.UTF_8);\n\n      Path tempConfig = createTempDir(\"config\");\n      Files.createFile(tempConfig.resolve(\"file1\"));\n      Files.write(tempConfig.resolve(\"file1\"), testdata);\n      Files.createFile(tempConfig.resolve(\"file2\"));\n      Files.createDirectory(tempConfig.resolve(\"subdir\"));\n      Files.createFile(tempConfig.resolve(\"subdir\").resolve(\"file3\"));\n\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      // uploading a directory creates a new config\n      List<String> configs = configManager.listConfigs();\n      assertEquals(1, configs.size());\n      assertEquals(\"testconfig\", configs.get(0));\n\n      // check downloading\n      Path downloadPath = createTempDir(\"download\");\n      configManager.downloadConfigDir(\"testconfig\", downloadPath);\n      assertTrue(Files.exists(downloadPath.resolve(\"file1\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"file2\")));\n      assertTrue(Files.isDirectory(downloadPath.resolve(\"subdir\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"subdir/file3\")));\n      byte[] checkdata = Files.readAllBytes(downloadPath.resolve(\"file1\"));\n      assertArrayEquals(testdata, checkdata);\n\n      // uploading to the same config overwrites\n      byte[] overwritten = \"new test data\".getBytes(Charsets.UTF_8);\n      Files.write(tempConfig.resolve(\"file1\"), overwritten);\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      assertEquals(1, configManager.listConfigs().size());\n      Path download2 = createTempDir(\"download2\");\n      configManager.downloadConfigDir(\"testconfig\", download2);\n      byte[] checkdata2 = Files.readAllBytes(download2.resolve(\"file1\"));\n      assertArrayEquals(overwritten, checkdata2);\n\n      // uploading same files to a new name creates a new config\n      configManager.uploadConfigDir(tempConfig, \"config2\");\n      assertEquals(2, configManager.listConfigs().size());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4af90ac49fd4c1f65f951cc3902c9e2ab7ad874b","date":1424629360,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager#testUploadConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager#testUploadConfig().mjava","sourceNew":"  @Test\n  public void testUploadConfig() throws IOException {\n\n    zkServer.ensurePathExists(\"/solr\");\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(\"/solr\"), 10000)) {\n\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertEquals(0, configManager.listConfigs().size());\n\n      byte[] testdata = \"test data\".getBytes(Charsets.UTF_8);\n\n      Path tempConfig = createTempDir(\"config\");\n      Files.createFile(tempConfig.resolve(\"file1\"));\n      Files.write(tempConfig.resolve(\"file1\"), testdata);\n      Files.createFile(tempConfig.resolve(\"file2\"));\n      Files.createDirectory(tempConfig.resolve(\"subdir\"));\n      Files.createFile(tempConfig.resolve(\"subdir\").resolve(\"file3\"));\n      Files.createFile(tempConfig.resolve(\".ignored\"));\n      Files.createDirectory(tempConfig.resolve(\".ignoreddir\"));\n      Files.createFile(tempConfig.resolve(\".ignoreddir\").resolve(\"ignored\"));\n\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      // uploading a directory creates a new config\n      List<String> configs = configManager.listConfigs();\n      assertEquals(1, configs.size());\n      assertEquals(\"testconfig\", configs.get(0));\n\n      // check downloading\n      Path downloadPath = createTempDir(\"download\");\n      configManager.downloadConfigDir(\"testconfig\", downloadPath);\n      assertTrue(Files.exists(downloadPath.resolve(\"file1\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"file2\")));\n      assertTrue(Files.isDirectory(downloadPath.resolve(\"subdir\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"subdir/file3\")));\n      // dotfiles should be ignored\n      assertFalse(Files.exists(downloadPath.resolve(\".ignored\")));\n      assertFalse(Files.exists(downloadPath.resolve(\".ignoreddir/ignored\")));\n      byte[] checkdata = Files.readAllBytes(downloadPath.resolve(\"file1\"));\n      assertArrayEquals(testdata, checkdata);\n\n      // uploading to the same config overwrites\n      byte[] overwritten = \"new test data\".getBytes(Charsets.UTF_8);\n      Files.write(tempConfig.resolve(\"file1\"), overwritten);\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      assertEquals(1, configManager.listConfigs().size());\n      Path download2 = createTempDir(\"download2\");\n      configManager.downloadConfigDir(\"testconfig\", download2);\n      byte[] checkdata2 = Files.readAllBytes(download2.resolve(\"file1\"));\n      assertArrayEquals(overwritten, checkdata2);\n\n      // uploading same files to a new name creates a new config\n      configManager.uploadConfigDir(tempConfig, \"config2\");\n      assertEquals(2, configManager.listConfigs().size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUploadConfig() throws IOException {\n\n    zkServer.ensurePathExists(\"/solr\");\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(\"/solr\"), 10000)) {\n\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertEquals(0, configManager.listConfigs().size());\n\n      byte[] testdata = \"test data\".getBytes(Charsets.UTF_8);\n\n      Path tempConfig = createTempDir(\"config\");\n      Files.createFile(tempConfig.resolve(\"file1\"));\n      Files.write(tempConfig.resolve(\"file1\"), testdata);\n      Files.createFile(tempConfig.resolve(\"file2\"));\n      Files.createDirectory(tempConfig.resolve(\"subdir\"));\n      Files.createFile(tempConfig.resolve(\"subdir\").resolve(\"file3\"));\n\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      // uploading a directory creates a new config\n      List<String> configs = configManager.listConfigs();\n      assertEquals(1, configs.size());\n      assertEquals(\"testconfig\", configs.get(0));\n\n      // check downloading\n      Path downloadPath = createTempDir(\"download\");\n      configManager.downloadConfigDir(\"testconfig\", downloadPath);\n      assertTrue(Files.exists(downloadPath.resolve(\"file1\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"file2\")));\n      assertTrue(Files.isDirectory(downloadPath.resolve(\"subdir\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"subdir/file3\")));\n      byte[] checkdata = Files.readAllBytes(downloadPath.resolve(\"file1\"));\n      assertArrayEquals(testdata, checkdata);\n\n      // uploading to the same config overwrites\n      byte[] overwritten = \"new test data\".getBytes(Charsets.UTF_8);\n      Files.write(tempConfig.resolve(\"file1\"), overwritten);\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      assertEquals(1, configManager.listConfigs().size());\n      Path download2 = createTempDir(\"download2\");\n      configManager.downloadConfigDir(\"testconfig\", download2);\n      byte[] checkdata2 = Files.readAllBytes(download2.resolve(\"file1\"));\n      assertArrayEquals(overwritten, checkdata2);\n\n      // uploading same files to a new name creates a new config\n      configManager.uploadConfigDir(tempConfig, \"config2\");\n      assertEquals(2, configManager.listConfigs().size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager#testUploadConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager#testUploadConfig().mjava","sourceNew":"  @Test\n  public void testUploadConfig() throws IOException {\n\n    zkServer.ensurePathExists(\"/solr\");\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(\"/solr\"), 10000)) {\n\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertEquals(0, configManager.listConfigs().size());\n\n      byte[] testdata = \"test data\".getBytes(StandardCharsets.UTF_8);\n\n      Path tempConfig = createTempDir(\"config\");\n      Files.createFile(tempConfig.resolve(\"file1\"));\n      Files.write(tempConfig.resolve(\"file1\"), testdata);\n      Files.createFile(tempConfig.resolve(\"file2\"));\n      Files.createDirectory(tempConfig.resolve(\"subdir\"));\n      Files.createFile(tempConfig.resolve(\"subdir\").resolve(\"file3\"));\n      Files.createFile(tempConfig.resolve(\".ignored\"));\n      Files.createDirectory(tempConfig.resolve(\".ignoreddir\"));\n      Files.createFile(tempConfig.resolve(\".ignoreddir\").resolve(\"ignored\"));\n\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      // uploading a directory creates a new config\n      List<String> configs = configManager.listConfigs();\n      assertEquals(1, configs.size());\n      assertEquals(\"testconfig\", configs.get(0));\n\n      // check downloading\n      Path downloadPath = createTempDir(\"download\");\n      configManager.downloadConfigDir(\"testconfig\", downloadPath);\n      assertTrue(Files.exists(downloadPath.resolve(\"file1\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"file2\")));\n      assertTrue(Files.isDirectory(downloadPath.resolve(\"subdir\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"subdir/file3\")));\n      // dotfiles should be ignored\n      assertFalse(Files.exists(downloadPath.resolve(\".ignored\")));\n      assertFalse(Files.exists(downloadPath.resolve(\".ignoreddir/ignored\")));\n      byte[] checkdata = Files.readAllBytes(downloadPath.resolve(\"file1\"));\n      assertArrayEquals(testdata, checkdata);\n\n      // uploading to the same config overwrites\n      byte[] overwritten = \"new test data\".getBytes(StandardCharsets.UTF_8);\n      Files.write(tempConfig.resolve(\"file1\"), overwritten);\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      assertEquals(1, configManager.listConfigs().size());\n      Path download2 = createTempDir(\"download2\");\n      configManager.downloadConfigDir(\"testconfig\", download2);\n      byte[] checkdata2 = Files.readAllBytes(download2.resolve(\"file1\"));\n      assertArrayEquals(overwritten, checkdata2);\n\n      // uploading same files to a new name creates a new config\n      configManager.uploadConfigDir(tempConfig, \"config2\");\n      assertEquals(2, configManager.listConfigs().size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUploadConfig() throws IOException {\n\n    zkServer.ensurePathExists(\"/solr\");\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(\"/solr\"), 10000)) {\n\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertEquals(0, configManager.listConfigs().size());\n\n      byte[] testdata = \"test data\".getBytes(Charsets.UTF_8);\n\n      Path tempConfig = createTempDir(\"config\");\n      Files.createFile(tempConfig.resolve(\"file1\"));\n      Files.write(tempConfig.resolve(\"file1\"), testdata);\n      Files.createFile(tempConfig.resolve(\"file2\"));\n      Files.createDirectory(tempConfig.resolve(\"subdir\"));\n      Files.createFile(tempConfig.resolve(\"subdir\").resolve(\"file3\"));\n      Files.createFile(tempConfig.resolve(\".ignored\"));\n      Files.createDirectory(tempConfig.resolve(\".ignoreddir\"));\n      Files.createFile(tempConfig.resolve(\".ignoreddir\").resolve(\"ignored\"));\n\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      // uploading a directory creates a new config\n      List<String> configs = configManager.listConfigs();\n      assertEquals(1, configs.size());\n      assertEquals(\"testconfig\", configs.get(0));\n\n      // check downloading\n      Path downloadPath = createTempDir(\"download\");\n      configManager.downloadConfigDir(\"testconfig\", downloadPath);\n      assertTrue(Files.exists(downloadPath.resolve(\"file1\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"file2\")));\n      assertTrue(Files.isDirectory(downloadPath.resolve(\"subdir\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"subdir/file3\")));\n      // dotfiles should be ignored\n      assertFalse(Files.exists(downloadPath.resolve(\".ignored\")));\n      assertFalse(Files.exists(downloadPath.resolve(\".ignoreddir/ignored\")));\n      byte[] checkdata = Files.readAllBytes(downloadPath.resolve(\"file1\"));\n      assertArrayEquals(testdata, checkdata);\n\n      // uploading to the same config overwrites\n      byte[] overwritten = \"new test data\".getBytes(Charsets.UTF_8);\n      Files.write(tempConfig.resolve(\"file1\"), overwritten);\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      assertEquals(1, configManager.listConfigs().size());\n      Path download2 = createTempDir(\"download2\");\n      configManager.downloadConfigDir(\"testconfig\", download2);\n      byte[] checkdata2 = Files.readAllBytes(download2.resolve(\"file1\"));\n      assertArrayEquals(overwritten, checkdata2);\n\n      // uploading same files to a new name creates a new config\n      configManager.uploadConfigDir(tempConfig, \"config2\");\n      assertEquals(2, configManager.listConfigs().size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager#testUploadConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager#testUploadConfig().mjava","sourceNew":"  @Test\n  public void testUploadConfig() throws IOException {\n\n    zkServer.ensurePathExists(\"/solr\");\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(\"/solr\"), 10000)) {\n\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertEquals(0, configManager.listConfigs().size());\n\n      byte[] testdata = \"test data\".getBytes(StandardCharsets.UTF_8);\n\n      Path tempConfig = createTempDir(\"config\");\n      Files.createFile(tempConfig.resolve(\"file1\"));\n      Files.write(tempConfig.resolve(\"file1\"), testdata);\n      Files.createFile(tempConfig.resolve(\"file2\"));\n      Files.createDirectory(tempConfig.resolve(\"subdir\"));\n      Files.createFile(tempConfig.resolve(\"subdir\").resolve(\"file3\"));\n      Files.createFile(tempConfig.resolve(\".ignored\"));\n      Files.createDirectory(tempConfig.resolve(\".ignoreddir\"));\n      Files.createFile(tempConfig.resolve(\".ignoreddir\").resolve(\"ignored\"));\n\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      // uploading a directory creates a new config\n      List<String> configs = configManager.listConfigs();\n      assertEquals(1, configs.size());\n      assertEquals(\"testconfig\", configs.get(0));\n\n      // check downloading\n      Path downloadPath = createTempDir(\"download\");\n      configManager.downloadConfigDir(\"testconfig\", downloadPath);\n      assertTrue(Files.exists(downloadPath.resolve(\"file1\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"file2\")));\n      assertTrue(Files.isDirectory(downloadPath.resolve(\"subdir\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"subdir/file3\")));\n      // dotfiles should be ignored\n      assertFalse(Files.exists(downloadPath.resolve(\".ignored\")));\n      assertFalse(Files.exists(downloadPath.resolve(\".ignoreddir/ignored\")));\n      byte[] checkdata = Files.readAllBytes(downloadPath.resolve(\"file1\"));\n      assertArrayEquals(testdata, checkdata);\n\n      // uploading to the same config overwrites\n      byte[] overwritten = \"new test data\".getBytes(StandardCharsets.UTF_8);\n      Files.write(tempConfig.resolve(\"file1\"), overwritten);\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      assertEquals(1, configManager.listConfigs().size());\n      Path download2 = createTempDir(\"download2\");\n      configManager.downloadConfigDir(\"testconfig\", download2);\n      byte[] checkdata2 = Files.readAllBytes(download2.resolve(\"file1\"));\n      assertArrayEquals(overwritten, checkdata2);\n\n      // uploading same files to a new name creates a new config\n      configManager.uploadConfigDir(tempConfig, \"config2\");\n      assertEquals(2, configManager.listConfigs().size());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUploadConfig() throws IOException {\n\n    zkServer.ensurePathExists(\"/solr\");\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(\"/solr\"), 10000)) {\n\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertEquals(0, configManager.listConfigs().size());\n\n      byte[] testdata = \"test data\".getBytes(Charsets.UTF_8);\n\n      Path tempConfig = createTempDir(\"config\");\n      Files.createFile(tempConfig.resolve(\"file1\"));\n      Files.write(tempConfig.resolve(\"file1\"), testdata);\n      Files.createFile(tempConfig.resolve(\"file2\"));\n      Files.createDirectory(tempConfig.resolve(\"subdir\"));\n      Files.createFile(tempConfig.resolve(\"subdir\").resolve(\"file3\"));\n      Files.createFile(tempConfig.resolve(\".ignored\"));\n      Files.createDirectory(tempConfig.resolve(\".ignoreddir\"));\n      Files.createFile(tempConfig.resolve(\".ignoreddir\").resolve(\"ignored\"));\n\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      // uploading a directory creates a new config\n      List<String> configs = configManager.listConfigs();\n      assertEquals(1, configs.size());\n      assertEquals(\"testconfig\", configs.get(0));\n\n      // check downloading\n      Path downloadPath = createTempDir(\"download\");\n      configManager.downloadConfigDir(\"testconfig\", downloadPath);\n      assertTrue(Files.exists(downloadPath.resolve(\"file1\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"file2\")));\n      assertTrue(Files.isDirectory(downloadPath.resolve(\"subdir\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"subdir/file3\")));\n      // dotfiles should be ignored\n      assertFalse(Files.exists(downloadPath.resolve(\".ignored\")));\n      assertFalse(Files.exists(downloadPath.resolve(\".ignoreddir/ignored\")));\n      byte[] checkdata = Files.readAllBytes(downloadPath.resolve(\"file1\"));\n      assertArrayEquals(testdata, checkdata);\n\n      // uploading to the same config overwrites\n      byte[] overwritten = \"new test data\".getBytes(Charsets.UTF_8);\n      Files.write(tempConfig.resolve(\"file1\"), overwritten);\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      assertEquals(1, configManager.listConfigs().size());\n      Path download2 = createTempDir(\"download2\");\n      configManager.downloadConfigDir(\"testconfig\", download2);\n      byte[] checkdata2 = Files.readAllBytes(download2.resolve(\"file1\"));\n      assertArrayEquals(overwritten, checkdata2);\n\n      // uploading same files to a new name creates a new config\n      configManager.uploadConfigDir(tempConfig, \"config2\");\n      assertEquals(2, configManager.listConfigs().size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b711b23f8eb48cb6903822e89ed88fc4eeccbee0","date":1520575216,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager#testUploadConfig().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestZkConfigManager#testUploadConfig().mjava","sourceNew":"  @Test\n  public void testUploadConfig() throws IOException {\n\n    zkServer.ensurePathExists(\"/solr\");\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(\"/solr\"), 10000)) {\n\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertEquals(0, configManager.listConfigs().size());\n\n      byte[] testdata = \"test data\".getBytes(StandardCharsets.UTF_8);\n\n      Path tempConfig = createTempDir(\"config\");\n      Files.createFile(tempConfig.resolve(\"file1\"));\n      Files.write(tempConfig.resolve(\"file1\"), testdata);\n      Files.createFile(tempConfig.resolve(\"file2\"));\n      Files.createDirectory(tempConfig.resolve(\"subdir\"));\n      Files.createFile(tempConfig.resolve(\"subdir\").resolve(\"file3\"));\n      Files.createFile(tempConfig.resolve(\".ignored\"));\n      Files.createDirectory(tempConfig.resolve(\".ignoreddir\"));\n      Files.createFile(tempConfig.resolve(\".ignoreddir\").resolve(\"ignored\"));\n\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      // uploading a directory creates a new config\n      List<String> configs = configManager.listConfigs();\n      assertEquals(1, configs.size());\n      assertEquals(\"testconfig\", configs.get(0));\n\n      // check downloading\n      Path downloadPath = createTempDir(\"download\");\n      configManager.downloadConfigDir(\"testconfig\", downloadPath);\n      assertTrue(Files.exists(downloadPath.resolve(\"file1\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"file2\")));\n      assertTrue(Files.isDirectory(downloadPath.resolve(\"subdir\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"subdir/file3\")));\n      // dotfiles should be ignored\n      assertFalse(Files.exists(downloadPath.resolve(\".ignored\")));\n      assertFalse(Files.exists(downloadPath.resolve(\".ignoreddir/ignored\")));\n      byte[] checkdata = Files.readAllBytes(downloadPath.resolve(\"file1\"));\n      assertArrayEquals(testdata, checkdata);\n\n      // uploading to the same config overwrites\n      byte[] overwritten = \"new test data\".getBytes(StandardCharsets.UTF_8);\n      Files.write(tempConfig.resolve(\"file1\"), overwritten);\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      assertEquals(1, configManager.listConfigs().size());\n      Path download2 = createTempDir(\"download2\");\n      configManager.downloadConfigDir(\"testconfig\", download2);\n      byte[] checkdata2 = Files.readAllBytes(download2.resolve(\"file1\"));\n      assertArrayEquals(overwritten, checkdata2);\n\n      // uploading same files to a new name creates a new config\n      configManager.uploadConfigDir(tempConfig, \"config2\");\n      assertEquals(2, configManager.listConfigs().size());\n\n      // Test copying a config works in both flavors\n      configManager.copyConfigDir(\"config2\", \"config2copy\");\n      configManager.copyConfigDir(\"config2\", \"config2copy2\", null);\n      configs = configManager.listConfigs();\n      assertTrue(\"config2copy should exist\", configs.contains(\"config2copy\"));\n      assertTrue(\"config2copy2 should exist\", configs.contains(\"config2copy2\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUploadConfig() throws IOException {\n\n    zkServer.ensurePathExists(\"/solr\");\n\n    try (SolrZkClient zkClient = new SolrZkClient(zkServer.getZkAddress(\"/solr\"), 10000)) {\n\n      ZkConfigManager configManager = new ZkConfigManager(zkClient);\n      assertEquals(0, configManager.listConfigs().size());\n\n      byte[] testdata = \"test data\".getBytes(StandardCharsets.UTF_8);\n\n      Path tempConfig = createTempDir(\"config\");\n      Files.createFile(tempConfig.resolve(\"file1\"));\n      Files.write(tempConfig.resolve(\"file1\"), testdata);\n      Files.createFile(tempConfig.resolve(\"file2\"));\n      Files.createDirectory(tempConfig.resolve(\"subdir\"));\n      Files.createFile(tempConfig.resolve(\"subdir\").resolve(\"file3\"));\n      Files.createFile(tempConfig.resolve(\".ignored\"));\n      Files.createDirectory(tempConfig.resolve(\".ignoreddir\"));\n      Files.createFile(tempConfig.resolve(\".ignoreddir\").resolve(\"ignored\"));\n\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      // uploading a directory creates a new config\n      List<String> configs = configManager.listConfigs();\n      assertEquals(1, configs.size());\n      assertEquals(\"testconfig\", configs.get(0));\n\n      // check downloading\n      Path downloadPath = createTempDir(\"download\");\n      configManager.downloadConfigDir(\"testconfig\", downloadPath);\n      assertTrue(Files.exists(downloadPath.resolve(\"file1\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"file2\")));\n      assertTrue(Files.isDirectory(downloadPath.resolve(\"subdir\")));\n      assertTrue(Files.exists(downloadPath.resolve(\"subdir/file3\")));\n      // dotfiles should be ignored\n      assertFalse(Files.exists(downloadPath.resolve(\".ignored\")));\n      assertFalse(Files.exists(downloadPath.resolve(\".ignoreddir/ignored\")));\n      byte[] checkdata = Files.readAllBytes(downloadPath.resolve(\"file1\"));\n      assertArrayEquals(testdata, checkdata);\n\n      // uploading to the same config overwrites\n      byte[] overwritten = \"new test data\".getBytes(StandardCharsets.UTF_8);\n      Files.write(tempConfig.resolve(\"file1\"), overwritten);\n      configManager.uploadConfigDir(tempConfig, \"testconfig\");\n\n      assertEquals(1, configManager.listConfigs().size());\n      Path download2 = createTempDir(\"download2\");\n      configManager.downloadConfigDir(\"testconfig\", download2);\n      byte[] checkdata2 = Files.readAllBytes(download2.resolve(\"file1\"));\n      assertArrayEquals(overwritten, checkdata2);\n\n      // uploading same files to a new name creates a new config\n      configManager.uploadConfigDir(tempConfig, \"config2\");\n      assertEquals(2, configManager.listConfigs().size());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b711b23f8eb48cb6903822e89ed88fc4eeccbee0":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["4af90ac49fd4c1f65f951cc3902c9e2ab7ad874b"],"320888923ec13b91f53082558f01f4c9960dd226":["4af90ac49fd4c1f65f951cc3902c9e2ab7ad874b","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"4af90ac49fd4c1f65f951cc3902c9e2ab7ad874b":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b711b23f8eb48cb6903822e89ed88fc4eeccbee0"]},"commit2Childs":{"b711b23f8eb48cb6903822e89ed88fc4eeccbee0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c8a2521797f14d1d697a17a0069f5619cd211a6":["4af90ac49fd4c1f65f951cc3902c9e2ab7ad874b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c8a2521797f14d1d697a17a0069f5619cd211a6"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["b711b23f8eb48cb6903822e89ed88fc4eeccbee0","320888923ec13b91f53082558f01f4c9960dd226"],"320888923ec13b91f53082558f01f4c9960dd226":[],"4af90ac49fd4c1f65f951cc3902c9e2ab7ad874b":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","320888923ec13b91f53082558f01f4c9960dd226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}