{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#doRandomDistanceTest(int,int).mjava","commits":[{"id":"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3","date":1458680048,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#doRandomDistanceTest(int,int).mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceQuery#doRandomTest(int,int).mjava","sourceNew":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n  \n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n  \n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = -90 + 180.0 * random().nextDouble();\n      double lonRaw = -180 + 360.0 * random().nextDouble();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = quantizeLat(latRaw);\n      double lon = quantizeLon(lonRaw);\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, lat, lon);\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n  \n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = maxRadius(lat, lon) * random().nextDouble();\n  \n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n  \n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n      \n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + lat + \",\" + lon + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n\n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = -90 + 180.0 * random().nextDouble();\n      double lonRaw = -180 + 360.0 * random().nextDouble();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = LatLonPoint.decodeLatitude(LatLonPoint.encodeLatitude(latRaw));\n      double lon = LatLonPoint.decodeLongitude(LatLonPoint.encodeLongitude(lonRaw));\n      Document doc = new Document();\n      doc.add(new LatLonPoint(\"field\", lat, lon));\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = 50000000 * random().nextDouble();\n\n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n\n      TopDocs topDocs = searcher.search(LatLonPoint.newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n\n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6c59bc551f4e523ce6a321280cc6733424fb824","date":1458837690,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#doRandomDistanceTest(int,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#doRandomDistanceTest(int,int).mjava","sourceNew":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n  \n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n  \n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = -90 + 180.0 * random().nextDouble();\n      double lonRaw = -180 + 360.0 * random().nextDouble();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = quantizeLat(latRaw);\n      double lon = quantizeLon(lonRaw);\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, lat, lon);\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n  \n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = 50000000D * random().nextDouble();\n  \n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n  \n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n      \n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + lat + \",\" + lon + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n  \n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n  \n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = -90 + 180.0 * random().nextDouble();\n      double lonRaw = -180 + 360.0 * random().nextDouble();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = quantizeLat(latRaw);\n      double lon = quantizeLon(lonRaw);\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, lat, lon);\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n  \n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = maxRadius(lat, lon) * random().nextDouble();\n  \n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n  \n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n      \n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + lat + \",\" + lon + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c1079b0e8cc08b4c818211a4fa79d31f0c66ba9","date":1459176843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#doRandomDistanceTest(int,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#doRandomDistanceTest(int,int).mjava","sourceNew":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n  \n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n  \n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = GeoTestUtil.nextLatitude();\n      double lonRaw = GeoTestUtil.nextLongitude();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = quantizeLat(latRaw);\n      double lon = quantizeLon(lonRaw);\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, lat, lon);\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n  \n    for (int i = 0; i < numQueries; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000D * random().nextDouble();\n  \n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n  \n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n      \n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + lat + \",\" + lon + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n  \n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n  \n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = -90 + 180.0 * random().nextDouble();\n      double lonRaw = -180 + 360.0 * random().nextDouble();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = quantizeLat(latRaw);\n      double lon = quantizeLon(lonRaw);\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, lat, lon);\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n  \n    for (int i = 0; i < numQueries; i++) {\n      double lat = -90 + 180.0 * random().nextDouble();\n      double lon = -180 + 360.0 * random().nextDouble();\n      double radius = 50000000D * random().nextDouble();\n  \n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n  \n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n      \n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + lat + \",\" + lon + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9e52892242a8c82e1b0c1bd4f1d404366b0501c","date":1459531691,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#doRandomDistanceTest(int,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#doRandomDistanceTest(int,int).mjava","sourceNew":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n  \n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n  \n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = GeoTestUtil.nextLatitude();\n      double lonRaw = GeoTestUtil.nextLongitude();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = quantizeLat(latRaw);\n      double lon = quantizeLon(lonRaw);\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, lat, lon);\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n  \n    for (int i = 0; i < numQueries; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000D * random().nextDouble();\n  \n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n  \n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n      \n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + lat + \",\" + lon + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n  \n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n  \n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = GeoTestUtil.nextLatitude();\n      double lonRaw = GeoTestUtil.nextLongitude();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = quantizeLat(latRaw);\n      double lon = quantizeLon(lonRaw);\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, lat, lon);\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n  \n    for (int i = 0; i < numQueries; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000D * random().nextDouble();\n  \n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n  \n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n      \n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + lat + \",\" + lon + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c5537ea5dd595f2987618e9086f4fae5736a8dc","date":1460385370,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#doRandomDistanceTest(int,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#doRandomDistanceTest(int,int).mjava","sourceNew":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n  \n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n  \n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = nextLatitude();\n      double lonRaw = nextLongitude();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = quantizeLat(latRaw);\n      double lon = quantizeLon(lonRaw);\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, lat, lon);\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n  \n    for (int i = 0; i < numQueries; i++) {\n      double lat = nextLatitude();\n      double lon = nextLongitude();\n      double radius = 50000000D * random().nextDouble();\n  \n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n  \n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n      \n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + lat + \",\" + lon + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n  \n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n  \n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = GeoTestUtil.nextLatitude();\n      double lonRaw = GeoTestUtil.nextLongitude();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = quantizeLat(latRaw);\n      double lon = quantizeLon(lonRaw);\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, lat, lon);\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n  \n    for (int i = 0; i < numQueries; i++) {\n      double lat = GeoTestUtil.nextLatitude();\n      double lon = GeoTestUtil.nextLongitude();\n      double radius = 50000000D * random().nextDouble();\n  \n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n  \n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n      \n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + lat + \",\" + lon + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e21d7642ee7e0c00429964e5b47504602fe218c","date":1460897579,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#doRandomDistanceTest(int,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#doRandomDistanceTest(int,int).mjava","sourceNew":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n  \n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n  \n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = nextLatitude();\n      double lonRaw = nextLongitude();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = quantizeLat(latRaw);\n      double lon = quantizeLon(lonRaw);\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, lat, lon);\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n  \n    for (int i = 0; i < numQueries; i++) {\n      double lat = nextLatitude();\n      double lon = nextLongitude();\n      double radius = 50000000D * random().nextDouble();\n  \n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n  \n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n      \n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + lat + \",\" + lon + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n  \n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n  \n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = nextLatitude();\n      double lonRaw = nextLongitude();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = quantizeLat(latRaw);\n      double lon = quantizeLon(lonRaw);\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, lat, lon);\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n  \n    for (int i = 0; i < numQueries; i++) {\n      double lat = nextLatitude();\n      double lon = nextLongitude();\n      double radius = 50000000D * random().nextDouble();\n  \n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n  \n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n      \n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + lat + \",\" + lon + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8cb57c50beb99a1245256e866350af8e5ea1f36","date":1460921840,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseGeoPointTestCase#doRandomDistanceTest(int,int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/BaseGeoPointTestCase#doRandomDistanceTest(int,int).mjava","sourceNew":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n  \n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n  \n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = nextLatitude();\n      double lonRaw = nextLongitude();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = quantizeLat(latRaw);\n      double lon = quantizeLon(lonRaw);\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, lat, lon);\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n  \n    for (int i = 0; i < numQueries; i++) {\n      double lat = nextLatitude();\n      double lon = nextLongitude();\n      double radius = 50000000D * random().nextDouble();\n  \n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n  \n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n      \n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + lat + \",\" + lon + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doRandomDistanceTest(int numDocs, int numQueries) throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    // Else seeds may not reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    int pointsInLeaf = 2 + random().nextInt(4);\n    iwc.setCodec(new FilterCodec(\"Lucene60\", TestUtil.getDefaultCodec()) {\n      @Override\n      public PointsFormat pointsFormat() {\n        return new PointsFormat() {\n          @Override\n          public PointsWriter fieldsWriter(SegmentWriteState writeState) throws IOException {\n            return new Lucene60PointsWriter(writeState, pointsInLeaf, BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP);\n          }\n  \n          @Override\n          public PointsReader fieldsReader(SegmentReadState readState) throws IOException {\n            return new Lucene60PointsReader(readState);\n          }\n        };\n      }\n    });\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n  \n    for (int i = 0; i < numDocs; i++) {\n      double latRaw = nextLatitude();\n      double lonRaw = nextLongitude();\n      // pre-normalize up front, so we can just use quantized value for testing and do simple exact comparisons\n      double lat = quantizeLat(latRaw);\n      double lon = quantizeLon(lonRaw);\n      Document doc = new Document();\n      addPointToDoc(\"field\", doc, lat, lon);\n      doc.add(new StoredField(\"lat\", lat));\n      doc.add(new StoredField(\"lon\", lon));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n  \n    for (int i = 0; i < numQueries; i++) {\n      double lat = nextLatitude();\n      double lon = nextLongitude();\n      double radius = 50000000D * random().nextDouble();\n  \n      BitSet expected = new BitSet();\n      for (int doc = 0; doc < reader.maxDoc(); doc++) {\n        double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n        double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n        double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n        if (distance <= radius) {\n          expected.set(doc);\n        }\n      }\n  \n      TopDocs topDocs = searcher.search(newDistanceQuery(\"field\", lat, lon, radius), reader.maxDoc(), Sort.INDEXORDER);\n      BitSet actual = new BitSet();\n      for (ScoreDoc doc : topDocs.scoreDocs) {\n        actual.set(doc.doc);\n      }\n      \n      try {\n        assertEquals(expected, actual);\n      } catch (AssertionError e) {\n        System.out.println(\"center: (\" + lat + \",\" + lon + \"), radius=\" + radius);\n        for (int doc = 0; doc < reader.maxDoc(); doc++) {\n          double docLatitude = reader.document(doc).getField(\"lat\").numericValue().doubleValue();\n          double docLongitude = reader.document(doc).getField(\"lon\").numericValue().doubleValue();\n          double distance = SloppyMath.haversinMeters(lat, lon, docLatitude, docLongitude);\n          System.out.println(\"\" + doc + \": (\" + docLatitude + \",\" + docLongitude + \"), distance=\" + distance);\n        }\n        throw e;\n      }\n    }\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c1079b0e8cc08b4c818211a4fa79d31f0c66ba9":["d6c59bc551f4e523ce6a321280cc6733424fb824"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b9e52892242a8c82e1b0c1bd4f1d404366b0501c":["6c1079b0e8cc08b4c818211a4fa79d31f0c66ba9"],"3c5537ea5dd595f2987618e9086f4fae5736a8dc":["b9e52892242a8c82e1b0c1bd4f1d404366b0501c"],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["3c5537ea5dd595f2987618e9086f4fae5736a8dc"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["3c5537ea5dd595f2987618e9086f4fae5736a8dc","3e21d7642ee7e0c00429964e5b47504602fe218c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"d6c59bc551f4e523ce6a321280cc6733424fb824":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"]},"commit2Childs":{"6c1079b0e8cc08b4c818211a4fa79d31f0c66ba9":["b9e52892242a8c82e1b0c1bd4f1d404366b0501c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb4875e9db9b77346c36b7fe0d4b8759a1e095d3"],"b9e52892242a8c82e1b0c1bd4f1d404366b0501c":["3c5537ea5dd595f2987618e9086f4fae5736a8dc"],"3c5537ea5dd595f2987618e9086f4fae5736a8dc":["3e21d7642ee7e0c00429964e5b47504602fe218c","f8cb57c50beb99a1245256e866350af8e5ea1f36"],"cb4875e9db9b77346c36b7fe0d4b8759a1e095d3":["d6c59bc551f4e523ce6a321280cc6733424fb824"],"3e21d7642ee7e0c00429964e5b47504602fe218c":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6c59bc551f4e523ce6a321280cc6733424fb824":["6c1079b0e8cc08b4c818211a4fa79d31f0c66ba9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}