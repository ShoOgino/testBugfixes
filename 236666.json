{"path":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#waitForNewSearcher(int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#waitForNewSearcher(int).mjava","pathOld":"solr/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#waitForNewSearcher(int).mjava","sourceNew":"  boolean waitForNewSearcher(int timeout) {\n    long timeoutTime = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutTime) {\n      if (triggered) {\n        return true;\n      }\n      \n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {}\n      \n    }\n    return false;\n  }\n\n","sourceOld":"  boolean waitForNewSearcher(int timeout) {\n    long timeoutTime = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutTime) {\n      if (triggered) {\n        return true;\n      }\n      \n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {}\n      \n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#waitForNewSearcher(int).mjava","pathOld":"solr/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#waitForNewSearcher(int).mjava","sourceNew":"  boolean waitForNewSearcher(int timeout) {\n    long timeoutTime = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutTime) {\n      if (triggered) {\n        return true;\n      }\n      \n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {}\n      \n    }\n    return false;\n  }\n\n","sourceOld":"  boolean waitForNewSearcher(int timeout) {\n    long timeoutTime = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutTime) {\n      if (triggered) {\n        return true;\n      }\n      \n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {}\n      \n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#waitForNewSearcher(int).mjava","pathOld":"solr/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#waitForNewSearcher(int).mjava","sourceNew":"  boolean waitForNewSearcher(int timeout) {\n    long timeoutTime = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutTime) {\n      if (triggered) {\n        return true;\n      }\n      \n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {}\n      \n    }\n    return false;\n  }\n\n","sourceOld":"  boolean waitForNewSearcher(int timeout) {\n    long timeoutTime = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutTime) {\n      if (triggered) {\n        return true;\n      }\n      \n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {}\n      \n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b0203706833d89696e68ebfc15ecdc12ff58acd","date":1315510060,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#waitForNewSearcher(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#waitForNewSearcher(int).mjava","sourceNew":"  boolean waitForNewSearcher(int timeout) {\n    long timeoutTime = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutTime) {\n      if (triggered) {\n        // check if the new searcher has been registered yet\n        RefCounted<SolrIndexSearcher> registeredSearcherH = newSearcher.getCore().getSearcher();\n        SolrIndexSearcher registeredSearcher = registeredSearcherH.get();\n        registeredSearcherH.decref();\n        if (registeredSearcher == newSearcher) return true;\n        // log.info(\"TEST: waiting for searcher \" + newSearcher + \" to be registered.  current=\" + registeredSearcher);\n      }\n\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {}\n\n    }\n    return false;\n  }\n\n","sourceOld":"  boolean waitForNewSearcher(int timeout) {\n    long timeoutTime = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutTime) {\n      if (triggered) {\n        return true;\n      }\n      \n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {}\n      \n    }\n    return false;\n  }\n\n","bugFix":["7a71a0b2d4be2299a163f60626729852d81a8e02"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#waitForNewSearcher(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#waitForNewSearcher(int).mjava","sourceNew":"  boolean waitForNewSearcher(int timeoutMs) {\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS);\n    while (! timeout.hasTimedOut()) {\n      if (triggered) {\n        // check if the new searcher has been registered yet\n        RefCounted<SolrIndexSearcher> registeredSearcherH = newSearcher.getCore().getSearcher();\n        SolrIndexSearcher registeredSearcher = registeredSearcherH.get();\n        registeredSearcherH.decref();\n        if (registeredSearcher == newSearcher) return true;\n        // log.info(\"TEST: waiting for searcher \" + newSearcher + \" to be registered.  current=\" + registeredSearcher);\n      }\n\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {}\n\n    }\n    return false;\n  }\n\n","sourceOld":"  boolean waitForNewSearcher(int timeout) {\n    long timeoutTime = System.currentTimeMillis() + timeout;\n    while (System.currentTimeMillis() < timeoutTime) {\n      if (triggered) {\n        // check if the new searcher has been registered yet\n        RefCounted<SolrIndexSearcher> registeredSearcherH = newSearcher.getCore().getSearcher();\n        SolrIndexSearcher registeredSearcher = registeredSearcherH.get();\n        registeredSearcherH.decref();\n        if (registeredSearcher == newSearcher) return true;\n        // log.info(\"TEST: waiting for searcher \" + newSearcher + \" to be registered.  current=\" + registeredSearcher);\n      }\n\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {}\n\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff7024b6ebcfb64924eed7543a71a1cbd1e7466c","date":1508275071,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/update/NewSearcherListener[AutoCommitTest]#waitForNewSearcher(int).mjava","sourceNew":null,"sourceOld":"  boolean waitForNewSearcher(int timeoutMs) {\n    TimeOut timeout = new TimeOut(timeoutMs, TimeUnit.MILLISECONDS);\n    while (! timeout.hasTimedOut()) {\n      if (triggered) {\n        // check if the new searcher has been registered yet\n        RefCounted<SolrIndexSearcher> registeredSearcherH = newSearcher.getCore().getSearcher();\n        SolrIndexSearcher registeredSearcher = registeredSearcherH.get();\n        registeredSearcherH.decref();\n        if (registeredSearcher == newSearcher) return true;\n        // log.info(\"TEST: waiting for searcher \" + newSearcher + \" to be registered.  current=\" + registeredSearcher);\n      }\n\n      try {\n        Thread.sleep(250);\n      } catch (InterruptedException e) {}\n\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4b0203706833d89696e68ebfc15ecdc12ff58acd":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff7024b6ebcfb64924eed7543a71a1cbd1e7466c":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["4b0203706833d89696e68ebfc15ecdc12ff58acd"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff7024b6ebcfb64924eed7543a71a1cbd1e7466c"]},"commit2Childs":{"4b0203706833d89696e68ebfc15ecdc12ff58acd":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["4b0203706833d89696e68ebfc15ecdc12ff58acd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ff7024b6ebcfb64924eed7543a71a1cbd1e7466c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["ff7024b6ebcfb64924eed7543a71a1cbd1e7466c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}