{"path":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#expandSingleton().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#expandSingleton().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Expands singleton representation to normal representation. Does nothing if\n   * not in singleton representation.\n   */\n  public void expandSingleton() {\n    if (isSingleton()) {\n      State p = new State();\n      initial = p;\n      for (int i = 0; i < singleton.length(); i++) {\n        State q = new State();\n        p.transitions.add(new Transition(singleton.charAt(i), q));\n        p = q;\n      }\n      p.accept = true;\n      deterministic = true;\n      singleton = null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#expandSingleton().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#expandSingleton().mjava","sourceNew":"  /**\n   * Expands singleton representation to normal representation. Does nothing if\n   * not in singleton representation.\n   */\n  public void expandSingleton() {\n    if (isSingleton()) {\n      State p = new State();\n      initial = p;\n      for (int i = 0, cp = 0; i < singleton.length(); i += Character.charCount(cp)) {\n        State q = new State();\n        p.addTransition(new Transition(cp = singleton.codePointAt(i), q));\n        p = q;\n      }\n      p.accept = true;\n      deterministic = true;\n      singleton = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Expands singleton representation to normal representation. Does nothing if\n   * not in singleton representation.\n   */\n  public void expandSingleton() {\n    if (isSingleton()) {\n      State p = new State();\n      initial = p;\n      for (int i = 0; i < singleton.length(); i++) {\n        State q = new State();\n        p.transitions.add(new Transition(singleton.charAt(i), q));\n        p = q;\n      }\n      p.accept = true;\n      deterministic = true;\n      singleton = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#expandSingleton().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#expandSingleton().mjava","sourceNew":"  /**\n   * Expands singleton representation to normal representation. Does nothing if\n   * not in singleton representation.\n   */\n  public void expandSingleton() {\n    if (isSingleton()) {\n      State p = new State();\n      initial = p;\n      for (int i = 0, cp = 0; i < singleton.length(); i += Character.charCount(cp)) {\n        State q = new State();\n        p.addTransition(new Transition(cp = singleton.codePointAt(i), q));\n        p = q;\n      }\n      p.accept = true;\n      deterministic = true;\n      singleton = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Expands singleton representation to normal representation. Does nothing if\n   * not in singleton representation.\n   */\n  public void expandSingleton() {\n    if (isSingleton()) {\n      State p = new State();\n      initial = p;\n      for (int i = 0, cp = 0; i < singleton.length(); i += Character.charCount(cp)) {\n        State q = new State();\n        p.addTransition(new Transition(cp = singleton.codePointAt(i), q));\n        p = q;\n      }\n      p.accept = true;\n      deterministic = true;\n      singleton = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}