{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerExplain().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerExplain().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerExplain().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerExplain() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Explanation e = searcher.explain(q, 1);\n    assertTrue(\"Scorer explanation value for doc#1 isn't positive: \"\n               + e.toString(),\n               0.0f < e.getValue());\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerExplain() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Explanation e = searcher.explain(q, 1);\n    assertTrue(\"Scorer explanation value for doc#1 isn't positive: \"\n               + e.toString(),\n               0.0f < e.getValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55141aa2d03c0d11bda38225247b4dec079de2eb","date":1453160801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerExplain().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerExplain().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerExplain() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Explanation e = searcher.explain(q, 1);\n    assertTrue(\"Scorer explanation value for doc#1 isn't positive: \"\n               + e.toString(),\n               0.0f <= e.getValue());\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerExplain() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Explanation e = searcher.explain(q, 1);\n    assertTrue(\"Scorer explanation value for doc#1 isn't positive: \"\n               + e.toString(),\n               0.0f < e.getValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerExplain().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerExplain().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerExplain() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Explanation e = searcher.explain(q, 1);\n    assertTrue(\"Scorer explanation value for doc#1 isn't positive: \"\n               + e.toString(),\n               0.0f <= e.getValue().doubleValue());\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerExplain() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Explanation e = searcher.explain(q, 1);\n    assertTrue(\"Scorer explanation value for doc#1 isn't positive: \"\n               + e.toString(),\n               0.0f <= e.getValue());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["55141aa2d03c0d11bda38225247b4dec079de2eb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"55141aa2d03c0d11bda38225247b4dec079de2eb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"]},"commit2Childs":{"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["55141aa2d03c0d11bda38225247b4dec079de2eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"55141aa2d03c0d11bda38225247b4dec079de2eb":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}