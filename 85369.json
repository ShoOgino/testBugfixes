{"path":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector#TermFirstPassGroupingCollector(String,Sort,int).mjava","commits":[{"id":"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00","date":1317931776,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector#TermFirstPassGroupingCollector(String,Sort,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/TermFirstPassGroupingCollector#TermFirstPassGroupingCollector(String,Sort,int).mjava","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (FieldCache is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException When I/O related errors occur\n   */\n  public TermFirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupField = groupField;\n  }\n\n","sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (FieldCache is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException When I/O related errors occur\n   */\n  public TermFirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupField = groupField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector#TermFirstPassGroupingCollector(String,Sort,int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/term/TermFirstPassGroupingCollector#TermFirstPassGroupingCollector(String,Sort,int).mjava","sourceNew":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (FieldCache is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException When I/O related errors occur\n   */\n  public TermFirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupField = groupField;\n  }\n\n","sourceOld":"  /**\n   * Create the first pass collector.\n   *\n   *  @param groupField The field used to group\n   *    documents. This field must be single-valued and\n   *    indexed (FieldCache is used to access its value\n   *    per-document).\n   *  @param groupSort The {@link Sort} used to sort the\n   *    groups.  The top sorted document within each group\n   *    according to groupSort, determines how that group\n   *    sorts against other groups.  This must be non-null,\n   *    ie, if you want to groupSort by relevance use\n   *    Sort.RELEVANCE.\n   *  @param topNGroups How many top groups to keep.\n   *  @throws IOException When I/O related errors occur\n   */\n  public TermFirstPassGroupingCollector(String groupField, Sort groupSort, int topNGroups) throws IOException {\n    super(groupSort, topNGroups);\n    this.groupField = groupField;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00"],"8b48c85d1bf438ef65fbc1abe44f4e2c04a43e00":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}