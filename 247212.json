{"path":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#findReplace(byte[],byte[],byte[]).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#findReplace(byte[],byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  // NOTE: replacement must currently be same size\n  private static void findReplace(byte[] from, byte[] to, byte[] data) {\n    int idx = -from.length;\n    for(;;) {\n      idx = indexOf(from, data, idx + from.length);  // skip over previous match\n      if (idx < 0) break;\n      for (int i=0; i<to.length; i++) {\n        data[idx+i] = to[i];\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#findReplace(byte[],byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  // NOTE: replacement must currently be same size\n  private static void findReplace(byte[] from, byte[] to, byte[] data) {\n    int idx = -from.length;\n    for(;;) {\n      idx = indexOf(from, data, idx + from.length);  // skip over previous match\n      if (idx < 0) break;\n      for (int i=0; i<to.length; i++) {\n        data[idx+i] = to[i];\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add53de9835b2cd1a7a80b4e0036afee171c9fdf","date":1552937136,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#findReplace(byte[],byte[],byte[]).mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestRecoveryHdfs#findReplace(byte[],byte[],byte[]).mjava","sourceNew":"  // NOTE: replacement must currently be same size\n  private static void findReplace(byte[] from, byte[] to, byte[] data) {\n    int idx = -from.length;\n    for(;;) {\n      idx = indexOf(from, data, idx + from.length);  // skip over previous match\n      if (idx < 0) break;\n      System.arraycopy(to, 0, data, idx, to.length);\n    }\n  }\n\n","sourceOld":"  // NOTE: replacement must currently be same size\n  private static void findReplace(byte[] from, byte[] to, byte[] data) {\n    int idx = -from.length;\n    for(;;) {\n      idx = indexOf(from, data, idx + from.length);  // skip over previous match\n      if (idx < 0) break;\n      for (int i=0; i<to.length; i++) {\n        data[idx+i] = to[i];\n      }\n    }\n  }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["849494cf2f3a96af5c8c84995108ddd8456fcd04"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","add53de9835b2cd1a7a80b4e0036afee171c9fdf"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"add53de9835b2cd1a7a80b4e0036afee171c9fdf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}