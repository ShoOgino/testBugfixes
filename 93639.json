{"path":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","sourceNew":"  /** Determine the current document score.  Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return the score of the current generated document\n   */\n  @Override\n  public float score() throws IOException {\n    int doc = subScorers[0].docID();\n    float[] sum = { subScorers[0].score() }, max = { sum[0] };\n    int size = numScorers;\n    scoreAll(1, size, doc, sum, max);\n    scoreAll(2, size, doc, sum, max);\n    return max[0] + (sum[0] - max[0]) * tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /** Determine the current document score.  Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return the score of the current generated document\n   */\n  @Override\n  public float score() throws IOException {\n    int doc = subScorers[0].docID();\n    float[] sum = { subScorers[0].score() }, max = { sum[0] };\n    int size = numScorers;\n    scoreAll(1, size, doc, sum, max);\n    scoreAll(2, size, doc, sum, max);\n    return max[0] + (sum[0] - max[0]) * tieBreakerMultiplier;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf997b9c86cc024469d4250989553f2ac5970cd9","date":1286803520,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","sourceNew":"  /** Determine the current document score.  Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return the score of the current generated document\n   */\n  @Override\n  public float score() throws IOException {\n    int doc = subScorers[0].docID();\n    scoreSum = scoreMax = subScorers[0].score();\n    int size = numScorers;\n    scoreAll(1, size, doc);\n    scoreAll(2, size, doc);\n    return scoreMax + (scoreSum - scoreMax) * tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /** Determine the current document score.  Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return the score of the current generated document\n   */\n  @Override\n  public float score() throws IOException {\n    int doc = subScorers[0].docID();\n    float[] sum = { subScorers[0].score() }, max = { sum[0] };\n    int size = numScorers;\n    scoreAll(1, size, doc, sum, max);\n    scoreAll(2, size, doc, sum, max);\n    return max[0] + (sum[0] - max[0]) * tieBreakerMultiplier;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","sourceNew":"  /** Determine the current document score.  Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return the score of the current generated document\n   */\n  @Override\n  public float score() throws IOException {\n    int doc = subScorers[0].docID();\n    scoreSum = scoreMax = subScorers[0].score();\n    int size = numScorers;\n    scoreAll(1, size, doc);\n    scoreAll(2, size, doc);\n    return scoreMax + (scoreSum - scoreMax) * tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /** Determine the current document score.  Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return the score of the current generated document\n   */\n  @Override\n  public float score() throws IOException {\n    int doc = subScorers[0].docID();\n    float[] sum = { subScorers[0].score() }, max = { sum[0] };\n    int size = numScorers;\n    scoreAll(1, size, doc, sum, max);\n    scoreAll(2, size, doc, sum, max);\n    return max[0] + (sum[0] - max[0]) * tieBreakerMultiplier;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#score().mjava","sourceNew":"  /** Determine the current document score.  Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return the score of the current generated document\n   */\n  @Override\n  public float score() throws IOException {\n    int doc = subScorers[0].docID();\n    scoreSum = scoreMax = subScorers[0].score();\n    int size = numScorers;\n    scoreAll(1, size, doc);\n    scoreAll(2, size, doc);\n    return scoreMax + (scoreSum - scoreMax) * tieBreakerMultiplier;\n  }\n\n","sourceOld":"  /** Determine the current document score.  Initially invalid, until {@link #nextDoc()} is called the first time.\n   * @return the score of the current generated document\n   */\n  @Override\n  public float score() throws IOException {\n    int doc = subScorers[0].docID();\n    scoreSum = scoreMax = subScorers[0].score();\n    int size = numScorers;\n    scoreAll(1, size, doc);\n    scoreAll(2, size, doc);\n    return scoreMax + (scoreSum - scoreMax) * tieBreakerMultiplier;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cf997b9c86cc024469d4250989553f2ac5970cd9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","cf997b9c86cc024469d4250989553f2ac5970cd9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cf997b9c86cc024469d4250989553f2ac5970cd9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cf997b9c86cc024469d4250989553f2ac5970cd9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cf997b9c86cc024469d4250989553f2ac5970cd9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}