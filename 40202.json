{"path":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that getParentArrays is valid when retrieved during refresh\n   */\n  @Test\n  @Ignore\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase =  new RAMDirectory();\n    TaxonomyWriter twBase = new LuceneTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new LuceneTaxonomyReader(indexDirBase);\n\n    final ChildrenArrays ca1 = trBase.getChildrenArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.getYoungestChildArray()[abOrd]; \n    \n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.commit();\n    \n    trBase.refresh();\n    \n    final ChildrenArrays ca2 = trBase.getChildrenArrays();\n    final int abYoungChildBase2 = ca2.getYoungestChildArray()[abOrd];\n    \n    for (int retry=0; retry<100; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1,  abYoungChildBase2, retry);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","sourceNew":"  /**\n   * Test that getParentArrays is valid when retrieved during refresh\n   */\n  @Test\n  @Ignore\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase =  newDirectory();\n    TaxonomyWriter twBase = new LuceneTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new LuceneTaxonomyReader(indexDirBase);\n\n    final ChildrenArrays ca1 = trBase.getChildrenArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.getYoungestChildArray()[abOrd]; \n    \n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.commit();\n    \n    trBase.refresh();\n    \n    final ChildrenArrays ca2 = trBase.getChildrenArrays();\n    final int abYoungChildBase2 = ca2.getYoungestChildArray()[abOrd];\n    \n    for (int retry=0; retry<100; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1,  abYoungChildBase2, retry);\n    }\n    indexDirBase.close();\n  }\n\n","sourceOld":"  /**\n   * Test that getParentArrays is valid when retrieved during refresh\n   */\n  @Test\n  @Ignore\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase =  new RAMDirectory();\n    TaxonomyWriter twBase = new LuceneTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new LuceneTaxonomyReader(indexDirBase);\n\n    final ChildrenArrays ca1 = trBase.getChildrenArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.getYoungestChildArray()[abOrd]; \n    \n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.commit();\n    \n    trBase.refresh();\n    \n    final ChildrenArrays ca2 = trBase.getChildrenArrays();\n    final int abYoungChildBase2 = ca2.getYoungestChildArray()[abOrd];\n    \n    for (int retry=0; retry<100; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1,  abYoungChildBase2, retry);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that getParentArrays is valid when retrieved during refresh\n   */\n  @Test\n  @Ignore\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase =  newDirectory();\n    TaxonomyWriter twBase = new LuceneTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new LuceneTaxonomyReader(indexDirBase);\n\n    final ChildrenArrays ca1 = trBase.getChildrenArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.getYoungestChildArray()[abOrd]; \n    \n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.commit();\n    \n    trBase.refresh();\n    \n    final ChildrenArrays ca2 = trBase.getChildrenArrays();\n    final int abYoungChildBase2 = ca2.getYoungestChildArray()[abOrd];\n    \n    for (int retry=0; retry<100; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1,  abYoungChildBase2, retry);\n    }\n    indexDirBase.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that getParentArrays is valid when retrieved during refresh\n   */\n  @Test\n  @Ignore\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase =  newDirectory();\n    TaxonomyWriter twBase = new LuceneTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new LuceneTaxonomyReader(indexDirBase);\n\n    final ChildrenArrays ca1 = trBase.getChildrenArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.getYoungestChildArray()[abOrd]; \n    \n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.commit();\n    \n    trBase.refresh();\n    \n    final ChildrenArrays ca2 = trBase.getChildrenArrays();\n    final int abYoungChildBase2 = ca2.getYoungestChildArray()[abOrd];\n    \n    for (int retry=0; retry<100; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1,  abYoungChildBase2, retry);\n    }\n    indexDirBase.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","sourceNew":"  /**\n   * Test that getParentArrays is valid when retrieved during refresh\n   */\n  @Test\n  @Ignore\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase =  newDirectory();\n    TaxonomyWriter twBase = new DirectoryTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new DirectoryTaxonomyReader(indexDirBase);\n\n    final ChildrenArrays ca1 = trBase.getChildrenArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.getYoungestChildArray()[abOrd]; \n    \n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.commit();\n    \n    trBase.refresh();\n    \n    final ChildrenArrays ca2 = trBase.getChildrenArrays();\n    final int abYoungChildBase2 = ca2.getYoungestChildArray()[abOrd];\n    \n    for (int retry=0; retry<100; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1,  abYoungChildBase2, retry);\n    }\n    indexDirBase.close();\n  }\n\n","sourceOld":"  /**\n   * Test that getParentArrays is valid when retrieved during refresh\n   */\n  @Test\n  @Ignore\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase =  newDirectory();\n    TaxonomyWriter twBase = new LuceneTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new LuceneTaxonomyReader(indexDirBase);\n\n    final ChildrenArrays ca1 = trBase.getChildrenArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.getYoungestChildArray()[abOrd]; \n    \n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.commit();\n    \n    trBase.refresh();\n    \n    final ChildrenArrays ca2 = trBase.getChildrenArrays();\n    final int abYoungChildBase2 = ca2.getYoungestChildArray()[abOrd];\n    \n    for (int retry=0; retry<100; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1,  abYoungChildBase2, retry);\n    }\n    indexDirBase.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#testTaxonomyReaderRefreshRaces().mjava","sourceNew":"  /**\n   * Test that getParentArrays is valid when retrieved during refresh\n   */\n  @Test\n  @Ignore\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase =  newDirectory();\n    TaxonomyWriter twBase = new DirectoryTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new DirectoryTaxonomyReader(indexDirBase);\n\n    final ChildrenArrays ca1 = trBase.getChildrenArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.getYoungestChildArray()[abOrd]; \n    \n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.commit();\n    \n    trBase.refresh();\n    \n    final ChildrenArrays ca2 = trBase.getChildrenArrays();\n    final int abYoungChildBase2 = ca2.getYoungestChildArray()[abOrd];\n    \n    for (int retry=0; retry<100; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1,  abYoungChildBase2, retry);\n    }\n    indexDirBase.close();\n  }\n\n","sourceOld":"  /**\n   * Test that getParentArrays is valid when retrieved during refresh\n   */\n  @Test\n  @Ignore\n  public void testTaxonomyReaderRefreshRaces() throws Exception {\n    // compute base child arrays - after first chunk, and after the other\n    Directory indexDirBase =  newDirectory();\n    TaxonomyWriter twBase = new DirectoryTaxonomyWriter(indexDirBase);\n    twBase.addCategory(new CategoryPath(\"a\", \"0\"));\n    final CategoryPath abPath = new CategoryPath(\"a\", \"b\");\n    twBase.addCategory(abPath);\n    twBase.commit();\n    TaxonomyReader trBase = new DirectoryTaxonomyReader(indexDirBase);\n\n    final ChildrenArrays ca1 = trBase.getChildrenArrays();\n    \n    final int abOrd = trBase.getOrdinal(abPath);\n    final int abYoungChildBase1 = ca1.getYoungestChildArray()[abOrd]; \n    \n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      twBase.addCategory(new CategoryPath(\"a\", \"b\", Integer.toString(i)));\n    }\n    twBase.commit();\n    \n    trBase.refresh();\n    \n    final ChildrenArrays ca2 = trBase.getChildrenArrays();\n    final int abYoungChildBase2 = ca2.getYoungestChildArray()[abOrd];\n    \n    for (int retry=0; retry<100; retry++) {\n      assertConsistentYoungestChild(abPath, abOrd, abYoungChildBase1,  abYoungChildBase2, retry);\n    }\n    indexDirBase.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}