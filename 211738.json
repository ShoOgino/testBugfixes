{"path":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns an IndexReader reading the index in an FSDirectory in the named\n  path. */\n  public static IndexReader open(File path) throws IOException {\n    return open(FSDirectory.getDirectory(path, false));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","sourceNew":"  /** Returns an IndexReader reading the index in an FSDirectory in the named\n   path. */\n  public static IndexReader open(File path) throws IOException {\n    return open(FSDirectory.getDirectory(path, false));\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in an FSDirectory in the named\n  path. */\n  public static IndexReader open(File path) throws IOException {\n    return open(FSDirectory.getDirectory(path, false));\n  }\n\n","bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f653aecb322b74d99e6ecdb93765e453a3d7aa71","date":1082107025,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","sourceNew":"  /** Returns an IndexReader reading the index in an FSDirectory in the named\n   path. */\n  public static IndexReader open(File path) throws IOException {\n    return open(FSDirectory.getDirectory(path, false), true);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in an FSDirectory in the named\n   path. */\n  public static IndexReader open(File path) throws IOException {\n    return open(FSDirectory.getDirectory(path, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","sourceNew":"  /** Returns an IndexReader reading the index in an FSDirectory in the named\n   path. */\n  public static IndexReader open(File path) throws IOException {\n    return open(FSDirectory.getDirectory(path), true);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in an FSDirectory in the named\n   path. */\n  public static IndexReader open(File path) throws IOException {\n    return open(FSDirectory.getDirectory(path, false), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","sourceNew":"  /** Returns an IndexReader reading the index in an FSDirectory in the named\n   path.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n  */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in an FSDirectory in the named\n   path. */\n  public static IndexReader open(File path) throws IOException {\n    return open(FSDirectory.getDirectory(path), true);\n  }\n\n","bugFix":["91109046a59c58ee0ee5d0d2767b08d1f30d6702","770281b8a8459cafcdd2354b6a06078fea2d83c9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","sourceNew":"  /** Returns an IndexReader reading the index in an FSDirectory in the named\n   * path.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path the path to the index directory */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in an FSDirectory in the named\n   path.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n  */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true);\n  }\n\n","bugFix":null,"bugIntro":["de22c0c6b3dde31afbdade8602e737031c76cf8f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de22c0c6b3dde31afbdade8602e737031c76cf8f","date":1180732736,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","sourceNew":"  /** Returns an IndexReader reading the index in an FSDirectory in the named\n   * path.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in an FSDirectory in the named\n   * path.\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @param path the path to the index directory */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null);\n  }\n\n","bugFix":["8b6187898fc4413ccd18229711786550a280383c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac785906c92e4048ffc28f7c23a45541d3cca9bf","date":1214322066,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","sourceNew":"  /** Returns an IndexReader reading the index in an FSDirectory in the named\n   * path.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null, null);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in an FSDirectory in the named\n   * path.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5712975970a595c28f1988efd007e1b8a617a92f","date":1219499238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","sourceNew":"  /** Returns a read/write IndexReader reading the index in an FSDirectory in the named\n   * path.  <b>NOTE</b>: starting in 3.0 this will return a readOnly IndexReader.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null, null, READ_ONLY_DEFAULT);\n  }\n\n","sourceOld":"  /** Returns an IndexReader reading the index in an FSDirectory in the named\n   * path.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dabcca520e81aeff96f5c937b7ffb5617ee69d1","date":1243458018,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","sourceNew":"  /** Returns a read/write IndexReader reading the index in an FSDirectory in the named\n   *  path.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #open(File, boolean)} instead\n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null, null, false);\n  }\n\n","sourceOld":"  /** Returns a read/write IndexReader reading the index in an FSDirectory in the named\n   * path.  <b>NOTE</b>: starting in 3.0 this will return a readOnly IndexReader.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null, null, READ_ONLY_DEFAULT);\n  }\n\n","bugFix":null,"bugIntro":["f658c721de6fbc0c439a5288182c4a6bb53ac21b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f658c721de6fbc0c439a5288182c4a6bb53ac21b","date":1244025537,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","sourceNew":"  /** Returns a read/write IndexReader reading the index in an FSDirectory in the named\n   *  path.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null, null, false);\n  }\n\n","sourceOld":"  /** Returns a read/write IndexReader reading the index in an FSDirectory in the named\n   *  path.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #open(File, boolean)} instead\n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null, null, false);\n  }\n\n","bugFix":["0dabcca520e81aeff96f5c937b7ffb5617ee69d1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba712167ee848727018d8b77aa0c273839fbe15c","date":1244411561,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","sourceNew":"  /** Returns a read/write IndexReader reading the index in an FSDirectory in the named\n   *  path.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null, null, false);\n  }\n\n","sourceOld":"  /** Returns a read/write IndexReader reading the index in an FSDirectory in the named\n   *  path.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null, null, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e54e4a9a2442944e55f58e835877841cdac1271","date":1244628560,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","sourceNew":"  /** Returns a read/write IndexReader reading the index in an FSDirectory in the named\n   *  path.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return new DirectoryOwningReader(open(FSDirectory.getDirectory(path), null, null, false));\n  }\n\n","sourceOld":"  /** Returns a read/write IndexReader reading the index in an FSDirectory in the named\n   *  path.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(FSDirectory.getDirectory(path), true, null, null, false);\n  }\n\n","bugFix":null,"bugIntro":["73bc1851682757b5184768cbdf6de3f4f5a5f432"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73bc1851682757b5184768cbdf6de3f4f5a5f432","date":1244636487,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","sourceNew":"  /** Returns a read/write IndexReader reading the index in an FSDirectory in the named\n   *  path.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(path, false);\n  }\n\n","sourceOld":"  /** Returns a read/write IndexReader reading the index in an FSDirectory in the named\n   *  path.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return new DirectoryOwningReader(open(FSDirectory.getDirectory(path), null, null, false));\n  }\n\n","bugFix":["4e54e4a9a2442944e55f58e835877841cdac1271"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"082ab1b8bb93767e8e870fda3638b79d67035d3f","date":1251223359,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","sourceNew":"  /** Returns a read/write IndexReader reading the index in an FSDirectory in the named\n   *  path.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #open(Directory, boolean)} instead.\n   *             This method will be removed in the 3.0 release.\n   * \n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(path, false);\n  }\n\n","sourceOld":"  /** Returns a read/write IndexReader reading the index in an FSDirectory in the named\n   *  path.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #open(Directory, boolean)} instead\n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(path, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexReader#open(File).mjava","sourceNew":null,"sourceOld":"  /** Returns a read/write IndexReader reading the index in an FSDirectory in the named\n   *  path.\n   * @param path the path to the index directory\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #open(Directory, boolean)} instead.\n   *             This method will be removed in the 3.0 release.\n   * \n   */\n  public static IndexReader open(File path) throws CorruptIndexException, IOException {\n    return open(path, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["082ab1b8bb93767e8e870fda3638b79d67035d3f"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5712975970a595c28f1988efd007e1b8a617a92f":["ac785906c92e4048ffc28f7c23a45541d3cca9bf"],"082ab1b8bb93767e8e870fda3638b79d67035d3f":["73bc1851682757b5184768cbdf6de3f4f5a5f432"],"1b54a9bc667895a2095a886184bf69a3179e63df":["66b12ba4967665216eeb706b58d424c51fb3641a"],"4e54e4a9a2442944e55f58e835877841cdac1271":["ba712167ee848727018d8b77aa0c273839fbe15c"],"de22c0c6b3dde31afbdade8602e737031c76cf8f":["8b6187898fc4413ccd18229711786550a280383c"],"0dabcca520e81aeff96f5c937b7ffb5617ee69d1":["5712975970a595c28f1988efd007e1b8a617a92f"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"ba712167ee848727018d8b77aa0c273839fbe15c":["f658c721de6fbc0c439a5288182c4a6bb53ac21b"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"66b12ba4967665216eeb706b58d424c51fb3641a":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f658c721de6fbc0c439a5288182c4a6bb53ac21b":["0dabcca520e81aeff96f5c937b7ffb5617ee69d1"],"8b6187898fc4413ccd18229711786550a280383c":["1b54a9bc667895a2095a886184bf69a3179e63df"],"73bc1851682757b5184768cbdf6de3f4f5a5f432":["4e54e4a9a2442944e55f58e835877841cdac1271"],"ac785906c92e4048ffc28f7c23a45541d3cca9bf":["de22c0c6b3dde31afbdade8602e737031c76cf8f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"5712975970a595c28f1988efd007e1b8a617a92f":["0dabcca520e81aeff96f5c937b7ffb5617ee69d1"],"082ab1b8bb93767e8e870fda3638b79d67035d3f":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"1b54a9bc667895a2095a886184bf69a3179e63df":["8b6187898fc4413ccd18229711786550a280383c"],"4e54e4a9a2442944e55f58e835877841cdac1271":["73bc1851682757b5184768cbdf6de3f4f5a5f432"],"de22c0c6b3dde31afbdade8602e737031c76cf8f":["ac785906c92e4048ffc28f7c23a45541d3cca9bf"],"0dabcca520e81aeff96f5c937b7ffb5617ee69d1":["f658c721de6fbc0c439a5288182c4a6bb53ac21b"],"f653aecb322b74d99e6ecdb93765e453a3d7aa71":["66b12ba4967665216eeb706b58d424c51fb3641a"],"ba712167ee848727018d8b77aa0c273839fbe15c":["4e54e4a9a2442944e55f58e835877841cdac1271"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["f653aecb322b74d99e6ecdb93765e453a3d7aa71"],"66b12ba4967665216eeb706b58d424c51fb3641a":["1b54a9bc667895a2095a886184bf69a3179e63df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"8b6187898fc4413ccd18229711786550a280383c":["de22c0c6b3dde31afbdade8602e737031c76cf8f"],"f658c721de6fbc0c439a5288182c4a6bb53ac21b":["ba712167ee848727018d8b77aa0c273839fbe15c"],"73bc1851682757b5184768cbdf6de3f4f5a5f432":["082ab1b8bb93767e8e870fda3638b79d67035d3f"],"ac785906c92e4048ffc28f7c23a45541d3cca9bf":["5712975970a595c28f1988efd007e1b8a617a92f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}