{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat#[T]_checkIterator(Iterator[T],long,boolean).mjava","commits":[{"id":"d12774649e77a6efccc3502c735c2893b52af6d6","date":1376964312,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat#[T]_checkIterator(Iterator[T],long,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      try {\n        iterator.remove();\n        throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n      } catch (UnsupportedOperationException expected) {\n        // ok\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat#[T]_checkIterator(Iterator[T],long,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      try {\n        iterator.remove();\n        throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n      } catch (UnsupportedOperationException expected) {\n        // ok\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat#[T]_checkIterator(Iterator[T],long,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      try {\n        iterator.remove();\n        throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n      } catch (UnsupportedOperationException expected) {\n        // ok\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat#[T]_checkIterator(Iterator[T],long,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat#[T]_checkIterator(Iterator[T],long,boolean).mjava","sourceNew":"  static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      try {\n        iterator.remove();\n        throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n      } catch (UnsupportedOperationException expected) {\n        // ok\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","sourceOld":"  private static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      try {\n        iterator.remove();\n        throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n      } catch (UnsupportedOperationException expected) {\n        // ok\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#[T]_checkIterator(Iterator[T]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat#[T]_checkIterator(Iterator[T],long,boolean).mjava","sourceNew":"  /** \n   * Checks that the provided iterator is well-formed.\n   * <ul>\n   *   <li>is read-only: does not allow {@code remove}\n   *   <li>does not return null elements.\n   *   <li>throws NoSuchElementException if {@code next} is called\n   *       after {@code hasNext} returns false. \n   * </ul>\n   */\n  public static <T> void checkIterator(Iterator<T> iterator) {\n    while (iterator.hasNext()) {\n      T v = iterator.next();\n      assert v != null;\n      try {\n        iterator.remove();\n        throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n      } catch (UnsupportedOperationException expected) {\n        // ok\n      }\n    }\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","sourceOld":"  static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      try {\n        iterator.remove();\n        throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n      } catch (UnsupportedOperationException expected) {\n        // ok\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":["de43294c430a8d5ff73e51951f99d4df405ab9c6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#[T]_checkIterator(Iterator[T],long,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat#[T]_checkIterator(Iterator[T],long,boolean).mjava","sourceNew":"  /** \n   * Checks that the provided iterator is well-formed.\n   * <ul>\n   *   <li>is read-only: does not allow {@code remove}\n   *   <li>returns {@code expectedSize} number of elements\n   *   <li>does not return null elements, unless {@code allowNull} is true.\n   *   <li>throws NoSuchElementException if {@code next} is called\n   *       after {@code hasNext} returns false. \n   * </ul>\n   */\n  public static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      try {\n        iterator.remove();\n        throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n      } catch (UnsupportedOperationException expected) {\n        // ok\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","sourceOld":"  static <T> void checkIterator(Iterator<T> iterator, long expectedSize, boolean allowNull) {\n    for (long i = 0; i < expectedSize; i++) {\n      boolean hasNext = iterator.hasNext();\n      assert hasNext;\n      T v = iterator.next();\n      assert allowNull || v != null;\n      try {\n        iterator.remove();\n        throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n      } catch (UnsupportedOperationException expected) {\n        // ok\n      }\n    }\n    assert !iterator.hasNext();\n    try {\n      iterator.next();\n      throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n    } catch (NoSuchElementException expected) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":["de43294c430a8d5ff73e51951f99d4df405ab9c6"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22a2e66dfda83847e80095b8693c660742ab3e9c":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"d12774649e77a6efccc3502c735c2893b52af6d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d12774649e77a6efccc3502c735c2893b52af6d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0936055c0eed56be3e4ae5c9db5b0e355390736a"]},"commit2Childs":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","d12774649e77a6efccc3502c735c2893b52af6d6","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"d12774649e77a6efccc3502c735c2893b52af6d6":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","22a2e66dfda83847e80095b8693c660742ab3e9c"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}