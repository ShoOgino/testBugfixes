{"path":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#printZnode(String).mjava","commits":[{"id":"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755","date":1329934000,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#printZnode(String).mjava","pathOld":"/dev/null","sourceNew":"    void printZnode(String path) throws IOException\r\n    {\r\n      try\r\n      {\r\n        Stat stat = new Stat();\r\n        byte[] data = zkClient.getData(path, null, stat, true);\r\n  \r\n        out.println(\"\\\"znode\\\" : {\");\r\n  \r\n        out.print(\"\\\"path\\\" : \\\"\");\r\n        xmlescape(path);\r\n        out.println(\"\\\"\");\r\n  \r\n        out.println(\", \\\"version\\\" : \\\"\" + stat.getVersion() + \"\\\"\");\r\n        out.println(\", \\\"aversion\\\" : \\\"\" + stat.getAversion() + \"\\\"\");\r\n        out.println(\", \\\"cversion\\\" : \\\"\" + stat.getCversion() + \"\\\"\");\r\n        out.println(\", \\\"ctime\\\" : \\\"\" + time(stat.getCtime()) + \"\\\"\");\r\n        out.println(\", \\\"mtime\\\" : \\\"\" + time(stat.getMtime()) + \"\\\"\");\r\n        out.println(\", \\\"czxid\\\" : \\\"\" + stat.getCzxid() + \"\\\"\");\r\n        out.println(\", \\\"mzxid\\\" : \\\"\" + stat.getMzxid() + \"\\\"\");\r\n        out.println(\", \\\"pzxid\\\" : \\\"\" + stat.getPzxid() + \"\\\"\");\r\n        out.println(\", \\\"children_count\\\" : \\\"\" + stat.getNumChildren() + \"\\\"\");\r\n        out.println(\", \\\"ephemeralOwner\\\" : \\\"\" + stat.getEphemeralOwner() + \"\\\"\");\r\n        out.println(\", \\\"dataLength\\\" : \\\"\" + stat.getDataLength() + \"\\\"\");\r\n  \r\n        if( stat.getDataLength() != 0 )\r\n        {\r\n          boolean isBinary = false;\r\n          String str;\r\n          try\r\n          {\r\n            str = new String(data, \"UTF-8\");\r\n          }\r\n          catch (UnsupportedEncodingException e)\r\n          {\r\n            // The results are unspecified\r\n            // when the bytes are not properly encoded.\r\n  \r\n            // not UTF8\r\n            StringBuilder sb = new StringBuilder(data.length * 2);\r\n            for (int i = 0; i < data.length; i++)\r\n            {\r\n              byte b = data[i];\r\n              sb.append(StrUtils.HEX_DIGITS[(b >> 4) & 0xf]);\r\n              sb.append(StrUtils.HEX_DIGITS[b & 0xf]);\r\n              if ((i & 0x3f) == 0x3f)\r\n              {\r\n                sb.append(\"\\n\");\r\n              }\r\n            }\r\n            str = sb.toString();\r\n          }\r\n          str = str.replaceAll(\"\\\\\\\"\", \"\\\\\\\\\\\"\");\r\n  \r\n          out.print(\", \\\"data\\\" : \\\"\");\r\n          //xmlescape(str);\r\n          out.print(str);\r\n          out.println(\"\\\"\");\r\n        }\r\n  \r\n        out.println(\"}\");\r\n  \r\n      }\r\n      catch (KeeperException e)\r\n      {\r\n        exception(e);\r\n        return;\r\n      }\r\n      catch (InterruptedException e)\r\n      {\r\n        exception(e);\r\n      }\r\n    }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6ddd3da533988676f6ec21e7e4651a2b2e8345","date":1330043299,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/servlet/ZookeeperInfoServlet.ZKPrinter#printZnode(String).mjava","sourceNew":null,"sourceOld":"    void printZnode(String path) throws IOException\r\n    {\r\n      try\r\n      {\r\n        Stat stat = new Stat();\r\n        byte[] data = zkClient.getData(path, null, stat, true);\r\n  \r\n        out.println(\"\\\"znode\\\" : {\");\r\n  \r\n        out.print(\"\\\"path\\\" : \\\"\");\r\n        xmlescape(path);\r\n        out.println(\"\\\"\");\r\n  \r\n        out.println(\", \\\"version\\\" : \\\"\" + stat.getVersion() + \"\\\"\");\r\n        out.println(\", \\\"aversion\\\" : \\\"\" + stat.getAversion() + \"\\\"\");\r\n        out.println(\", \\\"cversion\\\" : \\\"\" + stat.getCversion() + \"\\\"\");\r\n        out.println(\", \\\"ctime\\\" : \\\"\" + time(stat.getCtime()) + \"\\\"\");\r\n        out.println(\", \\\"mtime\\\" : \\\"\" + time(stat.getMtime()) + \"\\\"\");\r\n        out.println(\", \\\"czxid\\\" : \\\"\" + stat.getCzxid() + \"\\\"\");\r\n        out.println(\", \\\"mzxid\\\" : \\\"\" + stat.getMzxid() + \"\\\"\");\r\n        out.println(\", \\\"pzxid\\\" : \\\"\" + stat.getPzxid() + \"\\\"\");\r\n        out.println(\", \\\"children_count\\\" : \\\"\" + stat.getNumChildren() + \"\\\"\");\r\n        out.println(\", \\\"ephemeralOwner\\\" : \\\"\" + stat.getEphemeralOwner() + \"\\\"\");\r\n        out.println(\", \\\"dataLength\\\" : \\\"\" + stat.getDataLength() + \"\\\"\");\r\n  \r\n        if( stat.getDataLength() != 0 )\r\n        {\r\n          boolean isBinary = false;\r\n          String str;\r\n          try\r\n          {\r\n            str = new String(data, \"UTF-8\");\r\n          }\r\n          catch (UnsupportedEncodingException e)\r\n          {\r\n            // The results are unspecified\r\n            // when the bytes are not properly encoded.\r\n  \r\n            // not UTF8\r\n            StringBuilder sb = new StringBuilder(data.length * 2);\r\n            for (int i = 0; i < data.length; i++)\r\n            {\r\n              byte b = data[i];\r\n              sb.append(StrUtils.HEX_DIGITS[(b >> 4) & 0xf]);\r\n              sb.append(StrUtils.HEX_DIGITS[b & 0xf]);\r\n              if ((i & 0x3f) == 0x3f)\r\n              {\r\n                sb.append(\"\\n\");\r\n              }\r\n            }\r\n            str = sb.toString();\r\n          }\r\n          str = str.replaceAll(\"\\\\\\\"\", \"\\\\\\\\\\\"\");\r\n  \r\n          out.print(\", \\\"data\\\" : \\\"\");\r\n          //xmlescape(str);\r\n          out.print(str);\r\n          out.println(\"\\\"\");\r\n        }\r\n  \r\n        out.println(\"}\");\r\n  \r\n      }\r\n      catch (KeeperException e)\r\n      {\r\n        exception(e);\r\n        return;\r\n      }\r\n      catch (InterruptedException e)\r\n      {\r\n        exception(e);\r\n      }\r\n    }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd6ddd3da533988676f6ec21e7e4651a2b2e8345":["2faa4d8af1f20119ec0d38b5ae80ce9e78f10755"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd6ddd3da533988676f6ec21e7e4651a2b2e8345"]},"commit2Childs":{"dd6ddd3da533988676f6ec21e7e4651a2b2e8345":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2faa4d8af1f20119ec0d38b5ae80ce9e78f10755"],"2faa4d8af1f20119ec0d38b5ae80ce9e78f10755":["dd6ddd3da533988676f6ec21e7e4651a2b2e8345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}