{"path":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#clear(int,int).mjava","commits":[{"id":"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e","date":1414135939,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#clear(int,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void clear(int from, int to) {\n    assert from >= 0;\n    assert to <= length;\n    if (from >= to) {\n      return;\n    }\n    final int firstBlock = from >>> 12;\n    final int lastBlock = (to - 1) >>> 12;\n    if (firstBlock == lastBlock) {\n      clearWithinBlock(firstBlock, from & MASK_4096, (to - 1) & MASK_4096);\n    } else {\n      clearWithinBlock(firstBlock, from & MASK_4096, MASK_4096);\n      for (int i = firstBlock + 1; i < lastBlock; ++i) {\n        indices[i] = 0;\n        bits[i] = null;\n      }\n      clearWithinBlock(lastBlock, 0, (to - 1) & MASK_4096);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b","date":1414400081,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#clear(int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/SparseFixedBitSet#clear(int,int).mjava","sourceNew":"  @Override\n  public void clear(int from, int to) {\n    assert from >= 0;\n    assert to <= length;\n    if (from >= to) {\n      return;\n    }\n    final int firstBlock = from >>> 12;\n    final int lastBlock = (to - 1) >>> 12;\n    if (firstBlock == lastBlock) {\n      clearWithinBlock(firstBlock, from & MASK_4096, (to - 1) & MASK_4096);\n    } else {\n      clearWithinBlock(firstBlock, from & MASK_4096, MASK_4096);\n      for (int i = firstBlock + 1; i < lastBlock; ++i) {\n        nonZeroLongCount -= Long.bitCount(indices[i]);\n        indices[i] = 0;\n        bits[i] = null;\n      }\n      clearWithinBlock(lastBlock, 0, (to - 1) & MASK_4096);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void clear(int from, int to) {\n    assert from >= 0;\n    assert to <= length;\n    if (from >= to) {\n      return;\n    }\n    final int firstBlock = from >>> 12;\n    final int lastBlock = (to - 1) >>> 12;\n    if (firstBlock == lastBlock) {\n      clearWithinBlock(firstBlock, from & MASK_4096, (to - 1) & MASK_4096);\n    } else {\n      clearWithinBlock(firstBlock, from & MASK_4096, MASK_4096);\n      for (int i = firstBlock + 1; i < lastBlock; ++i) {\n        indices[i] = 0;\n        bits[i] = null;\n      }\n      clearWithinBlock(lastBlock, 0, (to - 1) & MASK_4096);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"]},"commit2Childs":{"22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0abcec02c9851c46c70a75bd42fb6e4d5348ac9e"],"0abcec02c9851c46c70a75bd42fb6e4d5348ac9e":["22aee0e0ecb0d10ebe6ce415b293e64ccf1c0e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}