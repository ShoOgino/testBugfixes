{"path":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1dfbab3b123144c2bf2fe399c49001108d9c721c","date":1330368339,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          check(random, q1, wrapUnderlyingReader(random, s, -1), false);\n          check(random, q1, wrapUnderlyingReader(random, s,  0), false);\n          check(random, q1, wrapUnderlyingReader(random, s, +1), false);\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          check(random, q1, wrapUnderlyingReader(random, s, -1), false);\n          check(random, q1, wrapUnderlyingReader(random, s,  0), false);\n          check(random, q1, wrapUnderlyingReader(random, s, +1), false);\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          IndexSearcher wrapped;\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, -1), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s,  0), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n          check(random, q1, wrapped = wrapUnderlyingReader(random, s, +1), false);\n          purgeFieldCache(wrapped.getIndexReader()); // our wrapping can create insanity otherwise\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76c5c188431927c412f7c71546c5cfcccdc327f8","date":1333289294,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          check(random, q1, wrapUnderlyingReader(random, s, -1), false);\n          check(random, q1, wrapUnderlyingReader(random, s,  0), false);\n          check(random, q1, wrapUnderlyingReader(random, s, +1), false);\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          check(random, q1, wrapUnderlyingReader(random, s, -1), false);\n          check(random, q1, wrapUnderlyingReader(random, s,  0), false);\n          check(random, q1, wrapUnderlyingReader(random, s, +1), false);\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = (Query)q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e166cc9c5f45f78a8dd02332b5ac100221063fd8","date":1421678965,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        checkBulkScorerSkipTo(random, q1, s);\n        if (wrap) {\n          check(random, q1, wrapUnderlyingReader(random, s, -1), false);\n          check(random, q1, wrapUnderlyingReader(random, s,  0), false);\n          check(random, q1, wrapUnderlyingReader(random, s, +1), false);\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        if (wrap) {\n          check(random, q1, wrapUnderlyingReader(random, s, -1), false);\n          check(random, q1, wrapUnderlyingReader(random, s,  0), false);\n          check(random, q1, wrapUnderlyingReader(random, s, +1), false);\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        checkBulkScorerSkipTo(random, q1, s);\n        if (wrap) {\n          check(random, q1, wrapUnderlyingReader(random, s, -1), false);\n          check(random, q1, wrapUnderlyingReader(random, s,  0), false);\n          check(random, q1, wrapUnderlyingReader(random, s, +1), false);\n        }\n        checkExplanations(q1,s);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        checkBulkScorerSkipTo(random, q1, s);\n        if (wrap) {\n          check(random, q1, wrapUnderlyingReader(random, s, -1), false);\n          check(random, q1, wrapUnderlyingReader(random, s,  0), false);\n          check(random, q1, wrapUnderlyingReader(random, s, +1), false);\n        }\n        checkExplanations(q1,s);\n        \n        Query q2 = q1.clone();\n        checkEqual(s.rewrite(q1),\n                   s.rewrite(q2));\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"657704b225b01c6ff4bada5b6667f1f60aaaad0f","date":1523436207,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        checkBulkScorerSkipTo(random, q1, s);\n        if (wrap) {\n          check(random, q1, wrapUnderlyingReader(random, s, -1), false);\n          check(random, q1, wrapUnderlyingReader(random, s,  0), false);\n          check(random, q1, wrapUnderlyingReader(random, s, +1), false);\n        }\n        checkExplanations(q1,s);\n        CheckHits.checkMatches(q1, s);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        checkBulkScorerSkipTo(random, q1, s);\n        if (wrap) {\n          check(random, q1, wrapUnderlyingReader(random, s, -1), false);\n          check(random, q1, wrapUnderlyingReader(random, s,  0), false);\n          check(random, q1, wrapUnderlyingReader(random, s, +1), false);\n        }\n        checkExplanations(q1,s);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#check(Random,Query,IndexSearcher,boolean).mjava","sourceNew":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        checkBulkScorerSkipTo(random, q1, s);\n        if (wrap) {\n          check(random, q1, wrapUnderlyingReader(random, s, -1), false);\n          check(random, q1, wrapUnderlyingReader(random, s,  0), false);\n          check(random, q1, wrapUnderlyingReader(random, s, +1), false);\n        }\n        checkExplanations(q1,s);\n        CheckHits.checkMatches(q1, s);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  public static void check(Random random, Query q1, IndexSearcher s, boolean wrap) {\n    try {\n      check(q1);\n      if (s!=null) {\n        checkFirstSkipTo(q1,s);\n        checkSkipTo(q1,s);\n        checkBulkScorerSkipTo(random, q1, s);\n        if (wrap) {\n          check(random, q1, wrapUnderlyingReader(random, s, -1), false);\n          check(random, q1, wrapUnderlyingReader(random, s,  0), false);\n          check(random, q1, wrapUnderlyingReader(random, s, +1), false);\n        }\n        checkExplanations(q1,s);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76c5c188431927c412f7c71546c5cfcccdc327f8":["1dfbab3b123144c2bf2fe399c49001108d9c721c"],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["76c5c188431927c412f7c71546c5cfcccdc327f8"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","1dfbab3b123144c2bf2fe399c49001108d9c721c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"1dfbab3b123144c2bf2fe399c49001108d9c721c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["2dfdf766e55e943d942055d7de53c7ad6bc45283","657704b225b01c6ff4bada5b6667f1f60aaaad0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43345f1452f9510f8aaadae6156fe0c834e7d957"]},"commit2Childs":{"76c5c188431927c412f7c71546c5cfcccdc327f8":["e166cc9c5f45f78a8dd02332b5ac100221063fd8"],"e166cc9c5f45f78a8dd02332b5ac100221063fd8":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","1dfbab3b123144c2bf2fe399c49001108d9c721c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["657704b225b01c6ff4bada5b6667f1f60aaaad0f","43345f1452f9510f8aaadae6156fe0c834e7d957"],"657704b225b01c6ff4bada5b6667f1f60aaaad0f":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"1dfbab3b123144c2bf2fe399c49001108d9c721c":["76c5c188431927c412f7c71546c5cfcccdc327f8","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}