{"path":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#assertTopDocs(TopDocs,TopDocs,ScoreMode,IndexSearcher,Query).mjava","commits":[{"id":"9359ad4a5596673c3154ffa1133458f00e124234","date":1428012026,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#assertTopDocs(TopDocs,TopDocs,ScoreMode,IndexSearcher,Query).mjava","pathOld":"/dev/null","sourceNew":"  private void assertTopDocs(TopDocs expectedTopDocs, TopDocs actualTopDocs, ScoreMode scoreMode, IndexSearcher indexSearcher, Query joinQuery) throws IOException {\n    assertEquals(expectedTopDocs.totalHits, actualTopDocs.totalHits);\n    assertEquals(expectedTopDocs.scoreDocs.length, actualTopDocs.scoreDocs.length);\n    if (scoreMode == ScoreMode.None) {\n      return;\n    }\n\n    assertEquals(expectedTopDocs.getMaxScore(), actualTopDocs.getMaxScore(), 0.0f);\n    for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n      if (VERBOSE) {\n        System.out.printf(Locale.ENGLISH, \"Expected doc: %d | Actual doc: %d\\n\", expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n        System.out.printf(Locale.ENGLISH, \"Expected score: %f | Actual score: %f\\n\", expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score);\n      }\n      assertEquals(expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score, 0.0f);\n      Explanation explanation = indexSearcher.explain(joinQuery, expectedTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, explanation.getValue(), 0.0f);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#assertTopDocs(TopDocs,TopDocs,ScoreMode,IndexSearcher,Query).mjava","pathOld":"/dev/null","sourceNew":"  private void assertTopDocs(TopDocs expectedTopDocs, TopDocs actualTopDocs, ScoreMode scoreMode, IndexSearcher indexSearcher, Query joinQuery) throws IOException {\n    assertEquals(expectedTopDocs.totalHits, actualTopDocs.totalHits);\n    assertEquals(expectedTopDocs.scoreDocs.length, actualTopDocs.scoreDocs.length);\n    if (scoreMode == ScoreMode.None) {\n      return;\n    }\n\n    assertEquals(expectedTopDocs.getMaxScore(), actualTopDocs.getMaxScore(), 0.0f);\n    for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n      if (VERBOSE) {\n        System.out.printf(Locale.ENGLISH, \"Expected doc: %d | Actual doc: %d\\n\", expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n        System.out.printf(Locale.ENGLISH, \"Expected score: %f | Actual score: %f\\n\", expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score);\n      }\n      assertEquals(expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score, 0.0f);\n      Explanation explanation = indexSearcher.explain(joinQuery, expectedTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, explanation.getValue(), 0.0f);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7065b7a1004439fcad981283f1fa7632142a5f47","date":1428399440,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#assertTopDocs(TopDocs,TopDocs,ScoreMode,IndexSearcher,Query).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#assertTopDocs(TopDocs,TopDocs,ScoreMode,IndexSearcher,Query).mjava","sourceNew":"  private void assertTopDocs(TopDocs expectedTopDocs, TopDocs actualTopDocs, ScoreMode scoreMode, IndexSearcher indexSearcher, Query joinQuery) throws IOException {\n    assertEquals(expectedTopDocs.totalHits, actualTopDocs.totalHits);\n    assertEquals(expectedTopDocs.scoreDocs.length, actualTopDocs.scoreDocs.length);\n    if (scoreMode == ScoreMode.None) {\n      return;\n    }\n\n    assertEquals(expectedTopDocs.getMaxScore(), actualTopDocs.getMaxScore(), 0.0f);\n    if (VERBOSE) {\n      for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n        System.out.printf(Locale.ENGLISH, \"Expected doc: %d | Actual doc: %d\\n\", expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n        System.out.printf(Locale.ENGLISH, \"Expected score: %f | Actual score: %f\\n\", expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score);\n      }\n    }\n\n    for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n      assertEquals(expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score, 0.0f);\n      Explanation explanation = indexSearcher.explain(joinQuery, expectedTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, explanation.getValue(), 0.0f);\n    }\n  }\n\n","sourceOld":"  private void assertTopDocs(TopDocs expectedTopDocs, TopDocs actualTopDocs, ScoreMode scoreMode, IndexSearcher indexSearcher, Query joinQuery) throws IOException {\n    assertEquals(expectedTopDocs.totalHits, actualTopDocs.totalHits);\n    assertEquals(expectedTopDocs.scoreDocs.length, actualTopDocs.scoreDocs.length);\n    if (scoreMode == ScoreMode.None) {\n      return;\n    }\n\n    assertEquals(expectedTopDocs.getMaxScore(), actualTopDocs.getMaxScore(), 0.0f);\n    for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n      if (VERBOSE) {\n        System.out.printf(Locale.ENGLISH, \"Expected doc: %d | Actual doc: %d\\n\", expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n        System.out.printf(Locale.ENGLISH, \"Expected score: %f | Actual score: %f\\n\", expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score);\n      }\n      assertEquals(expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score, 0.0f);\n      Explanation explanation = indexSearcher.explain(joinQuery, expectedTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, explanation.getValue(), 0.0f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af3f3d3f7a6a159ccf14d58544fd71ae72c89b10","date":1449514606,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#assertTopDocs(TopDocs,TopDocs,ScoreMode,IndexSearcher,Query).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#assertTopDocs(TopDocs,TopDocs,ScoreMode,IndexSearcher,Query).mjava","sourceNew":"  private void assertTopDocs(TopDocs expectedTopDocs, TopDocs actualTopDocs, ScoreMode scoreMode, IndexSearcher indexSearcher, Query joinQuery) throws IOException {\n    assertEquals(expectedTopDocs.totalHits, actualTopDocs.totalHits);\n    assertEquals(expectedTopDocs.scoreDocs.length, actualTopDocs.scoreDocs.length);\n    if (scoreMode == ScoreMode.None) {\n      return;\n    }\n\n    if (VERBOSE) {\n      for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n        System.out.printf(Locale.ENGLISH, \"Expected doc: %d | Actual doc: %d\\n\", expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n        System.out.printf(Locale.ENGLISH, \"Expected score: %f | Actual score: %f\\n\", expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score);\n      }\n    }\n    assertEquals(expectedTopDocs.getMaxScore(), actualTopDocs.getMaxScore(), 0.0f);\n\n    for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n      assertEquals(expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score, 0.0f);\n      Explanation explanation = indexSearcher.explain(joinQuery, expectedTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, explanation.getValue(), 0.0f);\n    }\n  }\n\n","sourceOld":"  private void assertTopDocs(TopDocs expectedTopDocs, TopDocs actualTopDocs, ScoreMode scoreMode, IndexSearcher indexSearcher, Query joinQuery) throws IOException {\n    assertEquals(expectedTopDocs.totalHits, actualTopDocs.totalHits);\n    assertEquals(expectedTopDocs.scoreDocs.length, actualTopDocs.scoreDocs.length);\n    if (scoreMode == ScoreMode.None) {\n      return;\n    }\n\n    assertEquals(expectedTopDocs.getMaxScore(), actualTopDocs.getMaxScore(), 0.0f);\n    if (VERBOSE) {\n      for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n        System.out.printf(Locale.ENGLISH, \"Expected doc: %d | Actual doc: %d\\n\", expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n        System.out.printf(Locale.ENGLISH, \"Expected score: %f | Actual score: %f\\n\", expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score);\n      }\n    }\n\n    for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n      assertEquals(expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score, 0.0f);\n      Explanation explanation = indexSearcher.explain(joinQuery, expectedTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, explanation.getValue(), 0.0f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#assertTopDocs(TopDocs,TopDocs,ScoreMode,IndexSearcher,Query).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#assertTopDocs(TopDocs,TopDocs,ScoreMode,IndexSearcher,Query).mjava","sourceNew":"  private void assertTopDocs(TopDocs expectedTopDocs, TopDocs actualTopDocs, ScoreMode scoreMode, IndexSearcher indexSearcher, Query joinQuery) throws IOException {\n    assertEquals(expectedTopDocs.totalHits, actualTopDocs.totalHits);\n    assertEquals(expectedTopDocs.scoreDocs.length, actualTopDocs.scoreDocs.length);\n    if (scoreMode == ScoreMode.None) {\n      return;\n    }\n\n    if (VERBOSE) {\n      for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n        System.out.printf(Locale.ENGLISH, \"Expected doc: %d | Actual doc: %d\\n\", expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n        System.out.printf(Locale.ENGLISH, \"Expected score: %f | Actual score: %f\\n\", expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score);\n      }\n    }\n    assertEquals(expectedTopDocs.getMaxScore(), actualTopDocs.getMaxScore(), 0.0f);\n\n    for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n      assertEquals(expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score, 0.0f);\n      Explanation explanation = indexSearcher.explain(joinQuery, expectedTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, explanation.getValue().doubleValue(), 0.0f);\n    }\n  }\n\n","sourceOld":"  private void assertTopDocs(TopDocs expectedTopDocs, TopDocs actualTopDocs, ScoreMode scoreMode, IndexSearcher indexSearcher, Query joinQuery) throws IOException {\n    assertEquals(expectedTopDocs.totalHits, actualTopDocs.totalHits);\n    assertEquals(expectedTopDocs.scoreDocs.length, actualTopDocs.scoreDocs.length);\n    if (scoreMode == ScoreMode.None) {\n      return;\n    }\n\n    if (VERBOSE) {\n      for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n        System.out.printf(Locale.ENGLISH, \"Expected doc: %d | Actual doc: %d\\n\", expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n        System.out.printf(Locale.ENGLISH, \"Expected score: %f | Actual score: %f\\n\", expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score);\n      }\n    }\n    assertEquals(expectedTopDocs.getMaxScore(), actualTopDocs.getMaxScore(), 0.0f);\n\n    for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n      assertEquals(expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score, 0.0f);\n      Explanation explanation = indexSearcher.explain(joinQuery, expectedTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, explanation.getValue(), 0.0f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#assertTopDocs(TopDocs,TopDocs,ScoreMode,IndexSearcher,Query).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#assertTopDocs(TopDocs,TopDocs,ScoreMode,IndexSearcher,Query).mjava","sourceNew":"  private void assertTopDocs(TopDocs expectedTopDocs, TopDocs actualTopDocs, ScoreMode scoreMode, IndexSearcher indexSearcher, Query joinQuery) throws IOException {\n    assertEquals(expectedTopDocs.totalHits, actualTopDocs.totalHits);\n    assertEquals(expectedTopDocs.scoreDocs.length, actualTopDocs.scoreDocs.length);\n    if (scoreMode == ScoreMode.None) {\n      return;\n    }\n\n    if (VERBOSE) {\n      for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n        System.out.printf(Locale.ENGLISH, \"Expected doc: %d | Actual doc: %d\\n\", expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n        System.out.printf(Locale.ENGLISH, \"Expected score: %f | Actual score: %f\\n\", expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score);\n      }\n    }\n\n    for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n      assertEquals(expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score, 0.0f);\n      Explanation explanation = indexSearcher.explain(joinQuery, expectedTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, explanation.getValue().doubleValue(), 0.0f);\n    }\n  }\n\n","sourceOld":"  private void assertTopDocs(TopDocs expectedTopDocs, TopDocs actualTopDocs, ScoreMode scoreMode, IndexSearcher indexSearcher, Query joinQuery) throws IOException {\n    assertEquals(expectedTopDocs.totalHits, actualTopDocs.totalHits);\n    assertEquals(expectedTopDocs.scoreDocs.length, actualTopDocs.scoreDocs.length);\n    if (scoreMode == ScoreMode.None) {\n      return;\n    }\n\n    if (VERBOSE) {\n      for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n        System.out.printf(Locale.ENGLISH, \"Expected doc: %d | Actual doc: %d\\n\", expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n        System.out.printf(Locale.ENGLISH, \"Expected score: %f | Actual score: %f\\n\", expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score);\n      }\n    }\n    assertEquals(expectedTopDocs.getMaxScore(), actualTopDocs.getMaxScore(), 0.0f);\n\n    for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n      assertEquals(expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score, 0.0f);\n      Explanation explanation = indexSearcher.explain(joinQuery, expectedTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, explanation.getValue().doubleValue(), 0.0f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#assertTopDocs(TopDocs,TopDocs,ScoreMode,IndexSearcher,Query).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#assertTopDocs(TopDocs,TopDocs,ScoreMode,IndexSearcher,Query).mjava","sourceNew":"  private void assertTopDocs(TopDocs expectedTopDocs, TopDocs actualTopDocs, ScoreMode scoreMode, IndexSearcher indexSearcher, Query joinQuery) throws IOException {\n    assertEquals(expectedTopDocs.totalHits, actualTopDocs.totalHits);\n    assertEquals(expectedTopDocs.scoreDocs.length, actualTopDocs.scoreDocs.length);\n    if (scoreMode == ScoreMode.None) {\n      return;\n    }\n\n    if (VERBOSE) {\n      for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n        System.out.printf(Locale.ENGLISH, \"Expected doc: %d | Actual doc: %d\\n\", expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n        System.out.printf(Locale.ENGLISH, \"Expected score: %f | Actual score: %f\\n\", expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score);\n      }\n    }\n\n    for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n      assertEquals(expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score, 0.0f);\n      Explanation explanation = indexSearcher.explain(joinQuery, expectedTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, explanation.getValue().doubleValue(), 0.0f);\n    }\n  }\n\n","sourceOld":"  private void assertTopDocs(TopDocs expectedTopDocs, TopDocs actualTopDocs, ScoreMode scoreMode, IndexSearcher indexSearcher, Query joinQuery) throws IOException {\n    assertEquals(expectedTopDocs.totalHits, actualTopDocs.totalHits);\n    assertEquals(expectedTopDocs.scoreDocs.length, actualTopDocs.scoreDocs.length);\n    if (scoreMode == ScoreMode.None) {\n      return;\n    }\n\n    if (VERBOSE) {\n      for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n        System.out.printf(Locale.ENGLISH, \"Expected doc: %d | Actual doc: %d\\n\", expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n        System.out.printf(Locale.ENGLISH, \"Expected score: %f | Actual score: %f\\n\", expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score);\n      }\n    }\n    assertEquals(expectedTopDocs.getMaxScore(), actualTopDocs.getMaxScore(), 0.0f);\n\n    for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n      assertEquals(expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score, 0.0f);\n      Explanation explanation = indexSearcher.explain(joinQuery, expectedTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, explanation.getValue().doubleValue(), 0.0f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#assertTopDocs(TopDocs,TopDocs,ScoreMode,IndexSearcher,Query).mjava","pathOld":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#assertTopDocs(TopDocs,TopDocs,ScoreMode,IndexSearcher,Query).mjava","sourceNew":"  private void assertTopDocs(TopDocs expectedTopDocs, TopDocs actualTopDocs, ScoreMode scoreMode, IndexSearcher indexSearcher, Query joinQuery) throws IOException {\n    assertEquals(expectedTopDocs.totalHits.value, actualTopDocs.totalHits.value);\n    assertEquals(expectedTopDocs.scoreDocs.length, actualTopDocs.scoreDocs.length);\n    if (scoreMode == ScoreMode.None) {\n      return;\n    }\n\n    if (VERBOSE) {\n      for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n        System.out.printf(Locale.ENGLISH, \"Expected doc: %d | Actual doc: %d\\n\", expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n        System.out.printf(Locale.ENGLISH, \"Expected score: %f | Actual score: %f\\n\", expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score);\n      }\n    }\n\n    for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n      assertEquals(expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score, 0.0f);\n      Explanation explanation = indexSearcher.explain(joinQuery, expectedTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, explanation.getValue().doubleValue(), 0.0f);\n    }\n  }\n\n","sourceOld":"  private void assertTopDocs(TopDocs expectedTopDocs, TopDocs actualTopDocs, ScoreMode scoreMode, IndexSearcher indexSearcher, Query joinQuery) throws IOException {\n    assertEquals(expectedTopDocs.totalHits, actualTopDocs.totalHits);\n    assertEquals(expectedTopDocs.scoreDocs.length, actualTopDocs.scoreDocs.length);\n    if (scoreMode == ScoreMode.None) {\n      return;\n    }\n\n    if (VERBOSE) {\n      for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n        System.out.printf(Locale.ENGLISH, \"Expected doc: %d | Actual doc: %d\\n\", expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n        System.out.printf(Locale.ENGLISH, \"Expected score: %f | Actual score: %f\\n\", expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score);\n      }\n    }\n\n    for (int i = 0; i < expectedTopDocs.scoreDocs.length; i++) {\n      assertEquals(expectedTopDocs.scoreDocs[i].doc, actualTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, actualTopDocs.scoreDocs[i].score, 0.0f);\n      Explanation explanation = indexSearcher.explain(joinQuery, expectedTopDocs.scoreDocs[i].doc);\n      assertEquals(expectedTopDocs.scoreDocs[i].score, explanation.getValue().doubleValue(), 0.0f);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9359ad4a5596673c3154ffa1133458f00e124234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["af3f3d3f7a6a159ccf14d58544fd71ae72c89b10"],"af3f3d3f7a6a159ccf14d58544fd71ae72c89b10":["7065b7a1004439fcad981283f1fa7632142a5f47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9359ad4a5596673c3154ffa1133458f00e124234"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"7065b7a1004439fcad981283f1fa7632142a5f47":["9359ad4a5596673c3154ffa1133458f00e124234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"9359ad4a5596673c3154ffa1133458f00e124234":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","7065b7a1004439fcad981283f1fa7632142a5f47"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9359ad4a5596673c3154ffa1133458f00e124234","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"af3f3d3f7a6a159ccf14d58544fd71ae72c89b10":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7065b7a1004439fcad981283f1fa7632142a5f47":["af3f3d3f7a6a159ccf14d58544fd71ae72c89b10"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}