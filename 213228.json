{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#loadTermsIndex(SegmentInfo,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#loadTermsIndex(SegmentInfo,int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader.CoreReaders#loadTermsIndex(SegmentInfo,int).mjava","sourceNew":"    // NOTE: only called from IndexWriter when a near\n    // real-time reader is opened, or applyDeletes is run,\n    // sharing a segment that's still being merged.  This\n    // method is not fully thread safe, and relies on the\n    // synchronization in IndexWriter\n    synchronized void loadTermsIndex(SegmentInfo si, int termsIndexDivisor) throws IOException {\n      if (tis == null) {\n        Directory dir0;\n        if (si.getUseCompoundFile()) {\n          // In some cases, we were originally opened when CFS\n          // was not used, but then we are asked to open the\n          // terms reader with index, the segment has switched\n          // to CFS\n          if (cfsReader == null) {\n            cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          }\n          dir0 = cfsReader;\n        } else {\n          dir0 = dir;\n        }\n\n        tis = new TermInfosReader(dir0, segment, fieldInfos, readBufferSize, termsIndexDivisor);\n      }\n    }\n\n","sourceOld":"    // NOTE: only called from IndexWriter when a near\n    // real-time reader is opened, or applyDeletes is run,\n    // sharing a segment that's still being merged.  This\n    // method is not fully thread safe, and relies on the\n    // synchronization in IndexWriter\n    synchronized void loadTermsIndex(SegmentInfo si, int termsIndexDivisor) throws IOException {\n      if (tis == null) {\n        Directory dir0;\n        if (si.getUseCompoundFile()) {\n          // In some cases, we were originally opened when CFS\n          // was not used, but then we are asked to open the\n          // terms reader with index, the segment has switched\n          // to CFS\n          if (cfsReader == null) {\n            cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          }\n          dir0 = cfsReader;\n        } else {\n          dir0 = dir;\n        }\n\n        tis = new TermInfosReader(dir0, segment, fieldInfos, readBufferSize, termsIndexDivisor);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader.CoreReaders#loadTermsIndex(SegmentInfo,int).mjava","sourceNew":null,"sourceOld":"    // NOTE: only called from IndexWriter when a near\n    // real-time reader is opened, or applyDeletes is run,\n    // sharing a segment that's still being merged.  This\n    // method is not fully thread safe, and relies on the\n    // synchronization in IndexWriter\n    synchronized void loadTermsIndex(SegmentInfo si, int termsIndexDivisor) throws IOException {\n      if (tis == null) {\n        Directory dir0;\n        if (si.getUseCompoundFile()) {\n          // In some cases, we were originally opened when CFS\n          // was not used, but then we are asked to open the\n          // terms reader with index, the segment has switched\n          // to CFS\n          if (cfsReader == null) {\n            cfsReader = new CompoundFileReader(dir, IndexFileNames.segmentFileName(segment, IndexFileNames.COMPOUND_FILE_EXTENSION), readBufferSize);\n          }\n          dir0 = cfsReader;\n        } else {\n          dir0 = dir;\n        }\n\n        tis = new TermInfosReader(dir0, segment, fieldInfos, readBufferSize, termsIndexDivisor);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}