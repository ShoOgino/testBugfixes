{"path":"lucene/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#numLeaves(IndexReader).mjava","commits":[{"id":"7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea","date":1327930581,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#numLeaves(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompositeReader.ReaderContextBuilder#numLeaves(IndexReader).mjava","sourceNew":"    private int numLeaves(IndexReader reader) {\n      final int[] numLeaves = new int[1];\n      try {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) {\n            numLeaves[0]++;\n          }\n        }.run();\n      } catch (IOException ioe) {\n        // won't happen\n        throw new RuntimeException(ioe);\n      }\n      return numLeaves[0];\n    }\n\n","sourceOld":"    private int numLeaves(IndexReader reader) {\n      final int[] numLeaves = new int[1];\n      try {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) {\n            numLeaves[0]++;\n          }\n        }.run();\n      } catch (IOException ioe) {\n        // won't happen\n        throw new RuntimeException(ioe);\n      }\n      return numLeaves[0];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#numLeaves(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ReaderUtil.ReaderContextBuilder#numLeaves(IndexReader).mjava","sourceNew":"    private int numLeaves(IndexReader reader) {\n      final int[] numLeaves = new int[1];\n      try {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) {\n            numLeaves[0]++;\n          }\n        }.run();\n      } catch (IOException ioe) {\n        // won't happen\n        throw new RuntimeException(ioe);\n      }\n      return numLeaves[0];\n    }\n\n","sourceOld":"    private int numLeaves(IndexReader reader) {\n      final int[] numLeaves = new int[1];\n      try {\n        new Gather(reader) {\n          @Override\n          protected void add(int base, IndexReader r) {\n            numLeaves[0]++;\n          }\n        }.run();\n      } catch (IOException ioe) {\n        // won't happen\n        throw new RuntimeException(ioe);\n      }\n      return numLeaves[0];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#numLeaves(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/CompositeReaderContext.Builder#numLeaves(IndexReader).mjava","sourceNew":"    private int numLeaves(IndexReader reader) {\n      final int[] numLeaves = new int[1];\n      try {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) {\n            numLeaves[0]++;\n          }\n        }.run();\n      } catch (IOException ioe) {\n        // won't happen\n        throw new RuntimeException(ioe);\n      }\n      return numLeaves[0];\n    }\n\n","sourceOld":"    private int numLeaves(IndexReader reader) {\n      final int[] numLeaves = new int[1];\n      try {\n        new ReaderUtil.Gather(reader) {\n          @Override\n          protected void add(int base, AtomicReader r) {\n            numLeaves[0]++;\n          }\n        }.run();\n      } catch (IOException ioe) {\n        // won't happen\n        throw new RuntimeException(ioe);\n      }\n      return numLeaves[0];\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea"],"7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5cab9a86bd67202d20b6adc463008c8e982b070a","7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7184cc2c0261f3b9a1abc772edd1ec0d071ca9ea":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}