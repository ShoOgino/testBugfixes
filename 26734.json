{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,boolean,SpanCollectorFactory).mjava","commits":[{"id":"c257cd8ddb1ed5632a36c7488614a2ee21705d24","date":1432128550,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,boolean,SpanCollectorFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores, SpanCollectorFactory factory) throws IOException {\n    TermContext context = TermContext.build(searcher.getTopReaderContext(), term);\n    SpanSimilarity similarity = SpanSimilarity.build(this, searcher, needsScores, searcher.termStatistics(term, context));\n    return new SpanTermWeight(context, similarity, factory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4b6308fa66dc96de36abfae5d3e7c92c805e227","date":1432916588,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,boolean,SpanCollectorFactory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,boolean,SpanCollectorFactory).mjava","sourceNew":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores, SpanCollectorFactory factory) throws IOException {\n    final TermContext context;\n    final IndexReaderContext topContext = searcher.getTopReaderContext();\n    if (termContext == null || termContext.topReaderContext != topContext) {\n      context = TermContext.build(topContext, term);\n    }\n    else {\n      context = termContext;\n    }\n    return new SpanTermWeight(context, searcher, needsScores ? Collections.singletonMap(term, context) : null, factory);\n  }\n\n","sourceOld":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores, SpanCollectorFactory factory) throws IOException {\n    TermContext context = TermContext.build(searcher.getTopReaderContext(), term);\n    SpanSimilarity similarity = SpanSimilarity.build(this, searcher, needsScores, searcher.termStatistics(term, context));\n    return new SpanTermWeight(context, similarity, factory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanTermQuery#createWeight(IndexSearcher,boolean,SpanCollectorFactory).mjava","sourceNew":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final TermContext context;\n    final IndexReaderContext topContext = searcher.getTopReaderContext();\n    if (termContext == null || termContext.topReaderContext != topContext) {\n      context = TermContext.build(topContext, term);\n    }\n    else {\n      context = termContext;\n    }\n    return new SpanTermWeight(context, searcher, needsScores ? Collections.singletonMap(term, context) : null);\n  }\n\n","sourceOld":"  @Override\n  public SpanWeight createWeight(IndexSearcher searcher, boolean needsScores, SpanCollectorFactory factory) throws IOException {\n    final TermContext context;\n    final IndexReaderContext topContext = searcher.getTopReaderContext();\n    if (termContext == null || termContext.topReaderContext != topContext) {\n      context = TermContext.build(topContext, term);\n    }\n    else {\n      context = termContext;\n    }\n    return new SpanTermWeight(context, searcher, needsScores ? Collections.singletonMap(term, context) : null, factory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29aea3139c4326c0501d75d51059855463220279":["d4b6308fa66dc96de36abfae5d3e7c92c805e227"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["29aea3139c4326c0501d75d51059855463220279"],"d4b6308fa66dc96de36abfae5d3e7c92c805e227":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"]},"commit2Childs":{"29aea3139c4326c0501d75d51059855463220279":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c257cd8ddb1ed5632a36c7488614a2ee21705d24"],"c257cd8ddb1ed5632a36c7488614a2ee21705d24":["d4b6308fa66dc96de36abfae5d3e7c92c805e227"],"d4b6308fa66dc96de36abfae5d3e7c92c805e227":["29aea3139c4326c0501d75d51059855463220279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}