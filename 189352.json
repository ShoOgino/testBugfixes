{"path":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericUtils#addRange(Object,int,long,long,int).mjava","commits":[{"id":"a178ac3dec643551e66363c457a9074f55545f86","date":1496133188,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericUtils#addRange(Object,int,long,long,int).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#addRange(Object,int,long,long,int).mjava","sourceNew":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","sourceOld":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericUtils#addRange(Object,int,long,long,int).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#addRange(Object,int,long,long,int).mjava","sourceNew":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","sourceOld":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/legacy/LegacyNumericUtils#addRange(Object,int,long,long,int).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#addRange(Object,int,long,long,int).mjava","sourceNew":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","sourceOld":"  /** Helper that delegates to correct range builder */\n  private static void addRange(\n    final Object builder, final int valSize,\n    long minBound, long maxBound,\n    final int shift\n  ) {\n    // for the max bound set all lower bits (that were shifted away):\n    // this is important for testing or other usages of the splitted range\n    // (e.g. to reconstruct the full range). The prefixEncoding will remove\n    // the bits anyway, so they do not hurt!\n    maxBound |= (1L << shift) - 1L;\n    // delegate to correct range builder\n    switch(valSize) {\n      case 64:\n        ((LongRangeBuilder)builder).addRange(minBound, maxBound, shift);\n        break;\n      case 32:\n        ((IntRangeBuilder)builder).addRange((int)minBound, (int)maxBound, shift);\n        break;\n      default:\n        // Should not happen!\n        throw new IllegalArgumentException(\"valSize must be 32 or 64.\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a178ac3dec643551e66363c457a9074f55545f86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a178ac3dec643551e66363c457a9074f55545f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"a178ac3dec643551e66363c457a9074f55545f86":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a178ac3dec643551e66363c457a9074f55545f86","e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}