{"path":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return 1f / (1 + num);\n              }\n            }\n\n            @Override\n            public float maxScore() {\n              return Float.POSITIVE_INFINITY;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return 1f / (1 + num);\n              }\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return 1f / (1 + num);\n              }\n            }\n\n            @Override\n            public float maxScore() {\n              return Float.POSITIVE_INFINITY;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return 1f / (1 + num);\n              }\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return 1f / (1 + num);\n              }\n            }\n\n            @Override\n            public float getMaxScore(int upTo) throws IOException {\n              return Float.POSITIVE_INFINITY;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return 1f / (1 + num);\n              }\n            }\n\n            @Override\n            public float maxScore() {\n              return Float.POSITIVE_INFINITY;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(this) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return 1f / (1 + num);\n              }\n            }\n\n            @Override\n            public float getMaxScore(int upTo) throws IOException {\n              return Float.POSITIVE_INFINITY;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return 1f / (1 + num);\n              }\n            }\n\n            @Override\n            public float getMaxScore(int upTo) throws IOException {\n              return Float.POSITIVE_INFINITY;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(this) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return 1f / (1 + num);\n              }\n            }\n\n            @Override\n            public float getMaxScore(int upTo) throws IOException {\n              return Float.POSITIVE_INFINITY;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(this) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return 1f / (1 + num);\n              }\n            }\n\n            @Override\n            public float getMaxScore(int upTo) throws IOException {\n              return Float.POSITIVE_INFINITY;\n            }\n          };\n        }\n\n        @Override\n        public boolean isCacheable(LeafReaderContext ctx) {\n          return false;\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["523cc6563c99a55527ef7993efc5413c6648852d"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"523cc6563c99a55527ef7993efc5413c6648852d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"523cc6563c99a55527ef7993efc5413c6648852d":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"417142ff08fda9cf0b72d5133e63097a166c6458":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}