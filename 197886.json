{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","commits":[{"id":"519ac3b8f2711b5bfeb1c90c77bb007032270a41","date":1384456090,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","pathOld":"/dev/null","sourceNew":"  private final SimpleFacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdCountQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n\n    TopOrdCountQueue.OrdAndCount reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdCountQueue.OrdAndCount();\n          }\n          reuse.ord = ord;\n          reuse.count = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdCountQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().count;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdCountQueue.OrdAndCount ordAndCount = q.pop();\n      dv.lookupOrd(ordAndCount.ord, scratch);\n      String s = scratch.utf8ToString();\n      labelValues[i] = new LabelAndValue(s.substring(dim.length()+1, s.length()), ordAndCount.count);\n    }\n\n    return new SimpleFacetResult(new CategoryPath(dim), dimCount, labelValues);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","sourceNew":"  private final SimpleFacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdCountQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n\n    TopOrdCountQueue.OrdAndCount reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdCountQueue.OrdAndCount();\n          }\n          reuse.ord = ord;\n          reuse.count = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdCountQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().count;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdCountQueue.OrdAndCount ordAndCount = q.pop();\n      dv.lookupOrd(ordAndCount.ord, scratch);\n      String s = scratch.utf8ToString();\n      labelValues[i] = new LabelAndValue(s.substring(dim.length()+1, s.length()), ordAndCount.count);\n    }\n\n    return new SimpleFacetResult(new FacetLabel(dim), dimCount, labelValues);\n  }\n\n","sourceOld":"  private final SimpleFacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdCountQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n\n    TopOrdCountQueue.OrdAndCount reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdCountQueue.OrdAndCount();\n          }\n          reuse.ord = ord;\n          reuse.count = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdCountQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().count;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdCountQueue.OrdAndCount ordAndCount = q.pop();\n      dv.lookupOrd(ordAndCount.ord, scratch);\n      String s = scratch.utf8ToString();\n      labelValues[i] = new LabelAndValue(s.substring(dim.length()+1, s.length()), ordAndCount.count);\n    }\n\n    return new SimpleFacetResult(new CategoryPath(dim), dimCount, labelValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0beaa29c2ed8a0b14b93f918dac041e6024d35d","date":1384809045,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","sourceNew":"  private final SimpleFacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String s = scratch.utf8ToString();\n      labelValues[i] = new LabelAndValue(s.substring(dim.length()+1, s.length()), ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(new FacetLabel(dim), dimCount, labelValues);\n  }\n\n","sourceOld":"  private final SimpleFacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdCountQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n\n    TopOrdCountQueue.OrdAndCount reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdCountQueue.OrdAndCount();\n          }\n          reuse.ord = ord;\n          reuse.count = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdCountQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().count;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdCountQueue.OrdAndCount ordAndCount = q.pop();\n      dv.lookupOrd(ordAndCount.ord, scratch);\n      String s = scratch.utf8ToString();\n      labelValues[i] = new LabelAndValue(s.substring(dim.length()+1, s.length()), ordAndCount.count);\n    }\n\n    return new SimpleFacetResult(new FacetLabel(dim), dimCount, labelValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19f5022544a8fc895776356d1b35a4b46d05945c","date":1385063323,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","sourceNew":"  private final SimpleFacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String[] parts = DocumentBuilder.stringToPath(scratch.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(new FacetLabel(dim), dimCount, labelValues);\n  }\n\n","sourceOld":"  private final SimpleFacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String s = scratch.utf8ToString();\n      labelValues[i] = new LabelAndValue(s.substring(dim.length()+1, s.length()), ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(new FacetLabel(dim), dimCount, labelValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae75def1e2525383b6e1397ed97c44387da9941c","date":1385249238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","sourceNew":"  private final SimpleFacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String[] parts = FacetsConfig.stringToPath(scratch.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(new FacetLabel(dim), dimCount, labelValues, childCount);\n  }\n\n","sourceOld":"  private final SimpleFacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String[] parts = DocumentBuilder.stringToPath(scratch.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(new FacetLabel(dim), dimCount, labelValues);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","sourceNew":"  private final SimpleFacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String[] parts = FacetsConfig.stringToPath(scratch.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(dimCount, labelValues, childCount);\n  }\n\n","sourceOld":"  private final SimpleFacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String[] parts = FacetsConfig.stringToPath(scratch.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(new FacetLabel(dim), dimCount, labelValues, childCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/SortedSetDocValuesFacetCounts#getDim(String,OrdRange,int).mjava","sourceNew":"  private final FacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String[] parts = FacetsConfig.stringToPath(scratch.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new FacetResult(dimCount, labelValues, childCount);\n  }\n\n","sourceOld":"  private final SimpleFacetResult getDim(String dim, OrdRange ordRange, int topN) {\n\n    TopOrdAndIntQueue q = null;\n\n    int bottomCount = 0;\n\n    int dimCount = 0;\n    int childCount = 0;\n\n    TopOrdAndIntQueue.OrdAndValue reuse = null;\n    //System.out.println(\"getDim : \" + ordRange.start + \" - \" + ordRange.end);\n    for(int ord=ordRange.start; ord<=ordRange.end; ord++) {\n      //System.out.println(\"  ord=\" + ord + \" count=\" + counts[ord]);\n      if (counts[ord] > 0) {\n        dimCount += counts[ord];\n        childCount++;\n        if (counts[ord] > bottomCount) {\n          if (reuse == null) {\n            reuse = new TopOrdAndIntQueue.OrdAndValue();\n          }\n          reuse.ord = ord;\n          reuse.value = counts[ord];\n          if (q == null) {\n            // Lazy init, so we don't create this for the\n            // sparse case unnecessarily\n            q = new TopOrdAndIntQueue(topN);\n          }\n          reuse = q.insertWithOverflow(reuse);\n          if (q.size() == topN) {\n            bottomCount = q.top().value;\n          }\n        }\n      }\n    }\n\n    if (q == null) {\n      return null;\n    }\n\n    BytesRef scratch = new BytesRef();\n\n    LabelAndValue[] labelValues = new LabelAndValue[q.size()];\n    for(int i=labelValues.length-1;i>=0;i--) {\n      TopOrdAndIntQueue.OrdAndValue ordAndValue = q.pop();\n      dv.lookupOrd(ordAndValue.ord, scratch);\n      String[] parts = FacetsConfig.stringToPath(scratch.utf8ToString());\n      labelValues[i] = new LabelAndValue(parts[1], ordAndValue.value);\n    }\n\n    return new SimpleFacetResult(dimCount, labelValues, childCount);\n  }\n\n","bugFix":null,"bugIntro":["f7558b5077dd4abd457be151475f13b541f4f13e"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"19f5022544a8fc895776356d1b35a4b46d05945c":["c0beaa29c2ed8a0b14b93f918dac041e6024d35d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"519ac3b8f2711b5bfeb1c90c77bb007032270a41":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["ae75def1e2525383b6e1397ed97c44387da9941c"],"c0beaa29c2ed8a0b14b93f918dac041e6024d35d":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae75def1e2525383b6e1397ed97c44387da9941c":["19f5022544a8fc895776356d1b35a4b46d05945c"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["519ac3b8f2711b5bfeb1c90c77bb007032270a41"]},"commit2Childs":{"19f5022544a8fc895776356d1b35a4b46d05945c":["ae75def1e2525383b6e1397ed97c44387da9941c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["519ac3b8f2711b5bfeb1c90c77bb007032270a41","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"519ac3b8f2711b5bfeb1c90c77bb007032270a41":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["21d36d0db865f7b84026b447bec653469a6e66df"],"c0beaa29c2ed8a0b14b93f918dac041e6024d35d":["19f5022544a8fc895776356d1b35a4b46d05945c"],"ae75def1e2525383b6e1397ed97c44387da9941c":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["c0beaa29c2ed8a0b14b93f918dac041e6024d35d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}