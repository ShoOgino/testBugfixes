{"path":"src/test-deprecated/org/apache/lucene/search/TestSort#assertMatchesPattern(Searcher,Query,Sort,String).mjava","commits":[{"id":"5b5461affe637a07375542c763a4805300802be8","date":1102270918,"type":0,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test-deprecated/org/apache/lucene/search/TestSort#assertMatchesPattern(Searcher,Query,Sort,String).mjava","pathOld":"/dev/null","sourceNew":"\t// make sure the documents returned by the search match the expected list pattern\n\tprivate void assertMatchesPattern (Searcher searcher, Query query, Sort sort, String pattern)\n\tthrows IOException {\n\t\tHits result = searcher.search (query, sort);\n\t\tStringBuffer buff = new StringBuffer(10);\n\t\tint n = result.length();\n\t\tfor (int i=0; i<n; ++i) {\n\t\t\tDocument doc = result.doc(i);\n\t\t\tString[] v = doc.getValues(\"tracer\");\n\t\t\tfor (int j=0; j<v.length; ++j) {\n\t\t\t\tbuff.append (v[j]);\n\t\t\t}\n\t\t}\n\t\t// System.out.println (\"matching \\\"\"+buff+\"\\\" against pattern \\\"\"+pattern+\"\\\"\");\n\t\tassertTrue (Pattern.compile(pattern).matcher(buff.toString()).matches());\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test-deprecated/org/apache/lucene/search/TestSort#assertMatchesPattern(Searcher,Query,Sort,String).mjava","sourceNew":null,"sourceOld":"\t// make sure the documents returned by the search match the expected list pattern\n\tprivate void assertMatchesPattern (Searcher searcher, Query query, Sort sort, String pattern)\n\tthrows IOException {\n\t\tHits result = searcher.search (query, sort);\n\t\tStringBuffer buff = new StringBuffer(10);\n\t\tint n = result.length();\n\t\tfor (int i=0; i<n; ++i) {\n\t\t\tDocument doc = result.doc(i);\n\t\t\tString[] v = doc.getValues(\"tracer\");\n\t\t\tfor (int j=0; j<v.length; ++j) {\n\t\t\t\tbuff.append (v[j]);\n\t\t\t}\n\t\t}\n\t\t// System.out.println (\"matching \\\"\"+buff+\"\\\" against pattern \\\"\"+pattern+\"\\\"\");\n\t\tassertTrue (Pattern.compile(pattern).matcher(buff.toString()).matches());\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b5461affe637a07375542c763a4805300802be8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["5b5461affe637a07375542c763a4805300802be8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"5b5461affe637a07375542c763a4805300802be8":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5461affe637a07375542c763a4805300802be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}