{"path":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareBottom(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareBottom(int).mjava","pathOld":"lucene/contrib/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) {\n    final String val2 = currentDocTerms.getTerm(doc, tempBR).utf8ToString();\n    if (bottom == null) {\n      if (val2 == null) {\n        return 0;\n      }\n      return -1;\n    } else if (val2 == null) {\n      return 1;\n    }\n    return collator.compare(bottom, val2);\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) {\n    final String val2 = currentDocTerms.getTerm(doc, tempBR).utf8ToString();\n    if (bottom == null) {\n      if (val2 == null) {\n        return 0;\n      }\n      return -1;\n    } else if (val2 == null) {\n      return 1;\n    }\n    return collator.compare(bottom, val2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dd9934a49477c83301120ba51827d91eb3606d5","date":1353767072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) {\n    currentDocTerms.get(doc, tempBR);\n    final String val2 = tempBR.bytes == BinaryDocValues.MISSING ? null : tempBR.utf8ToString();\n    if (bottom == null) {\n      if (val2 == null) {\n        return 0;\n      }\n      return -1;\n    } else if (val2 == null) {\n      return 1;\n    }\n    return collator.compare(bottom, val2);\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) {\n    final String val2 = currentDocTerms.getTerm(doc, tempBR).utf8ToString();\n    if (bottom == null) {\n      if (val2 == null) {\n        return 0;\n      }\n      return -1;\n    } else if (val2 == null) {\n      return 1;\n    }\n    return collator.compare(bottom, val2);\n  }\n\n","bugFix":null,"bugIntro":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) {\n    currentDocTerms.get(doc, tempBR);\n    final String val2 = tempBR.bytes == BinaryDocValues.MISSING ? null : tempBR.utf8ToString();\n    if (bottom == null) {\n      if (val2 == null) {\n        return 0;\n      }\n      return -1;\n    } else if (val2 == null) {\n      return 1;\n    }\n    return collator.compare(bottom, val2);\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) {\n    final String val2 = currentDocTerms.getTerm(doc, tempBR).utf8ToString();\n    if (bottom == null) {\n      if (val2 == null) {\n        return 0;\n      }\n      return -1;\n    } else if (val2 == null) {\n      return 1;\n    }\n    return collator.compare(bottom, val2);\n  }\n\n","bugFix":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87d6f9603307ae2ad642fb01deedf031320fd0c3","date":1377877563,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) {\n    currentDocTerms.get(doc, tempBR);\n    final String val2 = tempBR.length == 0 && docsWithField.get(doc) == false ? null : tempBR.utf8ToString();\n    if (bottom == null) {\n      if (val2 == null) {\n        return 0;\n      }\n      return -1;\n    } else if (val2 == null) {\n      return 1;\n    }\n    return collator.compare(bottom, val2);\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) {\n    currentDocTerms.get(doc, tempBR);\n    final String val2 = tempBR.bytes == BinaryDocValues.MISSING ? null : tempBR.utf8ToString();\n    if (bottom == null) {\n      if (val2 == null) {\n        return 0;\n      }\n      return -1;\n    } else if (val2 == null) {\n      return 1;\n    }\n    return collator.compare(bottom, val2);\n  }\n\n","bugFix":["2dd9934a49477c83301120ba51827d91eb3606d5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareBottom(int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareBottom(int).mjava","sourceNew":"  @Override\n  public int compareBottom(int doc) {\n    final BytesRef term = currentDocTerms.get(doc);\n    final String val2 = term.length == 0 && docsWithField.get(doc) == false ? null : term.utf8ToString();\n    if (bottom == null) {\n      if (val2 == null) {\n        return 0;\n      }\n      return -1;\n    } else if (val2 == null) {\n      return 1;\n    }\n    return collator.compare(bottom, val2);\n  }\n\n","sourceOld":"  @Override\n  public int compareBottom(int doc) {\n    currentDocTerms.get(doc, tempBR);\n    final String val2 = tempBR.length == 0 && docsWithField.get(doc) == false ? null : tempBR.utf8ToString();\n    if (bottom == null) {\n      if (val2 == null) {\n        return 0;\n      }\n      return -1;\n    } else if (val2 == null) {\n      return 1;\n    }\n    return collator.compare(bottom, val2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59cae262d4251e10e2a034b17c45776f6b4c7e68","date":1424712773,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/SlowCollatedStringComparator#compareBottom(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int compareBottom(int doc) {\n    final BytesRef term = currentDocTerms.get(doc);\n    final String val2 = term.length == 0 && docsWithField.get(doc) == false ? null : term.utf8ToString();\n    if (bottom == null) {\n      if (val2 == null) {\n        return 0;\n      }\n      return -1;\n    } else if (val2 == null) {\n      return 1;\n    }\n    return collator.compare(bottom, val2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2dd9934a49477c83301120ba51827d91eb3606d5"],"59cae262d4251e10e2a034b17c45776f6b4c7e68":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"2dd9934a49477c83301120ba51827d91eb3606d5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59cae262d4251e10e2a034b17c45776f6b4c7e68"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d4d69c535930b5cce125cff868d40f6373dc27d4","2dd9934a49477c83301120ba51827d91eb3606d5"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"2dd9934a49477c83301120ba51827d91eb3606d5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"59cae262d4251e10e2a034b17c45776f6b4c7e68":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["59cae262d4251e10e2a034b17c45776f6b4c7e68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}