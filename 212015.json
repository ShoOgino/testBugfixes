{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","commits":[{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n    final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n    final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n    if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot parse range query \" + part1 + \" to \" + part2 +\n              \": range queries only supported when upper and lower bound have same currency.\");\n    }\n\n    return getRangeQuery(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n    final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n    final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n    if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot parse range query \" + part1 + \" to \" + part2 +\n              \": range queries only supported when upper and lower bound have same currency.\");\n    }\n\n    return getRangeQuery(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n    final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n    final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n    if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot parse range query \" + part1 + \" to \" + part2 +\n              \": range queries only supported when upper and lower bound have same currency.\");\n    }\n\n    return getRangeQuery(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c81907bd971f786e378654d32b80da32b0e950d","date":1578330742,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n    final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n    final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n    if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot parse range query \" + part1 + \" to \" + part2 +\n              \": range queries only supported when upper and lower bound have same currency.\");\n    }\n\n    return getRangeQueryInternal(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n    final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n    final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n    if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot parse range query \" + part1 + \" to \" + part2 +\n              \": range queries only supported when upper and lower bound have same currency.\");\n    }\n\n    return getRangeQuery(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca62564055241632cd20d65b5ecb8c8e93bd60c4","date":1578383112,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n    final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n    final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n    if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot parse range query \" + part1 + \" to \" + part2 +\n              \": range queries only supported when upper and lower bound have same currency.\");\n    }\n\n    return getRangeQueryInternal(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n    final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n    final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n    if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot parse range query \" + part1 + \" to \" + part2 +\n              \": range queries only supported when upper and lower bound have same currency.\");\n    }\n\n    return getRangeQuery(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8381df1a98f2a399bf06d747fc8cea1b2a17ae38","date":1578526395,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n    final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n    final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n    if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot parse range query \" + part1 + \" to \" + part2 +\n              \": range queries only supported when upper and lower bound have same currency.\");\n    }\n\n    return getRangeQuery(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n    final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n    final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n    if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot parse range query \" + part1 + \" to \" + part2 +\n              \": range queries only supported when upper and lower bound have same currency.\");\n    }\n\n    return getRangeQueryInternal(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n    final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n    final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n    if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot parse range query \" + part1 + \" to \" + part2 +\n              \": range queries only supported when upper and lower bound have same currency.\");\n    }\n\n    return getRangeQuery(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n    final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n    final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n    if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot parse range query \" + part1 + \" to \" + part2 +\n              \": range queries only supported when upper and lower bound have same currency.\");\n    }\n\n    return getRangeQueryInternal(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7ba457c7f2595139254fab54362be336c5c355","date":1579734055,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getSpecializedRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  protected Query getSpecializedRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n    final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n    final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n    if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot parse range query \" + part1 + \" to \" + part2 +\n              \": range queries only supported when upper and lower bound have same currency.\");\n    }\n\n    return getRangeQueryInternal(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String part1, String part2, final boolean minInclusive, final boolean maxInclusive) {\n    final CurrencyValue p1 = CurrencyValue.parse(part1, defaultCurrency);\n    final CurrencyValue p2 = CurrencyValue.parse(part2, defaultCurrency);\n\n    if (p1 != null && p2 != null && !p1.getCurrencyCode().equals(p2.getCurrencyCode())) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Cannot parse range query \" + part1 + \" to \" + part2 +\n              \": range queries only supported when upper and lower bound have same currency.\");\n    }\n\n    return getRangeQuery(parser, field, p1, p2, minInclusive, maxInclusive);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["0c81907bd971f786e378654d32b80da32b0e950d"],"0c81907bd971f786e378654d32b80da32b0e950d":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1da93834e39ce341a13e42b611d0a83bd3114bba":["ca62564055241632cd20d65b5ecb8c8e93bd60c4","8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"5c7ba457c7f2595139254fab54362be336c5c355":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["28288370235ed02234a64753cdbf0c6ec096304a","0c81907bd971f786e378654d32b80da32b0e950d"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c7ba457c7f2595139254fab54362be336c5c355"],"f107636c2cc82350a2607d774c092da5b73152e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8381df1a98f2a399bf06d747fc8cea1b2a17ae38":["1da93834e39ce341a13e42b611d0a83bd3114bba","5c7ba457c7f2595139254fab54362be336c5c355"],"0c81907bd971f786e378654d32b80da32b0e950d":["8381df1a98f2a399bf06d747fc8cea1b2a17ae38","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"5c7ba457c7f2595139254fab54362be336c5c355":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ca62564055241632cd20d65b5ecb8c8e93bd60c4":["1da93834e39ce341a13e42b611d0a83bd3114bba"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["0c81907bd971f786e378654d32b80da32b0e950d","ca62564055241632cd20d65b5ecb8c8e93bd60c4"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}