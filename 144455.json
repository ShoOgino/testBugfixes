{"path":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int).mjava","commits":[{"id":"961159f13aece73fbb30aea720e77a2237e8bafd","date":1247258916,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean).mjava","sourceNew":"    // Returns a ref to a clone.  NOTE: this clone is not\n    // enrolled in the pool, so you should simply close()\n    // it when you're done (ie, do not call release()).\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, int termInfosIndexDivisor) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, termInfosIndexDivisor);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    // Returns a ref to a clone.  NOTE: this clone is not\n    // enrolled in the pool, so you should simply close()\n    // it when you're done (ie, do not call release()).\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores) throws IOException {\n      SegmentReader sr = get(info, doOpenStores);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f33fc116e28d7704378c9dd333711753bd0c9706","date":1248010179,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int).mjava","sourceNew":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, int termInfosIndexDivisor) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, termInfosIndexDivisor);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    // Returns a ref to a clone.  NOTE: this clone is not\n    // enrolled in the pool, so you should simply close()\n    // it when you're done (ie, do not call release()).\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, int termInfosIndexDivisor) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, termInfosIndexDivisor);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter.ReaderPool#getReadOnlyClone(SegmentInfo,boolean,int).mjava","sourceNew":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, int termInfosIndexDivisor) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, termInfosIndexDivisor);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","sourceOld":"    /**\n     * Returns a ref to a clone.  NOTE: this clone is not\n     * enrolled in the pool, so you should simply close()\n     * it when you're done (ie, do not call release()).\n     */\n    public synchronized SegmentReader getReadOnlyClone(SegmentInfo info, boolean doOpenStores, int termInfosIndexDivisor) throws IOException {\n      SegmentReader sr = get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, termInfosIndexDivisor);\n      try {\n        return (SegmentReader) sr.clone(true);\n      } finally {\n        sr.decRef();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f33fc116e28d7704378c9dd333711753bd0c9706":["961159f13aece73fbb30aea720e77a2237e8bafd"],"961159f13aece73fbb30aea720e77a2237e8bafd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f33fc116e28d7704378c9dd333711753bd0c9706"]},"commit2Childs":{"f33fc116e28d7704378c9dd333711753bd0c9706":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"961159f13aece73fbb30aea720e77a2237e8bafd":["f33fc116e28d7704378c9dd333711753bd0c9706"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["961159f13aece73fbb30aea720e77a2237e8bafd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}