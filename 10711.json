{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertAggregateMetric(String,AggregateMetric,boolean,boolean,BiConsumer[String,Object]).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertAggregateMetric(String,AggregateMetric,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert an instance of {@link AggregateMetric}.\n   * @param name metric name\n   * @param metric an instance of {@link AggregateMetric}\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertAggregateMetric(String name, AggregateMetric metric,\n      boolean skipAggregateValues, boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      consumer.accept(name + \".\" + MEAN, metric.getMean());\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      response.put(\"count\", metric.size());\n      response.put(MAX, metric.getMax());\n      response.put(MIN, metric.getMin());\n      response.put(MEAN, metric.getMean());\n      response.put(STDDEV, metric.getStdDev());\n      response.put(SUM, metric.getSum());\n      if (!(metric.isEmpty() || skipAggregateValues)) {\n        Map<String, Object> values = new LinkedHashMap<>();\n        response.put(VALUES, values);\n        metric.getValues().forEach((k, v) -> {\n          Map<String, Object> map = new LinkedHashMap<>();\n          map.put(\"value\", v.value);\n          map.put(\"updateCount\", v.updateCount.get());\n          values.put(k, map);\n        });\n      }\n      consumer.accept(name, response);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d6879a535f14bc53be7c86de58142558c4f9eee","date":1492512399,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertAggregateMetric(String,AggregateMetric,PropertyFilter,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertAggregateMetric(String,AggregateMetric,boolean,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert an instance of {@link AggregateMetric}.\n   * @param name metric name\n   * @param metric an instance of {@link AggregateMetric}\n   * @param propertyFilter limit what properties of a metric are returned\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertAggregateMetric(String name, AggregateMetric metric,\n      PropertyFilter propertyFilter,\n      boolean skipAggregateValues, boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      if (propertyFilter.accept(MEAN)) {\n        consumer.accept(name + \".\" + MEAN, metric.getMean());\n      }\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      BiConsumer<String, Object> filter = (k, v) -> {\n        if (propertyFilter.accept(k)) {\n          response.put(k, v);\n        }\n      };\n      filter.accept(\"count\", metric.size());\n      filter.accept(MAX, metric.getMax());\n      filter.accept(MIN, metric.getMin());\n      filter.accept(MEAN, metric.getMean());\n      filter.accept(STDDEV, metric.getStdDev());\n      filter.accept(SUM, metric.getSum());\n      if (!(metric.isEmpty() || skipAggregateValues)) {\n        Map<String, Object> values = new LinkedHashMap<>();\n        response.put(VALUES, values);\n        metric.getValues().forEach((k, v) -> {\n          Map<String, Object> map = new LinkedHashMap<>();\n          map.put(\"value\", v.value);\n          map.put(\"updateCount\", v.updateCount.get());\n          values.put(k, map);\n        });\n      }\n      if (!response.isEmpty()) {\n        consumer.accept(name, response);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Convert an instance of {@link AggregateMetric}.\n   * @param name metric name\n   * @param metric an instance of {@link AggregateMetric}\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  static void convertAggregateMetric(String name, AggregateMetric metric,\n      boolean skipAggregateValues, boolean simple, BiConsumer<String, Object> consumer) {\n    if (simple) {\n      consumer.accept(name + \".\" + MEAN, metric.getMean());\n    } else {\n      Map<String, Object> response = new LinkedHashMap<>();\n      response.put(\"count\", metric.size());\n      response.put(MAX, metric.getMax());\n      response.put(MIN, metric.getMin());\n      response.put(MEAN, metric.getMean());\n      response.put(STDDEV, metric.getStdDev());\n      response.put(SUM, metric.getSum());\n      if (!(metric.isEmpty() || skipAggregateValues)) {\n        Map<String, Object> values = new LinkedHashMap<>();\n        response.put(VALUES, values);\n        metric.getValues().forEach((k, v) -> {\n          Map<String, Object> map = new LinkedHashMap<>();\n          map.put(\"value\", v.value);\n          map.put(\"updateCount\", v.updateCount.get());\n          values.put(k, map);\n        });\n      }\n      consumer.accept(name, response);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0d6879a535f14bc53be7c86de58142558c4f9eee":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}