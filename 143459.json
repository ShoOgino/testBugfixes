{"path":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomWords(int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomWords(int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomWords(int,int).mjava","sourceNew":"  private void testRandomWords(int maxNumWords, int numIter) throws IOException {\n    for(int iter=0;iter<numIter;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter \" + iter);\n      }\n      for(int inputMode=0;inputMode<2;inputMode++) {\n        final int numWords = random.nextInt(maxNumWords+1);\n        Set<IntsRef> termsSet = new HashSet<IntsRef>();\n        IntsRef[] terms = new IntsRef[numWords];\n        while(termsSet.size() < numWords) {\n          final String term = getRandomString();\n          termsSet.add(toIntsRef(term, inputMode));\n        }\n        doTest(inputMode, termsSet.toArray(new IntsRef[termsSet.size()]));\n      }\n    }\n  }\n\n","sourceOld":"  private void testRandomWords(int maxNumWords, int numIter) throws IOException {\n    for(int iter=0;iter<numIter;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter \" + iter);\n      }\n      for(int inputMode=0;inputMode<2;inputMode++) {\n        final int numWords = random.nextInt(maxNumWords+1);\n        Set<IntsRef> termsSet = new HashSet<IntsRef>();\n        IntsRef[] terms = new IntsRef[numWords];\n        while(termsSet.size() < numWords) {\n          final String term = getRandomString();\n          termsSet.add(toIntsRef(term, inputMode));\n        }\n        doTest(inputMode, termsSet.toArray(new IntsRef[termsSet.size()]));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomWords(int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomWords(int,int).mjava","sourceNew":"  private void testRandomWords(int maxNumWords, int numIter) throws IOException {\n    Random random = new Random(random().nextLong());\n    for(int iter=0;iter<numIter;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter \" + iter);\n      }\n      for(int inputMode=0;inputMode<2;inputMode++) {\n        final int numWords = random.nextInt(maxNumWords+1);\n        Set<IntsRef> termsSet = new HashSet<IntsRef>();\n        IntsRef[] terms = new IntsRef[numWords];\n        while(termsSet.size() < numWords) {\n          final String term = getRandomString(random);\n          termsSet.add(toIntsRef(term, inputMode));\n        }\n        doTest(inputMode, termsSet.toArray(new IntsRef[termsSet.size()]));\n      }\n    }\n  }\n\n","sourceOld":"  private void testRandomWords(int maxNumWords, int numIter) throws IOException {\n    for(int iter=0;iter<numIter;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter \" + iter);\n      }\n      for(int inputMode=0;inputMode<2;inputMode++) {\n        final int numWords = random.nextInt(maxNumWords+1);\n        Set<IntsRef> termsSet = new HashSet<IntsRef>();\n        IntsRef[] terms = new IntsRef[numWords];\n        while(termsSet.size() < numWords) {\n          final String term = getRandomString();\n          termsSet.add(toIntsRef(term, inputMode));\n        }\n        doTest(inputMode, termsSet.toArray(new IntsRef[termsSet.size()]));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomWords(int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/fst/TestFSTs#testRandomWords(int,int).mjava","sourceNew":"  private void testRandomWords(int maxNumWords, int numIter) throws IOException {\n    Random random = new Random(random().nextLong());\n    for(int iter=0;iter<numIter;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter \" + iter);\n      }\n      for(int inputMode=0;inputMode<2;inputMode++) {\n        final int numWords = random.nextInt(maxNumWords+1);\n        Set<IntsRef> termsSet = new HashSet<>();\n        IntsRef[] terms = new IntsRef[numWords];\n        while(termsSet.size() < numWords) {\n          final String term = getRandomString(random);\n          termsSet.add(toIntsRef(term, inputMode));\n        }\n        doTest(inputMode, termsSet.toArray(new IntsRef[termsSet.size()]));\n      }\n    }\n  }\n\n","sourceOld":"  private void testRandomWords(int maxNumWords, int numIter) throws IOException {\n    Random random = new Random(random().nextLong());\n    for(int iter=0;iter<numIter;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter \" + iter);\n      }\n      for(int inputMode=0;inputMode<2;inputMode++) {\n        final int numWords = random.nextInt(maxNumWords+1);\n        Set<IntsRef> termsSet = new HashSet<IntsRef>();\n        IntsRef[] terms = new IntsRef[numWords];\n        while(termsSet.size() < numWords) {\n          final String term = getRandomString(random);\n          termsSet.add(toIntsRef(term, inputMode));\n        }\n        doTest(inputMode, termsSet.toArray(new IntsRef[termsSet.size()]));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}