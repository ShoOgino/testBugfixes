{"path":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testNestedSpanQueryHighlight().mjava","commits":[{"id":"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571","date":1515642580,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testNestedSpanQueryHighlight().mjava","pathOld":"/dev/null","sourceNew":"  // Ported from LUCENE-5455 (fixed in LUCENE-8121).  Also see LUCENE-2287.\n  public void testNestedSpanQueryHighlight() throws Exception {\n    // For a long time, the highlighters used to assume all query terms within the SpanQuery were valid at the Spans'\n    //   position range.  This would highlight occurrences of terms that were actually not matched by the query.\n    //   But now using the SpanCollector API we don't make this kind of mistake.\n    final String FIELD_NAME = \"body\";\n    final String indexedText = \"x y z x z x a\";\n    indexWriter.addDocument(newDoc(indexedText));\n    initReaderSearcherHighlighter();\n    TopDocs topDocs = new TopDocs(1, new ScoreDoc[]{new ScoreDoc(0, 1f)}, 1f);\n\n    String expected = \"<b>x</b> <b>y</b> <b>z</b> x z x <b>a</b>\";\n    Query q = new SpanNearQuery(new SpanQuery[] {\n        new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"y\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    String observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query not properly highlighted.\", expected, observed);\n\n    expected = \"x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanOrQuery(\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"y\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true)),\n        new SpanOrQuery(\n            new SpanTermQuery(new Term(FIELD_NAME, \"a\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"b\")))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query within SpanOr not properly highlighted.\", expected, observed);\n\n    expected = \"x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanNearQuery(new SpanQuery[] {\n            new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(FIELD_NAME, \"*\"))),\n            new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query with wildcard not properly highlighted.\", expected, observed);\n\n    expected = \"<b>x</b> <b>y</b> z x z x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanOrQuery(\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"y\"))}, 0, true),\n            new SpanNearQuery(new SpanQuery[] { //No hit span query\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 0, true)),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query within SpanOr not properly highlighted.\", expected, observed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testNestedSpanQueryHighlight().mjava","pathOld":"/dev/null","sourceNew":"  // Ported from LUCENE-5455 (fixed in LUCENE-8121).  Also see LUCENE-2287.\n  public void testNestedSpanQueryHighlight() throws Exception {\n    // For a long time, the highlighters used to assume all query terms within the SpanQuery were valid at the Spans'\n    //   position range.  This would highlight occurrences of terms that were actually not matched by the query.\n    //   But now using the SpanCollector API we don't make this kind of mistake.\n    final String FIELD_NAME = \"body\";\n    final String indexedText = \"x y z x z x a\";\n    indexWriter.addDocument(newDoc(indexedText));\n    initReaderSearcherHighlighter();\n    TopDocs topDocs = new TopDocs(1, new ScoreDoc[]{new ScoreDoc(0, 1f)}, 1f);\n\n    String expected = \"<b>x</b> <b>y</b> <b>z</b> x z x <b>a</b>\";\n    Query q = new SpanNearQuery(new SpanQuery[] {\n        new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"y\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    String observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query not properly highlighted.\", expected, observed);\n\n    expected = \"x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanOrQuery(\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"y\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true)),\n        new SpanOrQuery(\n            new SpanTermQuery(new Term(FIELD_NAME, \"a\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"b\")))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query within SpanOr not properly highlighted.\", expected, observed);\n\n    expected = \"x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanNearQuery(new SpanQuery[] {\n            new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(FIELD_NAME, \"*\"))),\n            new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query with wildcard not properly highlighted.\", expected, observed);\n\n    expected = \"<b>x</b> <b>y</b> z x z x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanOrQuery(\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"y\"))}, 0, true),\n            new SpanNearQuery(new SpanQuery[] { //No hit span query\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 0, true)),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query within SpanOr not properly highlighted.\", expected, observed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testNestedSpanQueryHighlight().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testNestedSpanQueryHighlight().mjava","sourceNew":"  // Ported from LUCENE-5455 (fixed in LUCENE-8121).  Also see LUCENE-2287.\n  public void testNestedSpanQueryHighlight() throws Exception {\n    // For a long time, the highlighters used to assume all query terms within the SpanQuery were valid at the Spans'\n    //   position range.  This would highlight occurrences of terms that were actually not matched by the query.\n    //   But now using the SpanCollector API we don't make this kind of mistake.\n    final String FIELD_NAME = \"body\";\n    final String indexedText = \"x y z x z x a\";\n    indexWriter.addDocument(newDoc(indexedText));\n    initReaderSearcherHighlighter();\n    TopDocs topDocs = new TopDocs(1, new ScoreDoc[]{new ScoreDoc(0, 1f)});\n\n    String expected = \"<b>x</b> <b>y</b> <b>z</b> x z x <b>a</b>\";\n    Query q = new SpanNearQuery(new SpanQuery[] {\n        new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"y\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    String observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query not properly highlighted.\", expected, observed);\n\n    expected = \"x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanOrQuery(\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"y\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true)),\n        new SpanOrQuery(\n            new SpanTermQuery(new Term(FIELD_NAME, \"a\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"b\")))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query within SpanOr not properly highlighted.\", expected, observed);\n\n    expected = \"x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanNearQuery(new SpanQuery[] {\n            new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(FIELD_NAME, \"*\"))),\n            new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query with wildcard not properly highlighted.\", expected, observed);\n\n    expected = \"<b>x</b> <b>y</b> z x z x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanOrQuery(\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"y\"))}, 0, true),\n            new SpanNearQuery(new SpanQuery[] { //No hit span query\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 0, true)),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query within SpanOr not properly highlighted.\", expected, observed);\n  }\n\n","sourceOld":"  // Ported from LUCENE-5455 (fixed in LUCENE-8121).  Also see LUCENE-2287.\n  public void testNestedSpanQueryHighlight() throws Exception {\n    // For a long time, the highlighters used to assume all query terms within the SpanQuery were valid at the Spans'\n    //   position range.  This would highlight occurrences of terms that were actually not matched by the query.\n    //   But now using the SpanCollector API we don't make this kind of mistake.\n    final String FIELD_NAME = \"body\";\n    final String indexedText = \"x y z x z x a\";\n    indexWriter.addDocument(newDoc(indexedText));\n    initReaderSearcherHighlighter();\n    TopDocs topDocs = new TopDocs(1, new ScoreDoc[]{new ScoreDoc(0, 1f)}, 1f);\n\n    String expected = \"<b>x</b> <b>y</b> <b>z</b> x z x <b>a</b>\";\n    Query q = new SpanNearQuery(new SpanQuery[] {\n        new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"y\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    String observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query not properly highlighted.\", expected, observed);\n\n    expected = \"x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanOrQuery(\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"y\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true)),\n        new SpanOrQuery(\n            new SpanTermQuery(new Term(FIELD_NAME, \"a\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"b\")))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query within SpanOr not properly highlighted.\", expected, observed);\n\n    expected = \"x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanNearQuery(new SpanQuery[] {\n            new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(FIELD_NAME, \"*\"))),\n            new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query with wildcard not properly highlighted.\", expected, observed);\n\n    expected = \"<b>x</b> <b>y</b> z x z x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanOrQuery(\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"y\"))}, 0, true),\n            new SpanNearQuery(new SpanQuery[] { //No hit span query\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 0, true)),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query within SpanOr not properly highlighted.\", expected, observed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testNestedSpanQueryHighlight().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testNestedSpanQueryHighlight().mjava","sourceNew":"  // Ported from LUCENE-5455 (fixed in LUCENE-8121).  Also see LUCENE-2287.\n  public void testNestedSpanQueryHighlight() throws Exception {\n    // For a long time, the highlighters used to assume all query terms within the SpanQuery were valid at the Spans'\n    //   position range.  This would highlight occurrences of terms that were actually not matched by the query.\n    //   But now using the SpanCollector API we don't make this kind of mistake.\n    final String FIELD_NAME = \"body\";\n    final String indexedText = \"x y z x z x a\";\n    indexWriter.addDocument(newDoc(indexedText));\n    initReaderSearcherHighlighter();\n    TopDocs topDocs = new TopDocs(1, new ScoreDoc[]{new ScoreDoc(0, 1f)});\n\n    String expected = \"<b>x</b> <b>y</b> <b>z</b> x z x <b>a</b>\";\n    Query q = new SpanNearQuery(new SpanQuery[] {\n        new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"y\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    String observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query not properly highlighted.\", expected, observed);\n\n    expected = \"x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanOrQuery(\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"y\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true)),\n        new SpanOrQuery(\n            new SpanTermQuery(new Term(FIELD_NAME, \"a\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"b\")))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query within SpanOr not properly highlighted.\", expected, observed);\n\n    expected = \"x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanNearQuery(new SpanQuery[] {\n            new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(FIELD_NAME, \"*\"))),\n            new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query with wildcard not properly highlighted.\", expected, observed);\n\n    expected = \"<b>x</b> <b>y</b> z x z x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanOrQuery(\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"y\"))}, 0, true),\n            new SpanNearQuery(new SpanQuery[] { //No hit span query\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 0, true)),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query within SpanOr not properly highlighted.\", expected, observed);\n  }\n\n","sourceOld":"  // Ported from LUCENE-5455 (fixed in LUCENE-8121).  Also see LUCENE-2287.\n  public void testNestedSpanQueryHighlight() throws Exception {\n    // For a long time, the highlighters used to assume all query terms within the SpanQuery were valid at the Spans'\n    //   position range.  This would highlight occurrences of terms that were actually not matched by the query.\n    //   But now using the SpanCollector API we don't make this kind of mistake.\n    final String FIELD_NAME = \"body\";\n    final String indexedText = \"x y z x z x a\";\n    indexWriter.addDocument(newDoc(indexedText));\n    initReaderSearcherHighlighter();\n    TopDocs topDocs = new TopDocs(1, new ScoreDoc[]{new ScoreDoc(0, 1f)}, 1f);\n\n    String expected = \"<b>x</b> <b>y</b> <b>z</b> x z x <b>a</b>\";\n    Query q = new SpanNearQuery(new SpanQuery[] {\n        new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"y\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    String observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query not properly highlighted.\", expected, observed);\n\n    expected = \"x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanOrQuery(\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"y\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true)),\n        new SpanOrQuery(\n            new SpanTermQuery(new Term(FIELD_NAME, \"a\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"b\")))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query within SpanOr not properly highlighted.\", expected, observed);\n\n    expected = \"x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanNearQuery(new SpanQuery[] {\n            new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(FIELD_NAME, \"*\"))),\n            new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query with wildcard not properly highlighted.\", expected, observed);\n\n    expected = \"<b>x</b> <b>y</b> z x z x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanOrQuery(\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"y\"))}, 0, true),\n            new SpanNearQuery(new SpanQuery[] { //No hit span query\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 0, true)),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query within SpanOr not properly highlighted.\", expected, observed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testNestedSpanQueryHighlight().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/TestUnifiedHighlighterStrictPhrases#testNestedSpanQueryHighlight().mjava","sourceNew":"  // Ported from LUCENE-5455 (fixed in LUCENE-8121).  Also see LUCENE-2287.\n  public void testNestedSpanQueryHighlight() throws Exception {\n    // For a long time, the highlighters used to assume all query terms within the SpanQuery were valid at the Spans'\n    //   position range.  This would highlight occurrences of terms that were actually not matched by the query.\n    //   But now using the SpanCollector API we don't make this kind of mistake.\n    final String FIELD_NAME = \"body\";\n    final String indexedText = \"x y z x z x a\";\n    indexWriter.addDocument(newDoc(indexedText));\n    initReaderSearcherHighlighter();\n    TopDocs topDocs = new TopDocs(new TotalHits(1, TotalHits.Relation.EQUAL_TO), new ScoreDoc[]{new ScoreDoc(0, 1f)});\n\n    String expected = \"<b>x</b> <b>y</b> <b>z</b> x z x <b>a</b>\";\n    Query q = new SpanNearQuery(new SpanQuery[] {\n        new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"y\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    String observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query not properly highlighted.\", expected, observed);\n\n    expected = \"x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanOrQuery(\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"y\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true)),\n        new SpanOrQuery(\n            new SpanTermQuery(new Term(FIELD_NAME, \"a\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"b\")))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query within SpanOr not properly highlighted.\", expected, observed);\n\n    expected = \"x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanNearQuery(new SpanQuery[] {\n            new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(FIELD_NAME, \"*\"))),\n            new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query with wildcard not properly highlighted.\", expected, observed);\n\n    expected = \"<b>x</b> <b>y</b> z x z x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanOrQuery(\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"y\"))}, 0, true),\n            new SpanNearQuery(new SpanQuery[] { //No hit span query\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 0, true)),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query within SpanOr not properly highlighted.\", expected, observed);\n  }\n\n","sourceOld":"  // Ported from LUCENE-5455 (fixed in LUCENE-8121).  Also see LUCENE-2287.\n  public void testNestedSpanQueryHighlight() throws Exception {\n    // For a long time, the highlighters used to assume all query terms within the SpanQuery were valid at the Spans'\n    //   position range.  This would highlight occurrences of terms that were actually not matched by the query.\n    //   But now using the SpanCollector API we don't make this kind of mistake.\n    final String FIELD_NAME = \"body\";\n    final String indexedText = \"x y z x z x a\";\n    indexWriter.addDocument(newDoc(indexedText));\n    initReaderSearcherHighlighter();\n    TopDocs topDocs = new TopDocs(1, new ScoreDoc[]{new ScoreDoc(0, 1f)});\n\n    String expected = \"<b>x</b> <b>y</b> <b>z</b> x z x <b>a</b>\";\n    Query q = new SpanNearQuery(new SpanQuery[] {\n        new SpanNearQuery(new SpanQuery[] {\n            new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"y\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    String observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query not properly highlighted.\", expected, observed);\n\n    expected = \"x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanOrQuery(\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"y\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true)),\n        new SpanOrQuery(\n            new SpanTermQuery(new Term(FIELD_NAME, \"a\")),\n            new SpanTermQuery(new Term(FIELD_NAME, \"b\")))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query within SpanOr not properly highlighted.\", expected, observed);\n\n    expected = \"x <b>y</b> <b>z</b> <b>x</b> <b>z</b> x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanNearQuery(new SpanQuery[] {\n            new SpanMultiTermQueryWrapper<>(new WildcardQuery(new Term(FIELD_NAME, \"*\"))),\n            new SpanTermQuery(new Term(FIELD_NAME, \"z\"))}, 0, true),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query with wildcard not properly highlighted.\", expected, observed);\n\n    expected = \"<b>x</b> <b>y</b> z x z x <b>a</b>\";\n    q = new SpanNearQuery(new SpanQuery[] {\n        new SpanOrQuery(\n            new SpanNearQuery(new SpanQuery[] {\n                new SpanTermQuery(new Term(FIELD_NAME, \"x\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"y\"))}, 0, true),\n            new SpanNearQuery(new SpanQuery[] { //No hit span query\n                new SpanTermQuery(new Term(FIELD_NAME, \"z\")),\n                new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 0, true)),\n        new SpanTermQuery(new Term(FIELD_NAME, \"a\"))}, 10, false);\n    observed = highlighter.highlight(FIELD_NAME, q, topDocs)[0];\n    if (VERBOSE) System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n    assertEquals(\"Nested SpanNear query within SpanOr not properly highlighted.\", expected, observed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b94236357aaa22b76c10629851fe4e376e0cea82","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571"],"eef54e3d232eae0e9fc18d75e9b0c3d9ce04b571":["b94236357aaa22b76c10629851fe4e376e0cea82"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83788ad129a5154d5c6562c4e8ce3db48793aada"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}