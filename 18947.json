{"path":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery#checkQuery(SpanQuery,PayloadFunction,boolean,int[],float[]).mjava","commits":[{"id":"13406cad512adb18f0b9447f1f35385a56a7bd88","date":1445252017,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery#checkQuery(SpanQuery,PayloadFunction,boolean,int[],float[]).mjava","pathOld":"/dev/null","sourceNew":"  private static void checkQuery(SpanQuery query, PayloadFunction function, boolean includeSpanScore, int[] expectedDocs, float[] expectedScores) throws IOException {\n\n    assertTrue(\"Expected docs and scores arrays must be the same length!\", expectedDocs.length == expectedScores.length);\n\n    PayloadScoreQuery psq = new PayloadScoreQuery(query, function, includeSpanScore);\n    TopDocs hits = searcher.search(psq, expectedDocs.length);\n\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      if (i > expectedDocs.length - 1)\n        fail(\"Unexpected hit in document \" + hits.scoreDocs[i].doc);\n      if (hits.scoreDocs[i].doc != expectedDocs[i])\n        fail(\"Unexpected hit in document \" + hits.scoreDocs[i].doc);\n      assertEquals(\"Bad score in document \" + expectedDocs[i], expectedScores[i], hits.scoreDocs[i].score, 0.000001);\n    }\n\n    if (hits.scoreDocs.length > expectedDocs.length)\n      fail(\"Unexpected hit in document \" + hits.scoreDocs[expectedDocs.length]);\n\n    QueryUtils.check(random(), psq, searcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1abe64b887edbb37f6261531cf8a62d88d63fdcb","date":1510236307,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery#checkQuery(SpanQuery,PayloadFunction,boolean,int[],float[]).mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/payloads/TestPayloadScoreQuery#checkQuery(SpanQuery,PayloadFunction,boolean,int[],float[]).mjava","sourceNew":"  private static void checkQuery(SpanQuery query, PayloadFunction function, boolean includeSpanScore, int[] expectedDocs, float[] expectedScores) throws IOException {\n\n    assertTrue(\"Expected docs and scores arrays must be the same length!\", expectedDocs.length == expectedScores.length);\n\n    PayloadScoreQuery psq = new PayloadScoreQuery(query, function, PayloadDecoder.FLOAT_DECODER, includeSpanScore);\n    TopDocs hits = searcher.search(psq, expectedDocs.length);\n\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      if (i > expectedDocs.length - 1)\n        fail(\"Unexpected hit in document \" + hits.scoreDocs[i].doc);\n      if (hits.scoreDocs[i].doc != expectedDocs[i])\n        fail(\"Unexpected hit in document \" + hits.scoreDocs[i].doc);\n      assertEquals(\"Bad score in document \" + expectedDocs[i], expectedScores[i], hits.scoreDocs[i].score, 0.000001);\n    }\n\n    if (hits.scoreDocs.length > expectedDocs.length)\n      fail(\"Unexpected hit in document \" + hits.scoreDocs[expectedDocs.length]);\n\n    QueryUtils.check(random(), psq, searcher);\n  }\n\n","sourceOld":"  private static void checkQuery(SpanQuery query, PayloadFunction function, boolean includeSpanScore, int[] expectedDocs, float[] expectedScores) throws IOException {\n\n    assertTrue(\"Expected docs and scores arrays must be the same length!\", expectedDocs.length == expectedScores.length);\n\n    PayloadScoreQuery psq = new PayloadScoreQuery(query, function, includeSpanScore);\n    TopDocs hits = searcher.search(psq, expectedDocs.length);\n\n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      if (i > expectedDocs.length - 1)\n        fail(\"Unexpected hit in document \" + hits.scoreDocs[i].doc);\n      if (hits.scoreDocs[i].doc != expectedDocs[i])\n        fail(\"Unexpected hit in document \" + hits.scoreDocs[i].doc);\n      assertEquals(\"Bad score in document \" + expectedDocs[i], expectedScores[i], hits.scoreDocs[i].score, 0.000001);\n    }\n\n    if (hits.scoreDocs.length > expectedDocs.length)\n      fail(\"Unexpected hit in document \" + hits.scoreDocs[expectedDocs.length]);\n\n    QueryUtils.check(random(), psq, searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1abe64b887edbb37f6261531cf8a62d88d63fdcb":["13406cad512adb18f0b9447f1f35385a56a7bd88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13406cad512adb18f0b9447f1f35385a56a7bd88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1abe64b887edbb37f6261531cf8a62d88d63fdcb"]},"commit2Childs":{"1abe64b887edbb37f6261531cf8a62d88d63fdcb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["13406cad512adb18f0b9447f1f35385a56a7bd88"],"13406cad512adb18f0b9447f1f35385a56a7bd88":["1abe64b887edbb37f6261531cf8a62d88d63fdcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}