{"path":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,Sorter.DocMap,DocValuesConsumer).mjava","commits":[{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,Sorter.DocMap,DocValuesConsumer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, Sorter.DocMap sortMap, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords;\n    final PackedLongValues ordCounts;\n    final int[] sortedValues;\n    final int[] ordMap;\n\n    if (finalOrdCounts == null) {\n      ords = pending.build();\n      ordCounts = pendingCounts.build();\n      sortedValues = hash.sort();\n      ordMap = new int[valueCount];\n      for(int ord=0;ord<valueCount;ord++) {\n        ordMap[sortedValues[ord]] = ord;\n      }\n    } else {\n      ords = finalOrds;\n      ordCounts = finalOrdCounts;\n      sortedValues = finalSortedValues;\n      ordMap = finalOrdMap;\n    }\n\n    final long[][] sorted;\n    if (sortMap != null) {\n      sorted = sortDocValues(state.segmentInfo.maxDoc(), sortMap,\n          new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator()));\n    } else {\n      sorted = null;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     final SortedSetDocValues buf =\n                                         new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator());\n                                     if (sorted == null) {\n                                       return buf;\n                                     } else {\n                                       return new SortingLeafReader.SortingSortedSetDocValues(buf, sorted);\n                                     }\n                                   }\n                                 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,Sorter.DocMap,DocValuesConsumer).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, Sorter.DocMap sortMap, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords;\n    final PackedLongValues ordCounts;\n    final int[] sortedValues;\n    final int[] ordMap;\n\n    if (finalOrdCounts == null) {\n      ords = pending.build();\n      ordCounts = pendingCounts.build();\n      sortedValues = hash.sort();\n      ordMap = new int[valueCount];\n      for(int ord=0;ord<valueCount;ord++) {\n        ordMap[sortedValues[ord]] = ord;\n      }\n    } else {\n      ords = finalOrds;\n      ordCounts = finalOrdCounts;\n      sortedValues = finalSortedValues;\n      ordMap = finalOrdMap;\n    }\n\n    final long[][] sorted;\n    if (sortMap != null) {\n      sorted = sortDocValues(state.segmentInfo.maxDoc(), sortMap,\n          new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator()));\n    } else {\n      sorted = null;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     final SortedSetDocValues buf =\n                                         new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator());\n                                     if (sorted == null) {\n                                       return buf;\n                                     } else {\n                                       return new SortingLeafReader.SortingSortedSetDocValues(buf, sorted);\n                                     }\n                                   }\n                                 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,Sorter.DocMap,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,Sorter.DocMap,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, Sorter.DocMap sortMap, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords;\n    final PackedLongValues ordCounts;\n    final int[] sortedValues;\n    final int[] ordMap;\n\n    if (finalOrds == null) {\n      assert finalOrdCounts == null && finalSortedValues == null && finalOrdMap == null;\n      finishCurrentDoc();\n      ords = pending.build();\n      ordCounts = pendingCounts.build();\n      sortedValues = hash.sort();\n      ordMap = new int[valueCount];\n      for(int ord=0;ord<valueCount;ord++) {\n        ordMap[sortedValues[ord]] = ord;\n      }\n    } else {\n      ords = finalOrds;\n      ordCounts = finalOrdCounts;\n      sortedValues = finalSortedValues;\n      ordMap = finalOrdMap;\n    }\n\n    final long[][] sorted;\n    if (sortMap != null) {\n      sorted = sortDocValues(state.segmentInfo.maxDoc(), sortMap,\n          new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator()));\n    } else {\n      sorted = null;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     final SortedSetDocValues buf =\n                                         new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator());\n                                     if (sorted == null) {\n                                       return buf;\n                                     } else {\n                                       return new SortingLeafReader.SortingSortedSetDocValues(buf, sorted);\n                                     }\n                                   }\n                                 });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, Sorter.DocMap sortMap, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords;\n    final PackedLongValues ordCounts;\n    final int[] sortedValues;\n    final int[] ordMap;\n\n    if (finalOrdCounts == null) {\n      ords = pending.build();\n      ordCounts = pendingCounts.build();\n      sortedValues = hash.sort();\n      ordMap = new int[valueCount];\n      for(int ord=0;ord<valueCount;ord++) {\n        ordMap[sortedValues[ord]] = ord;\n      }\n    } else {\n      ords = finalOrds;\n      ordCounts = finalOrdCounts;\n      sortedValues = finalSortedValues;\n      ordMap = finalOrdMap;\n    }\n\n    final long[][] sorted;\n    if (sortMap != null) {\n      sorted = sortDocValues(state.segmentInfo.maxDoc(), sortMap,\n          new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator()));\n    } else {\n      sorted = null;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     final SortedSetDocValues buf =\n                                         new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator());\n                                     if (sorted == null) {\n                                       return buf;\n                                     } else {\n                                       return new SortingLeafReader.SortingSortedSetDocValues(buf, sorted);\n                                     }\n                                   }\n                                 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63","date":1599130480,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,Sorter.DocMap,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,Sorter.DocMap,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, Sorter.DocMap sortMap, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords;\n    final PackedLongValues ordCounts;\n    final int[] sortedValues;\n    final int[] ordMap;\n\n    if (finalOrds == null) {\n      assert finalOrdCounts == null && finalSortedValues == null && finalOrdMap == null;\n      finishCurrentDoc();\n      ords = pending.build();\n      ordCounts = pendingCounts.build();\n      sortedValues = hash.sort();\n      ordMap = new int[valueCount];\n      for(int ord=0;ord<valueCount;ord++) {\n        ordMap[sortedValues[ord]] = ord;\n      }\n    } else {\n      ords = finalOrds;\n      ordCounts = finalOrdCounts;\n      sortedValues = finalSortedValues;\n      ordMap = finalOrdMap;\n    }\n\n    final long[][] sorted;\n    if (sortMap != null) {\n      sorted = sortDocValues(state.segmentInfo.maxDoc(), sortMap,\n          new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator()));\n    } else {\n      sorted = null;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     final SortedSetDocValues buf =\n                                         new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator());\n                                     if (sorted == null) {\n                                       return buf;\n                                     } else {\n                                       return new SortingSortedSetDocValues(buf, sorted);\n                                     }\n                                   }\n                                 });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, Sorter.DocMap sortMap, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords;\n    final PackedLongValues ordCounts;\n    final int[] sortedValues;\n    final int[] ordMap;\n\n    if (finalOrds == null) {\n      assert finalOrdCounts == null && finalSortedValues == null && finalOrdMap == null;\n      finishCurrentDoc();\n      ords = pending.build();\n      ordCounts = pendingCounts.build();\n      sortedValues = hash.sort();\n      ordMap = new int[valueCount];\n      for(int ord=0;ord<valueCount;ord++) {\n        ordMap[sortedValues[ord]] = ord;\n      }\n    } else {\n      ords = finalOrds;\n      ordCounts = finalOrdCounts;\n      sortedValues = finalSortedValues;\n      ordMap = finalOrdMap;\n    }\n\n    final long[][] sorted;\n    if (sortMap != null) {\n      sorted = sortDocValues(state.segmentInfo.maxDoc(), sortMap,\n          new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator()));\n    } else {\n      sorted = null;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     final SortedSetDocValues buf =\n                                         new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator());\n                                     if (sorted == null) {\n                                       return buf;\n                                     } else {\n                                       return new SortingLeafReader.SortingSortedSetDocValues(buf, sorted);\n                                     }\n                                   }\n                                 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46a689927fad636f7324c6166ffe3df0b93d7ce6","date":1600780253,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,Sorter.DocMap,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#flush(SegmentWriteState,Sorter.DocMap,DocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, Sorter.DocMap sortMap, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords;\n    final PackedLongValues ordCounts;\n    final int[] sortedValues;\n    final int[] ordMap;\n\n    if (finalOrds == null) {\n      assert finalOrdCounts == null && finalSortedValues == null && finalOrdMap == null;\n      finishCurrentDoc();\n      ords = pending.build();\n      ordCounts = pendingCounts.build();\n      sortedValues = hash.sort();\n      ordMap = new int[valueCount];\n      for(int ord=0;ord<valueCount;ord++) {\n        ordMap[sortedValues[ord]] = ord;\n      }\n    } else {\n      ords = finalOrds;\n      ordCounts = finalOrdCounts;\n      sortedValues = finalSortedValues;\n      ordMap = finalOrdMap;\n    }\n\n    final DocOrds docOrds;\n    if (sortMap != null) {\n      docOrds = new DocOrds(state.segmentInfo.maxDoc(), sortMap,\n          new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator()), PackedInts.FASTEST);\n    } else {\n      docOrds = null;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     final SortedSetDocValues buf =\n                                         new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator());\n                                     if (docOrds == null) {\n                                       return buf;\n                                     } else {\n                                       return new SortingSortedSetDocValues(buf, docOrds);\n                                     }\n                                   }\n                                 });\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, Sorter.DocMap sortMap, DocValuesConsumer dvConsumer) throws IOException {\n    final int valueCount = hash.size();\n    final PackedLongValues ords;\n    final PackedLongValues ordCounts;\n    final int[] sortedValues;\n    final int[] ordMap;\n\n    if (finalOrds == null) {\n      assert finalOrdCounts == null && finalSortedValues == null && finalOrdMap == null;\n      finishCurrentDoc();\n      ords = pending.build();\n      ordCounts = pendingCounts.build();\n      sortedValues = hash.sort();\n      ordMap = new int[valueCount];\n      for(int ord=0;ord<valueCount;ord++) {\n        ordMap[sortedValues[ord]] = ord;\n      }\n    } else {\n      ords = finalOrds;\n      ordCounts = finalOrdCounts;\n      sortedValues = finalSortedValues;\n      ordMap = finalOrdMap;\n    }\n\n    final long[][] sorted;\n    if (sortMap != null) {\n      sorted = sortDocValues(state.segmentInfo.maxDoc(), sortMap,\n          new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator()));\n    } else {\n      sorted = null;\n    }\n    dvConsumer.addSortedSetField(fieldInfo,\n                                 new EmptyDocValuesProducer() {\n                                   @Override\n                                   public SortedSetDocValues getSortedSet(FieldInfo fieldInfoIn) {\n                                     if (fieldInfoIn != fieldInfo) {\n                                       throw new IllegalArgumentException(\"wrong fieldInfo\");\n                                     }\n                                     final SortedSetDocValues buf =\n                                         new BufferedSortedSetDocValues(sortedValues, ordMap, hash, ords, ordCounts, maxCount, docsWithField.iterator());\n                                     if (sorted == null) {\n                                       return buf;\n                                     } else {\n                                       return new SortingSortedSetDocValues(buf, sorted);\n                                     }\n                                   }\n                                 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"773bf150032d3ef6c95997a154fb914b82875cb8":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"46a689927fad636f7324c6166ffe3df0b93d7ce6":["19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63":["773bf150032d3ef6c95997a154fb914b82875cb8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["46a689927fad636f7324c6166ffe3df0b93d7ce6"]},"commit2Childs":{"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"773bf150032d3ef6c95997a154fb914b82875cb8":["19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","773bf150032d3ef6c95997a154fb914b82875cb8"],"46a689927fad636f7324c6166ffe3df0b93d7ce6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63":["46a689927fad636f7324c6166ffe3df0b93d7ce6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}