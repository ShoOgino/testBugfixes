{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#set(List[QueryNode]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#set(List[QueryNode]).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#set(List[QueryNode]).mjava","sourceNew":"  public final void set(List<QueryNode> children) {\n\n    if (isLeaf() || this.clauses == null) {\n      ResourceBundle bundle = ResourceBundle\n          .getBundle(\"org.apache.lucene.queryParser.messages.QueryParserMessages\");\n      String message = bundle.getObject(\"Q0008E.NODE_ACTION_NOT_SUPPORTED\")\n          .toString();\n\n      throw new IllegalArgumentException(message);\n\n    }\n\n    // reset parent value\n    for (QueryNode child : children) {\n\n      ((QueryNodeImpl) child).setParent(null);\n\n    }\n\n    // allocate new children list\n    allocate();\n\n    // add new children and set parent\n    for (QueryNode child : children) {\n      add(child);\n    }\n  }\n\n","sourceOld":"  public final void set(List<QueryNode> children) {\n\n    if (isLeaf() || this.clauses == null) {\n      ResourceBundle bundle = ResourceBundle\n          .getBundle(\"org.apache.lucene.queryParser.messages.QueryParserMessages\");\n      String message = bundle.getObject(\"Q0008E.NODE_ACTION_NOT_SUPPORTED\")\n          .toString();\n\n      throw new IllegalArgumentException(message);\n\n    }\n\n    // reset parent value\n    for (QueryNode child : children) {\n\n      ((QueryNodeImpl) child).setParent(null);\n\n    }\n\n    // allocate new children list\n    allocate();\n\n    // add new children and set parent\n    for (QueryNode child : children) {\n      add(child);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#set(List[QueryNode]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#set(List[QueryNode]).mjava","sourceNew":"  @Override\n  public final void set(List<QueryNode> children) {\n\n    if (isLeaf() || this.clauses == null) {\n      ResourceBundle bundle = ResourceBundle\n          .getBundle(\"org.apache.lucene.queryParser.messages.QueryParserMessages\");\n      String message = bundle.getObject(\"Q0008E.NODE_ACTION_NOT_SUPPORTED\")\n          .toString();\n\n      throw new IllegalArgumentException(message);\n\n    }\n\n    // reset parent value\n    for (QueryNode child : children) {\n\n      ((QueryNodeImpl) child).setParent(null);\n\n    }\n\n    // allocate new children list\n    allocate();\n\n    // add new children and set parent\n    for (QueryNode child : children) {\n      add(child);\n    }\n  }\n\n","sourceOld":"  public final void set(List<QueryNode> children) {\n\n    if (isLeaf() || this.clauses == null) {\n      ResourceBundle bundle = ResourceBundle\n          .getBundle(\"org.apache.lucene.queryParser.messages.QueryParserMessages\");\n      String message = bundle.getObject(\"Q0008E.NODE_ACTION_NOT_SUPPORTED\")\n          .toString();\n\n      throw new IllegalArgumentException(message);\n\n    }\n\n    // reset parent value\n    for (QueryNode child : children) {\n\n      ((QueryNodeImpl) child).setParent(null);\n\n    }\n\n    // allocate new children list\n    allocate();\n\n    // add new children and set parent\n    for (QueryNode child : children) {\n      add(child);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#set(List[QueryNode]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#set(List[QueryNode]).mjava","sourceNew":"  @Override\n  public final void set(List<QueryNode> children) {\n\n    if (isLeaf() || this.clauses == null) {\n      ResourceBundle bundle = ResourceBundle\n          .getBundle(\"org.apache.lucene.queryParser.messages.QueryParserMessages\");\n      String message = bundle.getObject(\"Q0008E.NODE_ACTION_NOT_SUPPORTED\")\n          .toString();\n\n      throw new IllegalArgumentException(message);\n\n    }\n\n    // reset parent value\n    for (QueryNode child : children) {\n\n      ((QueryNodeImpl) child).setParent(null);\n\n    }\n\n    // allocate new children list\n    allocate();\n\n    // add new children and set parent\n    for (QueryNode child : children) {\n      add(child);\n    }\n  }\n\n","sourceOld":"  public final void set(List<QueryNode> children) {\n\n    if (isLeaf() || this.clauses == null) {\n      ResourceBundle bundle = ResourceBundle\n          .getBundle(\"org.apache.lucene.queryParser.messages.QueryParserMessages\");\n      String message = bundle.getObject(\"Q0008E.NODE_ACTION_NOT_SUPPORTED\")\n          .toString();\n\n      throw new IllegalArgumentException(message);\n\n    }\n\n    // reset parent value\n    for (QueryNode child : children) {\n\n      ((QueryNodeImpl) child).setParent(null);\n\n    }\n\n    // allocate new children list\n    allocate();\n\n    // add new children and set parent\n    for (QueryNode child : children) {\n      add(child);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"917ebe9ddaf53995b52117fefb375be692579d63","date":1390362584,"type":3,"author":"Adriano Crestani Campos","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#set(List[QueryNode]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#set(List[QueryNode]).mjava","sourceNew":"  @Override\n  public final void set(List<QueryNode> children) {\n\n    if (isLeaf() || this.clauses == null) {\n      ResourceBundle bundle = ResourceBundle\n          .getBundle(\"org.apache.lucene.queryParser.messages.QueryParserMessages\");\n      String message = bundle.getObject(\"Q0008E.NODE_ACTION_NOT_SUPPORTED\")\n          .toString();\n\n      throw new IllegalArgumentException(message);\n\n    }\n\n    // reset parent value\n    for (QueryNode child : children) {\n      child.removeFromParent();\n    }\n    \n    ArrayList<QueryNode> existingChildren = new ArrayList<QueryNode>(getChildren());\n    for (QueryNode existingChild : existingChildren) {\n      existingChild.removeFromParent();\n    }\n    \n    // allocate new children list\n    allocate();\n    \n    // add new children and set parent\n    add(children);\n  }\n\n","sourceOld":"  @Override\n  public final void set(List<QueryNode> children) {\n\n    if (isLeaf() || this.clauses == null) {\n      ResourceBundle bundle = ResourceBundle\n          .getBundle(\"org.apache.lucene.queryParser.messages.QueryParserMessages\");\n      String message = bundle.getObject(\"Q0008E.NODE_ACTION_NOT_SUPPORTED\")\n          .toString();\n\n      throw new IllegalArgumentException(message);\n\n    }\n\n    // reset parent value\n    for (QueryNode child : children) {\n\n      ((QueryNodeImpl) child).setParent(null);\n\n    }\n\n    // allocate new children list\n    allocate();\n\n    // add new children and set parent\n    for (QueryNode child : children) {\n      add(child);\n    }\n  }\n\n","bugFix":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#set(List[QueryNode]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#set(List[QueryNode]).mjava","sourceNew":"  @Override\n  public final void set(List<QueryNode> children) {\n\n    if (isLeaf() || this.clauses == null) {\n      ResourceBundle bundle = ResourceBundle\n          .getBundle(\"org.apache.lucene.queryParser.messages.QueryParserMessages\");\n      String message = bundle.getObject(\"Q0008E.NODE_ACTION_NOT_SUPPORTED\")\n          .toString();\n\n      throw new IllegalArgumentException(message);\n\n    }\n\n    // reset parent value\n    for (QueryNode child : children) {\n      child.removeFromParent();\n    }\n    \n    ArrayList<QueryNode> existingChildren = new ArrayList<>(getChildren());\n    for (QueryNode existingChild : existingChildren) {\n      existingChild.removeFromParent();\n    }\n    \n    // allocate new children list\n    allocate();\n    \n    // add new children and set parent\n    add(children);\n  }\n\n","sourceOld":"  @Override\n  public final void set(List<QueryNode> children) {\n\n    if (isLeaf() || this.clauses == null) {\n      ResourceBundle bundle = ResourceBundle\n          .getBundle(\"org.apache.lucene.queryParser.messages.QueryParserMessages\");\n      String message = bundle.getObject(\"Q0008E.NODE_ACTION_NOT_SUPPORTED\")\n          .toString();\n\n      throw new IllegalArgumentException(message);\n\n    }\n\n    // reset parent value\n    for (QueryNode child : children) {\n      child.removeFromParent();\n    }\n    \n    ArrayList<QueryNode> existingChildren = new ArrayList<QueryNode>(getChildren());\n    for (QueryNode existingChild : existingChildren) {\n      existingChild.removeFromParent();\n    }\n    \n    // allocate new children list\n    allocate();\n    \n    // add new children and set parent\n    add(children);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe26df7595e4de00072873c04fa23dbfd244fbd3","date":1463955407,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#set(List[QueryNode]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#set(List[QueryNode]).mjava","sourceNew":"  @Override\n  public final void set(List<QueryNode> children) {\n\n    if (isLeaf() || this.clauses == null) {\n      ResourceBundle bundle = ResourceBundle\n          .getBundle(\"org.apache.lucene.queryParser.messages.QueryParserMessages\", Locale.getDefault());\n      String message = bundle.getObject(\"Q0008E.NODE_ACTION_NOT_SUPPORTED\")\n          .toString();\n\n      throw new IllegalArgumentException(message);\n\n    }\n\n    // reset parent value\n    for (QueryNode child : children) {\n      child.removeFromParent();\n    }\n    \n    ArrayList<QueryNode> existingChildren = new ArrayList<>(getChildren());\n    for (QueryNode existingChild : existingChildren) {\n      existingChild.removeFromParent();\n    }\n    \n    // allocate new children list\n    allocate();\n    \n    // add new children and set parent\n    add(children);\n  }\n\n","sourceOld":"  @Override\n  public final void set(List<QueryNode> children) {\n\n    if (isLeaf() || this.clauses == null) {\n      ResourceBundle bundle = ResourceBundle\n          .getBundle(\"org.apache.lucene.queryParser.messages.QueryParserMessages\");\n      String message = bundle.getObject(\"Q0008E.NODE_ACTION_NOT_SUPPORTED\")\n          .toString();\n\n      throw new IllegalArgumentException(message);\n\n    }\n\n    // reset parent value\n    for (QueryNode child : children) {\n      child.removeFromParent();\n    }\n    \n    ArrayList<QueryNode> existingChildren = new ArrayList<>(getChildren());\n    for (QueryNode existingChild : existingChildren) {\n      existingChild.removeFromParent();\n    }\n    \n    // allocate new children list\n    allocate();\n    \n    // add new children and set parent\n    add(children);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#set(List[QueryNode]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#set(List[QueryNode]).mjava","sourceNew":"  @Override\n  public final void set(List<QueryNode> children) {\n\n    if (isLeaf() || this.clauses == null) {\n      ResourceBundle bundle = ResourceBundle\n          .getBundle(\"org.apache.lucene.queryParser.messages.QueryParserMessages\", Locale.getDefault());\n      String message = bundle.getObject(\"Q0008E.NODE_ACTION_NOT_SUPPORTED\")\n          .toString();\n\n      throw new IllegalArgumentException(message);\n\n    }\n\n    // reset parent value\n    for (QueryNode child : children) {\n      child.removeFromParent();\n    }\n    \n    ArrayList<QueryNode> existingChildren = new ArrayList<>(getChildren());\n    for (QueryNode existingChild : existingChildren) {\n      existingChild.removeFromParent();\n    }\n    \n    // allocate new children list\n    allocate();\n    \n    // add new children and set parent\n    add(children);\n  }\n\n","sourceOld":"  @Override\n  public final void set(List<QueryNode> children) {\n\n    if (isLeaf() || this.clauses == null) {\n      ResourceBundle bundle = ResourceBundle\n          .getBundle(\"org.apache.lucene.queryParser.messages.QueryParserMessages\");\n      String message = bundle.getObject(\"Q0008E.NODE_ACTION_NOT_SUPPORTED\")\n          .toString();\n\n      throw new IllegalArgumentException(message);\n\n    }\n\n    // reset parent value\n    for (QueryNode child : children) {\n      child.removeFromParent();\n    }\n    \n    ArrayList<QueryNode> existingChildren = new ArrayList<>(getChildren());\n    for (QueryNode existingChild : existingChildren) {\n      existingChild.removeFromParent();\n    }\n    \n    // allocate new children list\n    allocate();\n    \n    // add new children and set parent\n    add(children);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#set(List[QueryNode]).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/QueryNodeImpl#set(List[QueryNode]).mjava","sourceNew":"  @Override\n  public final void set(List<QueryNode> children) {\n\n    if (isLeaf() || this.clauses == null) {\n      ResourceBundle bundle = ResourceBundle\n          .getBundle(\"org.apache.lucene.queryParser.messages.QueryParserMessages\", Locale.getDefault());\n      String message = bundle.getObject(\"Q0008E.NODE_ACTION_NOT_SUPPORTED\")\n          .toString();\n\n      throw new IllegalArgumentException(message);\n\n    }\n\n    // reset parent value\n    for (QueryNode child : children) {\n      child.removeFromParent();\n    }\n    \n    ArrayList<QueryNode> existingChildren = new ArrayList<>(getChildren());\n    for (QueryNode existingChild : existingChildren) {\n      existingChild.removeFromParent();\n    }\n    \n    // allocate new children list\n    allocate();\n    \n    // add new children and set parent\n    add(children);\n  }\n\n","sourceOld":"  @Override\n  public final void set(List<QueryNode> children) {\n\n    if (isLeaf() || this.clauses == null) {\n      ResourceBundle bundle = ResourceBundle\n          .getBundle(\"org.apache.lucene.queryParser.messages.QueryParserMessages\");\n      String message = bundle.getObject(\"Q0008E.NODE_ACTION_NOT_SUPPORTED\")\n          .toString();\n\n      throw new IllegalArgumentException(message);\n\n    }\n\n    // reset parent value\n    for (QueryNode child : children) {\n      child.removeFromParent();\n    }\n    \n    ArrayList<QueryNode> existingChildren = new ArrayList<>(getChildren());\n    for (QueryNode existingChild : existingChildren) {\n      existingChild.removeFromParent();\n    }\n    \n    // allocate new children list\n    allocate();\n    \n    // add new children and set parent\n    add(children);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["917ebe9ddaf53995b52117fefb375be692579d63"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fe26df7595e4de00072873c04fa23dbfd244fbd3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"917ebe9ddaf53995b52117fefb375be692579d63":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","fe26df7595e4de00072873c04fa23dbfd244fbd3"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["fe26df7595e4de00072873c04fa23dbfd244fbd3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe26df7595e4de00072873c04fa23dbfd244fbd3":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"917ebe9ddaf53995b52117fefb375be692579d63":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","917ebe9ddaf53995b52117fefb375be692579d63"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}