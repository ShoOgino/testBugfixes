{"path":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"firstName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"lastName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"middleName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n\n    Map row = AbstractDataImportHandlerTest.createMap(\"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \"lastName\", \"Mangar\");\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(\n            \"name\", \"e\");\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver,\n            null, 0, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    Assert.assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d183f54b5c7a1c64bd2935a5d5bd71091ebe4198","date":1235539651,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"firstName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"lastName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"middleName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    // test reuse of template output in another template \n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n            \n    Map row = AbstractDataImportHandlerTest.createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\");\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(\n            \"name\", \"e\");\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver,\n            null, 0, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    Assert.assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    Assert.assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"firstName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"lastName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"middleName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n\n    Map row = AbstractDataImportHandlerTest.createMap(\"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \"lastName\", \"Mangar\");\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(\n            \"name\", \"e\");\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver,\n            null, 0, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    Assert.assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"594d4ee17b3d941ed34827ca6646e378cf7d8d2a","date":1239868870,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"firstName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"lastName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"middleName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    // test reuse of template output in another template \n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n            \n    Map row = AbstractDataImportHandlerTest.createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\");\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(\n            \"name\", \"e\");\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    Assert.assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    Assert.assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"firstName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"lastName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"middleName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    // test reuse of template output in another template \n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n            \n    Map row = AbstractDataImportHandlerTest.createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\");\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(\n            \"name\", \"e\");\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver,\n            null, 0, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    Assert.assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    Assert.assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35d702dc29b81705134f87dde620ab95a6f19cd7","date":1258550646,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"firstName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"lastName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"middleName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(new String[]{\"a@b.com\", \"c@d.com\"});\n    Map row = AbstractDataImportHandlerTest.createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(\n            \"name\", \"e\");\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    Assert.assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    Assert.assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    Assert.assertEquals(mails,row.get(\"emails\"));\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"firstName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"lastName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"middleName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    // test reuse of template output in another template \n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n            \n    Map row = AbstractDataImportHandlerTest.createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\");\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(\n            \"name\", \"e\");\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    Assert.assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    Assert.assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","pathOld":"contrib/dataimporthandler/src/test/java/org/apache/solr/handler/dataimport/TestTemplateTransformer#testTransformRow().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"firstName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"lastName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"middleName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(new String[]{\"a@b.com\", \"c@d.com\"});\n    Map row = AbstractDataImportHandlerTest.createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(\n            \"name\", \"e\");\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    Assert.assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    Assert.assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    Assert.assertEquals(mails,row.get(\"emails\"));\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testTransformRow() {\n    List fields = new ArrayList();\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"firstName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"lastName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"middleName\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"name\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.lastName}, ${e.firstName} ${e.middleName}\"));\n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"emails\",\n            TemplateTransformer.TEMPLATE,\n            \"${e.mail}\"));\n\n    // test reuse of template output in another template \n    fields.add(AbstractDataImportHandlerTest.createMap(\"column\", \"mrname\",\n            TemplateTransformer.TEMPLATE,\"Mr ${e.name}\"));\n\n    List<String> mails = Arrays.asList(new String[]{\"a@b.com\", \"c@d.com\"});\n    Map row = AbstractDataImportHandlerTest.createMap(\n            \"firstName\", \"Shalin\",\n            \"middleName\", \"Shekhar\", \n            \"lastName\", \"Mangar\",\n            \"mail\", mails);\n\n    VariableResolverImpl resolver = new VariableResolverImpl();\n    resolver.addNamespace(\"e\", row);\n    Map<String, String> entityAttrs = AbstractDataImportHandlerTest.createMap(\n            \"name\", \"e\");\n\n    Context context = AbstractDataImportHandlerTest.getContext(null, resolver,\n            null, Context.FULL_DUMP, fields, entityAttrs);\n    new TemplateTransformer().transformRow(row, context);\n    Assert.assertEquals(\"Mangar, Shalin Shekhar\", row.get(\"name\"));\n    Assert.assertEquals(\"Mr Mangar, Shalin Shekhar\", row.get(\"mrname\"));\n    Assert.assertEquals(mails,row.get(\"emails\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"35d702dc29b81705134f87dde620ab95a6f19cd7":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"d183f54b5c7a1c64bd2935a5d5bd71091ebe4198":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"ad94625fb8d088209f46650c8097196fec67f00c":["35d702dc29b81705134f87dde620ab95a6f19cd7"],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["d183f54b5c7a1c64bd2935a5d5bd71091ebe4198"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["d183f54b5c7a1c64bd2935a5d5bd71091ebe4198"],"35d702dc29b81705134f87dde620ab95a6f19cd7":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d183f54b5c7a1c64bd2935a5d5bd71091ebe4198":["594d4ee17b3d941ed34827ca6646e378cf7d8d2a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"594d4ee17b3d941ed34827ca6646e378cf7d8d2a":["35d702dc29b81705134f87dde620ab95a6f19cd7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}