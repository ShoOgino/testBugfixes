{"path":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#getTopGroups(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#getTopGroups(int).mjava","pathOld":"modules/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#getTopGroups(int).mjava","sourceNew":"  public TopGroups<GROUP_VALUE_TYPE> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<GROUP_VALUE_TYPE>[] groupDocsResult = (GroupDocs<GROUP_VALUE_TYPE>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<GROUP_VALUE_TYPE> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<GROUP_VALUE_TYPE>(topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n    }\n\n    return new TopGroups<GROUP_VALUE_TYPE>(groupSort.getSort(),\n                                           withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult);\n  }\n\n","sourceOld":"  public TopGroups<GROUP_VALUE_TYPE> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<GROUP_VALUE_TYPE>[] groupDocsResult = (GroupDocs<GROUP_VALUE_TYPE>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<GROUP_VALUE_TYPE> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<GROUP_VALUE_TYPE>(topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n    }\n\n    return new TopGroups<GROUP_VALUE_TYPE>(groupSort.getSort(),\n                                           withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85d41890f2bad879e6a04c6dd7d2cf276f973994","date":1338488367,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#getTopGroups(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#getTopGroups(int).mjava","sourceNew":"  public TopGroups<GROUP_VALUE_TYPE> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<GROUP_VALUE_TYPE>[] groupDocsResult = (GroupDocs<GROUP_VALUE_TYPE>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<GROUP_VALUE_TYPE> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<GROUP_VALUE_TYPE>(Float.NaN,\n                                                                    topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<GROUP_VALUE_TYPE>(groupSort.getSort(),\n                                           withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult,\n                                           maxScore);\n  }\n\n","sourceOld":"  public TopGroups<GROUP_VALUE_TYPE> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<GROUP_VALUE_TYPE>[] groupDocsResult = (GroupDocs<GROUP_VALUE_TYPE>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<GROUP_VALUE_TYPE> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<GROUP_VALUE_TYPE>(topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n    }\n\n    return new TopGroups<GROUP_VALUE_TYPE>(groupSort.getSort(),\n                                           withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult);\n  }\n\n","bugFix":["1fa60a501961bce2ff07ee1cde7c78699025547e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97d4692d0c601ff773f0a2231967312428a904e4","date":1366026608,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#getTopGroups(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#getTopGroups(int).mjava","sourceNew":"  public TopGroups<GROUP_VALUE_TYPE> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<GROUP_VALUE_TYPE>[] groupDocsResult = (GroupDocs<GROUP_VALUE_TYPE>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<GROUP_VALUE_TYPE> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n                                                                    topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n                                           withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult,\n                                           maxScore);\n  }\n\n","sourceOld":"  public TopGroups<GROUP_VALUE_TYPE> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<GROUP_VALUE_TYPE>[] groupDocsResult = (GroupDocs<GROUP_VALUE_TYPE>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<GROUP_VALUE_TYPE> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<GROUP_VALUE_TYPE>(Float.NaN,\n                                                                    topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<GROUP_VALUE_TYPE>(groupSort.getSort(),\n                                           withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult,\n                                           maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2","date":1448513807,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#getTopGroups(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#getTopGroups(int).mjava","sourceNew":"  public TopGroups<GROUP_VALUE_TYPE> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<GROUP_VALUE_TYPE>[] groupDocsResult = (GroupDocs<GROUP_VALUE_TYPE>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<GROUP_VALUE_TYPE> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n                                                                    topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n                                           withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult,\n                                           maxScore);\n  }\n\n","sourceOld":"  public TopGroups<GROUP_VALUE_TYPE> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<GROUP_VALUE_TYPE>[] groupDocsResult = (GroupDocs<GROUP_VALUE_TYPE>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<GROUP_VALUE_TYPE> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n                                                                    topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n                                           withinGroupSort == null ? null : withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult,\n                                           maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20e94e61fe5291647346b70437617e6b6c370408","date":1483783127,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector#getTopGroups(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#getTopGroups(int).mjava","sourceNew":"  public TopGroups<T> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<T>[] groupDocsResult = (GroupDocs<T>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<T> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n                                                                    topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n                                           withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult,\n                                           maxScore);\n  }\n\n","sourceOld":"  public TopGroups<GROUP_VALUE_TYPE> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<GROUP_VALUE_TYPE>[] groupDocsResult = (GroupDocs<GROUP_VALUE_TYPE>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<GROUP_VALUE_TYPE> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n                                                                    topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n                                           withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult,\n                                           maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/grouping/src/java/org/apache/lucene/search/grouping/SecondPassGroupingCollector#getTopGroups(int).mjava","pathOld":"lucene/grouping/src/java/org/apache/lucene/search/grouping/AbstractSecondPassGroupingCollector#getTopGroups(int).mjava","sourceNew":"  public TopGroups<T> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<T>[] groupDocsResult = (GroupDocs<T>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<T> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n                                                                    topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n                                           withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult,\n                                           maxScore);\n  }\n\n","sourceOld":"  public TopGroups<GROUP_VALUE_TYPE> getTopGroups(int withinGroupOffset) {\n    @SuppressWarnings({\"unchecked\",\"rawtypes\"})\n    final GroupDocs<GROUP_VALUE_TYPE>[] groupDocsResult = (GroupDocs<GROUP_VALUE_TYPE>[]) new GroupDocs[groups.size()];\n\n    int groupIDX = 0;\n    float maxScore = Float.MIN_VALUE;\n    for(SearchGroup<?> group : groups) {\n      final SearchGroupDocs<GROUP_VALUE_TYPE> groupDocs = groupMap.get(group.groupValue);\n      final TopDocs topDocs = groupDocs.collector.topDocs(withinGroupOffset, maxDocsPerGroup);\n      groupDocsResult[groupIDX++] = new GroupDocs<>(Float.NaN,\n                                                                    topDocs.getMaxScore(),\n                                                                    topDocs.totalHits,\n                                                                    topDocs.scoreDocs,\n                                                                    groupDocs.groupValue,\n                                                                    group.sortValues);\n      maxScore = Math.max(maxScore, topDocs.getMaxScore());\n    }\n\n    return new TopGroups<>(groupSort.getSort(),\n                                           withinGroupSort.getSort(),\n                                           totalHitCount, totalGroupedHitCount, groupDocsResult,\n                                           maxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"85d41890f2bad879e6a04c6dd7d2cf276f973994":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20e94e61fe5291647346b70437617e6b6c370408":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"97d4692d0c601ff773f0a2231967312428a904e4":["85d41890f2bad879e6a04c6dd7d2cf276f973994"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2","20e94e61fe5291647346b70437617e6b6c370408"],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["97d4692d0c601ff773f0a2231967312428a904e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20e94e61fe5291647346b70437617e6b6c370408"]},"commit2Childs":{"85d41890f2bad879e6a04c6dd7d2cf276f973994":["97d4692d0c601ff773f0a2231967312428a904e4"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["85d41890f2bad879e6a04c6dd7d2cf276f973994"],"20e94e61fe5291647346b70437617e6b6c370408":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"97d4692d0c601ff773f0a2231967312428a904e4":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["20e94e61fe5291647346b70437617e6b6c370408","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}