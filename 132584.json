{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBooleanNear().mjava","commits":[{"id":"d14e5699abc6d0854ab3a692587156cb84f189de","date":1428897312,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBooleanNear().mjava","pathOld":"/dev/null","sourceNew":"  /** SpanOrQuery(SpanNearQuery[A B], SpanNearQuery[C D]) = (SpanNearQuery[A B], SpanNearQuery[C D]) */\n  public void testSpanOrVersusBooleanNear() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    Term t4 = randomTerm();\n    SpanQuery near1 = spanQuery(new SpanNearQuery(new SpanQuery[] { \n                                               spanQuery(new SpanTermQuery(t1)), \n                                               spanQuery(new SpanTermQuery(t2)) \n                                             }, 10, random().nextBoolean()));\n    SpanQuery near2 = spanQuery(new SpanNearQuery(new SpanQuery[] { \n                                               spanQuery(new SpanTermQuery(t3)), \n                                               spanQuery(new SpanTermQuery(t4)) \n                                             }, 10, random().nextBoolean()));\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(near1, Occur.SHOULD);\n    q1.add(near2, Occur.SHOULD);\n    SpanQuery q2 = spanQuery(new SpanOrQuery(near1, near2));\n    assertSameSet(q1, q2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBooleanNear().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanOrVersusBooleanNear().mjava","sourceNew":"  /** SpanOrQuery(SpanNearQuery[A B], SpanNearQuery[C D]) = (SpanNearQuery[A B], SpanNearQuery[C D]) */\n  public void testSpanOrVersusBooleanNear() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    Term t4 = randomTerm();\n    SpanQuery near1 = spanQuery(new SpanNearQuery(new SpanQuery[] { \n                                               spanQuery(new SpanTermQuery(t1)), \n                                               spanQuery(new SpanTermQuery(t2)) \n                                             }, 10, random().nextBoolean()));\n    SpanQuery near2 = spanQuery(new SpanNearQuery(new SpanQuery[] { \n                                               spanQuery(new SpanTermQuery(t3)), \n                                               spanQuery(new SpanTermQuery(t4)) \n                                             }, 10, random().nextBoolean()));\n    BooleanQuery.Builder q1 = new BooleanQuery.Builder();\n    q1.add(near1, Occur.SHOULD);\n    q1.add(near2, Occur.SHOULD);\n    SpanQuery q2 = spanQuery(new SpanOrQuery(near1, near2));\n    assertSameSet(q1.build(), q2);\n  }\n\n","sourceOld":"  /** SpanOrQuery(SpanNearQuery[A B], SpanNearQuery[C D]) = (SpanNearQuery[A B], SpanNearQuery[C D]) */\n  public void testSpanOrVersusBooleanNear() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    Term t4 = randomTerm();\n    SpanQuery near1 = spanQuery(new SpanNearQuery(new SpanQuery[] { \n                                               spanQuery(new SpanTermQuery(t1)), \n                                               spanQuery(new SpanTermQuery(t2)) \n                                             }, 10, random().nextBoolean()));\n    SpanQuery near2 = spanQuery(new SpanNearQuery(new SpanQuery[] { \n                                               spanQuery(new SpanTermQuery(t3)), \n                                               spanQuery(new SpanTermQuery(t4)) \n                                             }, 10, random().nextBoolean()));\n    BooleanQuery q1 = new BooleanQuery();\n    q1.add(near1, Occur.SHOULD);\n    q1.add(near2, Occur.SHOULD);\n    SpanQuery q2 = spanQuery(new SpanOrQuery(near1, near2));\n    assertSameSet(q1, q2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["d14e5699abc6d0854ab3a692587156cb84f189de"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"d14e5699abc6d0854ab3a692587156cb84f189de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e5699abc6d0854ab3a692587156cb84f189de"],"d14e5699abc6d0854ab3a692587156cb84f189de":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}