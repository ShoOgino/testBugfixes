{"path":"src/test/org/apache/solr/DisMaxRequestHandlerTest#testExtraBlankBQ().mjava","commits":[{"id":"269c8e9f1563aaf046389326e061a3a2c6a62a73","date":1173126130,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/DisMaxRequestHandlerTest#testExtraBlankBQ().mjava","pathOld":"/dev/null","sourceNew":"  public void testExtraBlankBQ() throws Exception {\n    populate();\n    // if the boost queries are in their own boolean query, the clauses will be\n    // surrounded by ()'s in the debug output\n    Pattern p = Pattern.compile(\"subject:hell\\\\s*subject:cool\");\n    Pattern p_bool = Pattern.compile(\"\\\\(subject:hell\\\\s*subject:cool\\\\)\");\n    String resp = h.query(req(\"q\", \"cool stuff\"\n                ,\"qt\", \"dismax\"\n                ,\"version\", \"2.0\"\n                ,\"bq\", \"subject:hell OR subject:cool\"\n                ,\"debugQuery\", \"true\"\n                              ));\n    assertTrue(p.matcher(resp).find());\n    assertFalse(p_bool.matcher(resp).find());\n\n    resp = h.query(req(\"q\", \"cool stuff\"\n                ,\"qt\", \"dismax\"\n                ,\"version\", \"2.0\"\n                ,\"bq\", \"subject:hell OR subject:cool\"\n                ,\"bq\",\"\"\n                ,\"debugQuery\", \"true\"\n                              ));    \n    assertTrue(p.matcher(resp).find());\n    assertTrue(p_bool.matcher(resp).find());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/DisMaxRequestHandlerTest#testExtraBlankBQ().mjava","pathOld":"src/test/org/apache/solr/DisMaxRequestHandlerTest#testExtraBlankBQ().mjava","sourceNew":"  public void testExtraBlankBQ() throws Exception {\n    populate();\n    // if the boost queries are in their own boolean query, the clauses will be\n    // surrounded by ()'s in the debug output\n    Pattern p = Pattern.compile(\"subject:hell\\\\s*subject:cool\");\n    Pattern p_bool = Pattern.compile(\"\\\\(subject:hell\\\\s*subject:cool\\\\)\");\n    String resp = h.query(req(\"q\", \"cool stuff\"\n                ,\"qt\", \"dismax\"\n                ,\"version\", \"2.0\"\n                ,\"bq\", \"subject:hell OR subject:cool\"\n                ,\"debugQuery\", \"true\"\n                              ));\n    assertTrue(p.matcher(resp).find());\n    assertFalse(p_bool.matcher(resp).find());\n\n    resp = h.query(req(\"q\", \"cool stuff\"\n                ,\"qt\", \"dismax\"\n                ,\"version\", \"2.0\"\n                ,\"bq\", \"subject:hell OR subject:cool\"\n                ,\"bq\",\"\"\n                ,\"debugQuery\", \"true\"\n                              ));    \n    assertTrue(p.matcher(resp).find());\n    assertTrue(p_bool.matcher(resp).find());\n\n  }\n\n","sourceOld":"  public void testExtraBlankBQ() throws Exception {\n    populate();\n    // if the boost queries are in their own boolean query, the clauses will be\n    // surrounded by ()'s in the debug output\n    Pattern p = Pattern.compile(\"subject:hell\\\\s*subject:cool\");\n    Pattern p_bool = Pattern.compile(\"\\\\(subject:hell\\\\s*subject:cool\\\\)\");\n    String resp = h.query(req(\"q\", \"cool stuff\"\n                ,\"qt\", \"dismax\"\n                ,\"version\", \"2.0\"\n                ,\"bq\", \"subject:hell OR subject:cool\"\n                ,\"debugQuery\", \"true\"\n                              ));\n    assertTrue(p.matcher(resp).find());\n    assertFalse(p_bool.matcher(resp).find());\n\n    resp = h.query(req(\"q\", \"cool stuff\"\n                ,\"qt\", \"dismax\"\n                ,\"version\", \"2.0\"\n                ,\"bq\", \"subject:hell OR subject:cool\"\n                ,\"bq\",\"\"\n                ,\"debugQuery\", \"true\"\n                              ));    \n    assertTrue(p.matcher(resp).find());\n    assertTrue(p_bool.matcher(resp).find());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"269c8e9f1563aaf046389326e061a3a2c6a62a73":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["269c8e9f1563aaf046389326e061a3a2c6a62a73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"269c8e9f1563aaf046389326e061a3a2c6a62a73":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["269c8e9f1563aaf046389326e061a3a2c6a62a73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}