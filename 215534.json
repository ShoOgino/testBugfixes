{"path":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#mergeContiguousFragments(TextFragment[]).mjava","commits":[{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#mergeContiguousFragments(TextFragment[]).mjava","pathOld":"sandbox/contributions/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#mergeContiguousFragments(TextFragment[]).mjava","sourceNew":"\t/** Improves readability of a score-sorted list of TextFragments by merging any fragments \n\t * that were contiguous in the original text into one larger fragment with the correct order.\n\t * This will leave a \"null\" in the array entry for the lesser scored fragment. \n\t * \n\t * @param frag An array of document fragments in descending score\n\t */\n\tprivate void mergeContiguousFragments(TextFragment[] frag)\n\t{\n\t\tboolean mergingStillBeingDone;\n\t\tif (frag.length > 1)\n\t\t\tdo\n\t\t\t{\n\t\t\t\tmergingStillBeingDone = false; //initialise loop control flag\n\t\t\t\t//for each fragment, scan other frags looking for contiguous blocks\n\t\t\t\tfor (int i = 0; i < frag.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t//merge any contiguous blocks \n\t\t\t\t\tfor (int x = 0; x < frag.length; x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (frag[x] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTextFragment frag1 = null;\n\t\t\t\t\t\tTextFragment frag2 = null;\n\t\t\t\t\t\tint frag1Num = 0;\n\t\t\t\t\t\tint frag2Num = 0;\n\t\t\t\t\t\tint bestScoringFragNum;\n\t\t\t\t\t\tint worstScoringFragNum;\n\t\t\t\t\t\t//if blocks are contiguous....\n\t\t\t\t\t\tif (frag[i].follows(frag[x]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfrag1 = frag[x];\n\t\t\t\t\t\t\tfrag1Num = x;\n\t\t\t\t\t\t\tfrag2 = frag[i];\n\t\t\t\t\t\t\tfrag2Num = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tif (frag[x].follows(frag[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfrag1 = frag[i];\n\t\t\t\t\t\t\t\tfrag1Num = i;\n\t\t\t\t\t\t\t\tfrag2 = frag[x];\n\t\t\t\t\t\t\t\tfrag2Num = x;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t//merging required..\n\t\t\t\t\t\tif (frag1 != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (frag1.getScore() > frag2.getScore())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrag1.merge(frag2);\n\t\t\t\t\t\t\tfrag[worstScoringFragNum] = null;\n\t\t\t\t\t\t\tmergingStillBeingDone = true;\n\t\t\t\t\t\t\tfrag[bestScoringFragNum] = frag1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (mergingStillBeingDone);\n\t}\n\n","sourceOld":"\t/** Improves readability of a score-sorted list of TextFragments by merging any fragments \n\t * that were contiguous in the original text into one larger fragment with the correct order.\n\t * This will leave a \"null\" in the array entry for the lesser scored fragment. \n\t * \n\t * @param frag An array of document fragments in descending score\n\t */\n\tprivate void mergeContiguousFragments(TextFragment[] frag)\n\t{\n\t\tboolean mergingStillBeingDone;\n\t\tif (frag.length > 1)\n\t\t\tdo\n\t\t\t{\n\t\t\t\tmergingStillBeingDone = false; //initialise loop control flag\n\t\t\t\t//for each fragment, scan other frags looking for contiguous blocks\n\t\t\t\tfor (int i = 0; i < frag.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t//merge any contiguous blocks \n\t\t\t\t\tfor (int x = 0; x < frag.length; x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (frag[x] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTextFragment frag1 = null;\n\t\t\t\t\t\tTextFragment frag2 = null;\n\t\t\t\t\t\tint frag1Num = 0;\n\t\t\t\t\t\tint frag2Num = 0;\n\t\t\t\t\t\tint bestScoringFragNum;\n\t\t\t\t\t\tint worstScoringFragNum;\n\t\t\t\t\t\t//if blocks are contiguous....\n\t\t\t\t\t\tif (frag[i].follows(frag[x]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfrag1 = frag[x];\n\t\t\t\t\t\t\tfrag1Num = x;\n\t\t\t\t\t\t\tfrag2 = frag[i];\n\t\t\t\t\t\t\tfrag2Num = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tif (frag[x].follows(frag[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfrag1 = frag[i];\n\t\t\t\t\t\t\t\tfrag1Num = i;\n\t\t\t\t\t\t\t\tfrag2 = frag[x];\n\t\t\t\t\t\t\t\tfrag2Num = x;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t//merging required..\n\t\t\t\t\t\tif (frag1 != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (frag1.getScore() > frag2.getScore())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrag1.merge(frag2);\n\t\t\t\t\t\t\tfrag[worstScoringFragNum] = null;\n\t\t\t\t\t\t\tmergingStillBeingDone = true;\n\t\t\t\t\t\t\tfrag[bestScoringFragNum] = frag1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (mergingStillBeingDone);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f","date":1153001991,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#mergeContiguousFragments(TextFragment[]).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#mergeContiguousFragments(TextFragment[]).mjava","sourceNew":"\t/** Improves readability of a score-sorted list of TextFragments by merging any fragments\n\t * that were contiguous in the original text into one larger fragment with the correct order.\n\t * This will leave a \"null\" in the array entry for the lesser scored fragment. \n\t * \n\t * @param frag An array of document fragments in descending score\n\t */\n\tprivate void mergeContiguousFragments(TextFragment[] frag)\n\t{\n\t\tboolean mergingStillBeingDone;\n\t\tif (frag.length > 1)\n\t\t\tdo\n\t\t\t{\n\t\t\t\tmergingStillBeingDone = false; //initialise loop control flag\n\t\t\t\t//for each fragment, scan other frags looking for contiguous blocks\n\t\t\t\tfor (int i = 0; i < frag.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t//merge any contiguous blocks \n\t\t\t\t\tfor (int x = 0; x < frag.length; x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (frag[x] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTextFragment frag1 = null;\n\t\t\t\t\t\tTextFragment frag2 = null;\n\t\t\t\t\t\tint frag1Num = 0;\n\t\t\t\t\t\tint frag2Num = 0;\n\t\t\t\t\t\tint bestScoringFragNum;\n\t\t\t\t\t\tint worstScoringFragNum;\n\t\t\t\t\t\t//if blocks are contiguous....\n\t\t\t\t\t\tif (frag[i].follows(frag[x]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfrag1 = frag[x];\n\t\t\t\t\t\t\tfrag1Num = x;\n\t\t\t\t\t\t\tfrag2 = frag[i];\n\t\t\t\t\t\t\tfrag2Num = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tif (frag[x].follows(frag[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfrag1 = frag[i];\n\t\t\t\t\t\t\t\tfrag1Num = i;\n\t\t\t\t\t\t\t\tfrag2 = frag[x];\n\t\t\t\t\t\t\t\tfrag2Num = x;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t//merging required..\n\t\t\t\t\t\tif (frag1 != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (frag1.getScore() > frag2.getScore())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrag1.merge(frag2);\n\t\t\t\t\t\t\tfrag[worstScoringFragNum] = null;\n\t\t\t\t\t\t\tmergingStillBeingDone = true;\n\t\t\t\t\t\t\tfrag[bestScoringFragNum] = frag1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (mergingStillBeingDone);\n\t}\n\n","sourceOld":"\t/** Improves readability of a score-sorted list of TextFragments by merging any fragments \n\t * that were contiguous in the original text into one larger fragment with the correct order.\n\t * This will leave a \"null\" in the array entry for the lesser scored fragment. \n\t * \n\t * @param frag An array of document fragments in descending score\n\t */\n\tprivate void mergeContiguousFragments(TextFragment[] frag)\n\t{\n\t\tboolean mergingStillBeingDone;\n\t\tif (frag.length > 1)\n\t\t\tdo\n\t\t\t{\n\t\t\t\tmergingStillBeingDone = false; //initialise loop control flag\n\t\t\t\t//for each fragment, scan other frags looking for contiguous blocks\n\t\t\t\tfor (int i = 0; i < frag.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t//merge any contiguous blocks \n\t\t\t\t\tfor (int x = 0; x < frag.length; x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (frag[x] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTextFragment frag1 = null;\n\t\t\t\t\t\tTextFragment frag2 = null;\n\t\t\t\t\t\tint frag1Num = 0;\n\t\t\t\t\t\tint frag2Num = 0;\n\t\t\t\t\t\tint bestScoringFragNum;\n\t\t\t\t\t\tint worstScoringFragNum;\n\t\t\t\t\t\t//if blocks are contiguous....\n\t\t\t\t\t\tif (frag[i].follows(frag[x]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfrag1 = frag[x];\n\t\t\t\t\t\t\tfrag1Num = x;\n\t\t\t\t\t\t\tfrag2 = frag[i];\n\t\t\t\t\t\t\tfrag2Num = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tif (frag[x].follows(frag[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfrag1 = frag[i];\n\t\t\t\t\t\t\t\tfrag1Num = i;\n\t\t\t\t\t\t\t\tfrag2 = frag[x];\n\t\t\t\t\t\t\t\tfrag2Num = x;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t//merging required..\n\t\t\t\t\t\tif (frag1 != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (frag1.getScore() > frag2.getScore())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrag1.merge(frag2);\n\t\t\t\t\t\t\tfrag[worstScoringFragNum] = null;\n\t\t\t\t\t\t\tmergingStillBeingDone = true;\n\t\t\t\t\t\t\tfrag[bestScoringFragNum] = frag1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (mergingStillBeingDone);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#mergeContiguousFragments(TextFragment[]).mjava","pathOld":"contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#mergeContiguousFragments(TextFragment[]).mjava","sourceNew":"\t/** Improves readability of a score-sorted list of TextFragments by merging any fragments\n\t * that were contiguous in the original text into one larger fragment with the correct order.\n\t * This will leave a \"null\" in the array entry for the lesser scored fragment. \n\t * \n\t * @param frag An array of document fragments in descending score\n\t */\n\tprivate void mergeContiguousFragments(TextFragment[] frag)\n\t{\n\t\tboolean mergingStillBeingDone;\n\t\tif (frag.length > 1)\n\t\t\tdo\n\t\t\t{\n\t\t\t\tmergingStillBeingDone = false; //initialise loop control flag\n\t\t\t\t//for each fragment, scan other frags looking for contiguous blocks\n\t\t\t\tfor (int i = 0; i < frag.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t//merge any contiguous blocks \n\t\t\t\t\tfor (int x = 0; x < frag.length; x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (frag[x] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTextFragment frag1 = null;\n\t\t\t\t\t\tTextFragment frag2 = null;\n\t\t\t\t\t\tint frag1Num = 0;\n\t\t\t\t\t\tint frag2Num = 0;\n\t\t\t\t\t\tint bestScoringFragNum;\n\t\t\t\t\t\tint worstScoringFragNum;\n\t\t\t\t\t\t//if blocks are contiguous....\n\t\t\t\t\t\tif (frag[i].follows(frag[x]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfrag1 = frag[x];\n\t\t\t\t\t\t\tfrag1Num = x;\n\t\t\t\t\t\t\tfrag2 = frag[i];\n\t\t\t\t\t\t\tfrag2Num = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tif (frag[x].follows(frag[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfrag1 = frag[i];\n\t\t\t\t\t\t\t\tfrag1Num = i;\n\t\t\t\t\t\t\t\tfrag2 = frag[x];\n\t\t\t\t\t\t\t\tfrag2Num = x;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t//merging required..\n\t\t\t\t\t\tif (frag1 != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (frag1.getScore() > frag2.getScore())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrag1.merge(frag2);\n\t\t\t\t\t\t\tfrag[worstScoringFragNum] = null;\n\t\t\t\t\t\t\tmergingStillBeingDone = true;\n\t\t\t\t\t\t\tfrag[bestScoringFragNum] = frag1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (mergingStillBeingDone);\n\t}\n\n","sourceOld":"\t/** Improves readability of a score-sorted list of TextFragments by merging any fragments\n\t * that were contiguous in the original text into one larger fragment with the correct order.\n\t * This will leave a \"null\" in the array entry for the lesser scored fragment. \n\t * \n\t * @param frag An array of document fragments in descending score\n\t */\n\tprivate void mergeContiguousFragments(TextFragment[] frag)\n\t{\n\t\tboolean mergingStillBeingDone;\n\t\tif (frag.length > 1)\n\t\t\tdo\n\t\t\t{\n\t\t\t\tmergingStillBeingDone = false; //initialise loop control flag\n\t\t\t\t//for each fragment, scan other frags looking for contiguous blocks\n\t\t\t\tfor (int i = 0; i < frag.length; i++)\n\t\t\t\t{\n\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t//merge any contiguous blocks \n\t\t\t\t\tfor (int x = 0; x < frag.length; x++)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (frag[x] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (frag[i] == null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTextFragment frag1 = null;\n\t\t\t\t\t\tTextFragment frag2 = null;\n\t\t\t\t\t\tint frag1Num = 0;\n\t\t\t\t\t\tint frag2Num = 0;\n\t\t\t\t\t\tint bestScoringFragNum;\n\t\t\t\t\t\tint worstScoringFragNum;\n\t\t\t\t\t\t//if blocks are contiguous....\n\t\t\t\t\t\tif (frag[i].follows(frag[x]))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfrag1 = frag[x];\n\t\t\t\t\t\t\tfrag1Num = x;\n\t\t\t\t\t\t\tfrag2 = frag[i];\n\t\t\t\t\t\t\tfrag2Num = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tif (frag[x].follows(frag[i]))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tfrag1 = frag[i];\n\t\t\t\t\t\t\t\tfrag1Num = i;\n\t\t\t\t\t\t\t\tfrag2 = frag[x];\n\t\t\t\t\t\t\t\tfrag2Num = x;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t//merging required..\n\t\t\t\t\t\tif (frag1 != null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (frag1.getScore() > frag2.getScore())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tbestScoringFragNum = frag2Num;\n\t\t\t\t\t\t\t\tworstScoringFragNum = frag1Num;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tfrag1.merge(frag2);\n\t\t\t\t\t\t\tfrag[worstScoringFragNum] = null;\n\t\t\t\t\t\t\tmergingStillBeingDone = true;\n\t\t\t\t\t\t\tfrag[bestScoringFragNum] = frag1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (mergingStillBeingDone);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"f504fc2bf24530fd47d0ccafcf776c8c0b9e4c7f":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}