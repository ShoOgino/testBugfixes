{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testSimpleSearch().mjava","commits":[{"id":"d9d424bd039937b4125152b454b3a32754b06f6c","date":1384391321,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testSimpleSearch().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testSimpleSearch() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"track\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    QueryResponse response = collection1.query(query);\n    NamedList<Object> track = (NamedList<Object>) response.getDebugMap().get(\"track\");\n    assertNotNull(track);\n    assertNotNull(track.get(\"rid\"));\n    assertNotNull(track.get(\"EXECUTE_QUERY\"));\n    assertNotNull(((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard1));\n    assertNotNull(((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard2));\n    \n    assertNotNull(((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard1));\n    assertNotNull(((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard2));\n    \n    assertElementsPresent((NamedList<String>)((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard1), \n        \"QTime\", \"ElapsedTime\", \"RequestPurpose\", \"NumFound\", \"Response\");\n    assertElementsPresent((NamedList<String>)((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard2), \n        \"QTime\", \"ElapsedTime\", \"RequestPurpose\", \"NumFound\", \"Response\");\n    \n    assertElementsPresent((NamedList<String>)((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard1), \n        \"QTime\", \"ElapsedTime\", \"RequestPurpose\", \"NumFound\", \"Response\");\n    assertElementsPresent((NamedList<String>)((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard2), \n        \"QTime\", \"ElapsedTime\", \"RequestPurpose\", \"NumFound\", \"Response\");\n    \n    query.add(\"omitHeader\", \"true\");\n    response = collection1.query(query);\n    assertNull(\"QTime is not included in the response when omitHeader is set to true\", \n        ((NamedList<Object>)response.getDebugMap().get(\"track\")).findRecursive(\"EXECUTE_QUERY\", shard1, \"QTime\"));\n    assertNull(\"QTime is not included in the response when omitHeader is set to true\", \n        ((NamedList<Object>)response.getDebugMap().get(\"track\")).findRecursive(\"GET_FIELDS\", shard2, \"QTime\"));\n    \n    query.setQuery(\"id:1\");\n    response = collection1.query(query);\n    track = (NamedList<Object>) response.getDebugMap().get(\"track\");\n    assertNotNull(((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard1));\n    assertNotNull(((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard2));\n    \n    assertNotNull(((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard1));\n    // This test is invalid, as GET_FIELDS should not be executed in shard 2\n    assertNull(((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["68f345f3b4bee014d571c564dac11b519febe85f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"68f345f3b4bee014d571c564dac11b519febe85f","date":1560355769,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testSimpleSearch().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedDebugComponentTest#testSimpleSearch().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testSimpleSearch() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"track\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    \n    if (random().nextBoolean()) {\n      query.add(\"omitHeader\", Boolean.toString(random().nextBoolean()));\n    }\n    QueryResponse response = collection1.query(query);\n    NamedList<Object> track = (NamedList<Object>) response.getDebugMap().get(\"track\");\n    assertNotNull(track);\n    assertNotNull(track.get(\"rid\"));\n    assertNotNull(track.get(\"EXECUTE_QUERY\"));\n    assertNotNull(((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard1));\n    assertNotNull(((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard2));\n    \n    assertNotNull(((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard1));\n    assertNotNull(((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard2));\n    \n    assertElementsPresent((NamedList<String>)((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard1), \n        \"QTime\", \"ElapsedTime\", \"RequestPurpose\", \"NumFound\", \"Response\");\n    assertElementsPresent((NamedList<String>)((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard2), \n        \"QTime\", \"ElapsedTime\", \"RequestPurpose\", \"NumFound\", \"Response\");\n    \n    assertElementsPresent((NamedList<String>)((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard1), \n        \"QTime\", \"ElapsedTime\", \"RequestPurpose\", \"NumFound\", \"Response\");\n    assertElementsPresent((NamedList<String>)((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard2), \n        \"QTime\", \"ElapsedTime\", \"RequestPurpose\", \"NumFound\", \"Response\");\n    \n    query.setQuery(\"id:1\");\n    response = collection1.query(query);\n    track = (NamedList<Object>) response.getDebugMap().get(\"track\");\n    assertNotNull(((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard1));\n    assertNotNull(((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard2));\n    \n    assertNotNull(((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard1));\n    // This test is invalid, as GET_FIELDS should not be executed in shard 2\n    assertNull(((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard2));\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testSimpleSearch() throws Exception {\n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.set(\"debug\",  \"track\");\n    query.set(\"distrib\", \"true\");\n    query.setFields(\"id\", \"text\");\n    query.set(\"shards\", shard1 + \",\" + shard2);\n    QueryResponse response = collection1.query(query);\n    NamedList<Object> track = (NamedList<Object>) response.getDebugMap().get(\"track\");\n    assertNotNull(track);\n    assertNotNull(track.get(\"rid\"));\n    assertNotNull(track.get(\"EXECUTE_QUERY\"));\n    assertNotNull(((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard1));\n    assertNotNull(((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard2));\n    \n    assertNotNull(((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard1));\n    assertNotNull(((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard2));\n    \n    assertElementsPresent((NamedList<String>)((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard1), \n        \"QTime\", \"ElapsedTime\", \"RequestPurpose\", \"NumFound\", \"Response\");\n    assertElementsPresent((NamedList<String>)((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard2), \n        \"QTime\", \"ElapsedTime\", \"RequestPurpose\", \"NumFound\", \"Response\");\n    \n    assertElementsPresent((NamedList<String>)((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard1), \n        \"QTime\", \"ElapsedTime\", \"RequestPurpose\", \"NumFound\", \"Response\");\n    assertElementsPresent((NamedList<String>)((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard2), \n        \"QTime\", \"ElapsedTime\", \"RequestPurpose\", \"NumFound\", \"Response\");\n    \n    query.add(\"omitHeader\", \"true\");\n    response = collection1.query(query);\n    assertNull(\"QTime is not included in the response when omitHeader is set to true\", \n        ((NamedList<Object>)response.getDebugMap().get(\"track\")).findRecursive(\"EXECUTE_QUERY\", shard1, \"QTime\"));\n    assertNull(\"QTime is not included in the response when omitHeader is set to true\", \n        ((NamedList<Object>)response.getDebugMap().get(\"track\")).findRecursive(\"GET_FIELDS\", shard2, \"QTime\"));\n    \n    query.setQuery(\"id:1\");\n    response = collection1.query(query);\n    track = (NamedList<Object>) response.getDebugMap().get(\"track\");\n    assertNotNull(((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard1));\n    assertNotNull(((NamedList<Object>)track.get(\"EXECUTE_QUERY\")).get(shard2));\n    \n    assertNotNull(((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard1));\n    // This test is invalid, as GET_FIELDS should not be executed in shard 2\n    assertNull(((NamedList<Object>)track.get(\"GET_FIELDS\")).get(shard2));\n  }\n\n","bugFix":["d9d424bd039937b4125152b454b3a32754b06f6c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"68f345f3b4bee014d571c564dac11b519febe85f":["d9d424bd039937b4125152b454b3a32754b06f6c"],"d9d424bd039937b4125152b454b3a32754b06f6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68f345f3b4bee014d571c564dac11b519febe85f"]},"commit2Childs":{"68f345f3b4bee014d571c564dac11b519febe85f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9d424bd039937b4125152b454b3a32754b06f6c":["68f345f3b4bee014d571c564dac11b519febe85f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9d424bd039937b4125152b454b3a32754b06f6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}