{"path":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToMerge)\n    throws CorruptIndexException, IOException {\n\n    final List<SegmentInfo> eligibleSegments = new ArrayList<SegmentInfo>();\n    for(SegmentInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToMerge)\n    throws CorruptIndexException, IOException {\n\n    final List<SegmentInfo> eligibleSegments = new ArrayList<SegmentInfo>();\n    for(SegmentInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge)\n    throws CorruptIndexException, IOException {\n\n    final List<SegmentInfoPerCommit> eligibleSegments = new ArrayList<SegmentInfoPerCommit>();\n    for(SegmentInfoPerCommit info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfoPerCommit info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToMerge)\n    throws CorruptIndexException, IOException {\n\n    final List<SegmentInfo> eligibleSegments = new ArrayList<SegmentInfo>();\n    for(SegmentInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfoPerCommit,Boolean]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfoPerCommit,Boolean> segmentsToMerge)\n    throws CorruptIndexException, IOException {\n\n    final List<SegmentInfoPerCommit> eligibleSegments = new ArrayList<SegmentInfoPerCommit>();\n    for(SegmentInfoPerCommit info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfoPerCommit info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentInfo,Boolean> segmentsToMerge)\n    throws CorruptIndexException, IOException {\n\n    final List<SegmentInfo> eligibleSegments = new ArrayList<SegmentInfo>();\n    for(SegmentInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : _TestUtil.nextInt(random, 2, max);\n        mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}