{"path":"lucene/src/java/org/apache/lucene/index/ParallelReader#docFreq(String,BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#docFreq(String,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public int docFreq(String field, BytesRef term) throws IOException {\n    ensureOpen();\n    IndexReader reader = ((IndexReader)fieldToReader.get(field));\n    return reader == null? 0 : reader.docFreq(field, term);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"068265517d1fbc623f5aeaee57fcd8df925678e4","date":1286043654,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#docFreq(String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#docFreq(String,BytesRef).mjava","sourceNew":"  @Override\n  public int docFreq(String field, BytesRef term) throws IOException {\n    ensureOpen();\n    IndexReader reader = fieldToReader.get(field);\n    return reader == null? 0 : reader.docFreq(field, term);\n  }\n\n","sourceOld":"  @Override\n  public int docFreq(String field, BytesRef term) throws IOException {\n    ensureOpen();\n    IndexReader reader = ((IndexReader)fieldToReader.get(field));\n    return reader == null? 0 : reader.docFreq(field, term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#docFreq(String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#docFreq(String,BytesRef).mjava","sourceNew":"  @Override\n  public int docFreq(String field, BytesRef term) throws IOException {\n    ensureOpen();\n    IndexReader reader = fieldToReader.get(field);\n    return reader == null? 0 : reader.docFreq(field, term);\n  }\n\n","sourceOld":"  @Override\n  public int docFreq(String field, BytesRef term) throws IOException {\n    ensureOpen();\n    IndexReader reader = ((IndexReader)fieldToReader.get(field));\n    return reader == null? 0 : reader.docFreq(field, term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2725b2d479964ea5aaea0ba4ae2634716f3ec26c","date":1327188170,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#docFreq(String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#docFreq(String,BytesRef).mjava","sourceNew":"  @Override\n  public int docFreq(String field, BytesRef term) throws IOException {\n    ensureOpen();\n    AtomicIndexReader reader = fieldToReader.get(field);\n    return reader == null? 0 : reader.docFreq(field, term);\n  }\n\n","sourceOld":"  @Override\n  public int docFreq(String field, BytesRef term) throws IOException {\n    ensureOpen();\n    IndexReader reader = fieldToReader.get(field);\n    return reader == null? 0 : reader.docFreq(field, term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da6d5ac19a80d65b1e864251f155d30960353b7e","date":1327881054,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#docFreq(String,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#docFreq(String,BytesRef).mjava","sourceNew":"  @Override\n  public int docFreq(String field, BytesRef term) throws IOException {\n    ensureOpen();\n    AtomicReader reader = fieldToReader.get(field);\n    return reader == null? 0 : reader.docFreq(field, term);\n  }\n\n","sourceOld":"  @Override\n  public int docFreq(String field, BytesRef term) throws IOException {\n    ensureOpen();\n    AtomicIndexReader reader = fieldToReader.get(field);\n    return reader == null? 0 : reader.docFreq(field, term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d4eabaae1326fe4c79e878164a5de1a6bff9fa6","date":1327932787,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#docFreq(String,BytesRef).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int docFreq(String field, BytesRef term) throws IOException {\n    ensureOpen();\n    AtomicReader reader = fieldToReader.get(field);\n    return reader == null? 0 : reader.docFreq(field, term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#docFreq(String,BytesRef).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int docFreq(String field, BytesRef term) throws IOException {\n    ensureOpen();\n    IndexReader reader = fieldToReader.get(field);\n    return reader == null? 0 : reader.docFreq(field, term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8d4eabaae1326fe4c79e878164a5de1a6bff9fa6":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"068265517d1fbc623f5aeaee57fcd8df925678e4":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","068265517d1fbc623f5aeaee57fcd8df925678e4"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["068265517d1fbc623f5aeaee57fcd8df925678e4","8d4eabaae1326fe4c79e878164a5de1a6bff9fa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["068265517d1fbc623f5aeaee57fcd8df925678e4"]},"commit2Childs":{"8d4eabaae1326fe4c79e878164a5de1a6bff9fa6":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"da6d5ac19a80d65b1e864251f155d30960353b7e":["8d4eabaae1326fe4c79e878164a5de1a6bff9fa6"],"068265517d1fbc623f5aeaee57fcd8df925678e4":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5cab9a86bd67202d20b6adc463008c8e982b070a","2725b2d479964ea5aaea0ba4ae2634716f3ec26c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["068265517d1fbc623f5aeaee57fcd8df925678e4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2725b2d479964ea5aaea0ba4ae2634716f3ec26c":["da6d5ac19a80d65b1e864251f155d30960353b7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}