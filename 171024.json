{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase3().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase3().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase3().mjava","sourceNew":"  public void testSpecialCase3() throws Exception {\n    RegExp re = new RegExp(\"(\\\\鯺)*(.)*\\\\Ӕ\");\n    String input = \"\\u5cfd\\ufffd\\ub2f7\\u0033\\ue304\\u51d7\\u3692\\udb50\\udfb3\\u0576\\udae2\\udc62\\u0053\\u0449\\u04d4\";\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n\n    assertTrue(cra.run(input));\n    \n    byte[] bytes = input.getBytes(\"UTF-8\");\n    assertTrue(bra.run(bytes, 0, bytes.length));\n  }\n\n","sourceOld":"  public void testSpecialCase3() throws Exception {\n    RegExp re = new RegExp(\"(\\\\鯺)*(.)*\\\\Ӕ\");\n    String input = \"\\u5cfd\\ufffd\\ub2f7\\u0033\\ue304\\u51d7\\u3692\\udb50\\udfb3\\u0576\\udae2\\udc62\\u0053\\u0449\\u04d4\";\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n\n    assertTrue(cra.run(input));\n    \n    byte[] bytes = input.getBytes(\"UTF-8\");\n    assertTrue(bra.run(bytes, 0, bytes.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase3().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase3().mjava","sourceNew":"  public void testSpecialCase3() throws Exception {\n    RegExp re = new RegExp(\"(\\\\鯺)*(.)*\\\\Ӕ\");\n    String input = \"\\u5cfd\\ufffd\\ub2f7\\u0033\\ue304\\u51d7\\u3692\\udb50\\udfb3\\u0576\\udae2\\udc62\\u0053\\u0449\\u04d4\";\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n\n    assertTrue(cra.run(input));\n    \n    byte[] bytes = input.getBytes(StandardCharsets.UTF_8);\n    assertTrue(bra.run(bytes, 0, bytes.length));\n  }\n\n","sourceOld":"  public void testSpecialCase3() throws Exception {\n    RegExp re = new RegExp(\"(\\\\鯺)*(.)*\\\\Ӕ\");\n    String input = \"\\u5cfd\\ufffd\\ub2f7\\u0033\\ue304\\u51d7\\u3692\\udb50\\udfb3\\u0576\\udae2\\udc62\\u0053\\u0449\\u04d4\";\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n\n    assertTrue(cra.run(input));\n    \n    byte[] bytes = input.getBytes(\"UTF-8\");\n    assertTrue(bra.run(bytes, 0, bytes.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase3().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase3().mjava","sourceNew":"  public void testSpecialCase3() throws Exception {\n    RegExp re = new RegExp(\"(\\\\鯺)*(.)*\\\\Ӕ\");\n    String input = \"\\u5cfd\\ufffd\\ub2f7\\u0033\\ue304\\u51d7\\u3692\\udb50\\udfb3\\u0576\\udae2\\udc62\\u0053\\u0449\\u04d4\";\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n\n    assertTrue(cra.run(input));\n    \n    byte[] bytes = input.getBytes(StandardCharsets.UTF_8);\n    assertTrue(bra.run(bytes, 0, bytes.length));\n  }\n\n","sourceOld":"  public void testSpecialCase3() throws Exception {\n    RegExp re = new RegExp(\"(\\\\鯺)*(.)*\\\\Ӕ\");\n    String input = \"\\u5cfd\\ufffd\\ub2f7\\u0033\\ue304\\u51d7\\u3692\\udb50\\udfb3\\u0576\\udae2\\udc62\\u0053\\u0449\\u04d4\";\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n\n    assertTrue(cra.run(input));\n    \n    byte[] bytes = input.getBytes(\"UTF-8\");\n    assertTrue(bra.run(bytes, 0, bytes.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase3().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase3().mjava","sourceNew":"  public void testSpecialCase3() throws Exception {\n    RegExp re = new RegExp(\"(\\\\鯺)*(.)*\\\\Ӕ\");\n    String input = \"\\u5cfd\\ufffd\\ub2f7\\u0033\\ue304\\u51d7\\u3692\\udb50\\udfb3\\u0576\\udae2\\udc62\\u0053\\u0449\\u04d4\";\n    LightAutomaton automaton = re.toLightAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n\n    assertTrue(cra.run(input));\n    \n    byte[] bytes = input.getBytes(StandardCharsets.UTF_8);\n    assertTrue(bra.run(bytes, 0, bytes.length));\n  }\n\n","sourceOld":"  public void testSpecialCase3() throws Exception {\n    RegExp re = new RegExp(\"(\\\\鯺)*(.)*\\\\Ӕ\");\n    String input = \"\\u5cfd\\ufffd\\ub2f7\\u0033\\ue304\\u51d7\\u3692\\udb50\\udfb3\\u0576\\udae2\\udc62\\u0053\\u0449\\u04d4\";\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n\n    assertTrue(cra.run(input));\n    \n    byte[] bytes = input.getBytes(StandardCharsets.UTF_8);\n    assertTrue(bra.run(bytes, 0, bytes.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase3().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestUTF32ToUTF8#testSpecialCase3().mjava","sourceNew":"  public void testSpecialCase3() throws Exception {\n    RegExp re = new RegExp(\"(\\\\鯺)*(.)*\\\\Ӕ\");\n    String input = \"\\u5cfd\\ufffd\\ub2f7\\u0033\\ue304\\u51d7\\u3692\\udb50\\udfb3\\u0576\\udae2\\udc62\\u0053\\u0449\\u04d4\";\n    Automaton automaton = re.toAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n\n    assertTrue(cra.run(input));\n    \n    byte[] bytes = input.getBytes(StandardCharsets.UTF_8);\n    assertTrue(bra.run(bytes, 0, bytes.length));\n  }\n\n","sourceOld":"  public void testSpecialCase3() throws Exception {\n    RegExp re = new RegExp(\"(\\\\鯺)*(.)*\\\\Ӕ\");\n    String input = \"\\u5cfd\\ufffd\\ub2f7\\u0033\\ue304\\u51d7\\u3692\\udb50\\udfb3\\u0576\\udae2\\udc62\\u0053\\u0449\\u04d4\";\n    LightAutomaton automaton = re.toLightAutomaton();\n    CharacterRunAutomaton cra = new CharacterRunAutomaton(automaton);\n    ByteRunAutomaton bra = new ByteRunAutomaton(automaton);\n\n    assertTrue(cra.run(input));\n    \n    byte[] bytes = input.getBytes(StandardCharsets.UTF_8);\n    assertTrue(bra.run(bytes, 0, bytes.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7d89d7e4e5101347833eea558851bf4209218619"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"7d89d7e4e5101347833eea558851bf4209218619":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["7d89d7e4e5101347833eea558851bf4209218619"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d89d7e4e5101347833eea558851bf4209218619"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}