{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#assertDateRangeQueryEquals(QueryParser,String,String,String,Date,DateTools.Resolution).mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#assertDateRangeQueryEquals(QueryParser,String,String,String,Date,DateTools.Resolution).mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#assertDateRangeQueryEquals(QueryParser,String,String,String,Date,DateTools.Resolution).mjava","sourceNew":"  public void assertDateRangeQueryEquals(QueryParser qp, String field, String startDate, String endDate, \n                                         Date endDateInclusive, DateTools.Resolution resolution) throws Exception {\n    assertQueryEquals(qp, field, field + \":[\" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"]\",\n               \"[\" + getDate(startDate, resolution) + \" TO \" + getDate(endDateInclusive, resolution) + \"]\");\n    assertQueryEquals(qp, field, field + \":{\" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"}\",\n               \"{\" + getDate(startDate, resolution) + \" TO \" + getDate(endDate, resolution) + \"}\");\n  }\n\n","sourceOld":"  public void assertDateRangeQueryEquals(QueryParser qp, String field, String startDate, String endDate, \n                                         Date endDateInclusive, DateTools.Resolution resolution) throws Exception {\n    assertQueryEquals(qp, field, field + \":[\" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"]\",\n               \"[\" + getDate(startDate, resolution) + \" TO \" + getDate(endDateInclusive, resolution) + \"]\");\n    assertQueryEquals(qp, field, field + \":{\" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"}\",\n               \"{\" + getDate(startDate, resolution) + \" TO \" + getDate(endDate, resolution) + \"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5629050969c1e696c5dc14e8639f3e733e8e33c","date":1313606044,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#assertDateRangeQueryEquals(QueryParser,String,String,String,Date,DateTools.Resolution).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#assertDateRangeQueryEquals(QueryParser,String,String,String,Date,DateTools.Resolution).mjava","sourceNew":"  public void assertDateRangeQueryEquals(QueryParser qp, String field, String startDate, String endDate, \n                                         Date endDateInclusive, DateTools.Resolution resolution) throws Exception {\n    assertQueryEquals(qp, field, field + \":[\" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"]\",\n               \"[\" + getDate(startDate, resolution) + \" TO \" + getDate(endDateInclusive, resolution) + \"]\");\n    assertQueryEquals(qp, field, field + \":{\" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"}\",\n               \"{\" + getDate(startDate, resolution) + \" TO \" + getDate(endDate, resolution) + \"}\");\n  }\n\n","sourceOld":"  public void assertDateRangeQueryEquals(QueryParser qp, String field, String startDate, String endDate, \n                                         Date endDateInclusive, DateTools.Resolution resolution) throws Exception {\n    assertQueryEquals(qp, field, field + \":[\" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"]\",\n               \"[\" + getDate(startDate, resolution) + \" TO \" + getDate(endDateInclusive, resolution) + \"]\");\n    assertQueryEquals(qp, field, field + \":{\" + escapeDateString(startDate) + \" TO \" + escapeDateString(endDate) + \"}\",\n               \"{\" + getDate(startDate, resolution) + \" TO \" + getDate(endDate, resolution) + \"}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5629050969c1e696c5dc14e8639f3e733e8e33c"]},"commit2Childs":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["b5629050969c1e696c5dc14e8639f3e733e8e33c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}