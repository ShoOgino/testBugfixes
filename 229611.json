{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,Type).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,Type).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, Type type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                              Writer.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                                 Writer.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, Type type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                              Writer.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                                 Writer.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0f5e4b06eda9c2996435d90659faa1a8601d196","date":1329255071,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,Type).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, Type type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                              DocValuesWriterBase.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                                 DocValuesWriterBase.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, Type type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                              Writer.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                                 Writer.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e43f282bea25b8cc26e4a842d98deafd617e9b","date":1337759516,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,String,int,boolean,IOContext,Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,Type).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecNameIdx, String codecNameDat,\n        int maxVersion, boolean doIndex, IOContext context, Type type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                              DocValuesWriterBase.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecNameDat, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                                 DocValuesWriterBase.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecNameIdx,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, Type type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                              DocValuesWriterBase.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                                 DocValuesWriterBase.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,String,int,boolean,IOContext,Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext,Type).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecNameIdx, String codecNameDat,\n        int maxVersion, boolean doIndex, IOContext context, Type type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                              DocValuesWriterBase.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecNameDat, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                                 DocValuesWriterBase.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecNameIdx,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context, Type type) throws IOException {\n      IndexInput dataIn = null;\n      IndexInput indexIn = null;\n      boolean success = false;\n      try {\n        dataIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                              DocValuesWriterBase.DATA_EXTENSION), context);\n        version = CodecUtil.checkHeader(dataIn, codecName, maxVersion, maxVersion);\n        if (doIndex) {\n          indexIn = dir.openInput(IndexFileNames.segmentFileName(id, DV_SEGMENT_SUFFIX,\n                                                                 DocValuesWriterBase.INDEX_EXTENSION), context);\n          final int version2 = CodecUtil.checkHeader(indexIn, codecName,\n                                                     maxVersion, maxVersion);\n          assert version == version2;\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeWhileHandlingException(dataIn, indexIn);\n        }\n      }\n      datIn = dataIn;\n      idxIn = indexIn;\n      this.type = type;\n      this.id = id;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0f5e4b06eda9c2996435d90659faa1a8601d196":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["e0f5e4b06eda9c2996435d90659faa1a8601d196","32e43f282bea25b8cc26e4a842d98deafd617e9b"],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["32e43f282bea25b8cc26e4a842d98deafd617e9b"]},"commit2Childs":{"e0f5e4b06eda9c2996435d90659faa1a8601d196":["3599646b4d4c346cf74d334813488b8b337b5bf5","32e43f282bea25b8cc26e4a842d98deafd617e9b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"32e43f282bea25b8cc26e4a842d98deafd617e9b":["3599646b4d4c346cf74d334813488b8b337b5bf5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3599646b4d4c346cf74d334813488b8b337b5bf5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}