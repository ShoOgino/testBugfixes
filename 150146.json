{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTupleStreamGetShardsPreference().mjava","commits":[{"id":"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839","date":1575929518,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTupleStreamGetShardsPreference().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTupleStreamGetShardsPreference() throws Exception {\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(new SolrClientCache());\n    streamContext.setRequestReplicaListTransformerGenerator(new RequestReplicaListTransformerGenerator(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG\", null, null, null));\n\n    streamContext.setRequestParams(mapParams(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":nrt\"));\n\n    try {\n      ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n      List<String> strings = zkStateReader.aliasesManager.getAliases().resolveAliases(MULTI_REPLICA_COLLECTIONORALIAS);\n      String collName = strings.size() > 0 ? strings.get(0) : MULTI_REPLICA_COLLECTIONORALIAS;\n      Map<String, String> replicaTypeMap = mapReplicasToReplicaType(zkStateReader.getClusterState().getCollectionOrNull(collName));\n\n      // Test from extra params\n      SolrParams sParams = mapParams(\"q\", \"*:*\", ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":pull\");\n      testTupleStreamSorting(streamContext, sParams, \"PULL\", replicaTypeMap);\n\n      // Test defaults from streamContext.getParams()\n      testTupleStreamSorting(streamContext, new ModifiableSolrParams(), \"NRT\", replicaTypeMap);\n\n      // Test defaults from the RLTG\n      streamContext.setRequestParams(new ModifiableSolrParams());\n      testTupleStreamSorting(streamContext, new ModifiableSolrParams(), \"TLOG\", replicaTypeMap);\n    } finally {\n      streamContext.getSolrClientCache().close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"993b0c7dda6341b437fe5685d35c6cc35eaac420","date":1575985950,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testTupleStreamGetShardsPreference().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testTupleStreamGetShardsPreference() throws Exception {\n    StreamContext streamContext = new StreamContext();\n    streamContext.setSolrClientCache(new SolrClientCache());\n    streamContext.setRequestReplicaListTransformerGenerator(new RequestReplicaListTransformerGenerator(ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":TLOG\", null, null, null));\n\n    streamContext.setRequestParams(mapParams(ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":nrt\"));\n\n    try {\n      ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n      List<String> strings = zkStateReader.aliasesManager.getAliases().resolveAliases(MULTI_REPLICA_COLLECTIONORALIAS);\n      String collName = strings.size() > 0 ? strings.get(0) : MULTI_REPLICA_COLLECTIONORALIAS;\n      Map<String, String> replicaTypeMap = mapReplicasToReplicaType(zkStateReader.getClusterState().getCollectionOrNull(collName));\n\n      // Test from extra params\n      SolrParams sParams = mapParams(\"q\", \"*:*\", ShardParams.SHARDS_PREFERENCE, ShardParams.SHARDS_PREFERENCE_REPLICA_TYPE + \":pull\");\n      testTupleStreamSorting(streamContext, sParams, \"PULL\", replicaTypeMap);\n\n      // Test defaults from streamContext.getParams()\n      testTupleStreamSorting(streamContext, new ModifiableSolrParams(), \"NRT\", replicaTypeMap);\n\n      // Test defaults from the RLTG\n      streamContext.setRequestParams(new ModifiableSolrParams());\n      testTupleStreamSorting(streamContext, new ModifiableSolrParams(), \"TLOG\", replicaTypeMap);\n    } finally {\n      streamContext.getSolrClientCache().close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"993b0c7dda6341b437fe5685d35c6cc35eaac420":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"]},"commit2Childs":{"993b0c7dda6341b437fe5685d35c6cc35eaac420":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["993b0c7dda6341b437fe5685d35c6cc35eaac420","ad2b6c2ec630dc0bf592b217af5cd07c62ac2839"],"ad2b6c2ec630dc0bf592b217af5cd07c62ac2839":["993b0c7dda6341b437fe5685d35c6cc35eaac420","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["993b0c7dda6341b437fe5685d35c6cc35eaac420","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}