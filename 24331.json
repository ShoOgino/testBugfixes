{"path":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/src/webapp/src/org/apache/solr/servlet/LogLevelSelection#doGet(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","sourceOld":"  /**\n   * Processes an HTTP GET request and changes the logging level as\n   * specified.\n   */\n  @Override\n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n          throws IOException, ServletException {\n    // Output page\n\n    response.setContentType(\"text/html\");\n    PrintWriter out = response.getWriter();\n    out.write(\"<html><head>\\n\");\n    out.write(\"<title>Solr Admin: JDK Log Level Selector</title>\\n\");\n    out.write(\"<link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"solr-admin.css\\\" />\");\n    out.write(\"</head><body>\\n\");\n    out.write(\"<a href=\\\".\\\"><img border=\\\"0\\\" align=\\\"right\\\" height=\\\"78\\\" width=\\\"142\\\" src=\\\"solr_small.png\\\" alt=\\\"Solr\\\"></a>\");\n    out.write(\"<h1>JDK Log Level Selector</h1>\");\n\n    out.write(\"<p>Below is the complete JDK Log hierarchy with \" +\n            \"intermediate logger/categories synthesized.  \" +\n            \"The effective logging level is shown to the \" +\n            \"far right. If a logger has unset level, then \" +\n            \"the effective level is that of the nearest ancestor \" +\n            \"with a level setting.  Note that this only shows \" +\n            \"JDK Log levels.</p>\\n\");\n\n    out.write(\"<form method='POST'>\\n\");\n\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n    out.write(\"<br><br>\\n\");\n\n    out.write(\"<table cellspacing='2' cellpadding='2'>\");\n\n    out.write(\"<tr bgcolor='#CCCCFF'>\" +\n            \"<th align=left>Logger/Category name<br>\" +\n            \"<th colspan=9>Level</th>\" +\n            \"</tr><tr bgcolor='#CCCCFF'>\" +\n            \"<td bgcolor='#AAAAAA'>\" +\n            \"(Dark rows don't yet exist.)</td>\");\n\n    for (int j = 0; j < LEVELS.length; ++j) {\n      out.write(\"<th align=left>\");\n      if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n      else out.write(\"unset\");\n      out.write(\"</th>\");\n    }\n    out.write(\"<th align=left>Effective</th>\\n\");\n    out.write(\"</tr>\\n\");\n\n    Iterator iWrappers = buildWrappers().iterator();\n    while (iWrappers.hasNext()) {\n\n      LogWrapper wrapper = (LogWrapper) iWrappers.next();\n\n      out.write(\"<tr\");\n      if (wrapper.logger == null) {\n        out.write(\" bgcolor='#AAAAAA'\");\n      }\n      //out.write( ( wrapper.logger != null ) ? \"#DDDDDD\" : \"#AAAAAA\" );\n      out.write(\"><td>\");\n      if (\"\".equals(wrapper.name)) {\n        out.write(\"root\");\n      } else {\n        out.write(wrapper.name);\n      }\n      out.write(\"</td>\\n\");\n      for (int j = 0; j < LEVELS.length; ++j) {\n        out.write(\"<td align=center>\");\n        if (!wrapper.name.equals(\"root\") ||\n                (LEVELS[j] != null)) {\n          out.write(\"<input type='radio' name='\");\n          if (\"\".equals(wrapper.name)) {\n            out.write(\"root\");\n          } else {\n            out.write(wrapper.name);\n          }\n          out.write(\"' value='\");\n          if (LEVELS[j] != null) out.write(LEVELS[j].toString());\n          else out.write(\"unset\");\n          out.write('\\'');\n          if (LEVELS[j] == wrapper.level()) out.write(\" checked\");\n          out.write('>');\n        }\n        out.write(\"</td>\\n\");\n      }\n      out.write(\"<td align=center>\");\n      if (wrapper.logger != null) {\n        out.write(getEffectiveLevel(wrapper.logger).toString());\n      }\n      out.write(\"</td></tr>\\n\");\n    }\n    out.write(\"</table>\\n\");\n\n    out.write(\"<br>\\n\");\n    out.write(\"<input type='submit' name='submit' value='set' \" +\n            \"class='button'>\\n\");\n    out.write(\"<input type='submit' name='submit' value='cancel' \" +\n            \"class='button'>\\n\");\n\n    out.write(\"</form>\\n\");\n\n    out.write(\"</body></html>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["1da8d55113b689b06716246649de6f62430f15c0","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}