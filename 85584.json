{"path":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initReplicaListTransformers(NamedList).mjava","commits":[{"id":"78d42a7a80ee59932aca8a1fe42b53cf202e75ad","date":1566412272,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initReplicaListTransformers(NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private void initReplicaListTransformers(NamedList routingConfig) {\n    String defaultRouting = null;\n    if (routingConfig != null && routingConfig.size() > 0) {\n      Iterator<Entry<String,?>> iter = routingConfig.iterator();\n      do {\n        Entry<String, ?> e = iter.next();\n        String key = e.getKey();\n        switch (key) {\n          case ShardParams.REPLICA_RANDOM:\n            // Only positive assertion of default status (i.e., default=true) is supported.\n            // \"random\" is currently the implicit default, so explicitly configuring\n            // \"random\" as default would not currently be useful, but if the implicit default\n            // changes in the future, checkDefault could be relevant here.\n            defaultRouting = checkDefaultReplicaListTransformer(getNamedList(e.getValue()), key, defaultRouting);\n            break;\n          case ShardParams.REPLICA_STABLE:\n            NamedList<?> c = getNamedList(e.getValue());\n            defaultRouting = checkDefaultReplicaListTransformer(c, key, defaultRouting);\n            this.stableRltFactory = new AffinityReplicaListTransformerFactory(c);\n            break;\n          default:\n            throw new IllegalArgumentException(\"invalid replica routing spec name: \" + key);\n        }\n      } while (iter.hasNext());\n    }\n    if (this.stableRltFactory == null) {\n      this.stableRltFactory = new AffinityReplicaListTransformerFactory();\n    }\n    if (ShardParams.REPLICA_STABLE.equals(defaultRouting)) {\n      this.defaultRltFactory = this.stableRltFactory;\n    } else {\n      this.defaultRltFactory = this.randomRltFactory;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initReplicaListTransformers(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initReplicaListTransformers(NamedList).mjava","sourceNew":"  private void initReplicaListTransformers(NamedList routingConfig) {\n    String defaultRouting = null;\n    ReplicaListTransformerFactory stableRltFactory = null;\n    ReplicaListTransformerFactory defaultRltFactory;\n    if (routingConfig != null && routingConfig.size() > 0) {\n      Iterator<Entry<String,?>> iter = routingConfig.iterator();\n      do {\n        Entry<String, ?> e = iter.next();\n        String key = e.getKey();\n        switch (key) {\n          case ShardParams.REPLICA_RANDOM:\n            // Only positive assertion of default status (i.e., default=true) is supported.\n            // \"random\" is currently the implicit default, so explicitly configuring\n            // \"random\" as default would not currently be useful, but if the implicit default\n            // changes in the future, checkDefault could be relevant here.\n            defaultRouting = checkDefaultReplicaListTransformer(getNamedList(e.getValue()), key, defaultRouting);\n            break;\n          case ShardParams.REPLICA_STABLE:\n            NamedList<?> c = getNamedList(e.getValue());\n            defaultRouting = checkDefaultReplicaListTransformer(c, key, defaultRouting);\n            stableRltFactory = new AffinityReplicaListTransformerFactory(c);\n            break;\n          default:\n            throw new IllegalArgumentException(\"invalid replica routing spec name: \" + key);\n        }\n      } while (iter.hasNext());\n    }\n    if (stableRltFactory == null) {\n      stableRltFactory = new AffinityReplicaListTransformerFactory();\n    }\n    if (ShardParams.REPLICA_STABLE.equals(defaultRouting)) {\n      defaultRltFactory = stableRltFactory;\n    } else {\n      defaultRltFactory = RequestReplicaListTransformerGenerator.RANDOM_RLTF;\n    }\n    this.requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(defaultRltFactory, stableRltFactory);\n  }\n\n","sourceOld":"  private void initReplicaListTransformers(NamedList routingConfig) {\n    String defaultRouting = null;\n    if (routingConfig != null && routingConfig.size() > 0) {\n      Iterator<Entry<String,?>> iter = routingConfig.iterator();\n      do {\n        Entry<String, ?> e = iter.next();\n        String key = e.getKey();\n        switch (key) {\n          case ShardParams.REPLICA_RANDOM:\n            // Only positive assertion of default status (i.e., default=true) is supported.\n            // \"random\" is currently the implicit default, so explicitly configuring\n            // \"random\" as default would not currently be useful, but if the implicit default\n            // changes in the future, checkDefault could be relevant here.\n            defaultRouting = checkDefaultReplicaListTransformer(getNamedList(e.getValue()), key, defaultRouting);\n            break;\n          case ShardParams.REPLICA_STABLE:\n            NamedList<?> c = getNamedList(e.getValue());\n            defaultRouting = checkDefaultReplicaListTransformer(c, key, defaultRouting);\n            this.stableRltFactory = new AffinityReplicaListTransformerFactory(c);\n            break;\n          default:\n            throw new IllegalArgumentException(\"invalid replica routing spec name: \" + key);\n        }\n      } while (iter.hasNext());\n    }\n    if (this.stableRltFactory == null) {\n      this.stableRltFactory = new AffinityReplicaListTransformerFactory();\n    }\n    if (ShardParams.REPLICA_STABLE.equals(defaultRouting)) {\n      this.defaultRltFactory = this.stableRltFactory;\n    } else {\n      this.defaultRltFactory = this.randomRltFactory;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initReplicaListTransformers(NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandlerFactory#initReplicaListTransformers(NamedList).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void initReplicaListTransformers(@SuppressWarnings({\"rawtypes\"})NamedList routingConfig) {\n    String defaultRouting = null;\n    ReplicaListTransformerFactory stableRltFactory = null;\n    ReplicaListTransformerFactory defaultRltFactory;\n    if (routingConfig != null && routingConfig.size() > 0) {\n      Iterator<Entry<String,?>> iter = routingConfig.iterator();\n      do {\n        Entry<String, ?> e = iter.next();\n        String key = e.getKey();\n        switch (key) {\n          case ShardParams.REPLICA_RANDOM:\n            // Only positive assertion of default status (i.e., default=true) is supported.\n            // \"random\" is currently the implicit default, so explicitly configuring\n            // \"random\" as default would not currently be useful, but if the implicit default\n            // changes in the future, checkDefault could be relevant here.\n            defaultRouting = checkDefaultReplicaListTransformer(getNamedList(e.getValue()), key, defaultRouting);\n            break;\n          case ShardParams.REPLICA_STABLE:\n            NamedList<?> c = getNamedList(e.getValue());\n            defaultRouting = checkDefaultReplicaListTransformer(c, key, defaultRouting);\n            stableRltFactory = new AffinityReplicaListTransformerFactory(c);\n            break;\n          default:\n            throw new IllegalArgumentException(\"invalid replica routing spec name: \" + key);\n        }\n      } while (iter.hasNext());\n    }\n    if (stableRltFactory == null) {\n      stableRltFactory = new AffinityReplicaListTransformerFactory();\n    }\n    if (ShardParams.REPLICA_STABLE.equals(defaultRouting)) {\n      defaultRltFactory = stableRltFactory;\n    } else {\n      defaultRltFactory = RequestReplicaListTransformerGenerator.RANDOM_RLTF;\n    }\n    this.requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(defaultRltFactory, stableRltFactory);\n  }\n\n","sourceOld":"  private void initReplicaListTransformers(NamedList routingConfig) {\n    String defaultRouting = null;\n    ReplicaListTransformerFactory stableRltFactory = null;\n    ReplicaListTransformerFactory defaultRltFactory;\n    if (routingConfig != null && routingConfig.size() > 0) {\n      Iterator<Entry<String,?>> iter = routingConfig.iterator();\n      do {\n        Entry<String, ?> e = iter.next();\n        String key = e.getKey();\n        switch (key) {\n          case ShardParams.REPLICA_RANDOM:\n            // Only positive assertion of default status (i.e., default=true) is supported.\n            // \"random\" is currently the implicit default, so explicitly configuring\n            // \"random\" as default would not currently be useful, but if the implicit default\n            // changes in the future, checkDefault could be relevant here.\n            defaultRouting = checkDefaultReplicaListTransformer(getNamedList(e.getValue()), key, defaultRouting);\n            break;\n          case ShardParams.REPLICA_STABLE:\n            NamedList<?> c = getNamedList(e.getValue());\n            defaultRouting = checkDefaultReplicaListTransformer(c, key, defaultRouting);\n            stableRltFactory = new AffinityReplicaListTransformerFactory(c);\n            break;\n          default:\n            throw new IllegalArgumentException(\"invalid replica routing spec name: \" + key);\n        }\n      } while (iter.hasNext());\n    }\n    if (stableRltFactory == null) {\n      stableRltFactory = new AffinityReplicaListTransformerFactory();\n    }\n    if (ShardParams.REPLICA_STABLE.equals(defaultRouting)) {\n      defaultRltFactory = stableRltFactory;\n    } else {\n      defaultRltFactory = RequestReplicaListTransformerGenerator.RANDOM_RLTF;\n    }\n    this.requestReplicaListTransformerGenerator = new RequestReplicaListTransformerGenerator(defaultRltFactory, stableRltFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["78d42a7a80ee59932aca8a1fe42b53cf202e75ad"],"78d42a7a80ee59932aca8a1fe42b53cf202e75ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["833432c363468a5df50f87446a68015404b1fbcf"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"78d42a7a80ee59932aca8a1fe42b53cf202e75ad":["833432c363468a5df50f87446a68015404b1fbcf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78d42a7a80ee59932aca8a1fe42b53cf202e75ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}