{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","commits":[{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5529b83dfe8f452a536b7afe14b0f26b33033c","date":1544111330,"type":4,"author":"Diego Ceccarelli","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    final MockTokenizer in = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in.setReader(reader);\n    StopFilter stpf = new StopFilter(in, stopSet);\n    doTestStopPositons(stpf);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<>();\n    ArrayList<String> a1 = new ArrayList<>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(stopWords1);\n    reader = new StringReader(sb.toString());\n    final MockTokenizer in1 = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n    in1.setReader(reader);\n    StopFilter stpf0 = new StopFilter(in1, stopSet0); // first part of the set\n    StopFilter stpf01 = new StopFilter(stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb5529b83dfe8f452a536b7afe14b0f26b33033c":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb5529b83dfe8f452a536b7afe14b0f26b33033c"]},"commit2Childs":{"cb5529b83dfe8f452a536b7afe14b0f26b33033c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["cb5529b83dfe8f452a536b7afe14b0f26b33033c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}