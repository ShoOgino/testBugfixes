{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","sourceNew":"  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n\n    if (simplify) {\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        sortedTransitions = null;\n        this.finite = null;\n        return;\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        sortedTransitions = null;\n        this.finite = null;\n        return;\n      } else {\n        final String commonPrefix;\n        final String singleton;\n        if (automaton.getSingleton() == null) {\n          commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n          if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n            singleton = commonPrefix;\n          } else {\n            singleton = null;\n          }\n        } else {\n          commonPrefix = null;\n          singleton = automaton.getSingleton();\n        }\n      \n        if (singleton != null) {\n          // matches a fixed string in singleton or expanded\n          // representation\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          sortedTransitions = null;\n          this.finite = null;\n          return;\n        } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n                                                                                       BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n          // matches a constant prefix\n          type = AUTOMATON_TYPE.PREFIX;\n          term = new BytesRef(commonPrefix);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          sortedTransitions = null;\n          this.finite = null;\n          return;\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n    Automaton utf8 = new UTF32ToUTF8().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n    sortedTransitions = utf8.getSortedTransitions();\n  }\n\n","sourceOld":"  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n\n    if (simplify) {\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        sortedTransitions = null;\n        this.finite = null;\n        return;\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        sortedTransitions = null;\n        this.finite = null;\n        return;\n      } else {\n        final String commonPrefix;\n        final String singleton;\n        if (automaton.getSingleton() == null) {\n          commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n          if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n            singleton = commonPrefix;\n          } else {\n            singleton = null;\n          }\n        } else {\n          commonPrefix = null;\n          singleton = automaton.getSingleton();\n        }\n      \n        if (singleton != null) {\n          // matches a fixed string in singleton or expanded\n          // representation\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          sortedTransitions = null;\n          this.finite = null;\n          return;\n        } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n                                                                                       BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n          // matches a constant prefix\n          type = AUTOMATON_TYPE.PREFIX;\n          term = new BytesRef(commonPrefix);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          sortedTransitions = null;\n          this.finite = null;\n          return;\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n    Automaton utf8 = new UTF32ToUTF8().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n    sortedTransitions = utf8.getSortedTransitions();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","sourceNew":"  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n    //automaton.writeDot(\"/l/la/lucene/core/ca.dot\");\n    if (simplify) {\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else {\n        final String commonPrefix;\n        final String singleton;\n        if (automaton.getSingleton() == null) {\n          commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n          if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n            singleton = commonPrefix;\n          } else {\n            singleton = null;\n          }\n        } else {\n          commonPrefix = null;\n          singleton = automaton.getSingleton();\n        }\n      \n        if (singleton != null) {\n          // matches a fixed string in singleton or expanded\n          // representation\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          lightAutomaton = null;\n          this.finite = null;\n          return;\n        } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n                                                                                       BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n          // matches a constant prefix\n          type = AUTOMATON_TYPE.PREFIX;\n          term = new BytesRef(commonPrefix);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          lightAutomaton = null;\n          this.finite = null;\n          return;\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n    LightAutomaton la = automaton.toLightAutomaton();\n\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(la);\n    } else {\n      this.finite = finite;\n    }\n\n    //System.out.println(\"finite=\" + this.finite);\n\n    //System.out.println(\"\\nPRE\");\n    //automaton.writeDot(\"/l/la/lucene/core/ain.dot\");\n    //System.out.println(\"\\nNOW BUILD\");\n    //la.writeDot(\"/l/la/lucene/core/la.dot\");\n    LightAutomaton utf8 = new UTF32ToUTF8Light().convert(la);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      // nocommit fixme\n      // commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n      commonSuffixRef = null;\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n\n    lightAutomaton = runAutomaton.a;\n  }\n\n","sourceOld":"  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n\n    if (simplify) {\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        sortedTransitions = null;\n        this.finite = null;\n        return;\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        sortedTransitions = null;\n        this.finite = null;\n        return;\n      } else {\n        final String commonPrefix;\n        final String singleton;\n        if (automaton.getSingleton() == null) {\n          commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n          if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n            singleton = commonPrefix;\n          } else {\n            singleton = null;\n          }\n        } else {\n          commonPrefix = null;\n          singleton = automaton.getSingleton();\n        }\n      \n        if (singleton != null) {\n          // matches a fixed string in singleton or expanded\n          // representation\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          sortedTransitions = null;\n          this.finite = null;\n          return;\n        } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n                                                                                       BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n          // matches a constant prefix\n          type = AUTOMATON_TYPE.PREFIX;\n          term = new BytesRef(commonPrefix);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          sortedTransitions = null;\n          this.finite = null;\n          return;\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n    Automaton utf8 = new UTF32ToUTF8().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n    sortedTransitions = utf8.getSortedTransitions();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","sourceNew":null,"sourceOld":"  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n    //automaton.writeDot(\"/l/la/lucene/core/ca.dot\");\n    if (simplify) {\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else {\n        final String commonPrefix;\n        final String singleton;\n        if (automaton.getSingleton() == null) {\n          commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n          if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n            singleton = commonPrefix;\n          } else {\n            singleton = null;\n          }\n        } else {\n          commonPrefix = null;\n          singleton = automaton.getSingleton();\n        }\n      \n        if (singleton != null) {\n          // matches a fixed string in singleton or expanded\n          // representation\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          lightAutomaton = null;\n          this.finite = null;\n          return;\n        } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n                                                                                       BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n          // matches a constant prefix\n          type = AUTOMATON_TYPE.PREFIX;\n          term = new BytesRef(commonPrefix);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          lightAutomaton = null;\n          this.finite = null;\n          return;\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n    LightAutomaton la = automaton.toLightAutomaton();\n\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(la);\n    } else {\n      this.finite = finite;\n    }\n\n    //System.out.println(\"finite=\" + this.finite);\n\n    //System.out.println(\"\\nPRE\");\n    //automaton.writeDot(\"/l/la/lucene/core/ain.dot\");\n    //System.out.println(\"\\nNOW BUILD\");\n    //la.writeDot(\"/l/la/lucene/core/la.dot\");\n    LightAutomaton utf8 = new UTF32ToUTF8Light().convert(la);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      // nocommit fixme\n      // commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n      commonSuffixRef = null;\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n\n    lightAutomaton = runAutomaton.a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(LightAutomaton,Boolean,boolean).mjava","sourceNew":"  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n\n    if (simplify) {\n\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n\n      if (Operations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        this.automaton = null;\n        this.finite = null;\n        return;\n      // NOTE: only approximate, because automaton may not be minimal:\n      } else if (Operations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        this.automaton = null;\n        this.finite = null;\n        return;\n      } else {\n\n        automaton = Operations.determinize(automaton);\n\n        final String commonPrefix = Operations.getCommonPrefix(automaton);\n        final String singleton;\n\n        if (commonPrefix.length() > 0 && Operations.sameLanguage(automaton, Automata.makeString(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n\n        if (singleton != null) {\n          // matches a fixed string\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          this.automaton = null;\n          this.finite = null;\n          return;\n        } else if (commonPrefix.length() > 0) {\n          Automaton other = Operations.concatenate(Automata.makeString(commonPrefix), Automata.makeAnyString());\n          other = Operations.determinize(other);\n          assert Operations.hasDeadStates(other) == false;\n          if (Operations.sameLanguage(automaton, other)) {\n            // matches a constant prefix\n            type = AUTOMATON_TYPE.PREFIX;\n            term = new BytesRef(commonPrefix);\n            commonSuffixRef = null;\n            runAutomaton = null;\n            this.automaton = null;\n            this.finite = null;\n            return;\n          }\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n\n    if (finite == null) {\n      this.finite = Operations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n\n    Automaton utf8 = new UTF32ToUTF8().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = Operations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n\n    this.automaton = runAutomaton.automaton;\n  }\n\n","sourceOld":"  public CompiledAutomaton(LightAutomaton automaton, Boolean finite, boolean simplify) {\n\n    if (simplify) {\n\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      // NOTE: only approximate, because automaton may not be minimal:\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        lightAutomaton = null;\n        this.finite = null;\n        return;\n      } else {\n\n        automaton = BasicOperations.determinize(automaton);\n\n        final String commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n        final String singleton;\n\n        if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeStringLight(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n\n        if (singleton != null) {\n          // matches a fixed string\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          lightAutomaton = null;\n          this.finite = null;\n          return;\n        } else if (commonPrefix.length() > 0) {\n          LightAutomaton other = BasicOperations.concatenateLight(BasicAutomata.makeStringLight(commonPrefix), BasicAutomata.makeAnyStringLight());\n          other = BasicOperations.determinize(other);\n          assert BasicOperations.hasDeadStates(other) == false;\n          if (BasicOperations.sameLanguage(automaton, other)) {\n            // matches a constant prefix\n            type = AUTOMATON_TYPE.PREFIX;\n            term = new BytesRef(commonPrefix);\n            commonSuffixRef = null;\n            runAutomaton = null;\n            lightAutomaton = null;\n            this.finite = null;\n            return;\n          }\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n\n    LightAutomaton utf8 = new UTF32ToUTF8Light().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n\n    lightAutomaton = runAutomaton.automaton;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bab620c8ab32bb77a62753eca4afb8e47efa87c","date":1402997861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","sourceNew":"  /** Create this.  If finite is null, we use {@link Operations#isFinite}\n   *  to determine whether it is finite.  If simplify is true, we run\n   *  possibly expensive operations to determine if the automaton is one\n   *  the cases in {@link CompiledAutomaton.AUTOMATON_TYPE}. */\n  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n\n    if (simplify) {\n\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n\n      if (Operations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        this.automaton = null;\n        this.finite = null;\n        return;\n      // NOTE: only approximate, because automaton may not be minimal:\n      } else if (Operations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        this.automaton = null;\n        this.finite = null;\n        return;\n      } else {\n\n        automaton = Operations.determinize(automaton);\n\n        final String commonPrefix = Operations.getCommonPrefix(automaton);\n        final String singleton;\n\n        if (commonPrefix.length() > 0 && Operations.sameLanguage(automaton, Automata.makeString(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n\n        if (singleton != null) {\n          // matches a fixed string\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          this.automaton = null;\n          this.finite = null;\n          return;\n        } else if (commonPrefix.length() > 0) {\n          Automaton other = Operations.concatenate(Automata.makeString(commonPrefix), Automata.makeAnyString());\n          other = Operations.determinize(other);\n          assert Operations.hasDeadStates(other) == false;\n          if (Operations.sameLanguage(automaton, other)) {\n            // matches a constant prefix\n            type = AUTOMATON_TYPE.PREFIX;\n            term = new BytesRef(commonPrefix);\n            commonSuffixRef = null;\n            runAutomaton = null;\n            this.automaton = null;\n            this.finite = null;\n            return;\n          }\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n\n    if (finite == null) {\n      this.finite = Operations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n\n    Automaton utf8 = new UTF32ToUTF8().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = Operations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n\n    this.automaton = runAutomaton.automaton;\n  }\n\n","sourceOld":"  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n\n    if (simplify) {\n\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n\n      if (Operations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        this.automaton = null;\n        this.finite = null;\n        return;\n      // NOTE: only approximate, because automaton may not be minimal:\n      } else if (Operations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        this.automaton = null;\n        this.finite = null;\n        return;\n      } else {\n\n        automaton = Operations.determinize(automaton);\n\n        final String commonPrefix = Operations.getCommonPrefix(automaton);\n        final String singleton;\n\n        if (commonPrefix.length() > 0 && Operations.sameLanguage(automaton, Automata.makeString(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n\n        if (singleton != null) {\n          // matches a fixed string\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          this.automaton = null;\n          this.finite = null;\n          return;\n        } else if (commonPrefix.length() > 0) {\n          Automaton other = Operations.concatenate(Automata.makeString(commonPrefix), Automata.makeAnyString());\n          other = Operations.determinize(other);\n          assert Operations.hasDeadStates(other) == false;\n          if (Operations.sameLanguage(automaton, other)) {\n            // matches a constant prefix\n            type = AUTOMATON_TYPE.PREFIX;\n            term = new BytesRef(commonPrefix);\n            commonSuffixRef = null;\n            runAutomaton = null;\n            this.automaton = null;\n            this.finite = null;\n            return;\n          }\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n\n    if (finite == null) {\n      this.finite = Operations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n\n    Automaton utf8 = new UTF32ToUTF8().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = Operations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n\n    this.automaton = runAutomaton.automaton;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","sourceNew":"  /** Create this.  If finite is null, we use {@link Operations#isFinite}\n   *  to determine whether it is finite.  If simplify is true, we run\n   *  possibly expensive operations to determine if the automaton is one\n   *  the cases in {@link CompiledAutomaton.AUTOMATON_TYPE}. */\n  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n\n    if (automaton.getNumStates() == 0) {\n      automaton = new Automaton();\n      automaton.createState();\n    }\n\n    if (simplify) {\n\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n\n      if (Operations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        this.automaton = null;\n        this.finite = null;\n        return;\n      // NOTE: only approximate, because automaton may not be minimal:\n      } else if (Operations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        this.automaton = null;\n        this.finite = null;\n        return;\n      } else {\n\n        automaton = Operations.determinize(automaton);\n\n        final String commonPrefix = Operations.getCommonPrefix(automaton);\n        final String singleton;\n\n        if (commonPrefix.length() > 0 && Operations.sameLanguage(automaton, Automata.makeString(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n\n        if (singleton != null) {\n          // matches a fixed string\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          this.automaton = null;\n          this.finite = null;\n          return;\n        } else if (commonPrefix.length() > 0) {\n          Automaton other = Operations.concatenate(Automata.makeString(commonPrefix), Automata.makeAnyString());\n          other = Operations.determinize(other);\n          assert Operations.hasDeadStates(other) == false;\n          if (Operations.sameLanguage(automaton, other)) {\n            // matches a constant prefix\n            type = AUTOMATON_TYPE.PREFIX;\n            term = new BytesRef(commonPrefix);\n            commonSuffixRef = null;\n            runAutomaton = null;\n            this.automaton = null;\n            this.finite = null;\n            return;\n          }\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n\n    if (finite == null) {\n      this.finite = Operations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n\n    Automaton utf8 = new UTF32ToUTF8().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = Operations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n\n    this.automaton = runAutomaton.automaton;\n  }\n\n","sourceOld":"  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n\n    if (simplify) {\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n      if (BasicOperations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        sortedTransitions = null;\n        this.finite = null;\n        return;\n      } else if (BasicOperations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        sortedTransitions = null;\n        this.finite = null;\n        return;\n      } else {\n        final String commonPrefix;\n        final String singleton;\n        if (automaton.getSingleton() == null) {\n          commonPrefix = SpecialOperations.getCommonPrefix(automaton);\n          if (commonPrefix.length() > 0 && BasicOperations.sameLanguage(automaton, BasicAutomata.makeString(commonPrefix))) {\n            singleton = commonPrefix;\n          } else {\n            singleton = null;\n          }\n        } else {\n          commonPrefix = null;\n          singleton = automaton.getSingleton();\n        }\n      \n        if (singleton != null) {\n          // matches a fixed string in singleton or expanded\n          // representation\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          sortedTransitions = null;\n          this.finite = null;\n          return;\n        } else if (BasicOperations.sameLanguage(automaton, BasicOperations.concatenate(\n                                                                                       BasicAutomata.makeString(commonPrefix), BasicAutomata.makeAnyString()))) {\n          // matches a constant prefix\n          type = AUTOMATON_TYPE.PREFIX;\n          term = new BytesRef(commonPrefix);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          sortedTransitions = null;\n          this.finite = null;\n          return;\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n    if (finite == null) {\n      this.finite = SpecialOperations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n    Automaton utf8 = new UTF32ToUTF8().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = SpecialOperations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n    sortedTransitions = utf8.getSortedTransitions();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","sourceNew":"  /** Create this.  If finite is null, we use {@link Operations#isFinite}\n   *  to determine whether it is finite.  If simplify is true, we run\n   *  possibly expensive operations to determine if the automaton is one\n   *  the cases in {@link CompiledAutomaton.AUTOMATON_TYPE}. */\n  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n    this(automaton, finite, simplify, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n  }\n\n","sourceOld":"  /** Create this.  If finite is null, we use {@link Operations#isFinite}\n   *  to determine whether it is finite.  If simplify is true, we run\n   *  possibly expensive operations to determine if the automaton is one\n   *  the cases in {@link CompiledAutomaton.AUTOMATON_TYPE}. */\n  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n\n    if (automaton.getNumStates() == 0) {\n      automaton = new Automaton();\n      automaton.createState();\n    }\n\n    if (simplify) {\n\n      // Test whether the automaton is a \"simple\" form and\n      // if so, don't create a runAutomaton.  Note that on a\n      // large automaton these tests could be costly:\n\n      if (Operations.isEmpty(automaton)) {\n        // matches nothing\n        type = AUTOMATON_TYPE.NONE;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        this.automaton = null;\n        this.finite = null;\n        return;\n      // NOTE: only approximate, because automaton may not be minimal:\n      } else if (Operations.isTotal(automaton)) {\n        // matches all possible strings\n        type = AUTOMATON_TYPE.ALL;\n        term = null;\n        commonSuffixRef = null;\n        runAutomaton = null;\n        this.automaton = null;\n        this.finite = null;\n        return;\n      } else {\n\n        automaton = Operations.determinize(automaton);\n\n        final String commonPrefix = Operations.getCommonPrefix(automaton);\n        final String singleton;\n\n        if (commonPrefix.length() > 0 && Operations.sameLanguage(automaton, Automata.makeString(commonPrefix))) {\n          singleton = commonPrefix;\n        } else {\n          singleton = null;\n        }\n\n        if (singleton != null) {\n          // matches a fixed string\n          type = AUTOMATON_TYPE.SINGLE;\n          term = new BytesRef(singleton);\n          commonSuffixRef = null;\n          runAutomaton = null;\n          this.automaton = null;\n          this.finite = null;\n          return;\n        } else if (commonPrefix.length() > 0) {\n          Automaton other = Operations.concatenate(Automata.makeString(commonPrefix), Automata.makeAnyString());\n          other = Operations.determinize(other);\n          assert Operations.hasDeadStates(other) == false;\n          if (Operations.sameLanguage(automaton, other)) {\n            // matches a constant prefix\n            type = AUTOMATON_TYPE.PREFIX;\n            term = new BytesRef(commonPrefix);\n            commonSuffixRef = null;\n            runAutomaton = null;\n            this.automaton = null;\n            this.finite = null;\n            return;\n          }\n        }\n      }\n    }\n\n    type = AUTOMATON_TYPE.NORMAL;\n    term = null;\n\n    if (finite == null) {\n      this.finite = Operations.isFinite(automaton);\n    } else {\n      this.finite = finite;\n    }\n\n    Automaton utf8 = new UTF32ToUTF8().convert(automaton);\n    if (this.finite) {\n      commonSuffixRef = null;\n    } else {\n      commonSuffixRef = Operations.getCommonSuffixBytesRef(utf8);\n    }\n    runAutomaton = new ByteRunAutomaton(utf8, true);\n\n    this.automaton = runAutomaton.automaton;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0088660bdc1c051f58fbc38626d61ccf22dfd3e0","date":1427444574,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","sourceNew":"  /** Create this.  If finite is null, we use {@link Operations#isFinite}\n   *  to determine whether it is finite.  If simplify is true, we run\n   *  possibly expensive operations to determine if the automaton is one\n   *  the cases in {@link CompiledAutomaton.AUTOMATON_TYPE}. */\n  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n    this(automaton, finite, simplify, Operations.DEFAULT_MAX_DETERMINIZED_STATES, false);\n  }\n\n","sourceOld":"  /** Create this.  If finite is null, we use {@link Operations#isFinite}\n   *  to determine whether it is finite.  If simplify is true, we run\n   *  possibly expensive operations to determine if the automaton is one\n   *  the cases in {@link CompiledAutomaton.AUTOMATON_TYPE}. */\n  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n    this(automaton, finite, simplify, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/CompiledAutomaton#CompiledAutomaton(Automaton,Boolean,boolean).mjava","sourceNew":"  /** Create this.  If finite is null, we use {@link Operations#isFinite}\n   *  to determine whether it is finite.  If simplify is true, we run\n   *  possibly expensive operations to determine if the automaton is one\n   *  the cases in {@link CompiledAutomaton.AUTOMATON_TYPE}. */\n  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n    this(automaton, finite, simplify, Operations.DEFAULT_MAX_DETERMINIZED_STATES, false);\n  }\n\n","sourceOld":"  /** Create this.  If finite is null, we use {@link Operations#isFinite}\n   *  to determine whether it is finite.  If simplify is true, we run\n   *  possibly expensive operations to determine if the automaton is one\n   *  the cases in {@link CompiledAutomaton.AUTOMATON_TYPE}. */\n  public CompiledAutomaton(Automaton automaton, Boolean finite, boolean simplify) {\n    this(automaton, finite, simplify, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8b316f82baae88f5e279893a9cb7eee51fd8902f","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0088660bdc1c051f58fbc38626d61ccf22dfd3e0"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["5c84485629d80d203608e8975a1139de9933cc38"],"0088660bdc1c051f58fbc38626d61ccf22dfd3e0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0088660bdc1c051f58fbc38626d61ccf22dfd3e0"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}