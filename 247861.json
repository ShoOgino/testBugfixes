{"path":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#[T-extends-Attribute]_getAttribute(Class[T]).mjava","commits":[{"id":"46c4b24ab9cf49c047a071b66a83b4c49c72e3c8","date":1377091418,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#[T-extends-Attribute]_getAttribute(Class[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#[A-extends-Attribute]_getAttribute(Class[A]).mjava","sourceNew":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * \n   * @throws IllegalArgumentException if this AttributeSource does not contain the\n   *         Attribute. It is recommended to always use {@link #addAttribute} even in consumers\n   *         of TokenStreams, because you cannot know if a specific TokenStream really uses\n   *         a specific Attribute. {@link #addAttribute} will automatically make the attribute\n   *         available. If you want to only use the attribute, if it is available (to optimize\n   *         consuming), use {@link #hasAttribute}.\n   */\n  public final <T extends Attribute> T getAttribute(Class<T> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      throw new IllegalArgumentException(\"This AttributeSource does not have the attribute '\" + attClass.getName() + \"'.\");\n    }\n    return attClass.cast(attImpl);\n  }\n\n","sourceOld":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * \n   * @throws IllegalArgumentException if this AttributeSource does not contain the\n   *         Attribute. It is recommended to always use {@link #addAttribute} even in consumers\n   *         of TokenStreams, because you cannot know if a specific TokenStream really uses\n   *         a specific Attribute. {@link #addAttribute} will automatically make the attribute\n   *         available. If you want to only use the attribute, if it is available (to optimize\n   *         consuming), use {@link #hasAttribute}.\n   */\n  public final <A extends Attribute> A getAttribute(Class<A> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      throw new IllegalArgumentException(\"This AttributeSource does not have the attribute '\" + attClass.getName() + \"'.\");\n    }\n    return attClass.cast(attImpl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#[T-extends-Attribute]_getAttribute(Class[T]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * \n   * @throws IllegalArgumentException if this AttributeSource does not contain the\n   *         Attribute. It is recommended to always use {@link #addAttribute} even in consumers\n   *         of TokenStreams, because you cannot know if a specific TokenStream really uses\n   *         a specific Attribute. {@link #addAttribute} will automatically make the attribute\n   *         available. If you want to only use the attribute, if it is available (to optimize\n   *         consuming), use {@link #hasAttribute}.\n   */\n  public final <T extends Attribute> T getAttribute(Class<T> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      throw new IllegalArgumentException(\"This AttributeSource does not have the attribute '\" + attClass.getName() + \"'.\");\n    }\n    return attClass.cast(attImpl);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63241596de245e96a0a3c36c7b03eb92130b81db","date":1398708795,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#[T-extends-Attribute]_getAttribute(Class[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#[T-extends-Attribute]_getAttribute(Class[T]).mjava","sourceNew":"  /**\n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * <p>\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * \n   * @returns instance of the passed in Attribute, or {@code null} if this AttributeSource \n   *          does not contain the Attribute. It is recommended to always use \n   *          {@link #addAttribute} even in consumers  of TokenStreams, because you cannot \n   *          know if a specific TokenStream really uses a specific Attribute. \n   *          {@link #addAttribute} will automatically make the attribute available. \n   *          If you want to only use the attribute, if it is available (to optimize\n   *          consuming), use {@link #hasAttribute}.\n   */\n  public final <T extends Attribute> T getAttribute(Class<T> attClass) {\n    return attClass.cast(attributes.get(attClass));\n  }\n\n","sourceOld":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * \n   * @throws IllegalArgumentException if this AttributeSource does not contain the\n   *         Attribute. It is recommended to always use {@link #addAttribute} even in consumers\n   *         of TokenStreams, because you cannot know if a specific TokenStream really uses\n   *         a specific Attribute. {@link #addAttribute} will automatically make the attribute\n   *         available. If you want to only use the attribute, if it is available (to optimize\n   *         consuming), use {@link #hasAttribute}.\n   */\n  public final <T extends Attribute> T getAttribute(Class<T> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      throw new IllegalArgumentException(\"This AttributeSource does not have the attribute '\" + attClass.getName() + \"'.\");\n    }\n    return attClass.cast(attImpl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e307596810ed3e15021a60f46fdebab6783c295","date":1398787006,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#[T-extends-Attribute]_getAttribute(Class[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#[T-extends-Attribute]_getAttribute(Class[T]).mjava","sourceNew":"  /**\n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * <p>\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * \n   * @return instance of the passed in Attribute, or {@code null} if this AttributeSource \n   *         does not contain the Attribute. It is recommended to always use \n   *         {@link #addAttribute} even in consumers  of TokenStreams, because you cannot \n   *         know if a specific TokenStream really uses a specific Attribute. \n   *         {@link #addAttribute} will automatically make the attribute available. \n   *         If you want to only use the attribute, if it is available (to optimize\n   *         consuming), use {@link #hasAttribute}.\n   */\n  public final <T extends Attribute> T getAttribute(Class<T> attClass) {\n    return attClass.cast(attributes.get(attClass));\n  }\n\n","sourceOld":"  /**\n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * <p>\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * \n   * @returns instance of the passed in Attribute, or {@code null} if this AttributeSource \n   *          does not contain the Attribute. It is recommended to always use \n   *          {@link #addAttribute} even in consumers  of TokenStreams, because you cannot \n   *          know if a specific TokenStream really uses a specific Attribute. \n   *          {@link #addAttribute} will automatically make the attribute available. \n   *          If you want to only use the attribute, if it is available (to optimize\n   *          consuming), use {@link #hasAttribute}.\n   */\n  public final <T extends Attribute> T getAttribute(Class<T> attClass) {\n    return attClass.cast(attributes.get(attClass));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#[T-extends-Attribute]_getAttribute(Class[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#[T-extends-Attribute]_getAttribute(Class[T]).mjava","sourceNew":"  /**\n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * <p>\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * \n   * @return instance of the passed in Attribute, or {@code null} if this AttributeSource \n   *         does not contain the Attribute. It is recommended to always use \n   *         {@link #addAttribute} even in consumers  of TokenStreams, because you cannot \n   *         know if a specific TokenStream really uses a specific Attribute. \n   *         {@link #addAttribute} will automatically make the attribute available. \n   *         If you want to only use the attribute, if it is available (to optimize\n   *         consuming), use {@link #hasAttribute}.\n   */\n  public final <T extends Attribute> T getAttribute(Class<T> attClass) {\n    return attClass.cast(attributes.get(attClass));\n  }\n\n","sourceOld":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * \n   * @throws IllegalArgumentException if this AttributeSource does not contain the\n   *         Attribute. It is recommended to always use {@link #addAttribute} even in consumers\n   *         of TokenStreams, because you cannot know if a specific TokenStream really uses\n   *         a specific Attribute. {@link #addAttribute} will automatically make the attribute\n   *         available. If you want to only use the attribute, if it is available (to optimize\n   *         consuming), use {@link #hasAttribute}.\n   */\n  public final <T extends Attribute> T getAttribute(Class<T> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      throw new IllegalArgumentException(\"This AttributeSource does not have the attribute '\" + attClass.getName() + \"'.\");\n    }\n    return attClass.cast(attImpl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#[T-extends-Attribute]_getAttribute(Class[T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/AttributeSource#[T-extends-Attribute]_getAttribute(Class[T]).mjava","sourceNew":"  /**\n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * <p>\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * \n   * @return instance of the passed in Attribute, or {@code null} if this AttributeSource \n   *         does not contain the Attribute. It is recommended to always use \n   *         {@link #addAttribute} even in consumers  of TokenStreams, because you cannot \n   *         know if a specific TokenStream really uses a specific Attribute. \n   *         {@link #addAttribute} will automatically make the attribute available. \n   *         If you want to only use the attribute, if it is available (to optimize\n   *         consuming), use {@link #hasAttribute}.\n   */\n  public final <T extends Attribute> T getAttribute(Class<T> attClass) {\n    return attClass.cast(attributes.get(attClass));\n  }\n\n","sourceOld":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * \n   * @throws IllegalArgumentException if this AttributeSource does not contain the\n   *         Attribute. It is recommended to always use {@link #addAttribute} even in consumers\n   *         of TokenStreams, because you cannot know if a specific TokenStream really uses\n   *         a specific Attribute. {@link #addAttribute} will automatically make the attribute\n   *         available. If you want to only use the attribute, if it is available (to optimize\n   *         consuming), use {@link #hasAttribute}.\n   */\n  public final <T extends Attribute> T getAttribute(Class<T> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      throw new IllegalArgumentException(\"This AttributeSource does not have the attribute '\" + attClass.getName() + \"'.\");\n    }\n    return attClass.cast(attImpl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["46c4b24ab9cf49c047a071b66a83b4c49c72e3c8","3e307596810ed3e15021a60f46fdebab6783c295"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["46c4b24ab9cf49c047a071b66a83b4c49c72e3c8","3394716f52b34ab259ad5247e7595d9f9db6e935"],"63241596de245e96a0a3c36c7b03eb92130b81db":["46c4b24ab9cf49c047a071b66a83b4c49c72e3c8"],"3e307596810ed3e15021a60f46fdebab6783c295":["63241596de245e96a0a3c36c7b03eb92130b81db"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","46c4b24ab9cf49c047a071b66a83b4c49c72e3c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"46c4b24ab9cf49c047a071b66a83b4c49c72e3c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"63241596de245e96a0a3c36c7b03eb92130b81db":["3e307596810ed3e15021a60f46fdebab6783c295"],"3e307596810ed3e15021a60f46fdebab6783c295":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","46c4b24ab9cf49c047a071b66a83b4c49c72e3c8"],"46c4b24ab9cf49c047a071b66a83b4c49c72e3c8":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","63241596de245e96a0a3c36c7b03eb92130b81db","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}