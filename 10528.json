{"path":"src/java/org/apache/lucene/search/DisjunctionSumScorer#explain(int).mjava","commits":[{"id":"29d6eadc26bef1d3f5d3804b90cb7ba77162d007","date":1106594461,"type":0,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#explain(int).mjava","pathOld":"/dev/null","sourceNew":" /** Gives and explanation for the score of a given document.\n  * @todo Show the resulting score. See BooleanScorer.explain() on how to do this.\n  */\n  public Explanation explain(int doc) throws IOException {\n    Explanation res = new Explanation();\n    res.setDescription(\"At least \" + minimumNrMatchers + \" of\");\n    Iterator ssi = subScorers.iterator();\n    while (ssi.hasNext()) {\n      res.addDetail( ((Scorer) ssi.next()).explain(doc));\n    }\n    return res;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed","date":1161132968,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#explain(int).mjava","sourceNew":"  /** @return An explanation for the score of a given document. */\n  public Explanation explain(int doc) throws IOException {\n    Explanation res = new Explanation();\n    Iterator ssi = subScorers.iterator();\n    float sumScore = 0.0f;\n    int nrMatches = 0;\n    while (ssi.hasNext()) {\n      Explanation es = ((Scorer) ssi.next()).explain(doc);\n      if (es.getValue() > 0.0f) { // indicates match\n        sumScore += es.getValue();\n        nrMatches++;\n      }\n      res.addDetail(es);\n    }\n    if (nrMatchers >= minimumNrMatchers) {\n      res.setValue(sumScore);\n      res.setDescription(\"sum over at least \" + minimumNrMatchers\n                         + \" of \" + subScorers.size() + \":\");\n    } else {\n      res.setValue(0.0f);\n      res.setDescription(nrMatches + \" match(es) but at least \"\n                         + minimumNrMatchers + \" of \"\n                         + subScorers.size() + \" needed\");\n    }\n    return res;\n  }\n\n","sourceOld":" /** Gives and explanation for the score of a given document.\n  * @todo Show the resulting score. See BooleanScorer.explain() on how to do this.\n  */\n  public Explanation explain(int doc) throws IOException {\n    Explanation res = new Explanation();\n    res.setDescription(\"At least \" + minimumNrMatchers + \" of\");\n    Iterator ssi = subScorers.iterator();\n    while (ssi.hasNext()) {\n      res.addDetail( ((Scorer) ssi.next()).explain(doc));\n    }\n    return res;\n  }\n\n","bugFix":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d3ac29cb12b76130b702427d6bcd355e68d126","date":1255699234,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/DisjunctionSumScorer#explain(int).mjava","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#explain(int).mjava","sourceNew":"  /** @return An explanation for the score of a given document. */\n  @Override\n  public Explanation explain(int doc) throws IOException {\n    Explanation res = new Explanation();\n    float sumScore = 0.0f;\n    int nrMatches = 0;\n    for (Scorer se : subScorers) {\n      Explanation es = se.explain(doc);\n      if (es.getValue() > 0.0f) { // indicates match\n        sumScore += es.getValue();\n        nrMatches++;\n      }\n      res.addDetail(es);\n    }\n    if (nrMatchers >= minimumNrMatchers) {\n      res.setValue(sumScore);\n      res.setDescription(\"sum over at least \" + minimumNrMatchers\n                         + \" of \" + subScorers.size() + \":\");\n    } else {\n      res.setValue(0.0f);\n      res.setDescription(nrMatches + \" match(es) but at least \"\n                         + minimumNrMatchers + \" of \"\n                         + subScorers.size() + \" needed\");\n    }\n    return res;\n  }\n\n","sourceOld":"  /** @return An explanation for the score of a given document. */\n  public Explanation explain(int doc) throws IOException {\n    Explanation res = new Explanation();\n    Iterator ssi = subScorers.iterator();\n    float sumScore = 0.0f;\n    int nrMatches = 0;\n    while (ssi.hasNext()) {\n      Explanation es = ((Scorer) ssi.next()).explain(doc);\n      if (es.getValue() > 0.0f) { // indicates match\n        sumScore += es.getValue();\n        nrMatches++;\n      }\n      res.addDetail(es);\n    }\n    if (nrMatchers >= minimumNrMatchers) {\n      res.setValue(sumScore);\n      res.setDescription(\"sum over at least \" + minimumNrMatchers\n                         + \" of \" + subScorers.size() + \":\");\n    } else {\n      res.setValue(0.0f);\n      res.setDescription(nrMatches + \" match(es) but at least \"\n                         + minimumNrMatchers + \" of \"\n                         + subScorers.size() + \" needed\");\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"486cfd5a3f7481938475c113415d896f7a74a4a9","date":1256682581,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/DisjunctionSumScorer#explain(int).mjava","sourceNew":null,"sourceOld":"  /** @return An explanation for the score of a given document. */\n  @Override\n  public Explanation explain(int doc) throws IOException {\n    Explanation res = new Explanation();\n    float sumScore = 0.0f;\n    int nrMatches = 0;\n    for (Scorer se : subScorers) {\n      Explanation es = se.explain(doc);\n      if (es.getValue() > 0.0f) { // indicates match\n        sumScore += es.getValue();\n        nrMatches++;\n      }\n      res.addDetail(es);\n    }\n    if (nrMatchers >= minimumNrMatchers) {\n      res.setValue(sumScore);\n      res.setDescription(\"sum over at least \" + minimumNrMatchers\n                         + \" of \" + subScorers.size() + \":\");\n    } else {\n      res.setValue(0.0f);\n      res.setDescription(nrMatches + \" match(es) but at least \"\n                         + minimumNrMatchers + \" of \"\n                         + subScorers.size() + \" needed\");\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["486cfd5a3f7481938475c113415d896f7a74a4a9"]},"commit2Childs":{"486cfd5a3f7481938475c113415d896f7a74a4a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed":["e0d3ac29cb12b76130b702427d6bcd355e68d126"],"e0d3ac29cb12b76130b702427d6bcd355e68d126":["486cfd5a3f7481938475c113415d896f7a74a4a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"29d6eadc26bef1d3f5d3804b90cb7ba77162d007":["2e7672ca1c0bbf8f4b8c130c2debe1da508a27ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}