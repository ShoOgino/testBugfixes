{"path":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","commits":[{"id":"0a2a4e39332de25d2866f373dbf3991a7125b31d","date":1246542679,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,SolrCore,Query,SolrParams).mjava","sourceNew":"\t/**\n\t * Prepares Carrot2 documents for clustering.\n\t */\n\tprivate List<Document> getDocuments(DocList docList,\n\t\t\tQuery query, final SolrQueryRequest sreq) throws IOException {\n\t\tSolrHighlighter highligher = null;\n                SolrParams solrParams = sreq.getParams();\n                SolrCore core = sreq.getCore();\n\n\t\t// Names of fields to deliver content for clustering\n\t\tString urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n\t\tString titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n\t\tString snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n\t\t\t\ttitleField);\n\t\tif (StringUtils.isBlank(snippetField)) {\n\t\t\tthrow new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n\t\t\t\t\t+ \" must not be blank.\");\n\t\t}\n\t\tSet<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n\t\t\t\tsnippetField, idFieldName);\n\n\t\t// Get the documents\n\t\tDocIterator docsIter = docList.iterator();\n\t\tboolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n\t\t\t\tfalse);\n\n\t\tSolrQueryRequest req = null;\n\t\tString[] snippetFieldAry = null;\n\t\tif (produceSummary == true) {\n\t\t\thighligher = core.getHighlighter();\n\t\t\tMap args = new HashMap();\n\t\t\tsnippetFieldAry = new String[] { snippetField };\n\t\t\targs.put(HighlightParams.FIELDS, snippetFieldAry);\n\t\t\targs.put(HighlightParams.HIGHLIGHT, \"true\");\n\t\t\treq = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n                          @Override\n                          public SolrIndexSearcher getSearcher() {\n                            return sreq.getSearcher();\n                          }\n                        };\n\t\t}\n\n\t\tSolrIndexSearcher searcher = sreq.getSearcher();\n\t\tList<Document> result = new ArrayList<Document>(docList.size());\n\t\t\tFieldSelector fieldSelector = new SetBasedFieldSelector(fieldsToLoad,\n\t\t\t\t\tCollections.emptySet());\n\t\t\tfloat[] scores = { 1.0f };\n\t\t\tint[] docsHolder = new int[1];\n\t\t\tQuery theQuery = query;\n\n\t\t\twhile (docsIter.hasNext()) {\n\t\t\t\tInteger id = docsIter.next();\n\t\t\t\torg.apache.lucene.document.Document doc = searcher.doc(id,\n\t\t\t\t\t\tfieldSelector);\n\t\t\t\tString snippet = getValue(doc, snippetField);\n\t\t\t\tif (produceSummary == true) {\n\t\t\t\t\tdocsHolder[0] = id.intValue();\n\t\t\t\t\tDocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n\t\t\t\t\thighligher.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n\t\t\t\t}\n\t\t\t\tDocument carrotDocument = new Document(getValue(doc, titleField),\n\t\t\t\t\t\tsnippet, doc.get(urlField));\n\t\t\t\tcarrotDocument.addField(\"solrId\", doc.get(idFieldName));\n\t\t\t\tresult.add(carrotDocument);\n\t\t\t}\n\n\t\treturn result;\n\t}\n\n","sourceOld":"\t/**\n\t * Prepares Carrot2 documents for clustering.\n\t */\n\tprivate List<Document> getDocuments(DocList docList, SolrCore core,\n\t\t\tQuery query, SolrParams solrParams) {\n\t\tSolrHighlighter highligher = null;\n\n\t\t// Names of fields to deliver content for clustering\n\t\tString urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n\t\tString titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n\t\tString snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n\t\t\t\ttitleField);\n\t\tif (StringUtils.isBlank(snippetField)) {\n\t\t\tthrow new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n\t\t\t\t\t+ \" must not be blank.\");\n\t\t}\n\t\tSet<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n\t\t\t\tsnippetField, idFieldName);\n\n\t\t// Get the documents\n\t\tDocIterator docsIter = docList.iterator();\n\t\tboolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n\t\t\t\tfalse);\n\n\t\tSolrQueryRequest req = null;\n\t\tString[] snippetFieldAry = null;\n\t\tif (produceSummary == true) {\n\t\t\thighligher = core.getHighlighter();\n\t\t\tMap args = new HashMap();\n\t\t\tsnippetFieldAry = new String[] { snippetField };\n\t\t\targs.put(HighlightParams.FIELDS, snippetFieldAry);\n\t\t\targs.put(HighlightParams.HIGHLIGHT, \"true\");\n\t\t\treq = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args);\n\t\t}\n\n\t\tRefCounted<SolrIndexSearcher> refCounter = core.getSearcher();\n\t\tSolrIndexSearcher searcher = refCounter.get();\n\t\tList<Document> result = new ArrayList<Document>(docList.size());\n\t\ttry {\n\t\t\tFieldSelector fieldSelector = new SetBasedFieldSelector(fieldsToLoad,\n\t\t\t\t\tCollections.emptySet());\n\t\t\tfloat[] scores = { 1.0f };\n\t\t\tint[] docsHolder = new int[1];\n\t\t\tQuery theQuery = query;\n\n\t\t\twhile (docsIter.hasNext()) {\n\t\t\t\tInteger id = docsIter.next();\n\t\t\t\torg.apache.lucene.document.Document doc = searcher.doc(id,\n\t\t\t\t\t\tfieldSelector);\n\t\t\t\tString snippet = getValue(doc, snippetField);\n\t\t\t\tif (produceSummary == true) {\n\t\t\t\t\tdocsHolder[0] = id.intValue();\n\t\t\t\t\tDocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n\t\t\t\t\thighligher.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n\t\t\t\t}\n\t\t\t\tDocument carrotDocument = new Document(getValue(doc, titleField),\n\t\t\t\t\t\tsnippet, doc.get(urlField));\n\t\t\t\tcarrotDocument.addField(\"solrId\", doc.get(idFieldName));\n\t\t\t\tresult.add(carrotDocument);\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"IOException\", e);\n\t\t} finally {\n\t\t\trefCounter.decref();\n\t\t}\n\t\treturn result;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8","date":1246543717,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(DocList docList,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highligher = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    // Names of fields to deliver content for clustering\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n            titleField);\n    if (StringUtils.isBlank(snippetField)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n              + \" must not be blank.\");\n    }\n    Set<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n            snippetField, idFieldName);\n\n    // Get the documents\n    DocIterator docsIter = docList.iterator();\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n            false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highligher = core.getHighlighter();\n      Map args = new HashMap();\n      snippetFieldAry = new String[]{snippetField};\n      args.put(HighlightParams.FIELDS, snippetFieldAry);\n      args.put(HighlightParams.HIGHLIGHT, \"true\");\n      req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n        @Override\n        public SolrIndexSearcher getSearcher() {\n          return sreq.getSearcher();\n        }\n      };\n    }\n\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    List<Document> result = new ArrayList<Document>(docList.size());\n    FieldSelector fieldSelector = new SetBasedFieldSelector(fieldsToLoad,\n            Collections.emptySet());\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      Integer id = docsIter.next();\n      org.apache.lucene.document.Document doc = searcher.doc(id,\n              fieldSelector);\n      String snippet = getValue(doc, snippetField);\n      if (produceSummary == true) {\n        docsHolder[0] = id.intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        highligher.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n      }\n      Document carrotDocument = new Document(getValue(doc, titleField),\n              snippet, doc.get(urlField));\n      carrotDocument.addField(\"solrId\", doc.get(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":"\t/**\n\t * Prepares Carrot2 documents for clustering.\n\t */\n\tprivate List<Document> getDocuments(DocList docList,\n\t\t\tQuery query, final SolrQueryRequest sreq) throws IOException {\n\t\tSolrHighlighter highligher = null;\n                SolrParams solrParams = sreq.getParams();\n                SolrCore core = sreq.getCore();\n\n\t\t// Names of fields to deliver content for clustering\n\t\tString urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n\t\tString titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n\t\tString snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n\t\t\t\ttitleField);\n\t\tif (StringUtils.isBlank(snippetField)) {\n\t\t\tthrow new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n\t\t\t\t\t+ \" must not be blank.\");\n\t\t}\n\t\tSet<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n\t\t\t\tsnippetField, idFieldName);\n\n\t\t// Get the documents\n\t\tDocIterator docsIter = docList.iterator();\n\t\tboolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n\t\t\t\tfalse);\n\n\t\tSolrQueryRequest req = null;\n\t\tString[] snippetFieldAry = null;\n\t\tif (produceSummary == true) {\n\t\t\thighligher = core.getHighlighter();\n\t\t\tMap args = new HashMap();\n\t\t\tsnippetFieldAry = new String[] { snippetField };\n\t\t\targs.put(HighlightParams.FIELDS, snippetFieldAry);\n\t\t\targs.put(HighlightParams.HIGHLIGHT, \"true\");\n\t\t\treq = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n                          @Override\n                          public SolrIndexSearcher getSearcher() {\n                            return sreq.getSearcher();\n                          }\n                        };\n\t\t}\n\n\t\tSolrIndexSearcher searcher = sreq.getSearcher();\n\t\tList<Document> result = new ArrayList<Document>(docList.size());\n\t\t\tFieldSelector fieldSelector = new SetBasedFieldSelector(fieldsToLoad,\n\t\t\t\t\tCollections.emptySet());\n\t\t\tfloat[] scores = { 1.0f };\n\t\t\tint[] docsHolder = new int[1];\n\t\t\tQuery theQuery = query;\n\n\t\t\twhile (docsIter.hasNext()) {\n\t\t\t\tInteger id = docsIter.next();\n\t\t\t\torg.apache.lucene.document.Document doc = searcher.doc(id,\n\t\t\t\t\t\tfieldSelector);\n\t\t\t\tString snippet = getValue(doc, snippetField);\n\t\t\t\tif (produceSummary == true) {\n\t\t\t\t\tdocsHolder[0] = id.intValue();\n\t\t\t\t\tDocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n\t\t\t\t\thighligher.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n\t\t\t\t}\n\t\t\t\tDocument carrotDocument = new Document(getValue(doc, titleField),\n\t\t\t\t\t\tsnippet, doc.get(urlField));\n\t\t\t\tcarrotDocument.addField(\"solrId\", doc.get(idFieldName));\n\t\t\t\tresult.add(carrotDocument);\n\t\t\t}\n\n\t\treturn result;\n\t}\n\n","bugFix":null,"bugIntro":["5c5b0f07c6835b1a381980a03c88fbb4e41c4532","5c5b0f07c6835b1a381980a03c88fbb4e41c4532","5c5b0f07c6835b1a381980a03c88fbb4e41c4532","5c5b0f07c6835b1a381980a03c88fbb4e41c4532"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2c22c12a04591ed2bc10b25fc762f9b580e2d1d6","date":1261587702,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(DocList docList,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highligher = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    // Names of fields to deliver content for clustering\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n            titleField);\n    if (StringUtils.isBlank(snippetField)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n              + \" must not be blank.\");\n    }\n    Set<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n            snippetField, idFieldName);\n\n    // Get the documents\n    DocIterator docsIter = docList.iterator();\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n            false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highligher = core.getHighlighter();\n      Map args = new HashMap();\n      snippetFieldAry = new String[]{snippetField};\n      args.put(HighlightParams.FIELDS, snippetFieldAry);\n      args.put(HighlightParams.HIGHLIGHT, \"true\");\n      req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n        @Override\n        public SolrIndexSearcher getSearcher() {\n          return sreq.getSearcher();\n        }\n      };\n    }\n\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    List<Document> result = new ArrayList<Document>(docList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      Integer id = docsIter.next();\n      org.apache.lucene.document.Document doc = searcher.doc(id,\n              fieldsToLoad);\n      String snippet = getValue(doc, snippetField);\n      if (produceSummary == true) {\n        docsHolder[0] = id.intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        highligher.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n      }\n      Document carrotDocument = new Document(getValue(doc, titleField),\n              snippet, doc.get(urlField));\n      carrotDocument.addField(\"solrId\", doc.get(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(DocList docList,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highligher = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    // Names of fields to deliver content for clustering\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n            titleField);\n    if (StringUtils.isBlank(snippetField)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n              + \" must not be blank.\");\n    }\n    Set<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n            snippetField, idFieldName);\n\n    // Get the documents\n    DocIterator docsIter = docList.iterator();\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n            false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highligher = core.getHighlighter();\n      Map args = new HashMap();\n      snippetFieldAry = new String[]{snippetField};\n      args.put(HighlightParams.FIELDS, snippetFieldAry);\n      args.put(HighlightParams.HIGHLIGHT, \"true\");\n      req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n        @Override\n        public SolrIndexSearcher getSearcher() {\n          return sreq.getSearcher();\n        }\n      };\n    }\n\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    List<Document> result = new ArrayList<Document>(docList.size());\n    FieldSelector fieldSelector = new SetBasedFieldSelector(fieldsToLoad,\n            Collections.emptySet());\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      Integer id = docsIter.next();\n      org.apache.lucene.document.Document doc = searcher.doc(id,\n              fieldSelector);\n      String snippet = getValue(doc, snippetField);\n      if (produceSummary == true) {\n        docsHolder[0] = id.intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        highligher.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n      }\n      Document carrotDocument = new Document(getValue(doc, titleField),\n              snippet, doc.get(urlField));\n      carrotDocument.addField(\"solrId\", doc.get(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"10c9bc7c61bddaf04f5dbf85f69baec5209200d1","date":1262615339,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(DocList docList,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    // Names of fields to deliver content for clustering\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n            titleField);\n    if (StringUtils.isBlank(snippetField)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n              + \" must not be blank.\");\n    }\n    Set<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n            snippetField, idFieldName);\n\n    // Get the documents\n    DocIterator docsIter = docList.iterator();\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n            false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    List<Document> result = new ArrayList<Document>(docList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      Integer id = docsIter.next();\n      org.apache.lucene.document.Document doc = searcher.doc(id,\n              fieldsToLoad);\n      String snippet = getValue(doc, snippetField);\n      if (produceSummary == true) {\n        docsHolder[0] = id.intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(doc, titleField),\n              snippet, doc.get(urlField));\n      carrotDocument.setField(\"solrId\", doc.get(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(DocList docList,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highligher = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    // Names of fields to deliver content for clustering\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n            titleField);\n    if (StringUtils.isBlank(snippetField)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n              + \" must not be blank.\");\n    }\n    Set<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n            snippetField, idFieldName);\n\n    // Get the documents\n    DocIterator docsIter = docList.iterator();\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n            false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highligher = core.getHighlighter();\n      Map args = new HashMap();\n      snippetFieldAry = new String[]{snippetField};\n      args.put(HighlightParams.FIELDS, snippetFieldAry);\n      args.put(HighlightParams.HIGHLIGHT, \"true\");\n      req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n        @Override\n        public SolrIndexSearcher getSearcher() {\n          return sreq.getSearcher();\n        }\n      };\n    }\n\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    List<Document> result = new ArrayList<Document>(docList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      Integer id = docsIter.next();\n      org.apache.lucene.document.Document doc = searcher.doc(id,\n              fieldsToLoad);\n      String snippet = getValue(doc, snippetField);\n      if (produceSummary == true) {\n        docsHolder[0] = id.intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        highligher.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n      }\n      Document carrotDocument = new Document(getValue(doc, titleField),\n              snippet, doc.get(urlField));\n      carrotDocument.addField(\"solrId\", doc.get(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","pathOld":"contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngine#getDocuments(DocList,Query,SolrQueryRequest).mjava","sourceNew":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(DocList docList,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    // Names of fields to deliver content for clustering\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n            titleField);\n    if (StringUtils.isBlank(snippetField)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n              + \" must not be blank.\");\n    }\n    Set<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n            snippetField, idFieldName);\n\n    // Get the documents\n    DocIterator docsIter = docList.iterator();\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n            false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    List<Document> result = new ArrayList<Document>(docList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      Integer id = docsIter.next();\n      org.apache.lucene.document.Document doc = searcher.doc(id,\n              fieldsToLoad);\n      String snippet = getValue(doc, snippetField);\n      if (produceSummary == true) {\n        docsHolder[0] = id.intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(doc, titleField),\n              snippet, doc.get(urlField));\n      carrotDocument.setField(\"solrId\", doc.get(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Prepares Carrot2 documents for clustering.\n   */\n  private List<Document> getDocuments(DocList docList,\n                                      Query query, final SolrQueryRequest sreq) throws IOException {\n    SolrHighlighter highlighter = null;\n    SolrParams solrParams = sreq.getParams();\n    SolrCore core = sreq.getCore();\n\n    // Names of fields to deliver content for clustering\n    String urlField = solrParams.get(CarrotParams.URL_FIELD_NAME, \"url\");\n    String titleField = solrParams.get(CarrotParams.TITLE_FIELD_NAME, \"title\");\n    String snippetField = solrParams.get(CarrotParams.SNIPPET_FIELD_NAME,\n            titleField);\n    if (StringUtils.isBlank(snippetField)) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, CarrotParams.SNIPPET_FIELD_NAME\n              + \" must not be blank.\");\n    }\n    Set<String> fieldsToLoad = Sets.newHashSet(urlField, titleField,\n            snippetField, idFieldName);\n\n    // Get the documents\n    DocIterator docsIter = docList.iterator();\n    boolean produceSummary = solrParams.getBool(CarrotParams.PRODUCE_SUMMARY,\n            false);\n\n    SolrQueryRequest req = null;\n    String[] snippetFieldAry = null;\n    if (produceSummary == true) {\n      highlighter = core.getHighlighter();\n      if (highlighter != null){\n        Map args = new HashMap();\n        snippetFieldAry = new String[]{snippetField};\n        args.put(HighlightParams.FIELDS, snippetFieldAry);\n        args.put(HighlightParams.HIGHLIGHT, \"true\");\n        args.put(HighlightParams.SIMPLE_PRE, \"\"); //we don't care about actually highlighting the area\n        args.put(HighlightParams.SIMPLE_POST, \"\");\n        args.put(HighlightParams.FRAGSIZE, solrParams.getInt(CarrotParams.SUMMARY_FRAGSIZE, solrParams.getInt(HighlightParams.FRAGSIZE, 100)));\n        req = new LocalSolrQueryRequest(core, query.toString(), \"\", 0, 1, args) {\n          @Override\n          public SolrIndexSearcher getSearcher() {\n            return sreq.getSearcher();\n          }\n        };\n      } else {\n        log.warn(\"No highlighter configured, cannot produce summary\");\n        produceSummary = false;\n      }\n    }\n\n    SolrIndexSearcher searcher = sreq.getSearcher();\n    List<Document> result = new ArrayList<Document>(docList.size());\n\n    float[] scores = {1.0f};\n    int[] docsHolder = new int[1];\n    Query theQuery = query;\n\n    while (docsIter.hasNext()) {\n      Integer id = docsIter.next();\n      org.apache.lucene.document.Document doc = searcher.doc(id,\n              fieldsToLoad);\n      String snippet = getValue(doc, snippetField);\n      if (produceSummary == true) {\n        docsHolder[0] = id.intValue();\n        DocList docAsList = new DocSlice(0, 1, docsHolder, scores, 1, 1.0f);\n        NamedList highlights = highlighter.doHighlighting(docAsList, theQuery, req, snippetFieldAry);\n        if (highlights != null && highlights.size() == 1) {//should only be one value given our setup\n          //should only be one document with one field\n          NamedList tmp = (NamedList) highlights.getVal(0);\n          String [] highlt = (String[]) tmp.get(snippetField);\n          if (highlt != null && highlt.length == 1) {\n            snippet = highlt[0];\n          }\n        }\n      }\n      Document carrotDocument = new Document(getValue(doc, titleField),\n              snippet, doc.get(urlField));\n      carrotDocument.setField(\"solrId\", doc.get(idFieldName));\n      result.add(carrotDocument);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"10c9bc7c61bddaf04f5dbf85f69baec5209200d1":["2c22c12a04591ed2bc10b25fc762f9b580e2d1d6"],"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8":["0a2a4e39332de25d2866f373dbf3991a7125b31d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["10c9bc7c61bddaf04f5dbf85f69baec5209200d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2c22c12a04591ed2bc10b25fc762f9b580e2d1d6":["d2771e5f68dda632a1044fdfecbc7bffae0a4ea8"]},"commit2Childs":{"0a2a4e39332de25d2866f373dbf3991a7125b31d":["d2771e5f68dda632a1044fdfecbc7bffae0a4ea8"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0a2a4e39332de25d2866f373dbf3991a7125b31d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"10c9bc7c61bddaf04f5dbf85f69baec5209200d1":["ad94625fb8d088209f46650c8097196fec67f00c"],"d2771e5f68dda632a1044fdfecbc7bffae0a4ea8":["2c22c12a04591ed2bc10b25fc762f9b580e2d1d6"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2c22c12a04591ed2bc10b25fc762f9b580e2d1d6":["10c9bc7c61bddaf04f5dbf85f69baec5209200d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}