{"path":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","commits":[{"id":"7cc06bf372c14250dd19e96f105b987c528618aa","date":1370446051,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testAddBigIntegerValueToTrieField() throws Exception {\n    // Adding a BigInteger to a long field should fail\n    // BigInteger.longValue() returns only the low-order 64 bits.\n    try {\n      updateJ((\"[{'id':'1','big_integer_tl':12345678901234567890}]\").replace('\\'', '\"'), null);\n      fail(\"A BigInteger value should overflow a long field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    // Adding a BigInteger to an integer field should fail\n    // BigInteger.intValue() returns only the low-order 32 bits.\n    try {\n      updateJ((\"[{'id':'1','big_integer_ti':12345678901234567890}]\").replace('\\'', '\"'), null);\n      fail(\"A BigInteger value should overflow an integer field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a861905d20d470cd3658b3599c82d0300893dee","date":1373486061,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","sourceNew":"  @Test\n  public void testAddBigIntegerValueToTrieField() throws Exception {\n    // Adding a BigInteger to a long field should fail\n    // BigInteger.longValue() returns only the low-order 64 bits.\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_tl':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow a long field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    // Adding a BigInteger to an integer field should fail\n    // BigInteger.intValue() returns only the low-order 32 bits.\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_ti':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow an integer field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testAddBigIntegerValueToTrieField() throws Exception {\n    // Adding a BigInteger to a long field should fail\n    // BigInteger.longValue() returns only the low-order 64 bits.\n    try {\n      updateJ((\"[{'id':'1','big_integer_tl':12345678901234567890}]\").replace('\\'', '\"'), null);\n      fail(\"A BigInteger value should overflow a long field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    // Adding a BigInteger to an integer field should fail\n    // BigInteger.intValue() returns only the low-order 32 bits.\n    try {\n      updateJ((\"[{'id':'1','big_integer_ti':12345678901234567890}]\").replace('\\'', '\"'), null);\n      fail(\"A BigInteger value should overflow an integer field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68f3f27ece1bcf0e5308dd9c7ea4ed86dc68e684","date":1373486766,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","sourceNew":"  @Test\n  public void testAddBigIntegerValueToTrieField() throws Exception {\n    // Adding a BigInteger to a long field should fail\n    // BigInteger.longValue() returns only the low-order 64 bits.\n\n    ignoreException(\"big_integer_t\");\n\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_tl':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow a long field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    // Adding a BigInteger to an integer field should fail\n    // BigInteger.intValue() returns only the low-order 32 bits.\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_ti':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow an integer field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    unIgnoreException(\"big_integer_t\");\n  }\n\n","sourceOld":"  @Test\n  public void testAddBigIntegerValueToTrieField() throws Exception {\n    // Adding a BigInteger to a long field should fail\n    // BigInteger.longValue() returns only the low-order 64 bits.\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_tl':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow a long field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    // Adding a BigInteger to an integer field should fail\n    // BigInteger.intValue() returns only the low-order 32 bits.\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_ti':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow an integer field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","sourceNew":"  @Test\n  public void testAddBigIntegerValueToTrieField() throws Exception {\n    // Adding a BigInteger to a long field should fail\n    // BigInteger.longValue() returns only the low-order 64 bits.\n\n    ignoreException(\"big_integer_t\");\n\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_tl':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow a long field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    // Adding a BigInteger to an integer field should fail\n    // BigInteger.intValue() returns only the low-order 32 bits.\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_ti':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow an integer field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    unIgnoreException(\"big_integer_t\");\n  }\n\n","sourceOld":"  @Test\n  public void testAddBigIntegerValueToTrieField() throws Exception {\n    // Adding a BigInteger to a long field should fail\n    // BigInteger.longValue() returns only the low-order 64 bits.\n    try {\n      updateJ((\"[{'id':'1','big_integer_tl':12345678901234567890}]\").replace('\\'', '\"'), null);\n      fail(\"A BigInteger value should overflow a long field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    // Adding a BigInteger to an integer field should fail\n    // BigInteger.intValue() returns only the low-order 32 bits.\n    try {\n      updateJ((\"[{'id':'1','big_integer_ti':12345678901234567890}]\").replace('\\'', '\"'), null);\n      fail(\"A BigInteger value should overflow an integer field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"206dd656d2bad51b47a453ca18c1328d317dd1ed","date":1391603013,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","sourceNew":"  @Test @Ignore(\"Please fix me!\")\n  public void testAddBigIntegerValueToTrieField() throws Exception {\n    // Adding a BigInteger to a long field should fail\n    // BigInteger.longValue() returns only the low-order 64 bits.\n\n    ignoreException(\"big_integer_t\");\n\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_tl':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow a long field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    // Adding a BigInteger to an integer field should fail\n    // BigInteger.intValue() returns only the low-order 32 bits.\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_ti':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow an integer field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    unIgnoreException(\"big_integer_t\");\n  }\n\n","sourceOld":"  @Test\n  public void testAddBigIntegerValueToTrieField() throws Exception {\n    // Adding a BigInteger to a long field should fail\n    // BigInteger.longValue() returns only the low-order 64 bits.\n\n    ignoreException(\"big_integer_t\");\n\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_tl':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow a long field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    // Adding a BigInteger to an integer field should fail\n    // BigInteger.intValue() returns only the low-order 32 bits.\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_ti':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow an integer field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    unIgnoreException(\"big_integer_t\");\n  }\n\n","bugFix":null,"bugIntro":["fc62c53ff8c243df3b582b572bb934b0e79d3467"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc62c53ff8c243df3b582b572bb934b0e79d3467","date":1391619952,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","sourceNew":"  @Test\n  public void testAddBigIntegerValueToTrieField() throws Exception {\n    // Adding a BigInteger to a long field should fail\n    // BigInteger.longValue() returns only the low-order 64 bits.\n\n    ignoreException(\"big_integer_t\");\n\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_tl':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow a long field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    // Adding a BigInteger to an integer field should fail\n    // BigInteger.intValue() returns only the low-order 32 bits.\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_ti':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow an integer field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    unIgnoreException(\"big_integer_t\");\n  }\n\n","sourceOld":"  @Test @Ignore(\"Please fix me!\")\n  public void testAddBigIntegerValueToTrieField() throws Exception {\n    // Adding a BigInteger to a long field should fail\n    // BigInteger.longValue() returns only the low-order 64 bits.\n\n    ignoreException(\"big_integer_t\");\n\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_tl':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow a long field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    // Adding a BigInteger to an integer field should fail\n    // BigInteger.intValue() returns only the low-order 32 bits.\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_ti':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow an integer field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    unIgnoreException(\"big_integer_t\");\n  }\n\n","bugFix":["206dd656d2bad51b47a453ca18c1328d317dd1ed"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","sourceNew":"  @Test\n  public void testAddBigIntegerValueToTrieField() throws Exception {\n    // Adding a BigInteger to a long field should fail\n    // BigInteger.longValue() returns only the low-order 64 bits.\n\n    ignoreException(\"big_integer_t\");\n\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      updateJ(json( \"[{'id':'1','big_integer_tl':12345678901234567890}]\" ), null);\n    });\n    assertTrue(ex.getCause() instanceof NumberFormatException);\n\n    // Adding a BigInteger to an integer field should fail\n    // BigInteger.intValue() returns only the low-order 32 bits.\n    ex = expectThrows(SolrException.class, () -> {\n      updateJ(json( \"[{'id':'1','big_integer_ti':12345678901234567890}]\" ), null);\n    });\n    assertTrue(ex.getCause() instanceof NumberFormatException);\n\n    unIgnoreException(\"big_integer_t\");\n  }\n\n","sourceOld":"  @Test\n  public void testAddBigIntegerValueToTrieField() throws Exception {\n    // Adding a BigInteger to a long field should fail\n    // BigInteger.longValue() returns only the low-order 64 bits.\n\n    ignoreException(\"big_integer_t\");\n\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_tl':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow a long field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    // Adding a BigInteger to an integer field should fail\n    // BigInteger.intValue() returns only the low-order 32 bits.\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_ti':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow an integer field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    unIgnoreException(\"big_integer_t\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","sourceNew":"  @Test\n  public void testAddBigIntegerValueToTrieField() throws Exception {\n    // Adding a BigInteger to a long field should fail\n    // BigInteger.longValue() returns only the low-order 64 bits.\n\n    ignoreException(\"big_integer_t\");\n\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      updateJ(json( \"[{'id':'1','big_integer_tl':12345678901234567890}]\" ), null);\n    });\n    assertTrue(ex.getCause() instanceof NumberFormatException);\n\n    // Adding a BigInteger to an integer field should fail\n    // BigInteger.intValue() returns only the low-order 32 bits.\n    ex = expectThrows(SolrException.class, () -> {\n      updateJ(json( \"[{'id':'1','big_integer_ti':12345678901234567890}]\" ), null);\n    });\n    assertTrue(ex.getCause() instanceof NumberFormatException);\n\n    unIgnoreException(\"big_integer_t\");\n  }\n\n","sourceOld":"  @Test\n  public void testAddBigIntegerValueToTrieField() throws Exception {\n    // Adding a BigInteger to a long field should fail\n    // BigInteger.longValue() returns only the low-order 64 bits.\n\n    ignoreException(\"big_integer_t\");\n\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_tl':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow a long field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    // Adding a BigInteger to an integer field should fail\n    // BigInteger.intValue() returns only the low-order 32 bits.\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_ti':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow an integer field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    unIgnoreException(\"big_integer_t\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/JsonLoaderTest#testAddBigIntegerValueToTrieField().mjava","sourceNew":"  @Test\n  public void testAddBigIntegerValueToTrieField() throws Exception {\n    // Adding a BigInteger to a long field should fail\n    // BigInteger.longValue() returns only the low-order 64 bits.\n\n    ignoreException(\"big_integer_t\");\n\n    SolrException ex = expectThrows(SolrException.class, () -> {\n      updateJ(json( \"[{'id':'1','big_integer_tl':12345678901234567890}]\" ), null);\n    });\n    assertTrue(ex.getCause() instanceof NumberFormatException);\n\n    // Adding a BigInteger to an integer field should fail\n    // BigInteger.intValue() returns only the low-order 32 bits.\n    ex = expectThrows(SolrException.class, () -> {\n      updateJ(json( \"[{'id':'1','big_integer_ti':12345678901234567890}]\" ), null);\n    });\n    assertTrue(ex.getCause() instanceof NumberFormatException);\n\n    unIgnoreException(\"big_integer_t\");\n  }\n\n","sourceOld":"  @Test\n  public void testAddBigIntegerValueToTrieField() throws Exception {\n    // Adding a BigInteger to a long field should fail\n    // BigInteger.longValue() returns only the low-order 64 bits.\n\n    ignoreException(\"big_integer_t\");\n\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_tl':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow a long field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    // Adding a BigInteger to an integer field should fail\n    // BigInteger.intValue() returns only the low-order 32 bits.\n    try {\n      updateJ(json( \"[{'id':'1','big_integer_ti':12345678901234567890}]\" ), null);\n      fail(\"A BigInteger value should overflow an integer field\");\n    } catch (SolrException e) {\n      if ( ! (e.getCause() instanceof NumberFormatException)) {\n        throw e;\n      }\n    }\n\n    unIgnoreException(\"big_integer_t\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a861905d20d470cd3658b3599c82d0300893dee":["7cc06bf372c14250dd19e96f105b987c528618aa"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["7cc06bf372c14250dd19e96f105b987c528618aa","68f3f27ece1bcf0e5308dd9c7ea4ed86dc68e684"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fc62c53ff8c243df3b582b572bb934b0e79d3467":["206dd656d2bad51b47a453ca18c1328d317dd1ed"],"206dd656d2bad51b47a453ca18c1328d317dd1ed":["68f3f27ece1bcf0e5308dd9c7ea4ed86dc68e684"],"68f3f27ece1bcf0e5308dd9c7ea4ed86dc68e684":["6a861905d20d470cd3658b3599c82d0300893dee"],"7cc06bf372c14250dd19e96f105b987c528618aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["fc62c53ff8c243df3b582b572bb934b0e79d3467"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["fc62c53ff8c243df3b582b572bb934b0e79d3467","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["fc62c53ff8c243df3b582b572bb934b0e79d3467","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"6a861905d20d470cd3658b3599c82d0300893dee":["68f3f27ece1bcf0e5308dd9c7ea4ed86dc68e684"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cc06bf372c14250dd19e96f105b987c528618aa"],"fc62c53ff8c243df3b582b572bb934b0e79d3467":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"206dd656d2bad51b47a453ca18c1328d317dd1ed":["fc62c53ff8c243df3b582b572bb934b0e79d3467"],"7cc06bf372c14250dd19e96f105b987c528618aa":["6a861905d20d470cd3658b3599c82d0300893dee","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"68f3f27ece1bcf0e5308dd9c7ea4ed86dc68e684":["37a0f60745e53927c4c876cfe5b5a58170f0646c","206dd656d2bad51b47a453ca18c1328d317dd1ed"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}