{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","commits":[{"id":"bafd5d8871af22a215defb79410396c64a671126","date":1290770742,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01));\n    ((LogMergePolicy) indexWriter.getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01));\n    ((LogMergePolicy) indexWriter.getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    FieldType customType3 = new FieldType(TextField.TYPE_STORED);\n    customType3.setTokenized(false);\n    customType3.setOmitNorms(true);\n    \n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", customType3, Integer.toString(i)+BIG));\n      doc.add(new Field(\"str\", customType2, Integer.toString(i)+BIG));\n      doc.add(new Field(\"str2\", storedTextType, Integer.toString(i)+BIG));\n      doc.add(new Field(\"str3\", customType, Integer.toString(i)+BIG));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED_NO_NORMS));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.NOT_ANALYZED));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, Field.Store.YES, Field.Index.ANALYZED_NO_NORMS));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    FieldType customType3 = new FieldType(TextField.TYPE_STORED);\n    customType3.setTokenized(false);\n    customType3.setOmitNorms(true);\n    \n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, customType3));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, customType2));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, storedTextType));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, customType));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    FieldType customType3 = new FieldType(TextField.TYPE_STORED);\n    customType3.setTokenized(false);\n    customType3.setOmitNorms(true);\n    \n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", customType3, Integer.toString(i)+BIG));\n      doc.add(new Field(\"str\", customType2, Integer.toString(i)+BIG));\n      doc.add(new Field(\"str2\", storedTextType, Integer.toString(i)+BIG));\n      doc.add(new Field(\"str3\", customType, Integer.toString(i)+BIG));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    FieldType customType3 = new FieldType(TextField.TYPE_STORED);\n    customType3.setTokenized(false);\n    customType3.setOmitNorms(true);\n    \n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, customType3));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, customType2));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, storedTextType));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, customType));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    IndexReader r0 = IndexReader.open(dir);\n    for (IndexReader r : r0.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertFalse(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(dir, s, files);\n      assertTrue(files.isEmpty());\n    }\n    \n    r0.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    FieldType customType3 = new FieldType(TextField.TYPE_STORED);\n    customType3.setTokenized(false);\n    customType3.setOmitNorms(true);\n    \n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, customType3));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, customType2));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, storedTextType));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, customType));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    String[] files = dir.listAll();\n    for(String file : files) {\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_FIELDS_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_INDEX_EXTENSION));\n      assertTrue(!file.endsWith(IndexFileNames.VECTORS_DOCUMENTS_EXTENSION));\n    }\n\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"78977ccc47b451a8e645b77504e2ef0a05e4b1a3","date":1327846052,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    FieldType customType3 = new FieldType(TextField.TYPE_STORED);\n    customType3.setTokenized(false);\n    customType3.setOmitNorms(true);\n    \n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, customType3));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, customType2));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, storedTextType));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, customType));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    IndexReader r0 = IndexReader.open(dir);\n    for (IndexReader r : r0.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertFalse(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertTrue(files.isEmpty());\n    }\n    \n    r0.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    FieldType customType3 = new FieldType(TextField.TYPE_STORED);\n    customType3.setTokenized(false);\n    customType3.setOmitNorms(true);\n    \n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, customType3));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, customType2));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, storedTextType));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, customType));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    IndexReader r0 = IndexReader.open(dir);\n    for (IndexReader r : r0.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertFalse(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(dir, s, files);\n      assertTrue(files.isEmpty());\n    }\n    \n    r0.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2929ce110b8f9e8a7d82c45d6b6bc119fea035d2","date":1327858167,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    FieldType customType3 = new FieldType(TextField.TYPE_STORED);\n    customType3.setTokenized(false);\n    customType3.setOmitNorms(true);\n    \n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, customType3));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, customType2));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, storedTextType));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, customType));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    DirectoryReader r0 = IndexReader.open(dir);\n    for (IndexReader r : r0.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertFalse(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(dir, s, files);\n      assertTrue(files.isEmpty());\n    }\n    \n    r0.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    FieldType customType3 = new FieldType(TextField.TYPE_STORED);\n    customType3.setTokenized(false);\n    customType3.setOmitNorms(true);\n    \n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, customType3));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, customType2));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, storedTextType));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, customType));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    IndexReader r0 = IndexReader.open(dir);\n    for (IndexReader r : r0.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertFalse(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(dir, s, files);\n      assertTrue(files.isEmpty());\n    }\n    \n    r0.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"296df632fd63421ea20756fa11ad36fbc6f4c8a9","date":1327957998,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    FieldType customType3 = new FieldType(TextField.TYPE_STORED);\n    customType3.setTokenized(false);\n    customType3.setOmitNorms(true);\n    \n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, customType3));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, customType2));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, storedTextType));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, customType));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    IndexReader r0 = IndexReader.open(dir);\n    for (IndexReader r : r0.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertFalse(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertTrue(files.isEmpty());\n    }\n    \n    r0.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    FieldType customType3 = new FieldType(TextField.TYPE_STORED);\n    customType3.setTokenized(false);\n    customType3.setOmitNorms(true);\n    \n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, customType3));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, customType2));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, storedTextType));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, customType));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    IndexReader r0 = IndexReader.open(dir);\n    for (IndexReader r : r0.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertFalse(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(dir, s, files);\n      assertTrue(files.isEmpty());\n    }\n    \n    r0.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    FieldType customType3 = new FieldType(TextField.TYPE_STORED);\n    customType3.setTokenized(false);\n    customType3.setOmitNorms(true);\n    \n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, customType3));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, customType2));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, storedTextType));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, customType));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    DirectoryReader r0 = IndexReader.open(dir);\n    for (IndexReader r : r0.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertFalse(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertTrue(files.isEmpty());\n    }\n    \n    r0.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    FieldType customType3 = new FieldType(TextField.TYPE_STORED);\n    customType3.setTokenized(false);\n    customType3.setOmitNorms(true);\n    \n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, customType3));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, customType2));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, storedTextType));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, customType));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    DirectoryReader r0 = IndexReader.open(dir);\n    for (IndexReader r : r0.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertFalse(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(dir, s, files);\n      assertTrue(files.isEmpty());\n    }\n    \n    r0.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    FieldType customType3 = new FieldType(TextField.TYPE_STORED);\n    customType3.setTokenized(false);\n    customType3.setOmitNorms(true);\n    \n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, customType3));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, customType2));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, storedTextType));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, customType));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    DirectoryReader r0 = IndexReader.open(dir);\n    for (IndexReader r : r0.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertFalse(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertTrue(files.isEmpty());\n    }\n    \n    r0.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    FieldType customType3 = new FieldType(TextField.TYPE_STORED);\n    customType3.setTokenized(false);\n    customType3.setOmitNorms(true);\n    \n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, customType3));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, customType2));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, storedTextType));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, customType));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    IndexReader r0 = IndexReader.open(dir);\n    for (IndexReader r : r0.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertFalse(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertTrue(files.isEmpty());\n    }\n    \n    r0.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testNoUnwantedTVFiles().mjava","sourceNew":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    FieldType customType3 = new FieldType(TextField.TYPE_STORED);\n    customType3.setTokenized(false);\n    customType3.setOmitNorms(true);\n    \n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, customType3));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, customType2));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, storedTextType));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, customType));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    DirectoryReader r0 = IndexReader.open(dir);\n    for (IndexReader r : r0.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertFalse(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertTrue(files.isEmpty());\n    }\n    \n    r0.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNoUnwantedTVFiles() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriter indexWriter = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setRAMBufferSizeMB(0.01).setMergePolicy(newLogMergePolicy()));\n    ((LogMergePolicy) indexWriter.getConfig().getMergePolicy()).setUseCompoundFile(false);\n\n    String BIG=\"alskjhlaksjghlaksjfhalksvjepgjioefgjnsdfjgefgjhelkgjhqewlrkhgwlekgrhwelkgjhwelkgrhwlkejg\";\n    BIG=BIG+BIG+BIG+BIG;\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setOmitNorms(true);\n    FieldType customType2 = new FieldType(TextField.TYPE_STORED);\n    customType2.setTokenized(false);\n    FieldType customType3 = new FieldType(TextField.TYPE_STORED);\n    customType3.setTokenized(false);\n    customType3.setOmitNorms(true);\n    \n    for (int i=0; i<2; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", Integer.toString(i)+BIG, customType3));\n      doc.add(new Field(\"str\", Integer.toString(i)+BIG, customType2));\n      doc.add(new Field(\"str2\", Integer.toString(i)+BIG, storedTextType));\n      doc.add(new Field(\"str3\", Integer.toString(i)+BIG, customType));\n      indexWriter.addDocument(doc);\n    }\n\n    indexWriter.close();\n\n    _TestUtil.checkIndex(dir);\n\n    assertNoUnreferencedFiles(dir, \"no tv files\");\n    DirectoryReader r0 = IndexReader.open(dir);\n    for (IndexReader r : r0.getSequentialSubReaders()) {\n      SegmentInfo s = ((SegmentReader) r).getSegmentInfo();\n      assertFalse(s.getHasVectors());\n      Set<String> files = new HashSet<String>();\n      s.getCodec().termVectorsFormat().files(s, files);\n      assertTrue(files.isEmpty());\n    }\n    \n    r0.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"410e066f093e407222d9681429d209084e783149":["2929ce110b8f9e8a7d82c45d6b6bc119fea035d2","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"bafd5d8871af22a215defb79410396c64a671126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3cc749c053615f5871f3b95715fe292f34e70a53":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"78977ccc47b451a8e645b77504e2ef0a05e4b1a3":["3cc749c053615f5871f3b95715fe292f34e70a53"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["3cc749c053615f5871f3b95715fe292f34e70a53","78977ccc47b451a8e645b77504e2ef0a05e4b1a3"],"c19f985e36a65cc969e8e564fe337a0d41512075":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["296df632fd63421ea20756fa11ad36fbc6f4c8a9","410e066f093e407222d9681429d209084e783149"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["c19f985e36a65cc969e8e564fe337a0d41512075"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c19f985e36a65cc969e8e564fe337a0d41512075","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","c19f985e36a65cc969e8e564fe337a0d41512075"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"2929ce110b8f9e8a7d82c45d6b6bc119fea035d2":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["bafd5d8871af22a215defb79410396c64a671126"]},"commit2Childs":{"410e066f093e407222d9681429d209084e783149":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bafd5d8871af22a215defb79410396c64a671126":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["78977ccc47b451a8e645b77504e2ef0a05e4b1a3","296df632fd63421ea20756fa11ad36fbc6f4c8a9","2929ce110b8f9e8a7d82c45d6b6bc119fea035d2"],"78977ccc47b451a8e645b77504e2ef0a05e4b1a3":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["410e066f093e407222d9681429d209084e783149","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c19f985e36a65cc969e8e564fe337a0d41512075":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafd5d8871af22a215defb79410396c64a671126","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"2929ce110b8f9e8a7d82c45d6b6bc119fea035d2":["410e066f093e407222d9681429d209084e783149"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["3cc749c053615f5871f3b95715fe292f34e70a53"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}