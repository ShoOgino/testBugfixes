{"path":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","commits":[{"id":"5b38e3f2849cb8d8626cd5368aa64de4fed9edde","date":1196183330,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n\n    CheckIndex.out = new PrintStream(bos);\n    assertTrue(CheckIndex.check(dir, false));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7391c1f4ab1a6817de8a262f5c1b3de3cf190785"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a64db7380e46c730a4ff0f00ebd7b29219312c14","date":1201253781,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n\n    CheckIndex.out = new PrintStream(bos);\n    assertTrue(CheckIndex.check(dir, false, null));\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    assertTrue(CheckIndex.check(dir, false, onlySegments));\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n\n    CheckIndex.out = new PrintStream(bos);\n    assertTrue(CheckIndex.check(dir, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n\n    CheckIndex.out = new PrintStream(bos);\n    assertTrue(CheckIndex.check(dir, false, null));\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    assertTrue(CheckIndex.check(dir, false, onlySegments));\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n\n    CheckIndex.out = new PrintStream(bos);\n    assertTrue(CheckIndex.check(dir, false, null));\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    assertTrue(CheckIndex.check(dir, false, onlySegments));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"34e2c71b6406443562df54db233fde0728502f64","date":1209294850,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n\n    CheckIndex.out = new PrintStream(bos);\n    if (!CheckIndex.check(dir, false, null)) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    assertTrue(CheckIndex.check(dir, false, onlySegments));\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n\n    CheckIndex.out = new PrintStream(bos);\n    assertTrue(CheckIndex.check(dir, false, null));\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    assertTrue(CheckIndex.check(dir, false, onlySegments));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cba44a7c8f0e3eb449bcdbd53960b7705c0bf902","date":1220978058,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n\n    CheckIndex.out = new PrintStream(bos);\n    CheckIndexStatus indexStatus = CheckIndex.check(dir, false, null);\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    assertTrue(CheckIndex.check(dir, false, onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n\n    CheckIndex.out = new PrintStream(bos);\n    if (!CheckIndex.check(dir, false, null)) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    assertTrue(CheckIndex.check(dir, false, onlySegments));\n  }\n\n","bugFix":null,"bugIntro":["7391c1f4ab1a6817de8a262f5c1b3de3cf190785"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n\n    CheckIndex.out = new PrintStream(bos);\n    CheckIndexStatus indexStatus = CheckIndex.check(dir, false, null);\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    assertTrue(CheckIndex.check(dir, false, onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n\n    CheckIndex.out = new PrintStream(bos);\n    CheckIndexStatus indexStatus = CheckIndex.check(dir, false, null);\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    assertTrue(CheckIndex.check(dir, false, onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7391c1f4ab1a6817de8a262f5c1b3de3cf190785","date":1222335791,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n\n    CheckIndex.out = new PrintStream(bos);\n    CheckIndexStatus indexStatus = CheckIndex.check(dir, false, null);\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    assertTrue(CheckIndex.check(dir, false, onlySegments).clean == true);\n  }\n\n","bugFix":["5b38e3f2849cb8d8626cd5368aa64de4fed9edde","cba44a7c8f0e3eb449bcdbd53960b7705c0bf902"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8e18c40b99c99721d4ee99fc33b6c299311da32","date":1241864501,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    assertTrue(((CheckIndex.Status.SegmentInfoStatus) indexStatus.segmentInfos.get(0)).openReaderPassed);\n\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3ab91f3bb602daf6393fa7f78b11afd3400d669","date":1243282044,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = (CheckIndex.Status.SegmentInfoStatus) indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    assertTrue(seg.diagnostics.size() > 0);\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    assertTrue(((CheckIndex.Status.SegmentInfoStatus) indexStatus.segmentInfos.get(0)).openReaderPassed);\n\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"433ef5e0ff3fa18d549774f572b36aae2ae64232","date":1246039802,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = (CheckIndex.Status.SegmentInfoStatus) indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = (CheckIndex.Status.SegmentInfoStatus) indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    assertTrue(seg.diagnostics.size() > 0);\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":["7312a5134c2e28e06b87256e466da72eadd966d9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = (CheckIndex.Status.SegmentInfoStatus) indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = (CheckIndex.Status.SegmentInfoStatus) indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = (CheckIndex.Status.SegmentInfoStatus) indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = (CheckIndex.Status.SegmentInfoStatus) indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = (CheckIndex.Status.SegmentInfoStatus) indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List onlySegments = new ArrayList();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, \n                                          IndexWriter.MaxFieldLength.LIMITED);      \n    writer.setMaxBufferedDocs(2);\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    //checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","pathOld":"src/test/org/apache/lucene/index/TestCheckIndex#testDeletedDocs().mjava","sourceNew":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","sourceOld":"  public void testDeletedDocs() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    IndexWriter writer  = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    Document doc = new Document();\n    doc.add(new Field(\"field\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    for(int i=0;i<19;i++) {\n      writer.addDocument(doc);\n    }\n    writer.close();\n    IndexReader reader = IndexReader.open(dir, false);\n    reader.deleteDocument(5);\n    reader.close();\n\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setInfoStream(new PrintStream(bos));\n    if (VERBOSE) checker.setInfoStream(System.out);\n    CheckIndex.Status indexStatus = checker.checkIndex();\n    if (indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString());\n      fail();\n    }\n    \n    final CheckIndex.Status.SegmentInfoStatus seg = indexStatus.segmentInfos.get(0);\n    assertTrue(seg.openReaderPassed);\n\n    assertNotNull(seg.diagnostics);\n    \n    assertNotNull(seg.fieldNormStatus);\n    assertNull(seg.fieldNormStatus.error);\n    assertEquals(1, seg.fieldNormStatus.totFields);\n\n    assertNotNull(seg.termIndexStatus);\n    assertNull(seg.termIndexStatus.error);\n    assertEquals(1, seg.termIndexStatus.termCount);\n    assertEquals(19, seg.termIndexStatus.totFreq);\n    assertEquals(18, seg.termIndexStatus.totPos);\n\n    assertNotNull(seg.storedFieldStatus);\n    assertNull(seg.storedFieldStatus.error);\n    assertEquals(18, seg.storedFieldStatus.docCount);\n    assertEquals(18, seg.storedFieldStatus.totFields);\n\n    assertNotNull(seg.termVectorStatus);\n    assertNull(seg.termVectorStatus.error);\n    assertEquals(18, seg.termVectorStatus.docCount);\n    assertEquals(18, seg.termVectorStatus.totVectors);\n\n    assertTrue(seg.diagnostics.size() > 0);\n    final List<String> onlySegments = new ArrayList<String>();\n    onlySegments.add(\"_0\");\n    \n    assertTrue(checker.checkIndex(onlySegments).clean == true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"34e2c71b6406443562df54db233fde0728502f64":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["a64db7380e46c730a4ff0f00ebd7b29219312c14"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["433ef5e0ff3fa18d549774f572b36aae2ae64232","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["cba44a7c8f0e3eb449bcdbd53960b7705c0bf902"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"433ef5e0ff3fa18d549774f572b36aae2ae64232":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"7391c1f4ab1a6817de8a262f5c1b3de3cf190785":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["0a046c0c310bc77931fc8441bd920053b607dd14"],"e8e18c40b99c99721d4ee99fc33b6c299311da32":["7391c1f4ab1a6817de8a262f5c1b3de3cf190785"],"a64db7380e46c730a4ff0f00ebd7b29219312c14":["5b38e3f2849cb8d8626cd5368aa64de4fed9edde"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"cba44a7c8f0e3eb449bcdbd53960b7705c0bf902":["34e2c71b6406443562df54db233fde0728502f64"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["433ef5e0ff3fa18d549774f572b36aae2ae64232"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["e8e18c40b99c99721d4ee99fc33b6c299311da32"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"42607aa380c892dc1ec0ab26e86a575c28e13618":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"5b38e3f2849cb8d8626cd5368aa64de4fed9edde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"34e2c71b6406443562df54db233fde0728502f64":["cba44a7c8f0e3eb449bcdbd53960b7705c0bf902"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["34e2c71b6406443562df54db233fde0728502f64"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["7391c1f4ab1a6817de8a262f5c1b3de3cf190785"],"433ef5e0ff3fa18d549774f572b36aae2ae64232":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"7391c1f4ab1a6817de8a262f5c1b3de3cf190785":["e8e18c40b99c99721d4ee99fc33b6c299311da32"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"e8e18c40b99c99721d4ee99fc33b6c299311da32":["d3ab91f3bb602daf6393fa7f78b11afd3400d669"],"a64db7380e46c730a4ff0f00ebd7b29219312c14":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"cba44a7c8f0e3eb449bcdbd53960b7705c0bf902":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"d3ab91f3bb602daf6393fa7f78b11afd3400d669":["433ef5e0ff3fa18d549774f572b36aae2ae64232"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b38e3f2849cb8d8626cd5368aa64de4fed9edde"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5b38e3f2849cb8d8626cd5368aa64de4fed9edde":["a64db7380e46c730a4ff0f00ebd7b29219312c14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}