{"path":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalStatsValues(DocSet).mjava","commits":[{"id":"283ff02f401ec3e7a2fad73643970f052383fb0c","date":1411407953,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalStatsValues(DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField[StatsComponent]#computeLocalStatsValues(DocSet).mjava","sourceNew":"  /**\n   * Computes the {@link StatsValues} for this {@link StatsField} relative to the \n   * specified {@link DocSet} \n   * @see #computeBaseDocSet\n   */\n  public StatsValues computeLocalStatsValues(DocSet base) throws IOException {\n\n    if (null != schemaField \n        && (schemaField.multiValued() || schemaField.getType().multiValuedFieldCache())) {\n\n      // TODO: should this also be used for single-valued string fields? (should work fine)\n      return DocValuesStats.getCounts(searcher, this, base, facets);\n    } else {\n      // either a single valued field we pull from FieldCache, or an explicit\n      // function ValueSource\n      return computeLocalValueSourceStats(base);\n    }\n  }\n\n","sourceOld":"  /**\n   * Computes the {@link StatsValues} for this {@link StatsField} relative to the \n   * specified {@link DocSet} \n   * @see #computeBaseDocSet\n   */\n  public StatsValues computeLocalStatsValues(DocSet base) throws IOException {\n\n    if (sf.multiValued() || sf.getType().multiValuedFieldCache()) {\n      // TODO: should this also be used for single-valued string fields? (should work fine)\n      return DocValuesStats.getCounts(searcher, fieldName, base, calcDistinct, facets);\n    } else {\n      return getFieldCacheStats(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9173fd8d1b123fb45b0c7d188d0c153fb609c","date":1426192682,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalStatsValues(DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalStatsValues(DocSet).mjava","sourceNew":"  /**\n   * Computes the {@link StatsValues} for this {@link StatsField} relative to the \n   * specified {@link DocSet} \n   * @see #computeBaseDocSet\n   */\n  public StatsValues computeLocalStatsValues(DocSet base) throws IOException {\n\n    if (statsToCalculate.isEmpty()) { \n      // perf optimization for the case where we compute nothing\n      // ie: stats.field={!min=$domin}myfield&domin=false\n      return StatsValuesFactory.createStatsValues(this);\n    }\n\n    if (null != schemaField \n        && (schemaField.multiValued() || schemaField.getType().multiValuedFieldCache())) {\n\n      // TODO: should this also be used for single-valued string fields? (should work fine)\n      return DocValuesStats.getCounts(searcher, this, base, facets);\n    } else {\n      // either a single valued field we pull from FieldCache, or an explicit\n      // function ValueSource\n      return computeLocalValueSourceStats(base);\n    }\n  }\n\n","sourceOld":"  /**\n   * Computes the {@link StatsValues} for this {@link StatsField} relative to the \n   * specified {@link DocSet} \n   * @see #computeBaseDocSet\n   */\n  public StatsValues computeLocalStatsValues(DocSet base) throws IOException {\n\n    if (null != schemaField \n        && (schemaField.multiValued() || schemaField.getType().multiValuedFieldCache())) {\n\n      // TODO: should this also be used for single-valued string fields? (should work fine)\n      return DocValuesStats.getCounts(searcher, this, base, facets);\n    } else {\n      // either a single valued field we pull from FieldCache, or an explicit\n      // function ValueSource\n      return computeLocalValueSourceStats(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalStatsValues(DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalStatsValues(DocSet).mjava","sourceNew":"  /**\n   * Computes the {@link StatsValues} for this {@link StatsField} relative to the \n   * specified {@link DocSet} \n   * @see #computeBaseDocSet\n   */\n  public StatsValues computeLocalStatsValues(DocSet base) throws IOException {\n\n    if (statsToCalculate.isEmpty()) { \n      // perf optimization for the case where we compute nothing\n      // ie: stats.field={!min=$domin}myfield&domin=false\n      return StatsValuesFactory.createStatsValues(this);\n    }\n\n    if (null != schemaField \n        && (schemaField.multiValued() || schemaField.getType().multiValuedFieldCache())) {\n\n      // TODO: should this also be used for single-valued string fields? (should work fine)\n      return DocValuesStats.getCounts(searcher, this, base, facets);\n    } else {\n      // either a single valued field we pull from FieldCache, or an explicit\n      // function ValueSource\n      return computeLocalValueSourceStats(base);\n    }\n  }\n\n","sourceOld":"  /**\n   * Computes the {@link StatsValues} for this {@link StatsField} relative to the \n   * specified {@link DocSet} \n   * @see #computeBaseDocSet\n   */\n  public StatsValues computeLocalStatsValues(DocSet base) throws IOException {\n\n    if (null != schemaField \n        && (schemaField.multiValued() || schemaField.getType().multiValuedFieldCache())) {\n\n      // TODO: should this also be used for single-valued string fields? (should work fine)\n      return DocValuesStats.getCounts(searcher, this, base, facets);\n    } else {\n      // either a single valued field we pull from FieldCache, or an explicit\n      // function ValueSource\n      return computeLocalValueSourceStats(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"744b111b17d15d490a648eb021bfa240e7f11556","date":1487008069,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalStatsValues(DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalStatsValues(DocSet).mjava","sourceNew":"  /**\n   * Computes the {@link StatsValues} for this {@link StatsField} relative to the \n   * specified {@link DocSet} \n   * @see #computeBaseDocSet\n   */\n  public StatsValues computeLocalStatsValues(DocSet base) throws IOException {\n\n    if (statsToCalculate.isEmpty()) { \n      // perf optimization for the case where we compute nothing\n      // ie: stats.field={!min=$domin}myfield&domin=false\n      return StatsValuesFactory.createStatsValues(this);\n    }\n\n    if (null != schemaField && !schemaField.getType().isPointField()\n        && (schemaField.multiValued() || schemaField.getType().multiValuedFieldCache())) {\n\n      // TODO: should this also be used for single-valued string fields? (should work fine)\n      return DocValuesStats.getCounts(searcher, this, base, facets);\n    } else {\n      // either a single valued field we pull from FieldCache, or an explicit\n      // function ValueSource\n      return computeLocalValueSourceStats(base);\n    }\n  }\n\n","sourceOld":"  /**\n   * Computes the {@link StatsValues} for this {@link StatsField} relative to the \n   * specified {@link DocSet} \n   * @see #computeBaseDocSet\n   */\n  public StatsValues computeLocalStatsValues(DocSet base) throws IOException {\n\n    if (statsToCalculate.isEmpty()) { \n      // perf optimization for the case where we compute nothing\n      // ie: stats.field={!min=$domin}myfield&domin=false\n      return StatsValuesFactory.createStatsValues(this);\n    }\n\n    if (null != schemaField \n        && (schemaField.multiValued() || schemaField.getType().multiValuedFieldCache())) {\n\n      // TODO: should this also be used for single-valued string fields? (should work fine)\n      return DocValuesStats.getCounts(searcher, this, base, facets);\n    } else {\n      // either a single valued field we pull from FieldCache, or an explicit\n      // function ValueSource\n      return computeLocalValueSourceStats(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalStatsValues(DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalStatsValues(DocSet).mjava","sourceNew":"  /**\n   * Computes the {@link StatsValues} for this {@link StatsField} relative to the \n   * specified {@link DocSet} \n   * @see #computeBaseDocSet\n   */\n  public StatsValues computeLocalStatsValues(DocSet base) throws IOException {\n\n    if (statsToCalculate.isEmpty()) { \n      // perf optimization for the case where we compute nothing\n      // ie: stats.field={!min=$domin}myfield&domin=false\n      return StatsValuesFactory.createStatsValues(this);\n    }\n\n    if (null != schemaField && !schemaField.getType().isPointField()\n        && (schemaField.multiValued() || schemaField.getType().multiValuedFieldCache())) {\n\n      // TODO: should this also be used for single-valued string fields? (should work fine)\n      return DocValuesStats.getCounts(searcher, this, base, facets);\n    } else {\n      // either a single valued field we pull from FieldCache, or an explicit\n      // function ValueSource\n      return computeLocalValueSourceStats(base);\n    }\n  }\n\n","sourceOld":"  /**\n   * Computes the {@link StatsValues} for this {@link StatsField} relative to the \n   * specified {@link DocSet} \n   * @see #computeBaseDocSet\n   */\n  public StatsValues computeLocalStatsValues(DocSet base) throws IOException {\n\n    if (statsToCalculate.isEmpty()) { \n      // perf optimization for the case where we compute nothing\n      // ie: stats.field={!min=$domin}myfield&domin=false\n      return StatsValuesFactory.createStatsValues(this);\n    }\n\n    if (null != schemaField \n        && (schemaField.multiValued() || schemaField.getType().multiValuedFieldCache())) {\n\n      // TODO: should this also be used for single-valued string fields? (should work fine)\n      return DocValuesStats.getCounts(searcher, this, base, facets);\n    } else {\n      // either a single valued field we pull from FieldCache, or an explicit\n      // function ValueSource\n      return computeLocalValueSourceStats(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalStatsValues(DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalStatsValues(DocSet).mjava","sourceNew":"  /**\n   * Computes the {@link StatsValues} for this {@link StatsField} relative to the \n   * specified {@link DocSet} \n   * @see #computeBaseDocSet\n   */\n  public StatsValues computeLocalStatsValues(DocSet base) throws IOException {\n\n    if (statsToCalculate.isEmpty()) { \n      // perf optimization for the case where we compute nothing\n      // ie: stats.field={!min=$domin}myfield&domin=false\n      return StatsValuesFactory.createStatsValues(this);\n    }\n\n    if (null != schemaField \n        && (schemaField.multiValued() || schemaField.getType().multiValuedFieldCache())) {\n\n      // TODO: should this also be used for single-valued string fields? (should work fine)\n      return DocValuesStats.getCounts(searcher, this, base, facets);\n    } else {\n      // either a single valued field we pull from FieldCache, or an explicit\n      // function ValueSource\n      return computeLocalValueSourceStats(base);\n    }\n  }\n\n","sourceOld":"  /**\n   * Computes the {@link StatsValues} for this {@link StatsField} relative to the \n   * specified {@link DocSet} \n   * @see #computeBaseDocSet\n   */\n  public StatsValues computeLocalStatsValues(DocSet base) throws IOException {\n\n    if (statsToCalculate.isEmpty()) { \n      // perf optimization for the case where we compute nothing\n      // ie: stats.field={!min=$domin}myfield&domin=false\n      return StatsValuesFactory.createStatsValues(this);\n    }\n\n    if (null != schemaField && !schemaField.getType().isPointField()\n        && (schemaField.multiValued() || schemaField.getType().multiValuedFieldCache())) {\n\n      // TODO: should this also be used for single-valued string fields? (should work fine)\n      return DocValuesStats.getCounts(searcher, this, base, facets);\n    } else {\n      // either a single valued field we pull from FieldCache, or an explicit\n      // function ValueSource\n      return computeLocalValueSourceStats(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalStatsValues(DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalStatsValues(DocSet).mjava","sourceNew":"  /**\n   * Computes the {@link StatsValues} for this {@link StatsField} relative to the \n   * specified {@link DocSet} \n   * @see #computeBaseDocSet\n   */\n  public StatsValues computeLocalStatsValues(DocSet base) throws IOException {\n\n    if (statsToCalculate.isEmpty()) { \n      // perf optimization for the case where we compute nothing\n      // ie: stats.field={!min=$domin}myfield&domin=false\n      return StatsValuesFactory.createStatsValues(this);\n    }\n\n    if (null != schemaField && !schemaField.getType().isPointField()\n        && (schemaField.multiValued() || schemaField.getType().multiValuedFieldCache())) {\n\n      // TODO: should this also be used for single-valued string fields? (should work fine)\n      return DocValuesStats.getCounts(searcher, this, base, facets);\n    } else {\n      // either a single valued field we pull from FieldCache, or an explicit\n      // function ValueSource\n      return computeLocalValueSourceStats(base);\n    }\n  }\n\n","sourceOld":"  /**\n   * Computes the {@link StatsValues} for this {@link StatsField} relative to the \n   * specified {@link DocSet} \n   * @see #computeBaseDocSet\n   */\n  public StatsValues computeLocalStatsValues(DocSet base) throws IOException {\n\n    if (statsToCalculate.isEmpty()) { \n      // perf optimization for the case where we compute nothing\n      // ie: stats.field={!min=$domin}myfield&domin=false\n      return StatsValuesFactory.createStatsValues(this);\n    }\n\n    if (null != schemaField \n        && (schemaField.multiValued() || schemaField.getType().multiValuedFieldCache())) {\n\n      // TODO: should this also be used for single-valued string fields? (should work fine)\n      return DocValuesStats.getCounts(searcher, this, base, facets);\n    } else {\n      // either a single valued field we pull from FieldCache, or an explicit\n      // function ValueSource\n      return computeLocalValueSourceStats(base);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"283ff02f401ec3e7a2fad73643970f052383fb0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["283ff02f401ec3e7a2fad73643970f052383fb0c","bcf9173fd8d1b123fb45b0c7d188d0c153fb609c"],"022a4de90e0479b604264ca9c2e134c996454ab3":["bcf9173fd8d1b123fb45b0c7d188d0c153fb609c","744b111b17d15d490a648eb021bfa240e7f11556"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"bcf9173fd8d1b123fb45b0c7d188d0c153fb609c":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"744b111b17d15d490a648eb021bfa240e7f11556":["bcf9173fd8d1b123fb45b0c7d188d0c153fb609c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["897b06b1364bd1f658a8be7591e43f0851458e7f"]},"commit2Childs":{"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"283ff02f401ec3e7a2fad73643970f052383fb0c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","bcf9173fd8d1b123fb45b0c7d188d0c153fb609c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"897b06b1364bd1f658a8be7591e43f0851458e7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"bcf9173fd8d1b123fb45b0c7d188d0c153fb609c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","022a4de90e0479b604264ca9c2e134c996454ab3","744b111b17d15d490a648eb021bfa240e7f11556"],"744b111b17d15d490a648eb021bfa240e7f11556":["022a4de90e0479b604264ca9c2e134c996454ab3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}