{"path":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","commits":[{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#setUp().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    Random random = newStaticRandom(TestMultiTermConstantScore.class);\n    \n    small = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(random, \"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(random, \"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(random, \"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f9dba8ffba48fba97d7a90fd45f6da87ba55736","date":1285244347,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    Random random = newStaticRandom(TestMultiTermConstantScore.class);\n    \n    small = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(random, \"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(random, \"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(random, \"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ac241e91933e59e81b125b8aae28398f30c7367","date":1297692850,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMergePolicy(newInOrderLogMergePolicy()));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMergePolicy(newInOrderLogMergePolicy()));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMergePolicy(newInOrderLogMergePolicy()));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, new MockAnalyzer(MockTokenizer.WHITESPACE, false));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMergePolicy(newLogMergePolicy()));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMergePolicy(newInOrderLogMergePolicy()));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMergePolicy(newLogMergePolicy()));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMergePolicy(newInOrderLogMergePolicy()));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMergePolicy(newLogMergePolicy()));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMergePolicy(newLogMergePolicy()));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMergePolicy(newLogMergePolicy()));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMergePolicy(newLogMergePolicy()));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMergePolicy(newLogMergePolicy()));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMergePolicy(newInOrderLogMergePolicy()));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMergePolicy(newLogMergePolicy()));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(MockTokenizer.WHITESPACE, false)).setMergePolicy(newInOrderLogMergePolicy()));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMergePolicy(newLogMergePolicy()));\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), customType));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc.add(newField(\"all\", \"all\", customType));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], TextField.TYPE_STORED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMergePolicy(newLogMergePolicy()));\n\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), Field.Store.YES,\n          Field.Index.NOT_ANALYZED));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc\n          .add(newField(\"all\", \"all\", Field.Store.YES,\n              Field.Index.NOT_ANALYZED));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], Field.Store.YES,\n            Field.Index.ANALYZED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiTermConstantScore#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMergePolicy(newLogMergePolicy()));\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), customType));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc.add(newField(\"all\", \"all\", customType));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], TextField.TYPE_STORED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    String[] data = new String[] { \"A 1 2 3 4 5 6\", \"Z       4 5 6\", null,\n        \"B   2   4 5 6\", \"Y     3   5 6\", null, \"C     3     6\",\n        \"X       4 5 6\" };\n\n    small = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, small, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, \n            new MockAnalyzer(random, MockTokenizer.WHITESPACE, false)).setMergePolicy(newLogMergePolicy()));\n\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setTokenized(false);\n    for (int i = 0; i < data.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"id\", String.valueOf(i), customType));// Field.Keyword(\"id\",String.valueOf(i)));\n      doc.add(newField(\"all\", \"all\", customType));// Field.Keyword(\"all\",\"all\"));\n      if (null != data[i]) {\n        doc.add(newField(\"data\", data[i], TextField.TYPE_STORED));// Field.Text(\"data\",data[i]));\n      }\n      writer.addDocument(doc);\n    }\n\n    reader = writer.getReader();\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["5f9dba8ffba48fba97d7a90fd45f6da87ba55736","9ac241e91933e59e81b125b8aae28398f30c7367"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"9ac241e91933e59e81b125b8aae28398f30c7367":["5f9dba8ffba48fba97d7a90fd45f6da87ba55736"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f9dba8ffba48fba97d7a90fd45f6da87ba55736"],"5f9dba8ffba48fba97d7a90fd45f6da87ba55736":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["9ac241e91933e59e81b125b8aae28398f30c7367"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9ac241e91933e59e81b125b8aae28398f30c7367","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","9ac241e91933e59e81b125b8aae28398f30c7367"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ac241e91933e59e81b125b8aae28398f30c7367":["f1bdbf92da222965b46c0a942c3857ba56e5c638","01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"5f9dba8ffba48fba97d7a90fd45f6da87ba55736":["f1bdbf92da222965b46c0a942c3857ba56e5c638","9ac241e91933e59e81b125b8aae28398f30c7367","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","150488c1317972164a9a824be05b1ba2ba0fc68c"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["5f9dba8ffba48fba97d7a90fd45f6da87ba55736"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}