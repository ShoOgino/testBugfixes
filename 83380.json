{"path":"lucene/core/src/test/org/apache/lucene/TestSearch#testSearch().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#testSearch().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#testSearch().mjava","sourceNew":"    /** This test performs a number of searches. It also compares output\n     *  of searches using multi-file index segments with single-file\n     *  index segments.\n     *\n     *  TODO: someone should check that the results of the searches are\n     *        still correct by adding assert statements. Right now, the test\n     *        passes if the results are the same between multi-file and\n     *        single-file formats, even if the results are wrong.\n     */\n    public void testSearch() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n    }\n\n","sourceOld":"    /** This test performs a number of searches. It also compares output\n     *  of searches using multi-file index segments with single-file\n     *  index segments.\n     *\n     *  TODO: someone should check that the results of the searches are\n     *        still correct by adding assert statements. Right now, the test\n     *        passes if the results are the same between multi-file and\n     *        single-file formats, even if the results are wrong.\n     */\n    public void testSearch() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#testSearch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearch#testSearch().mjava","sourceNew":"    /** This test performs a number of searches. It also compares output\n     *  of searches using multi-file index segments with single-file\n     *  index segments.\n     *\n     *  TODO: someone should check that the results of the searches are\n     *        still correct by adding assert statements. Right now, the test\n     *        passes if the results are the same between multi-file and\n     *        single-file formats, even if the results are wrong.\n     */\n    public void testSearch() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTestSearch(random(), pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTestSearch(random(), pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n    }\n\n","sourceOld":"    /** This test performs a number of searches. It also compares output\n     *  of searches using multi-file index segments with single-file\n     *  index segments.\n     *\n     *  TODO: someone should check that the results of the searches are\n     *        still correct by adding assert statements. Right now, the test\n     *        passes if the results are the same between multi-file and\n     *        single-file formats, even if the results are wrong.\n     */\n    public void testSearch() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTestSearch(random, pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d06343967a29132f5d782f74e8d0988400278a02","date":1388963049,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#testSearch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/TestSearch#testSearch().mjava","sourceNew":"    /** This test performs a number of searches. It also compares output\n     *  of searches using multi-file index segments with single-file\n     *  index segments.\n     *\n     *  TODO: someone should check that the results of the searches are\n     *        still correct by adding assert statements. Right now, the test\n     *        passes if the results are the same between multi-file and\n     *        single-file formats, even if the results are wrong.\n     */\n    public void testSearch() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTestSearch(random(), pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTestSearch(random(), pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n    }\n\n","sourceOld":"    /** This test performs a number of searches. It also compares output\n     *  of searches using multi-file index segments with single-file\n     *  index segments.\n     *\n     *  TODO: someone should check that the results of the searches are\n     *        still correct by adding assert statements. Right now, the test\n     *        passes if the results are the same between multi-file and\n     *        single-file formats, even if the results are wrong.\n     */\n    public void testSearch() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTestSearch(random(), pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTestSearch(random(), pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n    }\n\n","bugFix":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d06343967a29132f5d782f74e8d0988400278a02":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d06343967a29132f5d782f74e8d0988400278a02"]},"commit2Childs":{"d06343967a29132f5d782f74e8d0988400278a02":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["d06343967a29132f5d782f74e8d0988400278a02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}