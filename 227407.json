{"path":"backwards/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * <b>NOTE:</b> This API is experimental and might change in\n   * incompatible ways in the next release.\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, field, parser);\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, field, parser);\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, field, parser);\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, field, parser);\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, field, parser);\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, field, parser);\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.StringOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.StringValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/SortField#getComparator(int,int).mjava","sourceNew":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * <b>NOTE:</b> This API is experimental and might change in\n   * incompatible ways in the next release.\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, field, parser);\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, field, parser);\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, field, parser);\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, field, parser);\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, field, parser);\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, field, parser);\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.StringOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.StringValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","sourceOld":"  /** Returns the {@link FieldComparator} to use for\n   * sorting.\n   *\n   * <b>NOTE:</b> This API is experimental and might change in\n   * incompatible ways in the next release.\n   *\n   * @param numHits number of top hits the queue will store\n   * @param sortPos position of this SortField within {@link\n   *   Sort}.  The comparator is primary if sortPos==0,\n   *   secondary if sortPos==1, etc.  Some comparators can\n   *   optimize themselves when they are the primary sort.\n   * @return {@link FieldComparator} to use when sorting\n   */\n  public FieldComparator getComparator(final int numHits, final int sortPos) throws IOException {\n\n    if (locale != null) {\n      // TODO: it'd be nice to allow FieldCache.getStringIndex\n      // to optionally accept a Locale so sorting could then use\n      // the faster StringComparator impls\n      return new FieldComparator.StringComparatorLocale(numHits, field, locale);\n    }\n\n    switch (type) {\n    case SortField.SCORE:\n      return new FieldComparator.RelevanceComparator(numHits);\n\n    case SortField.DOC:\n      return new FieldComparator.DocComparator(numHits);\n\n    case SortField.INT:\n      return new FieldComparator.IntComparator(numHits, field, parser);\n\n    case SortField.FLOAT:\n      return new FieldComparator.FloatComparator(numHits, field, parser);\n\n    case SortField.LONG:\n      return new FieldComparator.LongComparator(numHits, field, parser);\n\n    case SortField.DOUBLE:\n      return new FieldComparator.DoubleComparator(numHits, field, parser);\n\n    case SortField.BYTE:\n      return new FieldComparator.ByteComparator(numHits, field, parser);\n\n    case SortField.SHORT:\n      return new FieldComparator.ShortComparator(numHits, field, parser);\n\n    case SortField.CUSTOM:\n      assert comparatorSource != null;\n      return comparatorSource.newComparator(field, numHits, sortPos, reverse);\n\n    case SortField.STRING:\n      return new FieldComparator.StringOrdValComparator(numHits, field, sortPos, reverse);\n\n    case SortField.STRING_VAL:\n      return new FieldComparator.StringValComparator(numHits, field);\n        \n    default:\n      throw new IllegalStateException(\"Illegal sort type: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}