{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath).mjava","sourceNew":"  /**\n   * Construct a new CategoryPath object, copying the path given in an\n   * existing CategoryPath object.\n   * <P>\n   * This copy-constructor is handy when you need to save a reference to a\n   * CategoryPath (e.g., when it serves as a key to a hash-table), but cannot\n   * save a reference to the original object because its contents can be\n   * changed later by the user. Copying the contents into a new object is a\n   * solution.\n   * <P>\n   * This constructor </I>does not</I> copy the capacity (spare buffer size)\n   * of the existing CategoryPath. Rather, the new object occupies exactly the\n   * space it needs, without any spare. This is the expected behavior in the\n   * typical use case outlined in the previous paragraph.\n   */\n  public CategoryPath(CategoryPath existing) {\n    ncomponents = existing.ncomponents;\n    if (ncomponents == 0) {\n      chars = new char[0];\n      ends = new short[0];\n      return;\n    }\n\n    chars = new char[existing.ends[ncomponents - 1]];\n    System.arraycopy(existing.chars, 0, chars, 0, chars.length);\n    ends = new short[ncomponents];\n    System.arraycopy(existing.ends, 0, ends, 0, ends.length);\n  }\n\n","sourceOld":"  /**\n   * Construct a new CategoryPath object, copying the path given in an\n   * existing CategoryPath object.\n   * <P>\n   * This copy-constructor is handy when you need to save a reference to a\n   * CategoryPath (e.g., when it serves as a key to a hash-table), but cannot\n   * save a reference to the original object because its contents can be\n   * changed later by the user. Copying the contents into a new object is a\n   * solution.\n   * <P>\n   * This constructor </I>does not</I> copy the capacity (spare buffer size)\n   * of the existing CategoryPath. Rather, the new object occupies exactly the\n   * space it needs, without any spare. This is the expected behavior in the\n   * typical use case outlined in the previous paragraph.\n   */\n  public CategoryPath(CategoryPath existing) {\n    ncomponents = existing.ncomponents;\n    if (ncomponents == 0) {\n      chars = new char[0];\n      ends = new short[0];\n      return;\n    }\n\n    chars = new char[existing.ends[ncomponents - 1]];\n    System.arraycopy(existing.chars, 0, chars, 0, chars.length);\n    ends = new short[ncomponents];\n    System.arraycopy(existing.ends, 0, ends, 0, ends.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8510775f25a49d13008fe3890abce947ec95564","date":1346177474,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath).mjava","sourceNew":"  /**\n   * Construct a new CategoryPath object, copying the path given in an\n   * existing CategoryPath object.\n   * <P>\n   * This copy-constructor is handy when you need to save a reference to a\n   * CategoryPath (e.g., when it serves as a key to a hash-table), but cannot\n   * save a reference to the original object because its contents can be\n   * changed later by the user. Copying the contents into a new object is a\n   * solution.\n   * <P>\n   * This constructor <I>does not</I> copy the capacity (spare buffer size)\n   * of the existing CategoryPath. Rather, the new object occupies exactly the\n   * space it needs, without any spare. This is the expected behavior in the\n   * typical use case outlined in the previous paragraph.\n   */\n  public CategoryPath(CategoryPath existing) {\n    ncomponents = existing.ncomponents;\n    if (ncomponents == 0) {\n      chars = new char[0];\n      ends = new short[0];\n      return;\n    }\n\n    chars = new char[existing.ends[ncomponents - 1]];\n    System.arraycopy(existing.chars, 0, chars, 0, chars.length);\n    ends = new short[ncomponents];\n    System.arraycopy(existing.ends, 0, ends, 0, ends.length);\n  }\n\n","sourceOld":"  /**\n   * Construct a new CategoryPath object, copying the path given in an\n   * existing CategoryPath object.\n   * <P>\n   * This copy-constructor is handy when you need to save a reference to a\n   * CategoryPath (e.g., when it serves as a key to a hash-table), but cannot\n   * save a reference to the original object because its contents can be\n   * changed later by the user. Copying the contents into a new object is a\n   * solution.\n   * <P>\n   * This constructor </I>does not</I> copy the capacity (spare buffer size)\n   * of the existing CategoryPath. Rather, the new object occupies exactly the\n   * space it needs, without any spare. This is the expected behavior in the\n   * typical use case outlined in the previous paragraph.\n   */\n  public CategoryPath(CategoryPath existing) {\n    ncomponents = existing.ncomponents;\n    if (ncomponents == 0) {\n      chars = new char[0];\n      ends = new short[0];\n      return;\n    }\n\n    chars = new char[existing.ends[ncomponents - 1]];\n    System.arraycopy(existing.chars, 0, chars, 0, chars.length);\n    ends = new short[ncomponents];\n    System.arraycopy(existing.ends, 0, ends, 0, ends.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath).mjava","sourceNew":"  /**\n   * Construct a new CategoryPath object, copying the path given in an\n   * existing CategoryPath object.\n   * <P>\n   * This copy-constructor is handy when you need to save a reference to a\n   * CategoryPath (e.g., when it serves as a key to a hash-table), but cannot\n   * save a reference to the original object because its contents can be\n   * changed later by the user. Copying the contents into a new object is a\n   * solution.\n   * <P>\n   * This constructor <I>does not</I> copy the capacity (spare buffer size)\n   * of the existing CategoryPath. Rather, the new object occupies exactly the\n   * space it needs, without any spare. This is the expected behavior in the\n   * typical use case outlined in the previous paragraph.\n   */\n  public CategoryPath(CategoryPath existing) {\n    ncomponents = existing.ncomponents;\n    if (ncomponents == 0) {\n      chars = new char[0];\n      ends = new short[0];\n      return;\n    }\n\n    chars = new char[existing.ends[ncomponents - 1]];\n    System.arraycopy(existing.chars, 0, chars, 0, chars.length);\n    ends = new short[ncomponents];\n    System.arraycopy(existing.ends, 0, ends, 0, ends.length);\n  }\n\n","sourceOld":"  /**\n   * Construct a new CategoryPath object, copying the path given in an\n   * existing CategoryPath object.\n   * <P>\n   * This copy-constructor is handy when you need to save a reference to a\n   * CategoryPath (e.g., when it serves as a key to a hash-table), but cannot\n   * save a reference to the original object because its contents can be\n   * changed later by the user. Copying the contents into a new object is a\n   * solution.\n   * <P>\n   * This constructor </I>does not</I> copy the capacity (spare buffer size)\n   * of the existing CategoryPath. Rather, the new object occupies exactly the\n   * space it needs, without any spare. This is the expected behavior in the\n   * typical use case outlined in the previous paragraph.\n   */\n  public CategoryPath(CategoryPath existing) {\n    ncomponents = existing.ncomponents;\n    if (ncomponents == 0) {\n      chars = new char[0];\n      ends = new short[0];\n      return;\n    }\n\n    chars = new char[existing.ends[ncomponents - 1]];\n    System.arraycopy(existing.chars, 0, chars, 0, chars.length);\n    ends = new short[ncomponents];\n    System.arraycopy(existing.ends, 0, ends, 0, ends.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct a new CategoryPath object, copying the path given in an\n   * existing CategoryPath object.\n   * <P>\n   * This copy-constructor is handy when you need to save a reference to a\n   * CategoryPath (e.g., when it serves as a key to a hash-table), but cannot\n   * save a reference to the original object because its contents can be\n   * changed later by the user. Copying the contents into a new object is a\n   * solution.\n   * <P>\n   * This constructor <I>does not</I> copy the capacity (spare buffer size)\n   * of the existing CategoryPath. Rather, the new object occupies exactly the\n   * space it needs, without any spare. This is the expected behavior in the\n   * typical use case outlined in the previous paragraph.\n   */\n  public CategoryPath(CategoryPath existing) {\n    ncomponents = existing.ncomponents;\n    if (ncomponents == 0) {\n      chars = new char[0];\n      ends = new short[0];\n      return;\n    }\n\n    chars = new char[existing.ends[ncomponents - 1]];\n    System.arraycopy(existing.chars, 0, chars, 0, chars.length);\n    ends = new short[ncomponents];\n    System.arraycopy(existing.ends, 0, ends, 0, ends.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#CategoryPath(CategoryPath).mjava","sourceNew":null,"sourceOld":"  /**\n   * Construct a new CategoryPath object, copying the path given in an\n   * existing CategoryPath object.\n   * <P>\n   * This copy-constructor is handy when you need to save a reference to a\n   * CategoryPath (e.g., when it serves as a key to a hash-table), but cannot\n   * save a reference to the original object because its contents can be\n   * changed later by the user. Copying the contents into a new object is a\n   * solution.\n   * <P>\n   * This constructor <I>does not</I> copy the capacity (spare buffer size)\n   * of the existing CategoryPath. Rather, the new object occupies exactly the\n   * space it needs, without any spare. This is the expected behavior in the\n   * typical use case outlined in the previous paragraph.\n   */\n  public CategoryPath(CategoryPath existing) {\n    ncomponents = existing.ncomponents;\n    if (ncomponents == 0) {\n      chars = new char[0];\n      ends = new short[0];\n      return;\n    }\n\n    chars = new char[existing.ends[ncomponents - 1]];\n    System.arraycopy(existing.chars, 0, chars, 0, chars.length);\n    ends = new short[ncomponents];\n    System.arraycopy(existing.ends, 0, ends, 0, ends.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c8510775f25a49d13008fe3890abce947ec95564","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["c8510775f25a49d13008fe3890abce947ec95564"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8510775f25a49d13008fe3890abce947ec95564":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c8510775f25a49d13008fe3890abce947ec95564"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c8510775f25a49d13008fe3890abce947ec95564","05a14b2611ead08655a2b2bdc61632eb31316e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c8510775f25a49d13008fe3890abce947ec95564":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","05a14b2611ead08655a2b2bdc61632eb31316e57"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}