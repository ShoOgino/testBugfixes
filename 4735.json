{"path":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitsQuery(Query,ScoreDoc[],ScoreDoc[],int[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitsQuery(Query,ScoreDoc[],ScoreDoc[],int[]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkHitsQuery(Query,ScoreDoc[],ScoreDoc[],int[]).mjava","sourceNew":"  /** Tests that two queries have an expected order of documents,\n   * and that the two queries have the same score values.\n   */\n  public static void checkHitsQuery(\n        Query query,\n        ScoreDoc[] hits1,\n        ScoreDoc[] hits2,\n        int[] results)\n          throws IOException {\n\n    checkDocIds(\"hits1\", results, hits1);\n    checkDocIds(\"hits2\", results, hits2);\n    checkEqual(query, hits1, hits2);\n  }\n\n","sourceOld":"  /** Tests that two queries have an expected order of documents,\n   * and that the two queries have the same score values.\n   */\n  public static void checkHitsQuery(\n        Query query,\n        ScoreDoc[] hits1,\n        ScoreDoc[] hits2,\n        int[] results)\n          throws IOException {\n\n    checkDocIds(\"hits1\", results, hits1);\n    checkDocIds(\"hits2\", results, hits2);\n    checkEqual(query, hits1, hits2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitsQuery(Query,ScoreDoc[],ScoreDoc[],int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitsQuery(Query,ScoreDoc[],ScoreDoc[],int[]).mjava","sourceNew":"  /** Tests that two queries have an expected order of documents,\n   * and that the two queries have the same score values.\n   */\n  public static void checkHitsQuery(\n        Query query,\n        ScoreDoc[] hits1,\n        ScoreDoc[] hits2,\n        int[] results) {\n\n    checkDocIds(\"hits1\", results, hits1);\n    checkDocIds(\"hits2\", results, hits2);\n    checkEqual(query, hits1, hits2);\n  }\n\n","sourceOld":"  /** Tests that two queries have an expected order of documents,\n   * and that the two queries have the same score values.\n   */\n  public static void checkHitsQuery(\n        Query query,\n        ScoreDoc[] hits1,\n        ScoreDoc[] hits2,\n        int[] results)\n          throws IOException {\n\n    checkDocIds(\"hits1\", results, hits1);\n    checkDocIds(\"hits2\", results, hits2);\n    checkEqual(query, hits1, hits2);\n  }\n\n","bugFix":["56b47d7ef702892600c875ce48ffbdd5701bb3f3","29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitsQuery(Query,ScoreDoc[],ScoreDoc[],int[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkHitsQuery(Query,ScoreDoc[],ScoreDoc[],int[]).mjava","sourceNew":"  /** Tests that two queries have an expected order of documents,\n   * and that the two queries have the same score values.\n   */\n  public static void checkHitsQuery(\n        Query query,\n        ScoreDoc[] hits1,\n        ScoreDoc[] hits2,\n        int[] results) {\n\n    checkDocIds(\"hits1\", results, hits1);\n    checkDocIds(\"hits2\", results, hits2);\n    checkEqual(query, hits1, hits2);\n  }\n\n","sourceOld":"  /** Tests that two queries have an expected order of documents,\n   * and that the two queries have the same score values.\n   */\n  public static void checkHitsQuery(\n        Query query,\n        ScoreDoc[] hits1,\n        ScoreDoc[] hits2,\n        int[] results)\n          throws IOException {\n\n    checkDocIds(\"hits1\", results, hits1);\n    checkDocIds(\"hits2\", results, hits2);\n    checkEqual(query, hits1, hits2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}