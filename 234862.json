{"path":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.QueryFirstScorer#score(Collector).mjava","commits":[{"id":"cc7674a6feb46b954ebfb8ace9eb0383adb93de9","date":1348214796,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.QueryFirstScorer#score(Collector).mjava","pathOld":"/dev/null","sourceNew":"    // optimization: we are topScorer and collect directly\n    @Override\n    public void score(Collector collector) throws IOException {\n      // the normalization trick already applies the boost of this query,\n      // so we can use the wrapped scorer directly:\n      collector.setScorer(scorer);\n      for (;;) {\n        final int scorerDoc = scorer.nextDoc();\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        if (filterbits.get(scorerDoc)) {\n          collector.collect(scorerDoc);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.QueryFirstScorer#score(Collector).mjava","sourceNew":null,"sourceOld":"    // optimization: we are topScorer and collect directly\n    @Override\n    public void score(Collector collector) throws IOException {\n      // the normalization trick already applies the boost of this query,\n      // so we can use the wrapped scorer directly:\n      collector.setScorer(scorer);\n      for (;;) {\n        final int scorerDoc = scorer.nextDoc();\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        if (filterbits.get(scorerDoc)) {\n          collector.collect(scorerDoc);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.QueryFirstBulkScorer#score(Collector,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.QueryFirstScorer#score(Collector).mjava","sourceNew":"    @Override\n    public boolean score(Collector collector, int maxDoc) throws IOException {\n      // the normalization trick already applies the boost of this query,\n      // so we can use the wrapped scorer directly:\n      collector.setScorer(scorer);\n      if (scorer.docID() == -1) {\n        scorer.nextDoc();\n      }\n      while (true) {\n        final int scorerDoc = scorer.docID();\n        if (scorerDoc < maxDoc) {\n          if (filterBits.get(scorerDoc)) {\n            collector.collect(scorerDoc);\n          }\n          scorer.nextDoc();\n        } else {\n          break;\n        }\n      }\n\n      return scorer.docID() != Scorer.NO_MORE_DOCS;\n    }\n\n","sourceOld":"    // optimization: we are topScorer and collect directly\n    @Override\n    public void score(Collector collector) throws IOException {\n      // the normalization trick already applies the boost of this query,\n      // so we can use the wrapped scorer directly:\n      collector.setScorer(scorer);\n      for (;;) {\n        final int scorerDoc = scorer.nextDoc();\n        if (scorerDoc == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        if (filterbits.get(scorerDoc)) {\n          collector.collect(scorerDoc);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9","2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acf00221f44c5f08ccea014f2492b53af15ecd66"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cc7674a6feb46b954ebfb8ace9eb0383adb93de9"],"cc7674a6feb46b954ebfb8ace9eb0383adb93de9":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}