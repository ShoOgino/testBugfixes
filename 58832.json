{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#testRepFactor1LeaderStartup().mjava","commits":[{"id":"e87998750c1408b8af3248e55cff794d51d37166","date":1501426220,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#testRepFactor1LeaderStartup().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRepFactor1LeaderStartup() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String collectionName = \"testRepFactor1LeaderStartup\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName());\n    create.process(solrClient);\n\n    waitForState(\"The collection should have 1 shard and 1 replica\", collectionName, clusterShape(1, 1));\n\n    solrClient.setDefaultCollection(collectionName);\n    solrClient.getZkStateReader().registerCore(collectionName);\n\n    String addListenerCommand = \"{\" +\n        \"'add-listener' : {'name':'newSearcherListener','event':'newSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"'add-listener' : {'name':'firstSearcherListener','event':'firstSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"}\";\n\n    ConfigRequest request = new ConfigRequest(SolrRequest.METHOD.POST, \"/config\", addListenerCommand);\n    solrClient.request(request);\n\n    solrClient.add(new SolrInputDocument(\"id\", \"1\"));\n    solrClient.commit();\n\n    AtomicInteger expectedDocs = new AtomicInteger(1);\n    AtomicReference<String> failingCoreNodeName = new AtomicReference<>();\n    CollectionStateWatcher stateWatcher = createActiveReplicaSearcherWatcher(expectedDocs, failingCoreNodeName);\n\n    JettySolrRunner runner = cluster.getJettySolrRunner(0);\n    cluster.stopJettySolrRunner(0);\n    waitForState(\"\", collectionName, clusterShape(1, 0));\n    // restart\n    sleepTime.set(10000);\n    cluster.startJettySolrRunner(runner);\n    cluster.getSolrClient().getZkStateReader().registerCollectionStateWatcher(collectionName, stateWatcher);\n    waitForState(\"\", collectionName, clusterShape(1, 1));\n    assertNull(\"No replica should have been active without registering a searcher, found: \" + failingCoreNodeName.get(), failingCoreNodeName.get());\n    cluster.getSolrClient().getZkStateReader().removeCollectionStateWatcher(collectionName, stateWatcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#testRepFactor1LeaderStartup().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRepFactor1LeaderStartup() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String collectionName = \"testRepFactor1LeaderStartup\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName());\n    create.process(solrClient);\n\n    waitForState(\"The collection should have 1 shard and 1 replica\", collectionName, clusterShape(1, 1));\n\n    solrClient.setDefaultCollection(collectionName);\n    solrClient.getZkStateReader().registerCore(collectionName);\n\n    String addListenerCommand = \"{\" +\n        \"'add-listener' : {'name':'newSearcherListener','event':'newSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"'add-listener' : {'name':'firstSearcherListener','event':'firstSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"}\";\n\n    ConfigRequest request = new ConfigRequest(SolrRequest.METHOD.POST, \"/config\", addListenerCommand);\n    solrClient.request(request);\n\n    solrClient.add(new SolrInputDocument(\"id\", \"1\"));\n    solrClient.commit();\n\n    AtomicInteger expectedDocs = new AtomicInteger(1);\n    AtomicReference<String> failingCoreNodeName = new AtomicReference<>();\n    CollectionStateWatcher stateWatcher = createActiveReplicaSearcherWatcher(expectedDocs, failingCoreNodeName);\n\n    JettySolrRunner runner = cluster.getJettySolrRunner(0);\n    cluster.stopJettySolrRunner(0);\n    waitForState(\"\", collectionName, clusterShape(1, 0));\n    // restart\n    sleepTime.set(10000);\n    cluster.startJettySolrRunner(runner);\n    cluster.getSolrClient().getZkStateReader().registerCollectionStateWatcher(collectionName, stateWatcher);\n    waitForState(\"\", collectionName, clusterShape(1, 1));\n    assertNull(\"No replica should have been active without registering a searcher, found: \" + failingCoreNodeName.get(), failingCoreNodeName.get());\n    cluster.getSolrClient().getZkStateReader().removeCollectionStateWatcher(collectionName, stateWatcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4","date":1509452916,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#testRepFactor1LeaderStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#testRepFactor1LeaderStartup().mjava","sourceNew":"  @Test\n  public void testRepFactor1LeaderStartup() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String collectionName = \"testRepFactor1LeaderStartup\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName());\n    create.process(solrClient);\n\n    waitForState(\"The collection should have 1 shard and 1 replica\", collectionName, clusterShape(1, 1));\n\n    solrClient.setDefaultCollection(collectionName);\n\n    String addListenerCommand = \"{\" +\n        \"'add-listener' : {'name':'newSearcherListener','event':'newSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"'add-listener' : {'name':'firstSearcherListener','event':'firstSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"}\";\n\n    ConfigRequest request = new ConfigRequest(SolrRequest.METHOD.POST, \"/config\", addListenerCommand);\n    solrClient.request(request);\n\n    solrClient.add(new SolrInputDocument(\"id\", \"1\"));\n    solrClient.commit();\n\n    AtomicInteger expectedDocs = new AtomicInteger(1);\n    AtomicReference<String> failingCoreNodeName = new AtomicReference<>();\n    CollectionStateWatcher stateWatcher = createActiveReplicaSearcherWatcher(expectedDocs, failingCoreNodeName);\n\n    JettySolrRunner runner = cluster.getJettySolrRunner(0);\n    cluster.stopJettySolrRunner(0);\n    waitForState(\"\", collectionName, clusterShape(1, 0));\n    // restart\n    sleepTime.set(10000);\n    cluster.startJettySolrRunner(runner);\n    cluster.getSolrClient().getZkStateReader().registerCollectionStateWatcher(collectionName, stateWatcher);\n    waitForState(\"\", collectionName, clusterShape(1, 1));\n    assertNull(\"No replica should have been active without registering a searcher, found: \" + failingCoreNodeName.get(), failingCoreNodeName.get());\n    cluster.getSolrClient().getZkStateReader().removeCollectionStateWatcher(collectionName, stateWatcher);\n  }\n\n","sourceOld":"  @Test\n  public void testRepFactor1LeaderStartup() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String collectionName = \"testRepFactor1LeaderStartup\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName());\n    create.process(solrClient);\n\n    waitForState(\"The collection should have 1 shard and 1 replica\", collectionName, clusterShape(1, 1));\n\n    solrClient.setDefaultCollection(collectionName);\n    solrClient.getZkStateReader().registerCore(collectionName);\n\n    String addListenerCommand = \"{\" +\n        \"'add-listener' : {'name':'newSearcherListener','event':'newSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"'add-listener' : {'name':'firstSearcherListener','event':'firstSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"}\";\n\n    ConfigRequest request = new ConfigRequest(SolrRequest.METHOD.POST, \"/config\", addListenerCommand);\n    solrClient.request(request);\n\n    solrClient.add(new SolrInputDocument(\"id\", \"1\"));\n    solrClient.commit();\n\n    AtomicInteger expectedDocs = new AtomicInteger(1);\n    AtomicReference<String> failingCoreNodeName = new AtomicReference<>();\n    CollectionStateWatcher stateWatcher = createActiveReplicaSearcherWatcher(expectedDocs, failingCoreNodeName);\n\n    JettySolrRunner runner = cluster.getJettySolrRunner(0);\n    cluster.stopJettySolrRunner(0);\n    waitForState(\"\", collectionName, clusterShape(1, 0));\n    // restart\n    sleepTime.set(10000);\n    cluster.startJettySolrRunner(runner);\n    cluster.getSolrClient().getZkStateReader().registerCollectionStateWatcher(collectionName, stateWatcher);\n    waitForState(\"\", collectionName, clusterShape(1, 1));\n    assertNull(\"No replica should have been active without registering a searcher, found: \" + failingCoreNodeName.get(), failingCoreNodeName.get());\n    cluster.getSolrClient().getZkStateReader().removeCollectionStateWatcher(collectionName, stateWatcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"751e212ed6f8a4a43b591e4d6cd4637d15a4219a","date":1530638837,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#testRepFactor1LeaderStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#testRepFactor1LeaderStartup().mjava","sourceNew":"  @Test\n  public void testRepFactor1LeaderStartup() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String collectionName = \"testRepFactor1LeaderStartup\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName());\n    create.process(solrClient);\n\n    waitForState(\"The collection should have 1 shard and 1 replica\", collectionName, clusterShape(1, 1));\n\n    solrClient.setDefaultCollection(collectionName);\n\n    String addListenerCommand = \"{\" +\n        \"'add-listener' : {'name':'newSearcherListener','event':'newSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"'add-listener' : {'name':'firstSearcherListener','event':'firstSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"}\";\n\n    ConfigRequest request = new ConfigRequest(addListenerCommand);\n    solrClient.request(request);\n\n    solrClient.add(new SolrInputDocument(\"id\", \"1\"));\n    solrClient.commit();\n\n    AtomicInteger expectedDocs = new AtomicInteger(1);\n    AtomicReference<String> failingCoreNodeName = new AtomicReference<>();\n    CollectionStateWatcher stateWatcher = createActiveReplicaSearcherWatcher(expectedDocs, failingCoreNodeName);\n\n    JettySolrRunner runner = cluster.getJettySolrRunner(0);\n    cluster.stopJettySolrRunner(0);\n    waitForState(\"\", collectionName, clusterShape(1, 0));\n    // restart\n    sleepTime.set(10000);\n    cluster.startJettySolrRunner(runner);\n    cluster.getSolrClient().getZkStateReader().registerCollectionStateWatcher(collectionName, stateWatcher);\n    waitForState(\"\", collectionName, clusterShape(1, 1));\n    assertNull(\"No replica should have been active without registering a searcher, found: \" + failingCoreNodeName.get(), failingCoreNodeName.get());\n    cluster.getSolrClient().getZkStateReader().removeCollectionStateWatcher(collectionName, stateWatcher);\n  }\n\n","sourceOld":"  @Test\n  public void testRepFactor1LeaderStartup() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String collectionName = \"testRepFactor1LeaderStartup\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName());\n    create.process(solrClient);\n\n    waitForState(\"The collection should have 1 shard and 1 replica\", collectionName, clusterShape(1, 1));\n\n    solrClient.setDefaultCollection(collectionName);\n\n    String addListenerCommand = \"{\" +\n        \"'add-listener' : {'name':'newSearcherListener','event':'newSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"'add-listener' : {'name':'firstSearcherListener','event':'firstSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"}\";\n\n    ConfigRequest request = new ConfigRequest(SolrRequest.METHOD.POST, \"/config\", addListenerCommand);\n    solrClient.request(request);\n\n    solrClient.add(new SolrInputDocument(\"id\", \"1\"));\n    solrClient.commit();\n\n    AtomicInteger expectedDocs = new AtomicInteger(1);\n    AtomicReference<String> failingCoreNodeName = new AtomicReference<>();\n    CollectionStateWatcher stateWatcher = createActiveReplicaSearcherWatcher(expectedDocs, failingCoreNodeName);\n\n    JettySolrRunner runner = cluster.getJettySolrRunner(0);\n    cluster.stopJettySolrRunner(0);\n    waitForState(\"\", collectionName, clusterShape(1, 0));\n    // restart\n    sleepTime.set(10000);\n    cluster.startJettySolrRunner(runner);\n    cluster.getSolrClient().getZkStateReader().registerCollectionStateWatcher(collectionName, stateWatcher);\n    waitForState(\"\", collectionName, clusterShape(1, 1));\n    assertNull(\"No replica should have been active without registering a searcher, found: \" + failingCoreNodeName.get(), failingCoreNodeName.get());\n    cluster.getSolrClient().getZkStateReader().removeCollectionStateWatcher(collectionName, stateWatcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#testRepFactor1LeaderStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#testRepFactor1LeaderStartup().mjava","sourceNew":"  @Test\n  public void testRepFactor1LeaderStartup() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String collectionName = \"testRepFactor1LeaderStartup\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName());\n    create.process(solrClient);\n\n    waitForState(\"The collection should have 1 shard and 1 replica\", collectionName, clusterShape(1, 1));\n\n    solrClient.setDefaultCollection(collectionName);\n\n    String addListenerCommand = \"{\" +\n        \"'add-listener' : {'name':'newSearcherListener','event':'newSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"'add-listener' : {'name':'firstSearcherListener','event':'firstSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"}\";\n\n    ConfigRequest request = new ConfigRequest(addListenerCommand);\n    solrClient.request(request);\n\n    solrClient.add(new SolrInputDocument(\"id\", \"1\"));\n    solrClient.commit();\n\n    AtomicInteger expectedDocs = new AtomicInteger(1);\n    AtomicReference<String> failingCoreNodeName = new AtomicReference<>();\n    CollectionStateWatcher stateWatcher = createActiveReplicaSearcherWatcher(expectedDocs, failingCoreNodeName);\n\n    JettySolrRunner runner = cluster.getJettySolrRunner(0);\n    cluster.stopJettySolrRunner(0);\n    waitForState(\"\", collectionName, clusterShape(1, 0));\n    // restart\n    sleepTime.set(10000);\n    cluster.startJettySolrRunner(runner);\n    cluster.getSolrClient().getZkStateReader().registerCollectionStateWatcher(collectionName, stateWatcher);\n    waitForState(\"\", collectionName, clusterShape(1, 1));\n    assertNull(\"No replica should have been active without registering a searcher, found: \" + failingCoreNodeName.get(), failingCoreNodeName.get());\n    cluster.getSolrClient().getZkStateReader().removeCollectionStateWatcher(collectionName, stateWatcher);\n  }\n\n","sourceOld":"  @Test\n  public void testRepFactor1LeaderStartup() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String collectionName = \"testRepFactor1LeaderStartup\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName());\n    create.process(solrClient);\n\n    waitForState(\"The collection should have 1 shard and 1 replica\", collectionName, clusterShape(1, 1));\n\n    solrClient.setDefaultCollection(collectionName);\n\n    String addListenerCommand = \"{\" +\n        \"'add-listener' : {'name':'newSearcherListener','event':'newSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"'add-listener' : {'name':'firstSearcherListener','event':'firstSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"}\";\n\n    ConfigRequest request = new ConfigRequest(SolrRequest.METHOD.POST, \"/config\", addListenerCommand);\n    solrClient.request(request);\n\n    solrClient.add(new SolrInputDocument(\"id\", \"1\"));\n    solrClient.commit();\n\n    AtomicInteger expectedDocs = new AtomicInteger(1);\n    AtomicReference<String> failingCoreNodeName = new AtomicReference<>();\n    CollectionStateWatcher stateWatcher = createActiveReplicaSearcherWatcher(expectedDocs, failingCoreNodeName);\n\n    JettySolrRunner runner = cluster.getJettySolrRunner(0);\n    cluster.stopJettySolrRunner(0);\n    waitForState(\"\", collectionName, clusterShape(1, 0));\n    // restart\n    sleepTime.set(10000);\n    cluster.startJettySolrRunner(runner);\n    cluster.getSolrClient().getZkStateReader().registerCollectionStateWatcher(collectionName, stateWatcher);\n    waitForState(\"\", collectionName, clusterShape(1, 1));\n    assertNull(\"No replica should have been active without registering a searcher, found: \" + failingCoreNodeName.get(), failingCoreNodeName.get());\n    cluster.getSolrClient().getZkStateReader().removeCollectionStateWatcher(collectionName, stateWatcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#testRepFactor1LeaderStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#testRepFactor1LeaderStartup().mjava","sourceNew":"  @Test\n  public void testRepFactor1LeaderStartup() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String collectionName = \"testRepFactor1LeaderStartup\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName());\n    create.process(solrClient);\n\n    waitForState(\"The collection should have 1 shard and 1 replica\", collectionName, clusterShape(1, 1));\n\n    solrClient.setDefaultCollection(collectionName);\n\n    String addListenerCommand = \"{\" +\n        \"'add-listener' : {'name':'newSearcherListener','event':'newSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"'add-listener' : {'name':'firstSearcherListener','event':'firstSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"}\";\n\n    ConfigRequest request = new ConfigRequest(addListenerCommand);\n    solrClient.request(request);\n\n    solrClient.add(new SolrInputDocument(\"id\", \"1\"));\n    solrClient.commit();\n\n    AtomicInteger expectedDocs = new AtomicInteger(1);\n    AtomicReference<String> failingCoreNodeName = new AtomicReference<>();\n    CollectionStateWatcher stateWatcher = createActiveReplicaSearcherWatcher(expectedDocs, failingCoreNodeName);\n\n    JettySolrRunner runner = cluster.getJettySolrRunner(0);\n    cluster.stopJettySolrRunner(0);\n    waitForState(\"\", collectionName, clusterShape(1, 0));\n    // restart\n    sleepTime.set(10000);\n    cluster.startJettySolrRunner(runner);\n    cluster.getSolrClient().getZkStateReader().registerCollectionStateWatcher(collectionName, stateWatcher);\n    waitForState(\"\", collectionName, clusterShape(1, 1));\n    assertNull(\"No replica should have been active without registering a searcher, found: \" + failingCoreNodeName.get(), failingCoreNodeName.get());\n    cluster.getSolrClient().getZkStateReader().removeCollectionStateWatcher(collectionName, stateWatcher);\n  }\n\n","sourceOld":"  @Test\n  public void testRepFactor1LeaderStartup() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String collectionName = \"testRepFactor1LeaderStartup\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName());\n    create.process(solrClient);\n\n    waitForState(\"The collection should have 1 shard and 1 replica\", collectionName, clusterShape(1, 1));\n\n    solrClient.setDefaultCollection(collectionName);\n\n    String addListenerCommand = \"{\" +\n        \"'add-listener' : {'name':'newSearcherListener','event':'newSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"'add-listener' : {'name':'firstSearcherListener','event':'firstSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"}\";\n\n    ConfigRequest request = new ConfigRequest(SolrRequest.METHOD.POST, \"/config\", addListenerCommand);\n    solrClient.request(request);\n\n    solrClient.add(new SolrInputDocument(\"id\", \"1\"));\n    solrClient.commit();\n\n    AtomicInteger expectedDocs = new AtomicInteger(1);\n    AtomicReference<String> failingCoreNodeName = new AtomicReference<>();\n    CollectionStateWatcher stateWatcher = createActiveReplicaSearcherWatcher(expectedDocs, failingCoreNodeName);\n\n    JettySolrRunner runner = cluster.getJettySolrRunner(0);\n    cluster.stopJettySolrRunner(0);\n    waitForState(\"\", collectionName, clusterShape(1, 0));\n    // restart\n    sleepTime.set(10000);\n    cluster.startJettySolrRunner(runner);\n    cluster.getSolrClient().getZkStateReader().registerCollectionStateWatcher(collectionName, stateWatcher);\n    waitForState(\"\", collectionName, clusterShape(1, 1));\n    assertNull(\"No replica should have been active without registering a searcher, found: \" + failingCoreNodeName.get(), failingCoreNodeName.get());\n    cluster.getSolrClient().getZkStateReader().removeCollectionStateWatcher(collectionName, stateWatcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#testRepFactor1LeaderStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#testRepFactor1LeaderStartup().mjava","sourceNew":"  @Test\n  public void testRepFactor1LeaderStartup() throws Exception {\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String collectionName = \"testRepFactor1LeaderStartup\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName());\n    create.process(solrClient);\n\n   cluster.waitForActiveCollection(collectionName, 1, 1);\n\n    solrClient.setDefaultCollection(collectionName);\n\n    String addListenerCommand = \"{\" +\n        \"'add-listener' : {'name':'newSearcherListener','event':'newSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"'add-listener' : {'name':'firstSearcherListener','event':'firstSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"}\";\n\n    ConfigRequest request = new ConfigRequest(addListenerCommand);\n    solrClient.request(request);\n\n    solrClient.add(new SolrInputDocument(\"id\", \"1\"));\n    solrClient.commit();\n\n    AtomicInteger expectedDocs = new AtomicInteger(1);\n    AtomicReference<String> failingCoreNodeName = new AtomicReference<>();\n    CollectionStateWatcher stateWatcher = createActiveReplicaSearcherWatcher(expectedDocs, failingCoreNodeName);\n\n    JettySolrRunner runner = cluster.getJettySolrRunner(0);\n    runner.stop();\n    waitForState(\"jetty count:\" + cluster.getJettySolrRunners().size(), collectionName, clusterShape(1, 0));\n    \n    cluster.waitForJettyToStop(runner);\n    \n    // restart\n    sleepTime.set(1000);\n    runner.start();\n    cluster.waitForAllNodes(30);\n    cluster.getSolrClient().getZkStateReader().registerCollectionStateWatcher(collectionName, stateWatcher);\n    cluster.waitForActiveCollection(collectionName, 1, 1);\n    assertNull(\"No replica should have been active without registering a searcher, found: \" + failingCoreNodeName.get(), failingCoreNodeName.get());\n    cluster.getSolrClient().getZkStateReader().removeCollectionStateWatcher(collectionName, stateWatcher);\n  }\n\n","sourceOld":"  @Test\n  public void testRepFactor1LeaderStartup() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String collectionName = \"testRepFactor1LeaderStartup\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName());\n    create.process(solrClient);\n\n    waitForState(\"The collection should have 1 shard and 1 replica\", collectionName, clusterShape(1, 1));\n\n    solrClient.setDefaultCollection(collectionName);\n\n    String addListenerCommand = \"{\" +\n        \"'add-listener' : {'name':'newSearcherListener','event':'newSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"'add-listener' : {'name':'firstSearcherListener','event':'firstSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"}\";\n\n    ConfigRequest request = new ConfigRequest(addListenerCommand);\n    solrClient.request(request);\n\n    solrClient.add(new SolrInputDocument(\"id\", \"1\"));\n    solrClient.commit();\n\n    AtomicInteger expectedDocs = new AtomicInteger(1);\n    AtomicReference<String> failingCoreNodeName = new AtomicReference<>();\n    CollectionStateWatcher stateWatcher = createActiveReplicaSearcherWatcher(expectedDocs, failingCoreNodeName);\n\n    JettySolrRunner runner = cluster.getJettySolrRunner(0);\n    cluster.stopJettySolrRunner(0);\n    waitForState(\"\", collectionName, clusterShape(1, 0));\n    // restart\n    sleepTime.set(10000);\n    cluster.startJettySolrRunner(runner);\n    cluster.getSolrClient().getZkStateReader().registerCollectionStateWatcher(collectionName, stateWatcher);\n    waitForState(\"\", collectionName, clusterShape(1, 1));\n    assertNull(\"No replica should have been active without registering a searcher, found: \" + failingCoreNodeName.get(), failingCoreNodeName.get());\n    cluster.getSolrClient().getZkStateReader().removeCollectionStateWatcher(collectionName, stateWatcher);\n  }\n\n","bugFix":["e87998750c1408b8af3248e55cff794d51d37166"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e11a537632711f18086a2730feb888a041b5998","date":1558798804,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#testRepFactor1LeaderStartup().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudSearcherWarming#testRepFactor1LeaderStartup().mjava","sourceNew":"  @Test\n  public void testRepFactor1LeaderStartup() throws Exception {\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String collectionName = \"testRepFactor1LeaderStartup\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName());\n    create.process(solrClient);\n\n   cluster.waitForActiveCollection(collectionName, 1, 1);\n\n    solrClient.setDefaultCollection(collectionName);\n\n    String addListenerCommand = \"{\" +\n        \"'add-listener' : {'name':'newSearcherListener','event':'newSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"'add-listener' : {'name':'firstSearcherListener','event':'firstSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"}\";\n\n    ConfigRequest request = new ConfigRequest(addListenerCommand);\n    solrClient.request(request);\n\n    solrClient.add(new SolrInputDocument(\"id\", \"1\"));\n    solrClient.commit();\n\n    AtomicInteger expectedDocs = new AtomicInteger(1);\n    AtomicReference<String> failingCoreNodeName = new AtomicReference<>();\n    CollectionStateWatcher stateWatcher = createActiveReplicaSearcherWatcher(expectedDocs, failingCoreNodeName);\n\n    JettySolrRunner runner = cluster.getJettySolrRunner(0);\n    runner.stop();\n    \n    cluster.waitForJettyToStop(runner);\n    // check waitForState only after we are sure the node has shutdown and have forced an update to liveNodes\n    // ie: workaround SOLR-13490\n    cluster.getSolrClient().getZkStateReader().updateLiveNodes();\n    waitForState(\"jetty count:\" + cluster.getJettySolrRunners().size(), collectionName, clusterShape(1, 0));\n    \n    // restart\n    sleepTime.set(1000);\n    runner.start();\n    cluster.waitForAllNodes(30);\n    cluster.getSolrClient().getZkStateReader().registerCollectionStateWatcher(collectionName, stateWatcher);\n    cluster.waitForActiveCollection(collectionName, 1, 1);\n    assertNull(\"No replica should have been active without registering a searcher, found: \" + failingCoreNodeName.get(), failingCoreNodeName.get());\n    cluster.getSolrClient().getZkStateReader().removeCollectionStateWatcher(collectionName, stateWatcher);\n  }\n\n","sourceOld":"  @Test\n  public void testRepFactor1LeaderStartup() throws Exception {\n\n    CloudSolrClient solrClient = cluster.getSolrClient();\n\n    String collectionName = \"testRepFactor1LeaderStartup\";\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(collectionName, 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName());\n    create.process(solrClient);\n\n   cluster.waitForActiveCollection(collectionName, 1, 1);\n\n    solrClient.setDefaultCollection(collectionName);\n\n    String addListenerCommand = \"{\" +\n        \"'add-listener' : {'name':'newSearcherListener','event':'newSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"'add-listener' : {'name':'firstSearcherListener','event':'firstSearcher', 'class':'\" + SleepingSolrEventListener.class.getName() + \"'}\" +\n        \"}\";\n\n    ConfigRequest request = new ConfigRequest(addListenerCommand);\n    solrClient.request(request);\n\n    solrClient.add(new SolrInputDocument(\"id\", \"1\"));\n    solrClient.commit();\n\n    AtomicInteger expectedDocs = new AtomicInteger(1);\n    AtomicReference<String> failingCoreNodeName = new AtomicReference<>();\n    CollectionStateWatcher stateWatcher = createActiveReplicaSearcherWatcher(expectedDocs, failingCoreNodeName);\n\n    JettySolrRunner runner = cluster.getJettySolrRunner(0);\n    runner.stop();\n    waitForState(\"jetty count:\" + cluster.getJettySolrRunners().size(), collectionName, clusterShape(1, 0));\n    \n    cluster.waitForJettyToStop(runner);\n    \n    // restart\n    sleepTime.set(1000);\n    runner.start();\n    cluster.waitForAllNodes(30);\n    cluster.getSolrClient().getZkStateReader().registerCollectionStateWatcher(collectionName, stateWatcher);\n    cluster.waitForActiveCollection(collectionName, 1, 1);\n    assertNull(\"No replica should have been active without registering a searcher, found: \" + failingCoreNodeName.get(), failingCoreNodeName.get());\n    cluster.getSolrClient().getZkStateReader().removeCollectionStateWatcher(collectionName, stateWatcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e11a537632711f18086a2730feb888a041b5998":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4","751e212ed6f8a4a43b591e4d6cd4637d15a4219a"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e87998750c1408b8af3248e55cff794d51d37166"],"751e212ed6f8a4a43b591e4d6cd4637d15a4219a":["06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["751e212ed6f8a4a43b591e4d6cd4637d15a4219a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4":["e87998750c1408b8af3248e55cff794d51d37166"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e11a537632711f18086a2730feb888a041b5998"],"e87998750c1408b8af3248e55cff794d51d37166":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4","751e212ed6f8a4a43b591e4d6cd4637d15a4219a"]},"commit2Childs":{"7e11a537632711f18086a2730feb888a041b5998":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"751e212ed6f8a4a43b591e4d6cd4637d15a4219a":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7e11a537632711f18086a2730feb888a041b5998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","e87998750c1408b8af3248e55cff794d51d37166"],"06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","751e212ed6f8a4a43b591e4d6cd4637d15a4219a","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"e87998750c1408b8af3248e55cff794d51d37166":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","06a8aa646edc93b6f7e76ded12e41f1e6c04e7c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}