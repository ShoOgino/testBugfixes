{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#createNodeValues(String).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#createNodeValues(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#createNodeValues(String).mjava","sourceNew":"  /**\n   * Create simulated node values (metrics) for a node.\n   * @param nodeName node name (eg. '127.0.0.1:10000_solr'). If null then a new node name will be\n   *                 created using sequentially increasing port number.\n   * @return node values\n   */\n  public static Map<String, Object> createNodeValues(String nodeName) {\n    Map<String, Object> values = new HashMap<>();\n    String host, nodeId;\n    int port;\n    if (nodeName == null) {\n      host = \"127.0.0.1\";\n      port = nodeIdPort++;\n      nodeId = host + \":\" + port + \"_solr\";\n      values.put(\"ip_1\", \"127\");\n      values.put(\"ip_2\", \"0\");\n      values.put(\"ip_3\", \"0\");\n      values.put(\"ip_4\", \"1\");\n    } else {\n      String[] hostPortCtx = nodeName.split(\":\");\n      if (hostPortCtx.length != 2) {\n        throw new RuntimeException(\"Invalid nodeName \" + nodeName);\n      }\n      host = hostPortCtx[0];\n      String[] portCtx = hostPortCtx[1].split(\"_\");\n      if (portCtx.length != 2) {\n        throw new RuntimeException(\"Invalid port_context in nodeName \" + nodeName);\n      }\n      port = Integer.parseInt(portCtx[0]);\n      nodeId = host + \":\" + port + \"_\" + portCtx[1];\n      String[] ip = host.split(\"\\\\.\");\n      if (ip.length == 4) {\n        values.put(\"ip_1\", ip[0]);\n        values.put(\"ip_2\", ip[1]);\n        values.put(\"ip_3\", ip[2]);\n        values.put(\"ip_4\", ip[3]);\n      }\n    }\n    values.put(ImplicitSnitch.HOST, host);\n    values.put(ImplicitSnitch.PORT, port);\n    values.put(ImplicitSnitch.NODE, nodeId);\n    values.put(ImplicitSnitch.CORES, 0);\n    values.put(ImplicitSnitch.DISK, DEFAULT_FREE_DISK);\n    values.put(Variable.Type.TOTALDISK.tagName, DEFAULT_TOTAL_DISK);\n    values.put(ImplicitSnitch.SYSLOADAVG, 1.0);\n    values.put(ImplicitSnitch.HEAPUSAGE, 123450000);\n    values.put(\"sysprop.java.version\", System.getProperty(\"java.version\"));\n    values.put(\"sysprop.java.vendor\", System.getProperty(\"java.vendor\"));\n    // fake some metrics expected in tests\n    values.put(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\", 0);\n    values.put(\"metrics:solr.jvm:buffers.direct.Count\", 0);\n    return values;\n  }\n\n","sourceOld":"  /**\n   * Create simulated node values (metrics) for a node.\n   * @param nodeName node name (eg. '127.0.0.1:10000_solr'). If null then a new node name will be\n   *                 created using sequentially increasing port number.\n   * @return node values\n   */\n  public static Map<String, Object> createNodeValues(String nodeName) {\n    Map<String, Object> values = new HashMap<>();\n    String host, nodeId;\n    int port;\n    if (nodeName == null) {\n      host = \"127.0.0.1\";\n      port = nodeIdPort++;\n      nodeId = host + \":\" + port + \"_solr\";\n      values.put(\"ip_1\", \"127\");\n      values.put(\"ip_2\", \"0\");\n      values.put(\"ip_3\", \"0\");\n      values.put(\"ip_4\", \"1\");\n    } else {\n      String[] hostPortCtx = nodeName.split(\":\");\n      if (hostPortCtx.length != 2) {\n        throw new RuntimeException(\"Invalid nodeName \" + nodeName);\n      }\n      host = hostPortCtx[0];\n      String[] portCtx = hostPortCtx[1].split(\"_\");\n      if (portCtx.length != 2) {\n        throw new RuntimeException(\"Invalid port_context in nodeName \" + nodeName);\n      }\n      port = Integer.parseInt(portCtx[0]);\n      nodeId = host + \":\" + port + \"_\" + portCtx[1];\n      String[] ip = host.split(\"\\\\.\");\n      if (ip.length == 4) {\n        values.put(\"ip_1\", ip[0]);\n        values.put(\"ip_2\", ip[1]);\n        values.put(\"ip_3\", ip[2]);\n        values.put(\"ip_4\", ip[3]);\n      }\n    }\n    values.put(ImplicitSnitch.HOST, host);\n    values.put(ImplicitSnitch.PORT, port);\n    values.put(ImplicitSnitch.NODE, nodeId);\n    values.put(ImplicitSnitch.CORES, 0);\n    values.put(ImplicitSnitch.DISK, DEFAULT_FREE_DISK);\n    values.put(Variable.Type.TOTALDISK.tagName, DEFAULT_TOTAL_DISK);\n    values.put(ImplicitSnitch.SYSLOADAVG, 1.0);\n    values.put(ImplicitSnitch.HEAPUSAGE, 123450000);\n    values.put(\"sysprop.java.version\", System.getProperty(\"java.version\"));\n    values.put(\"sysprop.java.vendor\", System.getProperty(\"java.vendor\"));\n    // fake some metrics expected in tests\n    values.put(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\", 0);\n    values.put(\"metrics:solr.jvm:buffers.direct.Count\", 0);\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#createNodeValues(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create simulated node values (metrics) for a node.\n   * @param nodeName node name (eg. '127.0.0.1:10000_solr'). If null then a new node name will be\n   *                 created using sequentially increasing port number.\n   * @return node values\n   */\n  public static Map<String, Object> createNodeValues(String nodeName) {\n    Map<String, Object> values = new HashMap<>();\n    String host, nodeId;\n    int port;\n    if (nodeName == null) {\n      host = \"127.0.0.1\";\n      port = nodeIdPort++;\n      nodeId = host + \":\" + port + \"_solr\";\n      values.put(\"ip_1\", \"127\");\n      values.put(\"ip_2\", \"0\");\n      values.put(\"ip_3\", \"0\");\n      values.put(\"ip_4\", \"1\");\n    } else {\n      String[] hostPortCtx = nodeName.split(\":\");\n      if (hostPortCtx.length != 2) {\n        throw new RuntimeException(\"Invalid nodeName \" + nodeName);\n      }\n      host = hostPortCtx[0];\n      String[] portCtx = hostPortCtx[1].split(\"_\");\n      if (portCtx.length != 2) {\n        throw new RuntimeException(\"Invalid port_context in nodeName \" + nodeName);\n      }\n      port = Integer.parseInt(portCtx[0]);\n      nodeId = host + \":\" + port + \"_\" + portCtx[1];\n      String[] ip = host.split(\"\\\\.\");\n      if (ip.length == 4) {\n        values.put(\"ip_1\", ip[0]);\n        values.put(\"ip_2\", ip[1]);\n        values.put(\"ip_3\", ip[2]);\n        values.put(\"ip_4\", ip[3]);\n      }\n    }\n    values.put(ImplicitSnitch.HOST, host);\n    values.put(ImplicitSnitch.PORT, port);\n    values.put(ImplicitSnitch.NODE, nodeId);\n    values.put(ImplicitSnitch.CORES, 0);\n    values.put(ImplicitSnitch.DISK, DEFAULT_FREE_DISK);\n    values.put(Variable.Type.TOTALDISK.tagName, DEFAULT_TOTAL_DISK);\n    values.put(ImplicitSnitch.SYSLOADAVG, 1.0);\n    values.put(ImplicitSnitch.HEAPUSAGE, 123450000);\n    values.put(\"sysprop.java.version\", System.getProperty(\"java.version\"));\n    values.put(\"sysprop.java.vendor\", System.getProperty(\"java.vendor\"));\n    // fake some metrics expected in tests\n    values.put(\"metrics:solr.node:ADMIN./admin/authorization.clientErrors:count\", 0);\n    values.put(\"metrics:solr.jvm:buffers.direct.Count\", 0);\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}