{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/Lucene43CompoundWordTokenFilterBase#Lucene43CompoundWordTokenFilterBase(TokenStream,CharArraySet,int,int,int,boolean).mjava","commits":[{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":2,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/Lucene43CompoundWordTokenFilterBase#Lucene43CompoundWordTokenFilterBase(TokenStream,CharArraySet,int,int,int,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","sourceNew":"  protected Lucene43CompoundWordTokenFilterBase(TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    this.tokens=new LinkedList<>();\n    if (minWordSize < 0) {\n      throw new IllegalArgumentException(\"minWordSize cannot be negative\");\n    }\n    this.minWordSize=minWordSize;\n    if (minSubwordSize < 0) {\n      throw new IllegalArgumentException(\"minSubwordSize cannot be negative\");\n    }\n    this.minSubwordSize=minSubwordSize;\n    if (maxSubwordSize < 0) {\n      throw new IllegalArgumentException(\"maxSubwordSize cannot be negative\");\n    }\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    this.matchVersion = matchVersion;\n    this.tokens=new LinkedList<>();\n    if (minWordSize < 0) {\n      throw new IllegalArgumentException(\"minWordSize cannot be negative\");\n    }\n    this.minWordSize=minWordSize;\n    if (minSubwordSize < 0) {\n      throw new IllegalArgumentException(\"minSubwordSize cannot be negative\");\n    }\n    this.minSubwordSize=minSubwordSize;\n    if (maxSubwordSize < 0) {\n      throw new IllegalArgumentException(\"maxSubwordSize cannot be negative\");\n    }\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/Lucene43CompoundWordTokenFilterBase#Lucene43CompoundWordTokenFilterBase(TokenStream,CharArraySet,int,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  protected Lucene43CompoundWordTokenFilterBase(TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    this.tokens=new LinkedList<>();\n    if (minWordSize < 0) {\n      throw new IllegalArgumentException(\"minWordSize cannot be negative\");\n    }\n    this.minWordSize=minWordSize;\n    if (minSubwordSize < 0) {\n      throw new IllegalArgumentException(\"minSubwordSize cannot be negative\");\n    }\n    this.minSubwordSize=minSubwordSize;\n    if (maxSubwordSize < 0) {\n      throw new IllegalArgumentException(\"maxSubwordSize cannot be negative\");\n    }\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71387d8cb6923eb831b17a8b734608ba2e21c653":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"379db3ad24c4f0214f30a122265a6d6be003a99d":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}