{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","commits":[{"id":"4ee5a5186e7187cd42c6f7ff64b6e7206a780325","date":1372914261,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"/dev/null","sourceNew":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.currentTimeMillis();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.currentTimeMillis() - time >= timeout) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b1197d6f54676973038ad402280d80a139dfd27b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"/dev/null","sourceNew":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.currentTimeMillis();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.currentTimeMillis() - time >= timeout) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd5bc858b8426d40bbe90b94120ead37c77d7954","date":1393812525,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.currentTimeMillis();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.currentTimeMillis() - time >= timeout) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","date":1394784078,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n \n       String asyncId = m.getStr(ASYNC);\n \n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n \n       NamedList<String> r = new NamedList<>();\n \n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n \n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(ZkStateReader.toJSON(m));\n \n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n \n       rsp.getValues().addAll(response.getResponse());\n \n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["b1197d6f54676973038ad402280d80a139dfd27b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74fe755c1cb9c998d933b455c573e86e9ef5d2aa","date":1401724046,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n \n       String asyncId = m.getStr(ASYNC);\n \n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n \n       NamedList<String> r = new NamedList<>();\n \n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n \n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(ZkStateReader.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n \n       rsp.getValues().addAll(response.getResponse());\n \n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n \n       String asyncId = m.getStr(ASYNC);\n \n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n \n       NamedList<String> r = new NamedList<>();\n \n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n \n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(ZkStateReader.toJSON(m));\n \n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n \n       rsp.getValues().addAll(response.getResponse());\n \n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(ZkStateReader.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n\n       rsp.getValues().addAll(response.getResponse());\n\n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n \n       String asyncId = m.getStr(ASYNC);\n \n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n \n       NamedList<String> r = new NamedList<>();\n \n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n \n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(ZkStateReader.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n \n       rsp.getValues().addAll(response.getResponse());\n \n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n \n       String asyncId = m.getStr(ASYNC);\n \n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n \n       NamedList<String> r = new NamedList<>();\n \n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n \n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(ZkStateReader.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n \n       rsp.getValues().addAll(response.getResponse());\n \n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(ZkStateReader.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n\n       rsp.getValues().addAll(response.getResponse());\n\n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5455c7b3fed6c1671990a44c19071cb0488c2c25","date":1413557414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n \n       String asyncId = m.getStr(ASYNC);\n \n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n \n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n \n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(ZkStateReader.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n \n       rsp.getValues().addAll(response.getResponse());\n \n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n \n       String asyncId = m.getStr(ASYNC);\n \n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n \n       NamedList<String> r = new NamedList<>();\n \n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n \n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(ZkStateReader.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n \n       rsp.getValues().addAll(response.getResponse());\n \n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n \n       String asyncId = m.getStr(ASYNC);\n \n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n \n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n \n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(ZkStateReader.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n \n       rsp.getValues().addAll(response.getResponse());\n \n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n \n       String asyncId = m.getStr(ASYNC);\n \n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n \n       NamedList<String> r = new NamedList<>();\n \n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n \n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(ZkStateReader.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n \n       rsp.getValues().addAll(response.getResponse());\n \n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ebd3a557326ef3eab85b73a8cff781f7d801248","date":1431620752,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(ZkStateReader.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n\n       rsp.getValues().addAll(response.getResponse());\n\n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n \n       String asyncId = m.getStr(ASYNC);\n \n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n \n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n \n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(ZkStateReader.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n \n       rsp.getValues().addAll(response.getResponse());\n \n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n\n       rsp.getValues().addAll(response.getResponse());\n\n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(ZkStateReader.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n\n       rsp.getValues().addAll(response.getResponse());\n\n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(ZkStateReader.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n\n       rsp.getValues().addAll(response.getResponse());\n\n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n\n       rsp.getValues().addAll(response.getResponse());\n\n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unkown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b1197d6f54676973038ad402280d80a139dfd27b","date":1455734228,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  private SolrResponse handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n    if (m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n\n       rsp.getValues().addAll(response.getResponse());\n\n       return response;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n      return response;\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private void handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n     if(m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n\n       rsp.getValues().addAll(response.getResponse());\n\n       return;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","bugFix":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af3e10d8a1fbcc5c79b22f7477e79de467dd326c","date":1515178406,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  //TODO rename to submitToOverseerRPC\n  public SolrResponse handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    if (!m.containsKey(QUEUE_OPERATION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n\n       rsp.getValues().addAll(response.getResponse());\n\n       return response;\n     }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n      return response;\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private SolrResponse handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n    if (m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n\n       rsp.getValues().addAll(response.getResponse());\n\n       return response;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n      return response;\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  //TODO rename to submitToOverseerRPC\n  public SolrResponse handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    if (!m.containsKey(QUEUE_OPERATION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n\n       rsp.getValues().addAll(response.getResponse());\n\n       return response;\n     }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n      return response;\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  private SolrResponse handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    long time = System.nanoTime();\n\n    if (m.containsKey(ASYNC) && m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n\n       rsp.getValues().addAll(response.getResponse());\n\n       return response;\n     }\n\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n      return response;\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cbd743a4843f513f793670e3ab0e272bf824faf","date":1518149529,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#sendToOCPQueue(ZkNodeProps,long).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#handleResponse(String,ZkNodeProps,SolrQueryResponse,long).mjava","sourceNew":"  public SolrResponse sendToOCPQueue(ZkNodeProps m, long timeout) throws KeeperException, InterruptedException {\n    String operation = m.getStr(QUEUE_OPERATION);\n    if (operation == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n\n      return new OverseerSolrResponse(r);\n    }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      return SolrResponse.deserialize(event.getBytes());\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","sourceOld":"  //TODO rename to submitToOverseerRPC\n  public SolrResponse handleResponse(String operation, ZkNodeProps m,\n      SolrQueryResponse rsp, long timeout) throws KeeperException, InterruptedException {\n    if (!m.containsKey(QUEUE_OPERATION)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"missing key \" + QUEUE_OPERATION);\n    }\n    if (m.get(ASYNC) != null) {\n\n       String asyncId = m.getStr(ASYNC);\n\n       if(asyncId.equals(\"-1\")) {\n         throw new SolrException(ErrorCode.BAD_REQUEST, \"requestid can not be -1. It is reserved for cleanup purposes.\");\n       }\n\n       NamedList<String> r = new NamedList<>();\n\n       if (coreContainer.getZkController().getOverseerCompletedMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerFailureMap().contains(asyncId) ||\n           coreContainer.getZkController().getOverseerRunningMap().contains(asyncId) ||\n           overseerCollectionQueueContains(asyncId)) {\n         r.add(\"error\", \"Task with the same requestid already exists.\");\n\n       } else {\n         coreContainer.getZkController().getOverseerCollectionQueue()\n             .offer(Utils.toJSON(m));\n       }\n       r.add(CoreAdminParams.REQUESTID, (String) m.get(ASYNC));\n       SolrResponse response = new OverseerSolrResponse(r);\n\n       rsp.getValues().addAll(response.getResponse());\n\n       return response;\n     }\n\n    long time = System.nanoTime();\n    QueueEvent event = coreContainer.getZkController()\n        .getOverseerCollectionQueue()\n        .offer(Utils.toJSON(m), timeout);\n    if (event.getBytes() != null) {\n      SolrResponse response = SolrResponse.deserialize(event.getBytes());\n      rsp.getValues().addAll(response.getResponse());\n      SimpleOrderedMap exp = (SimpleOrderedMap) response.getResponse().get(\"exception\");\n      if (exp != null) {\n        Integer code = (Integer) exp.get(\"rspCode\");\n        rsp.setException(new SolrException(code != null && code != -1 ? ErrorCode.getErrorCode(code) : ErrorCode.SERVER_ERROR, (String)exp.get(\"msg\")));\n      }\n      return response;\n    } else {\n      if (System.nanoTime() - time >= TimeUnit.NANOSECONDS.convert(timeout, TimeUnit.MILLISECONDS)) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection time out:\" + timeout / 1000 + \"s\");\n      } else if (event.getWatchedEvent() != null) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection error [Watcher fired on path: \"\n            + event.getWatchedEvent().getPath() + \" state: \"\n            + event.getWatchedEvent().getState() + \" type \"\n            + event.getWatchedEvent().getType() + \"]\");\n      } else {\n        throw new SolrException(ErrorCode.SERVER_ERROR, operation\n            + \" the collection unknown case\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["b1197d6f54676973038ad402280d80a139dfd27b","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["9ebd3a557326ef3eab85b73a8cff781f7d801248"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["fd5bc858b8426d40bbe90b94120ead37c77d7954"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["5455c7b3fed6c1671990a44c19071cb0488c2c25"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"b1197d6f54676973038ad402280d80a139dfd27b":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["74fe755c1cb9c998d933b455c573e86e9ef5d2aa"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"3cbd743a4843f513f793670e3ab0e272bf824faf":["b94236357aaa22b76c10629851fe4e376e0cea82"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["b1197d6f54676973038ad402280d80a139dfd27b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74fe755c1cb9c998d933b455c573e86e9ef5d2aa":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cbd743a4843f513f793670e3ab0e272bf824faf"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["b1197d6f54676973038ad402280d80a139dfd27b"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["5455c7b3fed6c1671990a44c19071cb0488c2c25","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["74fe755c1cb9c998d933b455c573e86e9ef5d2aa"],"9ebd3a557326ef3eab85b73a8cff781f7d801248":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["9ebd3a557326ef3eab85b73a8cff781f7d801248","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"fd5bc858b8426d40bbe90b94120ead37c77d7954":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"b1197d6f54676973038ad402280d80a139dfd27b":["b94236357aaa22b76c10629851fe4e376e0cea82","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"3cbd743a4843f513f793670e3ab0e272bf824faf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","4ee5a5186e7187cd42c6f7ff64b6e7206a780325"],"4ee5a5186e7187cd42c6f7ff64b6e7206a780325":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fd5bc858b8426d40bbe90b94120ead37c77d7954"],"74fe755c1cb9c998d933b455c573e86e9ef5d2aa":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}