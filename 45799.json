{"path":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","commits":[{"id":"2148dc6e2b0f2117ae887c0397378d86567916b0","date":1368393817,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertTrue(q instanceof TermQuery);\n\n    q = parse(\"price:[0 TO 10]\");\n    assertTrue(q instanceof NumericRangeQuery);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b46574f1283bd72a3f5d401f2e93b1d24c905c73","date":1369742953,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","sourceNew":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertTrue(q instanceof TermQuery);\n\n    q = parse(\"foo^3.0\");\n    assertTrue(q instanceof TermQuery);\n\n    q = parse(\"price:[0 TO 10]\");\n    assertTrue(q instanceof NumericRangeQuery);\n  }\n\n","sourceOld":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertTrue(q instanceof TermQuery);\n\n    q = parse(\"price:[0 TO 10]\");\n    assertTrue(q instanceof NumericRangeQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","sourceNew":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertEquals(new TermQuery(new Term(\"text\", \"foo\")), q);\n\n    q = parse(\"foo^3.0\");\n    assertEquals(new BoostQuery(new TermQuery(new Term(\"text\", \"foo\")), 3f), q);\n\n    q = parse(\"price:[0 TO 10]\");\n    assertTrue(q instanceof NumericRangeQuery);\n  }\n\n","sourceOld":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertTrue(q instanceof TermQuery);\n\n    q = parse(\"foo^3.0\");\n    assertTrue(q instanceof TermQuery);\n\n    q = parse(\"price:[0 TO 10]\");\n    assertTrue(q instanceof NumericRangeQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","sourceNew":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertEquals(new TermQuery(new Term(\"text\", \"foo\")), q);\n\n    q = parse(\"foo^3.0\");\n    assertEquals(new BoostQuery(new TermQuery(new Term(\"text\", \"foo\")), 3f), q);\n\n    q = parse(\"price:[0 TO 10]\");\n    assertTrue(q instanceof LegacyNumericRangeQuery);\n  }\n\n","sourceOld":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertEquals(new TermQuery(new Term(\"text\", \"foo\")), q);\n\n    q = parse(\"foo^3.0\");\n    assertEquals(new BoostQuery(new TermQuery(new Term(\"text\", \"foo\")), 3f), q);\n\n    q = parse(\"price:[0 TO 10]\");\n    assertTrue(q instanceof NumericRangeQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46dc9ac8b3e748407baaef82453138ff3974480c","date":1484789241,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","sourceNew":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertEquals(new TermQuery(new Term(\"text\", \"foo\")), q);\n\n    q = parse(\"foo^3.0\");\n    assertEquals(new BoostQuery(new TermQuery(new Term(\"text\", \"foo\")), 3f), q);\n\n    q = parse(\"price:[0 TO 10]\");\n    assertTrue(q instanceof LegacyNumericRangeQuery || q instanceof PointRangeQuery);\n  }\n\n","sourceOld":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertEquals(new TermQuery(new Term(\"text\", \"foo\")), q);\n\n    q = parse(\"foo^3.0\");\n    assertEquals(new BoostQuery(new TermQuery(new Term(\"text\", \"foo\")), 3f), q);\n\n    q = parse(\"price:[0 TO 10]\");\n    assertTrue(q instanceof LegacyNumericRangeQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","sourceNew":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertEquals(new TermQuery(new Term(\"text\", \"foo\")), q);\n\n    q = parse(\"foo^3.0\");\n    assertEquals(new BoostQuery(new TermQuery(new Term(\"text\", \"foo\")), 3f), q);\n\n    q = parse(\"price:[0 TO 10]\");\n    assertTrue(q instanceof LegacyNumericRangeQuery || q instanceof PointRangeQuery);\n  }\n\n","sourceOld":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertEquals(new TermQuery(new Term(\"text\", \"foo\")), q);\n\n    q = parse(\"foo^3.0\");\n    assertEquals(new BoostQuery(new TermQuery(new Term(\"text\", \"foo\")), 3f), q);\n\n    q = parse(\"price:[0 TO 10]\");\n    assertTrue(q instanceof LegacyNumericRangeQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19284d685ce334cd95ff0ace2793842f84bf7383","date":1487788272,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","sourceNew":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertEquals(new TermQuery(new Term(\"text\", \"foo\")), q);\n\n    q = parse(\"foo^3.0\");\n    assertEquals(new BoostQuery(new TermQuery(new Term(\"text\", \"foo\")), 3f), q);\n\n    q = parse(\"price:[0 TO 10]\");\n    assertTrue(q instanceof LegacyNumericRangeQuery \n        || (q instanceof IndexOrDocValuesQuery && ((IndexOrDocValuesQuery)q).getIndexQuery() instanceof PointRangeQuery));\n  }\n\n","sourceOld":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertEquals(new TermQuery(new Term(\"text\", \"foo\")), q);\n\n    q = parse(\"foo^3.0\");\n    assertEquals(new BoostQuery(new TermQuery(new Term(\"text\", \"foo\")), 3f), q);\n\n    q = parse(\"price:[0 TO 10]\");\n    assertTrue(q instanceof LegacyNumericRangeQuery || q instanceof PointRangeQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"351efe6fdecf9af62134d37ec2582e4a0331a4dc","date":1498149096,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","sourceNew":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertEquals(new TermQuery(new Term(\"text\", \"foo\")), q);\n\n    q = parse(\"foo^3.0\");\n    assertEquals(new BoostQuery(new TermQuery(new Term(\"text\", \"foo\")), 3f), q);\n\n    q = parse(\"price:[0 TO 10]\");\n    Class expected = LegacyNumericRangeQuery.class;\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) {\n      expected = PointRangeQuery.class;\n      if (Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP)) {\n        expected = IndexOrDocValuesQuery.class;\n      }\n    }\n    assertTrue(expected + \" vs actual: \" + q.getClass(), expected.isInstance(q));\n  }\n\n","sourceOld":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertEquals(new TermQuery(new Term(\"text\", \"foo\")), q);\n\n    q = parse(\"foo^3.0\");\n    assertEquals(new BoostQuery(new TermQuery(new Term(\"text\", \"foo\")), 3f), q);\n\n    q = parse(\"price:[0 TO 10]\");\n    assertTrue(q instanceof LegacyNumericRangeQuery \n        || (q instanceof IndexOrDocValuesQuery && ((IndexOrDocValuesQuery)q).getIndexQuery() instanceof PointRangeQuery));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","sourceNew":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertEquals(new TermQuery(new Term(\"text\", \"foo\")), q);\n\n    q = parse(\"foo^3.0\");\n    assertEquals(new BoostQuery(new TermQuery(new Term(\"text\", \"foo\")), 3f), q);\n\n    q = parse(\"price:[0 TO 10]\");\n    Class expected = LegacyNumericRangeQuery.class;\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) {\n      expected = PointRangeQuery.class;\n      if (Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP)) {\n        expected = IndexOrDocValuesQuery.class;\n      }\n    }\n    assertTrue(expected + \" vs actual: \" + q.getClass(), expected.isInstance(q));\n  }\n\n","sourceOld":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertEquals(new TermQuery(new Term(\"text\", \"foo\")), q);\n\n    q = parse(\"foo^3.0\");\n    assertEquals(new BoostQuery(new TermQuery(new Term(\"text\", \"foo\")), 3f), q);\n\n    q = parse(\"price:[0 TO 10]\");\n    assertTrue(q instanceof LegacyNumericRangeQuery \n        || (q instanceof IndexOrDocValuesQuery && ((IndexOrDocValuesQuery)q).getIndexQuery() instanceof PointRangeQuery));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","sourceNew":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertEquals(new TermQuery(new Term(\"text\", \"foo\")), q);\n\n    q = parse(\"foo^3.0\");\n    assertEquals(new BoostQuery(new TermQuery(new Term(\"text\", \"foo\")), 3f), q);\n\n    q = parse(\"price:[0 TO 10]\");\n    Class expected = LegacyNumericRangeQuery.class;\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) {\n      expected = PointRangeQuery.class;\n      if (Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP)) {\n        expected = IndexOrDocValuesQuery.class;\n      }\n    }\n    assertTrue(expected + \" vs actual: \" + q.getClass(), expected.isInstance(q));\n  }\n\n","sourceOld":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertEquals(new TermQuery(new Term(\"text\", \"foo\")), q);\n\n    q = parse(\"foo^3.0\");\n    assertEquals(new BoostQuery(new TermQuery(new Term(\"text\", \"foo\")), 3f), q);\n\n    q = parse(\"price:[0 TO 10]\");\n    assertTrue(q instanceof LegacyNumericRangeQuery \n        || (q instanceof IndexOrDocValuesQuery && ((IndexOrDocValuesQuery)q).getIndexQuery() instanceof PointRangeQuery));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestMaxScoreQueryParser#testFallbackToLucene().mjava","sourceNew":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertEquals(new TermQuery(new Term(\"text\", \"foo\")), q);\n\n    q = parse(\"foo^3.0\");\n    assertEquals(new BoostQuery(new TermQuery(new Term(\"text\", \"foo\")), 3f), q);\n\n    q = parse(\"price:[0 TO 10]\");\n    @SuppressWarnings({\"rawtypes\"})\n    Class expected = LegacyNumericRangeQuery.class;\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) {\n      expected = PointRangeQuery.class;\n      if (Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP)) {\n        expected = IndexOrDocValuesQuery.class;\n      }\n    }\n    assertTrue(expected + \" vs actual: \" + q.getClass(), expected.isInstance(q));\n  }\n\n","sourceOld":"  @Test\n  public void testFallbackToLucene() {\n    q = parse(\"foo\");\n    assertEquals(new TermQuery(new Term(\"text\", \"foo\")), q);\n\n    q = parse(\"foo^3.0\");\n    assertEquals(new BoostQuery(new TermQuery(new Term(\"text\", \"foo\")), 3f), q);\n\n    q = parse(\"price:[0 TO 10]\");\n    Class expected = LegacyNumericRangeQuery.class;\n    if (Boolean.getBoolean(NUMERIC_POINTS_SYSPROP)) {\n      expected = PointRangeQuery.class;\n      if (Boolean.getBoolean(NUMERIC_DOCVALUES_SYSPROP)) {\n        expected = IndexOrDocValuesQuery.class;\n      }\n    }\n    assertTrue(expected + \" vs actual: \" + q.getClass(), expected.isInstance(q));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"19284d685ce334cd95ff0ace2793842f84bf7383":["46dc9ac8b3e748407baaef82453138ff3974480c"],"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["19284d685ce334cd95ff0ace2793842f84bf7383"],"b46574f1283bd72a3f5d401f2e93b1d24c905c73":["2148dc6e2b0f2117ae887c0397378d86567916b0"],"46dc9ac8b3e748407baaef82453138ff3974480c":["770342641f7b505eaa8dccdc666158bff2419109"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["b46574f1283bd72a3f5d401f2e93b1d24c905c73"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["19284d685ce334cd95ff0ace2793842f84bf7383","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"770342641f7b505eaa8dccdc666158bff2419109":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"28288370235ed02234a64753cdbf0c6ec096304a":["19284d685ce334cd95ff0ace2793842f84bf7383","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["770342641f7b505eaa8dccdc666158bff2419109","46dc9ac8b3e748407baaef82453138ff3974480c"],"e98520789adb1d5ad05afb4956eca0944a929688":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2148dc6e2b0f2117ae887c0397378d86567916b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"]},"commit2Childs":{"19284d685ce334cd95ff0ace2793842f84bf7383":["351efe6fdecf9af62134d37ec2582e4a0331a4dc","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b46574f1283bd72a3f5d401f2e93b1d24c905c73":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"46dc9ac8b3e748407baaef82453138ff3974480c":["19284d685ce334cd95ff0ace2793842f84bf7383","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["770342641f7b505eaa8dccdc666158bff2419109"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"770342641f7b505eaa8dccdc666158bff2419109":["46dc9ac8b3e748407baaef82453138ff3974480c","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"28288370235ed02234a64753cdbf0c6ec096304a":["e98520789adb1d5ad05afb4956eca0944a929688"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2148dc6e2b0f2117ae887c0397378d86567916b0"],"2148dc6e2b0f2117ae887c0397378d86567916b0":["b46574f1283bd72a3f5d401f2e93b1d24c905c73"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}