{"path":"lucene/core/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,Bits).mjava","commits":[{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scoreDocsInOrder\n   *          specifies whether in-order scoring of documents is required. Note\n   *          that if set to false (i.e., out-of-order scoring is required),\n   *          this method can return whatever scoring mode it supports, as every\n   *          in-order scorer is also an out-of-order one. However, an\n   *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n   *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n   *          request an in-order scorer if use of these methods is required.\n   * @param topScorer\n   *          if true, {@link Scorer#score(Collector)} will be called; if false,\n   *          {@link Scorer#nextDoc()} and/or {@link Scorer#advance(int)} will\n   *          be called.\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *          \n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public abstract Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scoreDocsInOrder\n   *          specifies whether in-order scoring of documents is required. Note\n   *          that if set to false (i.e., out-of-order scoring is required),\n   *          this method can return whatever scoring mode it supports, as every\n   *          in-order scorer is also an out-of-order one. However, an\n   *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n   *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n   *          request an in-order scorer if use of these methods is required.\n   * @param topScorer\n   *          if true, {@link Scorer#score(Collector)} will be called; if false,\n   *          {@link Scorer#nextDoc()} and/or {@link Scorer#advance(int)} will\n   *          be called.\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *          \n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public abstract Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n      boolean topScorer, Bits acceptDocs) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"551db74111df22d4f6684319479c9f3d5f7ddf23","date":1394018258,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,Bits).mjava","sourceNew":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *          \n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public abstract Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scoreDocsInOrder\n   *          specifies whether in-order scoring of documents is required. Note\n   *          that if set to false (i.e., out-of-order scoring is required),\n   *          this method can return whatever scoring mode it supports, as every\n   *          in-order scorer is also an out-of-order one. However, an\n   *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n   *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n   *          request an in-order scorer if use of these methods is required.\n   * @param topScorer\n   *          if true, {@link Scorer#score(Collector)} will be called; if false,\n   *          {@link Scorer#nextDoc()} and/or {@link Scorer#advance(int)} will\n   *          be called.\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *          \n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public abstract Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *          \n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public abstract Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException;\n\n","sourceOld":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param scoreDocsInOrder\n   *          specifies whether in-order scoring of documents is required. Note\n   *          that if set to false (i.e., out-of-order scoring is required),\n   *          this method can return whatever scoring mode it supports, as every\n   *          in-order scorer is also an out-of-order one. However, an\n   *          out-of-order scorer may not support {@link Scorer#nextDoc()}\n   *          and/or {@link Scorer#advance(int)}, therefore it is recommended to\n   *          request an in-order scorer if use of these methods is required.\n   * @param topScorer\n   *          if true, {@link Scorer#score(Collector)} will be called; if false,\n   *          {@link Scorer#nextDoc()} and/or {@link Scorer#advance(int)} will\n   *          be called.\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *          \n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public abstract Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n      boolean topScorer, Bits acceptDocs) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/Weight#scorer(AtomicReaderContext,Bits).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a {@link Scorer} which scores documents in/out-of order according\n   * to <code>scoreDocsInOrder</code>.\n   * <p>\n   * <b>NOTE:</b> even if <code>scoreDocsInOrder</code> is false, it is\n   * recommended to check whether the returned <code>Scorer</code> indeed scores\n   * documents out of order (i.e., call {@link #scoresDocsOutOfOrder()}), as\n   * some <code>Scorer</code> implementations will always return documents\n   * in-order.<br>\n   * <b>NOTE:</b> null can be returned if no documents will be scored by this\n   * query.\n   * \n   * @param context\n   *          the {@link AtomicReaderContext} for which to return the {@link Scorer}.\n   * @param acceptDocs\n   *          Bits that represent the allowable docs to match (typically deleted docs\n   *          but possibly filtering other documents)\n   *          \n   * @return a {@link Scorer} which scores documents in/out-of order.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public abstract Scorer scorer(AtomicReaderContext context, Bits acceptDocs) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"551db74111df22d4f6684319479c9f3d5f7ddf23":["2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","551db74111df22d4f6684319479c9f3d5f7ddf23"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["551db74111df22d4f6684319479c9f3d5f7ddf23"],"551db74111df22d4f6684319479c9f3d5f7ddf23":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}