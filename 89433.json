{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/PointReader#split(long,LongBitSet,PointWriter,PointWriter,boolean).mjava","commits":[{"id":"9fd704a49b365ee23de059c76ac9050beb643d0c","date":1457873731,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/PointReader#split(long,LongBitSet,PointWriter,PointWriter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Splits this reader into left and right partitions */\n  public long split(long count, LongBitSet rightTree, PointWriter left, PointWriter right, boolean doClearBits) throws IOException {\n\n    // Partition this source according to how the splitDim split the values:\n    long rightCount = 0;\n    for (long i=0;i<count;i++) {\n      boolean result = next();\n      assert result;\n      byte[] packedValue = packedValue();\n      long ord = ord();\n      int docID = docID();\n      if (rightTree.get(ord)) {\n        right.append(packedValue, ord, docID);\n        rightCount++;\n        if (doClearBits) {\n          rightTree.clear(ord);\n        }\n      } else {\n        left.append(packedValue, ord, docID);\n      }\n    }\n\n    return rightCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":4,"author":"iverase","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/PointReader#split(long,LongBitSet,PointWriter,PointWriter,boolean).mjava","sourceNew":null,"sourceOld":"  /** Splits this reader into left and right partitions */\n  public long split(long count, LongBitSet rightTree, PointWriter left, PointWriter right, boolean doClearBits) throws IOException {\n\n    // Partition this source according to how the splitDim split the values:\n    long rightCount = 0;\n    for (long i=0;i<count;i++) {\n      boolean result = next();\n      assert result;\n      byte[] packedValue = packedValue();\n      long ord = ord();\n      int docID = docID();\n      if (rightTree.get(ord)) {\n        right.append(packedValue, ord, docID);\n        rightCount++;\n        if (doClearBits) {\n          rightTree.clear(ord);\n        }\n      } else {\n        left.append(packedValue, ord, docID);\n      }\n    }\n\n    return rightCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["9fd704a49b365ee23de059c76ac9050beb643d0c"],"9fd704a49b365ee23de059c76ac9050beb643d0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fd704a49b365ee23de059c76ac9050beb643d0c"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fd704a49b365ee23de059c76ac9050beb643d0c":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}