{"path":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\");\n        IndexInput e2 = cr.openInput(\"f3\");\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\");\n        IndexInput e2 = cr.openInput(\"f3\");\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\", IOContext.DEFAULT);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", IOContext.DEFAULT);\n        IndexInput e2 = cr.openInput(\"f3\", IOContext.DEFAULT);\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\");\n        IndexInput e2 = cr.openInput(\"f3\");\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0aab6e810b4b0d3743d6a048be0602801f4b3920","date":1308671625,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = dir.openCompoundInput(\"f.comp\", 1024);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\");\n        IndexInput e2 = cr.openInput(\"f3\");\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\");\n        IndexInput e2 = cr.openInput(\"f3\");\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = dir.openCompoundInput(\"f.comp\", 1024);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\");\n        IndexInput e2 = cr.openInput(\"f3\");\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\");\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\");\n        IndexInput e2 = cr.openInput(\"f3\");\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\", newIOContext(random));\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random));\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\", IOContext.DEFAULT);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", IOContext.DEFAULT);\n        IndexInput e2 = cr.openInput(\"f3\", IOContext.DEFAULT);\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = dir.openCompoundInput(\"f.comp\", newIOContext(random));\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random));\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileReader cr = new CompoundFileReader(dir, \"f.comp\", newIOContext(random));\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random));\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = dir.openCompoundInput(\"f.comp\", newIOContext(random));\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random));\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = dir.openCompoundInput(\"f.comp\", 1024);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\");\n        IndexInput e2 = cr.openInput(\"f3\");\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = dir.openCompoundInput(\"f.comp\", newIOContext(random));\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random));\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = dir.openCompoundInput(\"f.comp\", 1024);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\");\n        IndexInput e2 = cr.openInput(\"f3\");\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67aadace85f701c87a4e0721eedcda25d8415a70","date":1314201925,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random), false);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random));\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = dir.openCompoundInput(\"f.comp\", newIOContext(random));\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random));\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#testRandomAccessClones().mjava","sourceNew":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random), false);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random));\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","sourceOld":"    /** This test opens two files from a compound stream and verifies that\n     *  their file positions are independent of each other.\n     */\n    public void testRandomAccessClones() throws IOException {\n        setUp_2();\n        CompoundFileDirectory cr = new CompoundFileDirectory(dir, \"f.comp\", newIOContext(random), false);\n\n        // Open two files\n        IndexInput e1 = cr.openInput(\"f11\", newIOContext(random));\n        IndexInput e2 = cr.openInput(\"f3\", newIOContext(random));\n\n        IndexInput a1 = (IndexInput) e1.clone();\n        IndexInput a2 = (IndexInput) e2.clone();\n\n        // Seek the first pair\n        e1.seek(100);\n        a1.seek(100);\n        assertEquals(100, e1.getFilePointer());\n        assertEquals(100, a1.getFilePointer());\n        byte be1 = e1.readByte();\n        byte ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now seek the second pair\n        e2.seek(1027);\n        a2.seek(1027);\n        assertEquals(1027, e2.getFilePointer());\n        assertEquals(1027, a2.getFilePointer());\n        byte be2 = e2.readByte();\n        byte ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Now make sure the first one didn't move\n        assertEquals(101, e1.getFilePointer());\n        assertEquals(101, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now more the first one again, past the buffer length\n        e1.seek(1910);\n        a1.seek(1910);\n        assertEquals(1910, e1.getFilePointer());\n        assertEquals(1910, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        // Now make sure the second set didn't move\n        assertEquals(1028, e2.getFilePointer());\n        assertEquals(1028, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Move the second set back, again cross the buffer size\n        e2.seek(17);\n        a2.seek(17);\n        assertEquals(17, e2.getFilePointer());\n        assertEquals(17, a2.getFilePointer());\n        be2 = e2.readByte();\n        ba2 = a2.readByte();\n        assertEquals(be2, ba2);\n\n        // Finally, make sure the first set didn't move\n        // Now make sure the first one didn't move\n        assertEquals(1911, e1.getFilePointer());\n        assertEquals(1911, a1.getFilePointer());\n        be1 = e1.readByte();\n        ba1 = a1.readByte();\n        assertEquals(be1, ba1);\n\n        e1.close();\n        e2.close();\n        a1.close();\n        a2.close();\n        cr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"67aadace85f701c87a4e0721eedcda25d8415a70":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["67aadace85f701c87a4e0721eedcda25d8415a70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["2553b00f699380c64959ccb27991289aae87be2e","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["0aab6e810b4b0d3743d6a048be0602801f4b3920","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":["9454a6510e2db155fb01faa5c049b06ece95fab9","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b6f9be74ca7baaef11857ad002cad40419979516","0aab6e810b4b0d3743d6a048be0602801f4b3920"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"67aadace85f701c87a4e0721eedcda25d8415a70":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b6f9be74ca7baaef11857ad002cad40419979516":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"0aab6e810b4b0d3743d6a048be0602801f4b3920":["ddc4c914be86e34b54f70023f45a60fa7f04e929","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["67aadace85f701c87a4e0721eedcda25d8415a70","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"2553b00f699380c64959ccb27991289aae87be2e":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0aab6e810b4b0d3743d6a048be0602801f4b3920","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","2553b00f699380c64959ccb27991289aae87be2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}