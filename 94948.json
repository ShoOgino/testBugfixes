{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#gramToken().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#gramToken().mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#gramToken().mjava","sourceNew":"  /**\n   * Constructs a compound token.\n   */\n  private void gramToken() {\n    buffer.append(termAttribute.buffer(), 0, termAttribute.length());\n    int endOffset = offsetAttribute.endOffset();\n\n    clearAttributes();\n\n    int length = buffer.length();\n    char termText[] = termAttribute.buffer();\n    if (length > termText.length) {\n      termText = termAttribute.resizeBuffer(length);\n    }\n    \n    buffer.getChars(0, length, termText, 0);\n    termAttribute.setLength(length);\n    posIncAttribute.setPositionIncrement(0);\n    offsetAttribute.setOffset(lastStartOffset, endOffset);\n    typeAttribute.setType(GRAM_TYPE);\n    buffer.setLength(0);\n  }\n\n","sourceOld":"  /**\n   * Constructs a compound token.\n   */\n  private void gramToken() {\n    buffer.append(termAttribute.buffer(), 0, termAttribute.length());\n    int endOffset = offsetAttribute.endOffset();\n\n    clearAttributes();\n\n    int length = buffer.length();\n    char termText[] = termAttribute.buffer();\n    if (length > termText.length) {\n      termText = termAttribute.resizeBuffer(length);\n    }\n    \n    buffer.getChars(0, length, termText, 0);\n    termAttribute.setLength(length);\n    posIncAttribute.setPositionIncrement(0);\n    offsetAttribute.setOffset(lastStartOffset, endOffset);\n    typeAttribute.setType(GRAM_TYPE);\n    buffer.setLength(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"838a46f9520c9d92b4fb5b607d208884d584cbdf","date":1334146591,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#gramToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#gramToken().mjava","sourceNew":"  /**\n   * Constructs a compound token.\n   */\n  private void gramToken() {\n    buffer.append(termAttribute.buffer(), 0, termAttribute.length());\n    int endOffset = offsetAttribute.endOffset();\n\n    clearAttributes();\n\n    int length = buffer.length();\n    char termText[] = termAttribute.buffer();\n    if (length > termText.length) {\n      termText = termAttribute.resizeBuffer(length);\n    }\n    \n    buffer.getChars(0, length, termText, 0);\n    termAttribute.setLength(length);\n    posIncAttribute.setPositionIncrement(0);\n    posLenAttribute.setPositionLength(2); // bigram\n    offsetAttribute.setOffset(lastStartOffset, endOffset);\n    typeAttribute.setType(GRAM_TYPE);\n    buffer.setLength(0);\n  }\n\n","sourceOld":"  /**\n   * Constructs a compound token.\n   */\n  private void gramToken() {\n    buffer.append(termAttribute.buffer(), 0, termAttribute.length());\n    int endOffset = offsetAttribute.endOffset();\n\n    clearAttributes();\n\n    int length = buffer.length();\n    char termText[] = termAttribute.buffer();\n    if (length > termText.length) {\n      termText = termAttribute.resizeBuffer(length);\n    }\n    \n    buffer.getChars(0, length, termText, 0);\n    termAttribute.setLength(length);\n    posIncAttribute.setPositionIncrement(0);\n    offsetAttribute.setOffset(lastStartOffset, endOffset);\n    typeAttribute.setType(GRAM_TYPE);\n    buffer.setLength(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#gramToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#gramToken().mjava","sourceNew":"  /**\n   * Constructs a compound token.\n   */\n  private void gramToken() {\n    buffer.append(termAttribute.buffer(), 0, termAttribute.length());\n    int endOffset = offsetAttribute.endOffset();\n\n    clearAttributes();\n\n    int length = buffer.length();\n    char termText[] = termAttribute.buffer();\n    if (length > termText.length) {\n      termText = termAttribute.resizeBuffer(length);\n    }\n    \n    buffer.getChars(0, length, termText, 0);\n    termAttribute.setLength(length);\n    posIncAttribute.setPositionIncrement(0);\n    posLenAttribute.setPositionLength(2); // bigram\n    offsetAttribute.setOffset(lastStartOffset, endOffset);\n    typeAttribute.setType(GRAM_TYPE);\n    buffer.setLength(0);\n  }\n\n","sourceOld":"  /**\n   * Constructs a compound token.\n   */\n  private void gramToken() {\n    buffer.append(termAttribute.buffer(), 0, termAttribute.length());\n    int endOffset = offsetAttribute.endOffset();\n\n    clearAttributes();\n\n    int length = buffer.length();\n    char termText[] = termAttribute.buffer();\n    if (length > termText.length) {\n      termText = termAttribute.resizeBuffer(length);\n    }\n    \n    buffer.getChars(0, length, termText, 0);\n    termAttribute.setLength(length);\n    posIncAttribute.setPositionIncrement(0);\n    offsetAttribute.setOffset(lastStartOffset, endOffset);\n    typeAttribute.setType(GRAM_TYPE);\n    buffer.setLength(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#gramToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsFilter#gramToken().mjava","sourceNew":"  /**\n   * Constructs a compound token.\n   */\n  private void gramToken() {\n    buffer.append(termAttribute.buffer(), 0, termAttribute.length());\n    int endOffset = offsetAttribute.endOffset();\n\n    clearAttributes();\n\n    int length = buffer.length();\n    char termText[] = termAttribute.buffer();\n    if (length > termText.length) {\n      termText = termAttribute.resizeBuffer(length);\n    }\n    \n    buffer.getChars(0, length, termText, 0);\n    termAttribute.setLength(length);\n    posIncAttribute.setPositionIncrement(0);\n    posLenAttribute.setPositionLength(2); // bigram\n    offsetAttribute.setOffset(lastStartOffset, endOffset);\n    typeAttribute.setType(GRAM_TYPE);\n    buffer.setLength(0);\n  }\n\n","sourceOld":"  /**\n   * Constructs a compound token.\n   */\n  private void gramToken() {\n    buffer.append(termAttribute.buffer(), 0, termAttribute.length());\n    int endOffset = offsetAttribute.endOffset();\n\n    clearAttributes();\n\n    int length = buffer.length();\n    char termText[] = termAttribute.buffer();\n    if (length > termText.length) {\n      termText = termAttribute.resizeBuffer(length);\n    }\n    \n    buffer.getChars(0, length, termText, 0);\n    termAttribute.setLength(length);\n    posIncAttribute.setPositionIncrement(0);\n    posLenAttribute.setPositionLength(2); // bigram\n    offsetAttribute.setOffset(lastStartOffset, endOffset);\n    typeAttribute.setType(GRAM_TYPE);\n    buffer.setLength(0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["0f080986da691a3bba7b757f43ab72cdc82b57ce","838a46f9520c9d92b4fb5b607d208884d584cbdf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"838a46f9520c9d92b4fb5b607d208884d584cbdf":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","838a46f9520c9d92b4fb5b607d208884d584cbdf"],"838a46f9520c9d92b4fb5b607d208884d584cbdf":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}