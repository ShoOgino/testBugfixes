{"path":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transform(List[Command]).mjava","commits":[{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transform(List[Command]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public NamedList transform(List<Command> data) throws IOException {\n    NamedList<NamedList> result = new NamedList<NamedList>();\n    for (Command command : data) {\n      NamedList commandResult;\n      if (TopGroupsFieldCommand.class.isInstance(command)) {\n        TopGroupsFieldCommand fieldCommand = (TopGroupsFieldCommand) command;\n        SchemaField groupField = rb.req.getSearcher().getSchema().getField(fieldCommand.getKey());\n        commandResult = serializeTopGroups(fieldCommand.result(), groupField);\n      } else if (QueryCommand.class.isInstance(command)) {\n        QueryCommand queryCommand = (QueryCommand) command;\n        commandResult = serializeTopDocs(queryCommand.result());\n      } else {\n        commandResult = null;\n      }\n\n      result.add(command.getKey(), commandResult);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transform(List[Command]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transform(List[Command]).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList transform(List<Command> data) throws IOException {\n    NamedList<NamedList> result = new NamedList<NamedList>();\n    for (Command command : data) {\n      NamedList commandResult;\n      if (TopGroupsFieldCommand.class.isInstance(command)) {\n        TopGroupsFieldCommand fieldCommand = (TopGroupsFieldCommand) command;\n        SchemaField groupField = rb.req.getSearcher().getSchema().getField(fieldCommand.getKey());\n        commandResult = serializeTopGroups(fieldCommand.result(), groupField);\n      } else if (QueryCommand.class.isInstance(command)) {\n        QueryCommand queryCommand = (QueryCommand) command;\n        commandResult = serializeTopDocs(queryCommand.result());\n      } else {\n        commandResult = null;\n      }\n\n      result.add(command.getKey(), commandResult);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public NamedList transform(List<Command> data) throws IOException {\n    NamedList<NamedList> result = new NamedList<NamedList>();\n    for (Command command : data) {\n      NamedList commandResult;\n      if (TopGroupsFieldCommand.class.isInstance(command)) {\n        TopGroupsFieldCommand fieldCommand = (TopGroupsFieldCommand) command;\n        SchemaField groupField = rb.req.getSearcher().getSchema().getField(fieldCommand.getKey());\n        commandResult = serializeTopGroups(fieldCommand.result(), groupField);\n      } else if (QueryCommand.class.isInstance(command)) {\n        QueryCommand queryCommand = (QueryCommand) command;\n        commandResult = serializeTopDocs(queryCommand.result());\n      } else {\n        commandResult = null;\n      }\n\n      result.add(command.getKey(), commandResult);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transform(List[Command]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transform(List[Command]).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList transform(List<Command> data) throws IOException {\n    NamedList<NamedList> result = new NamedList<NamedList>();\n    for (Command command : data) {\n      NamedList commandResult;\n      if (TopGroupsFieldCommand.class.isInstance(command)) {\n        TopGroupsFieldCommand fieldCommand = (TopGroupsFieldCommand) command;\n        SchemaField groupField = rb.req.getSearcher().getSchema().getField(fieldCommand.getKey());\n        commandResult = serializeTopGroups(fieldCommand.result(), groupField);\n      } else if (QueryCommand.class.isInstance(command)) {\n        QueryCommand queryCommand = (QueryCommand) command;\n        commandResult = serializeTopDocs(queryCommand.result());\n      } else {\n        commandResult = null;\n      }\n\n      result.add(command.getKey(), commandResult);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public NamedList transform(List<Command> data) throws IOException {\n    NamedList<NamedList> result = new NamedList<NamedList>();\n    for (Command command : data) {\n      NamedList commandResult;\n      if (TopGroupsFieldCommand.class.isInstance(command)) {\n        TopGroupsFieldCommand fieldCommand = (TopGroupsFieldCommand) command;\n        SchemaField groupField = rb.req.getSearcher().getSchema().getField(fieldCommand.getKey());\n        commandResult = serializeTopGroups(fieldCommand.result(), groupField);\n      } else if (QueryCommand.class.isInstance(command)) {\n        QueryCommand queryCommand = (QueryCommand) command;\n        commandResult = serializeTopDocs(queryCommand.result());\n      } else {\n        commandResult = null;\n      }\n\n      result.add(command.getKey(), commandResult);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transform(List[Command]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transform(List[Command]).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList transform(List<Command> data) throws IOException {\n    NamedList<NamedList> result = new NamedList<NamedList>();\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Command command : data) {\n      NamedList commandResult;\n      if (TopGroupsFieldCommand.class.isInstance(command)) {\n        TopGroupsFieldCommand fieldCommand = (TopGroupsFieldCommand) command;\n        SchemaField groupField = schema.getField(fieldCommand.getKey());\n        commandResult = serializeTopGroups(fieldCommand.result(), groupField);\n      } else if (QueryCommand.class.isInstance(command)) {\n        QueryCommand queryCommand = (QueryCommand) command;\n        commandResult = serializeTopDocs(queryCommand.result());\n      } else {\n        commandResult = null;\n      }\n\n      result.add(command.getKey(), commandResult);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList transform(List<Command> data) throws IOException {\n    NamedList<NamedList> result = new NamedList<NamedList>();\n    for (Command command : data) {\n      NamedList commandResult;\n      if (TopGroupsFieldCommand.class.isInstance(command)) {\n        TopGroupsFieldCommand fieldCommand = (TopGroupsFieldCommand) command;\n        SchemaField groupField = rb.req.getSearcher().getSchema().getField(fieldCommand.getKey());\n        commandResult = serializeTopGroups(fieldCommand.result(), groupField);\n      } else if (QueryCommand.class.isInstance(command)) {\n        QueryCommand queryCommand = (QueryCommand) command;\n        commandResult = serializeTopDocs(queryCommand.result());\n      } else {\n        commandResult = null;\n      }\n\n      result.add(command.getKey(), commandResult);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transform(List[Command]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transform(List[Command]).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList transform(List<Command> data) throws IOException {\n    NamedList<NamedList> result = new NamedList<>();\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Command command : data) {\n      NamedList commandResult;\n      if (TopGroupsFieldCommand.class.isInstance(command)) {\n        TopGroupsFieldCommand fieldCommand = (TopGroupsFieldCommand) command;\n        SchemaField groupField = schema.getField(fieldCommand.getKey());\n        commandResult = serializeTopGroups(fieldCommand.result(), groupField);\n      } else if (QueryCommand.class.isInstance(command)) {\n        QueryCommand queryCommand = (QueryCommand) command;\n        commandResult = serializeTopDocs(queryCommand.result());\n      } else {\n        commandResult = null;\n      }\n\n      result.add(command.getKey(), commandResult);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList transform(List<Command> data) throws IOException {\n    NamedList<NamedList> result = new NamedList<NamedList>();\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Command command : data) {\n      NamedList commandResult;\n      if (TopGroupsFieldCommand.class.isInstance(command)) {\n        TopGroupsFieldCommand fieldCommand = (TopGroupsFieldCommand) command;\n        SchemaField groupField = schema.getField(fieldCommand.getKey());\n        commandResult = serializeTopGroups(fieldCommand.result(), groupField);\n      } else if (QueryCommand.class.isInstance(command)) {\n        QueryCommand queryCommand = (QueryCommand) command;\n        commandResult = serializeTopDocs(queryCommand.result());\n      } else {\n        commandResult = null;\n      }\n\n      result.add(command.getKey(), commandResult);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80a37ae73034270b57bfd57a44f8fcadc952fa0","date":1515440719,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transform(List[Command]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transform(List[Command]).mjava","sourceNew":"  @Override\n  public NamedList transform(List<Command> data) throws IOException {\n    NamedList<NamedList> result = new NamedList<>();\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Command command : data) {\n      NamedList commandResult;\n      if (TopGroupsFieldCommand.class.isInstance(command)) {\n        TopGroupsFieldCommand fieldCommand = (TopGroupsFieldCommand) command;\n        SchemaField groupField = schema.getField(fieldCommand.getKey());\n        commandResult = serializeTopGroups(fieldCommand.result(), groupField);\n      } else if (QueryCommand.class.isInstance(command)) {\n        QueryCommand queryCommand = (QueryCommand) command;\n        commandResult = serializeTopDocs(queryCommand.result());\n      } else {\n        commandResult = null;\n      }\n\n      result.add(command.getKey(), commandResult);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList transform(List<Command> data) throws IOException {\n    NamedList<NamedList> result = new NamedList<>();\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Command command : data) {\n      NamedList commandResult;\n      if (TopGroupsFieldCommand.class.isInstance(command)) {\n        TopGroupsFieldCommand fieldCommand = (TopGroupsFieldCommand) command;\n        SchemaField groupField = schema.getField(fieldCommand.getKey());\n        commandResult = serializeTopGroups(fieldCommand.result(), groupField);\n      } else if (QueryCommand.class.isInstance(command)) {\n        QueryCommand queryCommand = (QueryCommand) command;\n        commandResult = serializeTopDocs(queryCommand.result());\n      } else {\n        commandResult = null;\n      }\n\n      result.add(command.getKey(), commandResult);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transform(List[Command]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#transform(List[Command]).mjava","sourceNew":"  @Override\n  public NamedList transform(List<Command> data) throws IOException {\n    NamedList<NamedList> result = new NamedList<>();\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Command command : data) {\n      NamedList commandResult;\n      if (TopGroupsFieldCommand.class.isInstance(command)) {\n        TopGroupsFieldCommand fieldCommand = (TopGroupsFieldCommand) command;\n        SchemaField groupField = schema.getField(fieldCommand.getKey());\n        commandResult = serializeTopGroups(fieldCommand.result(), groupField);\n      } else if (QueryCommand.class.isInstance(command)) {\n        QueryCommand queryCommand = (QueryCommand) command;\n        commandResult = serializeTopDocs(queryCommand.result());\n      } else {\n        commandResult = null;\n      }\n\n      result.add(command.getKey(), commandResult);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public NamedList transform(List<Command> data) throws IOException {\n    NamedList<NamedList> result = new NamedList<>();\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    for (Command command : data) {\n      NamedList commandResult;\n      if (TopGroupsFieldCommand.class.isInstance(command)) {\n        TopGroupsFieldCommand fieldCommand = (TopGroupsFieldCommand) command;\n        SchemaField groupField = schema.getField(fieldCommand.getKey());\n        commandResult = serializeTopGroups(fieldCommand.result(), groupField);\n      } else if (QueryCommand.class.isInstance(command)) {\n        QueryCommand queryCommand = (QueryCommand) command;\n        commandResult = serializeTopDocs(queryCommand.result());\n      } else {\n        commandResult = null;\n      }\n\n      result.add(command.getKey(), commandResult);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["ccc08aa684aee4964baee0644a6ba047bfd70829","7530de27b87b961b51f01bd1299b7004d46e8823"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["08970e5b8411182a29412c177eff67ec1110095b"],"b94236357aaa22b76c10629851fe4e376e0cea82":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"08970e5b8411182a29412c177eff67ec1110095b":["7530de27b87b961b51f01bd1299b7004d46e8823"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b94236357aaa22b76c10629851fe4e376e0cea82","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}