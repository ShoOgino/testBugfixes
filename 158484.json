{"path":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldNeverCache(Query).mjava","commits":[{"id":"b56b6f1da108905632f350a2fcd9545108149dbe","date":1487253427,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldNeverCache(Query).mjava","pathOld":"/dev/null","sourceNew":"  private static boolean shouldNeverCache(Query query) {\n    if (query instanceof TermQuery) {\n      // We do not bother caching term queries since they are already plenty fast.\n      return true;\n    }\n\n    if (query instanceof MatchAllDocsQuery) {\n      // MatchAllDocsQuery has an iterator that is faster than what a bit set could do.\n      return true;\n    }\n\n    // For the below queries, it's cheap to notice they cannot match any docs so\n    // we do not bother caching them.\n    if (query instanceof MatchNoDocsQuery) {\n      return false;\n    }\n\n    if (query instanceof BooleanQuery) {\n      BooleanQuery bq = (BooleanQuery) query;\n      if (bq.clauses().isEmpty()) {\n        return true;\n      }\n    }\n\n    if (query instanceof DisjunctionMaxQuery) {\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;\n      if (dmq.getDisjuncts().isEmpty()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["025f5fd978544ded7f86ac7ced2cff69726a2c6d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"025f5fd978544ded7f86ac7ced2cff69726a2c6d","date":1512379563,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldNeverCache(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldNeverCache(Query).mjava","sourceNew":"  private static boolean shouldNeverCache(Query query) {\n    if (query instanceof TermQuery) {\n      // We do not bother caching term queries since they are already plenty fast.\n      return true;\n    }\n\n    if (query instanceof MatchAllDocsQuery) {\n      // MatchAllDocsQuery has an iterator that is faster than what a bit set could do.\n      return true;\n    }\n\n    // For the below queries, it's cheap to notice they cannot match any docs so\n    // we do not bother caching them.\n    if (query instanceof MatchNoDocsQuery) {\n      return true;\n    }\n\n    if (query instanceof BooleanQuery) {\n      BooleanQuery bq = (BooleanQuery) query;\n      if (bq.clauses().isEmpty()) {\n        return true;\n      }\n    }\n\n    if (query instanceof DisjunctionMaxQuery) {\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;\n      if (dmq.getDisjuncts().isEmpty()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private static boolean shouldNeverCache(Query query) {\n    if (query instanceof TermQuery) {\n      // We do not bother caching term queries since they are already plenty fast.\n      return true;\n    }\n\n    if (query instanceof MatchAllDocsQuery) {\n      // MatchAllDocsQuery has an iterator that is faster than what a bit set could do.\n      return true;\n    }\n\n    // For the below queries, it's cheap to notice they cannot match any docs so\n    // we do not bother caching them.\n    if (query instanceof MatchNoDocsQuery) {\n      return false;\n    }\n\n    if (query instanceof BooleanQuery) {\n      BooleanQuery bq = (BooleanQuery) query;\n      if (bq.clauses().isEmpty()) {\n        return true;\n      }\n    }\n\n    if (query instanceof DisjunctionMaxQuery) {\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;\n      if (dmq.getDisjuncts().isEmpty()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":["b56b6f1da108905632f350a2fcd9545108149dbe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c6856fe79e1e3b54358b2f48b38a6a8d56bb13b","date":1585060016,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldNeverCache(Query).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/UsageTrackingQueryCachingPolicy#shouldNeverCache(Query).mjava","sourceNew":"  private static boolean shouldNeverCache(Query query) {\n    if (query instanceof TermQuery) {\n      // We do not bother caching term queries since they are already plenty fast.\n      return true;\n    }\n\n    if (query instanceof DocValuesFieldExistsQuery) {\n      // We do not bother caching DocValuesFieldExistsQuery queries since they are already plenty fast.\n      return true;\n    }\n\n    if (query instanceof MatchAllDocsQuery) {\n      // MatchAllDocsQuery has an iterator that is faster than what a bit set could do.\n      return true;\n    }\n\n    // For the below queries, it's cheap to notice they cannot match any docs so\n    // we do not bother caching them.\n    if (query instanceof MatchNoDocsQuery) {\n      return true;\n    }\n\n    if (query instanceof BooleanQuery) {\n      BooleanQuery bq = (BooleanQuery) query;\n      if (bq.clauses().isEmpty()) {\n        return true;\n      }\n    }\n\n    if (query instanceof DisjunctionMaxQuery) {\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;\n      if (dmq.getDisjuncts().isEmpty()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private static boolean shouldNeverCache(Query query) {\n    if (query instanceof TermQuery) {\n      // We do not bother caching term queries since they are already plenty fast.\n      return true;\n    }\n\n    if (query instanceof MatchAllDocsQuery) {\n      // MatchAllDocsQuery has an iterator that is faster than what a bit set could do.\n      return true;\n    }\n\n    // For the below queries, it's cheap to notice they cannot match any docs so\n    // we do not bother caching them.\n    if (query instanceof MatchNoDocsQuery) {\n      return true;\n    }\n\n    if (query instanceof BooleanQuery) {\n      BooleanQuery bq = (BooleanQuery) query;\n      if (bq.clauses().isEmpty()) {\n        return true;\n      }\n    }\n\n    if (query instanceof DisjunctionMaxQuery) {\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery) query;\n      if (dmq.getDisjuncts().isEmpty()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b56b6f1da108905632f350a2fcd9545108149dbe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3c6856fe79e1e3b54358b2f48b38a6a8d56bb13b":["025f5fd978544ded7f86ac7ced2cff69726a2c6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"025f5fd978544ded7f86ac7ced2cff69726a2c6d":["b56b6f1da108905632f350a2fcd9545108149dbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c6856fe79e1e3b54358b2f48b38a6a8d56bb13b"]},"commit2Childs":{"b56b6f1da108905632f350a2fcd9545108149dbe":["025f5fd978544ded7f86ac7ced2cff69726a2c6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b56b6f1da108905632f350a2fcd9545108149dbe"],"3c6856fe79e1e3b54358b2f48b38a6a8d56bb13b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"025f5fd978544ded7f86ac7ced2cff69726a2c6d":["3c6856fe79e1e3b54358b2f48b38a6a8d56bb13b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}