{"path":"solr/contrib/solr-morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentContent(HashMap[String,ExpectedResult]).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentContent(HashMap[String,ExpectedResult]).mjava","pathOld":"/dev/null","sourceNew":"  protected void testDocumentContent(HashMap<String, ExpectedResult> expectedResultMap)\n  throws Exception {\n    QueryResponse rsp = solrServer.query(new SolrQuery(\"*:*\").setRows(Integer.MAX_VALUE));\n    // Check that every expected field/values shows up in the actual query\n    for (Entry<String, ExpectedResult> current : expectedResultMap.entrySet()) {\n      String field = current.getKey();\n      for (String expectedFieldValue : current.getValue().getFieldValues()) {\n        ExpectedResult.CompareType compareType = current.getValue().getCompareType();\n        boolean foundField = false;\n\n        for (SolrDocument doc : rsp.getResults()) {\n          Collection<Object> actualFieldValues = doc.getFieldValues(field);\n          if (compareType == ExpectedResult.CompareType.equals) {\n            if (actualFieldValues != null && actualFieldValues.contains(expectedFieldValue)) {\n              foundField = true;\n              break;\n            }\n          }\n          else {\n            for (Iterator<Object> it = actualFieldValues.iterator(); it.hasNext(); ) {\n              String actualValue = it.next().toString();  // test only supports string comparison\n              if (actualFieldValues != null && actualValue.contains(expectedFieldValue)) {\n                foundField = true;\n                break;\n              }\n            }\n          }\n        }\n        assert(foundField); // didn't find expected field/value in query\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentContent(HashMap[String,ExpectedResult]).mjava","pathOld":"solr/contrib/solr-morphlines-core/src/test/org/apache/solr/morphlines/solr/AbstractSolrMorphlineTestBase#testDocumentContent(HashMap[String,ExpectedResult]).mjava","sourceNew":"  protected void testDocumentContent(HashMap<String, ExpectedResult> expectedResultMap)\n  throws Exception {\n    QueryResponse rsp = solrServer.query(new SolrQuery(\"*:*\").setRows(Integer.MAX_VALUE));\n    // Check that every expected field/values shows up in the actual query\n    for (Entry<String, ExpectedResult> current : expectedResultMap.entrySet()) {\n      String field = current.getKey();\n      for (String expectedFieldValue : current.getValue().getFieldValues()) {\n        ExpectedResult.CompareType compareType = current.getValue().getCompareType();\n        boolean foundField = false;\n\n        for (SolrDocument doc : rsp.getResults()) {\n          Collection<Object> actualFieldValues = doc.getFieldValues(field);\n          if (compareType == ExpectedResult.CompareType.equals) {\n            if (actualFieldValues != null && actualFieldValues.contains(expectedFieldValue)) {\n              foundField = true;\n              break;\n            }\n          }\n          else {\n            for (Iterator<Object> it = actualFieldValues.iterator(); it.hasNext(); ) {\n              String actualValue = it.next().toString();  // test only supports string comparison\n              if (actualFieldValues != null && actualValue.contains(expectedFieldValue)) {\n                foundField = true;\n                break;\n              }\n            }\n          }\n        }\n        assert(foundField); // didn't find expected field/value in query\n      }\n    }\n  }\n\n","sourceOld":"  protected void testDocumentContent(HashMap<String, ExpectedResult> expectedResultMap)\n  throws Exception {\n    QueryResponse rsp = solrServer.query(new SolrQuery(\"*:*\").setRows(Integer.MAX_VALUE));\n    // Check that every expected field/values shows up in the actual query\n    for (Entry<String, ExpectedResult> current : expectedResultMap.entrySet()) {\n      String field = current.getKey();\n      for (String expectedFieldValue : current.getValue().getFieldValues()) {\n        ExpectedResult.CompareType compareType = current.getValue().getCompareType();\n        boolean foundField = false;\n\n        for (SolrDocument doc : rsp.getResults()) {\n          Collection<Object> actualFieldValues = doc.getFieldValues(field);\n          if (compareType == ExpectedResult.CompareType.equals) {\n            if (actualFieldValues != null && actualFieldValues.contains(expectedFieldValue)) {\n              foundField = true;\n              break;\n            }\n          }\n          else {\n            for (Iterator<Object> it = actualFieldValues.iterator(); it.hasNext(); ) {\n              String actualValue = it.next().toString();  // test only supports string comparison\n              if (actualFieldValues != null && actualValue.contains(expectedFieldValue)) {\n                foundField = true;\n                break;\n              }\n            }\n          }\n        }\n        assert(foundField); // didn't find expected field/value in query\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}