{"path":"lucene/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","sourceNew":"  /**\n   * If clone is true then we clone each of the subreaders\n   * @param doClone\n   * @return New IndexReader, or same one (this) if\n   *   reopen/clone is not necessary\n   * @throws CorruptIndexException\n   * @throws IOException\n   */\n  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone)\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n        else\n          newSubReaders[i] = subReaders[i].reopen();\n        // if at least one of the subreaders was updated we remember that\n        // and return a new MultiReader\n        if (newSubReaders[i] != subReaders[i]) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      MultiReader mr = new MultiReader(newSubReaders);\n      mr.decrefOnClose = newDecrefOnClose;\n      return mr;\n    } else {\n      return this;\n    }\n  }\n\n","sourceOld":"  /**\n   * If clone is true then we clone each of the subreaders\n   * @param doClone\n   * @return New IndexReader, or same one (this) if\n   *   reopen/clone is not necessary\n   * @throws CorruptIndexException\n   * @throws IOException\n   */\n  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone)\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n        else\n          newSubReaders[i] = subReaders[i].reopen();\n        // if at least one of the subreaders was updated we remember that\n        // and return a new MultiReader\n        if (newSubReaders[i] != subReaders[i]) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      MultiReader mr = new MultiReader(newSubReaders);\n      mr.decrefOnClose = newDecrefOnClose;\n      return mr;\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","sourceNew":"  /**\n   * If clone is true then we clone each of the subreaders\n   * @param doClone\n   * @return New IndexReader, or null if open/clone is not necessary\n   * @throws CorruptIndexException\n   * @throws IOException\n   */\n  protected IndexReader doOpenIfChanged(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean changed = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone) {\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n          changed = true;\n        } else {\n          final IndexReader newSubReader = IndexReader.openIfChanged(subReaders[i]);\n          if (newSubReader != null) {\n            newSubReaders[i] = newSubReader;\n            changed = true;\n          } else {\n            newSubReaders[i] = subReaders[i];\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && changed) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (changed) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      MultiReader mr = new MultiReader(newSubReaders);\n      mr.decrefOnClose = newDecrefOnClose;\n      return mr;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * If clone is true then we clone each of the subreaders\n   * @param doClone\n   * @return New IndexReader, or same one (this) if\n   *   reopen/clone is not necessary\n   * @throws CorruptIndexException\n   * @throws IOException\n   */\n  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone)\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n        else\n          newSubReaders[i] = subReaders[i].reopen();\n        // if at least one of the subreaders was updated we remember that\n        // and return a new MultiReader\n        if (newSubReaders[i] != subReaders[i]) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      MultiReader mr = new MultiReader(newSubReaders);\n      mr.decrefOnClose = newDecrefOnClose;\n      return mr;\n    } else {\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac7dd9818a7652666183eb1d4bfadc4317bba7df","date":1323510702,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged(boolean).mjava","sourceNew":"  /**\n   * If clone is true then we clone each of the subreaders\n   * @param doClone\n   * @return New IndexReader, or null if open/clone is not necessary\n   * @throws CorruptIndexException\n   * @throws IOException\n   */\n  private IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean changed = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone) {\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n          changed = true;\n        } else {\n          final IndexReader newSubReader = IndexReader.openIfChanged(subReaders[i]);\n          if (newSubReader != null) {\n            newSubReaders[i] = newSubReader;\n            changed = true;\n          } else {\n            newSubReaders[i] = subReaders[i];\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && changed) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (changed) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      MultiReader mr = new MultiReader(newSubReaders);\n      mr.decrefOnClose = newDecrefOnClose;\n      return mr;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * If clone is true then we clone each of the subreaders\n   * @param doClone\n   * @return New IndexReader, or null if open/clone is not necessary\n   * @throws CorruptIndexException\n   * @throws IOException\n   */\n  protected IndexReader doOpenIfChanged(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean changed = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone) {\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n          changed = true;\n        } else {\n          final IndexReader newSubReader = IndexReader.openIfChanged(subReaders[i]);\n          if (newSubReader != null) {\n            newSubReaders[i] = newSubReader;\n            changed = true;\n          } else {\n            newSubReaders[i] = subReaders[i];\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && changed) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (changed) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      MultiReader mr = new MultiReader(newSubReaders);\n      mr.decrefOnClose = newDecrefOnClose;\n      return mr;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doOpenIfChanged(boolean).mjava","sourceNew":"  /**\n   * If clone is true then we clone each of the subreaders\n   * @param doClone\n   * @return New IndexReader, or null if open/clone is not necessary\n   * @throws CorruptIndexException\n   * @throws IOException\n   */\n  private IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean changed = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone) {\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n          changed = true;\n        } else {\n          final IndexReader newSubReader = IndexReader.openIfChanged(subReaders[i]);\n          if (newSubReader != null) {\n            newSubReaders[i] = newSubReader;\n            changed = true;\n          } else {\n            newSubReaders[i] = subReaders[i];\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && changed) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (changed) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      MultiReader mr = new MultiReader(newSubReaders);\n      mr.decrefOnClose = newDecrefOnClose;\n      return mr;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * If clone is true then we clone each of the subreaders\n   * @param doClone\n   * @return New IndexReader, or null if open/clone is not necessary\n   * @throws CorruptIndexException\n   * @throws IOException\n   */\n  protected IndexReader doOpenIfChanged(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean changed = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone) {\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n          changed = true;\n        } else {\n          final IndexReader newSubReader = IndexReader.openIfChanged(subReaders[i]);\n          if (newSubReader != null) {\n            newSubReaders[i] = newSubReader;\n            changed = true;\n          } else {\n            newSubReaders[i] = subReaders[i];\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && changed) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (changed) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      MultiReader mr = new MultiReader(newSubReaders);\n      mr.decrefOnClose = newDecrefOnClose;\n      return mr;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","date":1323543613,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","sourceNew":"  private IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean changed = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone) {\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n          changed = true;\n        } else {\n          final IndexReader newSubReader = IndexReader.openIfChanged(subReaders[i]);\n          if (newSubReader != null) {\n            newSubReaders[i] = newSubReader;\n            changed = true;\n          } else {\n            newSubReaders[i] = subReaders[i];\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && changed) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (changed) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      MultiReader mr = new MultiReader(newSubReaders);\n      mr.decrefOnClose = newDecrefOnClose;\n      return mr;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * If clone is true then we clone each of the subreaders\n   * @param doClone\n   * @return New IndexReader, or null if open/clone is not necessary\n   * @throws CorruptIndexException\n   * @throws IOException\n   */\n  private IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean changed = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone) {\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n          changed = true;\n        } else {\n          final IndexReader newSubReader = IndexReader.openIfChanged(subReaders[i]);\n          if (newSubReader != null) {\n            newSubReaders[i] = newSubReader;\n            changed = true;\n          } else {\n            newSubReaders[i] = subReaders[i];\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && changed) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (changed) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      MultiReader mr = new MultiReader(newSubReaders);\n      mr.decrefOnClose = newDecrefOnClose;\n      return mr;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04b2a23f172a40e4b0bf0ee68bc571b4dab5b4c9","date":1323646333,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","sourceNew":"  private IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean changed = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone) {\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n          changed = true;\n        } else {\n          final IndexReader newSubReader = IndexReader.openIfChanged(subReaders[i]);\n          if (newSubReader != null) {\n            newSubReaders[i] = newSubReader;\n            changed = true;\n          } else {\n            newSubReaders[i] = subReaders[i];\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && changed) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (changed) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      return new MultiReader(newSubReaders, newDecrefOnClose, readerFinishedListeners);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean changed = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone) {\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n          changed = true;\n        } else {\n          final IndexReader newSubReader = IndexReader.openIfChanged(subReaders[i]);\n          if (newSubReader != null) {\n            newSubReaders[i] = newSubReader;\n            changed = true;\n          } else {\n            newSubReaders[i] = subReaders[i];\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && changed) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (changed) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      MultiReader mr = new MultiReader(newSubReaders);\n      mr.decrefOnClose = newDecrefOnClose;\n      return mr;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","sourceNew":"  private IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean changed = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone) {\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n          changed = true;\n        } else {\n          final IndexReader newSubReader = IndexReader.openIfChanged(subReaders[i]);\n          if (newSubReader != null) {\n            newSubReaders[i] = newSubReader;\n            changed = true;\n          } else {\n            newSubReaders[i] = subReaders[i];\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && changed) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (changed) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      return new MultiReader(newSubReaders, newDecrefOnClose, readerFinishedListeners);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * If clone is true then we clone each of the subreaders\n   * @param doClone\n   * @return New IndexReader, or null if open/clone is not necessary\n   * @throws CorruptIndexException\n   * @throws IOException\n   */\n  private IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean changed = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone) {\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n          changed = true;\n        } else {\n          final IndexReader newSubReader = IndexReader.openIfChanged(subReaders[i]);\n          if (newSubReader != null) {\n            newSubReaders[i] = newSubReader;\n            changed = true;\n          } else {\n            newSubReaders[i] = subReaders[i];\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && changed) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (changed) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      MultiReader mr = new MultiReader(newSubReaders);\n      mr.decrefOnClose = newDecrefOnClose;\n      return mr;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeb24fe119d55091148e2a3d94e80c9e349d886c","date":1323807643,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","sourceNew":"  private IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean changed = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone) {\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n          changed = true;\n        } else {\n          final IndexReader newSubReader = IndexReader.openIfChanged(subReaders[i]);\n          if (newSubReader != null) {\n            newSubReaders[i] = newSubReader;\n            changed = true;\n          } else {\n            newSubReaders[i] = subReaders[i];\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && changed) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (changed) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      return new MultiReader(newSubReaders, newDecrefOnClose);\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean changed = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone) {\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n          changed = true;\n        } else {\n          final IndexReader newSubReader = IndexReader.openIfChanged(subReaders[i]);\n          if (newSubReader != null) {\n            newSubReaders[i] = newSubReader;\n            changed = true;\n          } else {\n            newSubReaders[i] = subReaders[i];\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && changed) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (changed) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      return new MultiReader(newSubReaders, newDecrefOnClose, readerFinishedListeners);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/MultiReader#doReopen(boolean).mjava","sourceNew":null,"sourceOld":"  private IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean changed = false;\n    IndexReader[] newSubReaders = new IndexReader[subReaders.length];\n    \n    boolean success = false;\n    try {\n      for (int i = 0; i < subReaders.length; i++) {\n        if (doClone) {\n          newSubReaders[i] = (IndexReader) subReaders[i].clone();\n          changed = true;\n        } else {\n          final IndexReader newSubReader = IndexReader.openIfChanged(subReaders[i]);\n          if (newSubReader != null) {\n            newSubReaders[i] = newSubReader;\n            changed = true;\n          } else {\n            newSubReaders[i] = subReaders[i];\n          }\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && changed) {\n        for (int i = 0; i < newSubReaders.length; i++) {\n          if (newSubReaders[i] != subReaders[i]) {\n            try {\n              newSubReaders[i].close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (changed) {\n      boolean[] newDecrefOnClose = new boolean[subReaders.length];\n      for (int i = 0; i < subReaders.length; i++) {\n        if (newSubReaders[i] == subReaders[i]) {\n          newSubReaders[i].incRef();\n          newDecrefOnClose[i] = true;\n        }\n      }\n      return new MultiReader(newSubReaders, newDecrefOnClose);\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04b2a23f172a40e4b0bf0ee68bc571b4dab5b4c9":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["ac7dd9818a7652666183eb1d4bfadc4317bba7df"],"ac7dd9818a7652666183eb1d4bfadc4317bba7df":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","04b2a23f172a40e4b0bf0ee68bc571b4dab5b4c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["04b2a23f172a40e4b0bf0ee68bc571b4dab5b4c9"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["8a8259c922a83abc544609227a60d48e5ee93e7e","ac7dd9818a7652666183eb1d4bfadc4317bba7df"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["eeb24fe119d55091148e2a3d94e80c9e349d886c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"04b2a23f172a40e4b0bf0ee68bc571b4dab5b4c9":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","eeb24fe119d55091148e2a3d94e80c9e349d886c"],"8a8259c922a83abc544609227a60d48e5ee93e7e":["ac7dd9818a7652666183eb1d4bfadc4317bba7df","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4":["04b2a23f172a40e4b0bf0ee68bc571b4dab5b4c9"],"ac7dd9818a7652666183eb1d4bfadc4317bba7df":["6e2df1cc3e8621670ff46d098e43b7dd3f66eaf4","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}