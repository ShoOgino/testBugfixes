{"path":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#doUpdates(MetricsContext).mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#doUpdates(MetricsContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doUpdates(MetricsContext context) {\n    synchronized (this) {\n      long now = System.nanoTime();\n      float seconds = (now - previous) / 1000000000.0f;\n      metricsRecord.setMetric(\"blockcache.hit\", getPerSecond(blockCacheHit.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"blockcache.miss\", getPerSecond(blockCacheMiss.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"blockcache.eviction\", getPerSecond(blockCacheEviction.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"blockcache.size\", blockCacheSize.get());\n      metricsRecord.setMetric(\"row.reads\", getPerSecond(rowReads.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"row.writes\", getPerSecond(rowWrites.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"record.reads\", getPerSecond(recordReads.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"record.writes\", getPerSecond(recordWrites.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"query.external\", getPerSecond(queriesExternal.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"query.internal\", getPerSecond(queriesInternal.getAndSet(0), seconds));\n      for (Entry<String,MethodCall> entry : methodCalls.entrySet()) {\n        String key = entry.getKey();\n        MethodCall value = entry.getValue();\n        long invokes = value.invokes.getAndSet(0);\n        long times = value.times.getAndSet(0);\n        \n        float avgTimes = (times / (float) invokes) / 1000000000.0f;\n        metricsRecord.setMetric(\"methodcalls.\" + key + \".count\", getPerSecond(invokes, seconds));\n        metricsRecord.setMetric(\"methodcalls.\" + key + \".time\", avgTimes);\n      }\n      metricsRecord.setMetric(\"tables\", tableCount.get());\n      metricsRecord.setMetric(\"rows\", rowCount.get());\n      metricsRecord.setMetric(\"records\", recordCount.get());\n      metricsRecord.setMetric(\"index.count\", indexCount.get());\n      metricsRecord.setMetric(\"index.memoryusage\", indexMemoryUsage.get());\n      metricsRecord.setMetric(\"index.segments\", segmentCount.get());\n      previous = now;\n    }\n    metricsRecord.update();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#doUpdates(MetricsContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doUpdates(MetricsContext context) {\n    synchronized (this) {\n      long now = System.nanoTime();\n      float seconds = (now - previous) / 1000000000.0f;\n      metricsRecord.setMetric(\"blockcache.hit\", getPerSecond(blockCacheHit.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"blockcache.miss\", getPerSecond(blockCacheMiss.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"blockcache.eviction\", getPerSecond(blockCacheEviction.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"blockcache.size\", blockCacheSize.get());\n      metricsRecord.setMetric(\"row.reads\", getPerSecond(rowReads.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"row.writes\", getPerSecond(rowWrites.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"record.reads\", getPerSecond(recordReads.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"record.writes\", getPerSecond(recordWrites.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"query.external\", getPerSecond(queriesExternal.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"query.internal\", getPerSecond(queriesInternal.getAndSet(0), seconds));\n      for (Entry<String,MethodCall> entry : methodCalls.entrySet()) {\n        String key = entry.getKey();\n        MethodCall value = entry.getValue();\n        long invokes = value.invokes.getAndSet(0);\n        long times = value.times.getAndSet(0);\n        \n        float avgTimes = (times / (float) invokes) / 1000000000.0f;\n        metricsRecord.setMetric(\"methodcalls.\" + key + \".count\", getPerSecond(invokes, seconds));\n        metricsRecord.setMetric(\"methodcalls.\" + key + \".time\", avgTimes);\n      }\n      metricsRecord.setMetric(\"tables\", tableCount.get());\n      metricsRecord.setMetric(\"rows\", rowCount.get());\n      metricsRecord.setMetric(\"records\", recordCount.get());\n      metricsRecord.setMetric(\"index.count\", indexCount.get());\n      metricsRecord.setMetric(\"index.memoryusage\", indexMemoryUsage.get());\n      metricsRecord.setMetric(\"index.segments\", segmentCount.get());\n      previous = now;\n    }\n    metricsRecord.update();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adc1a805943f03a49f6d5cdc1b010526dab1cfc9","date":1417444169,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#doUpdates(MetricsContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#doUpdates(MetricsContext).mjava","sourceNew":"  @Override\n  public void doUpdates(MetricsContext context) {\n    synchronized (this) {\n      long now = System.nanoTime();\n      float seconds = (now - previous) / 1000000000.0f;\n      metricsRecord.setMetric(\"blockcache.hit\", getPerSecond(blockCacheHit.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"blockcache.miss\", getPerSecond(blockCacheMiss.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"blockcache.eviction\", getPerSecond(blockCacheEviction.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"blockcache.size\", blockCacheSize.get());\n      metricsRecord.setMetric(\"row.reads\", getPerSecond(rowReads.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"row.writes\", getPerSecond(rowWrites.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"record.reads\", getPerSecond(recordReads.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"record.writes\", getPerSecond(recordWrites.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"query.external\", getPerSecond(queriesExternal.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"query.internal\", getPerSecond(queriesInternal.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"buffercache.allocations\", getPerSecond(shardBuffercacheAllocate.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"buffercache.lost\", getPerSecond(shardBuffercacheLost.getAndSet(0), seconds));\n      for (Entry<String,MethodCall> entry : methodCalls.entrySet()) {\n        String key = entry.getKey();\n        MethodCall value = entry.getValue();\n        long invokes = value.invokes.getAndSet(0);\n        long times = value.times.getAndSet(0);\n        \n        float avgTimes = (times / (float) invokes) / 1000000000.0f;\n        metricsRecord.setMetric(\"methodcalls.\" + key + \".count\", getPerSecond(invokes, seconds));\n        metricsRecord.setMetric(\"methodcalls.\" + key + \".time\", avgTimes);\n      }\n      metricsRecord.setMetric(\"tables\", tableCount.get());\n      metricsRecord.setMetric(\"rows\", rowCount.get());\n      metricsRecord.setMetric(\"records\", recordCount.get());\n      metricsRecord.setMetric(\"index.count\", indexCount.get());\n      metricsRecord.setMetric(\"index.memoryusage\", indexMemoryUsage.get());\n      metricsRecord.setMetric(\"index.segments\", segmentCount.get());\n      previous = now;\n    }\n    metricsRecord.update();\n  }\n\n","sourceOld":"  @Override\n  public void doUpdates(MetricsContext context) {\n    synchronized (this) {\n      long now = System.nanoTime();\n      float seconds = (now - previous) / 1000000000.0f;\n      metricsRecord.setMetric(\"blockcache.hit\", getPerSecond(blockCacheHit.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"blockcache.miss\", getPerSecond(blockCacheMiss.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"blockcache.eviction\", getPerSecond(blockCacheEviction.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"blockcache.size\", blockCacheSize.get());\n      metricsRecord.setMetric(\"row.reads\", getPerSecond(rowReads.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"row.writes\", getPerSecond(rowWrites.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"record.reads\", getPerSecond(recordReads.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"record.writes\", getPerSecond(recordWrites.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"query.external\", getPerSecond(queriesExternal.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"query.internal\", getPerSecond(queriesInternal.getAndSet(0), seconds));\n      for (Entry<String,MethodCall> entry : methodCalls.entrySet()) {\n        String key = entry.getKey();\n        MethodCall value = entry.getValue();\n        long invokes = value.invokes.getAndSet(0);\n        long times = value.times.getAndSet(0);\n        \n        float avgTimes = (times / (float) invokes) / 1000000000.0f;\n        metricsRecord.setMetric(\"methodcalls.\" + key + \".count\", getPerSecond(invokes, seconds));\n        metricsRecord.setMetric(\"methodcalls.\" + key + \".time\", avgTimes);\n      }\n      metricsRecord.setMetric(\"tables\", tableCount.get());\n      metricsRecord.setMetric(\"rows\", rowCount.get());\n      metricsRecord.setMetric(\"records\", recordCount.get());\n      metricsRecord.setMetric(\"index.count\", indexCount.get());\n      metricsRecord.setMetric(\"index.memoryusage\", indexMemoryUsage.get());\n      metricsRecord.setMetric(\"index.segments\", segmentCount.get());\n      previous = now;\n    }\n    metricsRecord.update();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26bd56bd7f06194390617d646d6b9a24a7a472dd","date":1420576157,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/store/blockcache/Metrics#doUpdates(MetricsContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void doUpdates(MetricsContext context) {\n    synchronized (this) {\n      long now = System.nanoTime();\n      float seconds = (now - previous) / 1000000000.0f;\n      metricsRecord.setMetric(\"blockcache.hit\", getPerSecond(blockCacheHit.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"blockcache.miss\", getPerSecond(blockCacheMiss.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"blockcache.eviction\", getPerSecond(blockCacheEviction.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"blockcache.size\", blockCacheSize.get());\n      metricsRecord.setMetric(\"row.reads\", getPerSecond(rowReads.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"row.writes\", getPerSecond(rowWrites.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"record.reads\", getPerSecond(recordReads.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"record.writes\", getPerSecond(recordWrites.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"query.external\", getPerSecond(queriesExternal.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"query.internal\", getPerSecond(queriesInternal.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"buffercache.allocations\", getPerSecond(shardBuffercacheAllocate.getAndSet(0), seconds));\n      metricsRecord.setMetric(\"buffercache.lost\", getPerSecond(shardBuffercacheLost.getAndSet(0), seconds));\n      for (Entry<String,MethodCall> entry : methodCalls.entrySet()) {\n        String key = entry.getKey();\n        MethodCall value = entry.getValue();\n        long invokes = value.invokes.getAndSet(0);\n        long times = value.times.getAndSet(0);\n        \n        float avgTimes = (times / (float) invokes) / 1000000000.0f;\n        metricsRecord.setMetric(\"methodcalls.\" + key + \".count\", getPerSecond(invokes, seconds));\n        metricsRecord.setMetric(\"methodcalls.\" + key + \".time\", avgTimes);\n      }\n      metricsRecord.setMetric(\"tables\", tableCount.get());\n      metricsRecord.setMetric(\"rows\", rowCount.get());\n      metricsRecord.setMetric(\"records\", recordCount.get());\n      metricsRecord.setMetric(\"index.count\", indexCount.get());\n      metricsRecord.setMetric(\"index.memoryusage\", indexMemoryUsage.get());\n      metricsRecord.setMetric(\"index.segments\", segmentCount.get());\n      previous = now;\n    }\n    metricsRecord.update();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"adc1a805943f03a49f6d5cdc1b010526dab1cfc9":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["26bd56bd7f06194390617d646d6b9a24a7a472dd"],"26bd56bd7f06194390617d646d6b9a24a7a472dd":["adc1a805943f03a49f6d5cdc1b010526dab1cfc9"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","adc1a805943f03a49f6d5cdc1b010526dab1cfc9"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"adc1a805943f03a49f6d5cdc1b010526dab1cfc9":["26bd56bd7f06194390617d646d6b9a24a7a472dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"26bd56bd7f06194390617d646d6b9a24a7a472dd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}