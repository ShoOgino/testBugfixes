{"path":"lucene/src/java/org/apache/lucene/store/Directory#copy(Directory,Directory,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/Directory#copy(Directory,Directory,boolean).mjava","pathOld":"src/java/org/apache/lucene/store/Directory#copy(Directory,Directory,boolean).mjava","sourceNew":"  /**\n   * Copy contents of a directory src to a directory dest.\n   * If a file in src already exists in dest then the\n   * one in dest will be blindly overwritten.\n   *\n   * <p><b>NOTE:</b> the source directory cannot change\n   * while this method is running.  Otherwise the results\n   * are undefined and you could easily hit a\n   * FileNotFoundException.\n   *\n   * <p><b>NOTE:</b> this method only copies files that look\n   * like index files (ie, have extensions matching the\n   * known extensions of index files).\n   *\n   * @param src source directory\n   * @param dest destination directory\n   * @param closeDirSrc if <code>true</code>, call {@link #close()} method on source directory\n   * @throws IOException\n   */\n  public static void copy(Directory src, Directory dest, boolean closeDirSrc) throws IOException {\n    final String[] files = src.listAll();\n\n    IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n\n    byte[] buf = new byte[BufferedIndexOutput.BUFFER_SIZE];\n    for (int i = 0; i < files.length; i++) {\n\n      if (!filter.accept(null, files[i]))\n        continue;\n\n      IndexOutput os = null;\n      IndexInput is = null;\n      try {\n        // create file in dest directory\n        os = dest.createOutput(files[i]);\n        // read current file\n        is = src.openInput(files[i]);\n        // and copy to dest directory\n        long len = is.length();\n        long readCount = 0;\n        while (readCount < len) {\n          int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE > len ? (int)(len - readCount) : BufferedIndexOutput.BUFFER_SIZE;\n          is.readBytes(buf, 0, toRead);\n          os.writeBytes(buf, toRead);\n          readCount += toRead;\n        }\n      } finally {\n        // graceful cleanup\n        try {\n          if (os != null)\n            os.close();\n        } finally {\n          if (is != null)\n            is.close();\n        }\n      }\n    }\n    if(closeDirSrc)\n      src.close();\n  }\n\n","sourceOld":"  /**\n   * Copy contents of a directory src to a directory dest.\n   * If a file in src already exists in dest then the\n   * one in dest will be blindly overwritten.\n   *\n   * <p><b>NOTE:</b> the source directory cannot change\n   * while this method is running.  Otherwise the results\n   * are undefined and you could easily hit a\n   * FileNotFoundException.\n   *\n   * <p><b>NOTE:</b> this method only copies files that look\n   * like index files (ie, have extensions matching the\n   * known extensions of index files).\n   *\n   * @param src source directory\n   * @param dest destination directory\n   * @param closeDirSrc if <code>true</code>, call {@link #close()} method on source directory\n   * @throws IOException\n   */\n  public static void copy(Directory src, Directory dest, boolean closeDirSrc) throws IOException {\n    final String[] files = src.listAll();\n\n    IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n\n    byte[] buf = new byte[BufferedIndexOutput.BUFFER_SIZE];\n    for (int i = 0; i < files.length; i++) {\n\n      if (!filter.accept(null, files[i]))\n        continue;\n\n      IndexOutput os = null;\n      IndexInput is = null;\n      try {\n        // create file in dest directory\n        os = dest.createOutput(files[i]);\n        // read current file\n        is = src.openInput(files[i]);\n        // and copy to dest directory\n        long len = is.length();\n        long readCount = 0;\n        while (readCount < len) {\n          int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE > len ? (int)(len - readCount) : BufferedIndexOutput.BUFFER_SIZE;\n          is.readBytes(buf, 0, toRead);\n          os.writeBytes(buf, toRead);\n          readCount += toRead;\n        }\n      } finally {\n        // graceful cleanup\n        try {\n          if (os != null)\n            os.close();\n        } finally {\n          if (is != null)\n            is.close();\n        }\n      }\n    }\n    if(closeDirSrc)\n      src.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4","date":1269599681,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/Directory#copy(Directory,Directory,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/Directory#copy(Directory,Directory,boolean).mjava","sourceNew":"  /**\n   * Copy contents of a directory src to a directory dest. If a file in src already exists in dest then the one in dest\n   * will be blindly overwritten.\n   * <p/>\n   * <p><b>NOTE:</b> the source directory cannot change while this method is running.  Otherwise the results are\n   * undefined and you could easily hit a FileNotFoundException.\n   * <p/>\n   * <p><b>NOTE:</b> this method only copies files that look like index files (ie, have extensions matching the known\n   * extensions of index files).\n   *\n   * @param src         source directory\n   * @param dest        destination directory\n   * @param closeDirSrc if <code>true</code>, call {@link #close()} method on source directory\n   * @deprecated should be replaced with src.copyTo(dest); [src.close();]\n   */\n  @Deprecated\n  public static void copy(Directory src, Directory dest, boolean closeDirSrc) throws IOException {\n    src.copyTo(dest);\n    if (closeDirSrc)\n      src.close();\n  }\n\n","sourceOld":"  /**\n   * Copy contents of a directory src to a directory dest.\n   * If a file in src already exists in dest then the\n   * one in dest will be blindly overwritten.\n   *\n   * <p><b>NOTE:</b> the source directory cannot change\n   * while this method is running.  Otherwise the results\n   * are undefined and you could easily hit a\n   * FileNotFoundException.\n   *\n   * <p><b>NOTE:</b> this method only copies files that look\n   * like index files (ie, have extensions matching the\n   * known extensions of index files).\n   *\n   * @param src source directory\n   * @param dest destination directory\n   * @param closeDirSrc if <code>true</code>, call {@link #close()} method on source directory\n   * @throws IOException\n   */\n  public static void copy(Directory src, Directory dest, boolean closeDirSrc) throws IOException {\n    final String[] files = src.listAll();\n\n    IndexFileNameFilter filter = IndexFileNameFilter.getFilter();\n\n    byte[] buf = new byte[BufferedIndexOutput.BUFFER_SIZE];\n    for (int i = 0; i < files.length; i++) {\n\n      if (!filter.accept(null, files[i]))\n        continue;\n\n      IndexOutput os = null;\n      IndexInput is = null;\n      try {\n        // create file in dest directory\n        os = dest.createOutput(files[i]);\n        // read current file\n        is = src.openInput(files[i]);\n        // and copy to dest directory\n        long len = is.length();\n        long readCount = 0;\n        while (readCount < len) {\n          int toRead = readCount + BufferedIndexOutput.BUFFER_SIZE > len ? (int)(len - readCount) : BufferedIndexOutput.BUFFER_SIZE;\n          is.readBytes(buf, 0, toRead);\n          os.writeBytes(buf, toRead);\n          readCount += toRead;\n        }\n      } finally {\n        // graceful cleanup\n        try {\n          if (os != null)\n            os.close();\n        } finally {\n          if (is != null)\n            is.close();\n        }\n      }\n    }\n    if(closeDirSrc)\n      src.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/Directory#copy(Directory,Directory,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/Directory#copy(Directory,Directory,boolean).mjava","sourceNew":"  /**\n   * Copy contents of a directory src to a directory dest. If a file in src\n   * already exists in dest then the one in dest will be blindly overwritten.\n   * <p>\n   * <b>NOTE:</b> the source directory cannot change while this method is\n   * running. Otherwise the results are undefined and you could easily hit a\n   * FileNotFoundException.\n   * <p>\n   * <b>NOTE:</b> this method only copies files that look like index files (ie,\n   * have extensions matching the known extensions of index files).\n   * \n   * @param src source directory\n   * @param dest destination directory\n   * @param closeDirSrc if <code>true</code>, call {@link #close()} method on \n   *        source directory\n   * @deprecated should be replaced with calls to\n   *             {@link #copy(Directory, String, String)} for every file that\n   *             needs copying. You can use the following code:\n   * \n   * <pre>\n   * for (String file : src.listAll()) {\n   *   src.copy(dest, file, file);\n   * }\n   * </pre>\n   */\n  public static void copy(Directory src, Directory dest, boolean closeDirSrc) throws IOException {\n    for (String file : src.listAll()) {\n      src.copy(dest, file, file);\n    }\n    if (closeDirSrc) {\n      src.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy contents of a directory src to a directory dest. If a file in src already exists in dest then the one in dest\n   * will be blindly overwritten.\n   * <p/>\n   * <p><b>NOTE:</b> the source directory cannot change while this method is running.  Otherwise the results are\n   * undefined and you could easily hit a FileNotFoundException.\n   * <p/>\n   * <p><b>NOTE:</b> this method only copies files that look like index files (ie, have extensions matching the known\n   * extensions of index files).\n   *\n   * @param src         source directory\n   * @param dest        destination directory\n   * @param closeDirSrc if <code>true</code>, call {@link #close()} method on source directory\n   * @deprecated should be replaced with src.copyTo(dest); [src.close();]\n   */\n  @Deprecated\n  public static void copy(Directory src, Directory dest, boolean closeDirSrc) throws IOException {\n    src.copyTo(dest);\n    if (closeDirSrc)\n      src.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"068265517d1fbc623f5aeaee57fcd8df925678e4","date":1286043654,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/Directory#copy(Directory,Directory,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/Directory#copy(Directory,Directory,boolean).mjava","sourceNew":"  /**\n   * Copy contents of a directory src to a directory dest. If a file in src\n   * already exists in dest then the one in dest will be blindly overwritten.\n   * <p>\n   * <b>NOTE:</b> the source directory cannot change while this method is\n   * running. Otherwise the results are undefined and you could easily hit a\n   * FileNotFoundException.\n   * <p>\n   * <b>NOTE:</b> this method only copies files that look like index files (ie,\n   * have extensions matching the known extensions of index files).\n   * \n   * @param src source directory\n   * @param dest destination directory\n   * @param closeDirSrc if <code>true</code>, call {@link #close()} method on \n   *        source directory\n   * @deprecated should be replaced with calls to\n   *             {@link #copy(Directory, String, String)} for every file that\n   *             needs copying. You can use the following code:\n   * \n   * <pre>\n   * for (String file : src.listAll()) {\n   *   src.copy(dest, file, file);\n   * }\n   * </pre>\n   */\n  @Deprecated\n  public static void copy(Directory src, Directory dest, boolean closeDirSrc) throws IOException {\n    for (String file : src.listAll()) {\n      src.copy(dest, file, file);\n    }\n    if (closeDirSrc) {\n      src.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Copy contents of a directory src to a directory dest. If a file in src\n   * already exists in dest then the one in dest will be blindly overwritten.\n   * <p>\n   * <b>NOTE:</b> the source directory cannot change while this method is\n   * running. Otherwise the results are undefined and you could easily hit a\n   * FileNotFoundException.\n   * <p>\n   * <b>NOTE:</b> this method only copies files that look like index files (ie,\n   * have extensions matching the known extensions of index files).\n   * \n   * @param src source directory\n   * @param dest destination directory\n   * @param closeDirSrc if <code>true</code>, call {@link #close()} method on \n   *        source directory\n   * @deprecated should be replaced with calls to\n   *             {@link #copy(Directory, String, String)} for every file that\n   *             needs copying. You can use the following code:\n   * \n   * <pre>\n   * for (String file : src.listAll()) {\n   *   src.copy(dest, file, file);\n   * }\n   * </pre>\n   */\n  public static void copy(Directory src, Directory dest, boolean closeDirSrc) throws IOException {\n    for (String file : src.listAll()) {\n      src.copy(dest, file, file);\n    }\n    if (closeDirSrc) {\n      src.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/store/Directory#copy(Directory,Directory,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copy contents of a directory src to a directory dest. If a file in src\n   * already exists in dest then the one in dest will be blindly overwritten.\n   * <p>\n   * <b>NOTE:</b> the source directory cannot change while this method is\n   * running. Otherwise the results are undefined and you could easily hit a\n   * FileNotFoundException.\n   * <p>\n   * <b>NOTE:</b> this method only copies files that look like index files (ie,\n   * have extensions matching the known extensions of index files).\n   * \n   * @param src source directory\n   * @param dest destination directory\n   * @param closeDirSrc if <code>true</code>, call {@link #close()} method on \n   *        source directory\n   * @deprecated should be replaced with calls to\n   *             {@link #copy(Directory, String, String)} for every file that\n   *             needs copying. You can use the following code:\n   * \n   * <pre>\n   * for (String file : src.listAll()) {\n   *   src.copy(dest, file, file);\n   * }\n   * </pre>\n   */\n  @Deprecated\n  public static void copy(Directory src, Directory dest, boolean closeDirSrc) throws IOException {\n    for (String file : src.listAll()) {\n      src.copy(dest, file, file);\n    }\n    if (closeDirSrc) {\n      src.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/store/Directory#copy(Directory,Directory,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copy contents of a directory src to a directory dest. If a file in src\n   * already exists in dest then the one in dest will be blindly overwritten.\n   * <p>\n   * <b>NOTE:</b> the source directory cannot change while this method is\n   * running. Otherwise the results are undefined and you could easily hit a\n   * FileNotFoundException.\n   * <p>\n   * <b>NOTE:</b> this method only copies files that look like index files (ie,\n   * have extensions matching the known extensions of index files).\n   * \n   * @param src source directory\n   * @param dest destination directory\n   * @param closeDirSrc if <code>true</code>, call {@link #close()} method on \n   *        source directory\n   * @deprecated should be replaced with calls to\n   *             {@link #copy(Directory, String, String)} for every file that\n   *             needs copying. You can use the following code:\n   * \n   * <pre>\n   * for (String file : src.listAll()) {\n   *   src.copy(dest, file, file);\n   * }\n   * </pre>\n   */\n  @Deprecated\n  public static void copy(Directory src, Directory dest, boolean closeDirSrc) throws IOException {\n    for (String file : src.listAll()) {\n      src.copy(dest, file, file);\n    }\n    if (closeDirSrc) {\n      src.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/store/Directory#copy(Directory,Directory,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copy contents of a directory src to a directory dest. If a file in src\n   * already exists in dest then the one in dest will be blindly overwritten.\n   * <p>\n   * <b>NOTE:</b> the source directory cannot change while this method is\n   * running. Otherwise the results are undefined and you could easily hit a\n   * FileNotFoundException.\n   * <p>\n   * <b>NOTE:</b> this method only copies files that look like index files (ie,\n   * have extensions matching the known extensions of index files).\n   * \n   * @param src source directory\n   * @param dest destination directory\n   * @param closeDirSrc if <code>true</code>, call {@link #close()} method on \n   *        source directory\n   * @deprecated should be replaced with calls to\n   *             {@link #copy(Directory, String, String)} for every file that\n   *             needs copying. You can use the following code:\n   * \n   * <pre>\n   * for (String file : src.listAll()) {\n   *   src.copy(dest, file, file);\n   * }\n   * </pre>\n   */\n  public static void copy(Directory src, Directory dest, boolean closeDirSrc) throws IOException {\n    for (String file : src.listAll()) {\n      src.copy(dest, file, file);\n    }\n    if (closeDirSrc) {\n      src.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"068265517d1fbc623f5aeaee57fcd8df925678e4":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["068265517d1fbc623f5aeaee57fcd8df925678e4","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["068265517d1fbc623f5aeaee57fcd8df925678e4"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"068265517d1fbc623f5aeaee57fcd8df925678e4":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ec2cffca1d4e939384a51d2f67dc7687fcb5d7a4"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["068265517d1fbc623f5aeaee57fcd8df925678e4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}