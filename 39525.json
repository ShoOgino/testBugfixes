{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testNonIndexedFields().mjava","commits":[{"id":"8c146731a64debc22c115bbf11ee1a060aa7ea02","date":1457616596,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testNonIndexedFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testNonIndexedFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StoredField(\"bogusbytes\", \"bogus\"));\n    doc.add(new StoredField(\"bogusshorts\", \"bogus\"));\n    doc.add(new StoredField(\"bogusints\", \"bogus\"));\n    doc.add(new StoredField(\"boguslongs\", \"bogus\"));\n    doc.add(new StoredField(\"bogusfloats\", \"bogus\"));\n    doc.add(new StoredField(\"bogusdoubles\", \"bogus\"));\n    doc.add(new StoredField(\"bogusbits\", \"bogus\"));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LEGACY_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.LEGACY_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testNonIndexedFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testNonIndexedFields().mjava","sourceNew":"  public void testNonIndexedFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StoredField(\"bogusbytes\", \"bogus\"));\n    doc.add(new StoredField(\"bogusshorts\", \"bogus\"));\n    doc.add(new StoredField(\"bogusints\", \"bogus\"));\n    doc.add(new StoredField(\"boguslongs\", \"bogus\"));\n    doc.add(new StoredField(\"bogusfloats\", \"bogus\"));\n    doc.add(new StoredField(\"bogusdoubles\", \"bogus\"));\n    doc.add(new StoredField(\"bogusbits\", \"bogus\"));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LEGACY_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.LEGACY_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonIndexedFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StoredField(\"bogusbytes\", \"bogus\"));\n    doc.add(new StoredField(\"bogusshorts\", \"bogus\"));\n    doc.add(new StoredField(\"bogusints\", \"bogus\"));\n    doc.add(new StoredField(\"boguslongs\", \"bogus\"));\n    doc.add(new StoredField(\"bogusfloats\", \"bogus\"));\n    doc.add(new StoredField(\"bogusdoubles\", \"bogus\"));\n    doc.add(new StoredField(\"bogusbits\", \"bogus\"));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LEGACY_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.LEGACY_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#testNonIndexedFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testNonIndexedFields().mjava","sourceNew":"  public void testNonIndexedFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StoredField(\"bogusbytes\", \"bogus\"));\n    doc.add(new StoredField(\"bogusshorts\", \"bogus\"));\n    doc.add(new StoredField(\"bogusints\", \"bogus\"));\n    doc.add(new StoredField(\"boguslongs\", \"bogus\"));\n    doc.add(new StoredField(\"bogusfloats\", \"bogus\"));\n    doc.add(new StoredField(\"bogusdoubles\", \"bogus\"));\n    doc.add(new StoredField(\"bogusbits\", \"bogus\"));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LEGACY_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.LEGACY_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonIndexedFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StoredField(\"bogusbytes\", \"bogus\"));\n    doc.add(new StoredField(\"bogusshorts\", \"bogus\"));\n    doc.add(new StoredField(\"bogusints\", \"bogus\"));\n    doc.add(new StoredField(\"boguslongs\", \"bogus\"));\n    doc.add(new StoredField(\"bogusfloats\", \"bogus\"));\n    doc.add(new StoredField(\"bogusdoubles\", \"bogus\"));\n    doc.add(new StoredField(\"bogusbits\", \"bogus\"));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LEGACY_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.LEGACY_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#testNonIndexedFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testNonIndexedFields().mjava","sourceNew":"  public void testNonIndexedFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StoredField(\"bogusbytes\", \"bogus\"));\n    doc.add(new StoredField(\"bogusshorts\", \"bogus\"));\n    doc.add(new StoredField(\"bogusints\", \"bogus\"));\n    doc.add(new StoredField(\"boguslongs\", \"bogus\"));\n    doc.add(new StoredField(\"bogusfloats\", \"bogus\"));\n    doc.add(new StoredField(\"bogusdoubles\", \"bogus\"));\n    doc.add(new StoredField(\"bogusbits\", \"bogus\"));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LEGACY_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.LEGACY_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonIndexedFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StoredField(\"bogusbytes\", \"bogus\"));\n    doc.add(new StoredField(\"bogusshorts\", \"bogus\"));\n    doc.add(new StoredField(\"bogusints\", \"bogus\"));\n    doc.add(new StoredField(\"boguslongs\", \"bogus\"));\n    doc.add(new StoredField(\"bogusfloats\", \"bogus\"));\n    doc.add(new StoredField(\"bogusdoubles\", \"bogus\"));\n    doc.add(new StoredField(\"bogusbits\", \"bogus\"));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LEGACY_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.LEGACY_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestLegacyFieldCache#testNonIndexedFields().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testNonIndexedFields().mjava","sourceNew":"  public void testNonIndexedFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StoredField(\"bogusbytes\", \"bogus\"));\n    doc.add(new StoredField(\"bogusshorts\", \"bogus\"));\n    doc.add(new StoredField(\"bogusints\", \"bogus\"));\n    doc.add(new StoredField(\"boguslongs\", \"bogus\"));\n    doc.add(new StoredField(\"bogusfloats\", \"bogus\"));\n    doc.add(new StoredField(\"bogusdoubles\", \"bogus\"));\n    doc.add(new StoredField(\"bogusbits\", \"bogus\"));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LEGACY_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.LEGACY_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonIndexedFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StoredField(\"bogusbytes\", \"bogus\"));\n    doc.add(new StoredField(\"bogusshorts\", \"bogus\"));\n    doc.add(new StoredField(\"bogusints\", \"bogus\"));\n    doc.add(new StoredField(\"boguslongs\", \"bogus\"));\n    doc.add(new StoredField(\"bogusfloats\", \"bogus\"));\n    doc.add(new StoredField(\"bogusdoubles\", \"bogus\"));\n    doc.add(new StoredField(\"bogusbits\", \"bogus\"));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LEGACY_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.LEGACY_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestLegacyFieldCache#testNonIndexedFields().mjava","sourceNew":null,"sourceOld":"  public void testNonIndexedFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    doc.add(new StoredField(\"bogusbytes\", \"bogus\"));\n    doc.add(new StoredField(\"bogusshorts\", \"bogus\"));\n    doc.add(new StoredField(\"bogusints\", \"bogus\"));\n    doc.add(new StoredField(\"boguslongs\", \"bogus\"));\n    doc.add(new StoredField(\"bogusfloats\", \"bogus\"));\n    doc.add(new StoredField(\"bogusdoubles\", \"bogus\"));\n    doc.add(new StoredField(\"bogusbits\", \"bogus\"));\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    LeafReader ar = getOnlyLeafReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.LEGACY_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.LEGACY_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.LEGACY_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.LEGACY_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83870855d82aba6819217abeff5a40779dbb28b4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c146731a64debc22c115bbf11ee1a060aa7ea02"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"8c146731a64debc22c115bbf11ee1a060aa7ea02":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}