{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#launchThreads(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#launchThreads(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockRAMDirectory(dir);\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockRAMDirectory(dir);\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockDirectoryWrapper(new RAMDirectory(dir));\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockRAMDirectory(dir);\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes.RunAddIndexesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockDirectoryWrapper(new RAMDirectory(dir));\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockDirectoryWrapper(new RAMDirectory(dir));\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAddIndexes.RunAddIndexesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockDirectoryWrapper(new RAMDirectory(dir));\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockDirectoryWrapper(new RAMDirectory(dir));\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter.RunAddIndexesThreads#launchThreads(int).mjava","sourceNew":null,"sourceOld":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockRAMDirectory(dir);\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a05409176bd65129d67a785ee70e881e238a9aef","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["a05409176bd65129d67a785ee70e881e238a9aef"],"a05409176bd65129d67a785ee70e881e238a9aef":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85a883878c0af761245ab048babc63d099f835f3":[],"a05409176bd65129d67a785ee70e881e238a9aef":["85a883878c0af761245ab048babc63d099f835f3","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a05409176bd65129d67a785ee70e881e238a9aef","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}