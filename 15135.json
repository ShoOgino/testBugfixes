{"path":"solr/core/src/test/org/apache/solr/cloud/CdcrRequestHandlerTest#doTestCheckpointActions().mjava","commits":[{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrRequestHandlerTest#doTestCheckpointActions().mjava","pathOld":"/dev/null","sourceNew":"  // check the checkpoint API\n  public void doTestCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\")); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d030a7298c5397ab744a356c18ccda17f76f77f7","d030a7298c5397ab744a356c18ccda17f76f77f7","d030a7298c5397ab744a356c18ccda17f76f77f7","d030a7298c5397ab744a356c18ccda17f76f77f7","d030a7298c5397ab744a356c18ccda17f76f77f7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrRequestHandlerTest#testCheckpointActions().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrRequestHandlerTest#doTestCheckpointActions().mjava","sourceNew":"  // check the checkpoint API\n  @Test\n  @ShardsFixed(num = 2)\n  public void testCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\")); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","sourceOld":"  // check the checkpoint API\n  public void doTestCheckpointActions() throws Exception {\n    // initial request on an empty index, must return -1\n    NamedList rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"a\")); // shard 2\n\n    // only one document indexed in shard 2, the checkpoint must be still -1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(-1l, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"b\")); // shard 1\n\n    // a second document indexed in shard 1, the checkpoint must come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint1 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    long expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint1);\n\n    index(SOURCE_COLLECTION, getDoc(id, \"c\")); // shard 1\n\n    // a third document indexed in shard 1, the checkpoint must still come from shard 2\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    assertEquals(checkpoint1, rsp.get(CdcrParams.CHECKPOINT));\n\n    index(SOURCE_COLLECTION, getDoc(id, \"d\")); // shard 2\n\n    // a fourth document indexed in shard 2, the checkpoint must come from shard 1\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint2 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    expected = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertEquals(expected, checkpoint2);\n\n    // send a delete by query\n    deleteByQuery(SOURCE_COLLECTION, \"*:*\");\n\n    // all the checkpoints must come from the DBQ\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.COLLECTIONCHECKPOINT);\n    long checkpoint3 = (Long) rsp.get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n    checkpoint3 = (Long) invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.SHARDCHECKPOINT).get(CdcrParams.CHECKPOINT);\n    assertTrue(checkpoint3 > 0); // ensure that checkpoints from deletes are in absolute form\n\n    // replication never started, lastProcessedVersion should be -1 for both shards\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    long lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n\n    rsp = invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD2), CdcrParams.CdcrAction.LASTPROCESSEDVERSION);\n    lastVersion = (Long) rsp.get(CdcrParams.LAST_PROCESSED_VERSION);\n    assertEquals(-1l, lastVersion);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"]},"commit2Childs":{"86290366cefc1b9d4eced13b430858c4a4c0421d":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}