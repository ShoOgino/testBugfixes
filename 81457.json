{"path":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseXYPointTestCase#testMultiValued().mjava","commits":[{"id":"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04","date":1582280790,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/geo/BaseXYPointTestCase#testMultiValued().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiValued() throws Exception {\n    int numPoints = atLeast(1000);\n    // Every doc has 2 points:\n    float[] xs = new float[2*numPoints];\n    float[] ys = new float[2*numPoints];\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n\n    // We rely on docID order:\n    iwc.setMergePolicy(newLogMergePolicy());\n    // and on seeds being able to reproduce:\n    iwc.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir, iwc);\n\n    for (int id=0;id<numPoints;id++) {\n      Document doc = new Document();\n      xs[2*id] = nextX();\n      ys[2*id] = nextY();\n      doc.add(newStringField(\"id\", \"\"+id, Field.Store.YES));\n      addPointToDoc(FIELD_NAME, doc, xs[2*id], ys[2*id]);\n      xs[2*id+1] = nextX();\n      ys[2*id+1] = nextY();\n      addPointToDoc(FIELD_NAME, doc, xs[2*id+1], ys[2*id+1]);\n\n      if (VERBOSE) {\n        System.out.println(\"id=\" + id);\n        System.out.println(\"  x=\" + xs[2*id] + \" y=\" + ys[2*id]);\n        System.out.println(\"  x=\" + xs[2*id+1] + \" y=\" + ys[2*id+1]);\n      }\n      w.addDocument(doc);\n    }\n\n    // TODO: share w/ verify; just need parallel array of the expected ids\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n    IndexReader r = w.getReader();\n    w.close();\n\n    IndexSearcher s = newSearcher(r);\n\n    int iters = atLeast(25);\n    for (int iter=0;iter<iters;iter++) {\n      XYRectangle rect = nextBox();\n\n      if (VERBOSE) {\n        System.out.println(\"\\nTEST: iter=\" + iter + \" rect=\" + rect);\n      }\n\n      Query query = newRectQuery(FIELD_NAME, rect.minX, rect.maxX, rect.minY, rect.maxY);\n\n      final FixedBitSet hits = new FixedBitSet(r.maxDoc());\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public ScoreMode scoreMode() {\n            return ScoreMode.COMPLETE_NO_SCORES;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      boolean fail = false;\n\n      for(int docID=0;docID<ys.length/2;docID++) {\n        float yDoc1 = ys[2*docID];\n        float xDoc1 = xs[2*docID];\n        float yDoc2 = ys[2*docID+1];\n        float xDoc2 = xs[2*docID+1];\n        \n        boolean result1 = rectContainsPoint(rect, xDoc1, yDoc1);\n        boolean result2 = rectContainsPoint(rect, xDoc2, yDoc2);\n\n        boolean expected = result1 || result2;\n\n        if (hits.get(docID) != expected) {\n          String id = s.doc(docID).get(\"id\");\n          if (expected) {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should match but did not\");\n          } else {\n            System.out.println(\"TEST: id=\" + id + \" docID=\" + docID + \" should not match but did\");\n          }\n          System.out.println(\"  rect=\" + rect);\n          System.out.println(\"  x=\" + xDoc1 + \" y=\" + yDoc1 + \"\\n  x=\" + xDoc2 + \" y\" + yDoc2);\n          System.out.println(\"  result1=\" + result1 + \" result2=\" + result2);\n          fail = true;\n        }\n      }\n\n      if (fail) {\n        fail(\"some hits were wrong\");\n      }\n    }\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04"],"0b0a0cc5a33a45ace11b2e1e09fa39ce852e1a04":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}