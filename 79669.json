{"path":"lucene/core/src/java/org/apache/lucene/search/SearcherLifetimeManager#record(IndexSearcher).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherLifetimeManager#record(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherLifetimeManager#record(IndexSearcher).mjava","sourceNew":"  /** Records that you are now using this IndexSearcher.\n   *  Always call this when you've obtained a possibly new\n   *  {@link IndexSearcher}, for example from one of the\n   *  <code>get</code> methods in {@link NRTManager} or {@link\n   *  SearcherManager}.  It's fine if you already passed the\n   *  same searcher to this method before.\n   *\n   *  <p>This returns the long token that you can later pass\n   *  to {@link #acquire} to retrieve the same IndexSearcher.\n   *  You should record this long token in the search results\n   *  sent to your user, such that if the user performs a\n   *  follow-on action (clicks next page, drills down, etc.)\n   *  the token is returned. */\n  public long record(IndexSearcher searcher) throws IOException {\n    ensureOpen();\n    // TODO: we don't have to use IR.getVersion to track;\n    // could be risky (if it's buggy); we could get better\n    // bug isolation if we assign our own private ID:\n    final long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n    SearcherTracker tracker = searchers.get(version);\n    if (tracker == null) {\n      //System.out.println(\"RECORD version=\" + version + \" ms=\" + System.currentTimeMillis());\n      tracker = new SearcherTracker(searcher);\n      if (searchers.putIfAbsent(version, tracker) != null) {\n        // Another thread beat us -- must decRef to undo\n        // incRef done by SearcherTracker ctor:\n        tracker.close();\n      }\n    } else if (tracker.searcher != searcher) {\n      throw new IllegalArgumentException(\"the provided searcher has the same underlying reader version yet the searcher instance differs from before (new=\" + searcher + \" vs old=\" + tracker.searcher);\n    }\n\n    return version;\n  }\n\n","sourceOld":"  /** Records that you are now using this IndexSearcher.\n   *  Always call this when you've obtained a possibly new\n   *  {@link IndexSearcher}, for example from one of the\n   *  <code>get</code> methods in {@link NRTManager} or {@link\n   *  SearcherManager}.  It's fine if you already passed the\n   *  same searcher to this method before.\n   *\n   *  <p>This returns the long token that you can later pass\n   *  to {@link #acquire} to retrieve the same IndexSearcher.\n   *  You should record this long token in the search results\n   *  sent to your user, such that if the user performs a\n   *  follow-on action (clicks next page, drills down, etc.)\n   *  the token is returned. */\n  public long record(IndexSearcher searcher) throws IOException {\n    ensureOpen();\n    // TODO: we don't have to use IR.getVersion to track;\n    // could be risky (if it's buggy); we could get better\n    // bug isolation if we assign our own private ID:\n    final long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n    SearcherTracker tracker = searchers.get(version);\n    if (tracker == null) {\n      //System.out.println(\"RECORD version=\" + version + \" ms=\" + System.currentTimeMillis());\n      tracker = new SearcherTracker(searcher);\n      if (searchers.putIfAbsent(version, tracker) != null) {\n        // Another thread beat us -- must decRef to undo\n        // incRef done by SearcherTracker ctor:\n        tracker.close();\n      }\n    } else if (tracker.searcher != searcher) {\n      throw new IllegalArgumentException(\"the provided searcher has the same underlying reader version yet the searcher instance differs from before (new=\" + searcher + \" vs old=\" + tracker.searcher);\n    }\n\n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2045b132a2396bb23dff28d2d9f349a6907d36e","date":1367513076,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherLifetimeManager#record(IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherLifetimeManager#record(IndexSearcher).mjava","sourceNew":"  /** Records that you are now using this IndexSearcher.\n   *  Always call this when you've obtained a possibly new\n   *  {@link IndexSearcher}, for example from {@link\n   *  SearcherManager}.  It's fine if you already passed the\n   *  same searcher to this method before.\n   *\n   *  <p>This returns the long token that you can later pass\n   *  to {@link #acquire} to retrieve the same IndexSearcher.\n   *  You should record this long token in the search results\n   *  sent to your user, such that if the user performs a\n   *  follow-on action (clicks next page, drills down, etc.)\n   *  the token is returned. */\n  public long record(IndexSearcher searcher) throws IOException {\n    ensureOpen();\n    // TODO: we don't have to use IR.getVersion to track;\n    // could be risky (if it's buggy); we could get better\n    // bug isolation if we assign our own private ID:\n    final long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n    SearcherTracker tracker = searchers.get(version);\n    if (tracker == null) {\n      //System.out.println(\"RECORD version=\" + version + \" ms=\" + System.currentTimeMillis());\n      tracker = new SearcherTracker(searcher);\n      if (searchers.putIfAbsent(version, tracker) != null) {\n        // Another thread beat us -- must decRef to undo\n        // incRef done by SearcherTracker ctor:\n        tracker.close();\n      }\n    } else if (tracker.searcher != searcher) {\n      throw new IllegalArgumentException(\"the provided searcher has the same underlying reader version yet the searcher instance differs from before (new=\" + searcher + \" vs old=\" + tracker.searcher);\n    }\n\n    return version;\n  }\n\n","sourceOld":"  /** Records that you are now using this IndexSearcher.\n   *  Always call this when you've obtained a possibly new\n   *  {@link IndexSearcher}, for example from one of the\n   *  <code>get</code> methods in {@link NRTManager} or {@link\n   *  SearcherManager}.  It's fine if you already passed the\n   *  same searcher to this method before.\n   *\n   *  <p>This returns the long token that you can later pass\n   *  to {@link #acquire} to retrieve the same IndexSearcher.\n   *  You should record this long token in the search results\n   *  sent to your user, such that if the user performs a\n   *  follow-on action (clicks next page, drills down, etc.)\n   *  the token is returned. */\n  public long record(IndexSearcher searcher) throws IOException {\n    ensureOpen();\n    // TODO: we don't have to use IR.getVersion to track;\n    // could be risky (if it's buggy); we could get better\n    // bug isolation if we assign our own private ID:\n    final long version = ((DirectoryReader) searcher.getIndexReader()).getVersion();\n    SearcherTracker tracker = searchers.get(version);\n    if (tracker == null) {\n      //System.out.println(\"RECORD version=\" + version + \" ms=\" + System.currentTimeMillis());\n      tracker = new SearcherTracker(searcher);\n      if (searchers.putIfAbsent(version, tracker) != null) {\n        // Another thread beat us -- must decRef to undo\n        // incRef done by SearcherTracker ctor:\n        tracker.close();\n      }\n    } else if (tracker.searcher != searcher) {\n      throw new IllegalArgumentException(\"the provided searcher has the same underlying reader version yet the searcher instance differs from before (new=\" + searcher + \" vs old=\" + tracker.searcher);\n    }\n\n    return version;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2045b132a2396bb23dff28d2d9f349a6907d36e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c2045b132a2396bb23dff28d2d9f349a6907d36e"]},"commit2Childs":{"c2045b132a2396bb23dff28d2d9f349a6907d36e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c2045b132a2396bb23dff28d2d9f349a6907d36e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}