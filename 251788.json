{"path":"solr/core/src/test/org/apache/solr/core/CoreSorterTest.MockCoreSorter#MockCoreSorter().mjava","commits":[{"id":"e22a92d60a5a6320f9653856966fcd77c60953b3","date":1468676579,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreSorterTest.MockCoreSorter#MockCoreSorter().mjava","pathOld":"/dev/null","sourceNew":"    public MockCoreSorter() {\n      int totalNodes = 50 + random().nextInt(10);\n      int myNode = random().nextInt(totalNodes);\n      List<String> nodeNames = new ArrayList<>();\n      for (int i = 0; i < totalNodes; i++) {\n        String s = \"192.168.1.\" + i + \":8983_solr\";\n        if (i == myNode) myNodeName = s;\n        boolean on = random().nextInt(100) < 70;\n        nodes.put(s,\n            on);//70% chance that the node is up;\n        nodeNames.add(s);\n        if(on) liveNodes.add(s);\n      }\n\n      for (int i = 0; i < numColls; i++) {\n        for (int j = 0; j < numShards; j++) {\n          for (int k = 0; k < numReplicas; k++) {\n            ReplicaInfo ri = new ReplicaInfo(i, j, k);\n            replicaPositions.put(ri, nodeNames.get(random().nextInt(totalNodes)));\n          }\n        }\n      }\n\n      for (Map.Entry<ReplicaInfo, String> e : replicaPositions.entrySet()) {\n        if (e.getValue().equals(myNodeName)) {\n          myCores.add(e.getKey().getCloudDescriptor());\n          localCores.add(new MockCoreContainer.MockCoreDescriptor() {\n            @Override\n            public CloudDescriptor getCloudDescriptor() {\n              return e.getKey().getCloudDescriptor();\n            }\n          });\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/CoreSorterTest.MockCoreSorter#MockCoreSorter().mjava","pathOld":"/dev/null","sourceNew":"    public MockCoreSorter() {\n      int totalNodes = 50 + random().nextInt(10);\n      int myNode = random().nextInt(totalNodes);\n      List<String> nodeNames = new ArrayList<>();\n      for (int i = 0; i < totalNodes; i++) {\n        String s = \"192.168.1.\" + i + \":8983_solr\";\n        if (i == myNode) myNodeName = s;\n        boolean on = random().nextInt(100) < 70;\n        nodes.put(s,\n            on);//70% chance that the node is up;\n        nodeNames.add(s);\n        if(on) liveNodes.add(s);\n      }\n\n      for (int i = 0; i < numColls; i++) {\n        for (int j = 0; j < numShards; j++) {\n          for (int k = 0; k < numReplicas; k++) {\n            ReplicaInfo ri = new ReplicaInfo(i, j, k);\n            replicaPositions.put(ri, nodeNames.get(random().nextInt(totalNodes)));\n          }\n        }\n      }\n\n      for (Map.Entry<ReplicaInfo, String> e : replicaPositions.entrySet()) {\n        if (e.getValue().equals(myNodeName)) {\n          myCores.add(e.getKey().getCloudDescriptor());\n          localCores.add(new MockCoreContainer.MockCoreDescriptor() {\n            @Override\n            public CloudDescriptor getCloudDescriptor() {\n              return e.getKey().getCloudDescriptor();\n            }\n          });\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"919b9b89b8d44ea491f18a92e6d52efcf5f7a065","date":1585280660,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/core/CoreSorterTest.MockCoreSorter#MockCoreSorter().mjava","sourceNew":null,"sourceOld":"    public MockCoreSorter() {\n      int totalNodes = 50 + random().nextInt(10);\n      int myNode = random().nextInt(totalNodes);\n      List<String> nodeNames = new ArrayList<>();\n      for (int i = 0; i < totalNodes; i++) {\n        String s = \"192.168.1.\" + i + \":8983_solr\";\n        if (i == myNode) myNodeName = s;\n        boolean on = random().nextInt(100) < 70;\n        nodes.put(s,\n            on);//70% chance that the node is up;\n        nodeNames.add(s);\n        if(on) liveNodes.add(s);\n      }\n\n      for (int i = 0; i < numColls; i++) {\n        for (int j = 0; j < numShards; j++) {\n          for (int k = 0; k < numReplicas; k++) {\n            ReplicaInfo ri = new ReplicaInfo(i, j, k);\n            replicaPositions.put(ri, nodeNames.get(random().nextInt(totalNodes)));\n          }\n        }\n      }\n\n      for (Map.Entry<ReplicaInfo, String> e : replicaPositions.entrySet()) {\n        if (e.getValue().equals(myNodeName)) {\n          myCores.add(e.getKey().getCloudDescriptor());\n          localCores.add(new MockCoreContainer.MockCoreDescriptor() {\n            @Override\n            public CloudDescriptor getCloudDescriptor() {\n              return e.getKey().getCloudDescriptor();\n            }\n          });\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"919b9b89b8d44ea491f18a92e6d52efcf5f7a065":["e22a92d60a5a6320f9653856966fcd77c60953b3"],"e22a92d60a5a6320f9653856966fcd77c60953b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e22a92d60a5a6320f9653856966fcd77c60953b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["919b9b89b8d44ea491f18a92e6d52efcf5f7a065"]},"commit2Childs":{"919b9b89b8d44ea491f18a92e6d52efcf5f7a065":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e22a92d60a5a6320f9653856966fcd77c60953b3":["919b9b89b8d44ea491f18a92e6d52efcf5f7a065","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e22a92d60a5a6320f9653856966fcd77c60953b3","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}