{"path":"src/test/org/apache/solr/search/TestFastLRUCache#useCache(SolrCache,int,int,int).mjava","commits":[{"id":"516bcb3c0d409157f56056e1ecd5e5361ca4ae0b","date":1225722778,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestFastLRUCache#useCache(SolrCache,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /***\n  public void testPerf() {\n    doPerfTest(1000000, 100000, 200000); // big cache, warmup\n    doPerfTest(2000000, 100000, 200000); // big cache\n    doPerfTest(2000000, 100000, 120000);  // smaller key space increases distance between oldest, newest and makes the first passes less effective.\n    doPerfTest(6000000, 1000, 2000);    // small cache, smaller hit rate\n    doPerfTest(6000000, 1000, 1200);    // small cache, bigger hit rate\n  }\n  ***/\n\n  // returns number of puts\n  int useCache(SolrCache sc, int numGets, int maxKey, int seed) {\n    int ret = 0;\n    Random r = new Random(seed);\n    \n    // use like a cache... gets and a put if not found\n    for (int i=0; i<numGets; i++) {\n      Integer k = r.nextInt(maxKey);\n      Integer v = (Integer)sc.get(k);\n      if (v == null) {\n        sc.put(k, k);\n        ret++;\n      }\n    }\n\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"48dd7857ec646cce5ab6c5e7c48a27754559f4be","date":1234349649,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestFastLRUCache#useCache(SolrCache,int,int,int).mjava","pathOld":"src/test/org/apache/solr/search/TestFastLRUCache#useCache(SolrCache,int,int,int).mjava","sourceNew":"  /***\n  public void testPerf() {\n    doPerfTest(1000000, 100000, 200000); // big cache, warmup\n    doPerfTest(2000000, 100000, 200000); // big cache\n    doPerfTest(2000000, 100000, 120000);  // smaller key space increases distance between oldest, newest and makes the first passes less effective.\n    doPerfTest(6000000, 1000, 2000);    // small cache, smaller hit rate\n    doPerfTest(6000000, 1000, 1200);    // small cache, bigger hit rate\n  }\n  ***/\n\n  // returns number of puts\n  int useCache(SolrCache sc, int numGets, int maxKey, int seed) {\n    int ret = 0;\n    Random r = new Random(seed);\n\n    // use like a cache... gets and a put if not found\n    for (int i=0; i<numGets; i++) {\n      Integer k = r.nextInt(maxKey);\n      Integer v = (Integer)sc.get(k);\n      if (v == null) {\n        sc.put(k, k);\n        ret++;\n      }\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  /***\n  public void testPerf() {\n    doPerfTest(1000000, 100000, 200000); // big cache, warmup\n    doPerfTest(2000000, 100000, 200000); // big cache\n    doPerfTest(2000000, 100000, 120000);  // smaller key space increases distance between oldest, newest and makes the first passes less effective.\n    doPerfTest(6000000, 1000, 2000);    // small cache, smaller hit rate\n    doPerfTest(6000000, 1000, 1200);    // small cache, bigger hit rate\n  }\n  ***/\n\n  // returns number of puts\n  int useCache(SolrCache sc, int numGets, int maxKey, int seed) {\n    int ret = 0;\n    Random r = new Random(seed);\n    \n    // use like a cache... gets and a put if not found\n    for (int i=0; i<numGets; i++) {\n      Integer k = r.nextInt(maxKey);\n      Integer v = (Integer)sc.get(k);\n      if (v == null) {\n        sc.put(k, k);\n        ret++;\n      }\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#useCache(SolrCache,int,int,int).mjava","pathOld":"src/test/org/apache/solr/search/TestFastLRUCache#useCache(SolrCache,int,int,int).mjava","sourceNew":"  /***\n  public void testPerf() {\n    doPerfTest(1000000, 100000, 200000); // big cache, warmup\n    doPerfTest(2000000, 100000, 200000); // big cache\n    doPerfTest(2000000, 100000, 120000);  // smaller key space increases distance between oldest, newest and makes the first passes less effective.\n    doPerfTest(6000000, 1000, 2000);    // small cache, smaller hit rate\n    doPerfTest(6000000, 1000, 1200);    // small cache, bigger hit rate\n  }\n  ***/\n\n  // returns number of puts\n  int useCache(SolrCache sc, int numGets, int maxKey, int seed) {\n    int ret = 0;\n    Random r = new Random(seed);\n\n    // use like a cache... gets and a put if not found\n    for (int i=0; i<numGets; i++) {\n      Integer k = r.nextInt(maxKey);\n      Integer v = (Integer)sc.get(k);\n      if (v == null) {\n        sc.put(k, k);\n        ret++;\n      }\n    }\n\n    return ret;\n  }\n\n","sourceOld":"  /***\n  public void testPerf() {\n    doPerfTest(1000000, 100000, 200000); // big cache, warmup\n    doPerfTest(2000000, 100000, 200000); // big cache\n    doPerfTest(2000000, 100000, 120000);  // smaller key space increases distance between oldest, newest and makes the first passes less effective.\n    doPerfTest(6000000, 1000, 2000);    // small cache, smaller hit rate\n    doPerfTest(6000000, 1000, 1200);    // small cache, bigger hit rate\n  }\n  ***/\n\n  // returns number of puts\n  int useCache(SolrCache sc, int numGets, int maxKey, int seed) {\n    int ret = 0;\n    Random r = new Random(seed);\n\n    // use like a cache... gets and a put if not found\n    for (int i=0; i<numGets; i++) {\n      Integer k = r.nextInt(maxKey);\n      Integer v = (Integer)sc.get(k);\n      if (v == null) {\n        sc.put(k, k);\n        ret++;\n      }\n    }\n\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48dd7857ec646cce5ab6c5e7c48a27754559f4be":["516bcb3c0d409157f56056e1ecd5e5361ca4ae0b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["48dd7857ec646cce5ab6c5e7c48a27754559f4be"],"516bcb3c0d409157f56056e1ecd5e5361ca4ae0b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"48dd7857ec646cce5ab6c5e7c48a27754559f4be":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["516bcb3c0d409157f56056e1ecd5e5361ca4ae0b"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"516bcb3c0d409157f56056e1ecd5e5361ca4ae0b":["48dd7857ec646cce5ab6c5e7c48a27754559f4be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}