{"path":"solr/test-framework/src/test/org/apache/solr/cloud/MiniSolrCloudClusterTest#testErrorsInShutdown().mjava","commits":[{"id":"5bb1dd39e0b9ce66a5cde22142c4418526734f61","date":1473165216,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/test/org/apache/solr/cloud/MiniSolrCloudClusterTest#testErrorsInShutdown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testErrorsInShutdown().mjava","sourceNew":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n      @Override\n      protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n        JettySolrRunner j = super.stopJettySolrRunner(jetty);\n        if (jettyIndex.incrementAndGet() == 2)\n          throw new IOException(\"Fake IOException on shutdown!\");\n        return j;\n      }\n    };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n        @Override\n        protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n          JettySolrRunner j = super.stopJettySolrRunner(jetty);\n          if (jettyIndex.incrementAndGet() == 2)\n            throw new IOException(\"Fake IOException on shutdown!\");\n          return j;\n        }\n      };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/test/org/apache/solr/cloud/MiniSolrCloudClusterTest#testErrorsInShutdown().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#testErrorsInShutdown().mjava","sourceNew":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n      @Override\n      protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n        JettySolrRunner j = super.stopJettySolrRunner(jetty);\n        if (jettyIndex.incrementAndGet() == 2)\n          throw new IOException(\"Fake IOException on shutdown!\");\n        return j;\n      }\n    };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n        @Override\n        protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n          JettySolrRunner j = super.stopJettySolrRunner(jetty);\n          if (jettyIndex.incrementAndGet() == 2)\n            throw new IOException(\"Fake IOException on shutdown!\");\n          return j;\n        }\n      };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/test/org/apache/solr/cloud/MiniSolrCloudClusterTest#testErrorsInShutdown().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n      @Override\n      protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n        JettySolrRunner j = super.stopJettySolrRunner(jetty);\n        if (jettyIndex.incrementAndGet() == 2)\n          throw new IOException(\"Fake IOException on shutdown!\");\n        return j;\n      }\n    };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/test/org/apache/solr/cloud/MiniSolrCloudClusterTest#testErrorsInShutdown().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n      @Override\n      protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n        JettySolrRunner j = super.stopJettySolrRunner(jetty);\n        if (jettyIndex.incrementAndGet() == 2)\n          throw new IOException(\"Fake IOException on shutdown!\");\n        return j;\n      }\n    };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/test-framework/src/test/org/apache/solr/cloud/MiniSolrCloudClusterTest#testErrorsInShutdown().mjava","pathOld":"solr/test-framework/src/test/org/apache/solr/cloud/MiniSolrCloudClusterTest#testErrorsInShutdown().mjava","sourceNew":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n      @Override\n      public JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n        JettySolrRunner j = super.stopJettySolrRunner(jetty);\n        if (jettyIndex.incrementAndGet() == 2)\n          throw new IOException(\"Fake IOException on shutdown!\");\n        return j;\n      }\n    };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n      @Override\n      protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n        JettySolrRunner j = super.stopJettySolrRunner(jetty);\n        if (jettyIndex.incrementAndGet() == 2)\n          throw new IOException(\"Fake IOException on shutdown!\");\n        return j;\n      }\n    };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/test-framework/src/test/org/apache/solr/cloud/MiniSolrCloudClusterTest#testErrorsInShutdown().mjava","pathOld":"solr/test-framework/src/test/org/apache/solr/cloud/MiniSolrCloudClusterTest#testErrorsInShutdown().mjava","sourceNew":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n      @Override\n      public JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n        JettySolrRunner j = super.stopJettySolrRunner(jetty);\n        if (jettyIndex.incrementAndGet() == 2)\n          throw new IOException(\"Fake IOException on shutdown!\");\n        return j;\n      }\n    };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n      @Override\n      protected JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n        JettySolrRunner j = super.stopJettySolrRunner(jetty);\n        if (jettyIndex.incrementAndGet() == 2)\n          throw new IOException(\"Fake IOException on shutdown!\");\n        return j;\n      }\n    };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/test-framework/src/test/org/apache/solr/cloud/MiniSolrCloudClusterTest#testErrorsInShutdown().mjava","pathOld":"solr/test-framework/src/test/org/apache/solr/cloud/MiniSolrCloudClusterTest#testErrorsInShutdown().mjava","sourceNew":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n      @Override\n      public JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n        JettySolrRunner j = super.stopJettySolrRunner(jetty);\n        if (jettyIndex.incrementAndGet() == 2)\n          throw new IOException(\"Fake IOException on shutdown!\");\n        return j;\n      }\n    };\n\n    Exception ex = expectThrows(Exception.class, cluster::shutdown);\n    assertEquals(\"Error shutting down MiniSolrCloudCluster\", ex.getMessage());\n    assertEquals(\"Expected one suppressed exception\", 1, ex.getSuppressed().length);\n    assertEquals(\"Fake IOException on shutdown!\", ex.getSuppressed()[0].getMessage());\n  }\n\n","sourceOld":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n      @Override\n      public JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n        JettySolrRunner j = super.stopJettySolrRunner(jetty);\n        if (jettyIndex.incrementAndGet() == 2)\n          throw new IOException(\"Fake IOException on shutdown!\");\n        return j;\n      }\n    };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/test-framework/src/test/org/apache/solr/cloud/MiniSolrCloudClusterTest#testErrorsInShutdown().mjava","pathOld":"solr/test-framework/src/test/org/apache/solr/cloud/MiniSolrCloudClusterTest#testErrorsInShutdown().mjava","sourceNew":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n      @Override\n      public JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n        JettySolrRunner j = super.stopJettySolrRunner(jetty);\n        if (jettyIndex.incrementAndGet() == 2)\n          throw new IOException(\"Fake IOException on shutdown!\");\n        return j;\n      }\n    };\n\n    Exception ex = expectThrows(Exception.class, cluster::shutdown);\n    assertEquals(\"Error shutting down MiniSolrCloudCluster\", ex.getMessage());\n    assertEquals(\"Expected one suppressed exception\", 1, ex.getSuppressed().length);\n    assertEquals(\"Fake IOException on shutdown!\", ex.getSuppressed()[0].getMessage());\n  }\n\n","sourceOld":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n      @Override\n      public JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n        JettySolrRunner j = super.stopJettySolrRunner(jetty);\n        if (jettyIndex.incrementAndGet() == 2)\n          throw new IOException(\"Fake IOException on shutdown!\");\n        return j;\n      }\n    };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/test-framework/src/test/org/apache/solr/cloud/MiniSolrCloudClusterTest#testErrorsInShutdown().mjava","pathOld":"solr/test-framework/src/test/org/apache/solr/cloud/MiniSolrCloudClusterTest#testErrorsInShutdown().mjava","sourceNew":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n      @Override\n      public JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n        JettySolrRunner j = super.stopJettySolrRunner(jetty);\n        if (jettyIndex.incrementAndGet() == 2)\n          throw new IOException(\"Fake IOException on shutdown!\");\n        return j;\n      }\n    };\n\n    Exception ex = expectThrows(Exception.class, cluster::shutdown);\n    assertEquals(\"Error shutting down MiniSolrCloudCluster\", ex.getMessage());\n    assertEquals(\"Expected one suppressed exception\", 1, ex.getSuppressed().length);\n    assertEquals(\"Fake IOException on shutdown!\", ex.getSuppressed()[0].getMessage());\n  }\n\n","sourceOld":"  @Test\n  public void testErrorsInShutdown() throws Exception {\n\n    AtomicInteger jettyIndex = new AtomicInteger();\n\n    MiniSolrCloudCluster cluster = new MiniSolrCloudCluster(3, createTempDir(), JettyConfig.builder().build()) {\n      @Override\n      public JettySolrRunner stopJettySolrRunner(JettySolrRunner jetty) throws Exception {\n        JettySolrRunner j = super.stopJettySolrRunner(jetty);\n        if (jettyIndex.incrementAndGet() == 2)\n          throw new IOException(\"Fake IOException on shutdown!\");\n        return j;\n      }\n    };\n\n    try {\n      cluster.shutdown();\n      fail(\"Expected an exception to be thrown on MiniSolrCloudCluster shutdown\");\n    }\n    catch (Exception e) {\n      assertEquals(\"Error shutting down MiniSolrCloudCluster\", e.getMessage());\n      assertEquals(\"Expected one suppressed exception\", 1, e.getSuppressed().length);\n      assertEquals(\"Fake IOException on shutdown!\", e.getSuppressed()[0].getMessage());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"5bb1dd39e0b9ce66a5cde22142c4418526734f61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89424def13674ea17829b41c5883c54ecc31a132"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["b94236357aaa22b76c10629851fe4e376e0cea82","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["b94236357aaa22b76c10629851fe4e376e0cea82","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"89424def13674ea17829b41c5883c54ecc31a132":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5bb1dd39e0b9ce66a5cde22142c4418526734f61"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"5bb1dd39e0b9ce66a5cde22142c4418526734f61":["89424def13674ea17829b41c5883c54ecc31a132"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5bb1dd39e0b9ce66a5cde22142c4418526734f61","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}