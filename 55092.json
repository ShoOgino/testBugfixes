{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,List[InputStream],Version,boolean,boolean).mjava","commits":[{"id":"74fe524b3f952dcace4fd46ad5e69b16d5090c57","date":1338527592,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,List[InputStream],Version,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files\n   *\n   * @param affix InputStream for reading the hunspell affix file\n   * @param dictionaries InputStreams for reading the hunspell dictionary file\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @param strictAffixParsing Affix strict parsing enabled or not (an error while reading a rule causes exception or is ignored)\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, List<InputStream> dictionaries, Version version, boolean ignoreCase, boolean strictAffixParsing) throws IOException, ParseException {\n    this.version = version;\n    this.ignoreCase = ignoreCase;\n    String encoding = getDictionaryEncoding(affix);\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(affix, decoder, strictAffixParsing);\n    words = new CharArrayMap<List<HunspellWord>>(version, 65535 /* guess */, this.ignoreCase);\n    for (InputStream dictionary : dictionaries) {\n      readDictionaryFile(dictionary, decoder);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"558d0b2765fb22e5c20304b1e85c6cc7b9bba359","date":1342503992,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,List[InputStream],Version,boolean,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,List[InputStream],Version,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionaries InputStreams for reading the hunspell dictionary file (won't be closed).\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @param strictAffixParsing Affix strict parsing enabled or not (an error while reading a rule causes exception or is ignored)\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, List<InputStream> dictionaries, Version version, boolean ignoreCase, boolean strictAffixParsing) throws IOException, ParseException {\n    this.version = version;\n    this.ignoreCase = ignoreCase;\n    String encoding = getDictionaryEncoding(affix);\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(affix, decoder, strictAffixParsing);\n    words = new CharArrayMap<List<HunspellWord>>(version, 65535 /* guess */, this.ignoreCase);\n    for (InputStream dictionary : dictionaries) {\n      readDictionaryFile(dictionary, decoder);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files\n   *\n   * @param affix InputStream for reading the hunspell affix file\n   * @param dictionaries InputStreams for reading the hunspell dictionary file\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @param strictAffixParsing Affix strict parsing enabled or not (an error while reading a rule causes exception or is ignored)\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, List<InputStream> dictionaries, Version version, boolean ignoreCase, boolean strictAffixParsing) throws IOException, ParseException {\n    this.version = version;\n    this.ignoreCase = ignoreCase;\n    String encoding = getDictionaryEncoding(affix);\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(affix, decoder, strictAffixParsing);\n    words = new CharArrayMap<List<HunspellWord>>(version, 65535 /* guess */, this.ignoreCase);\n    for (InputStream dictionary : dictionaries) {\n      readDictionaryFile(dictionary, decoder);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,List[InputStream],Version,boolean,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,List[InputStream],Version,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionaries InputStreams for reading the hunspell dictionary file (won't be closed).\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @param strictAffixParsing Affix strict parsing enabled or not (an error while reading a rule causes exception or is ignored)\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, List<InputStream> dictionaries, Version version, boolean ignoreCase, boolean strictAffixParsing) throws IOException, ParseException {\n    this.version = version;\n    this.ignoreCase = ignoreCase;\n    String encoding = getDictionaryEncoding(affix);\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(affix, decoder, strictAffixParsing);\n    words = new CharArrayMap<List<HunspellWord>>(version, 65535 /* guess */, this.ignoreCase);\n    for (InputStream dictionary : dictionaries) {\n      readDictionaryFile(dictionary, decoder);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files\n   *\n   * @param affix InputStream for reading the hunspell affix file\n   * @param dictionaries InputStreams for reading the hunspell dictionary file\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @param strictAffixParsing Affix strict parsing enabled or not (an error while reading a rule causes exception or is ignored)\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, List<InputStream> dictionaries, Version version, boolean ignoreCase, boolean strictAffixParsing) throws IOException, ParseException {\n    this.version = version;\n    this.ignoreCase = ignoreCase;\n    String encoding = getDictionaryEncoding(affix);\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(affix, decoder, strictAffixParsing);\n    words = new CharArrayMap<List<HunspellWord>>(version, 65535 /* guess */, this.ignoreCase);\n    for (InputStream dictionary : dictionaries) {\n      readDictionaryFile(dictionary, decoder);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,List[InputStream],Version,boolean,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,List[InputStream],Version,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionaries InputStreams for reading the hunspell dictionary file (won't be closed).\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @param strictAffixParsing Affix strict parsing enabled or not (an error while reading a rule causes exception or is ignored)\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, List<InputStream> dictionaries, Version version, boolean ignoreCase, boolean strictAffixParsing) throws IOException, ParseException {\n    this.version = version;\n    this.ignoreCase = ignoreCase;\n    String encoding = getDictionaryEncoding(affix);\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(affix, decoder, strictAffixParsing);\n    words = new CharArrayMap<List<HunspellWord>>(version, 65535 /* guess */, this.ignoreCase);\n    for (InputStream dictionary : dictionaries) {\n      readDictionaryFile(dictionary, decoder);\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files\n   *\n   * @param affix InputStream for reading the hunspell affix file\n   * @param dictionaries InputStreams for reading the hunspell dictionary file\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @param strictAffixParsing Affix strict parsing enabled or not (an error while reading a rule causes exception or is ignored)\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, List<InputStream> dictionaries, Version version, boolean ignoreCase, boolean strictAffixParsing) throws IOException, ParseException {\n    this.version = version;\n    this.ignoreCase = ignoreCase;\n    String encoding = getDictionaryEncoding(affix);\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(affix, decoder, strictAffixParsing);\n    words = new CharArrayMap<List<HunspellWord>>(version, 65535 /* guess */, this.ignoreCase);\n    for (InputStream dictionary : dictionaries) {\n      readDictionaryFile(dictionary, decoder);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","date":1393532367,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,List[InputStream],Version,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionaries InputStreams for reading the hunspell dictionary file (won't be closed).\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @param strictAffixParsing Affix strict parsing enabled or not (an error while reading a rule causes exception or is ignored)\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, List<InputStream> dictionaries, Version version, boolean ignoreCase, boolean strictAffixParsing) throws IOException, ParseException {\n    this.version = version;\n    this.ignoreCase = ignoreCase;\n    String encoding = getDictionaryEncoding(affix);\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(affix, decoder, strictAffixParsing);\n    words = new CharArrayMap<List<HunspellWord>>(version, 65535 /* guess */, this.ignoreCase);\n    for (InputStream dictionary : dictionaries) {\n      readDictionaryFile(dictionary, decoder);\n    }\n  }\n\n","bugFix":null,"bugIntro":["6d4fb2cc011096cc0cff79f0adcf03dc734b9352"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#Dictionary(InputStream,List[InputStream],boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#HunspellDictionary(InputStream,List[InputStream],Version,boolean,boolean).mjava","sourceNew":"  /**\n   * Creates a new Dictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionaries InputStream for reading the hunspell dictionary files (won't be closed).\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public Dictionary(InputStream affix, List<InputStream> dictionaries, boolean ignoreCase) throws IOException, ParseException {\n    this.ignoreCase = ignoreCase;\n    BufferedInputStream buffered = new BufferedInputStream(affix, 8192);\n    buffered.mark(8192);\n    String encoding = getDictionaryEncoding(affix);\n    buffered.reset();\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(buffered, decoder);\n    flagLookup.add(new BytesRef()); // no flags -> ord 0\n    stripLookup.add(new BytesRef()); // no strip -> ord 0\n    PositiveIntOutputs o = PositiveIntOutputs.getSingleton();\n    Builder<Long> b = new Builder<Long>(FST.INPUT_TYPE.BYTE4, o);\n    readDictionaryFiles(dictionaries, decoder, b);\n    words = b.finish();\n  }\n\n","sourceOld":"  /**\n   * Creates a new HunspellDictionary containing the information read from the provided InputStreams to hunspell affix\n   * and dictionary files.\n   * You have to close the provided InputStreams yourself.\n   *\n   * @param affix InputStream for reading the hunspell affix file (won't be closed).\n   * @param dictionaries InputStreams for reading the hunspell dictionary file (won't be closed).\n   * @param version Lucene Version\n   * @param ignoreCase If true, dictionary matching will be case insensitive\n   * @param strictAffixParsing Affix strict parsing enabled or not (an error while reading a rule causes exception or is ignored)\n   * @throws IOException Can be thrown while reading from the InputStreams\n   * @throws ParseException Can be thrown if the content of the files does not meet expected formats\n   */\n  public HunspellDictionary(InputStream affix, List<InputStream> dictionaries, Version version, boolean ignoreCase, boolean strictAffixParsing) throws IOException, ParseException {\n    this.version = version;\n    this.ignoreCase = ignoreCase;\n    String encoding = getDictionaryEncoding(affix);\n    CharsetDecoder decoder = getJavaEncoding(encoding);\n    readAffixFile(affix, decoder, strictAffixParsing);\n    words = new CharArrayMap<List<HunspellWord>>(version, 65535 /* guess */, this.ignoreCase);\n    for (InputStream dictionary : dictionaries) {\n      readDictionaryFile(dictionary, decoder);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["74fe524b3f952dcace4fd46ad5e69b16d5090c57","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["558d0b2765fb22e5c20304b1e85c6cc7b9bba359","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["74fe524b3f952dcace4fd46ad5e69b16d5090c57","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"558d0b2765fb22e5c20304b1e85c6cc7b9bba359":["74fe524b3f952dcace4fd46ad5e69b16d5090c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"74fe524b3f952dcace4fd46ad5e69b16d5090c57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"ba791bce8103c79e38f957e9c5a53a75871bd918":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dc3f094cafa4a87b4066e1d6710fa4e6afe6260e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74fe524b3f952dcace4fd46ad5e69b16d5090c57"],"558d0b2765fb22e5c20304b1e85c6cc7b9bba359":["aba371508186796cc6151d8223a5b4e16d02e26e","ba791bce8103c79e38f957e9c5a53a75871bd918","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"74fe524b3f952dcace4fd46ad5e69b16d5090c57":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","558d0b2765fb22e5c20304b1e85c6cc7b9bba359"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}