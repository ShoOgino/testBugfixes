{"path":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#doc(int,Set[String]).mjava","commits":[{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#doc(int,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   *\n   * @see SolrIndexSearcher#doc(int, Set)\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d != null) return d;\n    }\n\n    final DirectoryReader reader = searcher.getIndexReader();\n    if (documentCache != null && !enableLazyFieldLoading) {\n      // we do not filter the fields in this case because that would return an incomplete document which would\n      // be eventually cached. The alternative would be to read the stored fields twice; once with the fields\n      // and then without for caching leading to a performance hit\n      // see SOLR-8858 for related discussion\n      fields = null;\n    }\n    final SolrDocumentStoredFieldVisitor visitor = new SolrDocumentStoredFieldVisitor(fields, reader, i);\n    reader.document(i, visitor);\n    d = visitor.getDocument();\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#doc(int,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   *\n   * @see SolrIndexSearcher#doc(int, Set)\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d != null) return d;\n    }\n\n    final DirectoryReader reader = searcher.getIndexReader();\n    if (documentCache != null && !enableLazyFieldLoading) {\n      // we do not filter the fields in this case because that would return an incomplete document which would\n      // be eventually cached. The alternative would be to read the stored fields twice; once with the fields\n      // and then without for caching leading to a performance hit\n      // see SOLR-8858 for related discussion\n      fields = null;\n    }\n    final SolrDocumentStoredFieldVisitor visitor = new SolrDocumentStoredFieldVisitor(fields, reader, i);\n    reader.document(i, visitor);\n    d = visitor.getDocument();\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfa27be7bde9d711ce2b418fadc555654849383f","date":1573652589,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#doc(int,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrDocumentFetcher#doc(int,Set[String]).mjava","sourceNew":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   *\n   * @see SolrIndexSearcher#doc(int, Set)\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    Document d;\n    if (documentCache != null) {\n      final Set<String> getFields = enableLazyFieldLoading ? fields : null;\n      AtomicReference<IOException> exceptionRef = new AtomicReference<>();\n      d = documentCache.computeIfAbsent(i, docId -> {\n        try {\n          return docNC(docId, getFields);\n        } catch (IOException e) {\n          exceptionRef.set(e);\n          return null;\n        }\n      });\n      if (exceptionRef.get() != null) {\n        throw exceptionRef.get();\n      }\n      if (d == null) {\n        // failed to retrieve due to an earlier exception, try again?\n        return docNC(i, fields);\n      } else {\n        return d;\n      }\n    } else {\n      return docNC(i, fields);\n    }\n  }\n\n","sourceOld":"  /**\n   * Retrieve the {@link Document} instance corresponding to the document id.\n   * <p>\n   * <b>NOTE</b>: the document will have all fields accessible, but if a field filter is provided, only the provided\n   * fields will be loaded (the remainder will be available lazily).\n   *\n   * @see SolrIndexSearcher#doc(int, Set)\n   */\n  public Document doc(int i, Set<String> fields) throws IOException {\n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d != null) return d;\n    }\n\n    final DirectoryReader reader = searcher.getIndexReader();\n    if (documentCache != null && !enableLazyFieldLoading) {\n      // we do not filter the fields in this case because that would return an incomplete document which would\n      // be eventually cached. The alternative would be to read the stored fields twice; once with the fields\n      // and then without for caching leading to a performance hit\n      // see SOLR-8858 for related discussion\n      fields = null;\n    }\n    final SolrDocumentStoredFieldVisitor visitor = new SolrDocumentStoredFieldVisitor(fields, reader, i);\n    reader.document(i, visitor);\n    d = visitor.getDocument();\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bfa27be7bde9d711ce2b418fadc555654849383f":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bfa27be7bde9d711ce2b418fadc555654849383f"]},"commit2Childs":{"bfa27be7bde9d711ce2b418fadc555654849383f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"de548de3ce5405595899f548152d4b93ac9eb9cc":[],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["bfa27be7bde9d711ce2b418fadc555654849383f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de548de3ce5405595899f548152d4b93ac9eb9cc","63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["de548de3ce5405595899f548152d4b93ac9eb9cc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}