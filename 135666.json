{"path":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","pathOld":"/dev/null","sourceNew":"    public void run(int limit) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          PrintStream ps = new PrintStream(\"out.dot\");\n          fst.toDot(ps);\n          ps.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = fst.get(intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","pathOld":"/dev/null","sourceNew":"    public void run(int limit) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          PrintStream ps = new PrintStream(\"out.dot\");\n          fst.toDot(ps);\n          ps.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = fst.get(intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","pathOld":"/dev/null","sourceNew":"    public void run(int limit) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          PrintStream ps = new PrintStream(\"out.dot\");\n          fst.toDot(ps);\n          ps.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = fst.get(intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","sourceNew":"    public void run(int limit) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          PrintStream ps = new PrintStream(\"out.dot\");\n          Util.toDot(fst, ps);\n          ps.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          PrintStream ps = new PrintStream(\"out.dot\");\n          fst.toDot(ps);\n          ps.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = fst.get(intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","sourceNew":"    public void run(int limit) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          PrintStream ps = new PrintStream(\"out.dot\");\n          Util.toDot(fst, ps);\n          ps.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          PrintStream ps = new PrintStream(\"out.dot\");\n          fst.toDot(ps);\n          ps.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = fst.get(intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","sourceNew":"    public void run(int limit) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          PrintStream ps = new PrintStream(\"out.dot\");\n          Util.toDot(fst, ps);\n          ps.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          PrintStream ps = new PrintStream(\"out.dot\");\n          fst.toDot(ps);\n          ps.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = fst.get(intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c43006fcb55911ba617f27dc9235103a9bc4e421","date":1298301286,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","sourceNew":"    public void run(int limit) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          PrintStream ps = new PrintStream(\"out.dot\");\n          Util.toDot(fst, ps);\n          ps.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","sourceNew":"    public void run(int limit) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          PrintStream ps = new PrintStream(\"out.dot\");\n          Util.toDot(fst, ps);\n          ps.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df809bb5acd66e34fc29697ed01665134238ff8f","date":1300191603,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","sourceNew":"    public void run(int limit, boolean verify) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(\n                String.format(Locale.ENGLISH, \n                    \"%6.2fs: %9d...\", ((System.currentTimeMillis() - tStart) / 1000.0), ord));\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        if (!verify) {\n          System.exit(0);\n        }\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","sourceOld":"    public void run(int limit) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","sourceNew":null,"sourceOld":"    public void run(int limit) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          PrintStream ps = new PrintStream(\"out.dot\");\n          Util.toDot(fst, ps);\n          ps.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/fst/TestFSTs.VisitTerms#run(int).mjava","sourceNew":null,"sourceOld":"    public void run(int limit) throws IOException {\n      BufferedReader is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n      try {\n        final IntsRef intsRef = new IntsRef(10);\n        long tStart = System.currentTimeMillis();\n        int ord = 0;\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          builder.add(intsRef,\n                      getOutput(intsRef, ord));\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        assert builder.getTermCount() == ord;\n        final FST<T> fst = builder.finish();\n        if (fst == null) {\n          System.out.println(\"FST was fully pruned!\");\n          System.exit(0);\n        }\n\n        System.out.println(ord + \" terms; \" + fst.getNodeCount() + \" nodes; \" + fst.getArcCount() + \" arcs; \" + fst.getArcWithOutputCount() + \" arcs w/ output; tot size \" + fst.sizeInBytes());\n        if (fst.getNodeCount() < 100) {\n          Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"), \"UTF-8\");\n          Util.toDot(fst, w, false, false);\n          w.close();\n          System.out.println(\"Wrote FST to out.dot\");\n        }\n\n        Directory dir = FSDirectory.open(new File(dirOut));\n        IndexOutput out = dir.createOutput(\"fst.bin\");\n        fst.save(out);\n        out.close();\n\n        System.out.println(\"Saved FST to fst.bin.\");\n\n        System.out.println(\"\\nNow verify...\");\n\n        is.close();\n        is = new BufferedReader(new InputStreamReader(new FileInputStream(wordsFileIn), \"UTF-8\"), 65536);\n\n        ord = 0;\n        tStart = System.currentTimeMillis();\n        while(true) {\n          String w = is.readLine();\n          if (w == null) {\n            break;\n          }\n          toIntsRef(w, inputMode, intsRef);\n          T expected = getOutput(intsRef, ord);\n          T actual = Util.get(fst, intsRef);\n          if (actual == null) {\n            throw new RuntimeException(\"unexpected null output on input=\" + w);\n          }\n          if (!actual.equals(expected)) {\n            throw new RuntimeException(\"wrong output (got \" + outputs.outputToString(actual) + \" but expected \" + outputs.outputToString(expected) + \") on input=\" + w);\n          }\n\n          ord++;\n          if (ord % 500000 == 0) {\n            System.out.println(((System.currentTimeMillis()-tStart)/1000.0) + \"s: \" + ord + \"...\");\n          }\n          if (ord >= limit) {\n            break;\n          }\n        }\n\n        double totSec = ((System.currentTimeMillis() - tStart)/1000.0);\n        System.out.println(\"Verify took \" + totSec + \" sec + (\" + (int) ((totSec*1000000000/ord)) + \" nsec per lookup)\");\n\n      } finally {\n        is.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","56da903869515527852ee21ea7ef7bfe414cd40d"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"c43006fcb55911ba617f27dc9235103a9bc4e421":["56da903869515527852ee21ea7ef7bfe414cd40d"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","df809bb5acd66e34fc29697ed01665134238ff8f"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["70ad682703b8585f5d0a637efec044d57ec05efb","df809bb5acd66e34fc29697ed01665134238ff8f"],"56da903869515527852ee21ea7ef7bfe414cd40d":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df809bb5acd66e34fc29697ed01665134238ff8f":["c43006fcb55911ba617f27dc9235103a9bc4e421"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","c43006fcb55911ba617f27dc9235103a9bc4e421"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df809bb5acd66e34fc29697ed01665134238ff8f"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"c43006fcb55911ba617f27dc9235103a9bc4e421":["df809bb5acd66e34fc29697ed01665134238ff8f","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","c43006fcb55911ba617f27dc9235103a9bc4e421","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"df809bb5acd66e34fc29697ed01665134238ff8f":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}