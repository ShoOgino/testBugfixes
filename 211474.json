{"path":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","commits":[{"id":"ecb39e783dd104116a9502e8b0ab3df89f35ac19","date":1499167547,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      return;\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if(async!=null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f100e4a037a938ee4b027674f1ca80fc208badf","date":1500526196,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll.getName(), slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"651c3ddf5bc1266d9de0a972ec05e59d77099a4c","date":1500969855,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll.getName(), slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll.getName(), slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"587637d2d2a2c50503511d5b626fdc366b4fd3d4","date":1507632212,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":["ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.zkStateReader.getZkClient(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2bcfee499548996a6e5448bbf93b8f276d010270","date":1508336936,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int).mjava","sourceNew":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout, boolean waitForFinalState) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ActiveReplicaWatcher watcher = null;\n    if (replica.equals(slice.getLeader()) || waitForFinalState) {\n      watcher = new ActiveReplicaWatcher(coll.getName(), Collections.singletonList(replica.getName()), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getActiveReplicas() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  private void moveNormalReplica(ClusterState clusterState, NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout) throws Exception {\n    String newCoreName = Assign.buildCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName);\n    if(async!=null) addReplicasProps.getProperties().put(ASYNC, async);\n    NamedList addResult = new NamedList();\n    CountDownLatch countDownLatch = new CountDownLatch(1);\n    ReplaceNodeCmd.RecoveryWatcher watcher = null;\n    if (replica.equals(slice.getLeader())) {\n      watcher = new ReplaceNodeCmd.RecoveryWatcher(coll.getName(), slice.getName(),\n          replica.getName(), null, countDownLatch);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    ocmh.addReplica(clusterState, addReplicasProps, addResult, null);\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          log.debug(\"Replica \" + watcher.getRecoveredReplica() + \" is active - deleting the source...\");\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    NamedList deleteResult = new NamedList();\n    ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s\",\n          coll.getName(), slice.getName(), replica.getName());\n      log.warn(errorString);\n      results.add(\"failure\", errorString + \", because of : \" + deleteResult.get(\"failure\"));\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["9f100e4a037a938ee4b027674f1ca80fc208badf"],"2bcfee499548996a6e5448bbf93b8f276d010270":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a52341299179de5479672f7cf518bf4b173f34b3":["9f100e4a037a938ee4b027674f1ca80fc208badf","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"9f100e4a037a938ee4b027674f1ca80fc208badf":["ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["587637d2d2a2c50503511d5b626fdc366b4fd3d4"],"587637d2d2a2c50503511d5b626fdc366b4fd3d4":["a52341299179de5479672f7cf518bf4b173f34b3"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2bcfee499548996a6e5448bbf93b8f276d010270"],"ecb39e783dd104116a9502e8b0ab3df89f35ac19":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"2bcfee499548996a6e5448bbf93b8f276d010270":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a52341299179de5479672f7cf518bf4b173f34b3":["587637d2d2a2c50503511d5b626fdc366b4fd3d4"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"9f100e4a037a938ee4b027674f1ca80fc208badf":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c","a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","ecb39e783dd104116a9502e8b0ab3df89f35ac19"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["2bcfee499548996a6e5448bbf93b8f276d010270"],"587637d2d2a2c50503511d5b626fdc366b4fd3d4":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"ecb39e783dd104116a9502e8b0ab3df89f35ac19":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","9f100e4a037a938ee4b027674f1ca80fc208badf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}