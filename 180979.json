{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.DocsWithFieldCache#createValueDocValues(LeafReader,String).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.DocsWithFieldCache#createValueDocValues(LeafReader,String).mjava","pathOld":"/dev/null","sourceNew":"    private BitsEntry createValueDocValues(LeafReader reader, String field) throws IOException {\n      FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      \n      DocValuesType dvType = fieldInfo.getDocValuesType();\n      DocIdSetIterator iterator;\n      switch(dvType) {\n      case NUMERIC:\n        iterator = reader.getNumericDocValues(field);\n        break;\n      case BINARY:\n        iterator = reader.getBinaryDocValues(field);\n        break;\n      case SORTED:\n        iterator = reader.getSortedDocValues(field);\n        break;\n      case SORTED_NUMERIC:\n        iterator = reader.getSortedNumericDocValues(field);\n        break;\n      case SORTED_SET:\n        iterator = reader.getSortedSetDocValues(field);\n        break;\n      default:\n        throw new AssertionError();\n      }\n\n      FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n      while (true) {\n        int docID = iterator.nextDoc();\n        if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        bits.set(docID);\n      }\n\n      return new BitsEntry(bits);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.DocsWithFieldCache#createValueDocValues(LeafReader,String).mjava","pathOld":"/dev/null","sourceNew":"    private BitsEntry createValueDocValues(LeafReader reader, String field) throws IOException {\n      FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      \n      DocValuesType dvType = fieldInfo.getDocValuesType();\n      DocIdSetIterator iterator;\n      switch(dvType) {\n      case NUMERIC:\n        iterator = reader.getNumericDocValues(field);\n        break;\n      case BINARY:\n        iterator = reader.getBinaryDocValues(field);\n        break;\n      case SORTED:\n        iterator = reader.getSortedDocValues(field);\n        break;\n      case SORTED_NUMERIC:\n        iterator = reader.getSortedNumericDocValues(field);\n        break;\n      case SORTED_SET:\n        iterator = reader.getSortedSetDocValues(field);\n        break;\n      default:\n        throw new AssertionError();\n      }\n\n      FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n      while (true) {\n        int docID = iterator.nextDoc();\n        if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        bits.set(docID);\n      }\n\n      return new BitsEntry(bits);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl.DocsWithFieldCache#createValueDocValues(LeafReader,String).mjava","pathOld":"/dev/null","sourceNew":"    private BitsEntry createValueDocValues(LeafReader reader, String field) throws IOException {\n      FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n      \n      DocValuesType dvType = fieldInfo.getDocValuesType();\n      DocIdSetIterator iterator;\n      switch(dvType) {\n      case NUMERIC:\n        iterator = reader.getNumericDocValues(field);\n        break;\n      case BINARY:\n        iterator = reader.getBinaryDocValues(field);\n        break;\n      case SORTED:\n        iterator = reader.getSortedDocValues(field);\n        break;\n      case SORTED_NUMERIC:\n        iterator = reader.getSortedNumericDocValues(field);\n        break;\n      case SORTED_SET:\n        iterator = reader.getSortedSetDocValues(field);\n        break;\n      default:\n        throw new AssertionError();\n      }\n\n      FixedBitSet bits = new FixedBitSet(reader.maxDoc());\n      while (true) {\n        int docID = iterator.nextDoc();\n        if (docID == DocIdSetIterator.NO_MORE_DOCS) {\n          break;\n        }\n        bits.set(docID);\n      }\n\n      return new BitsEntry(bits);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}