{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#getNextExternalMerge().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#getNextExternalMerge().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#getNextExternalMerge().mjava","sourceNew":"  /** Like getNextMerge() except only returns a merge if it's\n   *  external. */\n  private synchronized MergePolicy.OneMerge getNextExternalMerge() {\n    if (pendingMerges.size() == 0)\n      return null;\n    else {\n      Iterator<MergePolicy.OneMerge> it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        MergePolicy.OneMerge merge = it.next();\n        if (merge.isExternal) {\n          // Advance the merge from pending to running\n          it.remove();\n          runningMerges.add(merge);\n          return merge;\n        }\n      }\n\n      // All existing merges do not involve external segments\n      return null;\n    }\n  }\n\n","sourceOld":"  /** Like getNextMerge() except only returns a merge if it's\n   *  external. */\n  private synchronized MergePolicy.OneMerge getNextExternalMerge() {\n    if (pendingMerges.size() == 0)\n      return null;\n    else {\n      Iterator<MergePolicy.OneMerge> it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        MergePolicy.OneMerge merge = it.next();\n        if (merge.isExternal) {\n          // Advance the merge from pending to running\n          it.remove();\n          runningMerges.add(merge);\n          return merge;\n        }\n      }\n\n      // All existing merges do not involve external segments\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#getNextExternalMerge().mjava","sourceNew":null,"sourceOld":"  /** Like getNextMerge() except only returns a merge if it's\n   *  external. */\n  private synchronized MergePolicy.OneMerge getNextExternalMerge() {\n    if (pendingMerges.size() == 0)\n      return null;\n    else {\n      Iterator<MergePolicy.OneMerge> it = pendingMerges.iterator();\n      while(it.hasNext()) {\n        MergePolicy.OneMerge merge = it.next();\n        if (merge.isExternal) {\n          // Advance the merge from pending to running\n          it.remove();\n          runningMerges.add(merge);\n          return merge;\n        }\n      }\n\n      // All existing merges do not involve external segments\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}