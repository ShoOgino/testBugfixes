{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton).mjava","commits":[{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeatLight(LightAutomaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the Kleene star (zero or more\n   * concatenated repetitions) of the language of the given automaton. Never\n   * modifies the input automaton language.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton repeat(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n    builder.createState();\n    builder.setAccept(0, true);\n    builder.copy(a);\n\n    Transition t = new Transition();\n    int count = a.initTransition(0, t);\n    for(int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      builder.addTransition(0, t.dest+1, t.min, t.max);\n    }\n\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      if (a.isAccept(s)) {\n        count = a.initTransition(0, t);\n        for(int i=0;i<count;i++) {\n          a.getNextTransition(t);\n          builder.addTransition(s+1, t.dest+1, t.min, t.max);\n        }\n      }\n    }\n\n    return builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the Kleene star (zero or more\n   * concatenated repetitions) of the language of the given automaton. Never\n   * modifies the input automaton language.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public LightAutomaton repeatLight(LightAutomaton a) {\n    LightAutomaton.Builder builder = new LightAutomaton.Builder();\n    builder.createState();\n    builder.setAccept(0, true);\n    builder.copy(a);\n\n    Transition t = new Transition();\n    int count = a.initTransition(0, t);\n    for(int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      builder.addTransition(0, t.dest+1, t.min, t.max);\n    }\n\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      if (a.isAccept(s)) {\n        count = a.initTransition(0, t);\n        for(int i=0;i<count;i++) {\n          a.getNextTransition(t);\n          builder.addTransition(s+1, t.dest+1, t.min, t.max);\n        }\n      }\n    }\n\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/BasicOperations#repeat(Automaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the Kleene star (zero or more\n   * concatenated repetitions) of the language of the given automaton. Never\n   * modifies the input automaton language.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton repeat(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n    builder.createState();\n    builder.setAccept(0, true);\n    builder.copy(a);\n\n    Transition t = new Transition();\n    int count = a.initTransition(0, t);\n    for(int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      builder.addTransition(0, t.dest+1, t.min, t.max);\n    }\n\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      if (a.isAccept(s)) {\n        count = a.initTransition(0, t);\n        for(int i=0;i<count;i++) {\n          a.getNextTransition(t);\n          builder.addTransition(s+1, t.dest+1, t.min, t.max);\n        }\n      }\n    }\n\n    return builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the Kleene star (zero or more\n   * concatenated repetitions) of the language of the given automaton. Never\n   * modifies the input automaton language.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton repeat(Automaton a) {\n    a = a.cloneExpanded();\n    State s = new State();\n    s.accept = true;\n    s.addEpsilon(a.initial);\n    for (State p : a.getAcceptStates())\n      p.addEpsilon(s);\n    a.initial = s;\n    a.deterministic = false;\n    //a.clearHashCode();\n    a.clearNumberedStates();\n    a.checkMinimizeAlways();\n    return a;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fd6765afc4e1d384b88902492dfb42492686226","date":1415395492,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Operations#repeat(Automaton).mjava","sourceNew":"  /**\n   * Returns an automaton that accepts the Kleene star (zero or more\n   * concatenated repetitions) of the language of the given automaton. Never\n   * modifies the input automaton language.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton repeat(Automaton a) {\n    if (a.getNumStates() == 0) {\n      // Repeating the empty automata will still only accept the empty automata.\n      return a;\n    }\n    Automaton.Builder builder = new Automaton.Builder();\n    builder.createState();\n    builder.setAccept(0, true);\n    builder.copy(a);\n\n    Transition t = new Transition();\n    int count = a.initTransition(0, t);\n    for(int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      builder.addTransition(0, t.dest+1, t.min, t.max);\n    }\n\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      if (a.isAccept(s)) {\n        count = a.initTransition(0, t);\n        for(int i=0;i<count;i++) {\n          a.getNextTransition(t);\n          builder.addTransition(s+1, t.dest+1, t.min, t.max);\n        }\n      }\n    }\n\n    return builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Returns an automaton that accepts the Kleene star (zero or more\n   * concatenated repetitions) of the language of the given automaton. Never\n   * modifies the input automaton language.\n   * <p>\n   * Complexity: linear in number of states.\n   */\n  static public Automaton repeat(Automaton a) {\n    Automaton.Builder builder = new Automaton.Builder();\n    builder.createState();\n    builder.setAccept(0, true);\n    builder.copy(a);\n\n    Transition t = new Transition();\n    int count = a.initTransition(0, t);\n    for(int i=0;i<count;i++) {\n      a.getNextTransition(t);\n      builder.addTransition(0, t.dest+1, t.min, t.max);\n    }\n\n    int numStates = a.getNumStates();\n    for(int s=0;s<numStates;s++) {\n      if (a.isAccept(s)) {\n        count = a.initTransition(0, t);\n        for(int i=0;i<count;i++) {\n          a.getNextTransition(t);\n          builder.addTransition(s+1, t.dest+1, t.min, t.max);\n        }\n      }\n    }\n\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5c84485629d80d203608e8975a1139de9933cc38":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"1fd6765afc4e1d384b88902492dfb42492686226":["5c84485629d80d203608e8975a1139de9933cc38"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1fd6765afc4e1d384b88902492dfb42492686226"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","5c84485629d80d203608e8975a1139de9933cc38"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["1fd6765afc4e1d384b88902492dfb42492686226"],"1fd6765afc4e1d384b88902492dfb42492686226":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}