{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#missingFacetTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#missingFacetTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/FieldFacetTest#missingFacetTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    //int MultiDate\n    String xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='date_dtdm']/lst[@name='(MISSING)']\";\n    Node missingNodeXPath = getNode(xPath);\n    assertNotNull(getRawResponse(), missingNodeXPath);\n\n    ArrayList<Double> string = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtdm\", \"double\", \"mean\");\n    //super.removeNodes(xPath, string);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(getRawResponse(), string,stringTest);\n\n    //Int String\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='(MISSING)']\";\n    missingNodeXPath = getNode(xPath);\n    String missingNodeXPathStr = xPath;\n    assertNotNull(getRawResponse(), missingNodeXPath);\n\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='str0']\";\n    assertNull(getRawResponse(), getNode(xPath));\n\n    List<Double> intString = getDoubleList(\"missingf\", \"fieldFacets\", \"string_sd\", \"double\", \"mean\");\n    //removeNodes(missingNodeXPathStr, intString);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(getRawResponse(), intString,intStringTest);\n\n    //Int Date\n    Collection<Double> intDate = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtd\", \"double\", \"mean\");\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    //int MultiDate\n    String xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='date_dtdm']/lst[@name='(MISSING)']\";\n    Node missingNodeXPath = getNode(xPath);\n    assertNotNull(getRawResponse(), missingNodeXPath);\n\n    ArrayList<Double> string = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtdm\", \"double\", \"mean\");\n    //super.removeNodes(xPath, string);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(getRawResponse(), string,stringTest);\n\n    //Int String\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='(MISSING)']\";\n    missingNodeXPath = getNode(xPath);\n    String missingNodeXPathStr = xPath;\n    assertNotNull(getRawResponse(), missingNodeXPath);\n\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='str0']\";\n    assertNull(getRawResponse(), getNode(xPath));\n\n    List<Double> intString = getDoubleList(\"missingf\", \"fieldFacets\", \"string_sd\", \"double\", \"mean\");\n    //removeNodes(missingNodeXPathStr, intString);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(getRawResponse(), intString,intStringTest);\n\n    //Int Date\n    Collection<Double> intDate = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtd\", \"double\", \"mean\");\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#missingFacetTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#missingFacetTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception {\n    //int MultiDate\n    String xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='date_dtdm']/lst[@name='(MISSING)']\";\n    Node missingNodeXPath = getNode(xPath);\n    assertNotNull(getRawResponse(), missingNodeXPath);\n\n    ArrayList<Double> string = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtdm\", \"double\", \"mean\");\n    //super.removeNodes(xPath, string);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(getRawResponse(), string,stringTest);\n\n    //Int String\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='(MISSING)']\";\n    missingNodeXPath = getNode(xPath);\n    String missingNodeXPathStr = xPath;\n    assertNotNull(getRawResponse(), missingNodeXPath);\n\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='str0']\";\n    assertNull(getRawResponse(), getNode(xPath));\n\n    List<Double> intString = getDoubleList(\"missingf\", \"fieldFacets\", \"string_sd\", \"double\", \"mean\");\n    //removeNodes(missingNodeXPathStr, intString);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(getRawResponse(), intString,intStringTest);\n\n    //Int Date\n    Collection<Double> intDate = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtd\", \"double\", \"mean\");\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    //int MultiDate\n    String xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='date_dtdm']/lst[@name='(MISSING)']\";\n    Node missingNodeXPath = getNode(xPath);\n    assertNotNull(getRawResponse(), missingNodeXPath);\n\n    ArrayList<Double> string = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtdm\", \"double\", \"mean\");\n    //super.removeNodes(xPath, string);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(getRawResponse(), string,stringTest);\n\n    //Int String\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='(MISSING)']\";\n    missingNodeXPath = getNode(xPath);\n    String missingNodeXPathStr = xPath;\n    assertNotNull(getRawResponse(), missingNodeXPath);\n\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='str0']\";\n    assertNull(getRawResponse(), getNode(xPath));\n\n    List<Double> intString = getDoubleList(\"missingf\", \"fieldFacets\", \"string_sd\", \"double\", \"mean\");\n    //removeNodes(missingNodeXPathStr, intString);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(getRawResponse(), intString,intStringTest);\n\n    //Int Date\n    Collection<Double> intDate = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtd\", \"double\", \"mean\");\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#missingFacetTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyFieldFacetTest#missingFacetTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception {\n    //int MultiDate\n    String xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='date_dtdm']/lst[@name='(MISSING)']\";\n    Node missingNodeXPath = getNode(xPath);\n    assertNotNull(getRawResponse(), missingNodeXPath);\n\n    ArrayList<Double> string = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtdm\", \"double\", \"mean\");\n    //super.removeNodes(xPath, string);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(getRawResponse(), string,stringTest);\n\n    //Int String\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='(MISSING)']\";\n    missingNodeXPath = getNode(xPath);\n    String missingNodeXPathStr = xPath;\n    assertNotNull(getRawResponse(), missingNodeXPath);\n\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='str0']\";\n    assertNull(getRawResponse(), getNode(xPath));\n\n    List<Double> intString = getDoubleList(\"missingf\", \"fieldFacets\", \"string_sd\", \"double\", \"mean\");\n    //removeNodes(missingNodeXPathStr, intString);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(getRawResponse(), intString,intStringTest);\n\n    //Int Date\n    Collection<Double> intDate = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtd\", \"double\", \"mean\");\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void missingFacetTest() throws Exception { \n    //int MultiDate\n    String xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='date_dtdm']/lst[@name='(MISSING)']\";\n    Node missingNodeXPath = getNode(xPath);\n    assertNotNull(getRawResponse(), missingNodeXPath);\n\n    ArrayList<Double> string = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtdm\", \"double\", \"mean\");\n    //super.removeNodes(xPath, string);\n    ArrayList<Double> stringTest = calculateNumberStat(multiDateTestStart, \"mean\");\n    assertEquals(getRawResponse(), string,stringTest);\n\n    //Int String\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='(MISSING)']\";\n    missingNodeXPath = getNode(xPath);\n    String missingNodeXPathStr = xPath;\n    assertNotNull(getRawResponse(), missingNodeXPath);\n\n    xPath = \"/response/lst[@name='stats']/lst[@name='missingf']/lst[@name='fieldFacets']/lst[@name='string_sd']/lst[@name='str0']\";\n    assertNull(getRawResponse(), getNode(xPath));\n\n    List<Double> intString = getDoubleList(\"missingf\", \"fieldFacets\", \"string_sd\", \"double\", \"mean\");\n    //removeNodes(missingNodeXPathStr, intString);\n    ArrayList<Double> intStringTest = calculateNumberStat(intStringTestStart, \"mean\");\n    assertEquals(getRawResponse(), intString,intStringTest);\n\n    //Int Date\n    Collection<Double> intDate = getDoubleList(\"missingf\", \"fieldFacets\", \"date_dtd\", \"double\", \"mean\");\n    ArrayList<ArrayList<Double>> intDateMissingTestStart = (ArrayList<ArrayList<Double>>) intDateTestStart.clone();\n    ArrayList<Double> intDateTest = calculateNumberStat(intDateMissingTestStart, \"mean\");\n    assertEquals(getRawResponse(),intDate,intDateTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}