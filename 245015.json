{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#LatLonShapeBoundingBoxQuery(String,LatLonShape.QueryRelation,double,double,double,double).mjava","commits":[{"id":"97f74f84954e9fefbac4cb38b9bf339e1757600d","date":1533750605,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#LatLonShapeBoundingBoxQuery(String,LatLonShape.QueryRelation,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#LatLonShapeBoundingBoxQuery(String,double,double,double,double).mjava","sourceNew":"  public LatLonShapeBoundingBoxQuery(String field, LatLonShape.QueryRelation queryRelation, double minLat, double maxLat, double minLon, double maxLon) {\n    super(field, queryRelation);\n    if (minLon > maxLon) {\n      throw new IllegalArgumentException(\"dateline crossing bounding box queries are not supported for [\" + field + \"]\");\n    }\n    this.bbox = new byte[4 * LatLonPoint.BYTES];\n    this.minX = encodeLongitudeCeil(minLon);\n    this.maxX = encodeLongitude(maxLon);\n    this.minY = encodeLatitudeCeil(minLat);\n    this.maxY = encodeLatitude(maxLat);\n    NumericUtils.intToSortableBytes(this.minY, this.bbox, 0);\n    NumericUtils.intToSortableBytes(this.minX, this.bbox, LatLonPoint.BYTES);\n    NumericUtils.intToSortableBytes(this.maxY, this.bbox, 2 * LatLonPoint.BYTES);\n    NumericUtils.intToSortableBytes(this.maxX, this.bbox, 3 * LatLonPoint.BYTES);\n  }\n\n","sourceOld":"  public LatLonShapeBoundingBoxQuery(String field, double minLat, double maxLat, double minLon, double maxLon) {\n    if (minLon > maxLon) {\n      throw new IllegalArgumentException(\"dateline crossing bounding box queries are not supported for [\" + field + \"]\");\n    }\n    this.field = field;\n    this.bbox = new byte[4 * LatLonPoint.BYTES];\n    this.minX = encodeLongitudeCeil(minLon);\n    this.maxX = encodeLongitude(maxLon);\n    this.minY = encodeLatitudeCeil(minLat);\n    this.maxY = encodeLatitude(maxLat);\n    NumericUtils.intToSortableBytes(this.minY, this.bbox, 0);\n    NumericUtils.intToSortableBytes(this.minX, this.bbox, LatLonPoint.BYTES);\n    NumericUtils.intToSortableBytes(this.maxY, this.bbox, 2 * LatLonPoint.BYTES);\n    NumericUtils.intToSortableBytes(this.maxX, this.bbox, 3 * LatLonPoint.BYTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e48f589a9604e11db23a025a27efbf3d14ab4e3b","date":1539887418,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#LatLonShapeBoundingBoxQuery(String,LatLonShape.QueryRelation,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#LatLonShapeBoundingBoxQuery(String,LatLonShape.QueryRelation,double,double,double,double).mjava","sourceNew":"  public LatLonShapeBoundingBoxQuery(String field, LatLonShape.QueryRelation queryRelation, double minLat, double maxLat, double minLon, double maxLon) {\n    super(field, queryRelation);\n    if (minLon > maxLon) {\n      throw new IllegalArgumentException(\"dateline crossing bounding box queries are not supported for [\" + field + \"]\");\n    }\n    this.bbox = new byte[4 * LatLonShape.BYTES];\n    this.minX = encodeLongitudeCeil(minLon);\n    this.maxX = encodeLongitude(maxLon);\n    this.minY = encodeLatitudeCeil(minLat);\n    this.maxY = encodeLatitude(maxLat);\n    LatLonShape.encodeTriangleBoxVal(this.minY, bbox, 0);\n    LatLonShape.encodeTriangleBoxVal(this.minX, bbox, BYTES);\n    LatLonShape.encodeTriangleBoxVal(this.maxY, bbox, 2 * BYTES);\n    LatLonShape.encodeTriangleBoxVal(this.maxX, bbox, 3 * BYTES);\n  }\n\n","sourceOld":"  public LatLonShapeBoundingBoxQuery(String field, LatLonShape.QueryRelation queryRelation, double minLat, double maxLat, double minLon, double maxLon) {\n    super(field, queryRelation);\n    if (minLon > maxLon) {\n      throw new IllegalArgumentException(\"dateline crossing bounding box queries are not supported for [\" + field + \"]\");\n    }\n    this.bbox = new byte[4 * LatLonPoint.BYTES];\n    this.minX = encodeLongitudeCeil(minLon);\n    this.maxX = encodeLongitude(maxLon);\n    this.minY = encodeLatitudeCeil(minLat);\n    this.maxY = encodeLatitude(maxLat);\n    NumericUtils.intToSortableBytes(this.minY, this.bbox, 0);\n    NumericUtils.intToSortableBytes(this.minX, this.bbox, LatLonPoint.BYTES);\n    NumericUtils.intToSortableBytes(this.maxY, this.bbox, 2 * LatLonPoint.BYTES);\n    NumericUtils.intToSortableBytes(this.maxX, this.bbox, 3 * LatLonPoint.BYTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d","date":1541178922,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#LatLonShapeBoundingBoxQuery(String,LatLonShape.QueryRelation,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#LatLonShapeBoundingBoxQuery(String,LatLonShape.QueryRelation,double,double,double,double).mjava","sourceNew":"  public LatLonShapeBoundingBoxQuery(String field, LatLonShape.QueryRelation queryRelation, double minLat, double maxLat, double minLon, double maxLon) {\n    super(field, queryRelation);\n\n    this.bbox = new byte[4 * LatLonShape.BYTES];\n    int minXenc = encodeLongitudeCeil(minLon);\n    int maxXenc = encodeLongitude(maxLon);\n    this.minY = encodeLatitudeCeil(minLat);\n    this.maxY = encodeLatitude(maxLat);\n\n    if (minLon > maxLon == true) {\n      // crossing dateline is split into east/west boxes\n      this.west = new byte[4 * LatLonShape.BYTES];\n      this.minX = minXenc;\n      this.maxX = maxXenc;\n      encode(MIN_LON_ENCODED, this.maxX, this.minY, this.maxY, this.west);\n      encode(this.minX, MAX_LON_ENCODED, this.minY, this.maxY, this.bbox);\n    } else {\n      // encodeLongitudeCeil may cause minX to be > maxX iff\n      // the delta between the longtude < the encoding resolution\n      if (minXenc > maxXenc) {\n        minXenc = maxXenc;\n      }\n      this.west = null;\n      this.minX = minXenc;\n      this.maxX = maxXenc;\n      encode(this.minX, this.maxX, this.minY, this.maxY, bbox);\n    }\n  }\n\n","sourceOld":"  public LatLonShapeBoundingBoxQuery(String field, LatLonShape.QueryRelation queryRelation, double minLat, double maxLat, double minLon, double maxLon) {\n    super(field, queryRelation);\n    if (minLon > maxLon) {\n      throw new IllegalArgumentException(\"dateline crossing bounding box queries are not supported for [\" + field + \"]\");\n    }\n    this.bbox = new byte[4 * LatLonShape.BYTES];\n    this.minX = encodeLongitudeCeil(minLon);\n    this.maxX = encodeLongitude(maxLon);\n    this.minY = encodeLatitudeCeil(minLat);\n    this.maxY = encodeLatitude(maxLat);\n    LatLonShape.encodeTriangleBoxVal(this.minY, bbox, 0);\n    LatLonShape.encodeTriangleBoxVal(this.minX, bbox, BYTES);\n    LatLonShape.encodeTriangleBoxVal(this.maxY, bbox, 2 * BYTES);\n    LatLonShape.encodeTriangleBoxVal(this.maxX, bbox, 3 * BYTES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e49feed1f08d73738a9726a61709a7c57ede9f2","date":1541716494,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#LatLonShapeBoundingBoxQuery(String,LatLonShape.QueryRelation,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#LatLonShapeBoundingBoxQuery(String,LatLonShape.QueryRelation,double,double,double,double).mjava","sourceNew":"  public LatLonShapeBoundingBoxQuery(String field, LatLonShape.QueryRelation queryRelation, double minLat, double maxLat, double minLon, double maxLon) {\n    super(field, queryRelation);\n\n    this.bbox = new byte[4 * LatLonShape.BYTES];\n    int minXenc = encodeLongitudeCeil(minLon);\n    int maxXenc = encodeLongitude(maxLon);\n    int minYenc = encodeLatitudeCeil(minLat);\n    int maxYenc = encodeLatitude(maxLat);\n    if (minYenc > maxYenc) {\n      minYenc = maxYenc;\n    }\n    this.minY = minYenc;\n    this.maxY = maxYenc;\n\n    if (minLon > maxLon == true) {\n      // crossing dateline is split into east/west boxes\n      this.west = new byte[4 * LatLonShape.BYTES];\n      this.minX = minXenc;\n      this.maxX = maxXenc;\n      encode(MIN_LON_ENCODED, this.maxX, this.minY, this.maxY, this.west);\n      encode(this.minX, MAX_LON_ENCODED, this.minY, this.maxY, this.bbox);\n    } else {\n      // encodeLongitudeCeil may cause minX to be > maxX iff\n      // the delta between the longtude < the encoding resolution\n      if (minXenc > maxXenc) {\n        minXenc = maxXenc;\n      }\n      this.west = null;\n      this.minX = minXenc;\n      this.maxX = maxXenc;\n      encode(this.minX, this.maxX, this.minY, this.maxY, bbox);\n    }\n  }\n\n","sourceOld":"  public LatLonShapeBoundingBoxQuery(String field, LatLonShape.QueryRelation queryRelation, double minLat, double maxLat, double minLon, double maxLon) {\n    super(field, queryRelation);\n\n    this.bbox = new byte[4 * LatLonShape.BYTES];\n    int minXenc = encodeLongitudeCeil(minLon);\n    int maxXenc = encodeLongitude(maxLon);\n    this.minY = encodeLatitudeCeil(minLat);\n    this.maxY = encodeLatitude(maxLat);\n\n    if (minLon > maxLon == true) {\n      // crossing dateline is split into east/west boxes\n      this.west = new byte[4 * LatLonShape.BYTES];\n      this.minX = minXenc;\n      this.maxX = maxXenc;\n      encode(MIN_LON_ENCODED, this.maxX, this.minY, this.maxY, this.west);\n      encode(this.minX, MAX_LON_ENCODED, this.minY, this.maxY, this.bbox);\n    } else {\n      // encodeLongitudeCeil may cause minX to be > maxX iff\n      // the delta between the longtude < the encoding resolution\n      if (minXenc > maxXenc) {\n        minXenc = maxXenc;\n      }\n      this.west = null;\n      this.minX = minXenc;\n      this.maxX = maxXenc;\n      encode(this.minX, this.maxX, this.minY, this.maxY, bbox);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9feee35369998c08f5168e0808e67e09857d5bac","date":1544618795,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#LatLonShapeBoundingBoxQuery(String,LatLonShape.QueryRelation,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#LatLonShapeBoundingBoxQuery(String,LatLonShape.QueryRelation,double,double,double,double).mjava","sourceNew":"  public LatLonShapeBoundingBoxQuery(String field, LatLonShape.QueryRelation queryRelation, double minLat, double maxLat, double minLon, double maxLon) {\n    super(field, queryRelation);\n    Rectangle rectangle = new Rectangle(minLat, maxLat, minLon, maxLon);\n    this.rectangle2D = Rectangle2D.create(rectangle);\n  }\n\n","sourceOld":"  public LatLonShapeBoundingBoxQuery(String field, LatLonShape.QueryRelation queryRelation, double minLat, double maxLat, double minLon, double maxLon) {\n    super(field, queryRelation);\n\n    this.bbox = new byte[4 * LatLonShape.BYTES];\n    int minXenc = encodeLongitudeCeil(minLon);\n    int maxXenc = encodeLongitude(maxLon);\n    int minYenc = encodeLatitudeCeil(minLat);\n    int maxYenc = encodeLatitude(maxLat);\n    if (minYenc > maxYenc) {\n      minYenc = maxYenc;\n    }\n    this.minY = minYenc;\n    this.maxY = maxYenc;\n\n    if (minLon > maxLon == true) {\n      // crossing dateline is split into east/west boxes\n      this.west = new byte[4 * LatLonShape.BYTES];\n      this.minX = minXenc;\n      this.maxX = maxXenc;\n      encode(MIN_LON_ENCODED, this.maxX, this.minY, this.maxY, this.west);\n      encode(this.minX, MAX_LON_ENCODED, this.minY, this.maxY, this.bbox);\n    } else {\n      // encodeLongitudeCeil may cause minX to be > maxX iff\n      // the delta between the longtude < the encoding resolution\n      if (minXenc > maxXenc) {\n        minXenc = maxXenc;\n      }\n      this.west = null;\n      this.minX = minXenc;\n      this.maxX = maxXenc;\n      encode(this.minX, this.maxX, this.minY, this.maxY, bbox);\n    }\n  }\n\n","bugFix":null,"bugIntro":["3ce123a3a72bdb4247b2598c6fc27090bda46577"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3ce123a3a72bdb4247b2598c6fc27090bda46577","date":1559743030,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#LatLonShapeBoundingBoxQuery(String,LatLonShape.QueryRelation,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#LatLonShapeBoundingBoxQuery(String,LatLonShape.QueryRelation,double,double,double,double).mjava","sourceNew":"  public LatLonShapeBoundingBoxQuery(String field, LatLonShape.QueryRelation queryRelation, double minLat, double maxLat, double minLon, double maxLon) {\n    super(field, queryRelation);\n    this.rectangle = new Rectangle(minLat, maxLat, minLon, maxLon);\n    this.rectangle2D = Rectangle2D.create(this.rectangle);\n  }\n\n","sourceOld":"  public LatLonShapeBoundingBoxQuery(String field, LatLonShape.QueryRelation queryRelation, double minLat, double maxLat, double minLon, double maxLon) {\n    super(field, queryRelation);\n    Rectangle rectangle = new Rectangle(minLat, maxLat, minLon, maxLon);\n    this.rectangle2D = Rectangle2D.create(rectangle);\n  }\n\n","bugFix":["9feee35369998c08f5168e0808e67e09857d5bac"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#LatLonShapeBoundingBoxQuery(String,QueryRelation,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#LatLonShapeBoundingBoxQuery(String,LatLonShape.QueryRelation,double,double,double,double).mjava","sourceNew":"  public LatLonShapeBoundingBoxQuery(String field, QueryRelation queryRelation, double minLat, double maxLat, double minLon, double maxLon) {\n    super(field, queryRelation);\n    this.rectangle = new Rectangle(minLat, maxLat, minLon, maxLon);\n    this.rectangle2D = Rectangle2D.create(this.rectangle);\n  }\n\n","sourceOld":"  public LatLonShapeBoundingBoxQuery(String field, LatLonShape.QueryRelation queryRelation, double minLat, double maxLat, double minLon, double maxLon) {\n    super(field, queryRelation);\n    this.rectangle = new Rectangle(minLat, maxLat, minLon, maxLon);\n    this.rectangle2D = Rectangle2D.create(this.rectangle);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3e49feed1f08d73738a9726a61709a7c57ede9f2":["d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d"],"e48f589a9604e11db23a025a27efbf3d14ab4e3b":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"9feee35369998c08f5168e0808e67e09857d5bac":["3e49feed1f08d73738a9726a61709a7c57ede9f2"],"3ce123a3a72bdb4247b2598c6fc27090bda46577":["9feee35369998c08f5168e0808e67e09857d5bac"],"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d":["e48f589a9604e11db23a025a27efbf3d14ab4e3b"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c286b0d8c507a88b289407e2fe161effa275c6b0":["3ce123a3a72bdb4247b2598c6fc27090bda46577"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c286b0d8c507a88b289407e2fe161effa275c6b0"]},"commit2Childs":{"3e49feed1f08d73738a9726a61709a7c57ede9f2":["9feee35369998c08f5168e0808e67e09857d5bac"],"e48f589a9604e11db23a025a27efbf3d14ab4e3b":["d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d"],"9feee35369998c08f5168e0808e67e09857d5bac":["3ce123a3a72bdb4247b2598c6fc27090bda46577"],"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d":["3e49feed1f08d73738a9726a61709a7c57ede9f2"],"3ce123a3a72bdb4247b2598c6fc27090bda46577":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["e48f589a9604e11db23a025a27efbf3d14ab4e3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}