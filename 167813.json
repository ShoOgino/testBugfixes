{"path":"src/java/org/apache/lucene/index/MultiReader#initialize(IndexReader[],boolean).mjava","commits":[{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#initialize(IndexReader[],boolean).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#initialize(IndexReader[]).mjava","sourceNew":"  private void initialize(IndexReader[] subReaders, boolean closeSubReaders) {\n    this.subReaders = subReaders;\n    starts = new int[subReaders.length + 1];    // build starts array\n    decrefOnClose = new boolean[subReaders.length];\n    for (int i = 0; i < subReaders.length; i++) {\n      starts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();      // compute maxDocs\n\n      if (!closeSubReaders) {\n        subReaders[i].incRef();\n        decrefOnClose[i] = true;\n      } else {\n        decrefOnClose[i] = false;\n      }\n      \n      if (subReaders[i].hasDeletions())\n        hasDeletions = true;\n    }\n    starts[subReaders.length] = maxDoc;\n  }\n\n","sourceOld":"  private void initialize(IndexReader[] subReaders) {\n    this.subReaders = subReaders;\n    starts = new int[subReaders.length + 1];    // build starts array\n    for (int i = 0; i < subReaders.length; i++) {\n      starts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();      // compute maxDocs\n\n      if (subReaders[i].hasDeletions())\n        hasDeletions = true;\n    }\n    starts[subReaders.length] = maxDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f8fa8e07e97430f3696a3612ea855d4c6f08000","date":1214926231,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#initialize(IndexReader[],boolean).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#initialize(IndexReader[],boolean).mjava","sourceNew":"  private void initialize(IndexReader[] subReaders, boolean closeSubReaders) {\n    this.subReaders = (IndexReader[]) subReaders.clone();\n    starts = new int[subReaders.length + 1];    // build starts array\n    decrefOnClose = new boolean[subReaders.length];\n    for (int i = 0; i < subReaders.length; i++) {\n      starts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();      // compute maxDocs\n\n      if (!closeSubReaders) {\n        subReaders[i].incRef();\n        decrefOnClose[i] = true;\n      } else {\n        decrefOnClose[i] = false;\n      }\n      \n      if (subReaders[i].hasDeletions())\n        hasDeletions = true;\n    }\n    starts[subReaders.length] = maxDoc;\n  }\n\n","sourceOld":"  private void initialize(IndexReader[] subReaders, boolean closeSubReaders) {\n    this.subReaders = subReaders;\n    starts = new int[subReaders.length + 1];    // build starts array\n    decrefOnClose = new boolean[subReaders.length];\n    for (int i = 0; i < subReaders.length; i++) {\n      starts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();      // compute maxDocs\n\n      if (!closeSubReaders) {\n        subReaders[i].incRef();\n        decrefOnClose[i] = true;\n      } else {\n        decrefOnClose[i] = false;\n      }\n      \n      if (subReaders[i].hasDeletions())\n        hasDeletions = true;\n    }\n    starts[subReaders.length] = maxDoc;\n  }\n\n","bugFix":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e1ce9be74263e9659aad8a6ee1f213193710b71","date":1256298843,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiReader#initialize(IndexReader[],boolean).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#initialize(IndexReader[],boolean).mjava","sourceNew":"  private void initialize(IndexReader[] subReaders, boolean closeSubReaders) {\n    this.subReaders =  subReaders.clone();\n    starts = new int[subReaders.length + 1];    // build starts array\n    decrefOnClose = new boolean[subReaders.length];\n    for (int i = 0; i < subReaders.length; i++) {\n      starts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();      // compute maxDocs\n\n      if (!closeSubReaders) {\n        subReaders[i].incRef();\n        decrefOnClose[i] = true;\n      } else {\n        decrefOnClose[i] = false;\n      }\n      \n      if (subReaders[i].hasDeletions())\n        hasDeletions = true;\n    }\n    starts[subReaders.length] = maxDoc;\n  }\n\n","sourceOld":"  private void initialize(IndexReader[] subReaders, boolean closeSubReaders) {\n    this.subReaders = (IndexReader[]) subReaders.clone();\n    starts = new int[subReaders.length + 1];    // build starts array\n    decrefOnClose = new boolean[subReaders.length];\n    for (int i = 0; i < subReaders.length; i++) {\n      starts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();      // compute maxDocs\n\n      if (!closeSubReaders) {\n        subReaders[i].incRef();\n        decrefOnClose[i] = true;\n      } else {\n        decrefOnClose[i] = false;\n      }\n      \n      if (subReaders[i].hasDeletions())\n        hasDeletions = true;\n    }\n    starts[subReaders.length] = maxDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/MultiReader#initialize(IndexReader[],boolean).mjava","pathOld":"src/java/org/apache/lucene/index/MultiReader#initialize(IndexReader[],boolean).mjava","sourceNew":"  private void initialize(IndexReader[] subReaders, boolean closeSubReaders) {\n    this.subReaders =  subReaders.clone();\n    starts = new int[subReaders.length + 1];    // build starts array\n    decrefOnClose = new boolean[subReaders.length];\n    for (int i = 0; i < subReaders.length; i++) {\n      starts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();      // compute maxDocs\n\n      if (!closeSubReaders) {\n        subReaders[i].incRef();\n        decrefOnClose[i] = true;\n      } else {\n        decrefOnClose[i] = false;\n      }\n      \n      if (subReaders[i].hasDeletions())\n        hasDeletions = true;\n    }\n    starts[subReaders.length] = maxDoc;\n  }\n\n","sourceOld":"  private void initialize(IndexReader[] subReaders, boolean closeSubReaders) {\n    this.subReaders =  subReaders.clone();\n    starts = new int[subReaders.length + 1];    // build starts array\n    decrefOnClose = new boolean[subReaders.length];\n    for (int i = 0; i < subReaders.length; i++) {\n      starts[i] = maxDoc;\n      maxDoc += subReaders[i].maxDoc();      // compute maxDocs\n\n      if (!closeSubReaders) {\n        subReaders[i].incRef();\n        decrefOnClose[i] = true;\n      } else {\n        decrefOnClose[i] = false;\n      }\n      \n      if (subReaders[i].hasDeletions())\n        hasDeletions = true;\n    }\n    starts[subReaders.length] = maxDoc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["3f8fa8e07e97430f3696a3612ea855d4c6f08000"],"3f8fa8e07e97430f3696a3612ea855d4c6f08000":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4e1ce9be74263e9659aad8a6ee1f213193710b71"]},"commit2Childs":{"4e1ce9be74263e9659aad8a6ee1f213193710b71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3f8fa8e07e97430f3696a3612ea855d4c6f08000":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["3f8fa8e07e97430f3696a3612ea855d4c6f08000"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}