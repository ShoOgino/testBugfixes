{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSet#computeHash().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSet#computeHash().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/SortedIntSet#computeHash().mjava","sourceNew":"  public void computeHash() {\n    if (useTreeMap) {\n      if (map.size() > values.length) {\n        final int size = ArrayUtil.oversize(map.size(), RamUsageEstimator.NUM_BYTES_INT);\n        values = new int[size];\n        counts = new int[size];\n      }\n      hashCode = map.size();\n      upto = 0;\n      for(int state : map.keySet()) {\n        hashCode = 683*hashCode + state;\n        values[upto++] = state;\n      }\n    } else {\n      hashCode = upto;\n      for(int i=0;i<upto;i++) {\n        hashCode = 683*hashCode + values[i];\n      }\n    }\n  }\n\n","sourceOld":"  public void computeHash() {\n    if (useTreeMap) {\n      if (map.size() > values.length) {\n        final int size = ArrayUtil.oversize(map.size(), RamUsageEstimator.NUM_BYTES_INT);\n        values = new int[size];\n        counts = new int[size];\n      }\n      hashCode = map.size();\n      upto = 0;\n      for(int state : map.keySet()) {\n        hashCode = 683*hashCode + state;\n        values[upto++] = state;\n      }\n    } else {\n      hashCode = upto;\n      for(int i=0;i<upto;i++) {\n        hashCode = 683*hashCode + values[i];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSet#computeHash().mjava","sourceNew":null,"sourceOld":"  public void computeHash() {\n    if (useTreeMap) {\n      if (map.size() > values.length) {\n        final int size = ArrayUtil.oversize(map.size(), RamUsageEstimator.NUM_BYTES_INT);\n        values = new int[size];\n        counts = new int[size];\n      }\n      hashCode = map.size();\n      upto = 0;\n      for(int state : map.keySet()) {\n        hashCode = 683*hashCode + state;\n        values[upto++] = state;\n      }\n    } else {\n      hashCode = upto;\n      for(int i=0;i<upto;i++) {\n        hashCode = 683*hashCode + values[i];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSet#computeHash().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSetLight#computeHash().mjava","sourceNew":"  public void computeHash() {\n    if (useTreeMap) {\n      if (map.size() > values.length) {\n        final int size = ArrayUtil.oversize(map.size(), RamUsageEstimator.NUM_BYTES_INT);\n        values = new int[size];\n        counts = new int[size];\n      }\n      hashCode = map.size();\n      upto = 0;\n      for(int state : map.keySet()) {\n        hashCode = 683*hashCode + state;\n        values[upto++] = state;\n      }\n    } else {\n      hashCode = upto;\n      for(int i=0;i<upto;i++) {\n        hashCode = 683*hashCode + values[i];\n      }\n    }\n  }\n\n","sourceOld":"  public void computeHash() {\n    if (useTreeMap) {\n      if (map.size() > values.length) {\n        final int size = ArrayUtil.oversize(map.size(), RamUsageEstimator.NUM_BYTES_INT);\n        values = new int[size];\n        counts = new int[size];\n      }\n      hashCode = map.size();\n      upto = 0;\n      for(int state : map.keySet()) {\n        hashCode = 683*hashCode + state;\n        values[upto++] = state;\n      }\n    } else {\n      hashCode = upto;\n      for(int i=0;i<upto;i++) {\n        hashCode = 683*hashCode + values[i];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSet#computeHash().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSet#computeHash().mjava","sourceNew":"  public void computeHash() {\n    if (useTreeMap) {\n      if (map.size() > values.length) {\n        final int size = ArrayUtil.oversize(map.size(), Integer.BYTES);\n        values = new int[size];\n        counts = new int[size];\n      }\n      hashCode = map.size();\n      upto = 0;\n      for(int state : map.keySet()) {\n        hashCode = 683*hashCode + state;\n        values[upto++] = state;\n      }\n    } else {\n      hashCode = upto;\n      for(int i=0;i<upto;i++) {\n        hashCode = 683*hashCode + values[i];\n      }\n    }\n  }\n\n","sourceOld":"  public void computeHash() {\n    if (useTreeMap) {\n      if (map.size() > values.length) {\n        final int size = ArrayUtil.oversize(map.size(), RamUsageEstimator.NUM_BYTES_INT);\n        values = new int[size];\n        counts = new int[size];\n      }\n      hashCode = map.size();\n      upto = 0;\n      for(int state : map.keySet()) {\n        hashCode = 683*hashCode + state;\n        values[upto++] = state;\n      }\n    } else {\n      hashCode = upto;\n      for(int i=0;i<upto;i++) {\n        hashCode = 683*hashCode + values[i];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSet#computeHash().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSet#computeHash().mjava","sourceNew":"  public void computeHash() {\n    if (useTreeMap) {\n      if (map.size() > values.length) {\n        final int size = ArrayUtil.oversize(map.size(), Integer.BYTES);\n        values = new int[size];\n        counts = new int[size];\n      }\n      hashCode = map.size();\n      upto = 0;\n      for(int state : map.keySet()) {\n        hashCode = 683*hashCode + state;\n        values[upto++] = state;\n      }\n    } else {\n      hashCode = upto;\n      for(int i=0;i<upto;i++) {\n        hashCode = 683*hashCode + values[i];\n      }\n    }\n  }\n\n","sourceOld":"  public void computeHash() {\n    if (useTreeMap) {\n      if (map.size() > values.length) {\n        final int size = ArrayUtil.oversize(map.size(), RamUsageEstimator.NUM_BYTES_INT);\n        values = new int[size];\n        counts = new int[size];\n      }\n      hashCode = map.size();\n      upto = 0;\n      for(int state : map.keySet()) {\n        hashCode = 683*hashCode + state;\n        values[upto++] = state;\n      }\n    } else {\n      hashCode = upto;\n      for(int i=0;i<upto;i++) {\n        hashCode = 683*hashCode + values[i];\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6b23a02f76f15e0dd99a6951055a45aa5c43c48","date":1581020205,"type":3,"author":"Mike","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSet#computeHash().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/SortedIntSet#computeHash().mjava","sourceNew":"  void computeHash() {\n    if (useTreeMap) {\n      if (map.size() > values.length) {\n        final int size = ArrayUtil.oversize(map.size(), Integer.BYTES);\n        values = new int[size];\n        counts = new int[size];\n      }\n      hashCode = map.size();\n      upto = 0;\n      for(int state : map.keySet()) {\n        hashCode = 683*hashCode + state;\n        values[upto++] = state;\n      }\n    } else {\n      hashCode = upto;\n      for(int i=0;i<upto;i++) {\n        hashCode = 683*hashCode + values[i];\n      }\n    }\n  }\n\n","sourceOld":"  public void computeHash() {\n    if (useTreeMap) {\n      if (map.size() > values.length) {\n        final int size = ArrayUtil.oversize(map.size(), Integer.BYTES);\n        values = new int[size];\n        counts = new int[size];\n      }\n      hashCode = map.size();\n      upto = 0;\n      for(int state : map.keySet()) {\n        hashCode = 683*hashCode + state;\n        values[upto++] = state;\n      }\n    } else {\n      hashCode = upto;\n      for(int i=0;i<upto;i++) {\n        hashCode = 683*hashCode + values[i];\n      }\n    }\n  }\n\n","bugFix":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d6b23a02f76f15e0dd99a6951055a45aa5c43c48":["419a8f52c6635419beb951255cacbbb281044c57"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"419a8f52c6635419beb951255cacbbb281044c57":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d6b23a02f76f15e0dd99a6951055a45aa5c43c48"]},"commit2Childs":{"d6b23a02f76f15e0dd99a6951055a45aa5c43c48":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["419a8f52c6635419beb951255cacbbb281044c57","f226a8b088dd9c8f6ab287a77237c4aa00a238e5","7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"419a8f52c6635419beb951255cacbbb281044c57":["d6b23a02f76f15e0dd99a6951055a45aa5c43c48"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}