{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/QueryParserUtil#parse(String,String[],BooleanClause.Occur[],Analyzer).mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/QueryParserUtil#parse(String,String[],BooleanClause.Occur[],Analyzer).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/QueryParserUtil#parse(String,String[],BooleanClause.Occur[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query, searching on the fields specified. Use this if you need to\n   * specify certain fields as required, and others as prohibited.\n   * <p>\n   * \n   * <pre>\n   * Usage:\n   * &lt;code&gt;\n   * String[] fields = {&quot;filename&quot;, &quot;contents&quot;, &quot;description&quot;};\n   * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,\n   *                BooleanClause.Occur.MUST,\n   *                BooleanClause.Occur.MUST_NOT};\n   * MultiFieldQueryParser.parse(&quot;query&quot;, fields, flags, analyzer);\n   * &lt;/code&gt;\n   * </pre>\n   *<p>\n   * The code above would construct a query:\n   * \n   * <pre>\n   * &lt;code&gt;\n   * (filename:query) +(contents:query) -(description:query)\n   * &lt;/code&gt;\n   * </pre>\n   * \n   * @param query\n   *          Query string to parse\n   * @param fields\n   *          Fields to search on\n   * @param flags\n   *          Flags describing the fields\n   * @param analyzer\n   *          Analyzer to use\n   * @throws IllegalArgumentException\n   *           if the length of the fields array differs from the length of the\n   *           flags array\n   */\n  public static Query parse(String query, String[] fields,\n      BooleanClause.Occur[] flags, Analyzer analyzer) throws QueryNodeException {\n    if (fields.length != flags.length)\n      throw new IllegalArgumentException(\"fields.length != flags.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(analyzer);\n\n    for (int i = 0; i < fields.length; i++) {\n      Query q = qp.parse(query, fields[i]);\n\n      if (q != null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery) q).getClauses().length > 0)) {\n        bQuery.add(q, flags[i]);\n      }\n    }\n    return bQuery;\n  }\n\n","sourceOld":"  /**\n   * Parses a query, searching on the fields specified. Use this if you need to\n   * specify certain fields as required, and others as prohibited.\n   * <p>\n   * \n   * <pre>\n   * Usage:\n   * &lt;code&gt;\n   * String[] fields = {&quot;filename&quot;, &quot;contents&quot;, &quot;description&quot;};\n   * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,\n   *                BooleanClause.Occur.MUST,\n   *                BooleanClause.Occur.MUST_NOT};\n   * MultiFieldQueryParser.parse(&quot;query&quot;, fields, flags, analyzer);\n   * &lt;/code&gt;\n   * </pre>\n   *<p>\n   * The code above would construct a query:\n   * \n   * <pre>\n   * &lt;code&gt;\n   * (filename:query) +(contents:query) -(description:query)\n   * &lt;/code&gt;\n   * </pre>\n   * \n   * @param query\n   *          Query string to parse\n   * @param fields\n   *          Fields to search on\n   * @param flags\n   *          Flags describing the fields\n   * @param analyzer\n   *          Analyzer to use\n   * @throws IllegalArgumentException\n   *           if the length of the fields array differs from the length of the\n   *           flags array\n   */\n  public static Query parse(String query, String[] fields,\n      BooleanClause.Occur[] flags, Analyzer analyzer) throws QueryNodeException {\n    if (fields.length != flags.length)\n      throw new IllegalArgumentException(\"fields.length != flags.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(analyzer);\n\n    for (int i = 0; i < fields.length; i++) {\n      Query q = qp.parse(query, fields[i]);\n\n      if (q != null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery) q).getClauses().length > 0)) {\n        bQuery.add(q, flags[i]);\n      }\n    }\n    return bQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/QueryParserUtil#parse(String,String[],BooleanClause.Occur[],Analyzer).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/QueryParserUtil#parse(String,String[],BooleanClause.Occur[],Analyzer).mjava","sourceNew":"  /**\n   * Parses a query, searching on the fields specified. Use this if you need to\n   * specify certain fields as required, and others as prohibited.\n   * <p>\n   * \n   * <pre>\n   * Usage:\n   * &lt;code&gt;\n   * String[] fields = {&quot;filename&quot;, &quot;contents&quot;, &quot;description&quot;};\n   * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,\n   *                BooleanClause.Occur.MUST,\n   *                BooleanClause.Occur.MUST_NOT};\n   * MultiFieldQueryParser.parse(&quot;query&quot;, fields, flags, analyzer);\n   * &lt;/code&gt;\n   * </pre>\n   *<p>\n   * The code above would construct a query:\n   * \n   * <pre>\n   * &lt;code&gt;\n   * (filename:query) +(contents:query) -(description:query)\n   * &lt;/code&gt;\n   * </pre>\n   * \n   * @param query\n   *          Query string to parse\n   * @param fields\n   *          Fields to search on\n   * @param flags\n   *          Flags describing the fields\n   * @param analyzer\n   *          Analyzer to use\n   * @throws IllegalArgumentException\n   *           if the length of the fields array differs from the length of the\n   *           flags array\n   */\n  public static Query parse(String query, String[] fields,\n      BooleanClause.Occur[] flags, Analyzer analyzer) throws QueryNodeException {\n    if (fields.length != flags.length)\n      throw new IllegalArgumentException(\"fields.length != flags.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(analyzer);\n\n    for (int i = 0; i < fields.length; i++) {\n      Query q = qp.parse(query, fields[i]);\n\n      if (q != null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery) q).getClauses().length > 0)) {\n        bQuery.add(q, flags[i]);\n      }\n    }\n    return bQuery;\n  }\n\n","sourceOld":"  /**\n   * Parses a query, searching on the fields specified. Use this if you need to\n   * specify certain fields as required, and others as prohibited.\n   * <p>\n   * \n   * <pre>\n   * Usage:\n   * &lt;code&gt;\n   * String[] fields = {&quot;filename&quot;, &quot;contents&quot;, &quot;description&quot;};\n   * BooleanClause.Occur[] flags = {BooleanClause.Occur.SHOULD,\n   *                BooleanClause.Occur.MUST,\n   *                BooleanClause.Occur.MUST_NOT};\n   * MultiFieldQueryParser.parse(&quot;query&quot;, fields, flags, analyzer);\n   * &lt;/code&gt;\n   * </pre>\n   *<p>\n   * The code above would construct a query:\n   * \n   * <pre>\n   * &lt;code&gt;\n   * (filename:query) +(contents:query) -(description:query)\n   * &lt;/code&gt;\n   * </pre>\n   * \n   * @param query\n   *          Query string to parse\n   * @param fields\n   *          Fields to search on\n   * @param flags\n   *          Flags describing the fields\n   * @param analyzer\n   *          Analyzer to use\n   * @throws IllegalArgumentException\n   *           if the length of the fields array differs from the length of the\n   *           flags array\n   */\n  public static Query parse(String query, String[] fields,\n      BooleanClause.Occur[] flags, Analyzer analyzer) throws QueryNodeException {\n    if (fields.length != flags.length)\n      throw new IllegalArgumentException(\"fields.length != flags.length\");\n    BooleanQuery bQuery = new BooleanQuery();\n\n    StandardQueryParser qp = new StandardQueryParser();\n    qp.setAnalyzer(analyzer);\n\n    for (int i = 0; i < fields.length; i++) {\n      Query q = qp.parse(query, fields[i]);\n\n      if (q != null && // q never null, just being defensive\n          (!(q instanceof BooleanQuery) || ((BooleanQuery) q).getClauses().length > 0)) {\n        bQuery.add(q, flags[i]);\n      }\n    }\n    return bQuery;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}