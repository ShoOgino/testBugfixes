{"path":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    Directory directory = newDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer.close();\n    writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    writer.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    Directory directory = newDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer.close();\n    writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    writer.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    Directory directory = newDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer.close();\n    writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    writer.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    Directory directory = newDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer.close();\n    writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    writer.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() throws IOException {\n    boolean enforceSingleSegment = true;\n    Directory directory = newDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer.close();\n    writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    writer.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    Directory directory = newDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer.close();\n    writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    writer.close();\n    directory.close();\n  }\n\n","bugFix":["2f9c6c7abe2f7f9fdd4c838d1601dcd707946566"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() throws IOException {\n    boolean enforceSingleSegment = true;\n    Directory directory = newDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer.close();\n    writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    writer.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFilteredSearch() throws CorruptIndexException, LockObtainFailedException, IOException {\n    boolean enforceSingleSegment = true;\n    Directory directory = newDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer.close();\n    writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    writer.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2821810e3dd9809a8fd40ee8a49bed97491001d","date":1366918025,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() throws IOException {\n    boolean enforceSingleSegment = true;\n    Directory directory = newDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    writer.close();\n    writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    writer.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testFilteredSearch() throws IOException {\n    boolean enforceSingleSegment = true;\n    Directory directory = newDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    // reset - it is stateful\n    filter.reset();\n    writer.close();\n    writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    writer.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() throws IOException {\n    boolean enforceSingleSegment = true;\n    Directory directory = newDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    directory.close();\n  }\n\n","sourceOld":"  public void testFilteredSearch() throws IOException {\n    boolean enforceSingleSegment = true;\n    Directory directory = newDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    writer.close();\n    writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    writer.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":"  public void testFilteredSearch() throws IOException {\n    boolean enforceSingleSegment = true;\n    Directory directory = newDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    directory.close();\n  }\n\n","sourceOld":"  public void testFilteredSearch() throws IOException {\n    boolean enforceSingleSegment = true;\n    Directory directory = newDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    writer = new IndexWriter(directory, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFilteredSearch#testFilteredSearch().mjava","sourceNew":null,"sourceOld":"  public void testFilteredSearch() throws IOException {\n    boolean enforceSingleSegment = true;\n    Directory directory = newDirectory();\n    int[] filterBits = {1, 36};\n    SimpleDocIdSetFilter filter = new SimpleDocIdSetFilter(filterBits);\n    IndexWriter writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())).setMergePolicy(newLogMergePolicy()));\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    // run the test on more than one segment\n    enforceSingleSegment = false;\n    writer = new IndexWriter(directory, newIndexWriterConfig(new MockAnalyzer(random())).setOpenMode(OpenMode.CREATE).setMaxBufferedDocs(10).setMergePolicy(newLogMergePolicy()));\n    // we index 60 docs - this will create 6 segments\n    searchFiltered(writer, directory, filter, enforceSingleSegment);\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1db68e96dd908fcd79ef809095822736aa601d08":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["c2821810e3dd9809a8fd40ee8a49bed97491001d"],"c2821810e3dd9809a8fd40ee8a49bed97491001d":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"]},"commit2Childs":{"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["1db68e96dd908fcd79ef809095822736aa601d08"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c2821810e3dd9809a8fd40ee8a49bed97491001d"],"c2821810e3dd9809a8fd40ee8a49bed97491001d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}