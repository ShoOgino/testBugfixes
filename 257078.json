{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/NodesSysPropsCacher#NodesSysPropsCacher(NodeStateProvider,String,ZkStateReader).mjava","commits":[{"id":"833432c363468a5df50f87446a68015404b1fbcf","date":1572302961,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/NodesSysPropsCacher#NodesSysPropsCacher(NodeStateProvider,String,ZkStateReader).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/NodesSysPropsCacher#NodesSysPropsCacher(NodeStateProvider,String,ZkStateReader).mjava","sourceNew":"  public NodesSysPropsCacher(NodeStateProvider nodeStateProvider,\n                             String currentNode,\n                             ZkStateReader stateReader) {\n    this.nodeStateProvider = nodeStateProvider;\n    this.currentNode = currentNode;\n\n    stateReader.registerClusterPropertiesListener(properties -> {\n      Collection<String> tags = new ArrayList<>();\n      String shardPreferences = (String) properties.getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\");\n      if (shardPreferences.contains(ShardParams.SHARDS_PREFERENCE_NODE_WITH_SAME_SYSPROP)) {\n        try {\n          tags = PreferenceRule\n              .from(shardPreferences)\n              .stream()\n              .filter(r -> ShardParams.SHARDS_PREFERENCE_NODE_WITH_SAME_SYSPROP.equals(r.name))\n              .map(r -> r.value)\n              .collect(Collectors.toSet());\n        } catch (Exception e) {\n          log.info(\"Error on parsing shards preference:{}\", shardPreferences);\n        }\n      }\n\n      if (tags.isEmpty()) {\n        pause();\n      } else {\n        start(tags);\n        // start fetching now\n        fetchSysProps(stateReader.getClusterState().getLiveNodes());\n      }\n      return isClosed;\n    });\n\n    stateReader.registerLiveNodesListener((oldLiveNodes, newLiveNodes) -> {\n      fetchSysProps(newLiveNodes);\n      return isClosed;\n    });\n  }\n\n","sourceOld":"  NodesSysPropsCacher(NodeStateProvider nodeStateProvider,\n                      String currentNode,\n                      ZkStateReader stateReader) {\n    this.nodeStateProvider = nodeStateProvider;\n    this.currentNode = currentNode;\n\n    stateReader.registerClusterPropertiesListener(properties -> {\n      Collection<String> tags = new ArrayList<>();\n      String shardPreferences = (String) properties.getOrDefault(ZkStateReader.DEFAULT_SHARD_PREFERENCES, \"\");\n      if (shardPreferences.contains(ShardParams.SHARDS_PREFERENCE_NODE_WITH_SAME_SYSPROP)) {\n        try {\n          tags = PreferenceRule\n              .from(shardPreferences)\n              .stream()\n              .filter(r -> ShardParams.SHARDS_PREFERENCE_NODE_WITH_SAME_SYSPROP.equals(r.name))\n              .map(r -> r.value)\n              .collect(Collectors.toSet());\n        } catch (Exception e) {\n          log.info(\"Error on parsing shards preference:{}\", shardPreferences);\n        }\n      }\n\n      if (tags.isEmpty()) {\n        pause();\n      } else {\n        start(tags);\n        // start fetching now\n        fetchSysProps(stateReader.getClusterState().getLiveNodes());\n      }\n      return isClosed;\n    });\n\n    stateReader.registerLiveNodesListener((oldLiveNodes, newLiveNodes) -> {\n      fetchSysProps(newLiveNodes);\n      return isClosed;\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"833432c363468a5df50f87446a68015404b1fbcf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["833432c363468a5df50f87446a68015404b1fbcf"]},"commit2Childs":{"833432c363468a5df50f87446a68015404b1fbcf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["833432c363468a5df50f87446a68015404b1fbcf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}