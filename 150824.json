{"path":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testMinFunction().mjava","commits":[{"id":"63962b8b453f75ca481172689753cdb3ca868d4c","date":1283201927,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testMinFunction().mjava","pathOld":"/dev/null","sourceNew":"  public void testMinFunction() throws IOException {\n\t  PayloadNearQuery query;\n\t  TopDocs hits;\n\n\t  query = newPhraseQuery(\"field\", \"twenty two\", true, new MinPayloadFunction());\n\t  QueryUtils.check(query);\n\t  // all 10 hits should have score = 2 (min payload value)\n\t  hits = searcher.search(query, null, 100);\n\t  assertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t  assertTrue(\"should be 10 hits\", hits.totalHits == 10);\n\t  for (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t  ScoreDoc doc = hits.scoreDocs[j];\n\t\t  assertTrue(doc.score + \" does not equal: \" + 2, doc.score == 2);\n\t\t  Explanation explain = searcher.explain(query, hits.scoreDocs[j].doc);\n\t\t  String exp = explain.toString();\n\t\t  assertTrue(exp, exp.indexOf(\"MinPayloadFunction\") > -1);\n\t\t  assertTrue(hits.scoreDocs[j].score + \" explain value does not equal: \" + 2, explain.getValue() == 2f);\n\t  }\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testMinFunction().mjava","pathOld":"/dev/null","sourceNew":"  public void testMinFunction() throws IOException {\n\t  PayloadNearQuery query;\n\t  TopDocs hits;\n\n\t  query = newPhraseQuery(\"field\", \"twenty two\", true, new MinPayloadFunction());\n\t  QueryUtils.check(query);\n\t  // all 10 hits should have score = 2 (min payload value)\n\t  hits = searcher.search(query, null, 100);\n\t  assertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t  assertTrue(\"should be 10 hits\", hits.totalHits == 10);\n\t  for (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t  ScoreDoc doc = hits.scoreDocs[j];\n\t\t  assertTrue(doc.score + \" does not equal: \" + 2, doc.score == 2);\n\t\t  Explanation explain = searcher.explain(query, hits.scoreDocs[j].doc);\n\t\t  String exp = explain.toString();\n\t\t  assertTrue(exp, exp.indexOf(\"MinPayloadFunction\") > -1);\n\t\t  assertTrue(hits.scoreDocs[j].score + \" explain value does not equal: \" + 2, explain.getValue() == 2f);\n\t  }\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testMinFunction().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#testMinFunction().mjava","sourceNew":"  public void testMinFunction() throws IOException {\n\t  PayloadNearQuery query;\n\t  TopDocs hits;\n\n\t  query = newPhraseQuery(\"field\", \"twenty two\", true, new MinPayloadFunction());\n\t  QueryUtils.check(query);\n\t  // all 10 hits should have score = 2 (min payload value)\n\t  hits = searcher.search(query, null, 100);\n\t  assertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t  assertTrue(\"should be 10 hits\", hits.totalHits == 10);\n\t  for (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t  ScoreDoc doc = hits.scoreDocs[j];\n\t\t  assertTrue(doc.score + \" does not equal: \" + 2, doc.score == 2);\n\t\t  Explanation explain = searcher.explain(query, hits.scoreDocs[j].doc);\n\t\t  String exp = explain.toString();\n\t\t  assertTrue(exp, exp.indexOf(\"MinPayloadFunction\") > -1);\n\t\t  assertTrue(hits.scoreDocs[j].score + \" explain value does not equal: \" + 2, explain.getValue() == 2f);\n\t  }\n  }  \n\n","sourceOld":"  public void testMinFunction() throws IOException {\n\t  PayloadNearQuery query;\n\t  TopDocs hits;\n\n\t  query = newPhraseQuery(\"field\", \"twenty two\", true, new MinPayloadFunction());\n\t  QueryUtils.check(query);\n\t  // all 10 hits should have score = 2 (min payload value)\n\t  hits = searcher.search(query, null, 100);\n\t  assertTrue(\"hits is null and it shouldn't be\", hits != null);\n\t  assertTrue(\"should be 10 hits\", hits.totalHits == 10);\n\t  for (int j = 0; j < hits.scoreDocs.length; j++) {\n\t\t  ScoreDoc doc = hits.scoreDocs[j];\n\t\t  assertTrue(doc.score + \" does not equal: \" + 2, doc.score == 2);\n\t\t  Explanation explain = searcher.explain(query, hits.scoreDocs[j].doc);\n\t\t  String exp = explain.toString();\n\t\t  assertTrue(exp, exp.indexOf(\"MinPayloadFunction\") > -1);\n\t\t  assertTrue(hits.scoreDocs[j].score + \" explain value does not equal: \" + 2, explain.getValue() == 2f);\n\t  }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["63962b8b453f75ca481172689753cdb3ca868d4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"63962b8b453f75ca481172689753cdb3ca868d4c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","63962b8b453f75ca481172689753cdb3ca868d4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["63962b8b453f75ca481172689753cdb3ca868d4c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"63962b8b453f75ca481172689753cdb3ca868d4c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}