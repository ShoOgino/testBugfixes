{"path":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","commits":[{"id":"dedd8b6e67b7ac7a77554562fddcf90e0031a95c","date":1391930936,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStart) throws KeeperException,\n      InterruptedException, IOException {\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, ZkStateReader.LEADER_PROP,\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement) throws KeeperException,\n      InterruptedException, IOException {\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, ZkStateReader.LEADER_PROP,\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b954d1444134ef40d3fcea752c6aaaff4e7da056","date":1393720045,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStart)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait just a bit\n    // to see if it goes away\n    RetryUtil.retryOnThrowable(NodeExistsException.class, 15000, 1000,\n        new RetryCmd() {\n          \n          @Override\n          public void execute() throws InterruptedException {\n            try {\n              zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n                  CreateMode.EPHEMERAL, true);\n            } catch (KeeperException e) {\n              throw new SolrException(\n                  ErrorCode.SERVER_ERROR,\n                  \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", e);\n            }\n          }\n        });\n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        ZkStateReader.LEADER_PROP, ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStart) throws KeeperException,\n      InterruptedException, IOException {\n    \n    zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n        CreateMode.EPHEMERAL, true);\n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, ZkStateReader.LEADER_PROP,\n        ZkStateReader.SHARD_ID_PROP, shardId, ZkStateReader.COLLECTION_PROP,\n        collection, ZkStateReader.BASE_URL_PROP, leaderProps.getProperties()\n            .get(ZkStateReader.BASE_URL_PROP), ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n    \n  }\n\n","bugFix":null,"bugIntro":["7d307d6a381e7b6f0e272e550d925d41e3c736c4","6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"512e034509e1a4227616f910489a995d4ad813af","date":1393801753,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait just a bit\n    // to see if it goes away\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 15000, 1000,\n          new RetryCmd() {\n            \n            @Override\n            public void execute() throws Throwable {\n              zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n                  CreateMode.EPHEMERAL, true);\n            }\n          });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        ZkStateReader.LEADER_PROP, ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStart)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait just a bit\n    // to see if it goes away\n    RetryUtil.retryOnThrowable(NodeExistsException.class, 15000, 1000,\n        new RetryCmd() {\n          \n          @Override\n          public void execute() throws InterruptedException {\n            try {\n              zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n                  CreateMode.EPHEMERAL, true);\n            } catch (KeeperException e) {\n              throw new SolrException(\n                  ErrorCode.SERVER_ERROR,\n                  \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", e);\n            }\n          }\n        });\n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        ZkStateReader.LEADER_PROP, ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":["7d307d6a381e7b6f0e272e550d925d41e3c736c4","6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14d5815ecbef89580f5c48990bcd433f04f8563a","date":1399564106,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait just a bit\n    // to see if it goes away\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 15000, 1000,\n          new RetryCmd() {\n            \n            @Override\n            public void execute() throws Throwable {\n              zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n                  CreateMode.EPHEMERAL, true);\n            }\n          });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        ZkStateReader.LEADER_PROP, ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));    \n  }  \n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait just a bit\n    // to see if it goes away\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 15000, 1000,\n          new RetryCmd() {\n            \n            @Override\n            public void execute() throws Throwable {\n              zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n                  CreateMode.EPHEMERAL, true);\n            }\n          });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        ZkStateReader.LEADER_PROP, ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c688f7052130cef7bd419c85e3c5be214f7b9e","date":1411018984,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait just a bit\n    // to see if it goes away\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 15000, 1000,\n          new RetryCmd() {\n            \n            @Override\n            public void execute() throws Throwable {\n              zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n                  CreateMode.EPHEMERAL, true);\n            }\n          });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        Overseer.OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));    \n  }  \n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait just a bit\n    // to see if it goes away\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 15000, 1000,\n          new RetryCmd() {\n            \n            @Override\n            public void execute() throws Throwable {\n              zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n                  CreateMode.EPHEMERAL, true);\n            }\n          });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        ZkStateReader.LEADER_PROP, ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));    \n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d307d6a381e7b6f0e272e550d925d41e3c736c4","date":1416916176,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait just a bit\n    // to see if it goes away\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 15000, 1000,\n          new RetryCmd() {\n            @Override\n            public void execute() throws Throwable {\n              zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps), CreateMode.EPHEMERAL, true);\n            }\n          }\n      );\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        Overseer.OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));    \n  }  \n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait just a bit\n    // to see if it goes away\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 15000, 1000,\n          new RetryCmd() {\n            \n            @Override\n            public void execute() throws Throwable {\n              zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps),\n                  CreateMode.EPHEMERAL, true);\n            }\n          });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        Overseer.OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));    \n  }  \n\n","bugFix":["512e034509e1a4227616f910489a995d4ad813af","b954d1444134ef40d3fcea752c6aaaff4e7da056"],"bugIntro":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"24a5da2a0d397ff29f3de8f6cf451d3412c2509a","date":1417276391,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait just a bit\n    // to see if it goes away\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 15000, 1000,\n          new RetryCmd() {\n            @Override\n            public void execute() throws Throwable {\n              zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps), CreateMode.EPHEMERAL, true);\n            }\n          }\n      );\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));    \n  }  \n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait just a bit\n    // to see if it goes away\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 15000, 1000,\n          new RetryCmd() {\n            @Override\n            public void execute() throws Throwable {\n              zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps), CreateMode.EPHEMERAL, true);\n            }\n          }\n      );\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        Overseer.OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));    \n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait just a bit\n    // to see if it goes away\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 15000, 1000,\n          new RetryCmd() {\n            @Override\n            public void execute() throws Throwable {\n              zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps), CreateMode.EPHEMERAL, true);\n            }\n          }\n      );\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));    \n  }  \n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait just a bit\n    // to see if it goes away\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 15000, 1000,\n          new RetryCmd() {\n            @Override\n            public void execute() throws Throwable {\n              zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps), CreateMode.EPHEMERAL, true);\n            }\n          }\n      );\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, ZkStateReader.ACTIVE);\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));    \n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait just a bit\n    // to see if it goes away\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 15000, 1000,\n          new RetryCmd() {\n            @Override\n            public void execute() throws Throwable {\n              zkClient.makePath(leaderPath, Utils.toJSON(leaderProps), CreateMode.EPHEMERAL, true);\n            }\n          }\n      );\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getInQueue(zkClient).offer(Utils.toJSON(m));\n  }  \n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait just a bit\n    // to see if it goes away\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 15000, 1000,\n          new RetryCmd() {\n            @Override\n            public void execute() throws Throwable {\n              zkClient.makePath(leaderPath, ZkStateReader.toJSON(leaderProps), CreateMode.EPHEMERAL, true);\n            }\n          }\n      );\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getInQueue(zkClient).offer(ZkStateReader.toJSON(m));    \n  }  \n\n","bugFix":null,"bugIntro":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064","date":1441124018,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, new RetryCmd() {\n        \n        @Override\n        public void execute() throws InterruptedException, KeeperException {\n          log.info(\"Creating leader registration node\", leaderPath);\n          List<Op> ops = new ArrayList<>(2);\n          \n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n          \n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n          \n          results = zkClient.multi(ops, true);\n          \n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getInQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait just a bit\n    // to see if it goes away\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 15000, 1000,\n          new RetryCmd() {\n            @Override\n            public void execute() throws Throwable {\n              zkClient.makePath(leaderPath, Utils.toJSON(leaderProps), CreateMode.EPHEMERAL, true);\n            }\n          }\n      );\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getInQueue(zkClient).offer(Utils.toJSON(m));\n  }  \n\n","bugFix":["7d307d6a381e7b6f0e272e550d925d41e3c736c4","512e034509e1a4227616f910489a995d4ad813af","b693a83132c9e45afcd564fd65a25b60ed80388b","b954d1444134ef40d3fcea752c6aaaff4e7da056","14d5815ecbef89580f5c48990bcd433f04f8563a"],"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b2bc6ae0c56fcd2bfbe6c26dbfa628bd0846daa2","date":1446727887,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, new RetryCmd() {\n        \n        @Override\n        public void execute() throws InterruptedException, KeeperException {\n          log.info(\"Creating leader registration node\", leaderPath);\n          List<Op> ops = new ArrayList<>(2);\n          \n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n          \n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n          \n          results = zkClient.multi(ops, true);\n          \n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    \n    ZkNodeProps m;\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Replica rep = (clusterState == null) ? null : clusterState.getReplica(collection, \n        leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n    if (rep != null && rep.getState() != Replica.State.ACTIVE) {\n      m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.NODE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.NODE_NAME_PROP),\n          ZkStateReader.CORE_NODE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.CORE_NODE_NAME_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP));\n      Overseer.getInQueue(zkClient).offer(Utils.toJSON(m));\n    }\n\n    m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n        ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.BASE_URL_PROP, leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP));\n    Overseer.getInQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, new RetryCmd() {\n        \n        @Override\n        public void execute() throws InterruptedException, KeeperException {\n          log.info(\"Creating leader registration node\", leaderPath);\n          List<Op> ops = new ArrayList<>(2);\n          \n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n          \n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n          \n          results = zkClient.multi(ops, true);\n          \n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getInQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bd378a5822440390b13239c736e2192b9d02bec","date":1447257770,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, new RetryCmd() {\n        \n        @Override\n        public void execute() throws InterruptedException, KeeperException {\n          log.info(\"Creating leader registration node\", leaderPath);\n          List<Op> ops = new ArrayList<>(2);\n          \n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n          \n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n          \n          results = zkClient.multi(ops, true);\n          \n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getInQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, new RetryCmd() {\n        \n        @Override\n        public void execute() throws InterruptedException, KeeperException {\n          log.info(\"Creating leader registration node\", leaderPath);\n          List<Op> ops = new ArrayList<>(2);\n          \n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n          \n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n          \n          results = zkClient.multi(ops, true);\n          \n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    \n    ZkNodeProps m;\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Replica rep = (clusterState == null) ? null : clusterState.getReplica(collection, \n        leaderProps.getStr(ZkStateReader.CORE_NODE_NAME_PROP));\n    if (rep != null && rep.getState() != Replica.State.ACTIVE) {\n      m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.STATE.toLower(),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.NODE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.NODE_NAME_PROP),\n          ZkStateReader.CORE_NODE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.CORE_NODE_NAME_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP));\n      Overseer.getInQueue(zkClient).offer(Utils.toJSON(m));\n    }\n\n    m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n        ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.BASE_URL_PROP, leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP, leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP));\n    Overseer.getInQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a1ea01e15f477524516b07b300a3ae03d1bec9bc","date":1455919598,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, new RetryCmd() {\n        \n        @Override\n        public void execute() throws InterruptedException, KeeperException {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n          \n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n          \n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n          \n          results = zkClient.multi(ops, true);\n          \n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getInQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, new RetryCmd() {\n        \n        @Override\n        public void execute() throws InterruptedException, KeeperException {\n          log.info(\"Creating leader registration node\", leaderPath);\n          List<Op> ops = new ArrayList<>(2);\n          \n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n          \n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n          \n          results = zkClient.multi(ops, true);\n          \n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getInQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e29cfec8d8ad7e37d8e7a4d954e786b3249c857","date":1456507932,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, new RetryCmd() {\n        \n        @Override\n        public void execute() throws InterruptedException, KeeperException {\n          synchronized (lock) {\n            log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n            List<Op> ops = new ArrayList<>(2);\n\n            // We use a multi operation to get the parent nodes version, which will\n            // be used to make sure we only remove our own leader registration node.\n            // The setData call used to get the parent version is also the trigger to\n            // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n            ops.add(Op.check(leaderSeqPath, -1));\n            ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n            ops.add(Op.setData(parent, null, -1));\n            List<OpResult> results;\n\n            results = zkClient.multi(ops, true);\n            for (OpResult result : results) {\n              if (result.getType() == ZooDefs.OpCode.setData) {\n                SetDataResult dresult = (SetDataResult) result;\n                Stat stat = dresult.getStat();\n                leaderZkNodeParentVersion = stat.getVersion();\n                return;\n              }\n            }\n            assert leaderZkNodeParentVersion != null;\n          }\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getInQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, new RetryCmd() {\n        \n        @Override\n        public void execute() throws InterruptedException, KeeperException {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n          \n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n          \n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n          \n          results = zkClient.multi(ops, true);\n          \n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getInQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, new RetryCmd() {\n        \n        @Override\n        public void execute() throws InterruptedException, KeeperException {\n          synchronized (lock) {\n            log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n            List<Op> ops = new ArrayList<>(2);\n\n            // We use a multi operation to get the parent nodes version, which will\n            // be used to make sure we only remove our own leader registration node.\n            // The setData call used to get the parent version is also the trigger to\n            // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n            ops.add(Op.check(leaderSeqPath, -1));\n            ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n            ops.add(Op.setData(parent, null, -1));\n            List<OpResult> results;\n\n            results = zkClient.multi(ops, true);\n            for (OpResult result : results) {\n              if (result.getType() == ZooDefs.OpCode.setData) {\n                SetDataResult dresult = (SetDataResult) result;\n                Stat stat = dresult.getStat();\n                leaderZkNodeParentVersion = stat.getVersion();\n                return;\n              }\n            }\n            assert leaderZkNodeParentVersion != null;\n          }\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, new RetryCmd() {\n        \n        @Override\n        public void execute() throws InterruptedException, KeeperException {\n          synchronized (lock) {\n            log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n            List<Op> ops = new ArrayList<>(2);\n\n            // We use a multi operation to get the parent nodes version, which will\n            // be used to make sure we only remove our own leader registration node.\n            // The setData call used to get the parent version is also the trigger to\n            // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n            ops.add(Op.check(leaderSeqPath, -1));\n            ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n            ops.add(Op.setData(parent, null, -1));\n            List<OpResult> results;\n\n            results = zkClient.multi(ops, true);\n            for (OpResult result : results) {\n              if (result.getType() == ZooDefs.OpCode.setData) {\n                SetDataResult dresult = (SetDataResult) result;\n                Stat stat = dresult.getStat();\n                leaderZkNodeParentVersion = stat.getVersion();\n                return;\n              }\n            }\n            assert leaderZkNodeParentVersion != null;\n          }\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getInQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, new RetryCmd() {\n        \n        @Override\n        public void execute() throws InterruptedException, KeeperException {\n          synchronized (lock) {\n            log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n            List<Op> ops = new ArrayList<>(2);\n\n            // We use a multi operation to get the parent nodes version, which will\n            // be used to make sure we only remove our own leader registration node.\n            // The setData call used to get the parent version is also the trigger to\n            // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n            ops.add(Op.check(leaderSeqPath, -1));\n            ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n            ops.add(Op.setData(parent, null, -1));\n            List<OpResult> results;\n\n            results = zkClient.multi(ops, true);\n            for (OpResult result : results) {\n              if (result.getType() == ZooDefs.OpCode.setData) {\n                SetDataResult dresult = (SetDataResult) result;\n                Stat stat = dresult.getStat();\n                leaderZkNodeParentVersion = stat.getVersion();\n                return;\n              }\n            }\n            assert leaderZkNodeParentVersion != null;\n          }\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, new RetryCmd() {\n        \n        @Override\n        public void execute() throws InterruptedException, KeeperException {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n          \n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n          \n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n          \n          results = zkClient.multi(ops, true);\n          \n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getInQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddd17dd71008bdecd624542b68b0f8161d53a068","date":1466401278,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, new RetryCmd() {\n        \n        @Override\n        public void execute() throws InterruptedException, KeeperException {\n          synchronized (lock) {\n            log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n            List<Op> ops = new ArrayList<>(2);\n\n            // We use a multi operation to get the parent nodes version, which will\n            // be used to make sure we only remove our own leader registration node.\n            // The setData call used to get the parent version is also the trigger to\n            // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n            ops.add(Op.check(leaderSeqPath, -1));\n            ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n            ops.add(Op.setData(parent, null, -1));\n            List<OpResult> results;\n\n            results = zkClient.multi(ops, true);\n            for (OpResult result : results) {\n              if (result.getType() == ZooDefs.OpCode.setData) {\n                SetDataResult dresult = (SetDataResult) result;\n                Stat stat = dresult.getStat();\n                leaderZkNodeParentVersion = stat.getVersion();\n                return;\n              }\n            }\n            assert leaderZkNodeParentVersion != null;\n          }\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5d615d62cd8aff3690943d765e46942551f98b6","date":1474881754,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, new RetryCmd() {\n        \n        @Override\n        public void execute() throws InterruptedException, KeeperException {\n          synchronized (lock) {\n            log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n            List<Op> ops = new ArrayList<>(2);\n\n            // We use a multi operation to get the parent nodes version, which will\n            // be used to make sure we only remove our own leader registration node.\n            // The setData call used to get the parent version is also the trigger to\n            // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n            ops.add(Op.check(leaderSeqPath, -1));\n            ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n            ops.add(Op.setData(parent, null, -1));\n            List<OpResult> results;\n\n            results = zkClient.multi(ops, true);\n            for (OpResult result : results) {\n              if (result.getType() == ZooDefs.OpCode.setData) {\n                SetDataResult dresult = (SetDataResult) result;\n                Stat stat = dresult.getStat();\n                leaderZkNodeParentVersion = stat.getVersion();\n                return;\n              }\n            }\n            assert leaderZkNodeParentVersion != null;\n          }\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    \n    if (!zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n      log.info(\"Will not register as leader because collection appears to be gone.\");\n      return;\n    }\n    \n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    zcmd.ensureExists(parent, (byte[])null, CreateMode.PERSISTENT, zkClient, 2);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","bugFix":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    \n    if (!zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n      log.info(\"Will not register as leader because collection appears to be gone.\");\n      return;\n    }\n    \n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    zcmd.ensureExists(parent, (byte[])null, CreateMode.PERSISTENT, zkClient, 2);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    zcmd.ensureExists(parent, zkClient);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    \n    if (!zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n      log.info(\"Will not register as leader because collection appears to be gone.\");\n      return;\n    }\n    \n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    zcmd.ensureExists(parent, (byte[])null, CreateMode.PERSISTENT, zkClient, 2);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    try {\n      Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n    } catch (Exception e) {\n      throw new IOException(\"Overseer state update queue error\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    \n    if (!zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n      log.info(\"Will not register as leader because collection appears to be gone.\");\n      return;\n    }\n    \n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    zcmd.ensureExists(parent, (byte[])null, CreateMode.PERSISTENT, zkClient, 2);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    \n    if (!zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n      log.info(\"Will not register as leader because collection appears to be gone.\");\n      return;\n    }\n    \n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    zcmd.ensureExists(parent, (byte[])null, CreateMode.PERSISTENT, zkClient, 2);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    \n    if (!zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n      log.info(\"Will not register as leader because collection appears to be gone.\");\n      return;\n    }\n    \n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    zcmd.ensureExists(parent, (byte[])null, CreateMode.PERSISTENT, zkClient, 2);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    try {\n      Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n    } catch (Exception e) {\n      throw new IOException(\"Overseer state update queue error\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"691d1439503ec32e198724114f6cd32446c86ac6","date":1506996002,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    \n    if (!zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n      log.info(\"Will not register as leader because collection appears to be gone.\");\n      return;\n    }\n    \n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    zcmd.ensureExists(parent, (byte[])null, CreateMode.PERSISTENT, zkClient, 2);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP));\n      Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    \n    if (!zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n      log.info(\"Will not register as leader because collection appears to be gone.\");\n      return;\n    }\n    \n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    zcmd.ensureExists(parent, (byte[])null, CreateMode.PERSISTENT, zkClient, 2);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    \n    if (!zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n      log.info(\"Will not register as leader because collection appears to be gone.\");\n      return;\n    }\n    \n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    zcmd.ensureExists(parent, (byte[])null, CreateMode.PERSISTENT, zkClient, 2);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP));\n      Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    \n    if (!zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n      log.info(\"Will not register as leader because collection appears to be gone.\");\n      return;\n    }\n    \n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    zcmd.ensureExists(parent, (byte[])null, CreateMode.PERSISTENT, zkClient, 2);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION,\n        OverseerAction.LEADER.toLower(), ZkStateReader.SHARD_ID_PROP, shardId,\n        ZkStateReader.COLLECTION_PROP, collection, ZkStateReader.BASE_URL_PROP,\n        leaderProps.getProperties().get(ZkStateReader.BASE_URL_PROP),\n        ZkStateReader.CORE_NAME_PROP,\n        leaderProps.getProperties().get(ZkStateReader.CORE_NAME_PROP),\n        ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n    Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    \n    if (!zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n      log.info(\"Will not register as leader because collection appears to be gone.\");\n      return;\n    }\n    \n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    zcmd.ensureExists(parent, (byte[])null, CreateMode.PERSISTENT, zkClient, 2);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    \n    if (!zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n      log.info(\"Will not register as leader because collection appears to be gone.\");\n      return;\n    }\n    \n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    zcmd.ensureExists(parent, (byte[])null, CreateMode.PERSISTENT, zkClient, 2);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP));\n      Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n\n    String parent = new Path(leaderPath).getParent().toString();\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (NoNodeException e) {\n      log.info(\"Will not register as leader because it seems the election is no longer taking place.\");\n      return;\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      assert zkController != null;\n      assert zkController.getOverseer() != null;\n      zkController.getOverseer().offerStateUpdate(Utils.toJSON(m));\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n    \n    if (!zkClient.exists(ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection, true)) {\n      log.info(\"Will not register as leader because collection appears to be gone.\");\n      return;\n    }\n    \n    String parent = new Path(leaderPath).getParent().toString();\n    ZkCmdExecutor zcmd = new ZkCmdExecutor(30000);\n    // only if /collections/{collection} exists already do we succeed in creating this path\n    zcmd.ensureExists(parent, (byte[])null, CreateMode.PERSISTENT, zkClient, 2);\n\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.debug(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      Overseer.getStateUpdateQueue(zkClient).offer(Utils.toJSON(m));\n    }\n  }\n\n","bugFix":["691d1439503ec32e198724114f6cd32446c86ac6","f291d2d430e8149d24fdd06b0bcdab0941ec9144","6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064","a5d615d62cd8aff3690943d765e46942551f98b6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n\n    String parent = Paths.get(leaderPath).getParent().toString();\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (NoNodeException e) {\n      log.info(\"Will not register as leader because it seems the election is no longer taking place.\");\n      return;\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      assert zkController != null;\n      assert zkController.getOverseer() != null;\n      zkController.getOverseer().offerStateUpdate(Utils.toJSON(m));\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n\n    String parent = new Path(leaderPath).getParent().toString();\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (NoNodeException e) {\n      log.info(\"Will not register as leader because it seems the election is no longer taking place.\");\n      return;\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      assert zkController != null;\n      assert zkController.getOverseer() != null;\n      zkController.getOverseer().offerStateUpdate(Utils.toJSON(m));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n\n    String parent = new Path(leaderPath).getParent().toString();\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (NoNodeException e) {\n      log.info(\"Will not register as leader because it seems the election is no longer taking place.\");\n      return;\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      assert zkController != null;\n      assert zkController.getOverseer() != null;\n      zkController.getOverseer().offerStateUpdate(Utils.toJSON(m));\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n\n    String parent = Paths.get(leaderPath).getParent().toString();\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (NoNodeException e) {\n      log.info(\"Will not register as leader because it seems the election is no longer taking place.\");\n      return;\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      assert zkController != null;\n      assert zkController.getOverseer() != null;\n      zkController.getOverseer().offerStateUpdate(Utils.toJSON(m));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase#runLeaderProcess(boolean,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ShardLeaderElectionContextBase[ElectionContext]#runLeaderProcess(boolean,int).mjava","sourceNew":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n\n    String parent = new Path(leaderPath).getParent().toString();\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (NoNodeException e) {\n      log.info(\"Will not register as leader because it seems the election is no longer taking place.\");\n      return;\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    }\n\n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      assert zkController != null;\n      assert zkController.getOverseer() != null;\n      zkController.getOverseer().offerStateUpdate(Utils.toJSON(m));\n    }\n  }\n\n","sourceOld":"  @Override\n  void runLeaderProcess(boolean weAreReplacement, int pauseBeforeStartMs)\n      throws KeeperException, InterruptedException, IOException {\n    // register as leader - if an ephemeral is already there, wait to see if it goes away\n\n    String parent = new Path(leaderPath).getParent().toString();\n    try {\n      RetryUtil.retryOnThrowable(NodeExistsException.class, 60000, 5000, () -> {\n        synchronized (lock) {\n          log.info(\"Creating leader registration node {} after winning as {}\", leaderPath, leaderSeqPath);\n          List<Op> ops = new ArrayList<>(2);\n\n          // We use a multi operation to get the parent nodes version, which will\n          // be used to make sure we only remove our own leader registration node.\n          // The setData call used to get the parent version is also the trigger to\n          // increment the version. We also do a sanity check that our leaderSeqPath exists.\n\n          ops.add(Op.check(leaderSeqPath, -1));\n          ops.add(Op.create(leaderPath, Utils.toJSON(leaderProps), zkClient.getZkACLProvider().getACLsToAdd(leaderPath), CreateMode.EPHEMERAL));\n          ops.add(Op.setData(parent, null, -1));\n          List<OpResult> results;\n\n          results = zkClient.multi(ops, true);\n          for (OpResult result : results) {\n            if (result.getType() == ZooDefs.OpCode.setData) {\n              SetDataResult dresult = (SetDataResult) result;\n              Stat stat = dresult.getStat();\n              leaderZkNodeParentVersion = stat.getVersion();\n              return;\n            }\n          }\n          assert leaderZkNodeParentVersion != null;\n        }\n      });\n    } catch (NoNodeException e) {\n      log.info(\"Will not register as leader because it seems the election is no longer taking place.\");\n      return;\n    } catch (Throwable t) {\n      if (t instanceof OutOfMemoryError) {\n        throw (OutOfMemoryError) t;\n      }\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not register as the leader because creating the ephemeral registration node in ZooKeeper failed\", t);\n    } \n    \n    assert shardId != null;\n    boolean isAlreadyLeader = false;\n    if (zkStateReader.getClusterState() != null &&\n        zkStateReader.getClusterState().getCollection(collection).getSlice(shardId).getReplicas().size() < 2) {\n      Replica leader = zkStateReader.getLeader(collection, shardId);\n      if (leader != null\n          && leader.getBaseUrl().equals(leaderProps.get(ZkStateReader.BASE_URL_PROP))\n          && leader.getCoreName().equals(leaderProps.get(ZkStateReader.CORE_NAME_PROP))) {\n        isAlreadyLeader = true;\n      }\n    }\n    if (!isAlreadyLeader) {\n      ZkNodeProps m = ZkNodeProps.fromKeyVals(Overseer.QUEUE_OPERATION, OverseerAction.LEADER.toLower(),\n          ZkStateReader.SHARD_ID_PROP, shardId,\n          ZkStateReader.COLLECTION_PROP, collection,\n          ZkStateReader.BASE_URL_PROP, leaderProps.get(ZkStateReader.BASE_URL_PROP),\n          ZkStateReader.CORE_NAME_PROP, leaderProps.get(ZkStateReader.CORE_NAME_PROP),\n          ZkStateReader.STATE_PROP, Replica.State.ACTIVE.toString());\n      assert zkController != null;\n      assert zkController.getOverseer() != null;\n      zkController.getOverseer().offerStateUpdate(Utils.toJSON(m));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a1ea01e15f477524516b07b300a3ae03d1bec9bc","19498030e0adab22f604f935cae3c03dcf0952a6"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"3bd378a5822440390b13239c736e2192b9d02bec":["b2bc6ae0c56fcd2bfbe6c26dbfa628bd0846daa2"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"691d1439503ec32e198724114f6cd32446c86ac6":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["7d307d6a381e7b6f0e272e550d925d41e3c736c4"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ddd17dd71008bdecd624542b68b0f8161d53a068","a5d615d62cd8aff3690943d765e46942551f98b6"],"b2bc6ae0c56fcd2bfbe6c26dbfa628bd0846daa2":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"dedd8b6e67b7ac7a77554562fddcf90e0031a95c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["512e034509e1a4227616f910489a995d4ad813af"],"512e034509e1a4227616f910489a995d4ad813af":["b954d1444134ef40d3fcea752c6aaaff4e7da056"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"7e29cfec8d8ad7e37d8e7a4d954e786b3249c857":["a1ea01e15f477524516b07b300a3ae03d1bec9bc"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["691d1439503ec32e198724114f6cd32446c86ac6"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b954d1444134ef40d3fcea752c6aaaff4e7da056":["dedd8b6e67b7ac7a77554562fddcf90e0031a95c"],"19498030e0adab22f604f935cae3c03dcf0952a6":["7e29cfec8d8ad7e37d8e7a4d954e786b3249c857"],"a5d615d62cd8aff3690943d765e46942551f98b6":["ddd17dd71008bdecd624542b68b0f8161d53a068"],"ddd17dd71008bdecd624542b68b0f8161d53a068":["af2638813028b254a88b418ebeafb541afb49653"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","691d1439503ec32e198724114f6cd32446c86ac6"],"7d307d6a381e7b6f0e272e550d925d41e3c736c4":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"a1ea01e15f477524516b07b300a3ae03d1bec9bc":["3bd378a5822440390b13239c736e2192b9d02bec"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ddd17dd71008bdecd624542b68b0f8161d53a068"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"3bd378a5822440390b13239c736e2192b9d02bec":["a1ea01e15f477524516b07b300a3ae03d1bec9bc"],"30c688f7052130cef7bd419c85e3c5be214f7b9e":["7d307d6a381e7b6f0e272e550d925d41e3c736c4"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"691d1439503ec32e198724114f6cd32446c86ac6":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","6240b74b884c5587f2a4062dd27d6c32bf228889"],"24a5da2a0d397ff29f3de8f6cf451d3412c2509a":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["691d1439503ec32e198724114f6cd32446c86ac6","9856095f7afb5a607bf5e65077615ed91273508c","c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dedd8b6e67b7ac7a77554562fddcf90e0031a95c"],"b2bc6ae0c56fcd2bfbe6c26dbfa628bd0846daa2":["3bd378a5822440390b13239c736e2192b9d02bec"],"dedd8b6e67b7ac7a77554562fddcf90e0031a95c":["b954d1444134ef40d3fcea752c6aaaff4e7da056"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["30c688f7052130cef7bd419c85e3c5be214f7b9e"],"512e034509e1a4227616f910489a995d4ad813af":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"7e29cfec8d8ad7e37d8e7a4d954e786b3249c857":["19498030e0adab22f604f935cae3c03dcf0952a6"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"6b18ef9cd3f6ff4f7733e6d43eebec259e0e9064":["b2bc6ae0c56fcd2bfbe6c26dbfa628bd0846daa2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"b954d1444134ef40d3fcea752c6aaaff4e7da056":["512e034509e1a4227616f910489a995d4ad813af"],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"a5d615d62cd8aff3690943d765e46942551f98b6":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"ddd17dd71008bdecd624542b68b0f8161d53a068":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","a5d615d62cd8aff3690943d765e46942551f98b6"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"7d307d6a381e7b6f0e272e550d925d41e3c736c4":["24a5da2a0d397ff29f3de8f6cf451d3412c2509a"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["ba33781da68babcaa5828121b443d3eb5c9d8480"],"a1ea01e15f477524516b07b300a3ae03d1bec9bc":["af2638813028b254a88b418ebeafb541afb49653","7e29cfec8d8ad7e37d8e7a4d954e786b3249c857"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}