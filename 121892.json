{"path":"src/java/org/apache/lucene/search/HitQueue#HitQueue(int,boolean).mjava","commits":[{"id":"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc","date":1241865401,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/HitQueue#HitQueue(int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new instance with <code>size</code> elements. If\n   * <code>prePopulate</code> is set to true, the queue will pre-populate itself\n   * with sentinel objects and set its {@link #size()} to <code>size</code>. In\n   * that case, you should not rely on {@link #size()} to get the number of\n   * actual elements that were added to the queue, but keep track yourself.<br>\n   * <b>NOTE:</b> in case <code>prePopulate</code> is true, you should pop\n   * elements from the queue using the following code example:\n   * \n   * <pre>\n   * PriorityQueue pq = new HitQueue(10, true); // pre-populate.\n   * ScoreDoc top = pq.top();\n   * \n   * // Add/Update one element.\n   * top.score = 1.0f;\n   * top.doc = 0;\n   * top = (ScoreDoc) pq.updateTop();\n   * int totalHits = 1;\n   * \n   * // Now pop only the elements that were *truly* inserted.\n   * // First, pop all the sentinel elements (there are pq.size() - totalHits).\n   * for (int i = pq.size() - totalHits; i &gt; 0; i--) pq.pop();\n   * \n   * // Now pop the truly added elements.\n   * ScoreDoc[] results = new ScoreDoc[totalHits];\n   * for (int i = totalHits - 1; i &gt;= 0; i--) {\n   *   results[i] = (ScoreDoc) pq.pop();\n   * }\n   * </pre>\n   * \n   * @param size\n   *          the requested size of this queue.\n   * @param prePopulate\n   *          specifies whether to pre-populate the queue with sentinel values.\n   * @see #getSentinelObject()\n   */\n  HitQueue(int size, boolean prePopulate) {\n    this.prePopulate = prePopulate;\n    initialize(size);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1da2c39cf47fc10dc839d8c37890a2b009081e76"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1efadbdb7d262e4f77e0cc5d0134f834e65f051","date":1245754135,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/HitQueue#HitQueue(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/HitQueue#HitQueue(int,boolean).mjava","sourceNew":"  /**\n   * Creates a new instance with <code>size</code> elements. If\n   * <code>prePopulate</code> is set to true, the queue will pre-populate itself\n   * with sentinel objects and set its {@link #size()} to <code>size</code>. In\n   * that case, you should not rely on {@link #size()} to get the number of\n   * actual elements that were added to the queue, but keep track yourself.<br>\n   * <b>NOTE:</b> in case <code>prePopulate</code> is true, you should pop\n   * elements from the queue using the following code example:\n   * \n   * <pre>\n   * PriorityQueue pq = new HitQueue(10, true); // pre-populate.\n   * ScoreDoc top = pq.top();\n   * \n   * // Add/Update one element.\n   * top.score = 1.0f;\n   * top.doc = 0;\n   * top = (ScoreDoc) pq.updateTop();\n   * int totalHits = 1;\n   * \n   * // Now pop only the elements that were *truly* inserted.\n   * // First, pop all the sentinel elements (there are pq.size() - totalHits).\n   * for (int i = pq.size() - totalHits; i &gt; 0; i--) pq.pop();\n   * \n   * // Now pop the truly added elements.\n   * ScoreDoc[] results = new ScoreDoc[totalHits];\n   * for (int i = totalHits - 1; i &gt;= 0; i--) {\n   *   results[i] = (ScoreDoc) pq.pop();\n   * }\n   * </pre>\n   * \n   * <p><b>NOTE</b>: This class pre-allocate a full array of\n   * length <code>size</code>.\n   * \n   * @param size\n   *          the requested size of this queue.\n   * @param prePopulate\n   *          specifies whether to pre-populate the queue with sentinel values.\n   * @see #getSentinelObject()\n   */\n  HitQueue(int size, boolean prePopulate) {\n    this.prePopulate = prePopulate;\n    initialize(size);\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance with <code>size</code> elements. If\n   * <code>prePopulate</code> is set to true, the queue will pre-populate itself\n   * with sentinel objects and set its {@link #size()} to <code>size</code>. In\n   * that case, you should not rely on {@link #size()} to get the number of\n   * actual elements that were added to the queue, but keep track yourself.<br>\n   * <b>NOTE:</b> in case <code>prePopulate</code> is true, you should pop\n   * elements from the queue using the following code example:\n   * \n   * <pre>\n   * PriorityQueue pq = new HitQueue(10, true); // pre-populate.\n   * ScoreDoc top = pq.top();\n   * \n   * // Add/Update one element.\n   * top.score = 1.0f;\n   * top.doc = 0;\n   * top = (ScoreDoc) pq.updateTop();\n   * int totalHits = 1;\n   * \n   * // Now pop only the elements that were *truly* inserted.\n   * // First, pop all the sentinel elements (there are pq.size() - totalHits).\n   * for (int i = pq.size() - totalHits; i &gt; 0; i--) pq.pop();\n   * \n   * // Now pop the truly added elements.\n   * ScoreDoc[] results = new ScoreDoc[totalHits];\n   * for (int i = totalHits - 1; i &gt;= 0; i--) {\n   *   results[i] = (ScoreDoc) pq.pop();\n   * }\n   * </pre>\n   * \n   * @param size\n   *          the requested size of this queue.\n   * @param prePopulate\n   *          specifies whether to pre-populate the queue with sentinel values.\n   * @see #getSentinelObject()\n   */\n  HitQueue(int size, boolean prePopulate) {\n    this.prePopulate = prePopulate;\n    initialize(size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/HitQueue#HitQueue(int,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/HitQueue#HitQueue(int,boolean).mjava","sourceNew":"  /**\n   * Creates a new instance with <code>size</code> elements. If\n   * <code>prePopulate</code> is set to true, the queue will pre-populate itself\n   * with sentinel objects and set its {@link #size()} to <code>size</code>. In\n   * that case, you should not rely on {@link #size()} to get the number of\n   * actual elements that were added to the queue, but keep track yourself.<br>\n   * <b>NOTE:</b> in case <code>prePopulate</code> is true, you should pop\n   * elements from the queue using the following code example:\n   * \n   * <pre>\n   * PriorityQueue pq = new HitQueue(10, true); // pre-populate.\n   * ScoreDoc top = pq.top();\n   * \n   * // Add/Update one element.\n   * top.score = 1.0f;\n   * top.doc = 0;\n   * top = (ScoreDoc) pq.updateTop();\n   * int totalHits = 1;\n   * \n   * // Now pop only the elements that were *truly* inserted.\n   * // First, pop all the sentinel elements (there are pq.size() - totalHits).\n   * for (int i = pq.size() - totalHits; i &gt; 0; i--) pq.pop();\n   * \n   * // Now pop the truly added elements.\n   * ScoreDoc[] results = new ScoreDoc[totalHits];\n   * for (int i = totalHits - 1; i &gt;= 0; i--) {\n   *   results[i] = (ScoreDoc) pq.pop();\n   * }\n   * </pre>\n   * \n   * <p><b>NOTE</b>: This class pre-allocate a full array of\n   * length <code>size</code>.\n   * \n   * @param size\n   *          the requested size of this queue.\n   * @param prePopulate\n   *          specifies whether to pre-populate the queue with sentinel values.\n   * @see #getSentinelObject()\n   */\n  HitQueue(int size, boolean prePopulate) {\n    this.prePopulate = prePopulate;\n    initialize(size);\n  }\n\n","sourceOld":"  /**\n   * Creates a new instance with <code>size</code> elements. If\n   * <code>prePopulate</code> is set to true, the queue will pre-populate itself\n   * with sentinel objects and set its {@link #size()} to <code>size</code>. In\n   * that case, you should not rely on {@link #size()} to get the number of\n   * actual elements that were added to the queue, but keep track yourself.<br>\n   * <b>NOTE:</b> in case <code>prePopulate</code> is true, you should pop\n   * elements from the queue using the following code example:\n   * \n   * <pre>\n   * PriorityQueue pq = new HitQueue(10, true); // pre-populate.\n   * ScoreDoc top = pq.top();\n   * \n   * // Add/Update one element.\n   * top.score = 1.0f;\n   * top.doc = 0;\n   * top = (ScoreDoc) pq.updateTop();\n   * int totalHits = 1;\n   * \n   * // Now pop only the elements that were *truly* inserted.\n   * // First, pop all the sentinel elements (there are pq.size() - totalHits).\n   * for (int i = pq.size() - totalHits; i &gt; 0; i--) pq.pop();\n   * \n   * // Now pop the truly added elements.\n   * ScoreDoc[] results = new ScoreDoc[totalHits];\n   * for (int i = totalHits - 1; i &gt;= 0; i--) {\n   *   results[i] = (ScoreDoc) pq.pop();\n   * }\n   * </pre>\n   * \n   * <p><b>NOTE</b>: This class pre-allocate a full array of\n   * length <code>size</code>.\n   * \n   * @param size\n   *          the requested size of this queue.\n   * @param prePopulate\n   *          specifies whether to pre-populate the queue with sentinel values.\n   * @see #getSentinelObject()\n   */\n  HitQueue(int size, boolean prePopulate) {\n    this.prePopulate = prePopulate;\n    initialize(size);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f1efadbdb7d262e4f77e0cc5d0134f834e65f051":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f1efadbdb7d262e4f77e0cc5d0134f834e65f051"]},"commit2Childs":{"17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc":["f1efadbdb7d262e4f77e0cc5d0134f834e65f051"],"f1efadbdb7d262e4f77e0cc5d0134f834e65f051":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17563f8c3ca7e14d56ce4dcbb3fe9b042ba613cc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}