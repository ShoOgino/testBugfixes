{"path":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    super.initializeMetrics(manager, registry, scope);\n\n    manager.registerGauge(this, registry, () -> core != null ? NumberUtils.readableSize(core.getIndexSize()) : \"\", true,\n        \"indexSize\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"), true,\n        \"indexVersion\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0), true,\n        GENERATION, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> core != null ? core.getIndexDir() : \"\", true,\n        \"indexPath\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster, true,\n        \"isMaster\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isSlave, true,\n        \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    manager.registerGauge(this, registry, fetcherMap, true, \"fetcher\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\", true,\n        \"confFilesToReplicate\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(), true,\n        REPLICATE_AFTER, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && replicationEnabled.get(), true,\n        \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    super.initializeMetrics(manager, registry, scope);\n\n    manager.registerGauge(this, registry, () -> core != null ? NumberUtils.readableSize(core.getIndexSize()) : \"\", true,\n        \"indexSize\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"), true,\n        \"indexVersion\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0), true,\n        GENERATION, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> core != null ? core.getIndexDir() : \"\", true,\n        \"indexPath\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster, true,\n        \"isMaster\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isSlave, true,\n        \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    manager.registerGauge(this, registry, fetcherMap, true, \"fetcher\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\", true,\n        \"confFilesToReplicate\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(), true,\n        REPLICATE_AFTER, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && replicationEnabled.get(), true,\n        \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    super.initializeMetrics(manager, registry, tag, scope);\n\n    manager.registerGauge(this, registry, () -> core != null ? NumberUtils.readableSize(core.getIndexSize()) : \"\",\n        tag, true, \"indexSize\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n        tag, true, \"indexVersion\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        tag, true, GENERATION, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> core != null ? core.getIndexDir() : \"\",\n        tag, true, \"indexPath\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster,\n        tag, true, \"isMaster\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isSlave,\n        tag, true, \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    manager.registerGauge(this, registry, fetcherMap, tag, true, \"fetcher\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n        tag, true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        tag, true, REPLICATE_AFTER, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && replicationEnabled.get(),\n        tag, true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    super.initializeMetrics(manager, registry, scope);\n\n    manager.registerGauge(this, registry, () -> core != null ? NumberUtils.readableSize(core.getIndexSize()) : \"\", true,\n        \"indexSize\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"), true,\n        \"indexVersion\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0), true,\n        GENERATION, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> core != null ? core.getIndexDir() : \"\", true,\n        \"indexPath\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster, true,\n        \"isMaster\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isSlave, true,\n        \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    manager.registerGauge(this, registry, fetcherMap, true, \"fetcher\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\", true,\n        \"confFilesToReplicate\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(), true,\n        REPLICATE_AFTER, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && replicationEnabled.get(), true,\n        \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":["89b1e01b66a1c90a549873dd7b2a68ca52f62930","89b1e01b66a1c90a549873dd7b2a68ca52f62930","89b1e01b66a1c90a549873dd7b2a68ca52f62930","89b1e01b66a1c90a549873dd7b2a68ca52f62930","89b1e01b66a1c90a549873dd7b2a68ca52f62930","89b1e01b66a1c90a549873dd7b2a68ca52f62930"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#initializeMetrics(SolrMetricManager,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    super.initializeMetrics(manager, registry, tag, scope);\n\n    manager.registerGauge(this, registry, () -> core != null ? NumberUtils.readableSize(core.getIndexSize()) : \"\",\n        tag, true, \"indexSize\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"),\n        tag, true, \"indexVersion\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0),\n        tag, true, GENERATION, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> core != null ? core.getIndexDir() : \"\",\n        tag, true, \"indexPath\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster,\n        tag, true, \"isMaster\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isSlave,\n        tag, true, \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    manager.registerGauge(this, registry, fetcherMap, tag, true, \"fetcher\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\",\n        tag, true, \"confFilesToReplicate\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(),\n        tag, true, REPLICATE_AFTER, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && replicationEnabled.get(),\n        tag, true, \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String scope) {\n    super.initializeMetrics(manager, registry, scope);\n\n    manager.registerGauge(this, registry, () -> core != null ? NumberUtils.readableSize(core.getIndexSize()) : \"\", true,\n        \"indexSize\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().toString() : \"\"), true,\n        \"indexVersion\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> (core != null && !core.isClosed() ? getIndexVersion().generation : 0), true,\n        GENERATION, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> core != null ? core.getIndexDir() : \"\", true,\n        \"indexPath\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster, true,\n        \"isMaster\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isSlave, true,\n        \"isSlave\", getCategory().toString(), scope);\n    final MetricsMap fetcherMap = new MetricsMap((detailed, map) -> {\n      IndexFetcher fetcher = currentIndexFetcher;\n      if (fetcher != null) {\n        map.put(MASTER_URL, fetcher.getMasterUrl());\n        if (getPollInterval() != null) {\n          map.put(POLL_INTERVAL, getPollInterval());\n        }\n        map.put(\"isPollingDisabled\", isPollingDisabled());\n        map.put(\"isReplicating\", isReplicating());\n        long elapsed = fetcher.getReplicationTimeElapsed();\n        long val = fetcher.getTotalBytesDownloaded();\n        if (elapsed > 0) {\n          map.put(\"timeElapsed\", elapsed);\n          map.put(\"bytesDownloaded\", val);\n          map.put(\"downloadSpeed\", val / elapsed);\n        }\n        Properties props = loadReplicationProperties();\n        addVal(map, IndexFetcher.PREVIOUS_CYCLE_TIME_TAKEN, props, Long.class);\n        addVal(map, IndexFetcher.INDEX_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED_AT, props, Date.class);\n        addVal(map, IndexFetcher.REPLICATION_FAILED_AT, props, Date.class);\n        addVal(map, IndexFetcher.TIMES_FAILED, props, Integer.class);\n        addVal(map, IndexFetcher.TIMES_INDEX_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.LAST_CYCLE_BYTES_DOWNLOADED, props, Long.class);\n        addVal(map, IndexFetcher.TIMES_CONFIG_REPLICATED, props, Integer.class);\n        addVal(map, IndexFetcher.CONF_FILES_REPLICATED, props, String.class);\n      }\n    });\n    manager.registerGauge(this, registry, fetcherMap, true, \"fetcher\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && includeConfFiles != null ? includeConfFiles : \"\", true,\n        \"confFilesToReplicate\", getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster ? getReplicateAfterStrings() : Collections.<String>emptyList(), true,\n        REPLICATE_AFTER, getCategory().toString(), scope);\n    manager.registerGauge(this, registry, () -> isMaster && replicationEnabled.get(), true,\n        \"replicationEnabled\", getCategory().toString(), scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"816521ebaad5add9cb96bb88c577394e2938c40b":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}