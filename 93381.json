{"path":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"9e87c4193bc100c3b96235f14bee01a5b2009ce5","date":1287756261,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"   // extracted from the .jj grammar\r\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\r\n    Query q;\r\n\r\n    String termImage=discardEscapeChar(term.image);\r\n    if (wildcard) {\r\n      q = getWildcardQuery(qfield, termImage);\r\n    } else if (prefix) {\r\n      q = getPrefixQuery(qfield,\r\n          discardEscapeChar(term.image.substring\r\n              (0, term.image.length()-1)));\r\n    } else if (regexp) {\r\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\r\n    } else if (fuzzy) {\r\n      float fms = fuzzyMinSim;\r\n      try {\r\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\r\n      } catch (Exception ignored) { }\r\n      if(fms < 0.0f){\r\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\r\n      } else if (fms >= 1.0f && fms != (int) fms) {\r\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\r\n      }\r\n      q = getFuzzyQuery(qfield, termImage, fms);\r\n    } else {\r\n      q = hasNewAPI ? getFieldQuery(qfield, termImage, false) : getFieldQuery(qfield, termImage);\r\n    }\r\n    return q;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"   // extracted from the .jj grammar\r\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\r\n    Query q;\r\n\r\n    String termImage=discardEscapeChar(term.image);\r\n    if (wildcard) {\r\n      q = getWildcardQuery(qfield, termImage);\r\n    } else if (prefix) {\r\n      q = getPrefixQuery(qfield,\r\n          discardEscapeChar(term.image.substring\r\n              (0, term.image.length()-1)));\r\n    } else if (regexp) {\r\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\r\n    } else if (fuzzy) {\r\n      float fms = fuzzyMinSim;\r\n      try {\r\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\r\n      } catch (Exception ignored) { }\r\n      if(fms < 0.0f){\r\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\r\n      } else if (fms >= 1.0f && fms != (int) fms) {\r\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\r\n      }\r\n      q = getFuzzyQuery(qfield, termImage, fms);\r\n    } else {\r\n      q = hasNewAPI ? getFieldQuery(qfield, termImage, false) : getFieldQuery(qfield, termImage);\r\n    }\r\n    return q;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02f9424edb9eccc558626693e4a4cd43f8ce2622","date":1288987640,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","sourceNew":"   // extracted from the .jj grammar\r\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\r\n    Query q;\r\n\r\n    String termImage=discardEscapeChar(term.image);\r\n    if (wildcard) {\r\n      q = getWildcardQuery(qfield, term.image);\r\n    } else if (prefix) {\r\n      q = getPrefixQuery(qfield,\r\n          discardEscapeChar(term.image.substring\r\n              (0, term.image.length()-1)));\r\n    } else if (regexp) {\r\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\r\n    } else if (fuzzy) {\r\n      float fms = fuzzyMinSim;\r\n      try {\r\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\r\n      } catch (Exception ignored) { }\r\n      if(fms < 0.0f){\r\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\r\n      } else if (fms >= 1.0f && fms != (int) fms) {\r\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\r\n      }\r\n      q = getFuzzyQuery(qfield, termImage, fms);\r\n    } else {\r\n      q = hasNewAPI ? getFieldQuery(qfield, termImage, false) : getFieldQuery(qfield, termImage);\r\n    }\r\n    return q;\r\n  }\r\n\n","sourceOld":"   // extracted from the .jj grammar\r\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\r\n    Query q;\r\n\r\n    String termImage=discardEscapeChar(term.image);\r\n    if (wildcard) {\r\n      q = getWildcardQuery(qfield, termImage);\r\n    } else if (prefix) {\r\n      q = getPrefixQuery(qfield,\r\n          discardEscapeChar(term.image.substring\r\n              (0, term.image.length()-1)));\r\n    } else if (regexp) {\r\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\r\n    } else if (fuzzy) {\r\n      float fms = fuzzyMinSim;\r\n      try {\r\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\r\n      } catch (Exception ignored) { }\r\n      if(fms < 0.0f){\r\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\r\n      } else if (fms >= 1.0f && fms != (int) fms) {\r\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\r\n      }\r\n      q = getFuzzyQuery(qfield, termImage, fms);\r\n    } else {\r\n      q = hasNewAPI ? getFieldQuery(qfield, termImage, false) : getFieldQuery(qfield, termImage);\r\n    }\r\n    return q;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","sourceNew":"   // extracted from the .jj grammar\r\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\r\n    Query q;\r\n\r\n    String termImage=discardEscapeChar(term.image);\r\n    if (wildcard) {\r\n      q = getWildcardQuery(qfield, term.image);\r\n    } else if (prefix) {\r\n      q = getPrefixQuery(qfield,\r\n          discardEscapeChar(term.image.substring\r\n              (0, term.image.length()-1)));\r\n    } else if (regexp) {\r\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\r\n    } else if (fuzzy) {\r\n      float fms = fuzzyMinSim;\r\n      try {\r\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\r\n      } catch (Exception ignored) { }\r\n      if(fms < 0.0f){\r\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\r\n      } else if (fms >= 1.0f && fms != (int) fms) {\r\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\r\n      }\r\n      q = getFuzzyQuery(qfield, termImage, fms);\r\n    } else {\r\n      q = hasNewAPI ? getFieldQuery(qfield, termImage, false) : getFieldQuery(qfield, termImage);\r\n    }\r\n    return q;\r\n  }\r\n\n","sourceOld":"   // extracted from the .jj grammar\r\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\r\n    Query q;\r\n\r\n    String termImage=discardEscapeChar(term.image);\r\n    if (wildcard) {\r\n      q = getWildcardQuery(qfield, termImage);\r\n    } else if (prefix) {\r\n      q = getPrefixQuery(qfield,\r\n          discardEscapeChar(term.image.substring\r\n              (0, term.image.length()-1)));\r\n    } else if (regexp) {\r\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\r\n    } else if (fuzzy) {\r\n      float fms = fuzzyMinSim;\r\n      try {\r\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\r\n      } catch (Exception ignored) { }\r\n      if(fms < 0.0f){\r\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\r\n      } else if (fms >= 1.0f && fms != (int) fms) {\r\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\r\n      }\r\n      q = getFuzzyQuery(qfield, termImage, fms);\r\n    } else {\r\n      q = hasNewAPI ? getFieldQuery(qfield, termImage, false) : getFieldQuery(qfield, termImage);\r\n    }\r\n    return q;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","sourceNew":"   // extracted from the .jj grammar\r\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\r\n    Query q;\r\n\r\n    String termImage=discardEscapeChar(term.image);\r\n    if (wildcard) {\r\n      q = getWildcardQuery(qfield, term.image);\r\n    } else if (prefix) {\r\n      q = getPrefixQuery(qfield,\r\n          discardEscapeChar(term.image.substring\r\n              (0, term.image.length()-1)));\r\n    } else if (regexp) {\r\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\r\n    } else if (fuzzy) {\r\n      float fms = fuzzyMinSim;\r\n      try {\r\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\r\n      } catch (Exception ignored) { }\r\n      if(fms < 0.0f){\r\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\r\n      } else if (fms >= 1.0f && fms != (int) fms) {\r\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\r\n      }\r\n      q = getFuzzyQuery(qfield, termImage, fms);\r\n    } else {\r\n      q = getFieldQuery(qfield, termImage, false);\r\n    }\r\n    return q;\r\n  }\r\n\n","sourceOld":"   // extracted from the .jj grammar\r\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\r\n    Query q;\r\n\r\n    String termImage=discardEscapeChar(term.image);\r\n    if (wildcard) {\r\n      q = getWildcardQuery(qfield, term.image);\r\n    } else if (prefix) {\r\n      q = getPrefixQuery(qfield,\r\n          discardEscapeChar(term.image.substring\r\n              (0, term.image.length()-1)));\r\n    } else if (regexp) {\r\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\r\n    } else if (fuzzy) {\r\n      float fms = fuzzyMinSim;\r\n      try {\r\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\r\n      } catch (Exception ignored) { }\r\n      if(fms < 0.0f){\r\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\r\n      } else if (fms >= 1.0f && fms != (int) fms) {\r\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\r\n      }\r\n      q = getFuzzyQuery(qfield, termImage, fms);\r\n    } else {\r\n      q = hasNewAPI ? getFieldQuery(qfield, termImage, false) : getFieldQuery(qfield, termImage);\r\n    }\r\n    return q;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","sourceNew":"   // extracted from the .jj grammar\r\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\r\n    Query q;\r\n\r\n    String termImage=discardEscapeChar(term.image);\r\n    if (wildcard) {\r\n      q = getWildcardQuery(qfield, term.image);\r\n    } else if (prefix) {\r\n      q = getPrefixQuery(qfield,\r\n          discardEscapeChar(term.image.substring\r\n              (0, term.image.length()-1)));\r\n    } else if (regexp) {\r\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\r\n    } else if (fuzzy) {\r\n      float fms = fuzzyMinSim;\r\n      try {\r\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\r\n      } catch (Exception ignored) { }\r\n      if(fms < 0.0f){\r\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\r\n      } else if (fms >= 1.0f && fms != (int) fms) {\r\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\r\n      }\r\n      q = getFuzzyQuery(qfield, termImage, fms);\r\n    } else {\r\n      q = getFieldQuery(qfield, termImage, false);\r\n    }\r\n    return q;\r\n  }\r\n\n","sourceOld":"   // extracted from the .jj grammar\r\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\r\n    Query q;\r\n\r\n    String termImage=discardEscapeChar(term.image);\r\n    if (wildcard) {\r\n      q = getWildcardQuery(qfield, term.image);\r\n    } else if (prefix) {\r\n      q = getPrefixQuery(qfield,\r\n          discardEscapeChar(term.image.substring\r\n              (0, term.image.length()-1)));\r\n    } else if (regexp) {\r\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\r\n    } else if (fuzzy) {\r\n      float fms = fuzzyMinSim;\r\n      try {\r\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\r\n      } catch (Exception ignored) { }\r\n      if(fms < 0.0f){\r\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\r\n      } else if (fms >= 1.0f && fms != (int) fms) {\r\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\r\n      }\r\n      q = getFuzzyQuery(qfield, termImage, fms);\r\n    } else {\r\n      q = hasNewAPI ? getFieldQuery(qfield, termImage, false) : getFieldQuery(qfield, termImage);\r\n    }\r\n    return q;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"   // extracted from the .jj grammar\r\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\r\n    Query q;\r\n\r\n    String termImage=discardEscapeChar(term.image);\r\n    if (wildcard) {\r\n      q = getWildcardQuery(qfield, term.image);\r\n    } else if (prefix) {\r\n      q = getPrefixQuery(qfield,\r\n          discardEscapeChar(term.image.substring\r\n              (0, term.image.length()-1)));\r\n    } else if (regexp) {\r\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\r\n    } else if (fuzzy) {\r\n      float fms = fuzzyMinSim;\r\n      try {\r\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\r\n      } catch (Exception ignored) { }\r\n      if(fms < 0.0f){\r\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\r\n      } else if (fms >= 1.0f && fms != (int) fms) {\r\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\r\n      }\r\n      q = getFuzzyQuery(qfield, termImage, fms);\r\n    } else {\r\n      q = getFieldQuery(qfield, termImage, false);\r\n    }\r\n    return q;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bed62fe6383040eaff2ec720cdc55bb1462c61da","date":1296408595,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","sourceNew":"   // extracted from the .jj grammar\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\n    Query q;\n\n    String termImage=discardEscapeChar(term.image);\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\n      }\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      q = getFieldQuery(qfield, termImage, false);\n    }\n    return q;\n  }\n\n","sourceOld":"   // extracted from the .jj grammar\r\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\r\n    Query q;\r\n\r\n    String termImage=discardEscapeChar(term.image);\r\n    if (wildcard) {\r\n      q = getWildcardQuery(qfield, term.image);\r\n    } else if (prefix) {\r\n      q = getPrefixQuery(qfield,\r\n          discardEscapeChar(term.image.substring\r\n              (0, term.image.length()-1)));\r\n    } else if (regexp) {\r\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\r\n    } else if (fuzzy) {\r\n      float fms = fuzzyMinSim;\r\n      try {\r\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\r\n      } catch (Exception ignored) { }\r\n      if(fms < 0.0f){\r\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\r\n      } else if (fms >= 1.0f && fms != (int) fms) {\r\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\r\n      }\r\n      q = getFuzzyQuery(qfield, termImage, fms);\r\n    } else {\r\n      q = getFieldQuery(qfield, termImage, false);\r\n    }\r\n    return q;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","sourceNew":"   // extracted from the .jj grammar\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\n    Query q;\n\n    String termImage=discardEscapeChar(term.image);\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\n      }\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      q = getFieldQuery(qfield, termImage, false);\n    }\n    return q;\n  }\n\n","sourceOld":"   // extracted from the .jj grammar\r\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\r\n    Query q;\r\n\r\n    String termImage=discardEscapeChar(term.image);\r\n    if (wildcard) {\r\n      q = getWildcardQuery(qfield, term.image);\r\n    } else if (prefix) {\r\n      q = getPrefixQuery(qfield,\r\n          discardEscapeChar(term.image.substring\r\n              (0, term.image.length()-1)));\r\n    } else if (regexp) {\r\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\r\n    } else if (fuzzy) {\r\n      float fms = fuzzyMinSim;\r\n      try {\r\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\r\n      } catch (Exception ignored) { }\r\n      if(fms < 0.0f){\r\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\r\n      } else if (fms >= 1.0f && fms != (int) fms) {\r\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\r\n      }\r\n      q = getFuzzyQuery(qfield, termImage, fms);\r\n    } else {\r\n      q = getFieldQuery(qfield, termImage, false);\r\n    }\r\n    return q;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","sourceNew":"   // extracted from the .jj grammar\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\n    Query q;\n\n    String termImage=discardEscapeChar(term.image);\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\n      }\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      q = getFieldQuery(qfield, termImage, false);\n    }\n    return q;\n  }\n\n","sourceOld":"   // extracted from the .jj grammar\r\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\r\n    Query q;\r\n\r\n    String termImage=discardEscapeChar(term.image);\r\n    if (wildcard) {\r\n      q = getWildcardQuery(qfield, term.image);\r\n    } else if (prefix) {\r\n      q = getPrefixQuery(qfield,\r\n          discardEscapeChar(term.image.substring\r\n              (0, term.image.length()-1)));\r\n    } else if (regexp) {\r\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\r\n    } else if (fuzzy) {\r\n      float fms = fuzzyMinSim;\r\n      try {\r\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\r\n      } catch (Exception ignored) { }\r\n      if(fms < 0.0f){\r\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\r\n      } else if (fms >= 1.0f && fms != (int) fms) {\r\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\r\n      }\r\n      q = getFuzzyQuery(qfield, termImage, fms);\r\n    } else {\r\n      q = getFieldQuery(qfield, termImage, false);\r\n    }\r\n    return q;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#handleBareTokenQuery(String,Token,Token,boolean,boolean,boolean,boolean).mjava","sourceNew":"   // extracted from the .jj grammar\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\n    Query q;\n\n    String termImage=discardEscapeChar(term.image);\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\n      }\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      q = getFieldQuery(qfield, termImage, false);\n    }\n    return q;\n  }\n\n","sourceOld":"   // extracted from the .jj grammar\n  Query handleBareTokenQuery(String qfield, Token term, Token fuzzySlop, boolean prefix, boolean wildcard, boolean fuzzy, boolean regexp) throws ParseException {\n    Query q;\n\n    String termImage=discardEscapeChar(term.image);\n    if (wildcard) {\n      q = getWildcardQuery(qfield, term.image);\n    } else if (prefix) {\n      q = getPrefixQuery(qfield,\n          discardEscapeChar(term.image.substring\n              (0, term.image.length()-1)));\n    } else if (regexp) {\n      q = getRegexpQuery(qfield, term.image.substring(1, term.image.length()-1));\n    } else if (fuzzy) {\n      float fms = fuzzyMinSim;\n      try {\n        fms = Float.valueOf(fuzzySlop.image.substring(1)).floatValue();\n      } catch (Exception ignored) { }\n      if(fms < 0.0f){\n        throw new ParseException(\"Minimum similarity for a FuzzyQuery has to be between 0.0f and 1.0f !\");\n      } else if (fms >= 1.0f && fms != (int) fms) {\n        throw new ParseException(\"Fractional edit distances are not allowed!\");\n      }\n      q = getFuzzyQuery(qfield, termImage, fms);\n    } else {\n      q = getFieldQuery(qfield, termImage, false);\n    }\n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"85a883878c0af761245ab048babc63d099f835f3":["b12d3e81e0f95a4527b5703953c503f71120ffcc","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"3bb13258feba31ab676502787ab2e1779f129b7a":["85a883878c0af761245ab048babc63d099f835f3","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["02f9424edb9eccc558626693e4a4cd43f8ce2622"]},"commit2Childs":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85a883878c0af761245ab048babc63d099f835f3":["3bb13258feba31ab676502787ab2e1779f129b7a"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["85a883878c0af761245ab048babc63d099f835f3"],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["b12d3e81e0f95a4527b5703953c503f71120ffcc","02f9424edb9eccc558626693e4a4cd43f8ce2622"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9e87c4193bc100c3b96235f14bee01a5b2009ce5","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"02f9424edb9eccc558626693e4a4cd43f8ce2622":["85a883878c0af761245ab048babc63d099f835f3","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","bed62fe6383040eaff2ec720cdc55bb1462c61da","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}