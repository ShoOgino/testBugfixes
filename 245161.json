{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#beforeClassDrillDownQueryTest().mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#beforeClassDrillDownQueryTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestDrillDownQuery#beforeClassDrillDownQueryTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassDrillDownQueryTest() throws Exception {\n    dir = newDirectory();\n    Random r = random();\n    RandomIndexWriter writer = new RandomIndexWriter(r, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(r, MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    config = new FacetsConfig(taxoWriter);\n\n    // Randomize the per-dim config:\n    config.setHierarchical(\"a\", random().nextBoolean());\n    config.setMultiValued(\"a\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"a\", \"$a\");\n    }\n    config.setRequireDimCount(\"a\", true);\n\n    config.setHierarchical(\"b\", random().nextBoolean());\n    config.setMultiValued(\"b\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"b\", \"$b\");\n    }\n    config.setRequireDimCount(\"b\", true);\n\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        if (r.nextBoolean()) {\n          doc.add(new FacetField(\"a\", \"1\"));\n        } else {\n          doc.add(new FacetField(\"a\", \"2\"));\n        }\n      }\n      if (i % 5 == 0) { // 20\n        doc.add(new FacetField(\"b\", \"1\"));\n      }\n      writer.addDocument(config.build(doc));\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassDrillDownQueryTest() throws Exception {\n    dir = newDirectory();\n    Random r = random();\n    RandomIndexWriter writer = new RandomIndexWriter(r, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(r, MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    config = new FacetsConfig(taxoWriter);\n\n    // Randomize the per-dim config:\n    config.setHierarchical(\"a\", random().nextBoolean());\n    config.setMultiValued(\"a\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"a\", \"$a\");\n    }\n    config.setRequireDimCount(\"a\", true);\n\n    config.setHierarchical(\"b\", random().nextBoolean());\n    config.setMultiValued(\"b\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"b\", \"$b\");\n    }\n    config.setRequireDimCount(\"b\", true);\n\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        if (r.nextBoolean()) {\n          doc.add(new FacetField(\"a\", \"1\"));\n        } else {\n          doc.add(new FacetField(\"a\", \"2\"));\n        }\n      }\n      if (i % 5 == 0) { // 20\n        doc.add(new FacetField(\"b\", \"1\"));\n      }\n      writer.addDocument(config.build(doc));\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd83550e4b0bdd36e7d9dca9273264100782440b","date":1385761753,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#beforeClassDrillDownQueryTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#beforeClassDrillDownQueryTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassDrillDownQueryTest() throws Exception {\n    dir = newDirectory();\n    Random r = random();\n    RandomIndexWriter writer = new RandomIndexWriter(r, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(r, MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    config = new FacetsConfig();\n\n    // Randomize the per-dim config:\n    config.setHierarchical(\"a\", random().nextBoolean());\n    config.setMultiValued(\"a\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"a\", \"$a\");\n    }\n    config.setRequireDimCount(\"a\", true);\n\n    config.setHierarchical(\"b\", random().nextBoolean());\n    config.setMultiValued(\"b\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"b\", \"$b\");\n    }\n    config.setRequireDimCount(\"b\", true);\n\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        if (r.nextBoolean()) {\n          doc.add(new FacetField(\"a\", \"1\"));\n        } else {\n          doc.add(new FacetField(\"a\", \"2\"));\n        }\n      }\n      if (i % 5 == 0) { // 20\n        doc.add(new FacetField(\"b\", \"1\"));\n      }\n      writer.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassDrillDownQueryTest() throws Exception {\n    dir = newDirectory();\n    Random r = random();\n    RandomIndexWriter writer = new RandomIndexWriter(r, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(r, MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    config = new FacetsConfig(taxoWriter);\n\n    // Randomize the per-dim config:\n    config.setHierarchical(\"a\", random().nextBoolean());\n    config.setMultiValued(\"a\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"a\", \"$a\");\n    }\n    config.setRequireDimCount(\"a\", true);\n\n    config.setHierarchical(\"b\", random().nextBoolean());\n    config.setMultiValued(\"b\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"b\", \"$b\");\n    }\n    config.setRequireDimCount(\"b\", true);\n\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        if (r.nextBoolean()) {\n          doc.add(new FacetField(\"a\", \"1\"));\n        } else {\n          doc.add(new FacetField(\"a\", \"2\"));\n        }\n      }\n      if (i % 5 == 0) { // 20\n        doc.add(new FacetField(\"b\", \"1\"));\n      }\n      writer.addDocument(config.build(doc));\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#beforeClassDrillDownQueryTest().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeClassDrillDownQueryTest() throws Exception {\n    dir = newDirectory();\n    Random r = random();\n    RandomIndexWriter writer = new RandomIndexWriter(r, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(r, MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    config = new FacetsConfig();\n\n    // Randomize the per-dim config:\n    config.setHierarchical(\"a\", random().nextBoolean());\n    config.setMultiValued(\"a\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"a\", \"$a\");\n    }\n    config.setRequireDimCount(\"a\", true);\n\n    config.setHierarchical(\"b\", random().nextBoolean());\n    config.setMultiValued(\"b\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"b\", \"$b\");\n    }\n    config.setRequireDimCount(\"b\", true);\n\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        if (r.nextBoolean()) {\n          doc.add(new FacetField(\"a\", \"1\"));\n        } else {\n          doc.add(new FacetField(\"a\", \"2\"));\n        }\n      }\n      if (i % 5 == 0) { // 20\n        doc.add(new FacetField(\"b\", \"1\"));\n      }\n      writer.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#beforeClassDrillDownQueryTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#beforeClassDrillDownQueryTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassDrillDownQueryTest() throws Exception {\n    dir = newDirectory();\n    Random r = random();\n    RandomIndexWriter writer = new RandomIndexWriter(r, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(r, MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    config = new FacetsConfig();\n\n    // Randomize the per-dim config:\n    config.setHierarchical(\"a\", random().nextBoolean());\n    config.setMultiValued(\"a\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"a\", \"$a\");\n    }\n    config.setRequireDimCount(\"a\", true);\n\n    config.setHierarchical(\"b\", random().nextBoolean());\n    config.setMultiValued(\"b\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"b\", \"$b\");\n    }\n    config.setRequireDimCount(\"b\", true);\n\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        if (r.nextBoolean()) {\n          doc.add(new FacetField(\"a\", \"1\"));\n        } else {\n          doc.add(new FacetField(\"a\", \"2\"));\n        }\n      }\n      if (i % 5 == 0) { // 20\n        doc.add(new FacetField(\"b\", \"1\"));\n      }\n      writer.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.shutdown();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassDrillDownQueryTest() throws Exception {\n    dir = newDirectory();\n    Random r = random();\n    RandomIndexWriter writer = new RandomIndexWriter(r, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(r, MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    config = new FacetsConfig();\n\n    // Randomize the per-dim config:\n    config.setHierarchical(\"a\", random().nextBoolean());\n    config.setMultiValued(\"a\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"a\", \"$a\");\n    }\n    config.setRequireDimCount(\"a\", true);\n\n    config.setHierarchical(\"b\", random().nextBoolean());\n    config.setMultiValued(\"b\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"b\", \"$b\");\n    }\n    config.setRequireDimCount(\"b\", true);\n\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        if (r.nextBoolean()) {\n          doc.add(new FacetField(\"a\", \"1\"));\n        } else {\n          doc.add(new FacetField(\"a\", \"2\"));\n        }\n      }\n      if (i % 5 == 0) { // 20\n        doc.add(new FacetField(\"b\", \"1\"));\n      }\n      writer.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#beforeClassDrillDownQueryTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#beforeClassDrillDownQueryTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassDrillDownQueryTest() throws Exception {\n    dir = newDirectory();\n    Random r = random();\n    RandomIndexWriter writer = new RandomIndexWriter(r, dir, \n        newIndexWriterConfig(new MockAnalyzer(r, MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    config = new FacetsConfig();\n\n    // Randomize the per-dim config:\n    config.setHierarchical(\"a\", random().nextBoolean());\n    config.setMultiValued(\"a\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"a\", \"$a\");\n    }\n    config.setRequireDimCount(\"a\", true);\n\n    config.setHierarchical(\"b\", random().nextBoolean());\n    config.setMultiValued(\"b\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"b\", \"$b\");\n    }\n    config.setRequireDimCount(\"b\", true);\n\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        if (r.nextBoolean()) {\n          doc.add(new FacetField(\"a\", \"1\"));\n        } else {\n          doc.add(new FacetField(\"a\", \"2\"));\n        }\n      }\n      if (i % 5 == 0) { // 20\n        doc.add(new FacetField(\"b\", \"1\"));\n      }\n      writer.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.shutdown();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassDrillDownQueryTest() throws Exception {\n    dir = newDirectory();\n    Random r = random();\n    RandomIndexWriter writer = new RandomIndexWriter(r, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(r, MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    config = new FacetsConfig();\n\n    // Randomize the per-dim config:\n    config.setHierarchical(\"a\", random().nextBoolean());\n    config.setMultiValued(\"a\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"a\", \"$a\");\n    }\n    config.setRequireDimCount(\"a\", true);\n\n    config.setHierarchical(\"b\", random().nextBoolean());\n    config.setMultiValued(\"b\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"b\", \"$b\");\n    }\n    config.setRequireDimCount(\"b\", true);\n\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        if (r.nextBoolean()) {\n          doc.add(new FacetField(\"a\", \"1\"));\n        } else {\n          doc.add(new FacetField(\"a\", \"2\"));\n        }\n      }\n      if (i % 5 == 0) { // 20\n        doc.add(new FacetField(\"b\", \"1\"));\n      }\n      writer.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.shutdown();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#beforeClassDrillDownQueryTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestDrillDownQuery#beforeClassDrillDownQueryTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassDrillDownQueryTest() throws Exception {\n    dir = newDirectory();\n    Random r = random();\n    RandomIndexWriter writer = new RandomIndexWriter(r, dir, \n        newIndexWriterConfig(new MockAnalyzer(r, MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    config = new FacetsConfig();\n\n    // Randomize the per-dim config:\n    config.setHierarchical(\"a\", random().nextBoolean());\n    config.setMultiValued(\"a\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"a\", \"$a\");\n    }\n    config.setRequireDimCount(\"a\", true);\n\n    config.setHierarchical(\"b\", random().nextBoolean());\n    config.setMultiValued(\"b\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"b\", \"$b\");\n    }\n    config.setRequireDimCount(\"b\", true);\n\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        if (r.nextBoolean()) {\n          doc.add(new FacetField(\"a\", \"1\"));\n        } else {\n          doc.add(new FacetField(\"a\", \"2\"));\n        }\n      }\n      if (i % 5 == 0) { // 20\n        doc.add(new FacetField(\"b\", \"1\"));\n      }\n      writer.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassDrillDownQueryTest() throws Exception {\n    dir = newDirectory();\n    Random r = random();\n    RandomIndexWriter writer = new RandomIndexWriter(r, dir, \n        newIndexWriterConfig(new MockAnalyzer(r, MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    config = new FacetsConfig();\n\n    // Randomize the per-dim config:\n    config.setHierarchical(\"a\", random().nextBoolean());\n    config.setMultiValued(\"a\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"a\", \"$a\");\n    }\n    config.setRequireDimCount(\"a\", true);\n\n    config.setHierarchical(\"b\", random().nextBoolean());\n    config.setMultiValued(\"b\", random().nextBoolean());\n    if (random().nextBoolean()) {\n      config.setIndexFieldName(\"b\", \"$b\");\n    }\n    config.setRequireDimCount(\"b\", true);\n\n    for (int i = 0; i < 100; i++) {\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        if (r.nextBoolean()) {\n          doc.add(new FacetField(\"a\", \"1\"));\n        } else {\n          doc.add(new FacetField(\"a\", \"2\"));\n        }\n      }\n      if (i % 5 == 0) { // 20\n        doc.add(new FacetField(\"b\", \"1\"));\n      }\n      writer.addDocument(config.build(taxoWriter, doc));\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.shutdown();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["21d36d0db865f7b84026b447bec653469a6e66df"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd83550e4b0bdd36e7d9dca9273264100782440b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":["fd83550e4b0bdd36e7d9dca9273264100782440b"],"fd83550e4b0bdd36e7d9dca9273264100782440b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}