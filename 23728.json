{"path":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","commits":[{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testBackToTheFuture().mjava","sourceNew":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\");\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\");\n    assertEquals(2, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\");\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\");\n    assertEquals(2, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36a4a25c2f02edc0c96bc51a298c45b1764e662d","date":1399923529,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","sourceNew":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\", null);\n    assertEquals(2, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\");\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\");\n    assertEquals(2, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63961b0a0b1541623ed4c74d8cb088c35b32470f","date":1399929609,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","sourceNew":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\", null);\n    assertEquals(2, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testBackToTheFuture().mjava","sourceNew":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\");\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\");\n    assertEquals(2, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocTermOrds#testBackToTheFuture().mjava","sourceNew":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\");\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\");\n    assertEquals(2, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","sourceNew":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","sourceNew":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.close();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.shutdown();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","sourceNew":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.close();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw, true);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw, true);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.close();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","sourceNew":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlyLeafReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlyLeafReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.close();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlySegmentReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.close();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":["36a4a25c2f02edc0c96bc51a298c45b1764e662d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","sourceNew":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlyLeafReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlyLeafReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.close();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlyLeafReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlyLeafReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.close();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","sourceNew":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlyLeafReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlyLeafReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.close();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlyLeafReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlyLeafReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.close();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","sourceNew":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlyLeafReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlyLeafReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.close();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlyLeafReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlyLeafReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.close();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestDocTermOrds#testBackToTheFuture().mjava","sourceNew":null,"sourceOld":"  public void testBackToTheFuture() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig(null));\n    \n    Document doc = new Document();\n    doc.add(newStringField(\"foo\", \"bar\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(newStringField(\"foo\", \"baz\", Field.Store.NO));\n    // we need a second value for a doc, or we don't actually test DocTermOrds!\n    doc.add(newStringField(\"foo\", \"car\", Field.Store.NO));\n    iw.addDocument(doc);\n    \n    DirectoryReader r1 = DirectoryReader.open(iw);\n    \n    iw.deleteDocuments(new Term(\"foo\", \"baz\"));\n    DirectoryReader r2 = DirectoryReader.open(iw);\n    \n    FieldCache.DEFAULT.getDocTermOrds(getOnlyLeafReader(r2), \"foo\", null);\n    \n    SortedSetDocValues v = FieldCache.DEFAULT.getDocTermOrds(getOnlyLeafReader(r1), \"foo\", null);\n    assertEquals(3, v.getValueCount());\n    v.setDocument(1);\n    assertEquals(1, v.nextOrd());\n    \n    iw.close();\n    r1.close();\n    r2.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"63961b0a0b1541623ed4c74d8cb088c35b32470f":["36a4a25c2f02edc0c96bc51a298c45b1764e662d"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83870855d82aba6819217abeff5a40779dbb28b4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","0e121d43b5a10f2df530f406f935102656e9c4e8"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["2a1862266772deb28cdcb7d996b64d2177022687"],"36a4a25c2f02edc0c96bc51a298c45b1764e662d":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"2a1862266772deb28cdcb7d996b64d2177022687":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","63961b0a0b1541623ed4c74d8cb088c35b32470f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0e121d43b5a10f2df530f406f935102656e9c4e8"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"63961b0a0b1541623ed4c74d8cb088c35b32470f":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["36a4a25c2f02edc0c96bc51a298c45b1764e662d"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"36a4a25c2f02edc0c96bc51a298c45b1764e662d":["63961b0a0b1541623ed4c74d8cb088c35b32470f"],"2a1862266772deb28cdcb7d996b64d2177022687":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["2a1862266772deb28cdcb7d996b64d2177022687"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["83870855d82aba6819217abeff5a40779dbb28b4","56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}