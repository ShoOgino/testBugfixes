{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacets#testBasicFloat().mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacets#testBasicFloat().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestRangeFacets#testBasicFloat().mjava","sourceNew":"  public void testBasicFloat() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    FloatDocValuesField field = new FloatDocValuesField(\"field\", 0.0f);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setFloatValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector fc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    Facets facets = new RangeFacetCounts(\"field\", fc,\n        new FloatRange(\"less than 10\", 0.0f, true, 10.0f, false),\n        new FloatRange(\"less than or equal to 10\", 0.0f, true, 10.0f, true),\n        new FloatRange(\"over 90\", 90.0f, false, 100.0f, false),\n        new FloatRange(\"90 or above\", 90.0f, true, 100.0f, false),\n        new FloatRange(\"over 1000\", 1000.0f, false, Float.POSITIVE_INFINITY, false));\n    \n    assertEquals(\"value=100 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n    \n    IOUtils.close(w, r, d);\n  }\n\n","sourceOld":"  public void testBasicFloat() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    FloatDocValuesField field = new FloatDocValuesField(\"field\", 0.0f);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setFloatValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    SimpleFacetsCollector fc = new SimpleFacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    Facets facets = new RangeFacetCounts(\"field\", fc,\n        new FloatRange(\"less than 10\", 0.0f, true, 10.0f, false),\n        new FloatRange(\"less than or equal to 10\", 0.0f, true, 10.0f, true),\n        new FloatRange(\"over 90\", 90.0f, false, 100.0f, false),\n        new FloatRange(\"90 or above\", 90.0f, true, 100.0f, false),\n        new FloatRange(\"over 1000\", 1000.0f, false, Float.POSITIVE_INFINITY, false));\n    \n    assertEquals(\"value=100 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n    \n    IOUtils.close(w, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78522aad83283ca58fae08fd89406b65429d0229","date":1385573562,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacetCounts#testBasicFloat().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestRangeFacets#testBasicFloat().mjava","sourceNew":"  public void testBasicFloat() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    FloatDocValuesField field = new FloatDocValuesField(\"field\", 0.0f);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setFloatValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector fc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    Facets facets = new RangeFacetCounts(\"field\", fc,\n        new FloatRange(\"less than 10\", 0.0f, true, 10.0f, false),\n        new FloatRange(\"less than or equal to 10\", 0.0f, true, 10.0f, true),\n        new FloatRange(\"over 90\", 90.0f, false, 100.0f, false),\n        new FloatRange(\"90 or above\", 90.0f, true, 100.0f, false),\n        new FloatRange(\"over 1000\", 1000.0f, false, Float.POSITIVE_INFINITY, false));\n    \n    assertEquals(\"value=100 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n    \n    IOUtils.close(w, r, d);\n  }\n\n","sourceOld":"  public void testBasicFloat() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    FloatDocValuesField field = new FloatDocValuesField(\"field\", 0.0f);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setFloatValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n\n    FacetsCollector fc = new FacetsCollector();\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n\n    Facets facets = new RangeFacetCounts(\"field\", fc,\n        new FloatRange(\"less than 10\", 0.0f, true, 10.0f, false),\n        new FloatRange(\"less than or equal to 10\", 0.0f, true, 10.0f, true),\n        new FloatRange(\"over 90\", 90.0f, false, 100.0f, false),\n        new FloatRange(\"90 or above\", 90.0f, true, 100.0f, false),\n        new FloatRange(\"over 1000\", 1000.0f, false, Float.POSITIVE_INFINITY, false));\n    \n    assertEquals(\"value=100 childCount=5\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\",\n                 facets.getTopChildren(10, \"field\").toString());\n    \n    IOUtils.close(w, r, d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"78522aad83283ca58fae08fd89406b65429d0229":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":["78522aad83283ca58fae08fd89406b65429d0229"],"78522aad83283ca58fae08fd89406b65429d0229":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78522aad83283ca58fae08fd89406b65429d0229","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}