{"path":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator(null);\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator(null);\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = DirectoryReader.open(dir);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator(null);\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = IndexReader.open(dir);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator(null);\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = DirectoryReader.open(dir);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator();\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = DirectoryReader.open(dir);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator(null);\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentTermEnum#verifyDocFreq().mjava","sourceNew":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = DirectoryReader.open(dir);\n      TermsEnum termEnum = MultiTerms.getTerms(reader, \"content\").iterator();\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","sourceOld":"  private void verifyDocFreq()\n      throws IOException\n  {\n      IndexReader reader = DirectoryReader.open(dir);\n      TermsEnum termEnum = MultiFields.getTerms(reader, \"content\").iterator();\n\n    // create enumeration of all terms\n    // go to the first term (aaa)\n    termEnum.next();\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to the second term (bbb)\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n\n\n    // create enumeration of terms after term 'aaa',\n    // including 'aaa'\n    termEnum.seekCeil(new BytesRef(\"aaa\"));\n    // assert that term is 'aaa'\n    assertEquals(\"aaa\", termEnum.term().utf8ToString());\n    assertEquals(200, termEnum.docFreq());\n    // go to term 'bbb'\n    termEnum.next();\n    // assert that term is 'bbb'\n    assertEquals(\"bbb\", termEnum.term().utf8ToString());\n    assertEquals(100, termEnum.docFreq());\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}