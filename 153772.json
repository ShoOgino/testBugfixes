{"path":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","pathOld":"modules/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","sourceNew":"  /**\n   * If its a DictionaryBasedBreakIterator, it doesn't return rulestatus, so\n   * treat it like a generic BreakIterator If its any other\n   * RuleBasedBreakIterator, the rule status can be used for token type. If its\n   * any other BreakIterator, the rulestatus method is not available, so treat\n   * it like a generic BreakIterator.\n   */\n  static BreakIteratorWrapper wrap(BreakIterator breakIterator) {\n    if (breakIterator instanceof RuleBasedBreakIterator\n        && !(breakIterator instanceof DictionaryBasedBreakIterator))\n      return new RBBIWrapper((RuleBasedBreakIterator) breakIterator);\n    else\n      return new BIWrapper(breakIterator);\n  }\n\n","sourceOld":"  /**\n   * If its a DictionaryBasedBreakIterator, it doesn't return rulestatus, so\n   * treat it like a generic BreakIterator If its any other\n   * RuleBasedBreakIterator, the rule status can be used for token type. If its\n   * any other BreakIterator, the rulestatus method is not available, so treat\n   * it like a generic BreakIterator.\n   */\n  static BreakIteratorWrapper wrap(BreakIterator breakIterator) {\n    if (breakIterator instanceof RuleBasedBreakIterator\n        && !(breakIterator instanceof DictionaryBasedBreakIterator))\n      return new RBBIWrapper((RuleBasedBreakIterator) breakIterator);\n    else\n      return new BIWrapper(breakIterator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b07bc5b253e2373a655fc734d650af4ac46c8614","date":1386093923,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","sourceNew":"  /**\n   * If its a RuleBasedBreakIterator, the rule status can be used for token type. If its\n   * any other BreakIterator, the rulestatus method is not available, so treat\n   * it like a generic BreakIterator.\n   */\n  static BreakIteratorWrapper wrap(BreakIterator breakIterator) {\n    if (breakIterator instanceof RuleBasedBreakIterator)\n      return new RBBIWrapper((RuleBasedBreakIterator) breakIterator);\n    else\n      return new BIWrapper(breakIterator);\n  }\n\n","sourceOld":"  /**\n   * If its a DictionaryBasedBreakIterator, it doesn't return rulestatus, so\n   * treat it like a generic BreakIterator If its any other\n   * RuleBasedBreakIterator, the rule status can be used for token type. If its\n   * any other BreakIterator, the rulestatus method is not available, so treat\n   * it like a generic BreakIterator.\n   */\n  static BreakIteratorWrapper wrap(BreakIterator breakIterator) {\n    if (breakIterator instanceof RuleBasedBreakIterator\n        && !(breakIterator instanceof DictionaryBasedBreakIterator))\n      return new RBBIWrapper((RuleBasedBreakIterator) breakIterator);\n    else\n      return new BIWrapper(breakIterator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","sourceNew":"  /**\n   * If its a RuleBasedBreakIterator, the rule status can be used for token type. If its\n   * any other BreakIterator, the rulestatus method is not available, so treat\n   * it like a generic BreakIterator.\n   */\n  static BreakIteratorWrapper wrap(BreakIterator breakIterator) {\n    if (breakIterator instanceof RuleBasedBreakIterator)\n      return new RBBIWrapper((RuleBasedBreakIterator) breakIterator);\n    else\n      return new BIWrapper(breakIterator);\n  }\n\n","sourceOld":"  /**\n   * If its a DictionaryBasedBreakIterator, it doesn't return rulestatus, so\n   * treat it like a generic BreakIterator If its any other\n   * RuleBasedBreakIterator, the rule status can be used for token type. If its\n   * any other BreakIterator, the rulestatus method is not available, so treat\n   * it like a generic BreakIterator.\n   */\n  static BreakIteratorWrapper wrap(BreakIterator breakIterator) {\n    if (breakIterator instanceof RuleBasedBreakIterator\n        && !(breakIterator instanceof DictionaryBasedBreakIterator))\n      return new RBBIWrapper((RuleBasedBreakIterator) breakIterator);\n    else\n      return new BIWrapper(breakIterator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","sourceNew":"  /**\n   * If it's a RuleBasedBreakIterator, the rule status can be used for token type. If it's\n   * any other BreakIterator, the rulestatus method is not available, so treat\n   * it like a generic BreakIterator.\n   */\n  static BreakIteratorWrapper wrap(BreakIterator breakIterator) {\n    if (breakIterator instanceof RuleBasedBreakIterator)\n      return new RBBIWrapper((RuleBasedBreakIterator) breakIterator);\n    else\n      return new BIWrapper(breakIterator);\n  }\n\n","sourceOld":"  /**\n   * If its a RuleBasedBreakIterator, the rule status can be used for token type. If its\n   * any other BreakIterator, the rulestatus method is not available, so treat\n   * it like a generic BreakIterator.\n   */\n  static BreakIteratorWrapper wrap(BreakIterator breakIterator) {\n    if (breakIterator instanceof RuleBasedBreakIterator)\n      return new RBBIWrapper((RuleBasedBreakIterator) breakIterator);\n    else\n      return new BIWrapper(breakIterator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9381336c4dc91cc20829fb628036012963dc440","date":1515945231,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","sourceNew":null,"sourceOld":"  /**\n   * If it's a RuleBasedBreakIterator, the rule status can be used for token type. If it's\n   * any other BreakIterator, the rulestatus method is not available, so treat\n   * it like a generic BreakIterator.\n   */\n  static BreakIteratorWrapper wrap(BreakIterator breakIterator) {\n    if (breakIterator instanceof RuleBasedBreakIterator)\n      return new RBBIWrapper((RuleBasedBreakIterator) breakIterator);\n    else\n      return new BIWrapper(breakIterator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","sourceNew":null,"sourceOld":"  /**\n   * If it's a RuleBasedBreakIterator, the rule status can be used for token type. If it's\n   * any other BreakIterator, the rulestatus method is not available, so treat\n   * it like a generic BreakIterator.\n   */\n  static BreakIteratorWrapper wrap(BreakIterator breakIterator) {\n    if (breakIterator instanceof RuleBasedBreakIterator)\n      return new RBBIWrapper((RuleBasedBreakIterator) breakIterator);\n    else\n      return new BIWrapper(breakIterator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcc05d435c845d2b3c7c10faeb6674cc37ad3527","date":1519133993,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * If it's a RuleBasedBreakIterator, the rule status can be used for token type. If it's\n   * any other BreakIterator, the rulestatus method is not available, so treat\n   * it like a generic BreakIterator.\n   */\n  static BreakIteratorWrapper wrap(BreakIterator breakIterator) {\n    if (breakIterator instanceof RuleBasedBreakIterator)\n      return new RBBIWrapper((RuleBasedBreakIterator) breakIterator);\n    else\n      return new BIWrapper(breakIterator);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a3e7b7017a06c652c79a772b1259178f6908877","date":1522103499,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","sourceNew":null,"sourceOld":"  /**\n   * If it's a RuleBasedBreakIterator, the rule status can be used for token type. If it's\n   * any other BreakIterator, the rulestatus method is not available, so treat\n   * it like a generic BreakIterator.\n   */\n  static BreakIteratorWrapper wrap(BreakIterator breakIterator) {\n    if (breakIterator instanceof RuleBasedBreakIterator)\n      return new RBBIWrapper((RuleBasedBreakIterator) breakIterator);\n    else\n      return new BIWrapper(breakIterator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7","date":1522191940,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/analysis/icu/src/java/org/apache/lucene/analysis/icu/segmentation/BreakIteratorWrapper#wrap(BreakIterator).mjava","sourceNew":null,"sourceOld":"  /**\n   * If it's a RuleBasedBreakIterator, the rule status can be used for token type. If it's\n   * any other BreakIterator, the rulestatus method is not available, so treat\n   * it like a generic BreakIterator.\n   */\n  static BreakIteratorWrapper wrap(BreakIterator breakIterator) {\n    if (breakIterator instanceof RuleBasedBreakIterator)\n      return new RBBIWrapper((RuleBasedBreakIterator) breakIterator);\n    else\n      return new BIWrapper(breakIterator);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","a9381336c4dc91cc20829fb628036012963dc440"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["b07bc5b253e2373a655fc734d650af4ac46c8614"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b07bc5b253e2373a655fc734d650af4ac46c8614":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1a3e7b7017a06c652c79a772b1259178f6908877":["fcc05d435c845d2b3c7c10faeb6674cc37ad3527"],"fcc05d435c845d2b3c7c10faeb6674cc37ad3527":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a9381336c4dc91cc20829fb628036012963dc440":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["fcc05d435c845d2b3c7c10faeb6674cc37ad3527","1a3e7b7017a06c652c79a772b1259178f6908877"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["b89678825b68eccaf09e6ab71675fc0b0af1e099","b07bc5b253e2373a655fc734d650af4ac46c8614"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["fcc05d435c845d2b3c7c10faeb6674cc37ad3527"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["b94236357aaa22b76c10629851fe4e376e0cea82","a9381336c4dc91cc20829fb628036012963dc440"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["b07bc5b253e2373a655fc734d650af4ac46c8614","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"b07bc5b253e2373a655fc734d650af4ac46c8614":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"1a3e7b7017a06c652c79a772b1259178f6908877":["d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"fcc05d435c845d2b3c7c10faeb6674cc37ad3527":["1a3e7b7017a06c652c79a772b1259178f6908877","d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a9381336c4dc91cc20829fb628036012963dc440":["b94236357aaa22b76c10629851fe4e376e0cea82"],"d61a3e0821ed080b9b21e1328bbaa91dcf79f7d7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}