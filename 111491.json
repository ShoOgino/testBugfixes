{"path":"modules/spatial/strategy/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#randRange(int,int).mjava","commits":[{"id":"c2047ba81272a0c4edeb11b1c7810ee23ba73502","date":1329808655,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/strategy/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#randRange(int,int).mjava","pathOld":"modules/spatial-TEMP/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#randRange(int,int).mjava","sourceNew":"  /** Returns a random integer between [start, end] with a limited number of possibilities instead of end-start+1. */\n  private int randRange(int start, int end) {\n    //I tested this.\n    double r = random.nextDouble();\n    final int BUCKETS = 91;\n    int ir = (int) Math.round(r*(BUCKETS-1));//put into buckets\n    int result = (int)((double)((end - start) * ir) / (double)(BUCKETS-1) + (double)start);\n    assert result >= start && result <= end;\n    return result;\n  }\n\n","sourceOld":"  /** Returns a random integer between [start, end] with a limited number of possibilities instead of end-start+1. */\n  private int randRange(int start, int end) {\n    //I tested this.\n    double r = random.nextDouble();\n    final int BUCKETS = 91;\n    int ir = (int) Math.round(r*(BUCKETS-1));//put into buckets\n    int result = (int)((double)((end - start) * ir) / (double)(BUCKETS-1) + (double)start);\n    assert result >= start && result <= end;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a","date":1330032413,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/base/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#randRange(int,int).mjava","pathOld":"modules/spatial/strategy/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#randRange(int,int).mjava","sourceNew":"  /** Returns a random integer between [start, end] with a limited number of possibilities instead of end-start+1. */\n  private int randRange(int start, int end) {\n    //I tested this.\n    double r = LuceneTestCase.random.nextDouble();\n    final int BUCKETS = 91;\n    int ir = (int) Math.round(r*(BUCKETS-1));//put into buckets\n    int result = (int)((double)((end - start) * ir) / (double)(BUCKETS-1) + (double)start);\n    assert result >= start && result <= end;\n    return result;\n  }\n\n","sourceOld":"  /** Returns a random integer between [start, end] with a limited number of possibilities instead of end-start+1. */\n  private int randRange(int start, int end) {\n    //I tested this.\n    double r = random.nextDouble();\n    final int BUCKETS = 91;\n    int ir = (int) Math.round(r*(BUCKETS-1));//put into buckets\n    int result = (int)((double)((end - start) * ir) / (double)(BUCKETS-1) + (double)start);\n    assert result >= start && result <= end;\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a":["c2047ba81272a0c4edeb11b1c7810ee23ba73502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a"],"4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2047ba81272a0c4edeb11b1c7810ee23ba73502","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4f1f1ac95d9e689fc66dc6bcc5c7ab19fe9fc37a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}