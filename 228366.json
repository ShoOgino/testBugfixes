{"path":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#insert(List[String],T).mjava","commits":[{"id":"5174b677b2536f97776e6b67e8c10ae5c66e6fa2","date":1496916595,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#insert(List[String],T).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PathTrie.Node#insert(List[String],T).mjava","sourceNew":"    private synchronized void insert(List<String> path, T o) {\n      String part = path.get(0);\n      Node matchedChild = null;\n      if (children == null) children = new ConcurrentHashMap<>();\n\n      String varName = templateName(part);\n      String key = varName == null ? part : \"\";\n\n      matchedChild = children.get(key);\n      if (matchedChild == null) {\n        children.put(key, matchedChild = new Node(path, o));\n      }\n      if (varName != null) {\n        if (!matchedChild.templateName.equals(varName)) {\n          throw new RuntimeException(\"wildcard name must be \" + matchedChild.templateName);\n        }\n      }\n      path.remove(0);\n      if (!path.isEmpty()) {\n        matchedChild.insert(path, o);\n      } else {\n        matchedChild.obj = o;\n      }\n\n    }\n\n","sourceOld":"    private synchronized void insert(List<String> path, T o) {\n      String part = path.get(0);\n      Node matchedChild = null;\n      if (children == null) children = new ConcurrentHashMap<>();\n\n      String varName = templateName(part);\n      String key = varName == null ? part : \"\";\n\n      matchedChild = children.get(key);\n      if (matchedChild == null) {\n        children.put(key, matchedChild = new Node(path, o));\n      }\n      if (varName != null) {\n        if (!matchedChild.templateName.equals(varName)) {\n          throw new RuntimeException(\"wildcard name must be \" + matchedChild.templateName);\n        }\n      }\n      path.remove(0);\n      if (!path.isEmpty()) {\n        matchedChild.insert(path, o);\n      } else {\n        matchedChild.obj = o;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#insert(List[String],T).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PathTrie.Node#insert(List[String],T).mjava","sourceNew":"    private synchronized void insert(List<String> path, T o) {\n      String part = path.get(0);\n      Node matchedChild = null;\n      if (children == null) children = new ConcurrentHashMap<>();\n\n      String varName = templateName(part);\n      String key = varName == null ? part : \"\";\n\n      matchedChild = children.get(key);\n      if (matchedChild == null) {\n        children.put(key, matchedChild = new Node(path, o));\n      }\n      if (varName != null) {\n        if (!matchedChild.templateName.equals(varName)) {\n          throw new RuntimeException(\"wildcard name must be \" + matchedChild.templateName);\n        }\n      }\n      path.remove(0);\n      if (!path.isEmpty()) {\n        matchedChild.insert(path, o);\n      } else {\n        matchedChild.obj = o;\n      }\n\n    }\n\n","sourceOld":"    private synchronized void insert(List<String> path, T o) {\n      String part = path.get(0);\n      Node matchedChild = null;\n      if (children == null) children = new ConcurrentHashMap<>();\n\n      String varName = templateName(part);\n      String key = varName == null ? part : \"\";\n\n      matchedChild = children.get(key);\n      if (matchedChild == null) {\n        children.put(key, matchedChild = new Node(path, o));\n      }\n      if (varName != null) {\n        if (!matchedChild.templateName.equals(varName)) {\n          throw new RuntimeException(\"wildcard name must be \" + matchedChild.templateName);\n        }\n      }\n      path.remove(0);\n      if (!path.isEmpty()) {\n        matchedChild.insert(path, o);\n      } else {\n        matchedChild.obj = o;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#insert(List[String],T).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/PathTrie.Node#insert(List[String],T).mjava","sourceNew":"    private synchronized void insert(List<String> path, T o) {\n      String part = path.get(0);\n      Node matchedChild = null;\n      if (children == null) children = new ConcurrentHashMap<>();\n\n      String varName = templateName(part);\n      String key = varName == null ? part : \"\";\n\n      matchedChild = children.get(key);\n      if (matchedChild == null) {\n        children.put(key, matchedChild = new Node(path, o));\n      }\n      if (varName != null) {\n        if (!matchedChild.templateName.equals(varName)) {\n          throw new RuntimeException(\"wildcard name must be \" + matchedChild.templateName);\n        }\n      }\n      path.remove(0);\n      if (!path.isEmpty()) {\n        matchedChild.insert(path, o);\n      } else {\n        matchedChild.obj = o;\n      }\n\n    }\n\n","sourceOld":"    private synchronized void insert(List<String> path, T o) {\n      String part = path.get(0);\n      Node matchedChild = null;\n      if (children == null) children = new ConcurrentHashMap<>();\n\n      String varName = templateName(part);\n      String key = varName == null ? part : \"\";\n\n      matchedChild = children.get(key);\n      if (matchedChild == null) {\n        children.put(key, matchedChild = new Node(path, o));\n      }\n      if (varName != null) {\n        if (!matchedChild.templateName.equals(varName)) {\n          throw new RuntimeException(\"wildcard name must be \" + matchedChild.templateName);\n        }\n      }\n      path.remove(0);\n      if (!path.isEmpty()) {\n        matchedChild.insert(path, o);\n      } else {\n        matchedChild.obj = o;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ba409fa7dec3437c7631ef2582c2ad91a8368b1","date":1570400397,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#insert(List[String],T).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#insert(List[String],T).mjava","sourceNew":"    private synchronized void insert(List<String> path, T o) {\n      String part = path.get(0);\n      Node matchedChild = null;\n      if (\"*\".equals(name)) {\n        return;\n      }\n      if (children == null) children = new ConcurrentHashMap<>();\n\n      String varName = templateName(part);\n      String key = varName == null ? part : \"\";\n\n      matchedChild = children.get(key);\n      if (matchedChild == null) {\n        children.put(key, matchedChild = new Node(path, o));\n      }\n      if (varName != null) {\n        if (!matchedChild.templateName.equals(varName)) {\n          throw new RuntimeException(\"wildcard name must be \" + matchedChild.templateName);\n        }\n      }\n      path.remove(0);\n      if (!path.isEmpty()) {\n        matchedChild.insert(path, o);\n      } else {\n        matchedChild.obj = o;\n      }\n\n    }\n\n","sourceOld":"    private synchronized void insert(List<String> path, T o) {\n      String part = path.get(0);\n      Node matchedChild = null;\n      if (children == null) children = new ConcurrentHashMap<>();\n\n      String varName = templateName(part);\n      String key = varName == null ? part : \"\";\n\n      matchedChild = children.get(key);\n      if (matchedChild == null) {\n        children.put(key, matchedChild = new Node(path, o));\n      }\n      if (varName != null) {\n        if (!matchedChild.templateName.equals(varName)) {\n          throw new RuntimeException(\"wildcard name must be \" + matchedChild.templateName);\n        }\n      }\n      path.remove(0);\n      if (!path.isEmpty()) {\n        matchedChild.insert(path, o);\n      } else {\n        matchedChild.obj = o;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#insert(List[String],T).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#insert(List[String],T).mjava","sourceNew":"    private synchronized void insert(List<String> path, T o) {\n      String part = path.get(0);\n      Node matchedChild = null;\n      if (\"*\".equals(name)) {\n        return;\n      }\n      if (children == null) children = new ConcurrentHashMap<>();\n\n      String varName = templateName(part);\n      String key = varName == null ? part : \"\";\n\n      matchedChild = children.get(key);\n      if (matchedChild == null) {\n        children.put(key, matchedChild = new Node(path, o));\n      }\n      if (varName != null) {\n        if (!matchedChild.templateName.equals(varName)) {\n          throw new RuntimeException(\"wildcard name must be \" + matchedChild.templateName);\n        }\n      }\n      path.remove(0);\n      if (!path.isEmpty()) {\n        matchedChild.insert(path, o);\n      } else {\n        matchedChild.obj = o;\n      }\n\n    }\n\n","sourceOld":"    private synchronized void insert(List<String> path, T o) {\n      String part = path.get(0);\n      Node matchedChild = null;\n      if (children == null) children = new ConcurrentHashMap<>();\n\n      String varName = templateName(part);\n      String key = varName == null ? part : \"\";\n\n      matchedChild = children.get(key);\n      if (matchedChild == null) {\n        children.put(key, matchedChild = new Node(path, o));\n      }\n      if (varName != null) {\n        if (!matchedChild.templateName.equals(varName)) {\n          throw new RuntimeException(\"wildcard name must be \" + matchedChild.templateName);\n        }\n      }\n      path.remove(0);\n      if (!path.isEmpty()) {\n        matchedChild.insert(path, o);\n      } else {\n        matchedChild.obj = o;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"650b520f2a4daa4b0712e2393dc29ae7f21f10ac","date":1593054531,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#insert(List[String],T).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/PathTrie.Node#insert(List[String],T).mjava","sourceNew":"    private synchronized void insert(List<String> path, T o) {\n      String part = path.get(0);\n      Node matchedChild = null;\n      if (\"*\".equals(name)) {\n        return;\n      }\n      if (children == null) children = new ConcurrentHashMap<>();\n\n      String varName = templateName(part);\n      String key = varName == null ? part : \"\";\n\n      matchedChild = children.get(key);\n      if (matchedChild == null) {\n        children.put(key, matchedChild = new Node(path, o, this));\n      }\n      if (varName != null) {\n        if (!matchedChild.templateName.equals(varName)) {\n          throw new RuntimeException(\"wildcard name must be \" + matchedChild.templateName);\n        }\n      }\n      path.remove(0);\n      if (!path.isEmpty()) {\n        matchedChild.insert(path, o);\n      } else {\n        matchedChild.obj = o;\n      }\n\n    }\n\n","sourceOld":"    private synchronized void insert(List<String> path, T o) {\n      String part = path.get(0);\n      Node matchedChild = null;\n      if (\"*\".equals(name)) {\n        return;\n      }\n      if (children == null) children = new ConcurrentHashMap<>();\n\n      String varName = templateName(part);\n      String key = varName == null ? part : \"\";\n\n      matchedChild = children.get(key);\n      if (matchedChild == null) {\n        children.put(key, matchedChild = new Node(path, o));\n      }\n      if (varName != null) {\n        if (!matchedChild.templateName.equals(varName)) {\n          throw new RuntimeException(\"wildcard name must be \" + matchedChild.templateName);\n        }\n      }\n      path.remove(0);\n      if (!path.isEmpty()) {\n        matchedChild.insert(path, o);\n      } else {\n        matchedChild.obj = o;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac"],"b0b597c65628ca9e73913a07e81691f8229bae35":["28288370235ed02234a64753cdbf0c6ec096304a","6ba409fa7dec3437c7631ef2582c2ad91a8368b1"]},"commit2Childs":{"650b520f2a4daa4b0712e2393dc29ae7f21f10ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28288370235ed02234a64753cdbf0c6ec096304a","5174b677b2536f97776e6b67e8c10ae5c66e6fa2","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"6ba409fa7dec3437c7631ef2582c2ad91a8368b1":["650b520f2a4daa4b0712e2393dc29ae7f21f10ac","b0b597c65628ca9e73913a07e81691f8229bae35"],"28288370235ed02234a64753cdbf0c6ec096304a":["6ba409fa7dec3437c7631ef2582c2ad91a8368b1","b0b597c65628ca9e73913a07e81691f8229bae35"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}