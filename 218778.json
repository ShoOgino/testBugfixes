{"path":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","commits":[{"id":"e03427f33820a2bde791de703292dcdfe2d6bdd6","date":1274819813,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCoded(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["99c9d8533c954f661481ae44273622957dbf572f","99c9d8533c954f661481ae44273622957dbf572f","99c9d8533c954f661481ae44273622957dbf572f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCoded(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCoded(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCoded(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCoded(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#readableToIndexed(CharSequence,BytesRef).mjava","sourceNew":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCoded(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void readableToIndexed(CharSequence val, BytesRef result) {\n    String s = val.toString();\n    switch (type) {\n      case INTEGER:\n        NumericUtils.intToPrefixCoded(Integer.parseInt(s), 0, result);\n        break;\n      case FLOAT:\n        NumericUtils.intToPrefixCoded(NumericUtils.floatToSortableInt(Float.parseFloat(s)), 0, result);\n        break;\n      case LONG:\n        NumericUtils.longToPrefixCoded(Long.parseLong(s), 0, result);\n        break;\n      case DOUBLE:\n        NumericUtils.longToPrefixCoded(NumericUtils.doubleToSortableLong(Double.parseDouble(s)), 0, result);\n        break;\n      case DATE:\n        NumericUtils.longToPrefixCoded(dateField.parseMath(null, s).getTime(), 0, result);\n        break;\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + type);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["e03427f33820a2bde791de703292dcdfe2d6bdd6"],"c26f00b574427b55127e869b935845554afde1fa":["e03427f33820a2bde791de703292dcdfe2d6bdd6","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["e03427f33820a2bde791de703292dcdfe2d6bdd6"],"e03427f33820a2bde791de703292dcdfe2d6bdd6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e03427f33820a2bde791de703292dcdfe2d6bdd6"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"e03427f33820a2bde791de703292dcdfe2d6bdd6":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}