{"path":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsWriter#write(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsWriter#write(String).mjava","pathOld":"modules/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsWriter#write(String).mjava","sourceNew":"  public void write(String baseDir) throws IOException {\n    String filename = baseDir + File.separator +\n      ConnectionCosts.class.getName().replace('.', File.separatorChar) + ConnectionCosts.FILENAME_SUFFIX;\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, ConnectionCosts.HEADER, ConnectionCosts.VERSION);\n      out.writeVInt(forwardSize);\n      out.writeVInt(backwardSize);\n      int last = 0;\n      assert costs.length == backwardSize;\n      for (short[] a : costs) {\n        assert a.length == forwardSize;\n        for (int i = 0; i < a.length; i++) {\n          int delta = (int)a[i] - last;\n          out.writeVInt((delta >> 31) ^ (delta << 1));\n          last = a[i];\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","sourceOld":"  public void write(String baseDir) throws IOException {\n    String filename = baseDir + File.separator +\n      ConnectionCosts.class.getName().replace('.', File.separatorChar) + ConnectionCosts.FILENAME_SUFFIX;\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, ConnectionCosts.HEADER, ConnectionCosts.VERSION);\n      out.writeVInt(forwardSize);\n      out.writeVInt(backwardSize);\n      int last = 0;\n      assert costs.length == backwardSize;\n      for (short[] a : costs) {\n        assert a.length == forwardSize;\n        for (int i = 0; i < a.length; i++) {\n          int delta = (int)a[i] - last;\n          out.writeVInt((delta >> 31) ^ (delta << 1));\n          last = a[i];\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b4c9600e627d27133f442e03debf1f765790fe9","date":1397238925,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsWriter#write(String).mjava","pathOld":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsWriter#write(String).mjava","sourceNew":"  public void write(String baseDir) throws IOException {\n    String filename = baseDir + File.separator +\n      ConnectionCosts.class.getName().replace('.', File.separatorChar) + ConnectionCosts.FILENAME_SUFFIX;\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, ConnectionCosts.HEADER, ConnectionCosts.VERSION);\n      out.writeVInt(forwardSize);\n      out.writeVInt(backwardSize);\n      int last = 0;\n      assert costs.length == backwardSize;\n      for (short[] a : costs) {\n        assert a.length == forwardSize;\n        for (int i = 0; i < a.length; i++) {\n          int delta = (int)a[i] - last;\n          out.writeVInt(BitUtil.zigZagEncode(delta));\n          last = a[i];\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","sourceOld":"  public void write(String baseDir) throws IOException {\n    String filename = baseDir + File.separator +\n      ConnectionCosts.class.getName().replace('.', File.separatorChar) + ConnectionCosts.FILENAME_SUFFIX;\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, ConnectionCosts.HEADER, ConnectionCosts.VERSION);\n      out.writeVInt(forwardSize);\n      out.writeVInt(backwardSize);\n      int last = 0;\n      assert costs.length == backwardSize;\n      for (short[] a : costs) {\n        assert a.length == forwardSize;\n        for (int i = 0; i < a.length; i++) {\n          int delta = (int)a[i] - last;\n          out.writeVInt((delta >> 31) ^ (delta << 1));\n          last = a[i];\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493","date":1406810962,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsWriter#write(String).mjava","pathOld":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsWriter#write(String).mjava","sourceNew":"  public void write(String baseDir) throws IOException {\n    String filename = baseDir + File.separator +\n      ConnectionCosts.class.getName().replace('.', File.separatorChar) + ConnectionCosts.FILENAME_SUFFIX;\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, ConnectionCosts.HEADER, ConnectionCosts.VERSION);\n      out.writeVInt(forwardSize);\n      out.writeVInt(backwardSize);\n      int last = 0;\n      assert costs.length == backwardSize;\n      for (short[] a : costs) {\n        assert a.length == forwardSize;\n        for (int i = 0; i < a.length; i++) {\n          int delta = (int)a[i] - last;\n          out.writeZInt(delta);\n          last = a[i];\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","sourceOld":"  public void write(String baseDir) throws IOException {\n    String filename = baseDir + File.separator +\n      ConnectionCosts.class.getName().replace('.', File.separatorChar) + ConnectionCosts.FILENAME_SUFFIX;\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, ConnectionCosts.HEADER, ConnectionCosts.VERSION);\n      out.writeVInt(forwardSize);\n      out.writeVInt(backwardSize);\n      int last = 0;\n      assert costs.length == backwardSize;\n      for (short[] a : costs) {\n        assert a.length == forwardSize;\n        for (int i = 0; i < a.length; i++) {\n          int delta = (int)a[i] - last;\n          out.writeVInt(BitUtil.zigZagEncode(delta));\n          last = a[i];\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05feb7eb5e91cb64742ce32b2ca3f02433530446","date":1561602840,"type":5,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/ConnectionCostsWriter#write(Path).mjava","pathOld":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/ConnectionCostsWriter#write(String).mjava","sourceNew":"  public void write(Path baseDir) throws IOException {\n    Files.createDirectories(baseDir);\n    String fileName = ConnectionCosts.class.getName().replace('.', '/') + ConnectionCosts.FILENAME_SUFFIX;\n    try (OutputStream os = Files.newOutputStream(baseDir.resolve(fileName));\n         OutputStream bos = new BufferedOutputStream(os)) {\n      final DataOutput out = new OutputStreamDataOutput(bos);\n      CodecUtil.writeHeader(out, ConnectionCosts.HEADER, ConnectionCosts.VERSION);\n      out.writeVInt(forwardSize);\n      out.writeVInt(backwardSize);\n      int last = 0;\n      assert costs.length == backwardSize;\n      for (short[] a : costs) {\n        assert a.length == forwardSize;\n        for (short cost : a) {\n          int delta = (int) cost - last;\n          out.writeZInt(delta);\n          last = cost;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void write(String baseDir) throws IOException {\n    String filename = baseDir + File.separator +\n      ConnectionCosts.class.getName().replace('.', File.separatorChar) + ConnectionCosts.FILENAME_SUFFIX;\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, ConnectionCosts.HEADER, ConnectionCosts.VERSION);\n      out.writeVInt(forwardSize);\n      out.writeVInt(backwardSize);\n      int last = 0;\n      assert costs.length == backwardSize;\n      for (short[] a : costs) {\n        assert a.length == forwardSize;\n        for (int i = 0; i < a.length; i++) {\n          int delta = (int)a[i] - last;\n          out.writeZInt(delta);\n          last = a[i];\n        }\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493":["7b4c9600e627d27133f442e03debf1f765790fe9"],"05feb7eb5e91cb64742ce32b2ca3f02433530446":["ee0a782aba5788b03bbf2ba679d4f4b0ebc88493"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05feb7eb5e91cb64742ce32b2ca3f02433530446"],"7b4c9600e627d27133f442e03debf1f765790fe9":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7b4c9600e627d27133f442e03debf1f765790fe9"],"ee0a782aba5788b03bbf2ba679d4f4b0ebc88493":["05feb7eb5e91cb64742ce32b2ca3f02433530446"],"05feb7eb5e91cb64742ce32b2ca3f02433530446":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7b4c9600e627d27133f442e03debf1f765790fe9":["ee0a782aba5788b03bbf2ba679d4f4b0ebc88493"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}