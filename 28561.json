{"path":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testNOT().mjava","commits":[{"id":"666941fc3b44cfc8ae450ccf038042a0b7350e14","date":1295992814,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testNOT().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-792\n  public void testNOT() throws Exception {\n    Analyzer a = new MockAnalyzer(MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"NOT foo AND bar\", a, \"-foo +bar\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testNOT().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-792\n  public void testNOT() throws Exception {\n    Analyzer a = new MockAnalyzer(MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"NOT foo AND bar\", a, \"-foo +bar\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testNOT().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-792\n  public void testNOT() throws Exception {\n    Analyzer a = new MockAnalyzer(MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"NOT foo AND bar\", a, \"-foo +bar\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testNOT().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testNOT().mjava","sourceNew":"  // LUCENE-792\n  public void testNOT() throws Exception {\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"NOT foo AND bar\", a, \"-foo +bar\");\n  }\n\n","sourceOld":"  // LUCENE-792\n  public void testNOT() throws Exception {\n    Analyzer a = new MockAnalyzer(MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"NOT foo AND bar\", a, \"-foo +bar\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testNOT().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testNOT().mjava","sourceNew":"  // LUCENE-792\n  public void testNOT() throws Exception {\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"NOT foo AND bar\", a, \"-foo +bar\");\n  }\n\n","sourceOld":"  // LUCENE-792\n  public void testNOT() throws Exception {\n    Analyzer a = new MockAnalyzer(MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"NOT foo AND bar\", a, \"-foo +bar\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testNOT().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testNOT().mjava","sourceNew":"  // LUCENE-792\n  public void testNOT() throws Exception {\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"NOT foo AND bar\", a, \"-foo +bar\");\n  }\n\n","sourceOld":"  // LUCENE-792\n  public void testNOT() throws Exception {\n    Analyzer a = new MockAnalyzer(MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"NOT foo AND bar\", a, \"-foo +bar\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testNOT().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testNOT().mjava","sourceNew":"  // LUCENE-792\n  public void testNOT() throws Exception {\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"NOT foo AND bar\", a, \"-foo +bar\");\n  }\n\n","sourceOld":"  // LUCENE-792\n  public void testNOT() throws Exception {\n    Analyzer a = new MockAnalyzer(MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"NOT foo AND bar\", a, \"-foo +bar\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/precedence/TestPrecedenceQueryParser#testNOT().mjava","pathOld":"lucene/contrib/queryparser/src/test/org/apache/lucene/queryParser/precedence/TestPrecedenceQueryParser#testNOT().mjava","sourceNew":"  // LUCENE-792\n  public void testNOT() throws Exception {\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"NOT foo AND bar\", a, \"-foo +bar\");\n  }\n\n","sourceOld":"  // LUCENE-792\n  public void testNOT() throws Exception {\n    Analyzer a = new MockAnalyzer(random, MockTokenizer.WHITESPACE, false);\n    assertQueryEquals(\"NOT foo AND bar\", a, \"-foo +bar\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["666941fc3b44cfc8ae450ccf038042a0b7350e14"],"666941fc3b44cfc8ae450ccf038042a0b7350e14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["666941fc3b44cfc8ae450ccf038042a0b7350e14","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","666941fc3b44cfc8ae450ccf038042a0b7350e14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","666941fc3b44cfc8ae450ccf038042a0b7350e14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"666941fc3b44cfc8ae450ccf038042a0b7350e14":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["666941fc3b44cfc8ae450ccf038042a0b7350e14","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}