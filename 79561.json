{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      \n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      \n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06054bbf4f2aaa2f864ecabac4b0e1db6f3b07eb","date":1358785243,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      \n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n      doc.add(new LongDocValuesField(\"dv\", 5));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      \n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      \n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n      doc.add(new NumericDocValuesField(\"dv\", 5));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      \n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n      doc.add(new LongDocValuesField(\"dv\", 5));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      \n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n      doc.add(new NumericDocValuesField(\"dv\", 5));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      \n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9299079153fd7895bf3cf6835cf7019af2ba89b3","date":1417813477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      \n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n      doc.add(new NumericDocValuesField(\"dv\", 5));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (AlreadyClosedException ace) {\n          // OK: abort closes the writer\n          break;\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      \n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n      doc.add(new NumericDocValuesField(\"dv\", 5));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9f7829b01acc3b2d4cad883060a0fbf544eaae1","date":1521396858,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        syncStart.await();\n      } catch (BrokenBarrierException | InterruptedException e) {\n        error = e;\n        throw new RuntimeException(e);\n      }\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      \n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n      doc.add(new NumericDocValuesField(\"dv\", 5));\n\n      int idUpto = 0;\n      int fullCount = 0;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (AlreadyClosedException ace) {\n          // OK: abort closes the writer\n          break;\n        } catch (Throwable t) {\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while (true);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      \n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n      doc.add(new NumericDocValuesField(\"dv\", 5));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (AlreadyClosedException ace) {\n          // OK: abort closes the writer\n          break;\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203e3fcf513c02ee2c07015f2ce277e26dc60907","date":1521404157,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterWithThreads.IndexerThread#run().mjava","sourceNew":"    @Override\n    public void run() {\n      try {\n        syncStart.await();\n      } catch (BrokenBarrierException | InterruptedException e) {\n        error = e;\n        throw new RuntimeException(e);\n      }\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      \n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n      doc.add(new NumericDocValuesField(\"dv\", 5));\n\n      int idUpto = 0;\n      int fullCount = 0;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (AlreadyClosedException ace) {\n          // OK: abort closes the writer\n          break;\n        } catch (Throwable t) {\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while (true);\n    }\n\n","sourceOld":"    @Override\n    public void run() {\n\n      final Document doc = new Document();\n      FieldType customType = new FieldType(TextField.TYPE_STORED);\n      customType.setStoreTermVectors(true);\n      customType.setStoreTermVectorPositions(true);\n      customType.setStoreTermVectorOffsets(true);\n      \n      doc.add(newField(\"field\", \"aaa bbb ccc ddd eee fff ggg hhh iii jjj\", customType));\n      doc.add(new NumericDocValuesField(\"dv\", 5));\n\n      int idUpto = 0;\n      int fullCount = 0;\n      final long stopTime = System.currentTimeMillis() + 200;\n\n      do {\n        try {\n          writer.updateDocument(new Term(\"id\", \"\"+(idUpto++)), doc);\n          addCount++;\n        } catch (IOException ioe) {\n          if (VERBOSE) {\n            System.out.println(\"TEST: expected exc:\");\n            ioe.printStackTrace(System.out);\n          }\n          //System.out.println(Thread.currentThread().getName() + \": hit exc\");\n          //ioe.printStackTrace(System.out);\n          if (ioe.getMessage().startsWith(\"fake disk full at\") ||\n              ioe.getMessage().equals(\"now failing on purpose\")) {\n            diskFull = true;\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n            if (fullCount++ >= 5)\n              break;\n          } else {\n            if (noErrors) {\n              System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected IOException:\");\n              ioe.printStackTrace(System.out);\n              error = ioe;\n            }\n            break;\n          }\n        } catch (AlreadyClosedException ace) {\n          // OK: abort closes the writer\n          break;\n        } catch (Throwable t) {\n          //t.printStackTrace(System.out);\n          if (noErrors) {\n            System.out.println(Thread.currentThread().getName() + \": ERROR: unexpected Throwable:\");\n            t.printStackTrace(System.out);\n            error = t;\n          }\n          break;\n        }\n      } while(System.currentTimeMillis() < stopTime);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"06054bbf4f2aaa2f864ecabac4b0e1db6f3b07eb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["9299079153fd7895bf3cf6835cf7019af2ba89b3","d9f7829b01acc3b2d4cad883060a0fbf544eaae1"],"d9f7829b01acc3b2d4cad883060a0fbf544eaae1":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["06054bbf4f2aaa2f864ecabac4b0e1db6f3b07eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["203e3fcf513c02ee2c07015f2ce277e26dc60907"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["9299079153fd7895bf3cf6835cf7019af2ba89b3"],"06054bbf4f2aaa2f864ecabac4b0e1db6f3b07eb":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","06054bbf4f2aaa2f864ecabac4b0e1db6f3b07eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9299079153fd7895bf3cf6835cf7019af2ba89b3":["203e3fcf513c02ee2c07015f2ce277e26dc60907","d9f7829b01acc3b2d4cad883060a0fbf544eaae1"],"203e3fcf513c02ee2c07015f2ce277e26dc60907":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d9f7829b01acc3b2d4cad883060a0fbf544eaae1":["203e3fcf513c02ee2c07015f2ce277e26dc60907"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}