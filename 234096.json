{"path":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          IndexFileNames.CSF_DATA_EXTENSION));\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            IndexFileNames.CSF_INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca","date":1289932456,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          IndexFileNames.CSF_DATA_EXTENSION));\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            IndexFileNames.CSF_INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          IndexFileNames.CSF_DATA_EXTENSION));\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            IndexFileNames.CSF_INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          IndexFileNames.CSF_DATA_EXTENSION));\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            IndexFileNames.CSF_INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85130289d2ed101fcc2d8798511c7c5b020ffab4","date":1297239859,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd04845a7e675e6eda07c4475e3f5ec15d5a2f94","date":1305894342,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      boolean success = false;\n      try {\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      boolean success = false;\n      try {\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      boolean success = false;\n      try {\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION), context);\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      boolean success = false;\n      try {\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION), context);\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      boolean success = false;\n      try {\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesReaderBase#BytesReaderBase(Directory,String,String,int,boolean).mjava","sourceNew":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex, IOContext context) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION), context);\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","sourceOld":"    protected BytesReaderBase(Directory dir, String id, String codecName,\n        int maxVersion, boolean doIndex) throws IOException {\n      this.id = id;\n      datIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      boolean success = false;\n      try {\n      version = CodecUtil.checkHeader(datIn, codecName, maxVersion, maxVersion);\n      if (doIndex) {\n        idxIn = dir.openInput(IndexFileNames.segmentFileName(id, \"\",\n            Writer.INDEX_EXTENSION));\n        final int version2 = CodecUtil.checkHeader(idxIn, codecName,\n            maxVersion, maxVersion);\n        assert version == version2;\n      } else {\n        idxIn = null;\n      }\n      success = true;\n      } finally {\n        if (!success) {\n          closeInternal();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["2d84736c4614acce6720851cbd2c823d7cd516e4","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["3ae97ad22c2ae646bfc1c09cab424cb07f9474ca"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dd04845a7e675e6eda07c4475e3f5ec15d5a2f94"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"dd04845a7e675e6eda07c4475e3f5ec15d5a2f94":["85130289d2ed101fcc2d8798511c7c5b020ffab4"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["2e8d7ba2175f47e280231533f7d3016249cea88b","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca":["01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc4c914be86e34b54f70023f45a60fa7f04e929"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["85130289d2ed101fcc2d8798511c7c5b020ffab4"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["3ae97ad22c2ae646bfc1c09cab424cb07f9474ca"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","ab5cb6a74aefb78aa0569857970b9151dfe2e787","01f60198ece724a6e96cd0b45f289cf42ff83d4f","2e8d7ba2175f47e280231533f7d3016249cea88b"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"dd04845a7e675e6eda07c4475e3f5ec15d5a2f94":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85130289d2ed101fcc2d8798511c7c5b020ffab4":["dd04845a7e675e6eda07c4475e3f5ec15d5a2f94"],"3ae97ad22c2ae646bfc1c09cab424cb07f9474ca":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}