{"path":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testFsyncDoesntCreateNewFiles().mjava","commits":[{"id":"0a8943eb15df4a89f924a7bcea7fec04688d304c","date":1397578332,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testFsyncDoesntCreateNewFiles().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testFsyncDoesntCreateNewFiles().mjava","sourceNew":"  // this test backdoors the directory via the filesystem. so it must actually use the filesystem\n  // TODO: somehow change this test to \n  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    File path = createTempDir(\"nocreate\");\n    Directory fsdir = getDirectory(path);\n    \n    // this test backdoors the directory via the filesystem. so it must be an FSDir (for now)\n    // TODO: figure a way to test this better/clean it up. E.g. we should be testing for FileSwitchDir,\n    // if its using two FSdirs and so on\n    if (fsdir instanceof FSDirectory == false) {\n      fsdir.close();\n      assumeTrue(\"test only works for FSDirectory subclasses\", false);\n    }\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    assertTrue(new File(path, \"afile\").delete());\n    \n    // directory is empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // directory is still empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","sourceOld":"  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    File path = createTempDir(\"nocreate\");\n    System.out.println(path.getAbsolutePath());\n    Directory fsdir = new SimpleFSDirectory(path);\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    assertTrue(new File(path, \"afile\").delete());\n    \n    // directory is empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // directory is still empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testFsyncDoesntCreateNewFiles().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testFsyncDoesntCreateNewFiles().mjava","sourceNew":"  // this test backdoors the directory via the filesystem. so it must actually use the filesystem\n  // TODO: somehow change this test to \n  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    File path = createTempDir(\"nocreate\");\n    Directory fsdir = getDirectory(path);\n    \n    // this test backdoors the directory via the filesystem. so it must be an FSDir (for now)\n    // TODO: figure a way to test this better/clean it up. E.g. we should be testing for FileSwitchDir,\n    // if its using two FSdirs and so on\n    if (fsdir instanceof FSDirectory == false) {\n      fsdir.close();\n      assumeTrue(\"test only works for FSDirectory subclasses\", false);\n    }\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    Files.delete(new File(path, \"afile\").toPath());\n    \n    // directory is empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // directory is still empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","sourceOld":"  // this test backdoors the directory via the filesystem. so it must actually use the filesystem\n  // TODO: somehow change this test to \n  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    File path = createTempDir(\"nocreate\");\n    Directory fsdir = getDirectory(path);\n    \n    // this test backdoors the directory via the filesystem. so it must be an FSDir (for now)\n    // TODO: figure a way to test this better/clean it up. E.g. we should be testing for FileSwitchDir,\n    // if its using two FSdirs and so on\n    if (fsdir instanceof FSDirectory == false) {\n      fsdir.close();\n      assumeTrue(\"test only works for FSDirectory subclasses\", false);\n    }\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    assertTrue(new File(path, \"afile\").delete());\n    \n    // directory is empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // directory is still empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","bugFix":["0a8943eb15df4a89f924a7bcea7fec04688d304c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testFsyncDoesntCreateNewFiles().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testFsyncDoesntCreateNewFiles().mjava","sourceNew":"  // this test backdoors the directory via the filesystem. so it must actually use the filesystem\n  // TODO: somehow change this test to \n  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    Path path = createTempDir(\"nocreate\");\n    Directory fsdir = getDirectory(path);\n    \n    // this test backdoors the directory via the filesystem. so it must be an FSDir (for now)\n    // TODO: figure a way to test this better/clean it up. E.g. we should be testing for FileSwitchDir,\n    // if its using two FSdirs and so on\n    if (fsdir instanceof FSDirectory == false) {\n      fsdir.close();\n      assumeTrue(\"test only works for FSDirectory subclasses\", false);\n    }\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    Files.delete(path.resolve(\"afile\"));\n    \n    // directory is empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // directory is still empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","sourceOld":"  // this test backdoors the directory via the filesystem. so it must actually use the filesystem\n  // TODO: somehow change this test to \n  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    File path = createTempDir(\"nocreate\");\n    Directory fsdir = getDirectory(path);\n    \n    // this test backdoors the directory via the filesystem. so it must be an FSDir (for now)\n    // TODO: figure a way to test this better/clean it up. E.g. we should be testing for FileSwitchDir,\n    // if its using two FSdirs and so on\n    if (fsdir instanceof FSDirectory == false) {\n      fsdir.close();\n      assumeTrue(\"test only works for FSDirectory subclasses\", false);\n    }\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    Files.delete(new File(path, \"afile\").toPath());\n    \n    // directory is empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // directory is still empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testFsyncDoesntCreateNewFiles().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testFsyncDoesntCreateNewFiles().mjava","sourceNew":"  // this test backdoors the directory via the filesystem. so it must actually use the filesystem\n  // TODO: somehow change this test to \n  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    Path path = createTempDir(\"nocreate\");\n    Directory fsdir = getDirectory(path);\n    \n    // this test backdoors the directory via the filesystem. so it must be an FSDir (for now)\n    // TODO: figure a way to test this better/clean it up. E.g. we should be testing for FileSwitchDir,\n    // if it's using two FSdirs and so on\n    if (fsdir instanceof FSDirectory == false) {\n      fsdir.close();\n      assumeTrue(\"test only works for FSDirectory subclasses\", false);\n    }\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    Files.delete(path.resolve(\"afile\"));\n    \n    // directory is empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // directory is still empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","sourceOld":"  // this test backdoors the directory via the filesystem. so it must actually use the filesystem\n  // TODO: somehow change this test to \n  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    Path path = createTempDir(\"nocreate\");\n    Directory fsdir = getDirectory(path);\n    \n    // this test backdoors the directory via the filesystem. so it must be an FSDir (for now)\n    // TODO: figure a way to test this better/clean it up. E.g. we should be testing for FileSwitchDir,\n    // if its using two FSdirs and so on\n    if (fsdir instanceof FSDirectory == false) {\n      fsdir.close();\n      assumeTrue(\"test only works for FSDirectory subclasses\", false);\n    }\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    Files.delete(path.resolve(\"afile\"));\n    \n    // directory is empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // directory is still empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22989c36ff05c657df26dd3377b37c9ad35859bc","date":1424477375,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testFsyncDoesntCreateNewFiles().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testFsyncDoesntCreateNewFiles().mjava","sourceNew":"  // this test backdoors the directory via the filesystem. so it must actually use the filesystem\n  // TODO: somehow change this test to \n  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    Path path = createTempDir(\"nocreate\");\n    Directory fsdir = getDirectory(path);\n    \n    // this test backdoors the directory via the filesystem. so it must be an FSDir (for now)\n    // TODO: figure a way to test this better/clean it up. E.g. we should be testing for FileSwitchDir,\n    // if it's using two FSdirs and so on\n    if (fsdir instanceof FSDirectory == false) {\n      fsdir.close();\n      assumeTrue(\"test only works for FSDirectory subclasses\", false);\n    }\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    Files.delete(path.resolve(\"afile\"));\n    \n    int fileCount = fsdir.listAll().length;\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // no new files created\n    assertEquals(fileCount, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","sourceOld":"  // this test backdoors the directory via the filesystem. so it must actually use the filesystem\n  // TODO: somehow change this test to \n  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    Path path = createTempDir(\"nocreate\");\n    Directory fsdir = getDirectory(path);\n    \n    // this test backdoors the directory via the filesystem. so it must be an FSDir (for now)\n    // TODO: figure a way to test this better/clean it up. E.g. we should be testing for FileSwitchDir,\n    // if it's using two FSdirs and so on\n    if (fsdir instanceof FSDirectory == false) {\n      fsdir.close();\n      assumeTrue(\"test only works for FSDirectory subclasses\", false);\n    }\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    Files.delete(path.resolve(\"afile\"));\n    \n    // directory is empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // directory is still empty\n    assertEquals(0, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testFsyncDoesntCreateNewFiles().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testFsyncDoesntCreateNewFiles().mjava","sourceNew":"  // this test backdoors the directory via the filesystem. so it must actually use the filesystem\n  // TODO: somehow change this test to \n  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    Path path = createTempDir(\"nocreate\");\n    assumeFalse(\"we directly delete files\", TestUtil.hasVirusChecker(path));\n    Directory fsdir = getDirectory(path);\n    \n    // this test backdoors the directory via the filesystem. so it must be an FSDir (for now)\n    // TODO: figure a way to test this better/clean it up. E.g. we should be testing for FileSwitchDir,\n    // if it's using two FSdirs and so on\n    if (fsdir instanceof FSDirectory == false) {\n      fsdir.close();\n      assumeTrue(\"test only works for FSDirectory subclasses\", false);\n    }\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    Files.delete(path.resolve(\"afile\"));\n    \n    int fileCount = fsdir.listAll().length;\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // no new files created\n    assertEquals(fileCount, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","sourceOld":"  // this test backdoors the directory via the filesystem. so it must actually use the filesystem\n  // TODO: somehow change this test to \n  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    Path path = createTempDir(\"nocreate\");\n    Directory fsdir = getDirectory(path);\n    \n    // this test backdoors the directory via the filesystem. so it must be an FSDir (for now)\n    // TODO: figure a way to test this better/clean it up. E.g. we should be testing for FileSwitchDir,\n    // if it's using two FSdirs and so on\n    if (fsdir instanceof FSDirectory == false) {\n      fsdir.close();\n      assumeTrue(\"test only works for FSDirectory subclasses\", false);\n    }\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    Files.delete(path.resolve(\"afile\"));\n    \n    int fileCount = fsdir.listAll().length;\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // no new files created\n    assertEquals(fileCount, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34d6426cef006e0c3625cabe7a7ec1c2b08bc501","date":1454683374,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testFsyncDoesntCreateNewFiles().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testFsyncDoesntCreateNewFiles().mjava","sourceNew":"  // this test backdoors the directory via the filesystem. so it must actually use the filesystem\n  // TODO: somehow change this test to \n  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    Path path = createTempDir(\"nocreate\");\n    Directory fsdir = getDirectory(path);\n    \n    // this test backdoors the directory via the filesystem. so it must be an FSDir (for now)\n    // TODO: figure a way to test this better/clean it up. E.g. we should be testing for FileSwitchDir,\n    // if it's using two FSdirs and so on\n    if (fsdir instanceof FSDirectory == false) {\n      fsdir.close();\n      assumeTrue(\"test only works for FSDirectory subclasses\", false);\n    }\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    Files.delete(path.resolve(\"afile\"));\n    \n    int fileCount = fsdir.listAll().length;\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // no new files created\n    assertEquals(fileCount, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","sourceOld":"  // this test backdoors the directory via the filesystem. so it must actually use the filesystem\n  // TODO: somehow change this test to \n  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    Path path = createTempDir(\"nocreate\");\n    assumeFalse(\"we directly delete files\", TestUtil.hasVirusChecker(path));\n    Directory fsdir = getDirectory(path);\n    \n    // this test backdoors the directory via the filesystem. so it must be an FSDir (for now)\n    // TODO: figure a way to test this better/clean it up. E.g. we should be testing for FileSwitchDir,\n    // if it's using two FSdirs and so on\n    if (fsdir instanceof FSDirectory == false) {\n      fsdir.close();\n      assumeTrue(\"test only works for FSDirectory subclasses\", false);\n    }\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    Files.delete(path.resolve(\"afile\"));\n    \n    int fileCount = fsdir.listAll().length;\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // no new files created\n    assertEquals(fileCount, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3adea0022cffaaa592081efed775a7b8bf86b51","date":1532414870,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testFsyncDoesntCreateNewFiles().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testFsyncDoesntCreateNewFiles().mjava","sourceNew":"  // this test backdoors the directory via the filesystem. so it must actually use the filesystem\n  // TODO: somehow change this test to\n  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    Path path = createTempDir(\"nocreate\");\n    try (Directory fsdir = getDirectory(path)) {\n      // this test backdoors the directory via the filesystem. so it must be an FSDir (for now)\n      // TODO: figure a way to test this better/clean it up. E.g. we should be testing for FileSwitchDir,\n      // if it's using two FSdirs and so on\n      if (fsdir instanceof FSDirectory == false) {\n        assumeTrue(\"test only works for FSDirectory subclasses\", false);\n        return;\n      }\n\n      // create a file\n      IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n      out.writeString(\"boo\");\n      out.close();\n\n      // delete it in the file system.\n      Files.delete(path.resolve(\"afile\"));\n\n      int fileCount = fsdir.listAll().length;\n\n      // fsync it\n      expectThrowsAnyOf(Arrays.asList(FileNotFoundException.class, NoSuchFileException.class), () -> {\n        fsdir.sync(Collections.singleton(\"afile\"));\n      });\n\n      // no new files created\n      assertEquals(fileCount, fsdir.listAll().length);\n    }\n  }\n\n","sourceOld":"  // this test backdoors the directory via the filesystem. so it must actually use the filesystem\n  // TODO: somehow change this test to \n  public void testFsyncDoesntCreateNewFiles() throws Exception {\n    Path path = createTempDir(\"nocreate\");\n    Directory fsdir = getDirectory(path);\n    \n    // this test backdoors the directory via the filesystem. so it must be an FSDir (for now)\n    // TODO: figure a way to test this better/clean it up. E.g. we should be testing for FileSwitchDir,\n    // if it's using two FSdirs and so on\n    if (fsdir instanceof FSDirectory == false) {\n      fsdir.close();\n      assumeTrue(\"test only works for FSDirectory subclasses\", false);\n    }\n    \n    // write a file\n    IndexOutput out = fsdir.createOutput(\"afile\", newIOContext(random()));\n    out.writeString(\"boo\");\n    out.close();\n    \n    // delete it\n    Files.delete(path.resolve(\"afile\"));\n    \n    int fileCount = fsdir.listAll().length;\n    \n    // fsync it\n    try {\n      fsdir.sync(Collections.singleton(\"afile\"));\n      fail(\"didn't get expected exception, instead fsync created new files: \" + Arrays.asList(fsdir.listAll()));\n    } catch (FileNotFoundException | NoSuchFileException expected) {\n      // ok\n    }\n    \n    // no new files created\n    assertEquals(fileCount, fsdir.listAll().length);\n    \n    fsdir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":["6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["f4abec28b874149a7223e32cc7a01704c27790de"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["0a8943eb15df4a89f924a7bcea7fec04688d304c"],"0a8943eb15df4a89f924a7bcea7fec04688d304c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["22989c36ff05c657df26dd3377b37c9ad35859bc"],"22989c36ff05c657df26dd3377b37c9ad35859bc":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["22989c36ff05c657df26dd3377b37c9ad35859bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f3adea0022cffaaa592081efed775a7b8bf86b51"]},"commit2Childs":{"34d6426cef006e0c3625cabe7a7ec1c2b08bc501":[],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["22989c36ff05c657df26dd3377b37c9ad35859bc"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"0a8943eb15df4a89f924a7bcea7fec04688d304c":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0a8943eb15df4a89f924a7bcea7fec04688d304c"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501"],"22989c36ff05c657df26dd3377b37c9ad35859bc":["6bfe104fc023fadc9e709f8d17403d2cc61133fe","f3adea0022cffaaa592081efed775a7b8bf86b51"],"f4abec28b874149a7223e32cc7a01704c27790de":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"f3adea0022cffaaa592081efed775a7b8bf86b51":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["34d6426cef006e0c3625cabe7a7ec1c2b08bc501","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}