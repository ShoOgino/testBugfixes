{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimUtils#testV2toV1().mjava","commits":[{"id":"50ce15cb737e3db969ee4cd3448b78e7d3edeb9e","date":1577970174,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimUtils#testV2toV1().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testV2toV1() throws Exception {\n    // valid patterns\n\n    V2Request req = new V2Request.Builder(\"/c/myCollection\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'add-replica':{'shard':'shard2','node':'node1:1234','type':'TLOG'}}\")\n        .withParams(params(\"foo\", \"bar\"))\n        .build();\n    SolrParams params = SimUtils.v2AdminRequestToV1Params(req);\n    assertEquals(\"/admin/collections\", params.get(\"path\"));\n    assertEquals(\"myCollection\", params.get(\"collection\"));\n    assertEquals(\"bar\", params.get(\"foo\"));\n    assertEquals(\"addreplica\", params.get(\"action\"));\n    assertEquals(\"shard2\", params.get(\"shard\"));\n    assertEquals(\"node1:1234\", params.get(\"node\"));\n    assertEquals(\"TLOG\", params.get(\"type\"));\n\n    req = new V2Request.Builder(\"/c/myCollection/shards/shard1\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'add-replica':{'shard':'shard2','node':'node1:1234','type':'TLOG'}}\")\n        .build();\n    params = SimUtils.v2AdminRequestToV1Params(req);\n    assertEquals(\"/admin/collections\", params.get(\"path\"));\n    assertEquals(\"myCollection\", params.get(\"collection\"));\n    // XXX should path parameters override the payload, or the other way around?\n    assertEquals(\"shard1\", params.get(\"shard\"));\n\n    req = new V2Request.Builder(\"/c/myCollection/shards/shard1/core_node5\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'deletereplica':{}}\")\n        .build();\n    params = SimUtils.v2AdminRequestToV1Params(req);\n    assertEquals(\"/admin/collections\", params.get(\"path\"));\n    assertEquals(\"myCollection\", params.get(\"collection\"));\n    // XXX should path parameters override the payload, or the other way around?\n    assertEquals(\"shard1\", params.get(\"shard\"));\n    assertEquals(\"core_node5\", params.get(\"replica\"));\n\n    // invalid patterns\n    req = new V2Request.Builder(\"/invalid/myCollection\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'add-replica':{'shard':'shard2','node':'node1:1234','type':'TLOG'}}\")\n        .withParams(params(\"foo\", \"bar\"))\n        .build();\n    try {\n      params = SimUtils.v2AdminRequestToV1Params(req);\n    } catch (UnsupportedOperationException e) {\n      // expected\n      assertTrue(e.toString(), e.toString().contains(\"request path\"));\n    }\n\n    req = new V2Request.Builder(\"/collections/myCollection/foobar/xyz\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'add-replica':{'shard':'shard2','node':'node1:1234','type':'TLOG'}}\")\n        .withParams(params(\"foo\", \"bar\"))\n        .build();\n    try {\n      params = SimUtils.v2AdminRequestToV1Params(req);\n    } catch (UnsupportedOperationException e) {\n      // expected\n      assertTrue(e.toString(), e.toString().contains(\"expected 'shards'\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"827159ea3e2a111ecec6b5659336e7f09131e18a","date":1578045775,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimUtils#testV2toV1().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testV2toV1() throws Exception {\n    // valid patterns\n\n    V2Request req = new V2Request.Builder(\"/c/myCollection\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'add-replica':{'shard':'shard2','node':'node1:1234','type':'TLOG'}}\")\n        .withParams(params(\"foo\", \"bar\"))\n        .build();\n    SolrParams params = SimUtils.v2AdminRequestToV1Params(req);\n    assertEquals(\"/admin/collections\", params.get(\"path\"));\n    assertEquals(\"myCollection\", params.get(\"collection\"));\n    assertEquals(\"bar\", params.get(\"foo\"));\n    assertEquals(\"addreplica\", params.get(\"action\"));\n    assertEquals(\"shard2\", params.get(\"shard\"));\n    assertEquals(\"node1:1234\", params.get(\"node\"));\n    assertEquals(\"TLOG\", params.get(\"type\"));\n\n    req = new V2Request.Builder(\"/c/myCollection/shards/shard1\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'add-replica':{'shard':'shard2','node':'node1:1234','type':'TLOG'}}\")\n        .build();\n    params = SimUtils.v2AdminRequestToV1Params(req);\n    assertEquals(\"/admin/collections\", params.get(\"path\"));\n    assertEquals(\"myCollection\", params.get(\"collection\"));\n    // XXX should path parameters override the payload, or the other way around?\n    assertEquals(\"shard1\", params.get(\"shard\"));\n\n    req = new V2Request.Builder(\"/c/myCollection/shards/shard1/core_node5\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'deletereplica':{}}\")\n        .build();\n    params = SimUtils.v2AdminRequestToV1Params(req);\n    assertEquals(\"/admin/collections\", params.get(\"path\"));\n    assertEquals(\"myCollection\", params.get(\"collection\"));\n    // XXX should path parameters override the payload, or the other way around?\n    assertEquals(\"shard1\", params.get(\"shard\"));\n    assertEquals(\"core_node5\", params.get(\"replica\"));\n\n    // invalid patterns\n    req = new V2Request.Builder(\"/invalid/myCollection\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'add-replica':{'shard':'shard2','node':'node1:1234','type':'TLOG'}}\")\n        .withParams(params(\"foo\", \"bar\"))\n        .build();\n    try {\n      params = SimUtils.v2AdminRequestToV1Params(req);\n    } catch (UnsupportedOperationException e) {\n      // expected\n      assertTrue(e.toString(), e.toString().contains(\"request path\"));\n    }\n\n    req = new V2Request.Builder(\"/collections/myCollection/foobar/xyz\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'add-replica':{'shard':'shard2','node':'node1:1234','type':'TLOG'}}\")\n        .withParams(params(\"foo\", \"bar\"))\n        .build();\n    try {\n      params = SimUtils.v2AdminRequestToV1Params(req);\n    } catch (UnsupportedOperationException e) {\n      // expected\n      assertTrue(e.toString(), e.toString().contains(\"expected 'shards'\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimUtils#testV2toV1().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testV2toV1() throws Exception {\n    // valid patterns\n\n    V2Request req = new V2Request.Builder(\"/c/myCollection\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'add-replica':{'shard':'shard2','node':'node1:1234','type':'TLOG'}}\")\n        .withParams(params(\"foo\", \"bar\"))\n        .build();\n    SolrParams params = SimUtils.v2AdminRequestToV1Params(req);\n    assertEquals(\"/admin/collections\", params.get(\"path\"));\n    assertEquals(\"myCollection\", params.get(\"collection\"));\n    assertEquals(\"bar\", params.get(\"foo\"));\n    assertEquals(\"addreplica\", params.get(\"action\"));\n    assertEquals(\"shard2\", params.get(\"shard\"));\n    assertEquals(\"node1:1234\", params.get(\"node\"));\n    assertEquals(\"TLOG\", params.get(\"type\"));\n\n    req = new V2Request.Builder(\"/c/myCollection/shards/shard1\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'add-replica':{'shard':'shard2','node':'node1:1234','type':'TLOG'}}\")\n        .build();\n    params = SimUtils.v2AdminRequestToV1Params(req);\n    assertEquals(\"/admin/collections\", params.get(\"path\"));\n    assertEquals(\"myCollection\", params.get(\"collection\"));\n    // XXX should path parameters override the payload, or the other way around?\n    assertEquals(\"shard1\", params.get(\"shard\"));\n\n    req = new V2Request.Builder(\"/c/myCollection/shards/shard1/core_node5\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'deletereplica':{}}\")\n        .build();\n    params = SimUtils.v2AdminRequestToV1Params(req);\n    assertEquals(\"/admin/collections\", params.get(\"path\"));\n    assertEquals(\"myCollection\", params.get(\"collection\"));\n    // XXX should path parameters override the payload, or the other way around?\n    assertEquals(\"shard1\", params.get(\"shard\"));\n    assertEquals(\"core_node5\", params.get(\"replica\"));\n\n    // invalid patterns\n    req = new V2Request.Builder(\"/invalid/myCollection\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'add-replica':{'shard':'shard2','node':'node1:1234','type':'TLOG'}}\")\n        .withParams(params(\"foo\", \"bar\"))\n        .build();\n    try {\n      params = SimUtils.v2AdminRequestToV1Params(req);\n    } catch (UnsupportedOperationException e) {\n      // expected\n      assertTrue(e.toString(), e.toString().contains(\"request path\"));\n    }\n\n    req = new V2Request.Builder(\"/collections/myCollection/foobar/xyz\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{'add-replica':{'shard':'shard2','node':'node1:1234','type':'TLOG'}}\")\n        .withParams(params(\"foo\", \"bar\"))\n        .build();\n    try {\n      params = SimUtils.v2AdminRequestToV1Params(req);\n    } catch (UnsupportedOperationException e) {\n      // expected\n      assertTrue(e.toString(), e.toString().contains(\"expected 'shards'\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f504512a03d978990cbff30db0522b354e846db":["50ce15cb737e3db969ee4cd3448b78e7d3edeb9e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"50ce15cb737e3db969ee4cd3448b78e7d3edeb9e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"827159ea3e2a111ecec6b5659336e7f09131e18a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","50ce15cb737e3db969ee4cd3448b78e7d3edeb9e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["50ce15cb737e3db969ee4cd3448b78e7d3edeb9e","827159ea3e2a111ecec6b5659336e7f09131e18a"],"50ce15cb737e3db969ee4cd3448b78e7d3edeb9e":["3f504512a03d978990cbff30db0522b354e846db","827159ea3e2a111ecec6b5659336e7f09131e18a"],"827159ea3e2a111ecec6b5659336e7f09131e18a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["827159ea3e2a111ecec6b5659336e7f09131e18a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}