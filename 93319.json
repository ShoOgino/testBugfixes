{"path":"backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","pathOld":"/dev/null","sourceNew":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepNoneOnInitDeletionPolicy policy = new KeepNoneOnInitDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = IndexReader.open(dir, true);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepNoneOnInitDeletionPolicy().mjava","sourceNew":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepNoneOnInitDeletionPolicy policy = new KeepNoneOnInitDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = IndexReader.open(dir, true);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /* Test keeping NO commit points.  This is a viable and\n   * useful case eg where you want to build a big index and\n   * you know there are no readers.\n   */\n  public void testKeepNoneOnInitDeletionPolicy() throws IOException {\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepNoneOnInitDeletionPolicy policy = new KeepNoneOnInitDeletionPolicy();\n\n      Directory dir = new RAMDirectory();\n\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setMaxBufferedDocs(10);\n      writer.setUseCompoundFile(useCompoundFile);\n      for(int i=0;i<107;i++) {\n        addDoc(writer);\n      }\n      writer.close();\n\n      writer = new IndexWriter(dir, new WhitespaceAnalyzer(), false, policy, IndexWriter.MaxFieldLength.UNLIMITED);\n      writer.setUseCompoundFile(useCompoundFile);\n      writer.optimize();\n      writer.close();\n\n      assertEquals(2, policy.numOnInit);\n      // If we are not auto committing then there should\n      // be exactly 2 commits (one per close above):\n      assertEquals(2, policy.numOnCommit);\n\n      // Simplistic check: just verify the index is in fact\n      // readable:\n      IndexReader reader = IndexReader.open(dir, true);\n      reader.close();\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}