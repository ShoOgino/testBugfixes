{"path":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#doBefore().mjava","commits":[{"id":"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691","date":1516909549,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#doBefore().mjava","pathOld":"/dev/null","sourceNew":"  @Before\n  public void doBefore() throws Exception {\n    solrClient = getCloudSolrClient(cluster);\n    httpClient = (CloseableHttpClient) solrClient.getHttpClient();\n    // delete aliases first since they refer to the collections\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    //TODO create an API to delete collections attached to the routed alias when the alias is removed\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(aliases -> {\n      Aliases a = zkStateReader.getAliases();\n      for (String alias : a.getCollectionAliasMap().keySet()) {\n        a = a.cloneWithCollectionAlias(alias,null); // remove\n      }\n      return a;\n    });\n    cluster.deleteAllCollections();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fdecc956246aa010f419a5369fc8a285b9d87e3","date":1517892347,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#doBefore().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#doBefore().mjava","sourceNew":"  @Before\n  public void doBefore() throws Exception {\n    solrClient = getCloudSolrClient(cluster);\n    httpClient = (CloseableHttpClient) solrClient.getHttpClient();\n    // delete aliases first since they refer to the collections\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    //TODO create an API to delete collections attached to the routed alias when the alias is removed\n    zkStateReader.aliasesHolder.update();// ensure we're seeing the latest\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(aliases -> {\n      Aliases a = zkStateReader.getAliases();\n      for (String alias : a.getCollectionAliasMap().keySet()) {\n        a = a.cloneWithCollectionAlias(alias,null); // remove\n      }\n      return a;\n    });\n    cluster.deleteAllCollections();\n  }\n\n","sourceOld":"  @Before\n  public void doBefore() throws Exception {\n    solrClient = getCloudSolrClient(cluster);\n    httpClient = (CloseableHttpClient) solrClient.getHttpClient();\n    // delete aliases first since they refer to the collections\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    //TODO create an API to delete collections attached to the routed alias when the alias is removed\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(aliases -> {\n      Aliases a = zkStateReader.getAliases();\n      for (String alias : a.getCollectionAliasMap().keySet()) {\n        a = a.cloneWithCollectionAlias(alias,null); // remove\n      }\n      return a;\n    });\n    cluster.deleteAllCollections();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cbd743a4843f513f793670e3ab0e272bf824faf","date":1518149529,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#doBefore().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#doBefore().mjava","sourceNew":"  @Before\n  public void doBefore() throws Exception {\n    solrClient = getCloudSolrClient(cluster);\n    httpClient = (CloseableHttpClient) solrClient.getHttpClient();\n    // delete aliases first since they refer to the collections\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    //TODO create an API to delete collections attached to the routed alias when the alias is removed\n    zkStateReader.aliasesManager.update();// ensure we're seeing the latest\n    zkStateReader.aliasesManager.applyModificationAndExportToZk(aliases -> {\n      Aliases a = zkStateReader.getAliases();\n      for (String alias : a.getCollectionAliasMap().keySet()) {\n        a = a.cloneWithCollectionAlias(alias,null); // remove\n      }\n      return a;\n    });\n    cluster.deleteAllCollections();\n  }\n\n","sourceOld":"  @Before\n  public void doBefore() throws Exception {\n    solrClient = getCloudSolrClient(cluster);\n    httpClient = (CloseableHttpClient) solrClient.getHttpClient();\n    // delete aliases first since they refer to the collections\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    //TODO create an API to delete collections attached to the routed alias when the alias is removed\n    zkStateReader.aliasesHolder.update();// ensure we're seeing the latest\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(aliases -> {\n      Aliases a = zkStateReader.getAliases();\n      for (String alias : a.getCollectionAliasMap().keySet()) {\n        a = a.cloneWithCollectionAlias(alias,null); // remove\n      }\n      return a;\n    });\n    cluster.deleteAllCollections();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db3a95645baea7e03cf8ae62147cba606639004e","date":1525745850,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#doBefore().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CreateRoutedAliasTest#doBefore().mjava","sourceNew":"  @Before\n  public void doBefore() throws Exception {\n    solrClient = getCloudSolrClient(cluster);\n  }\n\n","sourceOld":"  @Before\n  public void doBefore() throws Exception {\n    solrClient = getCloudSolrClient(cluster);\n    httpClient = (CloseableHttpClient) solrClient.getHttpClient();\n    // delete aliases first since they refer to the collections\n    ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    //TODO create an API to delete collections attached to the routed alias when the alias is removed\n    zkStateReader.aliasesManager.update();// ensure we're seeing the latest\n    zkStateReader.aliasesManager.applyModificationAndExportToZk(aliases -> {\n      Aliases a = zkStateReader.getAliases();\n      for (String alias : a.getCollectionAliasMap().keySet()) {\n        a = a.cloneWithCollectionAlias(alias,null); // remove\n      }\n      return a;\n    });\n    cluster.deleteAllCollections();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cbd743a4843f513f793670e3ab0e272bf824faf":["3fdecc956246aa010f419a5369fc8a285b9d87e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db3a95645baea7e03cf8ae62147cba606639004e":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"3fdecc956246aa010f419a5369fc8a285b9d87e3":["6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691"],"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db3a95645baea7e03cf8ae62147cba606639004e"]},"commit2Childs":{"3cbd743a4843f513f793670e3ab0e272bf824faf":["db3a95645baea7e03cf8ae62147cba606639004e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691"],"db3a95645baea7e03cf8ae62147cba606639004e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fdecc956246aa010f419a5369fc8a285b9d87e3":["3cbd743a4843f513f793670e3ab0e272bf824faf"],"6857f8205f8c5b4ff39a54d8aebb4fdfb7cfb691":["3fdecc956246aa010f419a5369fc8a285b9d87e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}