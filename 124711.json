{"path":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","commits":[{"id":"feb75c13cdf6b27b36407e4b15b35cf3142ab619","date":1310465075,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,JmxConfiguration).mjava","sourceNew":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        LOG.info(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      LOG.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        LOG.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","sourceOld":"  public JmxMonitoredMap(final String coreName, \n                         final JmxConfiguration jmxConfig) {\n    jmxRootName = (null != jmxConfig.rootName ? \n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        LOG.info(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      LOG.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        LOG.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4290ddfa982b6cadf2103ead2a0a3d0ec899da85","date":1346331246,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","sourceNew":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this(coreName, coreHashCode, jmxConfig, null);\n  }\n\n","sourceOld":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        LOG.info(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      LOG.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        LOG.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f91ea59ad86660fb3d24fde452cf98e48fcdee3","date":1346344320,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","sourceNew":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        LOG.info(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      LOG.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        LOG.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","sourceOld":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this(coreName, coreHashCode, jmxConfig, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","sourceNew":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        log.debug(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      log.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        log.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","sourceOld":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        LOG.info(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      LOG.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        LOG.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","sourceNew":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        log.debug(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      log.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        log.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","sourceOld":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        LOG.info(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      LOG.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        LOG.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","sourceNew":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        log.debug(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      log.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        log.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","sourceOld":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        LOG.info(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      LOG.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        LOG.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","sourceNew":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        log.debug(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      log.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        log.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","sourceOld":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        LOG.info(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      LOG.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        LOG.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b10b88c8af8835e23b0d566418ef8397a7bb8ed","date":1484223252,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","sourceNew":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        server = null;\n        registryName = null;\n        nameFactory = null;\n        log.debug(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      log.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      MBeanServer newServer = null;\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        newServer = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, newServer);\n        connector.start();\n        log.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n      server = newServer;\n    }\n    registryName = SolrCoreMetricManager.createRegistryName(null, coreName);\n    nameFactory = new JmxObjectNameFactory(REPORTER_NAME + coreHashCode, registryName);\n  }\n\n","sourceOld":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        log.debug(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      log.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        log.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","sourceNew":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        server = null;\n        registryName = null;\n        nameFactory = null;\n        log.debug(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      log.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      MBeanServer newServer = null;\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        newServer = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, newServer);\n        connector.start();\n        log.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n      server = newServer;\n    }\n    registryName = SolrCoreMetricManager.createRegistryName(null, coreName);\n    nameFactory = new JmxObjectNameFactory(REPORTER_NAME + coreHashCode, registryName);\n  }\n\n","sourceOld":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        log.debug(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      log.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        server = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, server);\n        connector.start();\n        log.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        server = null;\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,String,JmxConfiguration).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JmxMonitoredMap#JmxMonitoredMap(String,String,JmxConfiguration).mjava","sourceNew":"  public JmxMonitoredMap(String coreName, String coreHashCode, String registryName,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    this.registryName = registryName;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        server = null;\n        nameFactory = null;\n        log.debug(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      log.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      MBeanServer newServer = null;\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        newServer = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, newServer);\n        connector.start();\n        log.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n      server = newServer;\n    }\n    nameFactory = new JmxObjectNameFactory(REPORTER_NAME + coreHashCode, registryName);\n  }\n\n","sourceOld":"  public JmxMonitoredMap(String coreName, String coreHashCode,\n                         final JmxConfiguration jmxConfig) {\n    this.coreHashCode = coreHashCode;\n    jmxRootName = (null != jmxConfig.rootName ?\n                   jmxConfig.rootName\n                   : (\"solr\" + (null != coreName ? \"/\" + coreName : \"\")));\n      \n    if (jmxConfig.serviceUrl == null) {\n      List<MBeanServer> servers = null;\n\n      if (jmxConfig.agentId == null) {\n        // Try to find the first MBeanServer\n        servers = MBeanServerFactory.findMBeanServer(null);\n      } else if (jmxConfig.agentId != null) {\n        // Try to find the first MBean server with the given agentId\n        servers = MBeanServerFactory.findMBeanServer(jmxConfig.agentId);\n        // throw Exception if no servers were found with the given agentId\n        if (servers == null || servers.isEmpty())\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"No JMX Servers found with agentId: \" + jmxConfig.agentId);\n      }\n\n      if (servers == null || servers.isEmpty()) {\n        server = null;\n        registryName = null;\n        nameFactory = null;\n        log.debug(\"No JMX servers found, not exposing Solr information with JMX.\");\n        return;\n      }\n      server = servers.get(0);\n      log.info(\"JMX monitoring is enabled. Adding Solr mbeans to JMX Server: \"\n               + server);\n    } else {\n      MBeanServer newServer = null;\n      try {\n        // Create a new MBeanServer with the given serviceUrl\n        newServer = MBeanServerFactory.newMBeanServer();\n        JMXConnectorServer connector = JMXConnectorServerFactory\n                .newJMXConnectorServer(new JMXServiceURL(jmxConfig.serviceUrl),\n                        null, newServer);\n        connector.start();\n        log.info(\"JMX monitoring is enabled at \" + jmxConfig.serviceUrl);\n      } catch (Exception e) {\n        // Release the reference\n        throw new RuntimeException(\"Could not start JMX monitoring \", e);\n      }\n      server = newServer;\n    }\n    registryName = SolrCoreMetricManager.createRegistryName(null, coreName);\n    nameFactory = new JmxObjectNameFactory(REPORTER_NAME + coreHashCode, registryName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4290ddfa982b6cadf2103ead2a0a3d0ec899da85":["feb75c13cdf6b27b36407e4b15b35cf3142ab619"],"feb75c13cdf6b27b36407e4b15b35cf3142ab619":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"126d6ad24eed13163ba0959435d5a80e5672837c":["7f91ea59ad86660fb3d24fde452cf98e48fcdee3","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7f91ea59ad86660fb3d24fde452cf98e48fcdee3","126d6ad24eed13163ba0959435d5a80e5672837c"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9b10b88c8af8835e23b0d566418ef8397a7bb8ed"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["7f91ea59ad86660fb3d24fde452cf98e48fcdee3"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7f91ea59ad86660fb3d24fde452cf98e48fcdee3","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"7f91ea59ad86660fb3d24fde452cf98e48fcdee3":["4290ddfa982b6cadf2103ead2a0a3d0ec899da85"]},"commit2Childs":{"4290ddfa982b6cadf2103ead2a0a3d0ec899da85":["7f91ea59ad86660fb3d24fde452cf98e48fcdee3"],"feb75c13cdf6b27b36407e4b15b35cf3142ab619":["4290ddfa982b6cadf2103ead2a0a3d0ec899da85"],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9b10b88c8af8835e23b0d566418ef8397a7bb8ed":["073f1aa70444ec64f3e216816af2a3b43fa38fe7","09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["feb75c13cdf6b27b36407e4b15b35cf3142ab619"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9b10b88c8af8835e23b0d566418ef8397a7bb8ed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7"],"7f91ea59ad86660fb3d24fde452cf98e48fcdee3":["126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}