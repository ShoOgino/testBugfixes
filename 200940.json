{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","commits":[{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    for(BytesRef v : values) {\n      final int length = v == null ? 0 : v.length;\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    for(BytesRef v : values) {\n      final int length = v == null ? 0 : v.length;\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a7bf5332d569e3d07c4b248462f5d212e26e9af","date":1376929683,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    for(BytesRef v : values) {\n      final int length = v == null ? 0 : v.length;\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/diskdv/DiskDocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(DiskDocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    for(BytesRef v : values) {\n      minLength = Math.min(minLength, v.length);\n      maxLength = Math.max(maxLength, v.length);\n      data.writeBytes(v.bytes, v.offset, v.length);\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        addr += v.length;\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0106fc8bd579fa78caf3372887b2d50907b5635","date":1402916839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    checkCanWrite(field);\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    checkCanWrite(field);\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    checkCanWrite(field);\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    checkCanWrite(field);\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    checkCanWrite(field);\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    checkCanWrite(field);\n    // write the byte[] data\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.BINARY);\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    final long startFP = data.getFilePointer();\n    long count = 0;\n    boolean missing = false;\n    for(BytesRef v : values) {\n      final int length;\n      if (v == null) {\n        length = 0;\n        missing = true;\n      } else {\n        length = v.length;\n      }\n      minLength = Math.min(minLength, length);\n      maxLength = Math.max(maxLength, length);\n      if (v != null) {\n        data.writeBytes(v.bytes, v.offset, v.length);\n      }\n      count++;\n    }\n    meta.writeVInt(minLength == maxLength ? BINARY_FIXED_UNCOMPRESSED : BINARY_VARIABLE_UNCOMPRESSED);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(minLength);\n    meta.writeVInt(maxLength);\n    meta.writeVLong(count);\n    meta.writeLong(startFP);\n    \n    // if minLength == maxLength, its a fixed-length byte[], we are done (the addresses are implicit)\n    // otherwise, we need to record the length fields...\n    if (minLength != maxLength) {\n      meta.writeLong(data.getFilePointer());\n      meta.writeVInt(PackedInts.VERSION_CURRENT);\n      meta.writeVInt(BLOCK_SIZE);\n\n      final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n      long addr = 0;\n      for (BytesRef v : values) {\n        if (v != null) {\n          addr += v.length;\n        }\n        writer.add(addr);\n      }\n      writer.finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11a746437bc5c0a0b3df0337ed249c387c812871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["f0106fc8bd579fa78caf3372887b2d50907b5635"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["11a746437bc5c0a0b3df0337ed249c387c812871"],"f0106fc8bd579fa78caf3372887b2d50907b5635":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","f0106fc8bd579fa78caf3372887b2d50907b5635"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["f0106fc8bd579fa78caf3372887b2d50907b5635","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"11a746437bc5c0a0b3df0337ed249c387c812871":["1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11a746437bc5c0a0b3df0337ed249c387c812871","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","f0106fc8bd579fa78caf3372887b2d50907b5635","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"f0106fc8bd579fa78caf3372887b2d50907b5635":["4cc45c615dbb82bf79d5f9550286098367874fbf","c6f080a2ab37c464dd98db173f6cbf10dc74f211","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}