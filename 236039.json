{"path":"lucene/backwards/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#test().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#test().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#test().mjava","sourceNew":"  public void test() throws IOException {\n    PayloadNearQuery query;\n    TopDocs hits;\n\n    query = newPhraseQuery(\"field\", \"twenty two\", true);\n    QueryUtils.check(query);\n\t\t\n    // all 10 hits should have score = 3 because adjacent terms have payloads of 2,4\n    // and all the similarity factors are set to 1\n    hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"should be 10 hits\", hits.totalHits == 10);\n    for (int j = 0; j < hits.scoreDocs.length; j++) {\n      ScoreDoc doc = hits.scoreDocs[j];\n      assertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n    }\n    for (int i=1;i<10;i++) {\n      query = newPhraseQuery(\"field\", English.intToEnglish(i)+\" hundred\", true);\n      // all should have score = 3 because adjacent terms have payloads of 2,4\n      // and all the similarity factors are set to 1\n      hits = searcher.search(query, null, 100);\n      assertTrue(\"hits is null and it shouldn't be\", hits != null);\n      assertTrue(\"should be 100 hits\", hits.totalHits == 100);\n      for (int j = 0; j < hits.scoreDocs.length; j++) {\n        ScoreDoc doc = hits.scoreDocs[j];\n        //\t\t\t\tSystem.out.println(\"Doc: \" + doc.toString());\n        //\t\t\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n        assertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n      }\n    }\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    PayloadNearQuery query;\n    TopDocs hits;\n\n    query = newPhraseQuery(\"field\", \"twenty two\", true);\n    QueryUtils.check(query);\n\t\t\n    // all 10 hits should have score = 3 because adjacent terms have payloads of 2,4\n    // and all the similarity factors are set to 1\n    hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"should be 10 hits\", hits.totalHits == 10);\n    for (int j = 0; j < hits.scoreDocs.length; j++) {\n      ScoreDoc doc = hits.scoreDocs[j];\n      assertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n    }\n    for (int i=1;i<10;i++) {\n      query = newPhraseQuery(\"field\", English.intToEnglish(i)+\" hundred\", true);\n      // all should have score = 3 because adjacent terms have payloads of 2,4\n      // and all the similarity factors are set to 1\n      hits = searcher.search(query, null, 100);\n      assertTrue(\"hits is null and it shouldn't be\", hits != null);\n      assertTrue(\"should be 100 hits\", hits.totalHits == 100);\n      for (int j = 0; j < hits.scoreDocs.length; j++) {\n        ScoreDoc doc = hits.scoreDocs[j];\n        //\t\t\t\tSystem.out.println(\"Doc: \" + doc.toString());\n        //\t\t\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n        assertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery#test().mjava","sourceNew":null,"sourceOld":"  public void test() throws IOException {\n    PayloadNearQuery query;\n    TopDocs hits;\n\n    query = newPhraseQuery(\"field\", \"twenty two\", true);\n    QueryUtils.check(query);\n\t\t\n    // all 10 hits should have score = 3 because adjacent terms have payloads of 2,4\n    // and all the similarity factors are set to 1\n    hits = searcher.search(query, null, 100);\n    assertTrue(\"hits is null and it shouldn't be\", hits != null);\n    assertTrue(\"should be 10 hits\", hits.totalHits == 10);\n    for (int j = 0; j < hits.scoreDocs.length; j++) {\n      ScoreDoc doc = hits.scoreDocs[j];\n      assertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n    }\n    for (int i=1;i<10;i++) {\n      query = newPhraseQuery(\"field\", English.intToEnglish(i)+\" hundred\", true);\n      // all should have score = 3 because adjacent terms have payloads of 2,4\n      // and all the similarity factors are set to 1\n      hits = searcher.search(query, null, 100);\n      assertTrue(\"hits is null and it shouldn't be\", hits != null);\n      assertTrue(\"should be 100 hits\", hits.totalHits == 100);\n      for (int j = 0; j < hits.scoreDocs.length; j++) {\n        ScoreDoc doc = hits.scoreDocs[j];\n        //\t\t\t\tSystem.out.println(\"Doc: \" + doc.toString());\n        //\t\t\t\tSystem.out.println(\"Explain: \" + searcher.explain(query, doc.doc));\n        assertTrue(doc.score + \" does not equal: \" + 3, doc.score == 3);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}