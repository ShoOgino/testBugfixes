{"path":"modules/suggest/src/java/org/apache/lucene/search/spell/LuceneLevenshteinDistance#getDistance(String,String).mjava","commits":[{"id":"43023554b4c44cbdd9377af2f5cbeece8a1b6a80","date":1319934992,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/LuceneLevenshteinDistance#getDistance(String,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public float getDistance(String target, String other) {\n    IntsRef targetPoints;\n    IntsRef otherPoints;\n    int n;\n    int p[]; //'previous' cost array, horizontally\n    int d[]; // cost array, horizontally\n    int _d[]; //placeholder to assist in swapping p and d\n    \n    // cheaper to do this up front once\n    targetPoints = toIntsRef(target);\n    otherPoints = toIntsRef(other);\n    n = targetPoints.length;\n    p = new int[n+1]; \n    d = new int[n+1]; \n    \n    final int m = otherPoints.length;\n    if (n == 0 || m == 0) {\n      if (n == m) {\n        return 1;\n      }\n      else {\n        return 0;\n      }\n    } \n\n\n    // indexes into strings s and t\n    int i; // iterates through s\n    int j; // iterates through t\n\n    int t_j; // jth character of t\n\n    int cost; // cost\n\n    for (i = 0; i <= n; i++) {\n      p[i] = i;\n    }\n\n    for (j = 1; j <= m; j++) {\n      t_j = otherPoints.ints[j - 1];\n      d[0] = j;\n\n      for (i=1; i <= n; i++) {\n        cost = targetPoints.ints[i - 1] == t_j ? 0 : 1;\n        // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n        d[i] = Math.min(Math.min(d[i - 1] + 1, p[i] + 1),  p[i - 1] + cost);\n      }\n\n      // copy current distance counts to 'previous row' distance counts\n      _d = p;\n       p = d;\n       d = _d;\n    }\n\n    // our last action in the above loop was to switch d and p, so p now\n    // actually has the most recent cost counts\n    return 1.0f - ((float) p[n] / Math.min(m, n));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab","date":1324934316,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/LuceneLevenshteinDistance#getDistance(String,String).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/LuceneLevenshteinDistance#getDistance(String,String).mjava","sourceNew":"  @Override\n  public float getDistance(String target, String other) {\n    IntsRef targetPoints;\n    IntsRef otherPoints;\n    int n;\n    int d[][]; // cost array\n\n    // cheaper to do this up front once\n    targetPoints = toIntsRef(target);\n    otherPoints = toIntsRef(other);\n    n = targetPoints.length;\n    final int m = otherPoints.length;\n    d = new int[n+1][m+1];\n    \n    if (n == 0 || m == 0) {\n      if (n == m) {\n        return 0;\n      }\n      else {\n        return Math.max(n, m);\n      }\n    } \n\n    // indexes into strings s and t\n    int i; // iterates through s\n    int j; // iterates through t\n\n    int t_j; // jth character of t\n\n    int cost; // cost\n\n    for (i = 0; i<=n; i++) {\n      d[i][0] = i;\n    }\n    \n    for (j = 0; j<=m; j++) {\n      d[0][j] = j;\n    }\n\n    for (j = 1; j<=m; j++) {\n      t_j = otherPoints.ints[j-1];\n\n      for (i=1; i<=n; i++) {\n        cost = targetPoints.ints[i-1]==t_j ? 0 : 1;\n        // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n        d[i][j] = Math.min(Math.min(d[i-1][j]+1, d[i][j-1]+1), d[i-1][j-1]+cost);\n        // transposition\n        if (i > 1 && j > 1 && targetPoints.ints[i-1] == otherPoints.ints[j-2] && targetPoints.ints[i-2] == otherPoints.ints[j-1]) {\n          d[i][j] = Math.min(d[i][j], d[i-2][j-2] + cost);\n        }\n      }\n    }\n    \n    return 1.0f - ((float) d[n][m] / Math.min(m, n));\n  }\n\n","sourceOld":"  @Override\n  public float getDistance(String target, String other) {\n    IntsRef targetPoints;\n    IntsRef otherPoints;\n    int n;\n    int p[]; //'previous' cost array, horizontally\n    int d[]; // cost array, horizontally\n    int _d[]; //placeholder to assist in swapping p and d\n    \n    // cheaper to do this up front once\n    targetPoints = toIntsRef(target);\n    otherPoints = toIntsRef(other);\n    n = targetPoints.length;\n    p = new int[n+1]; \n    d = new int[n+1]; \n    \n    final int m = otherPoints.length;\n    if (n == 0 || m == 0) {\n      if (n == m) {\n        return 1;\n      }\n      else {\n        return 0;\n      }\n    } \n\n\n    // indexes into strings s and t\n    int i; // iterates through s\n    int j; // iterates through t\n\n    int t_j; // jth character of t\n\n    int cost; // cost\n\n    for (i = 0; i <= n; i++) {\n      p[i] = i;\n    }\n\n    for (j = 1; j <= m; j++) {\n      t_j = otherPoints.ints[j - 1];\n      d[0] = j;\n\n      for (i=1; i <= n; i++) {\n        cost = targetPoints.ints[i - 1] == t_j ? 0 : 1;\n        // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n        d[i] = Math.min(Math.min(d[i - 1] + 1, p[i] + 1),  p[i - 1] + cost);\n      }\n\n      // copy current distance counts to 'previous row' distance counts\n      _d = p;\n       p = d;\n       d = _d;\n    }\n\n    // our last action in the above loop was to switch d and p, so p now\n    // actually has the most recent cost counts\n    return 1.0f - ((float) p[n] / Math.min(m, n));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30d2716ffe326453b76a787ff26106dc661fb7fd","date":1324935376,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/spell/LuceneLevenshteinDistance#getDistance(String,String).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/LuceneLevenshteinDistance#getDistance(String,String).mjava","sourceNew":"  @Override\n  public float getDistance(String target, String other) {\n    IntsRef targetPoints;\n    IntsRef otherPoints;\n    int n;\n    int d[][]; // cost array\n    \n    // NOTE: if we cared, we could 3*m space instead of m*n space, similar to \n    // what LevenshteinDistance does, except cycling thru a ring of three \n    // horizontal cost arrays... but this comparator is never actually used by \n    // DirectSpellChecker, its only used for merging results from multiple shards \n    // in \"distributed spellcheck\", and its inefficient in other ways too...\n\n    // cheaper to do this up front once\n    targetPoints = toIntsRef(target);\n    otherPoints = toIntsRef(other);\n    n = targetPoints.length;\n    final int m = otherPoints.length;\n    d = new int[n+1][m+1];\n    \n    if (n == 0 || m == 0) {\n      if (n == m) {\n        return 0;\n      }\n      else {\n        return Math.max(n, m);\n      }\n    } \n\n    // indexes into strings s and t\n    int i; // iterates through s\n    int j; // iterates through t\n\n    int t_j; // jth character of t\n\n    int cost; // cost\n\n    for (i = 0; i<=n; i++) {\n      d[i][0] = i;\n    }\n    \n    for (j = 0; j<=m; j++) {\n      d[0][j] = j;\n    }\n\n    for (j = 1; j<=m; j++) {\n      t_j = otherPoints.ints[j-1];\n\n      for (i=1; i<=n; i++) {\n        cost = targetPoints.ints[i-1]==t_j ? 0 : 1;\n        // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n        d[i][j] = Math.min(Math.min(d[i-1][j]+1, d[i][j-1]+1), d[i-1][j-1]+cost);\n        // transposition\n        if (i > 1 && j > 1 && targetPoints.ints[i-1] == otherPoints.ints[j-2] && targetPoints.ints[i-2] == otherPoints.ints[j-1]) {\n          d[i][j] = Math.min(d[i][j], d[i-2][j-2] + cost);\n        }\n      }\n    }\n    \n    return 1.0f - ((float) d[n][m] / Math.min(m, n));\n  }\n\n","sourceOld":"  @Override\n  public float getDistance(String target, String other) {\n    IntsRef targetPoints;\n    IntsRef otherPoints;\n    int n;\n    int d[][]; // cost array\n\n    // cheaper to do this up front once\n    targetPoints = toIntsRef(target);\n    otherPoints = toIntsRef(other);\n    n = targetPoints.length;\n    final int m = otherPoints.length;\n    d = new int[n+1][m+1];\n    \n    if (n == 0 || m == 0) {\n      if (n == m) {\n        return 0;\n      }\n      else {\n        return Math.max(n, m);\n      }\n    } \n\n    // indexes into strings s and t\n    int i; // iterates through s\n    int j; // iterates through t\n\n    int t_j; // jth character of t\n\n    int cost; // cost\n\n    for (i = 0; i<=n; i++) {\n      d[i][0] = i;\n    }\n    \n    for (j = 0; j<=m; j++) {\n      d[0][j] = j;\n    }\n\n    for (j = 1; j<=m; j++) {\n      t_j = otherPoints.ints[j-1];\n\n      for (i=1; i<=n; i++) {\n        cost = targetPoints.ints[i-1]==t_j ? 0 : 1;\n        // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n        d[i][j] = Math.min(Math.min(d[i-1][j]+1, d[i][j-1]+1), d[i-1][j-1]+cost);\n        // transposition\n        if (i > 1 && j > 1 && targetPoints.ints[i-1] == otherPoints.ints[j-2] && targetPoints.ints[i-2] == otherPoints.ints[j-1]) {\n          d[i][j] = Math.min(d[i][j], d[i-2][j-2] + cost);\n        }\n      }\n    }\n    \n    return 1.0f - ((float) d[n][m] / Math.min(m, n));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/spell/LuceneLevenshteinDistance#getDistance(String,String).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/spell/LuceneLevenshteinDistance#getDistance(String,String).mjava","sourceNew":"  @Override\n  public float getDistance(String target, String other) {\n    IntsRef targetPoints;\n    IntsRef otherPoints;\n    int n;\n    int d[][]; // cost array\n    \n    // NOTE: if we cared, we could 3*m space instead of m*n space, similar to \n    // what LevenshteinDistance does, except cycling thru a ring of three \n    // horizontal cost arrays... but this comparator is never actually used by \n    // DirectSpellChecker, its only used for merging results from multiple shards \n    // in \"distributed spellcheck\", and its inefficient in other ways too...\n\n    // cheaper to do this up front once\n    targetPoints = toIntsRef(target);\n    otherPoints = toIntsRef(other);\n    n = targetPoints.length;\n    final int m = otherPoints.length;\n    d = new int[n+1][m+1];\n    \n    if (n == 0 || m == 0) {\n      if (n == m) {\n        return 0;\n      }\n      else {\n        return Math.max(n, m);\n      }\n    } \n\n    // indexes into strings s and t\n    int i; // iterates through s\n    int j; // iterates through t\n\n    int t_j; // jth character of t\n\n    int cost; // cost\n\n    for (i = 0; i<=n; i++) {\n      d[i][0] = i;\n    }\n    \n    for (j = 0; j<=m; j++) {\n      d[0][j] = j;\n    }\n\n    for (j = 1; j<=m; j++) {\n      t_j = otherPoints.ints[j-1];\n\n      for (i=1; i<=n; i++) {\n        cost = targetPoints.ints[i-1]==t_j ? 0 : 1;\n        // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n        d[i][j] = Math.min(Math.min(d[i-1][j]+1, d[i][j-1]+1), d[i-1][j-1]+cost);\n        // transposition\n        if (i > 1 && j > 1 && targetPoints.ints[i-1] == otherPoints.ints[j-2] && targetPoints.ints[i-2] == otherPoints.ints[j-1]) {\n          d[i][j] = Math.min(d[i][j], d[i-2][j-2] + cost);\n        }\n      }\n    }\n    \n    return 1.0f - ((float) d[n][m] / Math.min(m, n));\n  }\n\n","sourceOld":"  @Override\n  public float getDistance(String target, String other) {\n    IntsRef targetPoints;\n    IntsRef otherPoints;\n    int n;\n    int d[][]; // cost array\n    \n    // NOTE: if we cared, we could 3*m space instead of m*n space, similar to \n    // what LevenshteinDistance does, except cycling thru a ring of three \n    // horizontal cost arrays... but this comparator is never actually used by \n    // DirectSpellChecker, its only used for merging results from multiple shards \n    // in \"distributed spellcheck\", and its inefficient in other ways too...\n\n    // cheaper to do this up front once\n    targetPoints = toIntsRef(target);\n    otherPoints = toIntsRef(other);\n    n = targetPoints.length;\n    final int m = otherPoints.length;\n    d = new int[n+1][m+1];\n    \n    if (n == 0 || m == 0) {\n      if (n == m) {\n        return 0;\n      }\n      else {\n        return Math.max(n, m);\n      }\n    } \n\n    // indexes into strings s and t\n    int i; // iterates through s\n    int j; // iterates through t\n\n    int t_j; // jth character of t\n\n    int cost; // cost\n\n    for (i = 0; i<=n; i++) {\n      d[i][0] = i;\n    }\n    \n    for (j = 0; j<=m; j++) {\n      d[0][j] = j;\n    }\n\n    for (j = 1; j<=m; j++) {\n      t_j = otherPoints.ints[j-1];\n\n      for (i=1; i<=n; i++) {\n        cost = targetPoints.ints[i-1]==t_j ? 0 : 1;\n        // minimum of cell to the left+1, to the top+1, diagonally left and up +cost\n        d[i][j] = Math.min(Math.min(d[i-1][j]+1, d[i][j-1]+1), d[i-1][j-1]+cost);\n        // transposition\n        if (i > 1 && j > 1 && targetPoints.ints[i-1] == otherPoints.ints[j-2] && targetPoints.ints[i-2] == otherPoints.ints[j-1]) {\n          d[i][j] = Math.min(d[i][j], d[i-2][j-2] + cost);\n        }\n      }\n    }\n    \n    return 1.0f - ((float) d[n][m] / Math.min(m, n));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["30d2716ffe326453b76a787ff26106dc661fb7fd"],"30d2716ffe326453b76a787ff26106dc661fb7fd":["3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab"],"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab":["43023554b4c44cbdd9377af2f5cbeece8a1b6a80"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"43023554b4c44cbdd9377af2f5cbeece8a1b6a80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"30d2716ffe326453b76a787ff26106dc661fb7fd":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab":["30d2716ffe326453b76a787ff26106dc661fb7fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43023554b4c44cbdd9377af2f5cbeece8a1b6a80"],"43023554b4c44cbdd9377af2f5cbeece8a1b6a80":["3aecf04c2d454cf9e42c4dc50241a8df41f8e6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}