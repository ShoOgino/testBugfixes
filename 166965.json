{"path":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","sourceNew":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) throws IOException {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    long lastVersion = firstCommit.getVersion();\n    long lastTimestamp = firstCommit.getTimestamp();\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      long nowVersion = commit.getVersion();\n      long nowTimestamp = commit.getTimestamp();\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertTrue(\"SegmentInfos versions are out-of-order\", nowVersion > lastVersion);\n      assertTrue(\"SegmentInfos timestamps are out-of-order: now=\" + nowTimestamp + \" vs last=\" + lastTimestamp, nowTimestamp >= lastTimestamp);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n      lastVersion = nowVersion;\n      lastTimestamp = nowTimestamp;\n    }\n  }\n\n","sourceOld":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) throws IOException {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    long lastVersion = firstCommit.getVersion();\n    long lastTimestamp = firstCommit.getTimestamp();\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      long nowVersion = commit.getVersion();\n      long nowTimestamp = commit.getTimestamp();\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertTrue(\"SegmentInfos versions are out-of-order\", nowVersion > lastVersion);\n      assertTrue(\"SegmentInfos timestamps are out-of-order: now=\" + nowTimestamp + \" vs last=\" + lastTimestamp, nowTimestamp >= lastTimestamp);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n      lastVersion = nowVersion;\n      lastTimestamp = nowTimestamp;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","sourceNew":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) throws IOException {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n    }\n  }\n\n","sourceOld":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) throws IOException {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    long lastVersion = firstCommit.getVersion();\n    long lastTimestamp = firstCommit.getTimestamp();\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      long nowVersion = commit.getVersion();\n      long nowTimestamp = commit.getTimestamp();\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertTrue(\"SegmentInfos versions are out-of-order\", nowVersion > lastVersion);\n      assertTrue(\"SegmentInfos timestamps are out-of-order: now=\" + nowTimestamp + \" vs last=\" + lastTimestamp, nowTimestamp >= lastTimestamp);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n      lastVersion = nowVersion;\n      lastTimestamp = nowTimestamp;\n    }\n  }\n\n","bugFix":["a9bc49aba3d3634b4dc5a1347aa5d27cc5b88ac8","59818e85900870556e1bdd604772c77d74f57d89"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","sourceNew":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) throws IOException {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n    }\n  }\n\n","sourceOld":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) throws IOException {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    long lastVersion = firstCommit.getVersion();\n    long lastTimestamp = firstCommit.getTimestamp();\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      long nowVersion = commit.getVersion();\n      long nowTimestamp = commit.getTimestamp();\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertTrue(\"SegmentInfos versions are out-of-order\", nowVersion > lastVersion);\n      assertTrue(\"SegmentInfos timestamps are out-of-order: now=\" + nowTimestamp + \" vs last=\" + lastTimestamp, nowTimestamp >= lastTimestamp);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n      lastVersion = nowVersion;\n      lastTimestamp = nowTimestamp;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","sourceNew":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) throws IOException {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n    }\n  }\n\n","sourceOld":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) throws IOException {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    long lastVersion = firstCommit.getVersion();\n    long lastTimestamp = firstCommit.getTimestamp();\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      long nowVersion = commit.getVersion();\n      long nowTimestamp = commit.getTimestamp();\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertTrue(\"SegmentInfos versions are out-of-order\", nowVersion > lastVersion);\n      assertTrue(\"SegmentInfos timestamps are out-of-order: now=\" + nowTimestamp + \" vs last=\" + lastTimestamp, nowTimestamp >= lastTimestamp);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n      lastVersion = nowVersion;\n      lastTimestamp = nowTimestamp;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#verifyCommitOrder(List[#-extends-IndexCommit]).mjava","sourceNew":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) throws IOException {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n    }\n  }\n\n","sourceOld":"  private void verifyCommitOrder(List<? extends IndexCommit> commits) throws IOException {\n    final IndexCommit firstCommit =  commits.get(0);\n    long last = SegmentInfos.generationFromSegmentsFileName(firstCommit.getSegmentsFileName());\n    assertEquals(last, firstCommit.getGeneration());\n    for(int i=1;i<commits.size();i++) {\n      final IndexCommit commit =  commits.get(i);\n      long now = SegmentInfos.generationFromSegmentsFileName(commit.getSegmentsFileName());\n      assertTrue(\"SegmentInfos commits are out-of-order\", now > last);\n      assertEquals(now, commit.getGeneration());\n      last = now;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["9454a6510e2db155fb01faa5c049b06ece95fab9","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["9454a6510e2db155fb01faa5c049b06ece95fab9","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}