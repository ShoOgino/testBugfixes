{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#linearDistance(PlanetModel,double,double,double,Membership...).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#linearDistance(PlanetModel,double,double,double,Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/geo3d/Plane#linearDistance(PlanetModel,double,double,double,Membership...).mjava","sourceNew":"  /**\n   * Compute linear distance from plane to a vector.  This is defined\n   * as the distance from the given point to the nearest intersection of \n   * this plane with the planet surface.\n   * @param planetModel is the planet model.\n   * @param x is the vector x.\n   * @param y is the vector y.\n   * @param z is the vector z.\n   * @param bounds are the bounds which constrain the intersection point.\n   * @return the linear distance.\n   */\n  public double linearDistance(final PlanetModel planetModel, final double x, final double y, final double z, final Membership... bounds) {\n    if (evaluateIsZero(x,y,z)) {\n      if (meetsAllBounds(x,y,z, bounds))\n        return 0.0;\n      return Double.MAX_VALUE;\n    }\n    \n    // First, compute the perpendicular plane.\n    final Plane perpPlane = new Plane(this.y * z - this.z * y, this.z * x - this.x * z, this.x * y - this.y * x, 0.0);\n\n    // We need to compute the intersection of two planes on the geo surface: this one, and its perpendicular.\n    // Then, we need to choose which of the two points we want to compute the distance to.  We pick the\n    // shorter distance always.\n    \n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, perpPlane);\n    \n    // For each point, compute a linear distance, and take the minimum of them\n    double minDistance = Double.MAX_VALUE;\n    \n    for (final GeoPoint intersectionPoint : intersectionPoints) {\n      if (meetsAllBounds(intersectionPoint, bounds)) {\n        final double theDistance = intersectionPoint.linearDistance(x,y,z);\n        if (theDistance < minDistance) {\n          minDistance = theDistance;\n        }\n      }\n    }\n    return minDistance;\n  }\n\n","sourceOld":"  /**\n   * Compute linear distance from plane to a vector.  This is defined\n   * as the distance from the given point to the nearest intersection of \n   * this plane with the planet surface.\n   * @param planetModel is the planet model.\n   * @param x is the vector x.\n   * @param y is the vector y.\n   * @param z is the vector z.\n   * @param bounds are the bounds which constrain the intersection point.\n   * @return the linear distance.\n   */\n  public double linearDistance(final PlanetModel planetModel, final double x, final double y, final double z, final Membership... bounds) {\n    if (evaluateIsZero(x,y,z)) {\n      if (meetsAllBounds(x,y,z, bounds))\n        return 0.0;\n      return Double.MAX_VALUE;\n    }\n    \n    // First, compute the perpendicular plane.\n    final Plane perpPlane = new Plane(this.y * z - this.z * y, this.z * x - this.x * z, this.x * y - this.y * x, 0.0);\n\n    // We need to compute the intersection of two planes on the geo surface: this one, and its perpendicular.\n    // Then, we need to choose which of the two points we want to compute the distance to.  We pick the\n    // shorter distance always.\n    \n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, perpPlane);\n    \n    // For each point, compute a linear distance, and take the minimum of them\n    double minDistance = Double.MAX_VALUE;\n    \n    for (final GeoPoint intersectionPoint : intersectionPoints) {\n      if (meetsAllBounds(intersectionPoint, bounds)) {\n        final double theDistance = intersectionPoint.linearDistance(x,y,z);\n        if (theDistance < minDistance) {\n          minDistance = theDistance;\n        }\n      }\n    }\n    return minDistance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae0a2a645db6ae8e4aca176aefd05f400689d2f4","date":1463569628,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#linearDistance(PlanetModel,double,double,double,Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#linearDistance(PlanetModel,double,double,double,Membership...).mjava","sourceNew":"  /**\n   * Compute linear distance from plane to a vector.  This is defined\n   * as the distance from the given point to the nearest intersection of \n   * this plane with the planet surface.\n   * @param planetModel is the planet model.\n   * @param x is the vector x.\n   * @param y is the vector y.\n   * @param z is the vector z.\n   * @param bounds are the bounds which constrain the intersection point.\n   * @return the linear distance.\n   */\n  public double linearDistance(final PlanetModel planetModel, final double x, final double y, final double z, final Membership... bounds) {\n    if (evaluateIsZero(x,y,z)) {\n      if (meetsAllBounds(x,y,z, bounds))\n        return 0.0;\n      return Double.POSITIVE_INFINITY;\n    }\n    \n    // First, compute the perpendicular plane.\n    final Plane perpPlane = new Plane(this.y * z - this.z * y, this.z * x - this.x * z, this.x * y - this.y * x, 0.0);\n\n    // We need to compute the intersection of two planes on the geo surface: this one, and its perpendicular.\n    // Then, we need to choose which of the two points we want to compute the distance to.  We pick the\n    // shorter distance always.\n    \n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, perpPlane);\n    \n    // For each point, compute a linear distance, and take the minimum of them\n    double minDistance = Double.POSITIVE_INFINITY;\n    \n    for (final GeoPoint intersectionPoint : intersectionPoints) {\n      if (meetsAllBounds(intersectionPoint, bounds)) {\n        final double theDistance = intersectionPoint.linearDistance(x,y,z);\n        if (theDistance < minDistance) {\n          minDistance = theDistance;\n        }\n      }\n    }\n    return minDistance;\n  }\n\n","sourceOld":"  /**\n   * Compute linear distance from plane to a vector.  This is defined\n   * as the distance from the given point to the nearest intersection of \n   * this plane with the planet surface.\n   * @param planetModel is the planet model.\n   * @param x is the vector x.\n   * @param y is the vector y.\n   * @param z is the vector z.\n   * @param bounds are the bounds which constrain the intersection point.\n   * @return the linear distance.\n   */\n  public double linearDistance(final PlanetModel planetModel, final double x, final double y, final double z, final Membership... bounds) {\n    if (evaluateIsZero(x,y,z)) {\n      if (meetsAllBounds(x,y,z, bounds))\n        return 0.0;\n      return Double.MAX_VALUE;\n    }\n    \n    // First, compute the perpendicular plane.\n    final Plane perpPlane = new Plane(this.y * z - this.z * y, this.z * x - this.x * z, this.x * y - this.y * x, 0.0);\n\n    // We need to compute the intersection of two planes on the geo surface: this one, and its perpendicular.\n    // Then, we need to choose which of the two points we want to compute the distance to.  We pick the\n    // shorter distance always.\n    \n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, perpPlane);\n    \n    // For each point, compute a linear distance, and take the minimum of them\n    double minDistance = Double.MAX_VALUE;\n    \n    for (final GeoPoint intersectionPoint : intersectionPoints) {\n      if (meetsAllBounds(intersectionPoint, bounds)) {\n        final double theDistance = intersectionPoint.linearDistance(x,y,z);\n        if (theDistance < minDistance) {\n          minDistance = theDistance;\n        }\n      }\n    }\n    return minDistance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#linearDistance(PlanetModel,double,double,double,Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#linearDistance(PlanetModel,double,double,double,Membership...).mjava","sourceNew":"  /**\n   * Compute linear distance from plane to a vector.  This is defined\n   * as the distance from the given point to the nearest intersection of \n   * this plane with the planet surface.\n   * @param planetModel is the planet model.\n   * @param x is the vector x.\n   * @param y is the vector y.\n   * @param z is the vector z.\n   * @param bounds are the bounds which constrain the intersection point.\n   * @return the linear distance.\n   */\n  public double linearDistance(final PlanetModel planetModel, final double x, final double y, final double z, final Membership... bounds) {\n    if (evaluateIsZero(x,y,z)) {\n      if (meetsAllBounds(x,y,z, bounds))\n        return 0.0;\n      return Double.POSITIVE_INFINITY;\n    }\n    \n    // First, compute the perpendicular plane.\n    final Plane perpPlane = new Plane(this.y * z - this.z * y, this.z * x - this.x * z, this.x * y - this.y * x, 0.0);\n\n    // We need to compute the intersection of two planes on the geo surface: this one, and its perpendicular.\n    // Then, we need to choose which of the two points we want to compute the distance to.  We pick the\n    // shorter distance always.\n    \n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, perpPlane);\n    \n    // For each point, compute a linear distance, and take the minimum of them\n    double minDistance = Double.POSITIVE_INFINITY;\n    \n    for (final GeoPoint intersectionPoint : intersectionPoints) {\n      if (meetsAllBounds(intersectionPoint, bounds)) {\n        final double theDistance = intersectionPoint.linearDistance(x,y,z);\n        if (theDistance < minDistance) {\n          minDistance = theDistance;\n        }\n      }\n    }\n    return minDistance;\n  }\n\n","sourceOld":"  /**\n   * Compute linear distance from plane to a vector.  This is defined\n   * as the distance from the given point to the nearest intersection of \n   * this plane with the planet surface.\n   * @param planetModel is the planet model.\n   * @param x is the vector x.\n   * @param y is the vector y.\n   * @param z is the vector z.\n   * @param bounds are the bounds which constrain the intersection point.\n   * @return the linear distance.\n   */\n  public double linearDistance(final PlanetModel planetModel, final double x, final double y, final double z, final Membership... bounds) {\n    if (evaluateIsZero(x,y,z)) {\n      if (meetsAllBounds(x,y,z, bounds))\n        return 0.0;\n      return Double.MAX_VALUE;\n    }\n    \n    // First, compute the perpendicular plane.\n    final Plane perpPlane = new Plane(this.y * z - this.z * y, this.z * x - this.x * z, this.x * y - this.y * x, 0.0);\n\n    // We need to compute the intersection of two planes on the geo surface: this one, and its perpendicular.\n    // Then, we need to choose which of the two points we want to compute the distance to.  We pick the\n    // shorter distance always.\n    \n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, perpPlane);\n    \n    // For each point, compute a linear distance, and take the minimum of them\n    double minDistance = Double.MAX_VALUE;\n    \n    for (final GeoPoint intersectionPoint : intersectionPoints) {\n      if (meetsAllBounds(intersectionPoint, bounds)) {\n        final double theDistance = intersectionPoint.linearDistance(x,y,z);\n        if (theDistance < minDistance) {\n          minDistance = theDistance;\n        }\n      }\n    }\n    return minDistance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#linearDistance(PlanetModel,double,double,double,Membership...).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#linearDistance(PlanetModel,double,double,double,Membership...).mjava","sourceNew":"  /**\n   * Compute linear distance from plane to a vector.  This is defined\n   * as the distance from the given point to the nearest intersection of \n   * this plane with the planet surface.\n   * @param planetModel is the planet model.\n   * @param x is the vector x.\n   * @param y is the vector y.\n   * @param z is the vector z.\n   * @param bounds are the bounds which constrain the intersection point.\n   * @return the linear distance.\n   */\n  public double linearDistance(final PlanetModel planetModel, final double x, final double y, final double z, final Membership... bounds) {\n    if (evaluateIsZero(x,y,z)) {\n      if (meetsAllBounds(x,y,z, bounds))\n        return 0.0;\n      return Double.POSITIVE_INFINITY;\n    }\n    \n    // First, compute the perpendicular plane.\n    final Plane perpPlane = new Plane(this.y * z - this.z * y, this.z * x - this.x * z, this.x * y - this.y * x, 0.0);\n\n    // We need to compute the intersection of two planes on the geo surface: this one, and its perpendicular.\n    // Then, we need to choose which of the two points we want to compute the distance to.  We pick the\n    // shorter distance always.\n    \n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, perpPlane);\n    \n    // For each point, compute a linear distance, and take the minimum of them\n    double minDistance = Double.POSITIVE_INFINITY;\n    \n    for (final GeoPoint intersectionPoint : intersectionPoints) {\n      if (meetsAllBounds(intersectionPoint, bounds)) {\n        final double theDistance = intersectionPoint.linearDistance(x,y,z);\n        if (theDistance < minDistance) {\n          minDistance = theDistance;\n        }\n      }\n    }\n    return minDistance;\n  }\n\n","sourceOld":"  /**\n   * Compute linear distance from plane to a vector.  This is defined\n   * as the distance from the given point to the nearest intersection of \n   * this plane with the planet surface.\n   * @param planetModel is the planet model.\n   * @param x is the vector x.\n   * @param y is the vector y.\n   * @param z is the vector z.\n   * @param bounds are the bounds which constrain the intersection point.\n   * @return the linear distance.\n   */\n  public double linearDistance(final PlanetModel planetModel, final double x, final double y, final double z, final Membership... bounds) {\n    if (evaluateIsZero(x,y,z)) {\n      if (meetsAllBounds(x,y,z, bounds))\n        return 0.0;\n      return Double.MAX_VALUE;\n    }\n    \n    // First, compute the perpendicular plane.\n    final Plane perpPlane = new Plane(this.y * z - this.z * y, this.z * x - this.x * z, this.x * y - this.y * x, 0.0);\n\n    // We need to compute the intersection of two planes on the geo surface: this one, and its perpendicular.\n    // Then, we need to choose which of the two points we want to compute the distance to.  We pick the\n    // shorter distance always.\n    \n    final GeoPoint[] intersectionPoints = findIntersections(planetModel, perpPlane);\n    \n    // For each point, compute a linear distance, and take the minimum of them\n    double minDistance = Double.MAX_VALUE;\n    \n    for (final GeoPoint intersectionPoint : intersectionPoints) {\n      if (meetsAllBounds(intersectionPoint, bounds)) {\n        final double theDistance = intersectionPoint.linearDistance(x,y,z);\n        if (theDistance < minDistance) {\n          minDistance = theDistance;\n        }\n      }\n    }\n    return minDistance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae0a2a645db6ae8e4aca176aefd05f400689d2f4":["b4e444678504caf66a8060b1d514383aa4feac0c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b4e444678504caf66a8060b1d514383aa4feac0c","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b4e444678504caf66a8060b1d514383aa4feac0c","ae0a2a645db6ae8e4aca176aefd05f400689d2f4"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"b4e444678504caf66a8060b1d514383aa4feac0c":["ae0a2a645db6ae8e4aca176aefd05f400689d2f4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"ae0a2a645db6ae8e4aca176aefd05f400689d2f4":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}