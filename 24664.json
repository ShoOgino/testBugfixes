{"path":"lucene/core/src/java/org/apache/lucene/util/packed/DirectWriter#bitsRequired(long).mjava","commits":[{"id":"8106bc60c7452250f84c65cdb43ab6b1d8eb1534","date":1401906364,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/DirectWriter#bitsRequired(long).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Returns how many bits are required to hold values up\n   * to and including maxValue\n   * \n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   */\n  public static int bitsRequired(long maxValue) {\n    if (maxValue < 0) {\n      throw new IllegalArgumentException(\"maxValue must be non-negative (got: \" + maxValue + \")\");\n    }\n    int bitsRequired = Math.max(1, 64 - Long.numberOfLeadingZeros(maxValue));\n    int index = Arrays.binarySearch(SUPPORTED_BITS_PER_VALUE, bitsRequired);\n    if (index < 0) {\n      return SUPPORTED_BITS_PER_VALUE[-index-1];\n    } else {\n      return bitsRequired;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff0cb4eabd8bb5c27d3a284e18c812a89958a66","date":1402928522,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/DirectWriter#bitsRequired(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/DirectWriter#bitsRequired(long).mjava","sourceNew":"  /**\n   * Returns how many bits are required to hold values up\n   * to and including maxValue\n   *\n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @see PackedInts#bitsRequired(long)\n   */\n  public static int bitsRequired(long maxValue) {\n    return roundBits(PackedInts.bitsRequired(maxValue));\n  }\n\n","sourceOld":"  /** \n   * Returns how many bits are required to hold values up\n   * to and including maxValue\n   * \n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   */\n  public static int bitsRequired(long maxValue) {\n    if (maxValue < 0) {\n      throw new IllegalArgumentException(\"maxValue must be non-negative (got: \" + maxValue + \")\");\n    }\n    int bitsRequired = Math.max(1, 64 - Long.numberOfLeadingZeros(maxValue));\n    int index = Arrays.binarySearch(SUPPORTED_BITS_PER_VALUE, bitsRequired);\n    if (index < 0) {\n      return SUPPORTED_BITS_PER_VALUE[-index-1];\n    } else {\n      return bitsRequired;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/DirectWriter#bitsRequired(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/DirectWriter#bitsRequired(long).mjava","sourceNew":"  /**\n   * Returns how many bits are required to hold values up\n   * to and including maxValue\n   *\n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @see PackedInts#bitsRequired(long)\n   */\n  public static int bitsRequired(long maxValue) {\n    return roundBits(PackedInts.bitsRequired(maxValue));\n  }\n\n","sourceOld":"  /** \n   * Returns how many bits are required to hold values up\n   * to and including maxValue\n   * \n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   */\n  public static int bitsRequired(long maxValue) {\n    if (maxValue < 0) {\n      throw new IllegalArgumentException(\"maxValue must be non-negative (got: \" + maxValue + \")\");\n    }\n    int bitsRequired = Math.max(1, 64 - Long.numberOfLeadingZeros(maxValue));\n    int index = Arrays.binarySearch(SUPPORTED_BITS_PER_VALUE, bitsRequired);\n    if (index < 0) {\n      return SUPPORTED_BITS_PER_VALUE[-index-1];\n    } else {\n      return bitsRequired;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534","dff0cb4eabd8bb5c27d3a284e18c812a89958a66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66"]},"commit2Childs":{"dff0cb4eabd8bb5c27d3a284e18c812a89958a66":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8106bc60c7452250f84c65cdb43ab6b1d8eb1534"],"8106bc60c7452250f84c65cdb43ab6b1d8eb1534":["dff0cb4eabd8bb5c27d3a284e18c812a89958a66","c6f080a2ab37c464dd98db173f6cbf10dc74f211"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}