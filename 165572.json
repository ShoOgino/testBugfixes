{"path":"src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","commits":[{"id":"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5","date":1218639440,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#persist(Writer,CoreDescriptor).mjava","sourceNew":"  /** Writes the multicore configuration node for a given core. */\n  void persist(Writer writer, CoreDescriptor dcore) throws IOException {\n    writer.write(\"  <core\");\n    writer.write (\" name='\");\n    XML.escapeAttributeValue(dcore.getName(), writer);\n    writer.write(\"' instanceDir='\");\n    XML.escapeAttributeValue(dcore.getInstanceDir(), writer);\n    writer.write('\\'');\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writer.write(\" config='\");\n      XML.escapeAttributeValue(opt, writer);\n      writer.write('\\'');\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writer.write(\" schema='\");\n      XML.escapeAttributeValue(opt, writer);\n      writer.write('\\'');\n    }\n    writer.write(\"/>\\n\"); // core\n  }\n\n","sourceOld":"  /** Writes the multicore configuration node for a given core. */\n  void persist(Writer writer, CoreDescriptor dcore) throws IOException {\n    writer.write(\"  <core\");\n    writer.write (\" name='\");\n    XML.escapeAttributeValue(dcore.getName(), writer);\n    writer.write(\"' instanceDir='\");\n    XML.escapeAttributeValue(dcore.getInstanceDir(), writer);\n    writer.write('\\'');\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writer.write(\" config='\");\n      XML.escapeAttributeValue(opt, writer);\n      writer.write('\\'');\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writer.write(\" schema='\");\n      XML.escapeAttributeValue(opt, writer);\n      writer.write('\\'');\n    }\n    writer.write(\"/>\\n\"); // core\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2284f4281eb212e60f8318c30e1d67c7d25422a7","date":1218739496,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer writer, CoreDescriptor dcore) throws IOException {\n    writer.write(\"  <core\");\n    writer.write (\" name='\");\n    XML.escapeAttributeValue(dcore.getName(), writer);\n    writer.write(\"' instanceDir='\");\n    XML.escapeAttributeValue(dcore.getInstanceDir(), writer);\n    writer.write('\\'');\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writer.write(\" config='\");\n      XML.escapeAttributeValue(opt, writer);\n      writer.write('\\'');\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writer.write(\" schema='\");\n      XML.escapeAttributeValue(opt, writer);\n      writer.write('\\'');\n    }\n    writer.write(\"/>\\n\"); // core\n  }\n\n","sourceOld":"  /** Writes the multicore configuration node for a given core. */\n  void persist(Writer writer, CoreDescriptor dcore) throws IOException {\n    writer.write(\"  <core\");\n    writer.write (\" name='\");\n    XML.escapeAttributeValue(dcore.getName(), writer);\n    writer.write(\"' instanceDir='\");\n    XML.escapeAttributeValue(dcore.getInstanceDir(), writer);\n    writer.write('\\'');\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writer.write(\" config='\");\n      XML.escapeAttributeValue(opt, writer);\n      writer.write('\\'');\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writer.write(\" schema='\");\n      XML.escapeAttributeValue(opt, writer);\n      writer.write('\\'');\n    }\n    writer.write(\"/>\\n\"); // core\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c28792ff7d1774c306e16afbd44ded91a417049b","date":1219072108,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persist(Writer,List[String],CoreDescriptor).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer writer, List<String> aliases, CoreDescriptor dcore) throws IOException {\n    writer.write(\"  <core\");\n    writer.write (\" name='\");\n    XML.escapeAttributeValue(StrUtils.join(aliases,','), writer);\n    writer.write(\"' instanceDir='\");\n    XML.escapeAttributeValue(dcore.getInstanceDir(), writer);\n    writer.write('\\'');\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writer.write(\" config='\");\n      XML.escapeAttributeValue(opt, writer);\n      writer.write('\\'');\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writer.write(\" schema='\");\n      XML.escapeAttributeValue(opt, writer);\n      writer.write('\\'');\n    }\n    writer.write(\"/>\\n\"); // core\n  }\n\n","sourceOld":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer writer, CoreDescriptor dcore) throws IOException {\n    writer.write(\"  <core\");\n    writer.write (\" name='\");\n    XML.escapeAttributeValue(dcore.getName(), writer);\n    writer.write(\"' instanceDir='\");\n    XML.escapeAttributeValue(dcore.getInstanceDir(), writer);\n    writer.write('\\'');\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writer.write(\" config='\");\n      XML.escapeAttributeValue(opt, writer);\n      writer.write('\\'');\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writer.write(\" schema='\");\n      XML.escapeAttributeValue(opt, writer);\n      writer.write('\\'');\n    }\n    writer.write(\"/>\\n\"); // core\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72","date":1260860758,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persist(Writer,List[String],CoreDescriptor).mjava","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","sourceOld":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, List<String> aliases, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",StrUtils.join(aliases,','));\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","pathOld":"src/java/org/apache/solr/core/CoreContainer#persist(Writer,CoreDescriptor).mjava","sourceNew":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","sourceOld":"  /** Writes the cores configuration node for a given core. */\n  void persist(Writer w, CoreDescriptor dcore) throws IOException {\n    w.write(\"  <core\");\n    writeAttribute(w,\"name\",dcore.name);\n    writeAttribute(w,\"instanceDir\",dcore.getInstanceDir());\n    //write config (if not default)\n    String opt = dcore.getConfigName();\n    if (opt != null && !opt.equals(dcore.getDefaultConfigName())) {\n      writeAttribute(w, \"config\",opt);\n    }\n    //write schema (if not default)\n    opt = dcore.getSchemaName();\n    if (opt != null && !opt.equals(dcore.getDefaultSchemaName())) {\n      writeAttribute(w,\"schema\",opt);\n    }\n    opt = dcore.getPropertiesName();\n    if (opt != null) {\n      writeAttribute(w,\"properties\",opt);\n    }\n    opt = dcore.dataDir;\n    if (opt != null) writeAttribute(w,\"dataDir\",opt);\n    if (dcore.getCoreProperties() == null || dcore.getCoreProperties().isEmpty())\n      w.write(\"/>\\n\"); // core\n    else  {\n      w.write(\">\\n\");\n      writeProperties(w, dcore.getCoreProperties());\n      w.write(\"</core>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72":["c28792ff7d1774c306e16afbd44ded91a417049b"],"2284f4281eb212e60f8318c30e1d67c7d25422a7":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"c28792ff7d1774c306e16afbd44ded91a417049b":["2284f4281eb212e60f8318c30e1d67c7d25422a7"],"ad94625fb8d088209f46650c8097196fec67f00c":["e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72":["ad94625fb8d088209f46650c8097196fec67f00c"],"2284f4281eb212e60f8318c30e1d67c7d25422a7":["c28792ff7d1774c306e16afbd44ded91a417049b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5"],"c28792ff7d1774c306e16afbd44ded91a417049b":["e27d2a5a3c200620d24f5ef16f61fcf9b6f27c72"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":["2284f4281eb212e60f8318c30e1d67c7d25422a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}