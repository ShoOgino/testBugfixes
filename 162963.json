{"path":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testDanish().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testDanish().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermRangeQuery#testDanish().mjava","sourceNew":"  public void testDanish() throws Exception {\n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    // Danish collation orders the words below in the given order (example taken\n    // from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    Query query = new TermRangeQuery(\"content\", \"H\\u00D8T\", \"MAND\", false, false, collator);\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    initializeIndex(words);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"H\\u00C5T\", \"MAND\", false, false, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n    searcher.close();\n  }\n\n","sourceOld":"  public void testDanish() throws Exception {\n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    // Danish collation orders the words below in the given order (example taken\n    // from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    Query query = new TermRangeQuery(\"content\", \"H\\u00D8T\", \"MAND\", false, false, collator);\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    initializeIndex(words);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"H\\u00C5T\", \"MAND\", false, false, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testDanish().mjava","sourceNew":null,"sourceOld":"  public void testDanish() throws Exception {\n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    // Danish collation orders the words below in the given order (example taken\n    // from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    Query query = new TermRangeQuery(\"content\", \"H\\u00D8T\", \"MAND\", false, false, collator);\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    initializeIndex(words);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"H\\u00C5T\", \"MAND\", false, false, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testDanish().mjava","sourceNew":null,"sourceOld":"  public void testDanish() throws Exception {\n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    // Danish collation orders the words below in the given order (example taken\n    // from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    Query query = new TermRangeQuery(\"content\", \"H\\u00D8T\", \"MAND\", false, false, collator);\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    initializeIndex(words);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"H\\u00C5T\", \"MAND\", false, false, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermRangeQuery#testDanish().mjava","sourceNew":null,"sourceOld":"  public void testDanish() throws Exception {\n    Collator collator = Collator.getInstance(new Locale(\"da\", \"dk\"));\n    // Danish collation orders the words below in the given order (example taken\n    // from TestSort.testInternationalSort() ).\n    String[] words = { \"H\\u00D8T\", \"H\\u00C5T\", \"MAND\" };\n    Query query = new TermRangeQuery(\"content\", \"H\\u00D8T\", \"MAND\", false, false, collator);\n\n    // Unicode order would not include \"H\\u00C5T\" in [ \"H\\u00D8T\", \"MAND\" ],\n    // but Danish collation does.\n    initializeIndex(words);\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, hits.length);\n\n    query = new TermRangeQuery(\"content\", \"H\\u00C5T\", \"MAND\", false, false, collator);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, hits.length);\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["9454a6510e2db155fb01faa5c049b06ece95fab9","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["9454a6510e2db155fb01faa5c049b06ece95fab9","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}