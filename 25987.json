{"path":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","commits":[{"id":"c2c3a504730329ae644b009dee43024116605d47","date":1345253449,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      String params = System.getProperty(\"params\", \"\");\n      urlStr = System.getProperty(\"url\", SimplePostTool.appendParam(DEFAULT_POST_URL, params));\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a57a7f5c2a6c4358d4e71c6eb262472e33c21661"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      String params = System.getProperty(\"params\", \"\");\n      urlStr = System.getProperty(\"url\", SimplePostTool.appendParam(DEFAULT_POST_URL, params));\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      String params = System.getProperty(\"params\", \"\");\n      urlStr = System.getProperty(\"url\", SimplePostTool.appendParam(DEFAULT_POST_URL, params));\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a57a7f5c2a6c4358d4e71c6eb262472e33c21661","date":1358134270,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","sourceNew":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      String params = System.getProperty(\"params\", \"\");\n      urlStr = System.getProperty(\"url\", DEFAULT_POST_URL);\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      String params = System.getProperty(\"params\", \"\");\n      urlStr = System.getProperty(\"url\", SimplePostTool.appendParam(DEFAULT_POST_URL, params));\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","bugFix":["c2c3a504730329ae644b009dee43024116605d47"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","sourceNew":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      String params = System.getProperty(\"params\", \"\");\n      urlStr = System.getProperty(\"url\", DEFAULT_POST_URL);\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      String params = System.getProperty(\"params\", \"\");\n      urlStr = System.getProperty(\"url\", SimplePostTool.appendParam(DEFAULT_POST_URL, params));\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4b0c778a4367a0beb23255e4c40aa96bfa0f48b","date":1414464516,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","sourceNew":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      String params = System.getProperty(\"params\", \"\");\n\n      String host = System.getProperty(\"host\", DEFAULT_POST_HOST);\n      String port = System.getProperty(\"port\", DEFAULT_POST_PORT);\n      String core = System.getProperty(\"c\", DEFAULT_POST_CORE);\n\n      urlStr = System.getProperty(\"url\", String.format(\"http://%s:%s/solr/%s/update\", host, port, core));\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      String params = System.getProperty(\"params\", \"\");\n      urlStr = System.getProperty(\"url\", DEFAULT_POST_URL);\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f1e77b291a95ac8ab154e45401fd7e374cfd880","date":1414490333,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","sourceNew":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      String params = System.getProperty(\"params\", \"\");\n\n      String host = System.getProperty(\"host\", DEFAULT_POST_HOST);\n      String port = System.getProperty(\"port\", DEFAULT_POST_PORT);\n      String core = System.getProperty(\"c\", DEFAULT_POST_CORE);\n\n      urlStr = System.getProperty(\"url\", String.format(\"http://%s:%s/solr/%s/update\", host, port, core, Locale.ROOT));\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      String params = System.getProperty(\"params\", \"\");\n\n      String host = System.getProperty(\"host\", DEFAULT_POST_HOST);\n      String port = System.getProperty(\"port\", DEFAULT_POST_PORT);\n      String core = System.getProperty(\"c\", DEFAULT_POST_CORE);\n\n      urlStr = System.getProperty(\"url\", String.format(\"http://%s:%s/solr/%s/update\", host, port, core));\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9d35354874f2eceac71c71b652fbface5264339","date":1414515025,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","sourceNew":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      String params = System.getProperty(\"params\", \"\");\n\n      String host = System.getProperty(\"host\", DEFAULT_POST_HOST);\n      String port = System.getProperty(\"port\", DEFAULT_POST_PORT);\n      String core = System.getProperty(\"c\", DEFAULT_POST_CORE);\n\n      urlStr = System.getProperty(\"url\", String.format(Locale.ROOT, \"http://%s:%s/solr/%s/update\", host, port, core));\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      String params = System.getProperty(\"params\", \"\");\n\n      String host = System.getProperty(\"host\", DEFAULT_POST_HOST);\n      String port = System.getProperty(\"port\", DEFAULT_POST_PORT);\n      String core = System.getProperty(\"c\", DEFAULT_POST_CORE);\n\n      urlStr = System.getProperty(\"url\", String.format(\"http://%s:%s/solr/%s/update\", host, port, core, Locale.ROOT));\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b039594f79f0a75b62bbbcc9e21b3d1a888c59f","date":1418714259,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","sourceNew":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      \n      String params = System.getProperty(\"params\", \"\");\n\n      String host = System.getProperty(\"host\", DEFAULT_POST_HOST);\n      String port = System.getProperty(\"port\", DEFAULT_POST_PORT);\n      String core = System.getProperty(\"c\");\n      \n      urlStr = System.getProperty(\"url\");\n      \n      if (urlStr == null && core == null) {\n        fatal(\"Specifying either url or core/collection is mandatory.\\n\" + USAGE_STRING_SHORT);\n      }\n      \n      if(urlStr == null) {\n        urlStr = String.format(Locale.ROOT, \"http://%s:%s/solr/%s/update\", host, port, core);\n      }\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      String params = System.getProperty(\"params\", \"\");\n\n      String host = System.getProperty(\"host\", DEFAULT_POST_HOST);\n      String port = System.getProperty(\"port\", DEFAULT_POST_PORT);\n      String core = System.getProperty(\"c\", DEFAULT_POST_CORE);\n\n      urlStr = System.getProperty(\"url\", String.format(Locale.ROOT, \"http://%s:%s/solr/%s/update\", host, port, core));\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ed1f5038d985eaf26ae779edc703a309549ac24","date":1452367821,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","sourceNew":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      \n      String params = System.getProperty(\"params\", \"\");\n\n      String host = System.getProperty(\"host\", DEFAULT_POST_HOST);\n      String port = System.getProperty(\"port\", DEFAULT_POST_PORT);\n      String core = System.getProperty(\"c\");\n      \n      urlStr = System.getProperty(\"url\");\n      \n      if (urlStr == null && core == null) {\n        fatal(\"Specifying either url or core/collection is mandatory.\\n\" + USAGE_STRING_SHORT);\n      }\n      \n      if(urlStr == null) {\n        urlStr = String.format(Locale.ROOT, \"http://%s:%s/solr/%s/update\", host, port, core);\n      }\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      String format = System.getProperty(\"format\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, format, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      \n      String params = System.getProperty(\"params\", \"\");\n\n      String host = System.getProperty(\"host\", DEFAULT_POST_HOST);\n      String port = System.getProperty(\"port\", DEFAULT_POST_PORT);\n      String core = System.getProperty(\"c\");\n      \n      urlStr = System.getProperty(\"url\");\n      \n      if (urlStr == null && core == null) {\n        fatal(\"Specifying either url or core/collection is mandatory.\\n\" + USAGE_STRING_SHORT);\n      }\n      \n      if(urlStr == null) {\n        urlStr = String.format(Locale.ROOT, \"http://%s:%s/solr/%s/update\", host, port, core);\n      }\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30a0894b72a443a16598f92e83172b2a8ae1db03","date":1477094527,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","sourceNew":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      \n      String params = System.getProperty(\"params\", \"\");\n\n      String host = System.getProperty(\"host\", DEFAULT_POST_HOST);\n      String port = System.getProperty(\"port\", DEFAULT_POST_PORT);\n      String core = System.getProperty(\"c\");\n      \n      urlStr = System.getProperty(\"url\");\n      \n      if (urlStr == null && core == null) {\n        fatal(\"Specifying either url or core/collection is mandatory.\\n\" + USAGE_STRING_SHORT);\n      }\n      \n      if(urlStr == null) {\n        urlStr = String.format(Locale.ROOT, \"http://%s:%s/solr/%s/update\", host, port, core);\n      }\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      String user = null;\n      if (url.getUserInfo() != null && url.getUserInfo().trim().length() > 0) {\n        user = url.getUserInfo().split(\":\")[0];\n      } else if (System.getProperty(BASIC_AUTH) != null) {\n        user = System.getProperty(BASIC_AUTH).trim().split(\":\")[0];\n      }\n      if (user != null)\n        info(\"Basic Authentication enabled, user=\" + user);\n      \n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      String format = System.getProperty(\"format\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, format, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      \n      String params = System.getProperty(\"params\", \"\");\n\n      String host = System.getProperty(\"host\", DEFAULT_POST_HOST);\n      String port = System.getProperty(\"port\", DEFAULT_POST_PORT);\n      String core = System.getProperty(\"c\");\n      \n      urlStr = System.getProperty(\"url\");\n      \n      if (urlStr == null && core == null) {\n        fatal(\"Specifying either url or core/collection is mandatory.\\n\" + USAGE_STRING_SHORT);\n      }\n      \n      if(urlStr == null) {\n        urlStr = String.format(Locale.ROOT, \"http://%s:%s/solr/%s/update\", host, port, core);\n      }\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      String format = System.getProperty(\"format\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, format, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","sourceNew":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      \n      String params = System.getProperty(\"params\", \"\");\n\n      String host = System.getProperty(\"host\", DEFAULT_POST_HOST);\n      String port = System.getProperty(\"port\", DEFAULT_POST_PORT);\n      String core = System.getProperty(\"c\");\n      \n      urlStr = System.getProperty(\"url\");\n      \n      if (urlStr == null && core == null) {\n        fatal(\"Specifying either url or core/collection is mandatory.\\n\" + USAGE_STRING_SHORT);\n      }\n      \n      if(urlStr == null) {\n        urlStr = String.format(Locale.ROOT, \"http://%s:%s/solr/%s/update\", host, port, core);\n      }\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      String user = null;\n      if (url.getUserInfo() != null && url.getUserInfo().trim().length() > 0) {\n        user = url.getUserInfo().split(\":\")[0];\n      } else if (System.getProperty(BASIC_AUTH) != null) {\n        user = System.getProperty(BASIC_AUTH).trim().split(\":\")[0];\n      }\n      if (user != null)\n        info(\"Basic Authentication enabled, user=\" + user);\n      \n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      String format = System.getProperty(\"format\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, format, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      \n      String params = System.getProperty(\"params\", \"\");\n\n      String host = System.getProperty(\"host\", DEFAULT_POST_HOST);\n      String port = System.getProperty(\"port\", DEFAULT_POST_PORT);\n      String core = System.getProperty(\"c\");\n      \n      urlStr = System.getProperty(\"url\");\n      \n      if (urlStr == null && core == null) {\n        fatal(\"Specifying either url or core/collection is mandatory.\\n\" + USAGE_STRING_SHORT);\n      }\n      \n      if(urlStr == null) {\n        urlStr = String.format(Locale.ROOT, \"http://%s:%s/solr/%s/update\", host, port, core);\n      }\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      String format = System.getProperty(\"format\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, format, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SimplePostTool#parseArgsAndInit(String[]).mjava","sourceNew":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n\n      String params = System.getProperty(\"params\", \"\");\n\n      String host = System.getProperty(\"host\", DEFAULT_POST_HOST);\n      String port = System.getProperty(\"port\", DEFAULT_POST_PORT);\n      String core = System.getProperty(\"c\");\n\n      urlStr = System.getProperty(\"url\");\n\n      if (urlStr == null && core == null) {\n        fatal(\"Specifying either url or core/collection is mandatory.\\n\" + USAGE_STRING_SHORT);\n      }\n\n      if(urlStr == null) {\n        urlStr = String.format(Locale.ROOT, \"http://%s:%s/solr/%s/update\", host, port, core);\n      }\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      String user = null;\n      if (url.getUserInfo() != null && url.getUserInfo().trim().length() > 0) {\n        user = url.getUserInfo().split(\":\")[0];\n      } else if (System.getProperty(BASIC_AUTH) != null) {\n        user = System.getProperty(BASIC_AUTH).trim().split(\":\")[0];\n      }\n      if (user != null)\n        info(\"Basic Authentication enabled, user=\" + user);\n\n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      String format = System.getProperty(\"format\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? CLIO.getOutStream() : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n\n      return new SimplePostTool(mode, url, auto, type, format, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Parses incoming arguments and system params and initializes the tool\n   * @param args the incoming cmd line args\n   * @return an instance of SimplePostTool\n   */\n  protected static SimplePostTool parseArgsAndInit(String[] args) {\n    String urlStr = null;\n    try {\n      // Parse args\n      final String mode = System.getProperty(\"data\", DEFAULT_DATA_MODE);\n      if (! DATA_MODES.contains(mode)) {\n        fatal(\"System Property 'data' is not valid for this tool: \" + mode);\n      }\n      \n      String params = System.getProperty(\"params\", \"\");\n\n      String host = System.getProperty(\"host\", DEFAULT_POST_HOST);\n      String port = System.getProperty(\"port\", DEFAULT_POST_PORT);\n      String core = System.getProperty(\"c\");\n      \n      urlStr = System.getProperty(\"url\");\n      \n      if (urlStr == null && core == null) {\n        fatal(\"Specifying either url or core/collection is mandatory.\\n\" + USAGE_STRING_SHORT);\n      }\n      \n      if(urlStr == null) {\n        urlStr = String.format(Locale.ROOT, \"http://%s:%s/solr/%s/update\", host, port, core);\n      }\n      urlStr = SimplePostTool.appendParam(urlStr, params);\n      URL url = new URL(urlStr);\n      String user = null;\n      if (url.getUserInfo() != null && url.getUserInfo().trim().length() > 0) {\n        user = url.getUserInfo().split(\":\")[0];\n      } else if (System.getProperty(BASIC_AUTH) != null) {\n        user = System.getProperty(BASIC_AUTH).trim().split(\":\")[0];\n      }\n      if (user != null)\n        info(\"Basic Authentication enabled, user=\" + user);\n      \n      boolean auto = isOn(System.getProperty(\"auto\", DEFAULT_AUTO));\n      String type = System.getProperty(\"type\");\n      String format = System.getProperty(\"format\");\n      // Recursive\n      int recursive = 0;\n      String r = System.getProperty(\"recursive\", DEFAULT_RECURSIVE);\n      try {\n        recursive = Integer.parseInt(r);\n      } catch(Exception e) {\n        if (isOn(r))\n          recursive = DATA_MODE_WEB.equals(mode)?1:999;\n      }\n      // Delay\n      int delay = DATA_MODE_WEB.equals(mode) ? DEFAULT_WEB_DELAY : 0;\n      try {\n        delay = Integer.parseInt(System.getProperty(\"delay\", \"\"+delay));\n      } catch(Exception e) { }\n      OutputStream out = isOn(System.getProperty(\"out\", DEFAULT_OUT)) ? System.out : null;\n      String fileTypes = System.getProperty(\"filetypes\", DEFAULT_FILE_TYPES);\n      boolean commit = isOn(System.getProperty(\"commit\",DEFAULT_COMMIT));\n      boolean optimize = isOn(System.getProperty(\"optimize\",DEFAULT_OPTIMIZE));\n      \n      return new SimplePostTool(mode, url, auto, type, format, recursive, delay, fileTypes, out, commit, optimize, args);\n    } catch (MalformedURLException e) {\n      fatal(\"System Property 'url' is not a valid URL: \" + urlStr);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ed1f5038d985eaf26ae779edc703a309549ac24":["8b039594f79f0a75b62bbbcc9e21b3d1a888c59f"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"4f1e77b291a95ac8ab154e45401fd7e374cfd880":["b4b0c778a4367a0beb23255e4c40aa96bfa0f48b"],"30a0894b72a443a16598f92e83172b2a8ae1db03":["4ed1f5038d985eaf26ae779edc703a309549ac24"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["c2c3a504730329ae644b009dee43024116605d47","a57a7f5c2a6c4358d4e71c6eb262472e33c21661"],"a57a7f5c2a6c4358d4e71c6eb262472e33c21661":["c2c3a504730329ae644b009dee43024116605d47"],"c2c3a504730329ae644b009dee43024116605d47":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b039594f79f0a75b62bbbcc9e21b3d1a888c59f":["b9d35354874f2eceac71c71b652fbface5264339"],"b4b0c778a4367a0beb23255e4c40aa96bfa0f48b":["a57a7f5c2a6c4358d4e71c6eb262472e33c21661"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c2c3a504730329ae644b009dee43024116605d47"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4ed1f5038d985eaf26ae779edc703a309549ac24","30a0894b72a443a16598f92e83172b2a8ae1db03"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["30a0894b72a443a16598f92e83172b2a8ae1db03"],"b9d35354874f2eceac71c71b652fbface5264339":["4f1e77b291a95ac8ab154e45401fd7e374cfd880"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"]},"commit2Childs":{"4ed1f5038d985eaf26ae779edc703a309549ac24":["30a0894b72a443a16598f92e83172b2a8ae1db03","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"4f1e77b291a95ac8ab154e45401fd7e374cfd880":["b9d35354874f2eceac71c71b652fbface5264339"],"30a0894b72a443a16598f92e83172b2a8ae1db03":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"c2c3a504730329ae644b009dee43024116605d47":["616c1830142ff5c1ddedec1ed898733b73c8e23b","8917bfede3b4ca30f4305c1e391e9218959cd723","a57a7f5c2a6c4358d4e71c6eb262472e33c21661","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"a57a7f5c2a6c4358d4e71c6eb262472e33c21661":["8917bfede3b4ca30f4305c1e391e9218959cd723","b4b0c778a4367a0beb23255e4c40aa96bfa0f48b"],"8b039594f79f0a75b62bbbcc9e21b3d1a888c59f":["4ed1f5038d985eaf26ae779edc703a309549ac24"],"b4b0c778a4367a0beb23255e4c40aa96bfa0f48b":["4f1e77b291a95ac8ab154e45401fd7e374cfd880"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["616c1830142ff5c1ddedec1ed898733b73c8e23b","c2c3a504730329ae644b009dee43024116605d47","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b9d35354874f2eceac71c71b652fbface5264339":["8b039594f79f0a75b62bbbcc9e21b3d1a888c59f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","8917bfede3b4ca30f4305c1e391e9218959cd723","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}