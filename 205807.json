{"path":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#listSnapshots(SolrZkClient,String).mjava","commits":[{"id":"424ac616f0aeeb2a3c8b6b94084255a0bcab9628","date":1477057622,"type":0,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#listSnapshots(SolrZkClient,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method returns the {@linkplain CollectionSnapshotMetaData} for each named snapshot for the specified collection in Zookeeper.\n   *\n   * @param zkClient Zookeeper client\n   * @param collectionName The name of the collection\n   * @return the {@linkplain CollectionSnapshotMetaData} for each named snapshot\n   * @throws InterruptedException In case of thread interruption.\n   * @throws KeeperException In case of Zookeeper error\n   */\n  public static Collection<CollectionSnapshotMetaData> listSnapshots(SolrZkClient zkClient, String collectionName)\n      throws InterruptedException, KeeperException {\n    Collection<CollectionSnapshotMetaData> result = new ArrayList<>();\n    String zkPath = getSnapshotMetaDataZkPath(collectionName, Optional.empty());\n\n    try {\n      Collection<String> snapshots = zkClient.getChildren(zkPath, null, true);\n      for (String snapshot : snapshots) {\n        Optional<CollectionSnapshotMetaData> s = getCollectionLevelSnapshot(zkClient, collectionName, snapshot);\n        if (s.isPresent()) {\n          result.add(s.get());\n        }\n      }\n    } catch (KeeperException ex) {\n      // Gracefully handle the case when the zk node doesn't exist (e.g. due to a concurrent delete collection operation).\n      if ( ex.code() != KeeperException.Code.NONODE ) {\n        throw ex;\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/snapshots/SolrSnapshotManager#listSnapshots(SolrZkClient,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method returns the {@linkplain CollectionSnapshotMetaData} for each named snapshot for the specified collection in Zookeeper.\n   *\n   * @param zkClient Zookeeper client\n   * @param collectionName The name of the collection\n   * @return the {@linkplain CollectionSnapshotMetaData} for each named snapshot\n   * @throws InterruptedException In case of thread interruption.\n   * @throws KeeperException In case of Zookeeper error\n   */\n  public static Collection<CollectionSnapshotMetaData> listSnapshots(SolrZkClient zkClient, String collectionName)\n      throws InterruptedException, KeeperException {\n    Collection<CollectionSnapshotMetaData> result = new ArrayList<>();\n    String zkPath = getSnapshotMetaDataZkPath(collectionName, Optional.empty());\n\n    try {\n      Collection<String> snapshots = zkClient.getChildren(zkPath, null, true);\n      for (String snapshot : snapshots) {\n        Optional<CollectionSnapshotMetaData> s = getCollectionLevelSnapshot(zkClient, collectionName, snapshot);\n        if (s.isPresent()) {\n          result.add(s.get());\n        }\n      }\n    } catch (KeeperException ex) {\n      // Gracefully handle the case when the zk node doesn't exist (e.g. due to a concurrent delete collection operation).\n      if ( ex.code() != KeeperException.Code.NONODE ) {\n        throw ex;\n      }\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","424ac616f0aeeb2a3c8b6b94084255a0bcab9628"],"424ac616f0aeeb2a3c8b6b94084255a0bcab9628":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["424ac616f0aeeb2a3c8b6b94084255a0bcab9628"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","424ac616f0aeeb2a3c8b6b94084255a0bcab9628"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"424ac616f0aeeb2a3c8b6b94084255a0bcab9628":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}