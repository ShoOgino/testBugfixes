{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#getAssignedId(CloudState,String,ZkNodeProps).mjava","commits":[{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":1,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#getAssignedId(CloudState,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#getAssignedId(CloudState,String,CoreState).mjava","sourceNew":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final CloudState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.get(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.get(ZkStateReader.CORE_NAME_PROP);\n        Map<String, Slice> slices = state.getSlices(coreState.get(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices.values()) {\n            if (slice.getShards().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","sourceOld":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final CloudState state, final String nodeName,\n          final CoreState coreState) {\n        final String key = coreState.getProperties().get(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.getProperties().get(ZkStateReader.CORE_NAME_PROP);\n        Map<String, Slice> slices = state.getSlices(coreState.getCollectionName());\n        if (slices != null) {\n          for (Slice slice : slices.values()) {\n            if (slice.getShards().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedId(ClusterState,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#getAssignedId(CloudState,String,ZkNodeProps).mjava","sourceNew":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final ClusterState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.get(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.get(ZkStateReader.CORE_NAME_PROP);\n        Map<String, Slice> slices = state.getSlices(coreState.get(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices.values()) {\n            if (slice.getShards().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","sourceOld":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final CloudState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.get(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.get(ZkStateReader.CORE_NAME_PROP);\n        Map<String, Slice> slices = state.getSlices(coreState.get(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices.values()) {\n            if (slice.getShards().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer.ClusterStateUpdater#getAssignedId(ClusterState,String,ZkNodeProps).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#getAssignedId(CloudState,String,ZkNodeProps).mjava","sourceNew":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final ClusterState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.get(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.get(ZkStateReader.CORE_NAME_PROP);\n        Map<String, Slice> slices = state.getSlices(coreState.get(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices.values()) {\n            if (slice.getShards().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","sourceOld":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final CloudState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.get(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.get(ZkStateReader.CORE_NAME_PROP);\n        Map<String, Slice> slices = state.getSlices(coreState.get(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices.values()) {\n            if (slice.getShards().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/Overseer.CloudStateUpdater#getAssignedId(CloudState,String,ZkNodeProps).mjava","sourceNew":null,"sourceOld":"      /*\n       * Return an already assigned id or null if not assigned\n       */\n      private String getAssignedId(final CloudState state, final String nodeName,\n          final ZkNodeProps coreState) {\n        final String key = coreState.get(ZkStateReader.NODE_NAME_PROP) + \"_\" +  coreState.get(ZkStateReader.CORE_NAME_PROP);\n        Map<String, Slice> slices = state.getSlices(coreState.get(ZkStateReader.COLLECTION_PROP));\n        if (slices != null) {\n          for (Slice slice : slices.values()) {\n            if (slice.getShards().get(key) != null) {\n              return slice.getName();\n            }\n          }\n        }\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["a5093a9e893633cc091cf2f729d7863671c2b715"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a5093a9e893633cc091cf2f729d7863671c2b715","3f767f8c99eaedb984df754fe61f21c5de260f94"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a5093a9e893633cc091cf2f729d7863671c2b715","3f767f8c99eaedb984df754fe61f21c5de260f94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f767f8c99eaedb984df754fe61f21c5de260f94"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5093a9e893633cc091cf2f729d7863671c2b715"],"a5093a9e893633cc091cf2f729d7863671c2b715":["3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}