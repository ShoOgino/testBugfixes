{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#pruneDups(List[OneSyn]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#pruneDups(List[OneSyn]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#pruneDups(List[OneSyn]).mjava","sourceNew":"  private void pruneDups(List<OneSyn> syns) {\n    Set<String> seen = new HashSet<String>();\n    for(OneSyn syn : syns) {\n      int idx = 0;\n      while(idx < syn.out.size()) {\n        String out = syn.out.get(idx);\n        if (!seen.contains(out)) {\n          seen.add(out);\n          idx++;\n        } else {\n          syn.out.remove(idx);\n        }\n      }\n      seen.clear();\n    }\n  }\n\n","sourceOld":"  private void pruneDups(List<OneSyn> syns) {\n    Set<String> seen = new HashSet<String>();\n    for(OneSyn syn : syns) {\n      int idx = 0;\n      while(idx < syn.out.size()) {\n        String out = syn.out.get(idx);\n        if (!seen.contains(out)) {\n          seen.add(out);\n          idx++;\n        } else {\n          syn.out.remove(idx);\n        }\n      }\n      seen.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#pruneDups(List[OneSyn]).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymMapFilter#pruneDups(List[OneSyn]).mjava","sourceNew":"  private void pruneDups(List<OneSyn> syns) {\n    Set<String> seen = new HashSet<>();\n    for(OneSyn syn : syns) {\n      int idx = 0;\n      while(idx < syn.out.size()) {\n        String out = syn.out.get(idx);\n        if (!seen.contains(out)) {\n          seen.add(out);\n          idx++;\n        } else {\n          syn.out.remove(idx);\n        }\n      }\n      seen.clear();\n    }\n  }\n\n","sourceOld":"  private void pruneDups(List<OneSyn> syns) {\n    Set<String> seen = new HashSet<String>();\n    for(OneSyn syn : syns) {\n      int idx = 0;\n      while(idx < syn.out.size()) {\n        String out = syn.out.get(idx);\n        if (!seen.contains(out)) {\n          seen.add(out);\n          idx++;\n        } else {\n          syn.out.remove(idx);\n        }\n      }\n      seen.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}