{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNormalizeSum().mjava","commits":[{"id":"300ececaee7f8a08752bcba8e497264491a1853e","date":1511807923,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNormalizeSum().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNormalizeSum() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n                       \"a=normalizeSum(matrix(array(1,2,3), array(4,5,6))), \" +\n                       \"b=normalizeSum(array(1,2,3)),\" +\n                       \"c=normalizeSum(array(1,2,3), 100))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n    assertEquals(out.size(), 2);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 0.16666666666666666, 0.0001);\n    assertEquals(array1.get(1).doubleValue(), 0.3333333333333333, 0.00001);\n    assertEquals(array1.get(2).doubleValue(), 0.5, 0.0001);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 0.26666666666666666, 0.0001);\n    assertEquals(array2.get(1).doubleValue(), 0.3333333333333333, 0.0001);\n    assertEquals(array2.get(2).doubleValue(), 0.4, 0.0001);\n\n    List<Number> array3 = (List<Number>)tuples.get(0).get(\"b\");\n    assertEquals(array3.size(), 3);\n    assertEquals(array3.get(0).doubleValue(), 0.16666666666666666, 0.0001);\n    assertEquals(array3.get(1).doubleValue(), 0.3333333333333333, 0.0001);\n    assertEquals(array3.get(2).doubleValue(), 0.5, 0.0001);\n\n    List<Number> array4 = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(array4.size(), 3);\n    assertEquals(array4.get(0).doubleValue(), 16.666666666666666, 0.0001);\n    assertEquals(array4.get(1).doubleValue(), 33.33333333333333, 0.00001);\n    assertEquals(array4.get(2).doubleValue(), 50, 0.0001);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0e53d133180083c87dcb8114b087cfe6bfc7bce","date":1511856078,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNormalizeSum().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNormalizeSum() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n                       \"a=normalizeSum(matrix(array(1,2,3), array(4,5,6))), \" +\n                       \"b=normalizeSum(array(1,2,3)),\" +\n                       \"c=normalizeSum(array(1,2,3), 100))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n    assertEquals(out.size(), 2);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 0.16666666666666666, 0.0001);\n    assertEquals(array1.get(1).doubleValue(), 0.3333333333333333, 0.00001);\n    assertEquals(array1.get(2).doubleValue(), 0.5, 0.0001);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 0.26666666666666666, 0.0001);\n    assertEquals(array2.get(1).doubleValue(), 0.3333333333333333, 0.0001);\n    assertEquals(array2.get(2).doubleValue(), 0.4, 0.0001);\n\n    List<Number> array3 = (List<Number>)tuples.get(0).get(\"b\");\n    assertEquals(array3.size(), 3);\n    assertEquals(array3.get(0).doubleValue(), 0.16666666666666666, 0.0001);\n    assertEquals(array3.get(1).doubleValue(), 0.3333333333333333, 0.0001);\n    assertEquals(array3.get(2).doubleValue(), 0.5, 0.0001);\n\n    List<Number> array4 = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(array4.size(), 3);\n    assertEquals(array4.get(0).doubleValue(), 16.666666666666666, 0.0001);\n    assertEquals(array4.get(1).doubleValue(), 33.33333333333333, 0.00001);\n    assertEquals(array4.get(2).doubleValue(), 50, 0.0001);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testNormalizeSum().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testNormalizeSum().mjava","sourceNew":"  @Test\n  public void testNormalizeSum() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n                       \"a=normalizeSum(matrix(array(1,2,3), array(4,5,6))), \" +\n                       \"b=normalizeSum(array(1,2,3)),\" +\n                       \"c=normalizeSum(array(1,2,3), 100))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n    assertEquals(out.size(), 2);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 0.16666666666666666, 0.0001);\n    assertEquals(array1.get(1).doubleValue(), 0.3333333333333333, 0.00001);\n    assertEquals(array1.get(2).doubleValue(), 0.5, 0.0001);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 0.26666666666666666, 0.0001);\n    assertEquals(array2.get(1).doubleValue(), 0.3333333333333333, 0.0001);\n    assertEquals(array2.get(2).doubleValue(), 0.4, 0.0001);\n\n    List<Number> array3 = (List<Number>)tuples.get(0).get(\"b\");\n    assertEquals(array3.size(), 3);\n    assertEquals(array3.get(0).doubleValue(), 0.16666666666666666, 0.0001);\n    assertEquals(array3.get(1).doubleValue(), 0.3333333333333333, 0.0001);\n    assertEquals(array3.get(2).doubleValue(), 0.5, 0.0001);\n\n    List<Number> array4 = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(array4.size(), 3);\n    assertEquals(array4.get(0).doubleValue(), 16.666666666666666, 0.0001);\n    assertEquals(array4.get(1).doubleValue(), 33.33333333333333, 0.00001);\n    assertEquals(array4.get(2).doubleValue(), 50, 0.0001);\n  }\n\n","sourceOld":"  @Test\n  public void testNormalizeSum() throws Exception {\n    String cexpr = \"let(echo=true, \" +\n                       \"a=normalizeSum(matrix(array(1,2,3), array(4,5,6))), \" +\n                       \"b=normalizeSum(array(1,2,3)),\" +\n                       \"c=normalizeSum(array(1,2,3), 100))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n    assertEquals(out.size(), 2);\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 0.16666666666666666, 0.0001);\n    assertEquals(array1.get(1).doubleValue(), 0.3333333333333333, 0.00001);\n    assertEquals(array1.get(2).doubleValue(), 0.5, 0.0001);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 0.26666666666666666, 0.0001);\n    assertEquals(array2.get(1).doubleValue(), 0.3333333333333333, 0.0001);\n    assertEquals(array2.get(2).doubleValue(), 0.4, 0.0001);\n\n    List<Number> array3 = (List<Number>)tuples.get(0).get(\"b\");\n    assertEquals(array3.size(), 3);\n    assertEquals(array3.get(0).doubleValue(), 0.16666666666666666, 0.0001);\n    assertEquals(array3.get(1).doubleValue(), 0.3333333333333333, 0.0001);\n    assertEquals(array3.get(2).doubleValue(), 0.5, 0.0001);\n\n    List<Number> array4 = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(array4.size(), 3);\n    assertEquals(array4.get(0).doubleValue(), 16.666666666666666, 0.0001);\n    assertEquals(array4.get(1).doubleValue(), 33.33333333333333, 0.00001);\n    assertEquals(array4.get(2).doubleValue(), 50, 0.0001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"300ececaee7f8a08752bcba8e497264491a1853e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","300ececaee7f8a08752bcba8e497264491a1853e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"]},"commit2Childs":{"300ececaee7f8a08752bcba8e497264491a1853e":["f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["300ececaee7f8a08752bcba8e497264491a1853e","f0e53d133180083c87dcb8114b087cfe6bfc7bce"],"f0e53d133180083c87dcb8114b087cfe6bfc7bce":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}