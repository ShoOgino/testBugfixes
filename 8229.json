{"path":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(String,ByteBuffer).mjava","commits":[{"id":"e82d485dfb2d8c31baefb7ef96b64021a1ffa170","date":1425903839,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(String,ByteBuffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(String,byte[]).mjava","sourceNew":"  /**\n   * Try with all signatures and return the name of the signature that matched\n   */\n  public String verify(String sig, ByteBuffer data) {\n    exception = null;\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), data);\n        log.info(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        exception = e;\n        log.info(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Try with all signatures and return the name of the signature that matched\n   */\n  public String verify(String sig, byte[] data) {\n\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), ByteBuffer.wrap(data));\n        log.info(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        log.info(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(String,ByteBuffer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Try with all signatures and return the name of the signature that matched\n   */\n  public String verify(String sig, ByteBuffer data) {\n    exception = null;\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), data);\n        log.info(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        exception = e;\n        log.info(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74","date":1563736916,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(String,ByteBuffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(String,ByteBuffer).mjava","sourceNew":"  /**\n   * Try with all signatures and return the name of the signature that matched\n   */\n  public String verify(String sig, ByteBuffer data) {\n    exception = null;\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), data);\n        log.debug(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        exception = e;\n        log.debug(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Try with all signatures and return the name of the signature that matched\n   */\n  public String verify(String sig, ByteBuffer data) {\n    exception = null;\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), data);\n        log.info(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        exception = e;\n        log.info(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(String,ByteBuffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(String,ByteBuffer).mjava","sourceNew":"  /**\n   * Try with all signatures and return the name of the signature that matched\n   */\n  public String verify(String sig, ByteBuffer data) {\n    exception = null;\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), data);\n        log.info(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        exception = e;\n        log.info(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Try with all signatures and return the name of the signature that matched\n   */\n  public String verify(String sig, ByteBuffer data) {\n    exception = null;\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), data);\n        log.debug(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        exception = e;\n        log.debug(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(String,ByteBuffer).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CryptoKeys#verify(String,ByteBuffer).mjava","sourceNew":"  /**\n   * Try with all signatures and return the name of the signature that matched\n   */\n  public String verify(String sig, ByteBuffer data) {\n    exception = null;\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), data);\n        log.debug(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        exception = e;\n        log.debug(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Try with all signatures and return the name of the signature that matched\n   */\n  public String verify(String sig, ByteBuffer data) {\n    exception = null;\n    for (Map.Entry<String, PublicKey> entry : keys.entrySet()) {\n      boolean verified;\n      try {\n        verified = CryptoKeys.verify(entry.getValue(), Base64.base64ToByteArray(sig), data);\n        log.info(\"verified {} \", verified);\n        if (verified) return entry.getKey();\n      } catch (Exception e) {\n        exception = e;\n        log.info(\"NOT verified  \");\n      }\n\n    }\n\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e82d485dfb2d8c31baefb7ef96b64021a1ffa170"],"e82d485dfb2d8c31baefb7ef96b64021a1ffa170":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["e82d485dfb2d8c31baefb7ef96b64021a1ffa170"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8476949555f799dff381770c01cfad051a264487":["c44cc06c26e456fe9c215072b79fce30babe3975"],"c44cc06c26e456fe9c215072b79fce30babe3975":["d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8476949555f799dff381770c01cfad051a264487"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"e82d485dfb2d8c31baefb7ef96b64021a1ffa170":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74"],"d52ea0bca71d3b5f5fd37c12585ccd9309f8ea74":["c44cc06c26e456fe9c215072b79fce30babe3975"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e82d485dfb2d8c31baefb7ef96b64021a1ffa170"],"8476949555f799dff381770c01cfad051a264487":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c44cc06c26e456fe9c215072b79fce30babe3975":["8476949555f799dff381770c01cfad051a264487"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}