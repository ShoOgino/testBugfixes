{"path":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testListenerCalled().mjava","commits":[{"id":"c2045b132a2396bb23dff28d2d9f349a6907d36e","date":1367513076,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testListenerCalled().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestNRTManager#testListenerCalled().mjava","sourceNew":"  public void testListenerCalled() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);\n    SearcherManager sm = new SearcherManager(iw, true, new SearcherFactory());\n    sm.addListener(new ReferenceManager.RefreshListener() {\n      @Override\n      public void beforeRefresh() {\n      }\n      @Override\n      public void afterRefresh(boolean didRefresh) {\n        if (didRefresh) {\n          afterRefreshCalled.set(true);\n        }\n      }\n    });\n    iw.addDocument(new Document());\n    iw.commit();\n    assertFalse(afterRefreshCalled.get());\n    sm.maybeRefreshBlocking();\n    assertTrue(afterRefreshCalled.get());\n    sm.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testListenerCalled() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);\n    NRTManager sm = new NRTManager(new NRTManager.TrackingIndexWriter(iw),new SearcherFactory());\n    sm.addListener(new ReferenceManager.RefreshListener() {\n      @Override\n      public void beforeRefresh() {\n      }\n      @Override\n      public void afterRefresh(boolean didRefresh) {\n        if (didRefresh) {\n          afterRefreshCalled.set(true);\n        }\n      }\n    });\n    iw.addDocument(new Document());\n    iw.commit();\n    assertFalse(afterRefreshCalled.get());\n    sm.maybeRefreshBlocking();\n    assertTrue(afterRefreshCalled.get());\n    sm.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testListenerCalled().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testListenerCalled().mjava","sourceNew":"  public void testListenerCalled() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);\n    SearcherManager sm = new SearcherManager(iw, true, new SearcherFactory());\n    sm.addListener(new ReferenceManager.RefreshListener() {\n      @Override\n      public void beforeRefresh() {\n      }\n      @Override\n      public void afterRefresh(boolean didRefresh) {\n        if (didRefresh) {\n          afterRefreshCalled.set(true);\n        }\n      }\n    });\n    iw.addDocument(new Document());\n    iw.commit();\n    assertFalse(afterRefreshCalled.get());\n    sm.maybeRefreshBlocking();\n    assertTrue(afterRefreshCalled.get());\n    sm.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  public void testListenerCalled() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);\n    SearcherManager sm = new SearcherManager(iw, true, new SearcherFactory());\n    sm.addListener(new ReferenceManager.RefreshListener() {\n      @Override\n      public void beforeRefresh() {\n      }\n      @Override\n      public void afterRefresh(boolean didRefresh) {\n        if (didRefresh) {\n          afterRefreshCalled.set(true);\n        }\n      }\n    });\n    iw.addDocument(new Document());\n    iw.commit();\n    assertFalse(afterRefreshCalled.get());\n    sm.maybeRefreshBlocking();\n    assertTrue(afterRefreshCalled.get());\n    sm.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testListenerCalled().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testListenerCalled().mjava","sourceNew":"  public void testListenerCalled() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);\n    SearcherManager sm = new SearcherManager(iw, true, new SearcherFactory());\n    sm.addListener(new ReferenceManager.RefreshListener() {\n      @Override\n      public void beforeRefresh() {\n      }\n      @Override\n      public void afterRefresh(boolean didRefresh) {\n        if (didRefresh) {\n          afterRefreshCalled.set(true);\n        }\n      }\n    });\n    iw.addDocument(new Document());\n    iw.commit();\n    assertFalse(afterRefreshCalled.get());\n    sm.maybeRefreshBlocking();\n    assertTrue(afterRefreshCalled.get());\n    sm.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testListenerCalled() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, null));\n    final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);\n    SearcherManager sm = new SearcherManager(iw, true, new SearcherFactory());\n    sm.addListener(new ReferenceManager.RefreshListener() {\n      @Override\n      public void beforeRefresh() {\n      }\n      @Override\n      public void afterRefresh(boolean didRefresh) {\n        if (didRefresh) {\n          afterRefreshCalled.set(true);\n        }\n      }\n    });\n    iw.addDocument(new Document());\n    iw.commit();\n    assertFalse(afterRefreshCalled.get());\n    sm.maybeRefreshBlocking();\n    assertTrue(afterRefreshCalled.get());\n    sm.close();\n    iw.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b516a692d03225c8f0e81a13ceed2dc32bb457d","date":1453411951,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testListenerCalled().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestControlledRealTimeReopenThread#testListenerCalled().mjava","sourceNew":"  public void testListenerCalled() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);\n    SearcherManager sm = new SearcherManager(iw, new SearcherFactory());\n    sm.addListener(new ReferenceManager.RefreshListener() {\n      @Override\n      public void beforeRefresh() {\n      }\n      @Override\n      public void afterRefresh(boolean didRefresh) {\n        if (didRefresh) {\n          afterRefreshCalled.set(true);\n        }\n      }\n    });\n    iw.addDocument(new Document());\n    iw.commit();\n    assertFalse(afterRefreshCalled.get());\n    sm.maybeRefreshBlocking();\n    assertTrue(afterRefreshCalled.get());\n    sm.close();\n    iw.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testListenerCalled() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriter iw = new IndexWriter(dir, new IndexWriterConfig(null));\n    final AtomicBoolean afterRefreshCalled = new AtomicBoolean(false);\n    SearcherManager sm = new SearcherManager(iw, true, new SearcherFactory());\n    sm.addListener(new ReferenceManager.RefreshListener() {\n      @Override\n      public void beforeRefresh() {\n      }\n      @Override\n      public void afterRefresh(boolean didRefresh) {\n        if (didRefresh) {\n          afterRefreshCalled.set(true);\n        }\n      }\n    });\n    iw.addDocument(new Document());\n    iw.commit();\n    assertFalse(afterRefreshCalled.get());\n    sm.maybeRefreshBlocking();\n    assertTrue(afterRefreshCalled.get());\n    sm.close();\n    iw.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2045b132a2396bb23dff28d2d9f349a6907d36e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b516a692d03225c8f0e81a13ceed2dc32bb457d":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["c2045b132a2396bb23dff28d2d9f349a6907d36e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b516a692d03225c8f0e81a13ceed2dc32bb457d"]},"commit2Childs":{"c2045b132a2396bb23dff28d2d9f349a6907d36e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2045b132a2396bb23dff28d2d9f349a6907d36e"],"7b516a692d03225c8f0e81a13ceed2dc32bb457d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["7b516a692d03225c8f0e81a13ceed2dc32bb457d"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}