{"path":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema().mjava","commits":[{"id":"7d72e80cee24be385c713864a9f1f90be3744482","date":1417420925,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema().mjava","pathOld":"/dev/null","sourceNew":"  public ManagedIndexSchema getFreshManagedSchema() throws IOException, KeeperException, InterruptedException {\n    SolrResourceLoader resourceLoader = req.getCore().getResourceLoader();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader loader = (ZkSolrResourceLoader) resourceLoader;\n      InputStream in = resourceLoader.openResource(req.getSchema().getResourceName());\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema(req.getCore().getSolrConfig(),\n            req.getSchema().getResourceName() ,new InputSource(in),\n            true,\n            req.getSchema().getResourceName(),\n            version,new Object());\n      }else {\n        return (ManagedIndexSchema) req.getCore().getLatestSchema();\n      }\n\n    } else {\n      return (ManagedIndexSchema) req.getCore().getLatestSchema();\n    }\n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeeea2295d6355a29e259130a5c48ace73022d7c","date":1426569216,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema().mjava","sourceNew":"  public ManagedIndexSchema getFreshManagedSchema() throws IOException, KeeperException, InterruptedException {\n    SolrResourceLoader resourceLoader = req.getCore().getResourceLoader();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      InputStream in = resourceLoader.openResource(req.getSchema().getResourceName());\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema(req.getCore().getSolrConfig(),\n            req.getSchema().getResourceName() ,new InputSource(in),\n            true,\n            req.getSchema().getResourceName(),\n            version,new Object());\n      } else {\n        return (ManagedIndexSchema) req.getCore().getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) req.getCore().getLatestSchema();\n    }\n  }\n\n","sourceOld":"  public ManagedIndexSchema getFreshManagedSchema() throws IOException, KeeperException, InterruptedException {\n    SolrResourceLoader resourceLoader = req.getCore().getResourceLoader();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader loader = (ZkSolrResourceLoader) resourceLoader;\n      InputStream in = resourceLoader.openResource(req.getSchema().getResourceName());\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema(req.getCore().getSolrConfig(),\n            req.getSchema().getResourceName() ,new InputSource(in),\n            true,\n            req.getSchema().getResourceName(),\n            version,new Object());\n      }else {\n        return (ManagedIndexSchema) req.getCore().getLatestSchema();\n      }\n\n    } else {\n      return (ManagedIndexSchema) req.getCore().getLatestSchema();\n    }\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c7e8d59fbf173ad3326aa0452c248fb1e6c0b62","date":1426694087,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema().mjava","sourceNew":"  public ManagedIndexSchema getFreshManagedSchema() throws IOException, KeeperException, InterruptedException {\n    SolrResourceLoader resourceLoader = req.getCore().getResourceLoader();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      InputStream in = resourceLoader.openResource(req.getSchema().getResourceName());\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema\n            (req.getCore().getSolrConfig(), req.getSchema().getResourceName(), new InputSource(in), \n                true, req.getSchema().getResourceName(), version, req.getSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) req.getCore().getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) req.getCore().getLatestSchema();\n    }\n  }\n\n","sourceOld":"  public ManagedIndexSchema getFreshManagedSchema() throws IOException, KeeperException, InterruptedException {\n    SolrResourceLoader resourceLoader = req.getCore().getResourceLoader();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      InputStream in = resourceLoader.openResource(req.getSchema().getResourceName());\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema(req.getCore().getSolrConfig(),\n            req.getSchema().getResourceName() ,new InputSource(in),\n            true,\n            req.getSchema().getResourceName(),\n            version,new Object());\n      } else {\n        return (ManagedIndexSchema) req.getCore().getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) req.getCore().getLatestSchema();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema().mjava","sourceNew":"  public ManagedIndexSchema getFreshManagedSchema() throws IOException, KeeperException, InterruptedException {\n    SolrResourceLoader resourceLoader = req.getCore().getResourceLoader();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      InputStream in = resourceLoader.openResource(req.getSchema().getResourceName());\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema\n            (req.getCore().getSolrConfig(), req.getSchema().getResourceName(), new InputSource(in), \n                true, req.getSchema().getResourceName(), version, req.getSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) req.getCore().getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) req.getCore().getLatestSchema();\n    }\n  }\n\n","sourceOld":"  public ManagedIndexSchema getFreshManagedSchema() throws IOException, KeeperException, InterruptedException {\n    SolrResourceLoader resourceLoader = req.getCore().getResourceLoader();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      ZkSolrResourceLoader loader = (ZkSolrResourceLoader) resourceLoader;\n      InputStream in = resourceLoader.openResource(req.getSchema().getResourceName());\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema(req.getCore().getSolrConfig(),\n            req.getSchema().getResourceName() ,new InputSource(in),\n            true,\n            req.getSchema().getResourceName(),\n            version,new Object());\n      }else {\n        return (ManagedIndexSchema) req.getCore().getLatestSchema();\n      }\n\n    } else {\n      return (ManagedIndexSchema) req.getCore().getLatestSchema();\n    }\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"484264228e1de4c93d0f9ec7ad2181223b11889a","date":1460910418,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema().mjava","sourceNew":"  public ManagedIndexSchema getFreshManagedSchema() throws IOException, KeeperException, InterruptedException {\n    SolrResourceLoader resourceLoader = req.getCore().getResourceLoader();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      InputStream in = resourceLoader.openResource(req.getSchema().getResourceName());\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema\n            (req.getCore().getSolrConfig(), req.getSchema().getResourceName(), new InputSource(in),\n                true, req.getSchema().getResourceName(), version, req.getSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) req.getCore().getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) req.getCore().getLatestSchema();\n    }\n  }\n\n","sourceOld":"  public ManagedIndexSchema getFreshManagedSchema() throws IOException, KeeperException, InterruptedException {\n    SolrResourceLoader resourceLoader = req.getCore().getResourceLoader();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      InputStream in = resourceLoader.openResource(req.getSchema().getResourceName());\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema\n            (req.getCore().getSolrConfig(), req.getSchema().getResourceName(), new InputSource(in), \n                true, req.getSchema().getResourceName(), version, req.getSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) req.getCore().getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) req.getCore().getLatestSchema();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8cb57c50beb99a1245256e866350af8e5ea1f36","date":1460921840,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema().mjava","sourceNew":"  public ManagedIndexSchema getFreshManagedSchema() throws IOException, KeeperException, InterruptedException {\n    SolrResourceLoader resourceLoader = req.getCore().getResourceLoader();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      InputStream in = resourceLoader.openResource(req.getSchema().getResourceName());\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema\n            (req.getCore().getSolrConfig(), req.getSchema().getResourceName(), new InputSource(in),\n                true, req.getSchema().getResourceName(), version, req.getSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) req.getCore().getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) req.getCore().getLatestSchema();\n    }\n  }\n\n","sourceOld":"  public ManagedIndexSchema getFreshManagedSchema() throws IOException, KeeperException, InterruptedException {\n    SolrResourceLoader resourceLoader = req.getCore().getResourceLoader();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      InputStream in = resourceLoader.openResource(req.getSchema().getResourceName());\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema\n            (req.getCore().getSolrConfig(), req.getSchema().getResourceName(), new InputSource(in), \n                true, req.getSchema().getResourceName(), version, req.getSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) req.getCore().getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) req.getCore().getLatestSchema();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"734d38d5abe4f98cce936b31450702d597f6fc69","date":1467794285,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema().mjava","sourceNew":"  public static ManagedIndexSchema getFreshManagedSchema(SolrCore core) throws IOException,\n      KeeperException, InterruptedException {\n\n    SolrResourceLoader resourceLoader = core.getResourceLoader();\n    String name = core.getLatestSchema().getResourceName();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      InputStream in = resourceLoader.openResource(name);\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema(core.getSolrConfig(), name, new InputSource(in), true, name, version,\n            core.getLatestSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) core.getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) core.getLatestSchema();\n    }\n  }\n\n","sourceOld":"  public ManagedIndexSchema getFreshManagedSchema() throws IOException, KeeperException, InterruptedException {\n    SolrResourceLoader resourceLoader = req.getCore().getResourceLoader();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      InputStream in = resourceLoader.openResource(req.getSchema().getResourceName());\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema\n            (req.getCore().getSolrConfig(), req.getSchema().getResourceName(), new InputSource(in),\n                true, req.getSchema().getResourceName(), version, req.getSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) req.getCore().getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) req.getCore().getLatestSchema();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaManager#getFreshManagedSchema().mjava","sourceNew":null,"sourceOld":"  public ManagedIndexSchema getFreshManagedSchema() throws IOException, KeeperException, InterruptedException {\n    SolrResourceLoader resourceLoader = req.getCore().getResourceLoader();\n    if (resourceLoader instanceof ZkSolrResourceLoader) {\n      InputStream in = resourceLoader.openResource(req.getSchema().getResourceName());\n      if (in instanceof ZkSolrResourceLoader.ZkByteArrayInputStream) {\n        int version = ((ZkSolrResourceLoader.ZkByteArrayInputStream) in).getStat().getVersion();\n        log.info(\"managed schema loaded . version : {} \", version);\n        return new ManagedIndexSchema\n            (req.getCore().getSolrConfig(), req.getSchema().getResourceName(), new InputSource(in),\n                true, req.getSchema().getResourceName(), version, req.getSchema().getSchemaUpdateLock());\n      } else {\n        return (ManagedIndexSchema) req.getCore().getLatestSchema();\n      }\n    } else {\n      return (ManagedIndexSchema) req.getCore().getLatestSchema();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7d72e80cee24be385c713864a9f1f90be3744482","1c7e8d59fbf173ad3326aa0452c248fb1e6c0b62"],"1c7e8d59fbf173ad3326aa0452c248fb1e6c0b62":["eeeea2295d6355a29e259130a5c48ace73022d7c"],"7d72e80cee24be385c713864a9f1f90be3744482":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["7d72e80cee24be385c713864a9f1f90be3744482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"734d38d5abe4f98cce936b31450702d597f6fc69":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["1c7e8d59fbf173ad3326aa0452c248fb1e6c0b62","484264228e1de4c93d0f9ec7ad2181223b11889a"],"484264228e1de4c93d0f9ec7ad2181223b11889a":["1c7e8d59fbf173ad3326aa0452c248fb1e6c0b62"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f8cb57c50beb99a1245256e866350af8e5ea1f36","734d38d5abe4f98cce936b31450702d597f6fc69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["734d38d5abe4f98cce936b31450702d597f6fc69"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"7d72e80cee24be385c713864a9f1f90be3744482":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","eeeea2295d6355a29e259130a5c48ace73022d7c"],"1c7e8d59fbf173ad3326aa0452c248fb1e6c0b62":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f8cb57c50beb99a1245256e866350af8e5ea1f36","484264228e1de4c93d0f9ec7ad2181223b11889a"],"eeeea2295d6355a29e259130a5c48ace73022d7c":["1c7e8d59fbf173ad3326aa0452c248fb1e6c0b62"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d72e80cee24be385c713864a9f1f90be3744482"],"734d38d5abe4f98cce936b31450702d597f6fc69":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8cb57c50beb99a1245256e866350af8e5ea1f36":["734d38d5abe4f98cce936b31450702d597f6fc69","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"484264228e1de4c93d0f9ec7ad2181223b11889a":["f8cb57c50beb99a1245256e866350af8e5ea1f36"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}