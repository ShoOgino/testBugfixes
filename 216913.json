{"path":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // could return the number of docs deleted, but is that always possible to know???\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter().deleteDocuments(new Term(idField.getName(), idFieldType.toInternal(cmd.id)));\n\n    if (commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n  }\n\n","sourceOld":"  // could return the number of docs deleted, but is that always possible to know???\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter().deleteDocuments(new Term(idField.getName(), idFieldType.toInternal(cmd.id)));\n\n    if (commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // could return the number of docs deleted, but is that always possible to know???\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter().deleteDocuments(new Term(idField.getName(), idFieldType.toInternal(cmd.id)));\n\n    if (commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n  }\n\n","sourceOld":"  // could return the number of docs deleted, but is that always possible to know???\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter().deleteDocuments(new Term(idField.getName(), idFieldType.toInternal(cmd.id)));\n\n    if (commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // could return the number of docs deleted, but is that always possible to know???\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter().deleteDocuments(new Term(idField.getName(), idFieldType.toInternal(cmd.id)));\n\n    if (commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n  }\n\n","sourceOld":"  // could return the number of docs deleted, but is that always possible to know???\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter().deleteDocuments(new Term(idField.getName(), idFieldType.toInternal(cmd.id)));\n\n    if (commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"671279fa1676e7f2755c2745a25abd77a169f992","date":1312053489,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // could return the number of docs deleted, but is that always possible to know???\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter().deleteDocuments(new Term(idField.getName(), cmd.getIndexedId()));\n\n    if (commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n  }\n\n","sourceOld":"  // could return the number of docs deleted, but is that always possible to know???\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter().deleteDocuments(new Term(idField.getName(), idFieldType.toInternal(cmd.id)));\n\n    if (commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b09644855fe79c27cf261552509561b8ce34c4c7","date":1312056839,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter().deleteDocuments(new Term(idField.getName(), cmd.getIndexedId()));\n\n    if (commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n  }\n\n","sourceOld":"  // could return the number of docs deleted, but is that always possible to know???\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter().deleteDocuments(new Term(idField.getName(), cmd.getIndexedId()));\n\n    if (commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e","date":1313005033,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter(core).deleteDocuments(new Term(idField.getName(), cmd.getIndexedId()));\n\n    if (commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter().deleteDocuments(new Term(idField.getName(), cmd.getIndexedId()));\n\n    if (commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c518d12136e15c9de6fa3d2c4bf5add07311a685","date":1313718511,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter(core).deleteDocuments(new Term(idField.getName(), cmd.getIndexedId()));\n\n    if (commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter(core).deleteDocuments(new Term(idField.getName(), cmd.getIndexedId()));\n\n    if (commitTracker.timeUpperBound > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.timeUpperBound);\n    } else if (softCommitTracker.timeUpperBound > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.timeUpperBound);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c9fe77273dc29a45ecba5acc1b217934ed3c676","date":1314217437,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter(core).deleteDocuments(new Term(idField.getName(), cmd.getIndexedId()));\n\n    if (commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } \n    \n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter(core).deleteDocuments(new Term(idField.getName(), cmd.getIndexedId()));\n\n    if (commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } else if (softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd0ef6574805f3cb9880e0983b7548a6aa933508","date":1315345052,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter(core).deleteDocuments(new Term(idField.getName(), cmd.getIndexedId()));\n\n    ulog.delete(cmd);\n \n    if (commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } \n    \n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter(core).deleteDocuments(new Term(idField.getName(), cmd.getIndexedId()));\n\n    if (commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } \n    \n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98fa1aca20a29db3d3d1a867eeed78f65448febe","date":1317919012,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    solrCoreState.getIndexWriter(core).deleteDocuments(new Term(idField.getName(), cmd.getIndexedId()));\n\n    ulog.delete(cmd);\n \n    if (commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } \n    \n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    indexWriterProvider.getIndexWriter(core).deleteDocuments(new Term(idField.getName(), cmd.getIndexedId()));\n\n    ulog.delete(cmd);\n \n    if (commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } \n    \n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e","date":1320267737,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    writer.deleteDocuments(deleteTerm);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    ulog.delete(cmd);\n \n    if (commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } \n    \n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    solrCoreState.getIndexWriter(core).deleteDocuments(new Term(idField.getName(), cmd.getIndexedId()));\n\n    ulog.delete(cmd);\n \n    if (commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } \n    \n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"818d704eaaf0fba0561d0d2752832e1015053482","date":1327419676,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    commitTracker.deletedDocument( cmd.commitWithin );\n    writer.deleteDocuments(deleteTerm);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    ulog.delete(cmd);\n \n    if (commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } \n    \n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    writer.deleteDocuments(deleteTerm);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    ulog.delete(cmd);\n \n    if (commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } \n    \n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    commitTracker.deletedDocument( cmd.commitWithin );\n    writer.deleteDocuments(deleteTerm);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    if ((cmd.getFlags() & UpdateCommand.IGNORE_AUTOCOMMIT) == 0) {\n      if (commitTracker.getTimeUpperBound() > 0) {\n        commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n      }\n\n      if (softCommitTracker.getTimeUpperBound() > 0) {\n        softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n      }\n    }\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    commitTracker.deletedDocument( cmd.commitWithin );\n    writer.deleteDocuments(deleteTerm);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    ulog.delete(cmd);\n \n    if (commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } \n    \n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    commitTracker.deletedDocument( cmd.commitWithin );\n    writer.deleteDocuments(deleteTerm);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    if ((cmd.getFlags() & UpdateCommand.IGNORE_AUTOCOMMIT) == 0) {\n      if (commitTracker.getTimeUpperBound() > 0) {\n        commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n      }\n\n      if (softCommitTracker.getTimeUpperBound() > 0) {\n        softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n      }\n    }\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    writer.deleteDocuments(deleteTerm);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    ulog.delete(cmd);\n \n    if (commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } \n    \n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    commitTracker.deletedDocument( cmd.commitWithin );\n    writer.deleteDocuments(deleteTerm);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    if ((cmd.getFlags() & UpdateCommand.IGNORE_AUTOCOMMIT) == 0) {\n      if (commitTracker.getTimeUpperBound() > 0) {\n        commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n      }\n\n      if (softCommitTracker.getTimeUpperBound() > 0) {\n        softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n      }\n    }\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    writer.deleteDocuments(deleteTerm);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    ulog.delete(cmd);\n \n    if (commitTracker.getTimeUpperBound() > 0) {\n      commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n    } \n    \n    if (softCommitTracker.getTimeUpperBound() > 0) {\n      softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad31de9d3b830bc174d4c41df9f80f4cac82576","date":1328107867,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    writer.deleteDocuments(deleteTerm);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    commitTracker.deletedDocument( cmd.commitWithin );\n    writer.deleteDocuments(deleteTerm);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    if ((cmd.getFlags() & UpdateCommand.IGNORE_AUTOCOMMIT) == 0) {\n      if (commitTracker.getTimeUpperBound() > 0) {\n        commitTracker.scheduleCommitWithin(commitTracker.getTimeUpperBound());\n      }\n\n      if (softCommitTracker.getTimeUpperBound() > 0) {\n        softCommitTracker.scheduleCommitWithin(softCommitTracker.getTimeUpperBound());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08bcaef9e931052e4ca24133a89cc6aefaf61829","date":1342469326,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    writer.deleteDocuments(deleteTerm);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    writer.deleteDocuments(deleteTerm);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    IndexWriter writer = solrCoreState.getIndexWriter(core);\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    writer.deleteDocuments(deleteTerm);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078","date":1469530061,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.increment();\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.increment();\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.increment();\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.incrementAndGet();\n    deleteByIdCommandsCumulative.incrementAndGet();\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52c21eddb989aed5815d30ea4c8abf481ace8ad","date":1488795043,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.mark();\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.increment();\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be320990bdc77e643388fa801e75017f19289c42","date":1489477067,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.mark();\n\n    if ( (cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) != 0 ) {\n      if (ulog != null) ulog.delete(cmd);\n      return;\n    }\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.mark();\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f996f8177b9204bdc92f7164460c6cefad9ac99a","date":1489482690,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.mark();\n\n    if ( (cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) != 0 ) {\n      if (ulog != null) ulog.delete(cmd);\n      return;\n    }\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.mark();\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.mark();\n\n    if ( (cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) != 0 ) {\n      if (ulog != null) ulog.delete(cmd);\n      return;\n    }\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.mark();\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.mark();\n\n    if ((cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) != 0 ) {\n      if (ulog != null) ulog.delete(cmd);\n      return;\n    }\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.mark();\n\n    if ( (cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) != 0 ) {\n      if (ulog != null) ulog.delete(cmd);\n      return;\n    }\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.mark();\n\n    if ((cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) != 0 ) {\n      if (ulog != null) ulog.delete(cmd);\n      return;\n    }\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.mark();\n\n    if ( (cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) != 0 ) {\n      if (ulog != null) ulog.delete(cmd);\n      return;\n    }\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa4f44656c8081bbc63325a83abdb025eafd5a2b","date":1543200469,"type":3,"author":"Moshe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.mark();\n\n    if ((cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) != 0 ) {\n      if (ulog != null) ulog.delete(cmd);\n      return;\n    }\n\n    Term deleteTerm = getIdTerm(cmd.getIndexedId(), false);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.mark();\n\n    if ((cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) != 0 ) {\n      if (ulog != null) ulog.delete(cmd);\n      return;\n    }\n\n    Term deleteTerm = new Term(idField.getName(), cmd.getIndexedId());\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"482ca6c86d7073e3c19096bdc74fe0e73da4554a","date":1576010743,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    TestInjection.injectDirectUpdateLatch();\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.mark();\n\n    if ((cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) != 0 ) {\n      if (ulog != null) ulog.delete(cmd);\n      return;\n    }\n\n    Term deleteTerm = getIdTerm(cmd.getIndexedId(), false);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.mark();\n\n    if ((cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) != 0 ) {\n      if (ulog != null) ulog.delete(cmd);\n      return;\n    }\n\n    Term deleteTerm = getIdTerm(cmd.getIndexedId(), false);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2#delete(DeleteUpdateCommand).mjava","sourceNew":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    TestInjection.injectDirectUpdateLatch();\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.mark();\n\n    if ((cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) != 0 ) {\n      if (ulog != null) ulog.delete(cmd);\n      return;\n    }\n\n    Term deleteTerm = getIdTerm(cmd.getIndexedId(), false);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","sourceOld":"  // we don't return the number of docs deleted because it's not always possible to quickly know that info.\n  @Override\n  public void delete(DeleteUpdateCommand cmd) throws IOException {\n    deleteByIdCommands.increment();\n    deleteByIdCommandsCumulative.mark();\n\n    if ((cmd.getFlags() & UpdateCommand.IGNORE_INDEXWRITER) != 0 ) {\n      if (ulog != null) ulog.delete(cmd);\n      return;\n    }\n\n    Term deleteTerm = getIdTerm(cmd.getIndexedId(), false);\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,writer);\n    RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\n    try {\n      iw.get().deleteDocuments(deleteTerm);\n    } finally {\n      iw.decref();\n    }\n    // SolrCore.verbose(\"deleteDocuments\",deleteTerm,\"DONE\");\n\n    if (ulog != null) ulog.delete(cmd);\n\n    updateDeleteTrackers(cmd);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"98fa1aca20a29db3d3d1a867eeed78f65448febe":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"818d704eaaf0fba0561d0d2752832e1015053482":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e"],"5c9fe77273dc29a45ecba5acc1b217934ed3c676":["c518d12136e15c9de6fa3d2c4bf5add07311a685"],"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e":["98fa1aca20a29db3d3d1a867eeed78f65448febe"],"671279fa1676e7f2755c2745a25abd77a169f992":["c26f00b574427b55127e869b935845554afde1fa"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["ab68488225b6a6c357dda72ed11dedca9914a192","61c45e99cf6676da48f19d7511c73712ad39402b"],"aa4f44656c8081bbc63325a83abdb025eafd5a2b":["61c45e99cf6676da48f19d7511c73712ad39402b"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a229cb50768e988c50a2106bdae3a92154f428bf":["aa4f44656c8081bbc63325a83abdb025eafd5a2b","482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"aba371508186796cc6151d8223a5b4e16d02e26e":["0ad31de9d3b830bc174d4c41df9f80f4cac82576","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c518d12136e15c9de6fa3d2c4bf5add07311a685":["0e8cb6e9df9d6fc873383924f02d9aacfffebf4e"],"be320990bdc77e643388fa801e75017f19289c42":["e52c21eddb989aed5815d30ea4c8abf481ace8ad"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e52c21eddb989aed5815d30ea4c8abf481ace8ad","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"b09644855fe79c27cf261552509561b8ce34c4c7":["671279fa1676e7f2755c2745a25abd77a169f992"],"482ca6c86d7073e3c19096bdc74fe0e73da4554a":["aa4f44656c8081bbc63325a83abdb025eafd5a2b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["be320990bdc77e643388fa801e75017f19289c42"],"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e":["b09644855fe79c27cf261552509561b8ce34c4c7"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078":["08bcaef9e931052e4ca24133a89cc6aefaf61829"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["08bcaef9e931052e4ca24133a89cc6aefaf61829","bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["5c9fe77273dc29a45ecba5acc1b217934ed3c676"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["e52c21eddb989aed5815d30ea4c8abf481ace8ad"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["0ad31de9d3b830bc174d4c41df9f80f4cac82576","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"0ad31de9d3b830bc174d4c41df9f80f4cac82576":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["818d704eaaf0fba0561d0d2752832e1015053482"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52c21eddb989aed5815d30ea4c8abf481ace8ad":["bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"08bcaef9e931052e4ca24133a89cc6aefaf61829":["0ad31de9d3b830bc174d4c41df9f80f4cac82576"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["08bcaef9e931052e4ca24133a89cc6aefaf61829","bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["482ca6c86d7073e3c19096bdc74fe0e73da4554a"]},"commit2Childs":{"c26f00b574427b55127e869b935845554afde1fa":["671279fa1676e7f2755c2745a25abd77a169f992"],"98fa1aca20a29db3d3d1a867eeed78f65448febe":["7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e"],"818d704eaaf0fba0561d0d2752832e1015053482":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"5c9fe77273dc29a45ecba5acc1b217934ed3c676":["bd0ef6574805f3cb9880e0983b7548a6aa933508"],"7a3554ff15950ad0e3bcbb4e4e2ddb45b0b0f27e":["818d704eaaf0fba0561d0d2752832e1015053482","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"671279fa1676e7f2755c2745a25abd77a169f992":["b09644855fe79c27cf261552509561b8ce34c4c7"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"aa4f44656c8081bbc63325a83abdb025eafd5a2b":["a229cb50768e988c50a2106bdae3a92154f428bf","482ca6c86d7073e3c19096bdc74fe0e73da4554a"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"a229cb50768e988c50a2106bdae3a92154f428bf":[],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c518d12136e15c9de6fa3d2c4bf5add07311a685":["5c9fe77273dc29a45ecba5acc1b217934ed3c676"],"ab68488225b6a6c357dda72ed11dedca9914a192":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"be320990bdc77e643388fa801e75017f19289c42":["61c45e99cf6676da48f19d7511c73712ad39402b"],"b09644855fe79c27cf261552509561b8ce34c4c7":["0e8cb6e9df9d6fc873383924f02d9aacfffebf4e"],"482ca6c86d7073e3c19096bdc74fe0e73da4554a":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","aa4f44656c8081bbc63325a83abdb025eafd5a2b"],"0e8cb6e9df9d6fc873383924f02d9aacfffebf4e":["c518d12136e15c9de6fa3d2c4bf5add07311a685"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e52c21eddb989aed5815d30ea4c8abf481ace8ad","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"bd0ef6574805f3cb9880e0983b7548a6aa933508":["98fa1aca20a29db3d3d1a867eeed78f65448febe"],"f996f8177b9204bdc92f7164460c6cefad9ac99a":["ab68488225b6a6c357dda72ed11dedca9914a192"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"0ad31de9d3b830bc174d4c41df9f80f4cac82576":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","0ad31de9d3b830bc174d4c41df9f80f4cac82576"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"08bcaef9e931052e4ca24133a89cc6aefaf61829":["aba371508186796cc6151d8223a5b4e16d02e26e","bc0fbfa191179ae7a0081ee1cf7da0464bcd8078","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fe33227f6805edab2036cbb80645cc4e2d1fa424","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"e52c21eddb989aed5815d30ea4c8abf481ace8ad":["be320990bdc77e643388fa801e75017f19289c42","ab68488225b6a6c357dda72ed11dedca9914a192","f996f8177b9204bdc92f7164460c6cefad9ac99a"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","0d22ac6a4146774c1bc8400160fc0b6150294e92","a229cb50768e988c50a2106bdae3a92154f428bf","aba371508186796cc6151d8223a5b4e16d02e26e","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fe33227f6805edab2036cbb80645cc4e2d1fa424","a258fbb26824fd104ed795e5d9033d2d040049ee","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}