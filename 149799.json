{"path":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds) throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    if (fresNode.label == null) {\n      fresNode.label = taxonomyReader.getPath(fresNode.ordinal);\n    }\n    CategoryPath catPath = fresNode.label;\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0), docIds.iterator());\n    fresNode.value = updatedCount;\n  }\n\n","sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds) throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    if (fresNode.label == null) {\n      fresNode.label = taxonomyReader.getPath(fresNode.ordinal);\n    }\n    CategoryPath catPath = fresNode.label;\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0), docIds.iterator());\n    fresNode.value = updatedCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f793470bad5ce8422502e33eaae65fc6a3271bd2","date":1360479442,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds) throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    if (fresNode.label == null) {\n      fresNode.label = taxonomyReader.getPath(fresNode.ordinal);\n    }\n    CategoryPath catPath = fresNode.label;\n\n    Term drillDownTerm = DrillDownQuery.term(searchParams.indexingParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0), docIds.iterator());\n    fresNode.value = updatedCount;\n  }\n\n","sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds) throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    if (fresNode.label == null) {\n      fresNode.label = taxonomyReader.getPath(fresNode.ordinal);\n    }\n    CategoryPath catPath = fresNode.label;\n\n    Term drillDownTerm = DrillDown.term(searchParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0), docIds.iterator());\n    fresNode.value = updatedCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds) throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    if (fresNode.label == null) {\n      fresNode.label = taxonomyReader.getPath(fresNode.ordinal);\n    }\n    FacetLabel catPath = fresNode.label;\n\n    Term drillDownTerm = DrillDownQuery.term(searchParams.indexingParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0), docIds.iterator());\n    fresNode.value = updatedCount;\n  }\n\n","sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds) throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    if (fresNode.label == null) {\n      fresNode.label = taxonomyReader.getPath(fresNode.ordinal);\n    }\n    CategoryPath catPath = fresNode.label;\n\n    Term drillDownTerm = DrillDownQuery.term(searchParams.indexingParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0), docIds.iterator());\n    fresNode.value = updatedCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":null,"sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds) throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    if (fresNode.label == null) {\n      fresNode.label = taxonomyReader.getPath(fresNode.ordinal);\n    }\n    FacetLabel catPath = fresNode.label;\n\n    Term drillDownTerm = DrillDownQuery.term(searchParams.indexingParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0), docIds.iterator());\n    fresNode.value = updatedCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/TakmiSampleFixer#recount(FacetResultNode,ScoredDocIDs).mjava","sourceNew":null,"sourceOld":"  /**\n   * Internal utility: recount for a facet result node\n   * \n   * @param fresNode\n   *          result node to be recounted\n   * @param docIds\n   *          full set of matching documents.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  private void recount(FacetResultNode fresNode, ScoredDocIDs docIds) throws IOException {\n    // TODO (Facet): change from void to return the new, smaller docSet, and use\n    // that for the children, as this will make their intersection ops faster.\n    // can do this only when the new set is \"sufficiently\" smaller.\n    \n    /* We need the category's path name in order to do its recounting.\n     * If it is missing, because the option to label only part of the\n     * facet results was exercise, we need to calculate them anyway, so\n     * in essence sampling with recounting spends some extra cycles for\n     * labeling results for which labels are not required. */\n    if (fresNode.label == null) {\n      fresNode.label = taxonomyReader.getPath(fresNode.ordinal);\n    }\n    CategoryPath catPath = fresNode.label;\n\n    Term drillDownTerm = DrillDownQuery.term(searchParams.indexingParams, catPath);\n    // TODO (Facet): avoid Multi*?\n    Bits liveDocs = MultiFields.getLiveDocs(indexReader);\n    int updatedCount = countIntersection(MultiFields.getTermDocsEnum(indexReader, liveDocs,\n                                                                     drillDownTerm.field(), drillDownTerm.bytes(),\n                                                                     0), docIds.iterator());\n    fresNode.value = updatedCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["f793470bad5ce8422502e33eaae65fc6a3271bd2","d33e19a97046248623a7591aeaa6547233fd15e2"],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["f793470bad5ce8422502e33eaae65fc6a3271bd2"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["f793470bad5ce8422502e33eaae65fc6a3271bd2"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}