{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeParser[FacetRequest]#parse(Object).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeParser[FacetRequest]#parse(Object).mjava","pathOld":"/dev/null","sourceNew":"  public FacetRange parse(Object arg) throws SyntaxError {\n    if (!(arg instanceof Map)) {\n      throw err(\"Missing range facet arguments\");\n    }\n\n    Map<String, Object> m = (Map<String, Object>) arg;\n\n    facet.field = getString(m, \"field\", null);\n\n    facet.start = m.get(\"start\");\n    facet.end = m.get(\"end\");\n    facet.gap = m.get(\"gap\");\n    facet.hardend = getBoolean(m, \"hardend\", facet.hardend);\n\n    // TODO: refactor list-of-options code\n\n    Object o = m.get(\"include\");\n    String[] includeList = null;\n    if (o != null) {\n      List lst = null;\n\n      if (o instanceof List) {\n        lst = (List)o;\n      } else if (o instanceof String) {\n        lst = StrUtils.splitSmart((String)o, ',');\n      }\n\n      includeList = (String[])lst.toArray(new String[lst.size()]);\n    }\n    facet.include = FacetParams.FacetRangeInclude.parseParam( includeList );\n\n    facet.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n    o = m.get(\"other\");\n    if (o != null) {\n      List<String> lst = null;\n\n      if (o instanceof List) {\n        lst = (List)o;\n      } else if (o instanceof String) {\n        lst = StrUtils.splitSmart((String)o, ',');\n      }\n\n      for (String otherStr : lst) {\n        facet.others.add( FacetParams.FacetRangeOther.get(otherStr) );\n      }\n    }\n\n\n    Object facetObj = m.get(\"facet\");\n    parseSubs(facetObj);\n\n    return facet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeParser[FacetRequest]#parse(Object).mjava","pathOld":"/dev/null","sourceNew":"  public FacetRange parse(Object arg) throws SyntaxError {\n    if (!(arg instanceof Map)) {\n      throw err(\"Missing range facet arguments\");\n    }\n\n    Map<String, Object> m = (Map<String, Object>) arg;\n\n    facet.field = getString(m, \"field\", null);\n\n    facet.start = m.get(\"start\");\n    facet.end = m.get(\"end\");\n    facet.gap = m.get(\"gap\");\n    facet.hardend = getBoolean(m, \"hardend\", facet.hardend);\n\n    // TODO: refactor list-of-options code\n\n    Object o = m.get(\"include\");\n    String[] includeList = null;\n    if (o != null) {\n      List lst = null;\n\n      if (o instanceof List) {\n        lst = (List)o;\n      } else if (o instanceof String) {\n        lst = StrUtils.splitSmart((String)o, ',');\n      }\n\n      includeList = (String[])lst.toArray(new String[lst.size()]);\n    }\n    facet.include = FacetParams.FacetRangeInclude.parseParam( includeList );\n\n    facet.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n    o = m.get(\"other\");\n    if (o != null) {\n      List<String> lst = null;\n\n      if (o instanceof List) {\n        lst = (List)o;\n      } else if (o instanceof String) {\n        lst = StrUtils.splitSmart((String)o, ',');\n      }\n\n      for (String otherStr : lst) {\n        facet.others.add( FacetParams.FacetRangeOther.get(otherStr) );\n      }\n    }\n\n\n    Object facetObj = m.get(\"facet\");\n    parseSubs(facetObj);\n\n    return facet;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"637b14d3587fbf956ba5f8d39409d579d34f69de","date":1430057809,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetRange parse(Object arg) throws SyntaxError {\n    if (!(arg instanceof Map)) {\n      throw err(\"Missing range facet arguments\");\n    }\n\n    Map<String, Object> m = (Map<String, Object>) arg;\n\n    facet.field = getString(m, \"field\", null);\n\n    facet.start = m.get(\"start\");\n    facet.end = m.get(\"end\");\n    facet.gap = m.get(\"gap\");\n    facet.hardend = getBoolean(m, \"hardend\", facet.hardend);\n    facet.mincount = getLong(m, \"mincount\", 0);\n\n    // TODO: refactor list-of-options code\n\n    Object o = m.get(\"include\");\n    String[] includeList = null;\n    if (o != null) {\n      List lst = null;\n\n      if (o instanceof List) {\n        lst = (List)o;\n      } else if (o instanceof String) {\n        lst = StrUtils.splitSmart((String)o, ',');\n      }\n\n      includeList = (String[])lst.toArray(new String[lst.size()]);\n    }\n    facet.include = FacetParams.FacetRangeInclude.parseParam( includeList );\n\n    facet.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n    o = m.get(\"other\");\n    if (o != null) {\n      List<String> lst = null;\n\n      if (o instanceof List) {\n        lst = (List)o;\n      } else if (o instanceof String) {\n        lst = StrUtils.splitSmart((String)o, ',');\n      }\n\n      for (String otherStr : lst) {\n        facet.others.add( FacetParams.FacetRangeOther.get(otherStr) );\n      }\n    }\n\n\n    Object facetObj = m.get(\"facet\");\n    parseSubs(facetObj);\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetRange parse(Object arg) throws SyntaxError {\n    if (!(arg instanceof Map)) {\n      throw err(\"Missing range facet arguments\");\n    }\n\n    Map<String, Object> m = (Map<String, Object>) arg;\n\n    facet.field = getString(m, \"field\", null);\n\n    facet.start = m.get(\"start\");\n    facet.end = m.get(\"end\");\n    facet.gap = m.get(\"gap\");\n    facet.hardend = getBoolean(m, \"hardend\", facet.hardend);\n\n    // TODO: refactor list-of-options code\n\n    Object o = m.get(\"include\");\n    String[] includeList = null;\n    if (o != null) {\n      List lst = null;\n\n      if (o instanceof List) {\n        lst = (List)o;\n      } else if (o instanceof String) {\n        lst = StrUtils.splitSmart((String)o, ',');\n      }\n\n      includeList = (String[])lst.toArray(new String[lst.size()]);\n    }\n    facet.include = FacetParams.FacetRangeInclude.parseParam( includeList );\n\n    facet.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n    o = m.get(\"other\");\n    if (o != null) {\n      List<String> lst = null;\n\n      if (o instanceof List) {\n        lst = (List)o;\n      } else if (o instanceof String) {\n        lst = StrUtils.splitSmart((String)o, ',');\n      }\n\n      for (String otherStr : lst) {\n        facet.others.add( FacetParams.FacetRangeOther.get(otherStr) );\n      }\n    }\n\n\n    Object facetObj = m.get(\"facet\");\n    parseSubs(facetObj);\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"faf1236ae092482293a7e0659e347d172185ef6f","date":1430314113,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetRange parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    if (!(arg instanceof Map)) {\n      throw err(\"Missing range facet arguments\");\n    }\n\n    Map<String, Object> m = (Map<String, Object>) arg;\n\n    facet.field = getString(m, \"field\", null);\n\n    facet.start = m.get(\"start\");\n    facet.end = m.get(\"end\");\n    facet.gap = m.get(\"gap\");\n    facet.hardend = getBoolean(m, \"hardend\", facet.hardend);\n    facet.mincount = getLong(m, \"mincount\", 0);\n\n    // TODO: refactor list-of-options code\n\n    Object o = m.get(\"include\");\n    String[] includeList = null;\n    if (o != null) {\n      List lst = null;\n\n      if (o instanceof List) {\n        lst = (List)o;\n      } else if (o instanceof String) {\n        lst = StrUtils.splitSmart((String)o, ',');\n      }\n\n      includeList = (String[])lst.toArray(new String[lst.size()]);\n    }\n    facet.include = FacetParams.FacetRangeInclude.parseParam( includeList );\n\n    facet.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n    o = m.get(\"other\");\n    if (o != null) {\n      List<String> lst = null;\n\n      if (o instanceof List) {\n        lst = (List)o;\n      } else if (o instanceof String) {\n        lst = StrUtils.splitSmart((String)o, ',');\n      }\n\n      for (String otherStr : lst) {\n        facet.others.add( FacetParams.FacetRangeOther.get(otherStr) );\n      }\n    }\n\n\n    Object facetObj = m.get(\"facet\");\n    parseSubs(facetObj);\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetRange parse(Object arg) throws SyntaxError {\n    if (!(arg instanceof Map)) {\n      throw err(\"Missing range facet arguments\");\n    }\n\n    Map<String, Object> m = (Map<String, Object>) arg;\n\n    facet.field = getString(m, \"field\", null);\n\n    facet.start = m.get(\"start\");\n    facet.end = m.get(\"end\");\n    facet.gap = m.get(\"gap\");\n    facet.hardend = getBoolean(m, \"hardend\", facet.hardend);\n    facet.mincount = getLong(m, \"mincount\", 0);\n\n    // TODO: refactor list-of-options code\n\n    Object o = m.get(\"include\");\n    String[] includeList = null;\n    if (o != null) {\n      List lst = null;\n\n      if (o instanceof List) {\n        lst = (List)o;\n      } else if (o instanceof String) {\n        lst = StrUtils.splitSmart((String)o, ',');\n      }\n\n      includeList = (String[])lst.toArray(new String[lst.size()]);\n    }\n    facet.include = FacetParams.FacetRangeInclude.parseParam( includeList );\n\n    facet.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n    o = m.get(\"other\");\n    if (o != null) {\n      List<String> lst = null;\n\n      if (o instanceof List) {\n        lst = (List)o;\n      } else if (o instanceof String) {\n        lst = StrUtils.splitSmart((String)o, ',');\n      }\n\n      for (String otherStr : lst) {\n        facet.others.add( FacetParams.FacetRangeOther.get(otherStr) );\n      }\n    }\n\n\n    Object facetObj = m.get(\"facet\");\n    parseSubs(facetObj);\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1918d03541b875664e27eae44b6b157da044f0b8","date":1549745850,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetRange parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    if (!(arg instanceof Map)) {\n      throw err(\"Missing range facet arguments\");\n    }\n\n    Map<String, Object> m = (Map<String, Object>) arg;\n\n    facet.field = getString(m, \"field\", null);\n\n    facet.start = getVal(m, \"start\", true);\n    facet.end = getVal(m, \"end\", true);\n    facet.gap = getVal(m, \"gap\", true);\n    facet.hardend = getBoolean(m, \"hardend\", facet.hardend);\n    facet.mincount = getLong(m, \"mincount\", 0);\n\n    // TODO: refactor list-of-options code\n\n    List<String> list = getStringList(m, \"include\", false);\n    String[] includeList = null;\n    if (list != null) {\n      includeList = (String[])list.toArray(new String[list.size()]);\n    }\n    facet.include = FacetParams.FacetRangeInclude.parseParam( includeList );\n    facet.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n    List<String> other = getStringList(m, \"other\", false);\n    if (other != null) {\n      for (String otherStr : other) {\n        facet.others.add( FacetParams.FacetRangeOther.get(otherStr) );\n      }\n    }\n\n    Object facetObj = m.get(\"facet\");\n    parseSubs(facetObj);\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetRange parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    if (!(arg instanceof Map)) {\n      throw err(\"Missing range facet arguments\");\n    }\n\n    Map<String, Object> m = (Map<String, Object>) arg;\n\n    facet.field = getString(m, \"field\", null);\n\n    facet.start = m.get(\"start\");\n    facet.end = m.get(\"end\");\n    facet.gap = m.get(\"gap\");\n    facet.hardend = getBoolean(m, \"hardend\", facet.hardend);\n    facet.mincount = getLong(m, \"mincount\", 0);\n\n    // TODO: refactor list-of-options code\n\n    Object o = m.get(\"include\");\n    String[] includeList = null;\n    if (o != null) {\n      List lst = null;\n\n      if (o instanceof List) {\n        lst = (List)o;\n      } else if (o instanceof String) {\n        lst = StrUtils.splitSmart((String)o, ',');\n      }\n\n      includeList = (String[])lst.toArray(new String[lst.size()]);\n    }\n    facet.include = FacetParams.FacetRangeInclude.parseParam( includeList );\n\n    facet.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n    o = m.get(\"other\");\n    if (o != null) {\n      List<String> lst = null;\n\n      if (o instanceof List) {\n        lst = (List)o;\n      } else if (o instanceof String) {\n        lst = StrUtils.splitSmart((String)o, ',');\n      }\n\n      for (String otherStr : lst) {\n        facet.others.add( FacetParams.FacetRangeOther.get(otherStr) );\n      }\n    }\n\n\n    Object facetObj = m.get(\"facet\");\n    parseSubs(facetObj);\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","date":1569046571,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeParser[FacetRequest]#parse(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeParser[FacetRequest]#parse(Object).mjava","sourceNew":"  public FacetRange parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    if (!(arg instanceof Map)) {\n      throw err(\"Missing range facet arguments\");\n    }\n\n    Map<String, Object> m = (Map<String, Object>) arg;\n\n    facet.field = getString(m, \"field\", null);\n    facet.ranges = getVal(m, \"ranges\", false);\n\n    boolean required = facet.ranges == null;\n    facet.start = getVal(m, \"start\", required);\n    facet.end = getVal(m, \"end\", required);\n    facet.gap = getVal(m, \"gap\", required);\n    facet.hardend = getBoolean(m, \"hardend\", facet.hardend);\n    facet.mincount = getLong(m, \"mincount\", 0);\n\n    // TODO: refactor list-of-options code\n\n    List<String> list = getStringList(m, \"include\", false);\n    String[] includeList = null;\n    if (list != null) {\n      includeList = list.toArray(new String[list.size()]);\n    }\n    facet.include = FacetParams.FacetRangeInclude.parseParam( includeList );\n    facet.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n    List<String> other = getStringList(m, \"other\", false);\n    if (other != null) {\n      for (String otherStr : other) {\n        facet.others.add( FacetParams.FacetRangeOther.get(otherStr) );\n      }\n    }\n\n    Object facetObj = m.get(\"facet\");\n    parseSubs(facetObj);\n\n    return facet;\n  }\n\n","sourceOld":"  public FacetRange parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    if (!(arg instanceof Map)) {\n      throw err(\"Missing range facet arguments\");\n    }\n\n    Map<String, Object> m = (Map<String, Object>) arg;\n\n    facet.field = getString(m, \"field\", null);\n\n    facet.start = getVal(m, \"start\", true);\n    facet.end = getVal(m, \"end\", true);\n    facet.gap = getVal(m, \"gap\", true);\n    facet.hardend = getBoolean(m, \"hardend\", facet.hardend);\n    facet.mincount = getLong(m, \"mincount\", 0);\n\n    // TODO: refactor list-of-options code\n\n    List<String> list = getStringList(m, \"include\", false);\n    String[] includeList = null;\n    if (list != null) {\n      includeList = (String[])list.toArray(new String[list.size()]);\n    }\n    facet.include = FacetParams.FacetRangeInclude.parseParam( includeList );\n    facet.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n    List<String> other = getStringList(m, \"other\", false);\n    if (other != null) {\n      for (String otherStr : other) {\n        facet.others.add( FacetParams.FacetRangeOther.get(otherStr) );\n      }\n    }\n\n    Object facetObj = m.get(\"facet\");\n    parseSubs(facetObj);\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"248f6ecc900c3a5633fd5ca6f564ea8b717720da","date":1588863846,"type":4,"author":"Mike Drob","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetRangeParser[FacetRequest]#parse(Object).mjava","sourceNew":null,"sourceOld":"  public FacetRange parse(Object arg) throws SyntaxError {\n    parseCommonParams(arg);\n\n    if (!(arg instanceof Map)) {\n      throw err(\"Missing range facet arguments\");\n    }\n\n    Map<String, Object> m = (Map<String, Object>) arg;\n\n    facet.field = getString(m, \"field\", null);\n    facet.ranges = getVal(m, \"ranges\", false);\n\n    boolean required = facet.ranges == null;\n    facet.start = getVal(m, \"start\", required);\n    facet.end = getVal(m, \"end\", required);\n    facet.gap = getVal(m, \"gap\", required);\n    facet.hardend = getBoolean(m, \"hardend\", facet.hardend);\n    facet.mincount = getLong(m, \"mincount\", 0);\n\n    // TODO: refactor list-of-options code\n\n    List<String> list = getStringList(m, \"include\", false);\n    String[] includeList = null;\n    if (list != null) {\n      includeList = list.toArray(new String[list.size()]);\n    }\n    facet.include = FacetParams.FacetRangeInclude.parseParam( includeList );\n    facet.others = EnumSet.noneOf(FacetParams.FacetRangeOther.class);\n\n    List<String> other = getStringList(m, \"other\", false);\n    if (other != null) {\n      for (String otherStr : other) {\n        facet.others.add( FacetParams.FacetRangeOther.get(otherStr) );\n      }\n    }\n\n    Object facetObj = m.get(\"facet\");\n    parseSubs(facetObj);\n\n    return facet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"1918d03541b875664e27eae44b6b157da044f0b8":["faf1236ae092482293a7e0659e347d172185ef6f"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["1918d03541b875664e27eae44b6b157da044f0b8"],"637b14d3587fbf956ba5f8d39409d579d34f69de":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"faf1236ae092482293a7e0659e347d172185ef6f":["637b14d3587fbf956ba5f8d39409d579d34f69de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"1918d03541b875664e27eae44b6b157da044f0b8":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"248f6ecc900c3a5633fd5ca6f564ea8b717720da":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","637b14d3587fbf956ba5f8d39409d579d34f69de"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["248f6ecc900c3a5633fd5ca6f564ea8b717720da"],"637b14d3587fbf956ba5f8d39409d579d34f69de":["faf1236ae092482293a7e0659e347d172185ef6f"],"faf1236ae092482293a7e0659e347d172185ef6f":["1918d03541b875664e27eae44b6b157da044f0b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}