{"path":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCloudCollectionsListeners#testSimpleCloudCollectionsListener().mjava","commits":[{"id":"c8c7f17e23a807049d8e2f0cb429977d5130befa","date":1524005824,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCloudCollectionsListeners#testSimpleCloudCollectionsListener().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSimpleCloudCollectionsListener() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    Map<Integer, Set<String>> oldResults = new HashMap<>();\n    Map<Integer, Set<String>> newResults = new HashMap<>();\n\n    CloudCollectionsListener watcher1 = (oldCollections, newCollections) -> {\n      log.info(\"New set of collections: {}, {}\", oldCollections, newCollections);\n      oldResults.put(1, oldCollections);\n      newResults.put(1, newCollections);\n    };\n    client.getZkStateReader().registerCloudCollectionsListener(watcher1);\n    CloudCollectionsListener watcher2 = (oldCollections, newCollections) -> {\n      log.info(\"New set of collections: {}, {}\", oldCollections, newCollections);\n      oldResults.put(2, oldCollections);\n      newResults.put(2, newCollections);\n    };\n    client.getZkStateReader().registerCloudCollectionsListener(watcher2);\n\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", oldResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", oldResults.get(2).contains(\"testcollection1\"));\n\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", newResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", newResults.get(2).contains(\"testcollection1\"));\n\n    CollectionAdminRequest.createCollection(\"testcollection1\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    client.waitForState(\"testcollection1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    assertFalse(\"CloudCollectionsListener has new collection in old set of collections\", oldResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener has new collection in old set of collections\", oldResults.get(2).contains(\"testcollection1\"));\n\n    assertTrue(\"CloudCollectionsListener doesn't have new collection in new set of collections\", newResults.get(1).contains(\"testcollection1\"));\n    assertTrue(\"CloudCollectionsListener doesn't have new collection in new set of collections\", newResults.get(2).contains(\"testcollection1\"));\n\n    client.getZkStateReader().removeCloudCollectionsListener(watcher1);\n\n    CollectionAdminRequest.createCollection(\"testcollection2\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    client.waitForState(\"testcollection2\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n\n    assertFalse(\"CloudCollectionsListener notified after removal\", oldResults.get(1).contains(\"testcollection1\"));\n    assertTrue(\"CloudCollectionsListener does not contain old collection in list of old collections\", oldResults.get(2).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener contains new collection in old collection set\", oldResults.get(1).contains(\"testcollection2\"));\n    assertFalse(\"CloudCollectionsListener contains new collection in old collection set\", oldResults.get(2).contains(\"testcollection2\"));\n\n    assertFalse(\"CloudCollectionsListener notified after removal\", newResults.get(1).contains(\"testcollection2\"));\n    assertTrue(\"CloudCollectionsListener does not contain new collection in list of new collections\", newResults.get(2).contains(\"testcollection2\"));\n\n    CollectionAdminRequest.deleteCollection(\"testcollection1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    CollectionAdminRequest.deleteCollection(\"testcollection2\").processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.getZkStateReader().removeCloudCollectionsListener(watcher2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cdc53359111a5e3782f56300070ab2878ec82cb9","date":1534542016,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCloudCollectionsListeners#testSimpleCloudCollectionsListener().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCloudCollectionsListeners#testSimpleCloudCollectionsListener().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testSimpleCloudCollectionsListener() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    Map<Integer, Set<String>> oldResults = new HashMap<>();\n    Map<Integer, Set<String>> newResults = new HashMap<>();\n\n    CloudCollectionsListener watcher1 = (oldCollections, newCollections) -> {\n      log.info(\"New set of collections: {}, {}\", oldCollections, newCollections);\n      oldResults.put(1, oldCollections);\n      newResults.put(1, newCollections);\n    };\n    client.getZkStateReader().registerCloudCollectionsListener(watcher1);\n    CloudCollectionsListener watcher2 = (oldCollections, newCollections) -> {\n      log.info(\"New set of collections: {}, {}\", oldCollections, newCollections);\n      oldResults.put(2, oldCollections);\n      newResults.put(2, newCollections);\n    };\n    client.getZkStateReader().registerCloudCollectionsListener(watcher2);\n\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", oldResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", oldResults.get(2).contains(\"testcollection1\"));\n\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", newResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", newResults.get(2).contains(\"testcollection1\"));\n\n    CollectionAdminRequest.createCollection(\"testcollection1\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    client.waitForState(\"testcollection1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    assertFalse(\"CloudCollectionsListener has new collection in old set of collections\", oldResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener has new collection in old set of collections\", oldResults.get(2).contains(\"testcollection1\"));\n\n    assertTrue(\"CloudCollectionsListener doesn't have new collection in new set of collections\", newResults.get(1).contains(\"testcollection1\"));\n    assertTrue(\"CloudCollectionsListener doesn't have new collection in new set of collections\", newResults.get(2).contains(\"testcollection1\"));\n\n    client.getZkStateReader().removeCloudCollectionsListener(watcher1);\n\n    CollectionAdminRequest.createCollection(\"testcollection2\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    client.waitForState(\"testcollection2\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n\n    assertFalse(\"CloudCollectionsListener notified after removal\", oldResults.get(1).contains(\"testcollection1\"));\n    assertTrue(\"CloudCollectionsListener does not contain old collection in list of old collections\", oldResults.get(2).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener contains new collection in old collection set\", oldResults.get(1).contains(\"testcollection2\"));\n    assertFalse(\"CloudCollectionsListener contains new collection in old collection set\", oldResults.get(2).contains(\"testcollection2\"));\n\n    assertFalse(\"CloudCollectionsListener notified after removal\", newResults.get(1).contains(\"testcollection2\"));\n    assertTrue(\"CloudCollectionsListener does not contain new collection in list of new collections\", newResults.get(2).contains(\"testcollection2\"));\n\n    CollectionAdminRequest.deleteCollection(\"testcollection1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    CollectionAdminRequest.deleteCollection(\"testcollection2\").processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.getZkStateReader().removeCloudCollectionsListener(watcher2);\n  }\n\n","sourceOld":"  @Test\n  public void testSimpleCloudCollectionsListener() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    Map<Integer, Set<String>> oldResults = new HashMap<>();\n    Map<Integer, Set<String>> newResults = new HashMap<>();\n\n    CloudCollectionsListener watcher1 = (oldCollections, newCollections) -> {\n      log.info(\"New set of collections: {}, {}\", oldCollections, newCollections);\n      oldResults.put(1, oldCollections);\n      newResults.put(1, newCollections);\n    };\n    client.getZkStateReader().registerCloudCollectionsListener(watcher1);\n    CloudCollectionsListener watcher2 = (oldCollections, newCollections) -> {\n      log.info(\"New set of collections: {}, {}\", oldCollections, newCollections);\n      oldResults.put(2, oldCollections);\n      newResults.put(2, newCollections);\n    };\n    client.getZkStateReader().registerCloudCollectionsListener(watcher2);\n\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", oldResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", oldResults.get(2).contains(\"testcollection1\"));\n\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", newResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", newResults.get(2).contains(\"testcollection1\"));\n\n    CollectionAdminRequest.createCollection(\"testcollection1\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    client.waitForState(\"testcollection1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    assertFalse(\"CloudCollectionsListener has new collection in old set of collections\", oldResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener has new collection in old set of collections\", oldResults.get(2).contains(\"testcollection1\"));\n\n    assertTrue(\"CloudCollectionsListener doesn't have new collection in new set of collections\", newResults.get(1).contains(\"testcollection1\"));\n    assertTrue(\"CloudCollectionsListener doesn't have new collection in new set of collections\", newResults.get(2).contains(\"testcollection1\"));\n\n    client.getZkStateReader().removeCloudCollectionsListener(watcher1);\n\n    CollectionAdminRequest.createCollection(\"testcollection2\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    client.waitForState(\"testcollection2\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n\n    assertFalse(\"CloudCollectionsListener notified after removal\", oldResults.get(1).contains(\"testcollection1\"));\n    assertTrue(\"CloudCollectionsListener does not contain old collection in list of old collections\", oldResults.get(2).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener contains new collection in old collection set\", oldResults.get(1).contains(\"testcollection2\"));\n    assertFalse(\"CloudCollectionsListener contains new collection in old collection set\", oldResults.get(2).contains(\"testcollection2\"));\n\n    assertFalse(\"CloudCollectionsListener notified after removal\", newResults.get(1).contains(\"testcollection2\"));\n    assertTrue(\"CloudCollectionsListener does not contain new collection in list of new collections\", newResults.get(2).contains(\"testcollection2\"));\n\n    CollectionAdminRequest.deleteCollection(\"testcollection1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    CollectionAdminRequest.deleteCollection(\"testcollection2\").processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.getZkStateReader().removeCloudCollectionsListener(watcher2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCloudCollectionsListeners#testSimpleCloudCollectionsListener().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCloudCollectionsListeners#testSimpleCloudCollectionsListener().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testSimpleCloudCollectionsListener() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    Map<Integer, Set<String>> oldResults = new HashMap<>();\n    Map<Integer, Set<String>> newResults = new HashMap<>();\n\n    CloudCollectionsListener watcher1 = (oldCollections, newCollections) -> {\n      log.info(\"New set of collections: {}, {}\", oldCollections, newCollections);\n      oldResults.put(1, oldCollections);\n      newResults.put(1, newCollections);\n    };\n    client.getZkStateReader().registerCloudCollectionsListener(watcher1);\n    CloudCollectionsListener watcher2 = (oldCollections, newCollections) -> {\n      log.info(\"New set of collections: {}, {}\", oldCollections, newCollections);\n      oldResults.put(2, oldCollections);\n      newResults.put(2, newCollections);\n    };\n    client.getZkStateReader().registerCloudCollectionsListener(watcher2);\n\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", oldResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", oldResults.get(2).contains(\"testcollection1\"));\n\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", newResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", newResults.get(2).contains(\"testcollection1\"));\n\n    CollectionAdminRequest.createCollection(\"testcollection1\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    client.waitForState(\"testcollection1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    assertFalse(\"CloudCollectionsListener has new collection in old set of collections\", oldResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener has new collection in old set of collections\", oldResults.get(2).contains(\"testcollection1\"));\n\n    assertTrue(\"CloudCollectionsListener doesn't have new collection in new set of collections\", newResults.get(1).contains(\"testcollection1\"));\n    assertTrue(\"CloudCollectionsListener doesn't have new collection in new set of collections\", newResults.get(2).contains(\"testcollection1\"));\n\n    client.getZkStateReader().removeCloudCollectionsListener(watcher1);\n\n    CollectionAdminRequest.createCollection(\"testcollection2\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    cluster.waitForActiveCollection(\"testcollection2\", 4, 4);\n\n\n    assertFalse(\"CloudCollectionsListener notified after removal\", oldResults.get(1).contains(\"testcollection1\"));\n    assertTrue(\"CloudCollectionsListener does not contain old collection in list of old collections\", oldResults.get(2).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener contains new collection in old collection set\", oldResults.get(1).contains(\"testcollection2\"));\n    assertFalse(\"CloudCollectionsListener contains new collection in old collection set\", oldResults.get(2).contains(\"testcollection2\"));\n\n    assertFalse(\"CloudCollectionsListener notified after removal\", newResults.get(1).contains(\"testcollection2\"));\n    assertTrue(\"CloudCollectionsListener does not contain new collection in list of new collections\", newResults.get(2).contains(\"testcollection2\"));\n\n    CollectionAdminRequest.deleteCollection(\"testcollection1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    CollectionAdminRequest.deleteCollection(\"testcollection2\").processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.getZkStateReader().removeCloudCollectionsListener(watcher2);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testSimpleCloudCollectionsListener() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    Map<Integer, Set<String>> oldResults = new HashMap<>();\n    Map<Integer, Set<String>> newResults = new HashMap<>();\n\n    CloudCollectionsListener watcher1 = (oldCollections, newCollections) -> {\n      log.info(\"New set of collections: {}, {}\", oldCollections, newCollections);\n      oldResults.put(1, oldCollections);\n      newResults.put(1, newCollections);\n    };\n    client.getZkStateReader().registerCloudCollectionsListener(watcher1);\n    CloudCollectionsListener watcher2 = (oldCollections, newCollections) -> {\n      log.info(\"New set of collections: {}, {}\", oldCollections, newCollections);\n      oldResults.put(2, oldCollections);\n      newResults.put(2, newCollections);\n    };\n    client.getZkStateReader().registerCloudCollectionsListener(watcher2);\n\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", oldResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", oldResults.get(2).contains(\"testcollection1\"));\n\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", newResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", newResults.get(2).contains(\"testcollection1\"));\n\n    CollectionAdminRequest.createCollection(\"testcollection1\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    client.waitForState(\"testcollection1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    assertFalse(\"CloudCollectionsListener has new collection in old set of collections\", oldResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener has new collection in old set of collections\", oldResults.get(2).contains(\"testcollection1\"));\n\n    assertTrue(\"CloudCollectionsListener doesn't have new collection in new set of collections\", newResults.get(1).contains(\"testcollection1\"));\n    assertTrue(\"CloudCollectionsListener doesn't have new collection in new set of collections\", newResults.get(2).contains(\"testcollection1\"));\n\n    client.getZkStateReader().removeCloudCollectionsListener(watcher1);\n\n    CollectionAdminRequest.createCollection(\"testcollection2\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    client.waitForState(\"testcollection2\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n\n    assertFalse(\"CloudCollectionsListener notified after removal\", oldResults.get(1).contains(\"testcollection1\"));\n    assertTrue(\"CloudCollectionsListener does not contain old collection in list of old collections\", oldResults.get(2).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener contains new collection in old collection set\", oldResults.get(1).contains(\"testcollection2\"));\n    assertFalse(\"CloudCollectionsListener contains new collection in old collection set\", oldResults.get(2).contains(\"testcollection2\"));\n\n    assertFalse(\"CloudCollectionsListener notified after removal\", newResults.get(1).contains(\"testcollection2\"));\n    assertTrue(\"CloudCollectionsListener does not contain new collection in list of new collections\", newResults.get(2).contains(\"testcollection2\"));\n\n    CollectionAdminRequest.deleteCollection(\"testcollection1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    CollectionAdminRequest.deleteCollection(\"testcollection2\").processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.getZkStateReader().removeCloudCollectionsListener(watcher2);\n  }\n\n","bugFix":["c8c7f17e23a807049d8e2f0cb429977d5130befa"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCloudCollectionsListeners#testSimpleCloudCollectionsListener().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/cloud/TestCloudCollectionsListeners#testSimpleCloudCollectionsListener().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testSimpleCloudCollectionsListener() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    Map<Integer, Set<String>> oldResults = new HashMap<>();\n    Map<Integer, Set<String>> newResults = new HashMap<>();\n\n    CloudCollectionsListener watcher1 = (oldCollections, newCollections) -> {\n      log.info(\"New set of collections: {}, {}\", oldCollections, newCollections);\n      oldResults.put(1, oldCollections);\n      newResults.put(1, newCollections);\n    };\n    client.getZkStateReader().registerCloudCollectionsListener(watcher1);\n    CloudCollectionsListener watcher2 = (oldCollections, newCollections) -> {\n      log.info(\"New set of collections: {}, {}\", oldCollections, newCollections);\n      oldResults.put(2, oldCollections);\n      newResults.put(2, newCollections);\n    };\n    client.getZkStateReader().registerCloudCollectionsListener(watcher2);\n\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", oldResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", oldResults.get(2).contains(\"testcollection1\"));\n\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", newResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", newResults.get(2).contains(\"testcollection1\"));\n\n    CollectionAdminRequest.createCollection(\"testcollection1\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    client.waitForState(\"testcollection1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    assertFalse(\"CloudCollectionsListener has new collection in old set of collections\", oldResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener has new collection in old set of collections\", oldResults.get(2).contains(\"testcollection1\"));\n\n    assertTrue(\"CloudCollectionsListener doesn't have new collection in new set of collections\", newResults.get(1).contains(\"testcollection1\"));\n    assertTrue(\"CloudCollectionsListener doesn't have new collection in new set of collections\", newResults.get(2).contains(\"testcollection1\"));\n\n    client.getZkStateReader().removeCloudCollectionsListener(watcher1);\n\n    CollectionAdminRequest.createCollection(\"testcollection2\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    cluster.waitForActiveCollection(\"testcollection2\", 4, 4);\n\n\n    assertFalse(\"CloudCollectionsListener notified after removal\", oldResults.get(1).contains(\"testcollection1\"));\n    assertTrue(\"CloudCollectionsListener does not contain old collection in list of old collections\", oldResults.get(2).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener contains new collection in old collection set\", oldResults.get(1).contains(\"testcollection2\"));\n    assertFalse(\"CloudCollectionsListener contains new collection in old collection set\", oldResults.get(2).contains(\"testcollection2\"));\n\n    assertFalse(\"CloudCollectionsListener notified after removal\", newResults.get(1).contains(\"testcollection2\"));\n    assertTrue(\"CloudCollectionsListener does not contain new collection in list of new collections\", newResults.get(2).contains(\"testcollection2\"));\n\n    CollectionAdminRequest.deleteCollection(\"testcollection1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    CollectionAdminRequest.deleteCollection(\"testcollection2\").processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.getZkStateReader().removeCloudCollectionsListener(watcher2);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // added 17-Aug-2018\n  public void testSimpleCloudCollectionsListener() throws Exception {\n\n    CloudSolrClient client = cluster.getSolrClient();\n\n    Map<Integer, Set<String>> oldResults = new HashMap<>();\n    Map<Integer, Set<String>> newResults = new HashMap<>();\n\n    CloudCollectionsListener watcher1 = (oldCollections, newCollections) -> {\n      log.info(\"New set of collections: {}, {}\", oldCollections, newCollections);\n      oldResults.put(1, oldCollections);\n      newResults.put(1, newCollections);\n    };\n    client.getZkStateReader().registerCloudCollectionsListener(watcher1);\n    CloudCollectionsListener watcher2 = (oldCollections, newCollections) -> {\n      log.info(\"New set of collections: {}, {}\", oldCollections, newCollections);\n      oldResults.put(2, oldCollections);\n      newResults.put(2, newCollections);\n    };\n    client.getZkStateReader().registerCloudCollectionsListener(watcher2);\n\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", oldResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", oldResults.get(2).contains(\"testcollection1\"));\n\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", newResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener not triggered after registration\", newResults.get(2).contains(\"testcollection1\"));\n\n    CollectionAdminRequest.createCollection(\"testcollection1\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    client.waitForState(\"testcollection1\", MAX_WAIT_TIMEOUT, TimeUnit.SECONDS,\n        (n, c) -> DocCollection.isFullyActive(n, c, 4, 1));\n\n    assertFalse(\"CloudCollectionsListener has new collection in old set of collections\", oldResults.get(1).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener has new collection in old set of collections\", oldResults.get(2).contains(\"testcollection1\"));\n\n    assertTrue(\"CloudCollectionsListener doesn't have new collection in new set of collections\", newResults.get(1).contains(\"testcollection1\"));\n    assertTrue(\"CloudCollectionsListener doesn't have new collection in new set of collections\", newResults.get(2).contains(\"testcollection1\"));\n\n    client.getZkStateReader().removeCloudCollectionsListener(watcher1);\n\n    CollectionAdminRequest.createCollection(\"testcollection2\", \"config\", 4, 1)\n        .processAndWait(client, MAX_WAIT_TIMEOUT);\n    cluster.waitForActiveCollection(\"testcollection2\", 4, 4);\n\n\n    assertFalse(\"CloudCollectionsListener notified after removal\", oldResults.get(1).contains(\"testcollection1\"));\n    assertTrue(\"CloudCollectionsListener does not contain old collection in list of old collections\", oldResults.get(2).contains(\"testcollection1\"));\n    assertFalse(\"CloudCollectionsListener contains new collection in old collection set\", oldResults.get(1).contains(\"testcollection2\"));\n    assertFalse(\"CloudCollectionsListener contains new collection in old collection set\", oldResults.get(2).contains(\"testcollection2\"));\n\n    assertFalse(\"CloudCollectionsListener notified after removal\", newResults.get(1).contains(\"testcollection2\"));\n    assertTrue(\"CloudCollectionsListener does not contain new collection in list of new collections\", newResults.get(2).contains(\"testcollection2\"));\n\n    CollectionAdminRequest.deleteCollection(\"testcollection1\").processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    CollectionAdminRequest.deleteCollection(\"testcollection2\").processAndWait(client, MAX_WAIT_TIMEOUT);\n\n    client.getZkStateReader().removeCloudCollectionsListener(watcher2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cdc53359111a5e3782f56300070ab2878ec82cb9"],"cdc53359111a5e3782f56300070ab2878ec82cb9":["c8c7f17e23a807049d8e2f0cb429977d5130befa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8c7f17e23a807049d8e2f0cb429977d5130befa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"cdc53359111a5e3782f56300070ab2878ec82cb9":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8c7f17e23a807049d8e2f0cb429977d5130befa"],"c8c7f17e23a807049d8e2f0cb429977d5130befa":["cdc53359111a5e3782f56300070ab2878ec82cb9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8d35c84fdef07284c122012ca4000d3b7285a66e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}