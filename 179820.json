{"path":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10));\n        lmp = (LogMergePolicy) writer.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10));\n        lmp = (LogMergePolicy) writer.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10));\n      LogMergePolicy lmp = (LogMergePolicy) writer.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10));\n        lmp = (LogMergePolicy) writer.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(1+3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1), policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","date":1280297653,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    Random random = newRandom();\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(random,\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random,\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    Random random = newRandom();\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(random,\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random,\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    Random random = newRandom();\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(random,\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random,\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    Random random = newRandom();\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory(random);\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(random,\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random,\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    Random random = newRandom();\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new MockRAMDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(random,\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random,\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    Random random = newRandom();\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory(random);\n      IndexWriterConfig conf = newIndexWriterConfig(random,\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(random,\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(random,\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      lmp.setUseCompoundDocStore(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        lmp.setUseCompoundDocStore(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = new RAMDirectory();\n      IndexWriterConfig conf = new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", Similarity.getDefault().encodeNormValue(2.0F));\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", Similarity.getDefault().encodeNormValue(2.0F));\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9325c7ff9928fabe81c28553b41fc7aa57dfab","date":1295896411,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", Similarity.getDefault().encodeNormValue(2.0F));\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", Similarity.getDefault().encodeNormValue(2.0F));\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", 2.0F);\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      LogMergePolicy lmp = (LogMergePolicy) conf.getMergePolicy();\n      lmp.setUseCompoundFile(useCompoundFile);\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        lmp = (LogMergePolicy) conf.getMergePolicy();\n        lmp.setUseCompoundFile(useCompoundFile);\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = new IndexSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = new IndexSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n\n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");\n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer())\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer())\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3cee3d20b0c786e6fca20539454262e29edcab","date":1310101685,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        DefaultSimilarity sim = new DefaultSimilarity();\n        reader.setNorm(5, \"content\", sim.encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9507caf22f292ac0e5e59f62db4275adf4511","date":1310107283,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        DefaultSimilarity sim = new DefaultSimilarity();\n        reader.setNorm(5, \"content\", sim.encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        DefaultSimilarity sim = new DefaultSimilarity();\n        reader.setNorm(5, \"content\", sim.encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        reader.setNorm(5, \"content\", conf.getSimilarityProvider().get(\"content\").encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        DefaultSimilarity sim = new DefaultSimilarity();\n        reader.setNorm(5, \"content\", sim.encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexReader rwReader = IndexReader.open(dir, false);\n      IndexSearcher searcher = new IndexSearcher(rwReader);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n      \n      searcher.close();\n      rwReader.close();\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        DefaultSimilarity sim = new DefaultSimilarity();\n        reader.setNorm(5, \"content\", sim.encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexSearcher searcher = new IndexSearcher(dir, false);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4122a26e1fd0457a340616673a3d3aada370f713","date":1322955654,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexReader rwReader = IndexReader.open(dir, false);\n      IndexSearcher searcher = new IndexSearcher(rwReader);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n      \n      searcher.close();\n      rwReader.close();\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        DefaultSimilarity sim = new DefaultSimilarity();\n        reader.setNorm(5, \"content\", sim.encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexReader rwReader = IndexReader.open(dir, false);\n      IndexSearcher searcher = new IndexSearcher(rwReader);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n      \n      searcher.close();\n      rwReader.close();\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":null,"sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexReader rwReader = IndexReader.open(dir, false);\n      IndexSearcher searcher = new IndexSearcher(rwReader);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n      \n      searcher.close();\n      rwReader.close();\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae942527dccc283b3f591cae413117a26d96d4c2","date":1323366093,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDocWithID(writer, i*(N+1)+j);\n        }\n        // this is a commit\n        writer.close();\n        conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy)\n          .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n        writer = new IndexWriter(dir, conf);\n        writer.deleteDocuments(new Term(\"id\", \"\" + (i*(N+1)+3)));\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexReader rwReader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(rwReader);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n      \n      searcher.close();\n      rwReader.close();\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDocWithID(writer, i*(N+1)+j);\n        }\n        // this is a commit\n        writer.close();\n        conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy)\n          .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n        writer = new IndexWriter(dir, conf);\n        writer.deleteDocuments(new Term(\"id\", \"\" + (i*(N+1)+3)));\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexReader rwReader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(rwReader);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n      \n      searcher.close();\n      rwReader.close();\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        DefaultSimilarity sim = new DefaultSimilarity();\n        reader.setNorm(5, \"content\", sim.encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexReader rwReader = IndexReader.open(dir, false);\n      IndexSearcher searcher = new IndexSearcher(rwReader);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n      \n      searcher.close();\n      rwReader.close();\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDocWithID(writer, i*(N+1)+j);\n        }\n        // this is a commit\n        writer.close();\n        conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy)\n          .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n        writer = new IndexWriter(dir, conf);\n        writer.deleteDocuments(new Term(\"id\", \"\" + (i*(N+1)+3)));\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexReader rwReader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(rwReader);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n      \n      searcher.close();\n      rwReader.close();\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDoc(writer);\n        }\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir, policy, false);\n        reader.deleteDocument(3);\n        DefaultSimilarity sim = new DefaultSimilarity();\n        reader.setNorm(5, \"content\", sim.encodeNormValue(2.0F));\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        // this is a commit\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexReader rwReader = IndexReader.open(dir, false);\n      IndexSearcher searcher = new IndexSearcher(rwReader);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n      \n      searcher.close();\n      rwReader.close();\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir, true);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDocWithID(writer, i*(N+1)+j);\n        }\n        // this is a commit\n        writer.close();\n        conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy)\n          .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n        writer = new IndexWriter(dir, conf);\n        writer.deleteDocuments(new Term(\"id\", \"\" + (i*(N+1)+3)));\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        reader.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexReader rwReader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(rwReader);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n      \n      rwReader.close();\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDocWithID(writer, i*(N+1)+j);\n        }\n        // this is a commit\n        writer.close();\n        conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy)\n          .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n        writer = new IndexWriter(dir, conf);\n        writer.deleteDocuments(new Term(\"id\", \"\" + (i*(N+1)+3)));\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexReader rwReader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(rwReader);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n      \n      searcher.close();\n      rwReader.close();\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDocWithID(writer, i*(N+1)+j);\n        }\n        // this is a commit\n        writer.close();\n        conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy)\n          .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n        writer = new IndexWriter(dir, conf);\n        writer.deleteDocuments(new Term(\"id\", \"\" + (i*(N+1)+3)));\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        reader.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexReader rwReader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(rwReader);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n      \n      rwReader.close();\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDocWithID(writer, i*(N+1)+j);\n        }\n        // this is a commit\n        writer.close();\n        conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy)\n          .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n        writer = new IndexWriter(dir, conf);\n        writer.deleteDocuments(new Term(\"id\", \"\" + (i*(N+1)+3)));\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        reader.close();\n        searcher.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexReader rwReader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(rwReader);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n      \n      searcher.close();\n      rwReader.close();\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          searcher.close();\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDeletionPolicy#testKeepLastNDeletionPolicyWithCreates().mjava","sourceNew":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDocWithID(writer, i*(N+1)+j);\n        }\n        // this is a commit\n        writer.close();\n        conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy)\n          .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n        writer = new IndexWriter(dir, conf);\n        writer.deleteDocuments(new Term(\"id\", \"\" + (i*(N+1)+3)));\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        reader.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexReader rwReader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(rwReader);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n      \n      rwReader.close();\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /*\n   * Test a deletion policy that keeps last N commits\n   * around, through creates.\n   */\n  public void testKeepLastNDeletionPolicyWithCreates() throws IOException {\n    \n    final int N = 10;\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean useCompoundFile = (pass % 2) != 0;\n\n      KeepLastNDeletionPolicy policy = new KeepLastNDeletionPolicy(N);\n\n      Directory dir = newDirectory();\n      IndexWriterConfig conf = newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy)\n          .setMaxBufferedDocs(10);\n      MergePolicy mp = conf.getMergePolicy();\n      if (mp instanceof LogMergePolicy) {\n        ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n      }\n      IndexWriter writer = new IndexWriter(dir, conf);\n      writer.close();\n      Term searchTerm = new Term(\"content\", \"aaa\");        \n      Query query = new TermQuery(searchTerm);\n\n      for(int i=0;i<N+1;i++) {\n\n        conf = newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.APPEND).setIndexDeletionPolicy(policy)\n            .setMaxBufferedDocs(10);\n        mp = conf.getMergePolicy();\n        if (mp instanceof LogMergePolicy) {\n          ((LogMergePolicy) mp).setUseCompoundFile(useCompoundFile);\n        }\n        writer = new IndexWriter(dir, conf);\n        for(int j=0;j<17;j++) {\n          addDocWithID(writer, i*(N+1)+j);\n        }\n        // this is a commit\n        writer.close();\n        conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n          .setIndexDeletionPolicy(policy)\n          .setMergePolicy(NoMergePolicy.COMPOUND_FILES);\n        writer = new IndexWriter(dir, conf);\n        writer.deleteDocuments(new Term(\"id\", \"\" + (i*(N+1)+3)));\n        // this is a commit\n        writer.close();\n        IndexReader reader = IndexReader.open(dir);\n        IndexSearcher searcher = newSearcher(reader);\n        ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n        assertEquals(16, hits.length);\n        reader.close();\n\n        writer = new IndexWriter(dir, newIndexWriterConfig(\n            TEST_VERSION_CURRENT, new MockAnalyzer(random))\n            .setOpenMode(OpenMode.CREATE).setIndexDeletionPolicy(policy));\n        // This will not commit: there are no changes\n        // pending because we opened for \"create\":\n        writer.close();\n      }\n\n      assertEquals(3*(N+1), policy.numOnInit);\n      assertEquals(3*(N+1)+1, policy.numOnCommit);\n\n      IndexReader rwReader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(rwReader);\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(0, hits.length);\n\n      // Simplistic check: just verify only the past N segments_N's still\n      // exist, and, I can open a reader on each:\n      long gen = SegmentInfos.getCurrentSegmentGeneration(dir);\n\n      dir.deleteFile(IndexFileNames.SEGMENTS_GEN);\n      int expectedCount = 0;\n      \n      rwReader.close();\n\n      for(int i=0;i<N+1;i++) {\n        try {\n          IndexReader reader = IndexReader.open(dir);\n\n          // Work backwards in commits on what the expected\n          // count should be.\n          searcher = newSearcher(reader);\n          hits = searcher.search(query, null, 1000).scoreDocs;\n          assertEquals(expectedCount, hits.length);\n          if (expectedCount == 0) {\n            expectedCount = 16;\n          } else if (expectedCount == 16) {\n            expectedCount = 17;\n          } else if (expectedCount == 17) {\n            expectedCount = 0;\n          }\n          reader.close();\n          if (i == N) {\n            fail(\"should have failed on commits before last \" + N);\n          }\n        } catch (IOException e) {\n          if (i != N) {\n            throw e;\n          }\n        }\n        if (i < N) {\n          dir.deleteFile(IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", gen));\n        }\n        gen--;\n      }\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["4122a26e1fd0457a340616673a3d3aada370f713"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["8dc26bfa5ebbc55b5a04fbec545dfcec647b046b","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"c19f985e36a65cc969e8e564fe337a0d41512075":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"ae942527dccc283b3f591cae413117a26d96d4c2":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["868da859b43505d9d2a023bfeae6dd0c795f5295","fd9325c7ff9928fabe81c28553b41fc7aa57dfab"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":["a3776dccca01c11e7046323cfad46a3b4a471233","0f3cee3d20b0c786e6fca20539454262e29edcab"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0f3cee3d20b0c786e6fca20539454262e29edcab"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["1f653cfcf159baeaafe5d01682a911e95bba4012","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"962d04139994fce5193143ef35615499a9a96d78":["bde51b089eb7f86171eb3406e38a274743f9b7ac","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["c19f985e36a65cc969e8e564fe337a0d41512075"],"1291e4568eb7d9463d751627596ef14baf4c1603":["f2c5f0cb44df114db4228c8f77861714b5cabaea","0f3cee3d20b0c786e6fca20539454262e29edcab"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","ae942527dccc283b3f591cae413117a26d96d4c2"],"4122a26e1fd0457a340616673a3d3aada370f713":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["ae942527dccc283b3f591cae413117a26d96d4c2"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"c19f985e36a65cc969e8e564fe337a0d41512075":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"ae942527dccc283b3f591cae413117a26d96d4c2":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"fd9325c7ff9928fabe81c28553b41fc7aa57dfab":["c19f985e36a65cc969e8e564fe337a0d41512075","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["0f3cee3d20b0c786e6fca20539454262e29edcab","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","1291e4568eb7d9463d751627596ef14baf4c1603","a3776dccca01c11e7046323cfad46a3b4a471233"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d572389229127c297dd1fa5ce4758e1cec41e799"],"f0b9507caf22f292ac0e5e59f62db4275adf4511":[],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","4122a26e1fd0457a340616673a3d3aada370f713"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["962d04139994fce5193143ef35615499a9a96d78"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["fd9325c7ff9928fabe81c28553b41fc7aa57dfab","868da859b43505d9d2a023bfeae6dd0c795f5295"],"0f3cee3d20b0c786e6fca20539454262e29edcab":["f0b9507caf22f292ac0e5e59f62db4275adf4511","a3a0403b45dfe384fae4a1b6e96c3265d000c498","1291e4568eb7d9463d751627596ef14baf4c1603"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"d572389229127c297dd1fa5ce4758e1cec41e799":["b21422ff1d1d56499dec481f193b402e5e8def5b","8dc26bfa5ebbc55b5a04fbec545dfcec647b046b"],"962d04139994fce5193143ef35615499a9a96d78":[],"8dc26bfa5ebbc55b5a04fbec545dfcec647b046b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["f2c5f0cb44df114db4228c8f77861714b5cabaea","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"1291e4568eb7d9463d751627596ef14baf4c1603":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0b9507caf22f292ac0e5e59f62db4275adf4511"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"4122a26e1fd0457a340616673a3d3aada370f713":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","f0b9507caf22f292ac0e5e59f62db4275adf4511","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","1291e4568eb7d9463d751627596ef14baf4c1603","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}