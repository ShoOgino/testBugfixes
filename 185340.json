{"path":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMergeBoost().mjava","commits":[{"id":"cca23c5b56c19b85dda9a06be0959a0d9bdacc2e","date":1421246103,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMergeBoost().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n\n  public void testMergeBoost() throws Exception {\n\n    Set<Integer> boosted = new HashSet();\n    Set<Integer> results = new HashSet();\n\n    for(int i=0; i<200; i++) {\n      boosted.add(random().nextInt(1000));\n    }\n\n    for(int i=0; i<200; i++) {\n      results.add(random().nextInt(1000));\n    }\n\n    int[] boostedArray = new int[boosted.size()];\n    int[] resultsArray = new int[results.size()];\n\n    Iterator<Integer> boostIt = boosted.iterator();\n    int index = 0;\n    while(boostIt.hasNext()) {\n      boostedArray[index++] = boostIt.next();\n    }\n\n    Iterator<Integer> resultsIt = results.iterator();\n    index = 0;\n    while(resultsIt.hasNext()) {\n      resultsArray[index++] = resultsIt.next();\n    }\n\n    Arrays.sort(boostedArray);\n    Arrays.sort(resultsArray);\n\n    CollapsingQParserPlugin.MergeBoost mergeBoost = new CollapsingQParserPlugin.MergeBoost(boostedArray);\n\n    List<Integer> boostedResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(mergeBoost.boost(result)) {\n        boostedResults.add(result);\n      }\n    }\n\n    List<Integer> controlResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(Arrays.binarySearch(boostedArray, result) > -1) {\n        controlResults.add(result);\n      }\n    }\n\n    if(boostedResults.size() == controlResults.size()) {\n      for(int i=0; i<boostedResults.size(); i++) {\n        if(!boostedResults.get(i).equals(controlResults.get(i).intValue())) {\n          throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n        }\n      }\n    } else {\n      throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a9c4a5022409b649909f75244642a57739b3598","date":1422812185,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMergeBoost().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMergeBoost().mjava","sourceNew":"  @Test\n  public void testMergeBoost() throws Exception {\n\n    Set<Integer> boosted = new HashSet();\n    Set<Integer> results = new HashSet();\n\n    for(int i=0; i<200; i++) {\n      boosted.add(random().nextInt(1000));\n    }\n\n    for(int i=0; i<200; i++) {\n      results.add(random().nextInt(1000));\n    }\n\n    int[] boostedArray = new int[boosted.size()];\n    int[] resultsArray = new int[results.size()];\n\n    Iterator<Integer> boostIt = boosted.iterator();\n    int index = 0;\n    while(boostIt.hasNext()) {\n      boostedArray[index++] = boostIt.next();\n    }\n\n    Iterator<Integer> resultsIt = results.iterator();\n    index = 0;\n    while(resultsIt.hasNext()) {\n      resultsArray[index++] = resultsIt.next();\n    }\n\n    Arrays.sort(boostedArray);\n    Arrays.sort(resultsArray);\n\n    CollapsingQParserPlugin.MergeBoost mergeBoost = new CollapsingQParserPlugin.MergeBoost(boostedArray);\n\n    List<Integer> boostedResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(mergeBoost.boost(result)) {\n        boostedResults.add(result);\n      }\n    }\n\n    List<Integer> controlResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(Arrays.binarySearch(boostedArray, result) > -1) {\n        controlResults.add(result);\n      }\n    }\n\n    if(boostedResults.size() == controlResults.size()) {\n      for(int i=0; i<boostedResults.size(); i++) {\n        if(!boostedResults.get(i).equals(controlResults.get(i).intValue())) {\n          throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n        }\n      }\n    } else {\n      throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n\n  public void testMergeBoost() throws Exception {\n\n    Set<Integer> boosted = new HashSet();\n    Set<Integer> results = new HashSet();\n\n    for(int i=0; i<200; i++) {\n      boosted.add(random().nextInt(1000));\n    }\n\n    for(int i=0; i<200; i++) {\n      results.add(random().nextInt(1000));\n    }\n\n    int[] boostedArray = new int[boosted.size()];\n    int[] resultsArray = new int[results.size()];\n\n    Iterator<Integer> boostIt = boosted.iterator();\n    int index = 0;\n    while(boostIt.hasNext()) {\n      boostedArray[index++] = boostIt.next();\n    }\n\n    Iterator<Integer> resultsIt = results.iterator();\n    index = 0;\n    while(resultsIt.hasNext()) {\n      resultsArray[index++] = resultsIt.next();\n    }\n\n    Arrays.sort(boostedArray);\n    Arrays.sort(resultsArray);\n\n    CollapsingQParserPlugin.MergeBoost mergeBoost = new CollapsingQParserPlugin.MergeBoost(boostedArray);\n\n    List<Integer> boostedResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(mergeBoost.boost(result)) {\n        boostedResults.add(result);\n      }\n    }\n\n    List<Integer> controlResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(Arrays.binarySearch(boostedArray, result) > -1) {\n        controlResults.add(result);\n      }\n    }\n\n    if(boostedResults.size() == controlResults.size()) {\n      for(int i=0; i<boostedResults.size(); i++) {\n        if(!boostedResults.get(i).equals(controlResults.get(i).intValue())) {\n          throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n        }\n      }\n    } else {\n      throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4958642f967bfbd6f083ddf50f141bcde89b9ec1","date":1489572234,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMergeBoost().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMergeBoost().mjava","sourceNew":"  @Test\n  public void testMergeBoost() throws Exception {\n\n    Set<Integer> boosted = new HashSet();\n    Set<Integer> results = new HashSet();\n\n    for(int i=0; i<200; i++) {\n      boosted.add(random().nextInt(1000));\n    }\n\n    for(int i=0; i<200; i++) {\n      results.add(random().nextInt(1000));\n    }\n\n    int[] boostedArray = new int[boosted.size()];\n    int[] resultsArray = new int[results.size()];\n\n    Iterator<Integer> boostIt = boosted.iterator();\n    int index = 0;\n    while(boostIt.hasNext()) {\n      boostedArray[index++] = boostIt.next();\n    }\n\n    Iterator<Integer> resultsIt = results.iterator();\n    index = 0;\n    while(resultsIt.hasNext()) {\n      resultsArray[index++] = resultsIt.next();\n    }\n\n    Arrays.sort(boostedArray);\n    Arrays.sort(resultsArray);\n\n    CollapsingQParserPlugin.MergeBoost mergeBoost = new CollapsingQParserPlugin.MergeBoost(boostedArray);\n\n    List<Integer> boostedResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(mergeBoost.boost(result)) {\n        boostedResults.add(result);\n      }\n    }\n\n    List<Integer> controlResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(Arrays.binarySearch(boostedArray, result) > -1) {\n        controlResults.add(result);\n      }\n    }\n\n    if(boostedResults.size() == controlResults.size()) {\n      for(int i=0; i<boostedResults.size(); i++) {\n        if(!boostedResults.get(i).equals(controlResults.get(i))) {\n          throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n        }\n      }\n    } else {\n      throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMergeBoost() throws Exception {\n\n    Set<Integer> boosted = new HashSet();\n    Set<Integer> results = new HashSet();\n\n    for(int i=0; i<200; i++) {\n      boosted.add(random().nextInt(1000));\n    }\n\n    for(int i=0; i<200; i++) {\n      results.add(random().nextInt(1000));\n    }\n\n    int[] boostedArray = new int[boosted.size()];\n    int[] resultsArray = new int[results.size()];\n\n    Iterator<Integer> boostIt = boosted.iterator();\n    int index = 0;\n    while(boostIt.hasNext()) {\n      boostedArray[index++] = boostIt.next();\n    }\n\n    Iterator<Integer> resultsIt = results.iterator();\n    index = 0;\n    while(resultsIt.hasNext()) {\n      resultsArray[index++] = resultsIt.next();\n    }\n\n    Arrays.sort(boostedArray);\n    Arrays.sort(resultsArray);\n\n    CollapsingQParserPlugin.MergeBoost mergeBoost = new CollapsingQParserPlugin.MergeBoost(boostedArray);\n\n    List<Integer> boostedResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(mergeBoost.boost(result)) {\n        boostedResults.add(result);\n      }\n    }\n\n    List<Integer> controlResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(Arrays.binarySearch(boostedArray, result) > -1) {\n        controlResults.add(result);\n      }\n    }\n\n    if(boostedResults.size() == controlResults.size()) {\n      for(int i=0; i<boostedResults.size(); i++) {\n        if(!boostedResults.get(i).equals(controlResults.get(i).intValue())) {\n          throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n        }\n      }\n    } else {\n      throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bca83a747f8e297ee4412c0d18bdd3a98c09df3b","date":1489651910,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMergeBoost().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMergeBoost().mjava","sourceNew":"  @Test\n  public void testMergeBoost() throws Exception {\n\n    Set<Integer> boosted = new HashSet();\n    Set<Integer> results = new HashSet();\n\n    for(int i=0; i<200; i++) {\n      boosted.add(random().nextInt(1000));\n    }\n\n    for(int i=0; i<200; i++) {\n      results.add(random().nextInt(1000));\n    }\n\n    int[] boostedArray = new int[boosted.size()];\n    int[] resultsArray = new int[results.size()];\n\n    Iterator<Integer> boostIt = boosted.iterator();\n    int index = 0;\n    while(boostIt.hasNext()) {\n      boostedArray[index++] = boostIt.next();\n    }\n\n    Iterator<Integer> resultsIt = results.iterator();\n    index = 0;\n    while(resultsIt.hasNext()) {\n      resultsArray[index++] = resultsIt.next();\n    }\n\n    Arrays.sort(boostedArray);\n    Arrays.sort(resultsArray);\n\n    CollapsingQParserPlugin.MergeBoost mergeBoost = new CollapsingQParserPlugin.MergeBoost(boostedArray);\n\n    List<Integer> boostedResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(mergeBoost.boost(result)) {\n        boostedResults.add(result);\n      }\n    }\n\n    List<Integer> controlResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(Arrays.binarySearch(boostedArray, result) > -1) {\n        controlResults.add(result);\n      }\n    }\n\n    if(boostedResults.size() == controlResults.size()) {\n      for(int i=0; i<boostedResults.size(); i++) {\n        if(!boostedResults.get(i).equals(controlResults.get(i))) {\n          throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n        }\n      }\n    } else {\n      throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMergeBoost() throws Exception {\n\n    Set<Integer> boosted = new HashSet();\n    Set<Integer> results = new HashSet();\n\n    for(int i=0; i<200; i++) {\n      boosted.add(random().nextInt(1000));\n    }\n\n    for(int i=0; i<200; i++) {\n      results.add(random().nextInt(1000));\n    }\n\n    int[] boostedArray = new int[boosted.size()];\n    int[] resultsArray = new int[results.size()];\n\n    Iterator<Integer> boostIt = boosted.iterator();\n    int index = 0;\n    while(boostIt.hasNext()) {\n      boostedArray[index++] = boostIt.next();\n    }\n\n    Iterator<Integer> resultsIt = results.iterator();\n    index = 0;\n    while(resultsIt.hasNext()) {\n      resultsArray[index++] = resultsIt.next();\n    }\n\n    Arrays.sort(boostedArray);\n    Arrays.sort(resultsArray);\n\n    CollapsingQParserPlugin.MergeBoost mergeBoost = new CollapsingQParserPlugin.MergeBoost(boostedArray);\n\n    List<Integer> boostedResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(mergeBoost.boost(result)) {\n        boostedResults.add(result);\n      }\n    }\n\n    List<Integer> controlResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(Arrays.binarySearch(boostedArray, result) > -1) {\n        controlResults.add(result);\n      }\n    }\n\n    if(boostedResults.size() == controlResults.size()) {\n      for(int i=0; i<boostedResults.size(); i++) {\n        if(!boostedResults.get(i).equals(controlResults.get(i).intValue())) {\n          throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n        }\n      }\n    } else {\n      throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMergeBoost().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMergeBoost().mjava","sourceNew":"  @Test\n  public void testMergeBoost() throws Exception {\n\n    Set<Integer> boosted = new HashSet();\n    Set<Integer> results = new HashSet();\n\n    for(int i=0; i<200; i++) {\n      boosted.add(random().nextInt(1000));\n    }\n\n    for(int i=0; i<200; i++) {\n      results.add(random().nextInt(1000));\n    }\n\n    int[] boostedArray = new int[boosted.size()];\n    int[] resultsArray = new int[results.size()];\n\n    Iterator<Integer> boostIt = boosted.iterator();\n    int index = 0;\n    while(boostIt.hasNext()) {\n      boostedArray[index++] = boostIt.next();\n    }\n\n    Iterator<Integer> resultsIt = results.iterator();\n    index = 0;\n    while(resultsIt.hasNext()) {\n      resultsArray[index++] = resultsIt.next();\n    }\n\n    Arrays.sort(boostedArray);\n    Arrays.sort(resultsArray);\n\n    CollapsingQParserPlugin.MergeBoost mergeBoost = new CollapsingQParserPlugin.MergeBoost(boostedArray);\n\n    List<Integer> boostedResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(mergeBoost.boost(result)) {\n        boostedResults.add(result);\n      }\n    }\n\n    List<Integer> controlResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(Arrays.binarySearch(boostedArray, result) > -1) {\n        controlResults.add(result);\n      }\n    }\n\n    if(boostedResults.size() == controlResults.size()) {\n      for(int i=0; i<boostedResults.size(); i++) {\n        if(!boostedResults.get(i).equals(controlResults.get(i))) {\n          throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n        }\n      }\n    } else {\n      throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMergeBoost() throws Exception {\n\n    Set<Integer> boosted = new HashSet();\n    Set<Integer> results = new HashSet();\n\n    for(int i=0; i<200; i++) {\n      boosted.add(random().nextInt(1000));\n    }\n\n    for(int i=0; i<200; i++) {\n      results.add(random().nextInt(1000));\n    }\n\n    int[] boostedArray = new int[boosted.size()];\n    int[] resultsArray = new int[results.size()];\n\n    Iterator<Integer> boostIt = boosted.iterator();\n    int index = 0;\n    while(boostIt.hasNext()) {\n      boostedArray[index++] = boostIt.next();\n    }\n\n    Iterator<Integer> resultsIt = results.iterator();\n    index = 0;\n    while(resultsIt.hasNext()) {\n      resultsArray[index++] = resultsIt.next();\n    }\n\n    Arrays.sort(boostedArray);\n    Arrays.sort(resultsArray);\n\n    CollapsingQParserPlugin.MergeBoost mergeBoost = new CollapsingQParserPlugin.MergeBoost(boostedArray);\n\n    List<Integer> boostedResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(mergeBoost.boost(result)) {\n        boostedResults.add(result);\n      }\n    }\n\n    List<Integer> controlResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(Arrays.binarySearch(boostedArray, result) > -1) {\n        controlResults.add(result);\n      }\n    }\n\n    if(boostedResults.size() == controlResults.size()) {\n      for(int i=0; i<boostedResults.size(); i++) {\n        if(!boostedResults.get(i).equals(controlResults.get(i).intValue())) {\n          throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n        }\n      }\n    } else {\n      throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMergeBoost().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestCollapseQParserPlugin#testMergeBoost().mjava","sourceNew":"  @Test\n  public void testMergeBoost() throws Exception {\n\n    Set<Integer> boosted = new HashSet<>();\n    Set<Integer> results = new HashSet<>();\n\n    for(int i=0; i<200; i++) {\n      boosted.add(random().nextInt(1000));\n    }\n\n    for(int i=0; i<200; i++) {\n      results.add(random().nextInt(1000));\n    }\n\n    int[] boostedArray = new int[boosted.size()];\n    int[] resultsArray = new int[results.size()];\n\n    Iterator<Integer> boostIt = boosted.iterator();\n    int index = 0;\n    while(boostIt.hasNext()) {\n      boostedArray[index++] = boostIt.next();\n    }\n\n    Iterator<Integer> resultsIt = results.iterator();\n    index = 0;\n    while(resultsIt.hasNext()) {\n      resultsArray[index++] = resultsIt.next();\n    }\n\n    Arrays.sort(boostedArray);\n    Arrays.sort(resultsArray);\n\n    CollapsingQParserPlugin.MergeBoost mergeBoost = new CollapsingQParserPlugin.MergeBoost(boostedArray);\n\n    List<Integer> boostedResults = new ArrayList<>();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(mergeBoost.boost(result)) {\n        boostedResults.add(result);\n      }\n    }\n\n    List<Integer> controlResults = new ArrayList<>();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(Arrays.binarySearch(boostedArray, result) > -1) {\n        controlResults.add(result);\n      }\n    }\n\n    if(boostedResults.size() == controlResults.size()) {\n      for(int i=0; i<boostedResults.size(); i++) {\n        if(!boostedResults.get(i).equals(controlResults.get(i))) {\n          throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n        }\n      }\n    } else {\n      throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testMergeBoost() throws Exception {\n\n    Set<Integer> boosted = new HashSet();\n    Set<Integer> results = new HashSet();\n\n    for(int i=0; i<200; i++) {\n      boosted.add(random().nextInt(1000));\n    }\n\n    for(int i=0; i<200; i++) {\n      results.add(random().nextInt(1000));\n    }\n\n    int[] boostedArray = new int[boosted.size()];\n    int[] resultsArray = new int[results.size()];\n\n    Iterator<Integer> boostIt = boosted.iterator();\n    int index = 0;\n    while(boostIt.hasNext()) {\n      boostedArray[index++] = boostIt.next();\n    }\n\n    Iterator<Integer> resultsIt = results.iterator();\n    index = 0;\n    while(resultsIt.hasNext()) {\n      resultsArray[index++] = resultsIt.next();\n    }\n\n    Arrays.sort(boostedArray);\n    Arrays.sort(resultsArray);\n\n    CollapsingQParserPlugin.MergeBoost mergeBoost = new CollapsingQParserPlugin.MergeBoost(boostedArray);\n\n    List<Integer> boostedResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(mergeBoost.boost(result)) {\n        boostedResults.add(result);\n      }\n    }\n\n    List<Integer> controlResults = new ArrayList();\n\n    for(int i=0; i<resultsArray.length; i++) {\n      int result = resultsArray[i];\n      if(Arrays.binarySearch(boostedArray, result) > -1) {\n        controlResults.add(result);\n      }\n    }\n\n    if(boostedResults.size() == controlResults.size()) {\n      for(int i=0; i<boostedResults.size(); i++) {\n        if(!boostedResults.get(i).equals(controlResults.get(i))) {\n          throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n        }\n      }\n    } else {\n      throw new Exception(\"boosted results do not match control results, boostedResults size:\"+boostedResults.toString()+\", controlResults size:\"+controlResults.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4958642f967bfbd6f083ddf50f141bcde89b9ec1":["0a9c4a5022409b649909f75244642a57739b3598"],"cca23c5b56c19b85dda9a06be0959a0d9bdacc2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a9c4a5022409b649909f75244642a57739b3598":["cca23c5b56c19b85dda9a06be0959a0d9bdacc2e"],"bca83a747f8e297ee4412c0d18bdd3a98c09df3b":["0a9c4a5022409b649909f75244642a57739b3598"],"ab68488225b6a6c357dda72ed11dedca9914a192":["0a9c4a5022409b649909f75244642a57739b3598","bca83a747f8e297ee4412c0d18bdd3a98c09df3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["4958642f967bfbd6f083ddf50f141bcde89b9ec1"]},"commit2Childs":{"4958642f967bfbd6f083ddf50f141bcde89b9ec1":["e98520789adb1d5ad05afb4956eca0944a929688"],"cca23c5b56c19b85dda9a06be0959a0d9bdacc2e":["0a9c4a5022409b649909f75244642a57739b3598"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cca23c5b56c19b85dda9a06be0959a0d9bdacc2e"],"0a9c4a5022409b649909f75244642a57739b3598":["4958642f967bfbd6f083ddf50f141bcde89b9ec1","bca83a747f8e297ee4412c0d18bdd3a98c09df3b","ab68488225b6a6c357dda72ed11dedca9914a192"],"bca83a747f8e297ee4412c0d18bdd3a98c09df3b":["ab68488225b6a6c357dda72ed11dedca9914a192"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}