{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","sourceNew":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","sourceNew":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getIndexReader(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","sourceNew":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getIndexReader(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getTopReaderContext(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestPayloadSpans#testHeavilyNestedSpanQuery().mjava","sourceNew":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getIndexReader(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testHeavilyNestedSpanQuery() throws Exception {\n    Spans spans;\n    IndexSearcher searcher = getSearcher();\n\n    SpanQuery[] clauses = new SpanQuery[3];\n    clauses[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"one\"));\n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"two\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"three\"));\n\n    SpanNearQuery spanNearQuery = new SpanNearQuery(clauses, 5, true);\n   \n    clauses = new SpanQuery[3];\n    clauses[0] = spanNearQuery; \n    clauses[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"five\"));\n    clauses[2] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"six\"));\n\n    SpanNearQuery spanNearQuery2 = new SpanNearQuery(clauses, 6, true);\n     \n    SpanQuery[] clauses2 = new SpanQuery[2];\n    clauses2[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"eleven\"));\n    clauses2[1] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"ten\"));\n    SpanNearQuery spanNearQuery3 = new SpanNearQuery(clauses2, 2, false);\n    \n    SpanQuery[] clauses3 = new SpanQuery[3];\n    clauses3[0] = new SpanTermQuery(new Term(PayloadHelper.FIELD, \"nine\"));\n    clauses3[1] = spanNearQuery2;\n    clauses3[2] = spanNearQuery3;\n     \n    SpanNearQuery nestedSpanNearQuery = new SpanNearQuery(clauses3, 6, false);\n\n    spans = MultiSpansWrapper.wrap(searcher.getIndexReader(), nestedSpanNearQuery);\n    assertTrue(\"spans is null and it shouldn't be\", spans != null);\n    checkSpans(spans, 2, new int[]{8, 8});\n    closeIndexReader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fab172655716b96f7e42376116235017a922de3a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"]},"commit2Childs":{"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}