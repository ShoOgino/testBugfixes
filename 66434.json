{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/QueryData#getAll(Query[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/QueryData#getAll(Query[]).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/QueryData#getAll(Query[]).mjava","sourceNew":"  /**\n   * Prepare a list of benchmark data, using all possible combinations of\n   * benchmark parameters.\n   * @param queries source Lucene queries\n   * @return The QueryData\n   */\n  public static QueryData[] getAll(Query[] queries) {\n    Vector<QueryData> vqd = new Vector<QueryData>();\n    for (int i = 0; i < queries.length; i++) {\n      for (int r = 1; r >= 0; r--) {\n        for (int w = 1; w >= 0; w--) {\n          for (int t = 0; t < 2; t++) {\n            QueryData qd = new QueryData();\n            qd.id=\"qd-\" + i + r + w + t;\n            qd.reopen = Constants.BOOLEANS[r].booleanValue();\n            qd.warmup = Constants.BOOLEANS[w].booleanValue();\n            qd.retrieve = Constants.BOOLEANS[t].booleanValue();\n            qd.q = queries[i];\n            vqd.add(qd);\n          }\n        }\n      }\n    }\n    return vqd.toArray(new QueryData[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare a list of benchmark data, using all possible combinations of\n   * benchmark parameters.\n   * @param queries source Lucene queries\n   * @return The QueryData\n   */\n  public static QueryData[] getAll(Query[] queries) {\n    Vector<QueryData> vqd = new Vector<QueryData>();\n    for (int i = 0; i < queries.length; i++) {\n      for (int r = 1; r >= 0; r--) {\n        for (int w = 1; w >= 0; w--) {\n          for (int t = 0; t < 2; t++) {\n            QueryData qd = new QueryData();\n            qd.id=\"qd-\" + i + r + w + t;\n            qd.reopen = Constants.BOOLEANS[r].booleanValue();\n            qd.warmup = Constants.BOOLEANS[w].booleanValue();\n            qd.retrieve = Constants.BOOLEANS[t].booleanValue();\n            qd.q = queries[i];\n            vqd.add(qd);\n          }\n        }\n      }\n    }\n    return vqd.toArray(new QueryData[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/stats/QueryData#getAll(Query[]).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/QueryData#getAll(Query[]).mjava","sourceNew":"  /**\n   * Prepare a list of benchmark data, using all possible combinations of\n   * benchmark parameters.\n   * @param queries source Lucene queries\n   * @return The QueryData\n   */\n  public static QueryData[] getAll(Query[] queries) {\n    Vector<QueryData> vqd = new Vector<QueryData>();\n    for (int i = 0; i < queries.length; i++) {\n      for (int r = 1; r >= 0; r--) {\n        for (int w = 1; w >= 0; w--) {\n          for (int t = 0; t < 2; t++) {\n            QueryData qd = new QueryData();\n            qd.id=\"qd-\" + i + r + w + t;\n            qd.reopen = Constants.BOOLEANS[r].booleanValue();\n            qd.warmup = Constants.BOOLEANS[w].booleanValue();\n            qd.retrieve = Constants.BOOLEANS[t].booleanValue();\n            qd.q = queries[i];\n            vqd.add(qd);\n          }\n        }\n      }\n    }\n    return vqd.toArray(new QueryData[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare a list of benchmark data, using all possible combinations of\n   * benchmark parameters.\n   * @param queries source Lucene queries\n   * @return The QueryData\n   */\n  public static QueryData[] getAll(Query[] queries) {\n    Vector<QueryData> vqd = new Vector<QueryData>();\n    for (int i = 0; i < queries.length; i++) {\n      for (int r = 1; r >= 0; r--) {\n        for (int w = 1; w >= 0; w--) {\n          for (int t = 0; t < 2; t++) {\n            QueryData qd = new QueryData();\n            qd.id=\"qd-\" + i + r + w + t;\n            qd.reopen = Constants.BOOLEANS[r].booleanValue();\n            qd.warmup = Constants.BOOLEANS[w].booleanValue();\n            qd.retrieve = Constants.BOOLEANS[t].booleanValue();\n            qd.q = queries[i];\n            vqd.add(qd);\n          }\n        }\n      }\n    }\n    return vqd.toArray(new QueryData[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/stats/QueryData#getAll(Query[]).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/QueryData#getAll(Query[]).mjava","sourceNew":"  /**\n   * Prepare a list of benchmark data, using all possible combinations of\n   * benchmark parameters.\n   * @param queries source Lucene queries\n   * @return The QueryData\n   */\n  public static QueryData[] getAll(Query[] queries) {\n    Vector<QueryData> vqd = new Vector<QueryData>();\n    for (int i = 0; i < queries.length; i++) {\n      for (int r = 1; r >= 0; r--) {\n        for (int w = 1; w >= 0; w--) {\n          for (int t = 0; t < 2; t++) {\n            QueryData qd = new QueryData();\n            qd.id=\"qd-\" + i + r + w + t;\n            qd.reopen = Constants.BOOLEANS[r].booleanValue();\n            qd.warmup = Constants.BOOLEANS[w].booleanValue();\n            qd.retrieve = Constants.BOOLEANS[t].booleanValue();\n            qd.q = queries[i];\n            vqd.add(qd);\n          }\n        }\n      }\n    }\n    return vqd.toArray(new QueryData[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare a list of benchmark data, using all possible combinations of\n   * benchmark parameters.\n   * @param queries source Lucene queries\n   * @return The QueryData\n   */\n  public static QueryData[] getAll(Query[] queries) {\n    Vector<QueryData> vqd = new Vector<QueryData>();\n    for (int i = 0; i < queries.length; i++) {\n      for (int r = 1; r >= 0; r--) {\n        for (int w = 1; w >= 0; w--) {\n          for (int t = 0; t < 2; t++) {\n            QueryData qd = new QueryData();\n            qd.id=\"qd-\" + i + r + w + t;\n            qd.reopen = Constants.BOOLEANS[r].booleanValue();\n            qd.warmup = Constants.BOOLEANS[w].booleanValue();\n            qd.retrieve = Constants.BOOLEANS[t].booleanValue();\n            qd.q = queries[i];\n            vqd.add(qd);\n          }\n        }\n      }\n    }\n    return vqd.toArray(new QueryData[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/stats/QueryData#getAll(Query[]).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/stats/QueryData#getAll(Query[]).mjava","sourceNew":"  /**\n   * Prepare a list of benchmark data, using all possible combinations of\n   * benchmark parameters.\n   * @param queries source Lucene queries\n   * @return The QueryData\n   */\n  public static QueryData[] getAll(Query[] queries) {\n    Vector<QueryData> vqd = new Vector<QueryData>();\n    for (int i = 0; i < queries.length; i++) {\n      for (int r = 1; r >= 0; r--) {\n        for (int w = 1; w >= 0; w--) {\n          for (int t = 0; t < 2; t++) {\n            QueryData qd = new QueryData();\n            qd.id=\"qd-\" + i + r + w + t;\n            qd.reopen = Constants.BOOLEANS[r].booleanValue();\n            qd.warmup = Constants.BOOLEANS[w].booleanValue();\n            qd.retrieve = Constants.BOOLEANS[t].booleanValue();\n            qd.q = queries[i];\n            vqd.add(qd);\n          }\n        }\n      }\n    }\n    return vqd.toArray(new QueryData[0]);\n  }\n\n","sourceOld":"  /**\n   * Prepare a list of benchmark data, using all possible combinations of\n   * benchmark parameters.\n   * @param queries source Lucene queries\n   * @return The QueryData\n   */\n  public static QueryData[] getAll(Query[] queries) {\n    Vector<QueryData> vqd = new Vector<QueryData>();\n    for (int i = 0; i < queries.length; i++) {\n      for (int r = 1; r >= 0; r--) {\n        for (int w = 1; w >= 0; w--) {\n          for (int t = 0; t < 2; t++) {\n            QueryData qd = new QueryData();\n            qd.id=\"qd-\" + i + r + w + t;\n            qd.reopen = Constants.BOOLEANS[r].booleanValue();\n            qd.warmup = Constants.BOOLEANS[w].booleanValue();\n            qd.retrieve = Constants.BOOLEANS[t].booleanValue();\n            qd.q = queries[i];\n            vqd.add(qd);\n          }\n        }\n      }\n    }\n    return vqd.toArray(new QueryData[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}