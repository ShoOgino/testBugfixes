{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createWeight(Query,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createWeight(Query,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createWeight(Query,boolean,float).mjava","sourceNew":"  /**\n   * Creates a {@link Weight} for the given query, potentially adding caching\n   * if possible and configured.\n   * @lucene.experimental\n   */\n  public Weight createWeight(Query query, ScoreMode scoreMode, float boost) throws IOException {\n    final QueryCache queryCache = this.queryCache;\n    Weight weight = query.createWeight(this, scoreMode, boost);\n    if (scoreMode.needsScores() == false && queryCache != null) {\n      weight = queryCache.doCache(weight, queryCachingPolicy);\n    }\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link Weight} for the given query, potentially adding caching\n   * if possible and configured.\n   * @lucene.experimental\n   */\n  public Weight createWeight(Query query, boolean needsScores, float boost) throws IOException {\n    final QueryCache queryCache = this.queryCache;\n    Weight weight = query.createWeight(this, needsScores, boost);\n    if (needsScores == false && queryCache != null) {\n      weight = queryCache.doCache(weight, queryCachingPolicy);\n    }\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createWeight(Query,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createWeight(Query,boolean,float).mjava","sourceNew":"  /**\n   * Creates a {@link Weight} for the given query, potentially adding caching\n   * if possible and configured.\n   * @lucene.experimental\n   */\n  public Weight createWeight(Query query, ScoreMode scoreMode, float boost) throws IOException {\n    final QueryCache queryCache = this.queryCache;\n    Weight weight = query.createWeight(this, scoreMode, boost);\n    if (scoreMode.needsScores() == false && queryCache != null) {\n      weight = queryCache.doCache(weight, queryCachingPolicy);\n    }\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link Weight} for the given query, potentially adding caching\n   * if possible and configured.\n   * @lucene.experimental\n   */\n  public Weight createWeight(Query query, boolean needsScores, float boost) throws IOException {\n    final QueryCache queryCache = this.queryCache;\n    Weight weight = query.createWeight(this, needsScores, boost);\n    if (needsScores == false && queryCache != null) {\n      weight = queryCache.doCache(weight, queryCachingPolicy);\n    }\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f740a4cb7f5949ddb40a1647671c4a997223312","date":1569677340,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createWeight(Query,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createWeight(Query,ScoreMode,float).mjava","sourceNew":"  /**\n   * Creates a {@link Weight} for the given query, potentially adding caching\n   * if possible and configured.\n   * @lucene.experimental\n   */\n  public Weight createWeight(Query query, ScoreMode scoreMode, float boost) throws IOException {\n    final QueryCache queryCache = this.queryCache;\n    Weight weight = query.createWeight(this, scoreMode, boost);\n    if (scoreMode.needsScores() == false && queryCache != null) {\n      if (executor != null) {\n        weight = queryCache.doCache(weight, queryCachingPolicy, executor);\n      } else {\n        weight = queryCache.doCache(weight, queryCachingPolicy);\n      }\n    }\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link Weight} for the given query, potentially adding caching\n   * if possible and configured.\n   * @lucene.experimental\n   */\n  public Weight createWeight(Query query, ScoreMode scoreMode, float boost) throws IOException {\n    final QueryCache queryCache = this.queryCache;\n    Weight weight = query.createWeight(this, scoreMode, boost);\n    if (scoreMode.needsScores() == false && queryCache != null) {\n      weight = queryCache.doCache(weight, queryCachingPolicy);\n    }\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b9f74021389e2b32ee750fa5a24281c87951ec3","date":1569845983,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createWeight(Query,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createWeight(Query,ScoreMode,float).mjava","sourceNew":"  /**\n   * Creates a {@link Weight} for the given query, potentially adding caching\n   * if possible and configured.\n   * @lucene.experimental\n   */\n  public Weight createWeight(Query query, ScoreMode scoreMode, float boost) throws IOException {\n    final QueryCache queryCache = this.queryCache;\n    Weight weight = query.createWeight(this, scoreMode, boost);\n    if (scoreMode.needsScores() == false && queryCache != null) {\n      if (executor != null) {\n        weight = queryCache.doCache(weight, queryCachingPolicy, executor);\n      } else {\n        weight = queryCache.doCache(weight, queryCachingPolicy);\n      }\n    }\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link Weight} for the given query, potentially adding caching\n   * if possible and configured.\n   * @lucene.experimental\n   */\n  public Weight createWeight(Query query, ScoreMode scoreMode, float boost) throws IOException {\n    final QueryCache queryCache = this.queryCache;\n    Weight weight = query.createWeight(this, scoreMode, boost);\n    if (scoreMode.needsScores() == false && queryCache != null) {\n      weight = queryCache.doCache(weight, queryCachingPolicy);\n    }\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"906d4da7e00f8453a5a024fe1ee92d6b14c0627f","date":1570006475,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createWeight(Query,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createWeight(Query,ScoreMode,float).mjava","sourceNew":"  /**\n   * Creates a {@link Weight} for the given query, potentially adding caching\n   * if possible and configured.\n   * @lucene.experimental\n   */\n  public Weight createWeight(Query query, ScoreMode scoreMode, float boost) throws IOException {\n    final QueryCache queryCache = this.queryCache;\n    Weight weight = query.createWeight(this, scoreMode, boost);\n    if (scoreMode.needsScores() == false && queryCache != null) {\n      weight = queryCache.doCache(weight, queryCachingPolicy);\n    }\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link Weight} for the given query, potentially adding caching\n   * if possible and configured.\n   * @lucene.experimental\n   */\n  public Weight createWeight(Query query, ScoreMode scoreMode, float boost) throws IOException {\n    final QueryCache queryCache = this.queryCache;\n    Weight weight = query.createWeight(this, scoreMode, boost);\n    if (scoreMode.needsScores() == false && queryCache != null) {\n      if (executor != null) {\n        weight = queryCache.doCache(weight, queryCachingPolicy, executor);\n      } else {\n        weight = queryCache.doCache(weight, queryCachingPolicy);\n      }\n    }\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createWeight(Query,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createWeight(Query,ScoreMode,float).mjava","sourceNew":"  /**\n   * Creates a {@link Weight} for the given query, potentially adding caching\n   * if possible and configured.\n   * @lucene.experimental\n   */\n  public Weight createWeight(Query query, ScoreMode scoreMode, float boost) throws IOException {\n    final QueryCache queryCache = this.queryCache;\n    Weight weight = query.createWeight(this, scoreMode, boost);\n    if (scoreMode.needsScores() == false && queryCache != null) {\n      weight = queryCache.doCache(weight, queryCachingPolicy);\n    }\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link Weight} for the given query, potentially adding caching\n   * if possible and configured.\n   * @lucene.experimental\n   */\n  public Weight createWeight(Query query, ScoreMode scoreMode, float boost) throws IOException {\n    final QueryCache queryCache = this.queryCache;\n    Weight weight = query.createWeight(this, scoreMode, boost);\n    if (scoreMode.needsScores() == false && queryCache != null) {\n      if (executor != null) {\n        weight = queryCache.doCache(weight, queryCachingPolicy, executor);\n      } else {\n        weight = queryCache.doCache(weight, queryCachingPolicy);\n      }\n    }\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fbdd90cd58912788fecb1044df8f566a4420e59","date":1574749923,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createWeight(Query,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createWeight(Query,ScoreMode,float).mjava","sourceNew":"  /**\n   * Creates a {@link Weight} for the given query, potentially adding caching\n   * if possible and configured.\n   * @lucene.experimental\n   */\n  public Weight createWeight(Query query, ScoreMode scoreMode, float boost) throws IOException {\n    final QueryCache queryCache = this.queryCache;\n    Weight weight = query.createWeight(this, scoreMode, boost);\n    if (scoreMode.needsScores() == false && queryCache != null) {\n      weight = queryCache.doCache(weight, queryCachingPolicy, executor);\n    }\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link Weight} for the given query, potentially adding caching\n   * if possible and configured.\n   * @lucene.experimental\n   */\n  public Weight createWeight(Query query, ScoreMode scoreMode, float boost) throws IOException {\n    final QueryCache queryCache = this.queryCache;\n    Weight weight = query.createWeight(this, scoreMode, boost);\n    if (scoreMode.needsScores() == false && queryCache != null) {\n      weight = queryCache.doCache(weight, queryCachingPolicy);\n    }\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bbc355b3e849ee4a34763155bb78e638d625419","date":1574952532,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createWeight(Query,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#createWeight(Query,ScoreMode,float).mjava","sourceNew":"  /**\n   * Creates a {@link Weight} for the given query, potentially adding caching\n   * if possible and configured.\n   * @lucene.experimental\n   */\n  public Weight createWeight(Query query, ScoreMode scoreMode, float boost) throws IOException {\n    final QueryCache queryCache = this.queryCache;\n    Weight weight = query.createWeight(this, scoreMode, boost);\n    if (scoreMode.needsScores() == false && queryCache != null) {\n      weight = queryCache.doCache(weight, queryCachingPolicy);\n    }\n    return weight;\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link Weight} for the given query, potentially adding caching\n   * if possible and configured.\n   * @lucene.experimental\n   */\n  public Weight createWeight(Query query, ScoreMode scoreMode, float boost) throws IOException {\n    final QueryCache queryCache = this.queryCache;\n    Weight weight = query.createWeight(this, scoreMode, boost);\n    if (scoreMode.needsScores() == false && queryCache != null) {\n      weight = queryCache.doCache(weight, queryCachingPolicy, executor);\n    }\n    return weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["906d4da7e00f8453a5a024fe1ee92d6b14c0627f"],"906d4da7e00f8453a5a024fe1ee92d6b14c0627f":["6f740a4cb7f5949ddb40a1647671c4a997223312"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f740a4cb7f5949ddb40a1647671c4a997223312":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9bbc355b3e849ee4a34763155bb78e638d625419":["1fbdd90cd58912788fecb1044df8f566a4420e59"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["417142ff08fda9cf0b72d5133e63097a166c6458","6f740a4cb7f5949ddb40a1647671c4a997223312"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bbc355b3e849ee4a34763155bb78e638d625419"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"],"b0b597c65628ca9e73913a07e81691f8229bae35":["4b9f74021389e2b32ee750fa5a24281c87951ec3","906d4da7e00f8453a5a024fe1ee92d6b14c0627f"]},"commit2Childs":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["9bbc355b3e849ee4a34763155bb78e638d625419"],"906d4da7e00f8453a5a024fe1ee92d6b14c0627f":["1fbdd90cd58912788fecb1044df8f566a4420e59","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"6f740a4cb7f5949ddb40a1647671c4a997223312":["906d4da7e00f8453a5a024fe1ee92d6b14c0627f","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"9bbc355b3e849ee4a34763155bb78e638d625419":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["b0b597c65628ca9e73913a07e81691f8229bae35"],"417142ff08fda9cf0b72d5133e63097a166c6458":["6f740a4cb7f5949ddb40a1647671c4a997223312","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}