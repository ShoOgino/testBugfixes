{"path":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","commits":[{"id":"2fde44b2385ae1519002d7aa717f921b45b58276","date":1107725514,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"/dev/null","sourceNew":"\t/**\n\t * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n\t * @throws Exception\n\t */\n\tpublic void testEncoding() throws Exception\n    {\n        String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n        //run the highlighter on the raw content (scorer does not score any tokens for \n        // highlighting but scores a single fragment for selection\n        Highlighter highlighter = new Highlighter(this,\n                new SimpleHTMLEncoder(), new Scorer()\n                {\n                    public void startFragment(TextFragment newFragment)\n                    {\n                    }\n                    public float getTokenScore(Token token)\n                    {\n                        return 0;\n                    }\n                    public float getFragmentScore()\n                    {\n                        return 1;\n                    }\n                });\n        highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME,\n                new StringReader(rawDocContent));\n\n        String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent,1,\"\");\n        //An ugly bit of XML creation:\n        String xhtml=\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"+\n            \t\t\"<!DOCTYPE html\\n\"+\n            \t\t\"PUBLIC \\\"//W3C//DTD XHTML 1.0 Transitional//EN\\\"\\n\"+\n            \t\t\"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\\n\"+\n            \t\t\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"+\n            \t\t\"<head>\\n\"+\n            \t\t\"<title>My Test HTML Document</title>\\n\"+\n            \t\t\"</head>\\n\"+\n            \t\t\"<body>\\n\"+\n            \t\t\"<h2>\"+encodedSnippet+\"</h2>\\n\"+\n            \t\t\"</body>\\n\"+\n            \t\t\"</html>\";\n        //now an ugly built of XML parsing to test the snippet is encoded OK \n  \t\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n  \t\tDocumentBuilder db = dbf.newDocumentBuilder();\n  \t\torg.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n  \t\tElement root=doc.getDocumentElement();  \t\t\n  \t\tNodeList nodes=root.getElementsByTagName(\"body\");\n  \t\tElement body=(Element) nodes.item(0);\n  \t\tnodes=body.getElementsByTagName(\"h2\");\n        Element h2=(Element) nodes.item(0); \n        String decodedSnippet=h2.getFirstChild().getNodeValue();\n        assertEquals(\"XHTML Encoding should have worked:\", rawDocContent,decodedSnippet);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296b8b38a87feb478921f77834a2302dfe77641c","date":1209506838,"type":3,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore(Token token) {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<!DOCTYPE html\\n\"\n        + \"PUBLIC \\\"//W3C//DTD XHTML 1.0 Transitional//EN\\\"\\n\"\n        + \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"\t/**\n\t * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n\t * @throws Exception\n\t */\n\tpublic void testEncoding() throws Exception\n    {\n        String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n        //run the highlighter on the raw content (scorer does not score any tokens for \n        // highlighting but scores a single fragment for selection\n        Highlighter highlighter = new Highlighter(this,\n                new SimpleHTMLEncoder(), new Scorer()\n                {\n                    public void startFragment(TextFragment newFragment)\n                    {\n                    }\n                    public float getTokenScore(Token token)\n                    {\n                        return 0;\n                    }\n                    public float getFragmentScore()\n                    {\n                        return 1;\n                    }\n                });\n        highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n        TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME,\n                new StringReader(rawDocContent));\n\n        String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent,1,\"\");\n        //An ugly bit of XML creation:\n        String xhtml=\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"+\n            \t\t\"<!DOCTYPE html\\n\"+\n            \t\t\"PUBLIC \\\"//W3C//DTD XHTML 1.0 Transitional//EN\\\"\\n\"+\n            \t\t\"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\\n\"+\n            \t\t\"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"+\n            \t\t\"<head>\\n\"+\n            \t\t\"<title>My Test HTML Document</title>\\n\"+\n            \t\t\"</head>\\n\"+\n            \t\t\"<body>\\n\"+\n            \t\t\"<h2>\"+encodedSnippet+\"</h2>\\n\"+\n            \t\t\"</body>\\n\"+\n            \t\t\"</html>\";\n        //now an ugly built of XML parsing to test the snippet is encoded OK \n  \t\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n  \t\tDocumentBuilder db = dbf.newDocumentBuilder();\n  \t\torg.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n  \t\tElement root=doc.getDocumentElement();  \t\t\n  \t\tNodeList nodes=root.getElementsByTagName(\"body\");\n  \t\tElement body=(Element) nodes.item(0);\n  \t\tnodes=body.getElementsByTagName(\"h2\");\n        Element h2=(Element) nodes.item(0); \n        String decodedSnippet=h2.getFirstChild().getNodeValue();\n        assertEquals(\"XHTML Encoding should have worked:\", rawDocContent,decodedSnippet);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e8638708caa191982e8a5995d8e750cc52afcf6","date":1220260036,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore(Token token) {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore(Token token) {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<!DOCTYPE html\\n\"\n        + \"PUBLIC \\\"//W3C//DTD XHTML 1.0 Transitional//EN\\\"\\n\"\n        + \"\\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4471b2ef75c0e11869f60b23cabe292b895c3ee","date":1248991247,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public void init(TokenStream tokenStream) {\n        \n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore(Token token) {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"943c3f9cf96b8df37f4273d66a66182e2a669467","date":1249394171,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public void init(TokenStream tokenStream) {\n        \n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","pathOld":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testEncoding().mjava","sourceNew":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","sourceOld":"  /**\n   * Demonstrates creation of an XHTML compliant doc using new encoding facilities.\n   * \n   * @throws Exception\n   */\n  public void testEncoding() throws Exception {\n\n    String rawDocContent = \"\\\"Smith & sons' prices < 3 and >4\\\" claims article\";\n    // run the highlighter on the raw content (scorer does not score any tokens\n    // for\n    // highlighting but scores a single fragment for selection\n    Highlighter highlighter = new Highlighter(this, new SimpleHTMLEncoder(), new Scorer() {\n      public void startFragment(TextFragment newFragment) {\n      }\n\n      public float getTokenScore() {\n        return 0;\n      }\n\n      public float getFragmentScore() {\n        return 1;\n      }\n\n      public TokenStream init(TokenStream tokenStream) {\n        return null;\n      }\n    });\n    highlighter.setTextFragmenter(new SimpleFragmenter(2000));\n    TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(rawDocContent));\n\n    String encodedSnippet = highlighter.getBestFragments(tokenStream, rawDocContent, 1, \"\");\n    // An ugly bit of XML creation:\n    String xhtml = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n        + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" xml:lang=\\\"en\\\" lang=\\\"en\\\">\\n\"\n        + \"<head>\\n\" + \"<title>My Test HTML Document</title>\\n\" + \"</head>\\n\" + \"<body>\\n\" + \"<h2>\"\n        + encodedSnippet + \"</h2>\\n\" + \"</body>\\n\" + \"</html>\";\n    // now an ugly built of XML parsing to test the snippet is encoded OK\n    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n    DocumentBuilder db = dbf.newDocumentBuilder();\n    org.w3c.dom.Document doc = db.parse(new ByteArrayInputStream(xhtml.getBytes()));\n    Element root = doc.getDocumentElement();\n    NodeList nodes = root.getElementsByTagName(\"body\");\n    Element body = (Element) nodes.item(0);\n    nodes = body.getElementsByTagName(\"h2\");\n    Element h2 = (Element) nodes.item(0);\n    String decodedSnippet = h2.getFirstChild().getNodeValue();\n    assertEquals(\"XHTML Encoding should have worked:\", rawDocContent, decodedSnippet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2fde44b2385ae1519002d7aa717f921b45b58276":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["8e8638708caa191982e8a5995d8e750cc52afcf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8e8638708caa191982e8a5995d8e750cc52afcf6":["296b8b38a87feb478921f77834a2302dfe77641c"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"296b8b38a87feb478921f77834a2302dfe77641c":["2fde44b2385ae1519002d7aa717f921b45b58276"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["943c3f9cf96b8df37f4273d66a66182e2a669467"]},"commit2Childs":{"2fde44b2385ae1519002d7aa717f921b45b58276":["296b8b38a87feb478921f77834a2302dfe77641c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2fde44b2385ae1519002d7aa717f921b45b58276"],"b4471b2ef75c0e11869f60b23cabe292b895c3ee":["943c3f9cf96b8df37f4273d66a66182e2a669467"],"8e8638708caa191982e8a5995d8e750cc52afcf6":["b4471b2ef75c0e11869f60b23cabe292b895c3ee"],"296b8b38a87feb478921f77834a2302dfe77641c":["8e8638708caa191982e8a5995d8e750cc52afcf6"],"943c3f9cf96b8df37f4273d66a66182e2a669467":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}