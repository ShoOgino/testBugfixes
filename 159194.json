{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#testInclusiveUpperNumericRange().mjava","commits":[{"id":"683242c67a3f6086bae8b1354748fcaa38edfbd5","date":1457575601,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#testInclusiveUpperNumericRange().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#testInclusiveUpperNumericRange().mjava","sourceNew":"  @Test\n  // test disabled since standard syntax parser does not work with inclusive and\n  // exclusive at the same time\n  public void testInclusiveUpperNumericRange() throws Exception {\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.ZERO, true, false, 1);\n    assertRangeQuery(NumberType.ZERO, NumberType.POSITIVE, true, false, 1);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.POSITIVE, true, false, 2);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.NEGATIVE, true, false, 0);\n  }\n\n","sourceOld":"  @Test\n  // test disabled since standard syntax parser does not work with inclusive and\n  // exclusive at the same time\n  public void testInclusiveUpperNumericRange() throws Exception {\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.ZERO, true, false, 1);\n    assertRangeQuery(NumberType.ZERO, NumberType.POSITIVE, true, false, 1);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.POSITIVE, true, false, 2);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.NEGATIVE, true, false, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50b8410419cbbe9d8e1a96c918a951976bffe680","date":1471869553,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#testInclusiveUpperNumericRange().mjava","sourceNew":null,"sourceOld":"  @Test\n  // test disabled since standard syntax parser does not work with inclusive and\n  // exclusive at the same time\n  public void testInclusiveUpperNumericRange() throws Exception {\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.ZERO, true, false, 1);\n    assertRangeQuery(NumberType.ZERO, NumberType.POSITIVE, true, false, 1);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.POSITIVE, true, false, 2);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.NEGATIVE, true, false, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c82557b0a8c9d4012f208e5de912ae7500ea351","date":1471888093,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#testInclusiveUpperNumericRange().mjava","sourceNew":null,"sourceOld":"  @Test\n  // test disabled since standard syntax parser does not work with inclusive and\n  // exclusive at the same time\n  public void testInclusiveUpperNumericRange() throws Exception {\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.ZERO, true, false, 1);\n    assertRangeQuery(NumberType.ZERO, NumberType.POSITIVE, true, false, 1);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.POSITIVE, true, false, 2);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.NEGATIVE, true, false, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","date":1472163016,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#testInclusiveUpperNumericRange().mjava","sourceNew":null,"sourceOld":"  @Test\n  // test disabled since standard syntax parser does not work with inclusive and\n  // exclusive at the same time\n  public void testInclusiveUpperNumericRange() throws Exception {\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.ZERO, true, false, 1);\n    assertRangeQuery(NumberType.ZERO, NumberType.POSITIVE, true, false, 1);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.POSITIVE, true, false, 2);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.NEGATIVE, true, false, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#testInclusiveUpperNumericRange().mjava","sourceNew":null,"sourceOld":"  @Test\n  // test disabled since standard syntax parser does not work with inclusive and\n  // exclusive at the same time\n  public void testInclusiveUpperNumericRange() throws Exception {\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.ZERO, true, false, 1);\n    assertRangeQuery(NumberType.ZERO, NumberType.POSITIVE, true, false, 1);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.POSITIVE, true, false, 2);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.NEGATIVE, true, false, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["683242c67a3f6086bae8b1354748fcaa38edfbd5","50b8410419cbbe9d8e1a96c918a951976bffe680"],"50b8410419cbbe9d8e1a96c918a951976bffe680":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["683242c67a3f6086bae8b1354748fcaa38edfbd5","0c82557b0a8c9d4012f208e5de912ae7500ea351"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["683242c67a3f6086bae8b1354748fcaa38edfbd5","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"]},"commit2Childs":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["0c82557b0a8c9d4012f208e5de912ae7500ea351","50b8410419cbbe9d8e1a96c918a951976bffe680","e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"0c82557b0a8c9d4012f208e5de912ae7500ea351":["e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a"],"50b8410419cbbe9d8e1a96c918a951976bffe680":["0c82557b0a8c9d4012f208e5de912ae7500ea351"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"e1c5f7ce544a129550a8515f7f0eb5f1c0f4472a":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}