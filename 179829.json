{"path":"contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","commits":[{"id":"a4df60738409662c962b4ed3201d830cd3c14530","date":1114991851,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","pathOld":"contrib/lucli/src/lucli/LuceneMethods#initSearch(String).mjava","sourceNew":"  /**\n   * @todo Allow user to specify analyzer\n   */\n  private Hits initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName);\n    Analyzer analyzer = new StandardAnalyzer();\n    getFieldInfo();\n\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(queryString, analyzer);\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    query = parser.parse(queryString, fieldsArray, analyzer);\n    System.out.println(\"Searching for: \" + query.toString());\n    Hits hits = searcher.search(query);\n    return (hits);\n\n  }\n\n","sourceOld":"  /**\n   * @todo Allow user to specify analyzer\n   */\n  private Hits initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName);\n    Analyzer analyzer = new StandardAnalyzer();\n    getFieldInfo();\n\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(queryString, analyzer);\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    query = parser.parse(queryString, fieldsArray, analyzer);\n    System.out.println(\"Searching for: \" + query.toString());\n    Hits hits = searcher.search(query);\n    return (hits);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5645d84fb3482c48f69db9e24c59fa02b469cbd0","date":1141246052,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","sourceNew":"  /**\n   * @todo Allow user to specify analyzer\n   */\n  private Hits initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName);\n    Analyzer analyzer = new StandardAnalyzer();\n    getFieldInfo();\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fieldsArray, analyzer);\n    query = parser.parse(queryString);\n    System.out.println(\"Searching for: \" + query.toString());\n    Hits hits = searcher.search(query);\n    return (hits);\n\n  }\n\n","sourceOld":"  /**\n   * @todo Allow user to specify analyzer\n   */\n  private Hits initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName);\n    Analyzer analyzer = new StandardAnalyzer();\n    getFieldInfo();\n\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(queryString, analyzer);\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    query = parser.parse(queryString, fieldsArray, analyzer);\n    System.out.println(\"Searching for: \" + query.toString());\n    Hits hits = searcher.search(query);\n    return (hits);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c64e0c064f4d1397144dc064e5eb82f2e074357b","date":1247479561,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","sourceNew":"  /**\n   * @todo Allow user to specify analyzer\n   */\n  private Hits initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName);\n    Analyzer analyzer = createAnalyzer();\n    getFieldInfo();\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fieldsArray, analyzer);\n    query = parser.parse(queryString);\n    System.out.println(\"Searching for: \" + query.toString());\n    Hits hits = searcher.search(query);\n    return (hits);\n\n  }\n\n","sourceOld":"  /**\n   * @todo Allow user to specify analyzer\n   */\n  private Hits initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName);\n    Analyzer analyzer = new StandardAnalyzer();\n    getFieldInfo();\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fieldsArray, analyzer);\n    query = parser.parse(queryString);\n    System.out.println(\"Searching for: \" + query.toString());\n    Hits hits = searcher.search(query);\n    return (hits);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f573a38b5b129663e19cdf55adc5d12330c0504","date":1251326380,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","sourceNew":"  /**\n   * TODO: Allow user to specify analyzer\n   */\n  private Hits initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName);\n    Analyzer analyzer = createAnalyzer();\n    getFieldInfo();\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fieldsArray, analyzer);\n    query = parser.parse(queryString);\n    System.out.println(\"Searching for: \" + query.toString());\n    Hits hits = searcher.search(query);\n    return (hits);\n\n  }\n\n","sourceOld":"  /**\n   * @todo Allow user to specify analyzer\n   */\n  private Hits initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName);\n    Analyzer analyzer = createAnalyzer();\n    getFieldInfo();\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fieldsArray, analyzer);\n    query = parser.parse(queryString);\n    System.out.println(\"Searching for: \" + query.toString());\n    Hits hits = searcher.search(query);\n    return (hits);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4256bc1b3c94786287ccdfc751230374521843cf","date":1254612273,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","sourceNew":"  /**\n   * TODO: Allow user to specify analyzer\n   */\n  private Hits initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName, true);\n    Analyzer analyzer = createAnalyzer();\n    getFieldInfo();\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fieldsArray, analyzer);\n    query = parser.parse(queryString);\n    System.out.println(\"Searching for: \" + query.toString());\n    Hits hits = searcher.search(query);\n    return (hits);\n\n  }\n\n","sourceOld":"  /**\n   * TODO: Allow user to specify analyzer\n   */\n  private Hits initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName);\n    Analyzer analyzer = createAnalyzer();\n    getFieldInfo();\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fieldsArray, analyzer);\n    query = parser.parse(queryString);\n    System.out.println(\"Searching for: \" + query.toString());\n    Hits hits = searcher.search(query);\n    return (hits);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f148c02ddd6ba981c65ca685d0e56c3a98368e1","date":1254892102,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","sourceNew":"  /**\n   * TODO: Allow user to specify analyzer\n   */\n  private void initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName, true);\n    Analyzer analyzer = createAnalyzer();\n    getFieldInfo();\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fieldsArray, analyzer);\n    query = parser.parse(queryString);\n    System.out.println(\"Searching for: \" + query.toString());\n  }\n\n","sourceOld":"  /**\n   * TODO: Allow user to specify analyzer\n   */\n  private Hits initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName, true);\n    Analyzer analyzer = createAnalyzer();\n    getFieldInfo();\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fieldsArray, analyzer);\n    query = parser.parse(queryString);\n    System.out.println(\"Searching for: \" + query.toString());\n    Hits hits = searcher.search(query);\n    return (hits);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1116b3450a9c1642c89445d131b37344055245","date":1256329517,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","sourceNew":"  /**\n   * TODO: Allow user to specify analyzer\n   */\n  private void initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName, true);\n    Analyzer analyzer = createAnalyzer();\n    getFieldInfo();\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fieldsArray, analyzer);\n    query = parser.parse(queryString);\n    System.out.println(\"Searching for: \" + query.toString());\n  }\n\n","sourceOld":"  /**\n   * TODO: Allow user to specify analyzer\n   */\n  private void initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName, true);\n    Analyzer analyzer = createAnalyzer();\n    getFieldInfo();\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(fieldsArray, analyzer);\n    query = parser.parse(queryString);\n    System.out.println(\"Searching for: \" + query.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94","date":1257897915,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","sourceNew":"  /**\n   * TODO: Allow user to specify analyzer\n   */\n  private void initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName, true);\n    Analyzer analyzer = createAnalyzer();\n    getFieldInfo();\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = fields.get(ii);\n    }\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fieldsArray, analyzer);\n    query = parser.parse(queryString);\n    System.out.println(\"Searching for: \" + query.toString());\n  }\n\n","sourceOld":"  /**\n   * TODO: Allow user to specify analyzer\n   */\n  private void initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName, true);\n    Analyzer analyzer = createAnalyzer();\n    getFieldInfo();\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = (String) fields.get(ii);\n    }\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fieldsArray, analyzer);\n    query = parser.parse(queryString);\n    System.out.println(\"Searching for: \" + query.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","pathOld":"contrib/lucli/src/java/lucli/LuceneMethods#initSearch(String).mjava","sourceNew":"  /**\n   * TODO: Allow user to specify analyzer\n   */\n  private void initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName, true);\n    Analyzer analyzer = createAnalyzer();\n    getFieldInfo();\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = fields.get(ii);\n    }\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fieldsArray, analyzer);\n    query = parser.parse(queryString);\n    System.out.println(\"Searching for: \" + query.toString());\n  }\n\n","sourceOld":"  /**\n   * TODO: Allow user to specify analyzer\n   */\n  private void initSearch(String queryString) throws IOException, ParseException {\n\n    searcher = new IndexSearcher(indexName, true);\n    Analyzer analyzer = createAnalyzer();\n    getFieldInfo();\n\n    int arraySize = fields.size();\n    fieldsArray = new String[arraySize];\n    for (int ii = 0; ii < arraySize; ii++) {\n      fieldsArray[ii] = fields.get(ii);\n    }\n    MultiFieldQueryParser parser = new MultiFieldQueryParser(Version.LUCENE_CURRENT, fieldsArray, analyzer);\n    query = parser.parse(queryString);\n    System.out.println(\"Searching for: \" + query.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94":["ba1116b3450a9c1642c89445d131b37344055245"],"2f573a38b5b129663e19cdf55adc5d12330c0504":["c64e0c064f4d1397144dc064e5eb82f2e074357b"],"5645d84fb3482c48f69db9e24c59fa02b469cbd0":["a4df60738409662c962b4ed3201d830cd3c14530"],"c64e0c064f4d1397144dc064e5eb82f2e074357b":["5645d84fb3482c48f69db9e24c59fa02b469cbd0"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["4256bc1b3c94786287ccdfc751230374521843cf"],"4256bc1b3c94786287ccdfc751230374521843cf":["2f573a38b5b129663e19cdf55adc5d12330c0504"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94"],"ba1116b3450a9c1642c89445d131b37344055245":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"a4df60738409662c962b4ed3201d830cd3c14530":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4df60738409662c962b4ed3201d830cd3c14530"],"6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2f573a38b5b129663e19cdf55adc5d12330c0504":["4256bc1b3c94786287ccdfc751230374521843cf"],"5645d84fb3482c48f69db9e24c59fa02b469cbd0":["c64e0c064f4d1397144dc064e5eb82f2e074357b"],"c64e0c064f4d1397144dc064e5eb82f2e074357b":["2f573a38b5b129663e19cdf55adc5d12330c0504"],"0f148c02ddd6ba981c65ca685d0e56c3a98368e1":["ba1116b3450a9c1642c89445d131b37344055245"],"4256bc1b3c94786287ccdfc751230374521843cf":["0f148c02ddd6ba981c65ca685d0e56c3a98368e1"],"ba1116b3450a9c1642c89445d131b37344055245":["6358eb123cf2e9cc195c57e5ac4f3cf2f15cee94"],"a4df60738409662c962b4ed3201d830cd3c14530":["5645d84fb3482c48f69db9e24c59fa02b469cbd0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}