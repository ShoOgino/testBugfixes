{"path":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLVisitor#visitQuerySpecification(QuerySpecification,Integer).mjava","commits":[{"id":"7b2c4e17100e207bc842e56d016b9f91f411304e","date":1434336696,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLVisitor#visitQuerySpecification(QuerySpecification,Integer).mjava","pathOld":"/dev/null","sourceNew":"    protected Void visitQuerySpecification(QuerySpecification node, Integer indent) {\n      this.process(node.getSelect(), indent);\n      if(node.getFrom().isPresent()) {\n        this.process((Node)node.getFrom().get(), indent);\n      }\n\n      if(node.getWhere().isPresent()) {\n        Expression ex  = node.getWhere().get();\n        ExpressionVisitor expressionVisitor = new ExpressionVisitor();\n        StringBuilder buf = new StringBuilder();\n        expressionVisitor.process(ex, buf);\n        this.query = buf.toString();\n      }\n\n      if(!node.getGroupBy().isEmpty()) {\n        this.groupByQuery = true;\n        List<Expression> groups = node.getGroupBy();\n        for(Expression group : groups) {\n          groupBy.add(stripQuotes(group.toString()));\n\n        }\n      }\n\n      if(node.getHaving().isPresent()) {\n        this.havingExpression = node.getHaving().get();\n      }\n\n      if(!node.getOrderBy().isEmpty()) {\n        this.sorts = node.getOrderBy();\n      }\n\n      if(node.getLimit().isPresent()) {\n        this.limit = Integer.parseInt(stripQuotes(node.getLimit().get()));\n      }\n\n      return null;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36479872320bb00635cb97ca6757614c88562e1b","date":1444426483,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLVisitor#visitQuerySpecification(QuerySpecification,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLVisitor#visitQuerySpecification(QuerySpecification,Integer).mjava","sourceNew":"    protected Void visitQuerySpecification(QuerySpecification node, Integer indent) {\n      this.process(node.getSelect(), indent);\n      if(node.getFrom().isPresent()) {\n        this.process((Node)node.getFrom().get(), indent);\n      }\n\n      if(node.getWhere().isPresent()) {\n        Expression ex  = node.getWhere().get();\n        ExpressionVisitor expressionVisitor = new ExpressionVisitor();\n        StringBuilder buf = new StringBuilder();\n        expressionVisitor.process(ex, buf);\n        this.query = buf.toString();\n      }\n\n      if(!node.getGroupBy().isEmpty()) {\n        this.groupByQuery = true;\n        List<Expression> groups = node.getGroupBy();\n        for(Expression group : groups) {\n          groupBy.add(stripSingleQuotes(stripQuotes(group.toString())));\n        }\n      }\n\n      if(node.getHaving().isPresent()) {\n        this.havingExpression = node.getHaving().get();\n      }\n\n      if(!node.getOrderBy().isEmpty()) {\n        this.sorts = node.getOrderBy();\n      }\n\n      if(node.getLimit().isPresent()) {\n        this.limit = Integer.parseInt(stripQuotes(node.getLimit().get()));\n      }\n\n      return null;\n    }\n\n","sourceOld":"    protected Void visitQuerySpecification(QuerySpecification node, Integer indent) {\n      this.process(node.getSelect(), indent);\n      if(node.getFrom().isPresent()) {\n        this.process((Node)node.getFrom().get(), indent);\n      }\n\n      if(node.getWhere().isPresent()) {\n        Expression ex  = node.getWhere().get();\n        ExpressionVisitor expressionVisitor = new ExpressionVisitor();\n        StringBuilder buf = new StringBuilder();\n        expressionVisitor.process(ex, buf);\n        this.query = buf.toString();\n      }\n\n      if(!node.getGroupBy().isEmpty()) {\n        this.groupByQuery = true;\n        List<Expression> groups = node.getGroupBy();\n        for(Expression group : groups) {\n          groupBy.add(stripQuotes(group.toString()));\n\n        }\n      }\n\n      if(node.getHaving().isPresent()) {\n        this.havingExpression = node.getHaving().get();\n      }\n\n      if(!node.getOrderBy().isEmpty()) {\n        this.sorts = node.getOrderBy();\n      }\n\n      if(node.getLimit().isPresent()) {\n        this.limit = Integer.parseInt(stripQuotes(node.getLimit().get()));\n      }\n\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ec71d4701edbd96cfea97384101d13611393552","date":1444686705,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLVisitor#visitQuerySpecification(QuerySpecification,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLVisitor#visitQuerySpecification(QuerySpecification,Integer).mjava","sourceNew":"    protected Void visitQuerySpecification(QuerySpecification node, Integer indent) {\n      this.process(node.getSelect(), indent);\n      if(node.getFrom().isPresent()) {\n        this.process((Node)node.getFrom().get(), indent);\n      }\n\n      if(node.getWhere().isPresent()) {\n        Expression ex  = node.getWhere().get();\n        ExpressionVisitor expressionVisitor = new ExpressionVisitor();\n        StringBuilder buf = new StringBuilder();\n        expressionVisitor.process(ex, buf);\n        this.query = buf.toString();\n      }\n\n      if(!node.getGroupBy().isEmpty()) {\n        this.groupByQuery = true;\n        List<Expression> groups = node.getGroupBy();\n        for(Expression group : groups) {\n          groupBy.add(getGroupField(group));\n        }\n      }\n\n      if(node.getHaving().isPresent()) {\n        this.havingExpression = node.getHaving().get();\n      }\n\n      if(!node.getOrderBy().isEmpty()) {\n        this.sorts = node.getOrderBy();\n      }\n\n      if(node.getLimit().isPresent()) {\n        this.limit = Integer.parseInt(stripQuotes(node.getLimit().get()));\n      }\n\n      return null;\n    }\n\n","sourceOld":"    protected Void visitQuerySpecification(QuerySpecification node, Integer indent) {\n      this.process(node.getSelect(), indent);\n      if(node.getFrom().isPresent()) {\n        this.process((Node)node.getFrom().get(), indent);\n      }\n\n      if(node.getWhere().isPresent()) {\n        Expression ex  = node.getWhere().get();\n        ExpressionVisitor expressionVisitor = new ExpressionVisitor();\n        StringBuilder buf = new StringBuilder();\n        expressionVisitor.process(ex, buf);\n        this.query = buf.toString();\n      }\n\n      if(!node.getGroupBy().isEmpty()) {\n        this.groupByQuery = true;\n        List<Expression> groups = node.getGroupBy();\n        for(Expression group : groups) {\n          groupBy.add(stripSingleQuotes(stripQuotes(group.toString())));\n        }\n      }\n\n      if(node.getHaving().isPresent()) {\n        this.havingExpression = node.getHaving().get();\n      }\n\n      if(!node.getOrderBy().isEmpty()) {\n        this.sorts = node.getOrderBy();\n      }\n\n      if(node.getLimit().isPresent()) {\n        this.limit = Integer.parseInt(stripQuotes(node.getLimit().get()));\n      }\n\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLVisitor#visitQuerySpecification(QuerySpecification,Integer).mjava","sourceNew":null,"sourceOld":"    protected Void visitQuerySpecification(QuerySpecification node, Integer indent) {\n      this.process(node.getSelect(), indent);\n      if(node.getFrom().isPresent()) {\n        this.process((Node)node.getFrom().get(), indent);\n      }\n\n      if(node.getWhere().isPresent()) {\n        Expression ex  = node.getWhere().get();\n        ExpressionVisitor expressionVisitor = new ExpressionVisitor();\n        StringBuilder buf = new StringBuilder();\n        expressionVisitor.process(ex, buf);\n        this.query = buf.toString();\n      }\n\n      if(!node.getGroupBy().isEmpty()) {\n        this.groupByQuery = true;\n        List<Expression> groups = node.getGroupBy();\n        for(Expression group : groups) {\n          groupBy.add(getGroupField(group));\n        }\n      }\n\n      if(node.getHaving().isPresent()) {\n        this.havingExpression = node.getHaving().get();\n      }\n\n      if(!node.getOrderBy().isEmpty()) {\n        this.sorts = node.getOrderBy();\n      }\n\n      if(node.getLimit().isPresent()) {\n        this.limit = Integer.parseInt(stripQuotes(node.getLimit().get()));\n      }\n\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":4,"author":"Joel Bernstein","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SQLHandler.SQLVisitor#visitQuerySpecification(QuerySpecification,Integer).mjava","sourceNew":null,"sourceOld":"    protected Void visitQuerySpecification(QuerySpecification node, Integer indent) {\n      this.process(node.getSelect(), indent);\n      if(node.getFrom().isPresent()) {\n        this.process((Node)node.getFrom().get(), indent);\n      }\n\n      if(node.getWhere().isPresent()) {\n        Expression ex  = node.getWhere().get();\n        ExpressionVisitor expressionVisitor = new ExpressionVisitor();\n        StringBuilder buf = new StringBuilder();\n        expressionVisitor.process(ex, buf);\n        this.query = buf.toString();\n      }\n\n      if(!node.getGroupBy().isEmpty()) {\n        this.groupByQuery = true;\n        List<Expression> groups = node.getGroupBy();\n        for(Expression group : groups) {\n          groupBy.add(getGroupField(group));\n        }\n      }\n\n      if(node.getHaving().isPresent()) {\n        this.havingExpression = node.getHaving().get();\n      }\n\n      if(!node.getOrderBy().isEmpty()) {\n        this.sorts = node.getOrderBy();\n      }\n\n      if(node.getLimit().isPresent()) {\n        this.limit = Integer.parseInt(stripQuotes(node.getLimit().get()));\n      }\n\n      return null;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ec71d4701edbd96cfea97384101d13611393552":["36479872320bb00635cb97ca6757614c88562e1b"],"36479872320bb00635cb97ca6757614c88562e1b":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["3ec71d4701edbd96cfea97384101d13611393552","d984627825732e682759c22df7a3b171a80f3812"],"d984627825732e682759c22df7a3b171a80f3812":["3ec71d4701edbd96cfea97384101d13611393552"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b2c4e17100e207bc842e56d016b9f91f411304e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"]},"commit2Childs":{"3ec71d4701edbd96cfea97384101d13611393552":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","d984627825732e682759c22df7a3b171a80f3812"],"36479872320bb00635cb97ca6757614c88562e1b":["3ec71d4701edbd96cfea97384101d13611393552"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d984627825732e682759c22df7a3b171a80f3812":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b2c4e17100e207bc842e56d016b9f91f411304e"],"7b2c4e17100e207bc842e56d016b9f91f411304e":["36479872320bb00635cb97ca6757614c88562e1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}