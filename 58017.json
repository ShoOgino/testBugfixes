{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","commits":[{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, collName, shard, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, collName, shard, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, String clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, collName, shard, Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, String clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, collName, shard, Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"/dev/null","sourceNew":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, collName, shard, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, String clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, collName, shard, Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, collName, shard, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, String clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, collName, shard, Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaDetails(String node, String s) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(s), 6, true);\n    Map<String, Map<String, List<Policy.ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<Policy.ReplicaInfo>> shardVsReplicaStats = result.get(collName);\n          if (shardVsReplicaStats == null) result.put(collName, shardVsReplicaStats = new HashMap<>());\n          List<Policy.ReplicaInfo> replicaInfos = shardVsReplicaStats.get(shard);\n          if (replicaInfos == null) shardVsReplicaStats.put(shard, replicaInfos = new ArrayList<>());\n          replicaInfos.add(new Policy.ReplicaInfo(replicaName, collName, shard, new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, String clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, collName, shard, r));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, String clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, collName, shard, Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), new HashMap<>()));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, String clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName,replicaName, collName, shard, r));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, String clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, collName, shard, r));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, String clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, (String) r.get(\"core\"), collName, shard,\n              Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), node, r));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, String clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName,replicaName, collName, shard, r));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"536bafb7a33a91ae703a78de9f6bd5c7e32471d9","date":1538395209,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,Map).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getReplicaDetails(String,String).mjava","sourceNew":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, Map clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy(clusterState, 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, (String) r.get(\"core\"), collName, shard,\n              Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), node, r));\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  public static Map<String, Map<String, List<ReplicaInfo>>> getReplicaDetails(String node, String clusterState) {\n    ValidatingJsonMap m = ValidatingJsonMap\n        .getDeepCopy((Map) Utils.fromJSONString(clusterState), 6, true);\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n\n    m.forEach((collName, o) -> {\n      ValidatingJsonMap coll = (ValidatingJsonMap) o;\n      coll.getMap(\"shards\").forEach((shard, o1) -> {\n        ValidatingJsonMap sh = (ValidatingJsonMap) o1;\n        sh.getMap(\"replicas\").forEach((replicaName, o2) -> {\n          ValidatingJsonMap r = (ValidatingJsonMap) o2;\n          String node_name = (String) r.get(\"node_name\");\n          if (!node_name.equals(node)) return;\n          Map<String, List<ReplicaInfo>> shardVsReplicaStats = result.computeIfAbsent(collName, k -> new HashMap<>());\n          List<ReplicaInfo> replicaInfos = shardVsReplicaStats.computeIfAbsent(shard, k -> new ArrayList<>());\n          replicaInfos.add(new ReplicaInfo(replicaName, (String) r.get(\"core\"), collName, shard,\n              Replica.Type.get((String) r.get(ZkStateReader.REPLICA_TYPE)), node, r));\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e4848fb683db0790f2847173af06e2ad2d03328e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"e4848fb683db0790f2847173af06e2ad2d03328e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a","e4848fb683db0790f2847173af06e2ad2d03328e"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}