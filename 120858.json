{"path":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPluginBase#determineIfPermissionPermitsPrincipal(AuthorizationContext,Permission).mjava","commits":[{"id":"5e0ac06a3dde3a146042d8eb8820dc45326e9263","date":1594139870,"type":1,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPluginBase#determineIfPermissionPermitsPrincipal(AuthorizationContext,Permission).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPluginBase#determineIfPermissionPermitsPrincipal(Principal,Permission).mjava","sourceNew":"  private MatchStatus determineIfPermissionPermitsPrincipal(AuthorizationContext context, Permission governingPermission) {\n    if (governingPermission.role == null) {\n      log.debug(\"Governing permission [{}] has no role; permitting access\", governingPermission);\n      return MatchStatus.PERMITTED;\n    }\n    Principal principal = context.getUserPrincipal();\n    if (principal == null) {\n      log.debug(\"Governing permission [{}] has role, but request principal cannot be identified; forbidding access\", governingPermission);\n      return MatchStatus.USER_REQUIRED;\n    } else if (governingPermission.role.contains(\"*\")) {\n      log.debug(\"Governing permission [{}] allows all roles; permitting access\", governingPermission);\n      return MatchStatus.PERMITTED;\n    }\n\n    Set<String> userRoles = getUserRoles(context);\n    for (String role : governingPermission.role) {\n      if (userRoles != null && userRoles.contains(role)) {\n        log.debug(\"Governing permission [{}] allows access to role [{}]; permitting access\", governingPermission, role);\n        return MatchStatus.PERMITTED;\n      }\n    }\n    log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", governingPermission, principal);\n    return MatchStatus.FORBIDDEN;\n  }\n\n","sourceOld":"  private MatchStatus determineIfPermissionPermitsPrincipal(Principal principal, Permission governingPermission) {\n    if (governingPermission.role == null) {\n      log.debug(\"Governing permission [{}] has no role; permitting access\", governingPermission);\n      return MatchStatus.PERMITTED;\n    }\n    if (principal == null) {\n      log.debug(\"Governing permission [{}] has role, but request principal cannot be identified; forbidding access\", governingPermission);\n      return MatchStatus.USER_REQUIRED;\n    } else if (governingPermission.role.contains(\"*\")) {\n      log.debug(\"Governing permission [{}] allows all roles; permitting access\", governingPermission);\n      return MatchStatus.PERMITTED;\n    }\n\n    Set<String> userRoles = getUserRoles(principal);\n    for (String role : governingPermission.role) {\n      if (userRoles != null && userRoles.contains(role)) {\n        log.debug(\"Governing permission [{}] allows access to role [{}]; permitting access\", governingPermission, role);\n        return MatchStatus.PERMITTED;\n      }\n    }\n    log.info(\"This resource is configured to have a permission {}, The principal {} does not have the right role \", governingPermission, principal);\n    return MatchStatus.FORBIDDEN;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e0ac06a3dde3a146042d8eb8820dc45326e9263":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e0ac06a3dde3a146042d8eb8820dc45326e9263"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e0ac06a3dde3a146042d8eb8820dc45326e9263"],"5e0ac06a3dde3a146042d8eb8820dc45326e9263":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}