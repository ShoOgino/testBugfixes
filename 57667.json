{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#findLeaves(RegExp,Kind,List[LightAutomaton],Map[String,LightAutomaton],LightAutomatonProvider).mjava","commits":[{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#findLeaves(RegExp,Kind,List[LightAutomaton],Map[String,LightAutomaton],LightAutomatonProvider).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#findLeaves(RegExp,Kind,List[Automaton],Map[String,Automaton],AutomatonProvider).mjava","sourceNew":"  private void findLeaves(RegExp exp, Kind kind, List<LightAutomaton> list,\n      Map<String,LightAutomaton> automata, LightAutomatonProvider automaton_provider) {\n    if (exp.kind == kind) {\n      findLeaves(exp.exp1, kind, list, automata, automaton_provider);\n      findLeaves(exp.exp2, kind, list, automata, automaton_provider);\n    } else {\n      list.add(exp.toLightAutomaton(automata, automaton_provider));\n    }\n  }\n\n","sourceOld":"  private void findLeaves(RegExp exp, Kind kind, List<Automaton> list,\n      Map<String,Automaton> automata, AutomatonProvider automaton_provider) {\n    if (exp.kind == kind) {\n      findLeaves(exp.exp1, kind, list, automata, automaton_provider);\n      findLeaves(exp.exp2, kind, list, automata, automaton_provider);\n    } else list.add(exp.toAutomaton(automata, automaton_provider));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#findLeaves(RegExp,Kind,List[Automaton],Map[String,Automaton],AutomatonProvider).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#findLeaves(RegExp,Kind,List[LightAutomaton],Map[String,LightAutomaton],LightAutomatonProvider).mjava","sourceNew":"  private void findLeaves(RegExp exp, Kind kind, List<Automaton> list,\n      Map<String,Automaton> automata, AutomatonProvider automaton_provider) {\n    if (exp.kind == kind) {\n      findLeaves(exp.exp1, kind, list, automata, automaton_provider);\n      findLeaves(exp.exp2, kind, list, automata, automaton_provider);\n    } else {\n      list.add(exp.toAutomaton(automata, automaton_provider));\n    }\n  }\n\n","sourceOld":"  private void findLeaves(RegExp exp, Kind kind, List<LightAutomaton> list,\n      Map<String,LightAutomaton> automata, LightAutomatonProvider automaton_provider) {\n    if (exp.kind == kind) {\n      findLeaves(exp.exp1, kind, list, automata, automaton_provider);\n      findLeaves(exp.exp2, kind, list, automata, automaton_provider);\n    } else {\n      list.add(exp.toLightAutomaton(automata, automaton_provider));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ac34f0c5bb9274821fb0cb18075234e02002e9bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":[],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}