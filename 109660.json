{"path":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#getPackagesDeployed(String).mjava","commits":[{"id":"120bc33d5cbe83eca2e5fce597baf4fef208d579","date":1573735895,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#getPackagesDeployed(String).mjava","pathOld":"/dev/null","sourceNew":"  public Map<String, SolrPackageInstance> getPackagesDeployed(String collection) {\n    Map<String, String> packages = null;\n    try {\n      NavigableObject result = (NavigableObject) Utils.executeGET(solrClient.getHttpClient(),\n          solrBaseUrl+\"/api/collections/\"+collection+\"/config/params/PKG_VERSIONS?omitHeader=true&wt=javabin\", Utils.JAVABINCONSUMER);\n      packages = (Map<String, String>) result._get(\"/response/params/PKG_VERSIONS\", Collections.emptyMap());\n    } catch (PathNotFoundException ex) {\n      // Don't worry if PKG_VERSION wasn't found. It just means this collection was never touched by the package manager.\n    }\n    if (packages == null) return Collections.emptyMap();\n    Map<String, SolrPackageInstance> ret = new HashMap<String, SolrPackageInstance>();\n    for (String packageName: packages.keySet()) {\n      if (Strings.isNullOrEmpty(packageName) == false) { // There can be an empty key, storing the version here\n        ret.put(packageName, getPackageInstance(packageName, packages.get(packageName)));\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62d55718cd611235e975fa73a6bdf263fbd58859","date":1576386842,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#getPackagesDeployed(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#getPackagesDeployed(String).mjava","sourceNew":"  public Map<String, SolrPackageInstance> getPackagesDeployed(String collection) {\n    Map<String, String> packages = null;\n    try {\n      NavigableObject result = (NavigableObject) Utils.executeGET(solrClient.getHttpClient(),\n          solrBaseUrl + PackageUtils.getCollectionParamsPath(collection) + \"/PKG_VERSIONS?omitHeader=true&wt=javabin\", Utils.JAVABINCONSUMER);\n      packages = (Map<String, String>) result._get(\"/response/params/PKG_VERSIONS\", Collections.emptyMap());\n    } catch (PathNotFoundException ex) {\n      // Don't worry if PKG_VERSION wasn't found. It just means this collection was never touched by the package manager.\n    }\n    if (packages == null) return Collections.emptyMap();\n    Map<String, SolrPackageInstance> ret = new HashMap<>();\n    for (String packageName: packages.keySet()) {\n      if (Strings.isNullOrEmpty(packageName) == false && // There can be an empty key, storing the version here\n          packages.get(packageName) != null) { // null means the package was undeployed from this package before\n        ret.put(packageName, getPackageInstance(packageName, packages.get(packageName)));\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  public Map<String, SolrPackageInstance> getPackagesDeployed(String collection) {\n    Map<String, String> packages = null;\n    try {\n      NavigableObject result = (NavigableObject) Utils.executeGET(solrClient.getHttpClient(),\n          solrBaseUrl+\"/api/collections/\"+collection+\"/config/params/PKG_VERSIONS?omitHeader=true&wt=javabin\", Utils.JAVABINCONSUMER);\n      packages = (Map<String, String>) result._get(\"/response/params/PKG_VERSIONS\", Collections.emptyMap());\n    } catch (PathNotFoundException ex) {\n      // Don't worry if PKG_VERSION wasn't found. It just means this collection was never touched by the package manager.\n    }\n    if (packages == null) return Collections.emptyMap();\n    Map<String, SolrPackageInstance> ret = new HashMap<String, SolrPackageInstance>();\n    for (String packageName: packages.keySet()) {\n      if (Strings.isNullOrEmpty(packageName) == false) { // There can be an empty key, storing the version here\n        ret.put(packageName, getPackageInstance(packageName, packages.get(packageName)));\n      }\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06595b0c22c7d3075c4104d3820cccf95d9d8a43","date":1576491645,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#getPackagesDeployed(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#getPackagesDeployed(String).mjava","sourceNew":"  public Map<String, SolrPackageInstance> getPackagesDeployed(String collection) {\n    Map<String, String> packages = null;\n    try {\n      NavigableObject result = (NavigableObject) Utils.executeGET(solrClient.getHttpClient(),\n          solrBaseUrl + PackageUtils.getCollectionParamsPath(collection) + \"/PKG_VERSIONS?omitHeader=true&wt=javabin\", Utils.JAVABINCONSUMER);\n      packages = (Map<String, String>) result._get(\"/response/params/PKG_VERSIONS\", Collections.emptyMap());\n    } catch (PathNotFoundException ex) {\n      // Don't worry if PKG_VERSION wasn't found. It just means this collection was never touched by the package manager.\n    }\n    if (packages == null) return Collections.emptyMap();\n    Map<String, SolrPackageInstance> ret = new HashMap<>();\n    for (String packageName: packages.keySet()) {\n      if (Strings.isNullOrEmpty(packageName) == false && // There can be an empty key, storing the version here\n          packages.get(packageName) != null) { // null means the package was undeployed from this package before\n        ret.put(packageName, getPackageInstance(packageName, packages.get(packageName)));\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  public Map<String, SolrPackageInstance> getPackagesDeployed(String collection) {\n    Map<String, String> packages = null;\n    try {\n      NavigableObject result = (NavigableObject) Utils.executeGET(solrClient.getHttpClient(),\n          solrBaseUrl+\"/api/collections/\"+collection+\"/config/params/PKG_VERSIONS?omitHeader=true&wt=javabin\", Utils.JAVABINCONSUMER);\n      packages = (Map<String, String>) result._get(\"/response/params/PKG_VERSIONS\", Collections.emptyMap());\n    } catch (PathNotFoundException ex) {\n      // Don't worry if PKG_VERSION wasn't found. It just means this collection was never touched by the package manager.\n    }\n    if (packages == null) return Collections.emptyMap();\n    Map<String, SolrPackageInstance> ret = new HashMap<String, SolrPackageInstance>();\n    for (String packageName: packages.keySet()) {\n      if (Strings.isNullOrEmpty(packageName) == false) { // There can be an empty key, storing the version here\n        ret.put(packageName, getPackageInstance(packageName, packages.get(packageName)));\n      }\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#getPackagesDeployed(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/packagemanager/PackageManager#getPackagesDeployed(String).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public Map<String, SolrPackageInstance> getPackagesDeployed(String collection) {\n    Map<String, String> packages = null;\n    try {\n      NavigableObject result = (NavigableObject) Utils.executeGET(solrClient.getHttpClient(),\n          solrBaseUrl + PackageUtils.getCollectionParamsPath(collection) + \"/PKG_VERSIONS?omitHeader=true&wt=javabin\", Utils.JAVABINCONSUMER);\n      packages = (Map<String, String>) result._get(\"/response/params/PKG_VERSIONS\", Collections.emptyMap());\n    } catch (PathNotFoundException ex) {\n      // Don't worry if PKG_VERSION wasn't found. It just means this collection was never touched by the package manager.\n    }\n    if (packages == null) return Collections.emptyMap();\n    Map<String, SolrPackageInstance> ret = new HashMap<>();\n    for (String packageName: packages.keySet()) {\n      if (Strings.isNullOrEmpty(packageName) == false && // There can be an empty key, storing the version here\n          packages.get(packageName) != null) { // null means the package was undeployed from this package before\n        ret.put(packageName, getPackageInstance(packageName, packages.get(packageName)));\n      }\n    }\n    return ret;\n  }\n\n","sourceOld":"  public Map<String, SolrPackageInstance> getPackagesDeployed(String collection) {\n    Map<String, String> packages = null;\n    try {\n      NavigableObject result = (NavigableObject) Utils.executeGET(solrClient.getHttpClient(),\n          solrBaseUrl + PackageUtils.getCollectionParamsPath(collection) + \"/PKG_VERSIONS?omitHeader=true&wt=javabin\", Utils.JAVABINCONSUMER);\n      packages = (Map<String, String>) result._get(\"/response/params/PKG_VERSIONS\", Collections.emptyMap());\n    } catch (PathNotFoundException ex) {\n      // Don't worry if PKG_VERSION wasn't found. It just means this collection was never touched by the package manager.\n    }\n    if (packages == null) return Collections.emptyMap();\n    Map<String, SolrPackageInstance> ret = new HashMap<>();\n    for (String packageName: packages.keySet()) {\n      if (Strings.isNullOrEmpty(packageName) == false && // There can be an empty key, storing the version here\n          packages.get(packageName) != null) { // null means the package was undeployed from this package before\n        ret.put(packageName, getPackageInstance(packageName, packages.get(packageName)));\n      }\n    }\n    return ret;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["120bc33d5cbe83eca2e5fce597baf4fef208d579","62d55718cd611235e975fa73a6bdf263fbd58859"],"62d55718cd611235e975fa73a6bdf263fbd58859":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["62d55718cd611235e975fa73a6bdf263fbd58859"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["120bc33d5cbe83eca2e5fce597baf4fef208d579"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":[],"62d55718cd611235e975fa73a6bdf263fbd58859":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","bd25fa3647fa73152703b8dccb4fb5f43633de20"],"120bc33d5cbe83eca2e5fce597baf4fef208d579":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","62d55718cd611235e975fa73a6bdf263fbd58859"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}