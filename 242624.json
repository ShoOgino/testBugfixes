{"path":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder,int,int,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder,int,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder,int,int,int).mjava","sourceNew":"  public List<SpellCheckCollation> collate(SpellingResult result, String originalQuery, ResponseBuilder ultimateResponse,\n                                           int maxCollations, int maxTries, int maxEvaluations) {\n    List<SpellCheckCollation> collations = new ArrayList<SpellCheckCollation>();\n\n    QueryComponent queryComponent = null;\n    if (ultimateResponse.components != null) {\n      for (SearchComponent sc : ultimateResponse.components) {\n        if (sc instanceof QueryComponent) {\n          queryComponent = (QueryComponent) sc;\n          break;\n        }\n      }\n    }\n\n    boolean verifyCandidateWithQuery = true;\n    if (maxTries < 1) {\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n    if (queryComponent == null && verifyCandidateWithQuery) {\n      LOG.info(\"Could not find an instance of QueryComponent.  Disabling collation verification against the index.\");\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n\n    int tryNo = 0;\n    int collNo = 0;\n    PossibilityIterator possibilityIter = new PossibilityIterator(result.getSuggestions(), maxTries, maxEvaluations);\n    while (tryNo < maxTries && collNo < maxCollations && possibilityIter.hasNext()) {\n\n      RankedSpellPossibility possibility = possibilityIter.next();\n      String collationQueryStr = getCollation(originalQuery, possibility.getCorrections());\n      int hits = 0;\n\n      if (verifyCandidateWithQuery) {\n        tryNo++;\n\n        ModifiableSolrParams params = new ModifiableSolrParams(ultimateResponse.req.getParams());\n        params.set(CommonParams.Q, collationQueryStr);\n        params.remove(CommonParams.START);\n        params.set(CommonParams.FL, \"id\");\n        params.set(CommonParams.ROWS, \"0\");\n        params.remove(GroupParams.GROUP);\n\n        // creating a request here... make sure to close it!\n        ResponseBuilder checkResponse = new ResponseBuilder(new LocalSolrQueryRequest(ultimateResponse.req.getCore(), params),new SolrQueryResponse(), Arrays.asList(new SearchComponent[] { queryComponent }));\n        checkResponse.setQparser(ultimateResponse.getQparser());\n        checkResponse.setFilters(ultimateResponse.getFilters());\n        checkResponse.setQueryString(collationQueryStr);\n        checkResponse.components = Arrays.asList(new SearchComponent[] { queryComponent });\n\n        try {\n          queryComponent.prepare(checkResponse);\n          queryComponent.process(checkResponse);\n          hits = (Integer) checkResponse.rsp.getToLog().get(\"hits\");\n        } catch (Exception e) {\n          LOG.warn(\"Exception trying to re-query to check if a spell check possibility would return any hits.\", e);\n        } finally {\n          checkResponse.req.close();  \n        }\n      }\n      if (hits > 0 || !verifyCandidateWithQuery) {\n        collNo++;\n        SpellCheckCollation collation = new SpellCheckCollation();\n        collation.setCollationQuery(collationQueryStr);\n        collation.setHits(hits);\n        collation.setInternalRank(possibility.getRank());\n\n        NamedList<String> misspellingsAndCorrections = new NamedList<String>();\n        for (SpellCheckCorrection corr : possibility.getCorrections()) {\n          misspellingsAndCorrections.add(corr.getOriginal().toString(), corr.getCorrection());\n        }\n        collation.setMisspellingsAndCorrections(misspellingsAndCorrections);\n        collations.add(collation);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Collation: \" + collationQueryStr + (verifyCandidateWithQuery ? (\" will return \" + hits + \" hits.\") : \"\"));\n      }\n    }\n    return collations;\n  }\n\n","sourceOld":"  public List<SpellCheckCollation> collate(SpellingResult result, String originalQuery, ResponseBuilder ultimateResponse,\n                                           int maxCollations, int maxTries, int maxEvaluations) {\n    List<SpellCheckCollation> collations = new ArrayList<SpellCheckCollation>();\n\n    QueryComponent queryComponent = null;\n    if (ultimateResponse.components != null) {\n      for (SearchComponent sc : ultimateResponse.components) {\n        if (sc instanceof QueryComponent) {\n          queryComponent = (QueryComponent) sc;\n          break;\n        }\n      }\n    }\n\n    boolean verifyCandidateWithQuery = true;\n    if (maxTries < 1) {\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n    if (queryComponent == null && verifyCandidateWithQuery) {\n      LOG.info(\"Could not find an instance of QueryComponent.  Disabling collation verification against the index.\");\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n\n    int tryNo = 0;\n    int collNo = 0;\n    PossibilityIterator possibilityIter = new PossibilityIterator(result.getSuggestions(), maxTries, maxEvaluations);\n    while (tryNo < maxTries && collNo < maxCollations && possibilityIter.hasNext()) {\n\n      RankedSpellPossibility possibility = possibilityIter.next();\n      String collationQueryStr = getCollation(originalQuery, possibility.getCorrections());\n      int hits = 0;\n\n      if (verifyCandidateWithQuery) {\n        tryNo++;\n\n        ModifiableSolrParams params = new ModifiableSolrParams(ultimateResponse.req.getParams());\n        params.set(CommonParams.Q, collationQueryStr);\n        params.remove(CommonParams.START);\n        params.set(CommonParams.FL, \"id\");\n        params.set(CommonParams.ROWS, \"0\");\n        params.remove(GroupParams.GROUP);\n\n        // creating a request here... make sure to close it!\n        ResponseBuilder checkResponse = new ResponseBuilder(new LocalSolrQueryRequest(ultimateResponse.req.getCore(), params),new SolrQueryResponse(), Arrays.asList(new SearchComponent[] { queryComponent }));\n        checkResponse.setQparser(ultimateResponse.getQparser());\n        checkResponse.setFilters(ultimateResponse.getFilters());\n        checkResponse.setQueryString(collationQueryStr);\n        checkResponse.components = Arrays.asList(new SearchComponent[] { queryComponent });\n\n        try {\n          queryComponent.prepare(checkResponse);\n          queryComponent.process(checkResponse);\n          hits = (Integer) checkResponse.rsp.getToLog().get(\"hits\");\n        } catch (Exception e) {\n          LOG.warn(\"Exception trying to re-query to check if a spell check possibility would return any hits.\", e);\n        } finally {\n          checkResponse.req.close();  \n        }\n      }\n      if (hits > 0 || !verifyCandidateWithQuery) {\n        collNo++;\n        SpellCheckCollation collation = new SpellCheckCollation();\n        collation.setCollationQuery(collationQueryStr);\n        collation.setHits(hits);\n        collation.setInternalRank(possibility.getRank());\n\n        NamedList<String> misspellingsAndCorrections = new NamedList<String>();\n        for (SpellCheckCorrection corr : possibility.getCorrections()) {\n          misspellingsAndCorrections.add(corr.getOriginal().toString(), corr.getCorrection());\n        }\n        collation.setMisspellingsAndCorrections(misspellingsAndCorrections);\n        collations.add(collation);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Collation: \" + collationQueryStr + (verifyCandidateWithQuery ? (\" will return \" + hits + \" hits.\") : \"\"));\n      }\n    }\n    return collations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder,int,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder,int,int,int).mjava","sourceNew":"  public List<SpellCheckCollation> collate(SpellingResult result, String originalQuery, ResponseBuilder ultimateResponse,\n                                           int maxCollations, int maxTries, int maxEvaluations) {\n    List<SpellCheckCollation> collations = new ArrayList<SpellCheckCollation>();\n\n    QueryComponent queryComponent = null;\n    if (ultimateResponse.components != null) {\n      for (SearchComponent sc : ultimateResponse.components) {\n        if (sc instanceof QueryComponent) {\n          queryComponent = (QueryComponent) sc;\n          break;\n        }\n      }\n    }\n\n    boolean verifyCandidateWithQuery = true;\n    if (maxTries < 1) {\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n    if (queryComponent == null && verifyCandidateWithQuery) {\n      LOG.info(\"Could not find an instance of QueryComponent.  Disabling collation verification against the index.\");\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n\n    int tryNo = 0;\n    int collNo = 0;\n    PossibilityIterator possibilityIter = new PossibilityIterator(result.getSuggestions(), maxTries, maxEvaluations);\n    while (tryNo < maxTries && collNo < maxCollations && possibilityIter.hasNext()) {\n\n      RankedSpellPossibility possibility = possibilityIter.next();\n      String collationQueryStr = getCollation(originalQuery, possibility.getCorrections());\n      int hits = 0;\n\n      if (verifyCandidateWithQuery) {\n        tryNo++;\n\n        ModifiableSolrParams params = new ModifiableSolrParams(ultimateResponse.req.getParams());\n        params.set(CommonParams.Q, collationQueryStr);\n        params.remove(CommonParams.START);\n        params.set(CommonParams.FL, \"id\");\n        params.set(CommonParams.ROWS, \"0\");\n        params.remove(GroupParams.GROUP);\n\n        // creating a request here... make sure to close it!\n        ResponseBuilder checkResponse = new ResponseBuilder(new LocalSolrQueryRequest(ultimateResponse.req.getCore(), params),new SolrQueryResponse(), Arrays.asList(new SearchComponent[] { queryComponent }));\n        checkResponse.setQparser(ultimateResponse.getQparser());\n        checkResponse.setFilters(ultimateResponse.getFilters());\n        checkResponse.setQueryString(collationQueryStr);\n        checkResponse.components = Arrays.asList(new SearchComponent[] { queryComponent });\n\n        try {\n          queryComponent.prepare(checkResponse);\n          queryComponent.process(checkResponse);\n          hits = (Integer) checkResponse.rsp.getToLog().get(\"hits\");\n        } catch (Exception e) {\n          LOG.warn(\"Exception trying to re-query to check if a spell check possibility would return any hits.\", e);\n        } finally {\n          checkResponse.req.close();  \n        }\n      }\n      if (hits > 0 || !verifyCandidateWithQuery) {\n        collNo++;\n        SpellCheckCollation collation = new SpellCheckCollation();\n        collation.setCollationQuery(collationQueryStr);\n        collation.setHits(hits);\n        collation.setInternalRank(possibility.getRank());\n\n        NamedList<String> misspellingsAndCorrections = new NamedList<String>();\n        for (SpellCheckCorrection corr : possibility.getCorrections()) {\n          misspellingsAndCorrections.add(corr.getOriginal().toString(), corr.getCorrection());\n        }\n        collation.setMisspellingsAndCorrections(misspellingsAndCorrections);\n        collations.add(collation);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Collation: \" + collationQueryStr + (verifyCandidateWithQuery ? (\" will return \" + hits + \" hits.\") : \"\"));\n      }\n    }\n    return collations;\n  }\n\n","sourceOld":"  public List<SpellCheckCollation> collate(SpellingResult result, String originalQuery, ResponseBuilder ultimateResponse,\n                                           int maxCollations, int maxTries, int maxEvaluations) {\n    List<SpellCheckCollation> collations = new ArrayList<SpellCheckCollation>();\n\n    QueryComponent queryComponent = null;\n    if (ultimateResponse.components != null) {\n      for (SearchComponent sc : ultimateResponse.components) {\n        if (sc instanceof QueryComponent) {\n          queryComponent = (QueryComponent) sc;\n          break;\n        }\n      }\n    }\n\n    boolean verifyCandidateWithQuery = true;\n    if (maxTries < 1) {\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n    if (queryComponent == null && verifyCandidateWithQuery) {\n      LOG.info(\"Could not find an instance of QueryComponent.  Disabling collation verification against the index.\");\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n\n    int tryNo = 0;\n    int collNo = 0;\n    PossibilityIterator possibilityIter = new PossibilityIterator(result.getSuggestions(), maxTries, maxEvaluations);\n    while (tryNo < maxTries && collNo < maxCollations && possibilityIter.hasNext()) {\n\n      RankedSpellPossibility possibility = possibilityIter.next();\n      String collationQueryStr = getCollation(originalQuery, possibility.getCorrections());\n      int hits = 0;\n\n      if (verifyCandidateWithQuery) {\n        tryNo++;\n\n        ModifiableSolrParams params = new ModifiableSolrParams(ultimateResponse.req.getParams());\n        params.set(CommonParams.Q, collationQueryStr);\n        params.remove(CommonParams.START);\n        params.set(CommonParams.FL, \"id\");\n        params.set(CommonParams.ROWS, \"0\");\n        params.remove(GroupParams.GROUP);\n\n        // creating a request here... make sure to close it!\n        ResponseBuilder checkResponse = new ResponseBuilder(new LocalSolrQueryRequest(ultimateResponse.req.getCore(), params),new SolrQueryResponse(), Arrays.asList(new SearchComponent[] { queryComponent }));\n        checkResponse.setQparser(ultimateResponse.getQparser());\n        checkResponse.setFilters(ultimateResponse.getFilters());\n        checkResponse.setQueryString(collationQueryStr);\n        checkResponse.components = Arrays.asList(new SearchComponent[] { queryComponent });\n\n        try {\n          queryComponent.prepare(checkResponse);\n          queryComponent.process(checkResponse);\n          hits = (Integer) checkResponse.rsp.getToLog().get(\"hits\");\n        } catch (Exception e) {\n          LOG.warn(\"Exception trying to re-query to check if a spell check possibility would return any hits.\", e);\n        } finally {\n          checkResponse.req.close();  \n        }\n      }\n      if (hits > 0 || !verifyCandidateWithQuery) {\n        collNo++;\n        SpellCheckCollation collation = new SpellCheckCollation();\n        collation.setCollationQuery(collationQueryStr);\n        collation.setHits(hits);\n        collation.setInternalRank(possibility.getRank());\n\n        NamedList<String> misspellingsAndCorrections = new NamedList<String>();\n        for (SpellCheckCorrection corr : possibility.getCorrections()) {\n          misspellingsAndCorrections.add(corr.getOriginal().toString(), corr.getCorrection());\n        }\n        collation.setMisspellingsAndCorrections(misspellingsAndCorrections);\n        collations.add(collation);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Collation: \" + collationQueryStr + (verifyCandidateWithQuery ? (\" will return \" + hits + \" hits.\") : \"\"));\n      }\n    }\n    return collations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder,int,int,int).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder,int,int,int).mjava","sourceNew":"  public List<SpellCheckCollation> collate(SpellingResult result, String originalQuery, ResponseBuilder ultimateResponse,\n                                           int maxCollations, int maxTries, int maxEvaluations) {\n    List<SpellCheckCollation> collations = new ArrayList<SpellCheckCollation>();\n\n    QueryComponent queryComponent = null;\n    if (ultimateResponse.components != null) {\n      for (SearchComponent sc : ultimateResponse.components) {\n        if (sc instanceof QueryComponent) {\n          queryComponent = (QueryComponent) sc;\n          break;\n        }\n      }\n    }\n\n    boolean verifyCandidateWithQuery = true;\n    if (maxTries < 1) {\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n    if (queryComponent == null && verifyCandidateWithQuery) {\n      LOG.info(\"Could not find an instance of QueryComponent.  Disabling collation verification against the index.\");\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n\n    int tryNo = 0;\n    int collNo = 0;\n    PossibilityIterator possibilityIter = new PossibilityIterator(result.getSuggestions(), maxTries, maxEvaluations);\n    while (tryNo < maxTries && collNo < maxCollations && possibilityIter.hasNext()) {\n\n      RankedSpellPossibility possibility = possibilityIter.next();\n      String collationQueryStr = getCollation(originalQuery, possibility.getCorrections());\n      int hits = 0;\n\n      if (verifyCandidateWithQuery) {\n        tryNo++;\n\n        ModifiableSolrParams params = new ModifiableSolrParams(ultimateResponse.req.getParams());\n        params.set(CommonParams.Q, collationQueryStr);\n        params.remove(CommonParams.START);\n        params.set(CommonParams.FL, \"id\");\n        params.set(CommonParams.ROWS, \"0\");\n        params.remove(GroupParams.GROUP);\n\n        // creating a request here... make sure to close it!\n        ResponseBuilder checkResponse = new ResponseBuilder(new LocalSolrQueryRequest(ultimateResponse.req.getCore(), params),new SolrQueryResponse(), Arrays.asList(new SearchComponent[] { queryComponent }));\n        checkResponse.setQparser(ultimateResponse.getQparser());\n        checkResponse.setFilters(ultimateResponse.getFilters());\n        checkResponse.setQueryString(collationQueryStr);\n        checkResponse.components = Arrays.asList(new SearchComponent[] { queryComponent });\n\n        try {\n          queryComponent.prepare(checkResponse);\n          queryComponent.process(checkResponse);\n          hits = (Integer) checkResponse.rsp.getToLog().get(\"hits\");\n        } catch (Exception e) {\n          LOG.warn(\"Exception trying to re-query to check if a spell check possibility would return any hits.\", e);\n        } finally {\n          checkResponse.req.close();  \n        }\n      }\n      if (hits > 0 || !verifyCandidateWithQuery) {\n        collNo++;\n        SpellCheckCollation collation = new SpellCheckCollation();\n        collation.setCollationQuery(collationQueryStr);\n        collation.setHits(hits);\n        collation.setInternalRank(possibility.getRank());\n\n        NamedList<String> misspellingsAndCorrections = new NamedList<String>();\n        for (SpellCheckCorrection corr : possibility.getCorrections()) {\n          misspellingsAndCorrections.add(corr.getOriginal().toString(), corr.getCorrection());\n        }\n        collation.setMisspellingsAndCorrections(misspellingsAndCorrections);\n        collations.add(collation);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Collation: \" + collationQueryStr + (verifyCandidateWithQuery ? (\" will return \" + hits + \" hits.\") : \"\"));\n      }\n    }\n    return collations;\n  }\n\n","sourceOld":"  public List<SpellCheckCollation> collate(SpellingResult result, String originalQuery, ResponseBuilder ultimateResponse,\n                                           int maxCollations, int maxTries, int maxEvaluations) {\n    List<SpellCheckCollation> collations = new ArrayList<SpellCheckCollation>();\n\n    QueryComponent queryComponent = null;\n    if (ultimateResponse.components != null) {\n      for (SearchComponent sc : ultimateResponse.components) {\n        if (sc instanceof QueryComponent) {\n          queryComponent = (QueryComponent) sc;\n          break;\n        }\n      }\n    }\n\n    boolean verifyCandidateWithQuery = true;\n    if (maxTries < 1) {\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n    if (queryComponent == null && verifyCandidateWithQuery) {\n      LOG.info(\"Could not find an instance of QueryComponent.  Disabling collation verification against the index.\");\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n\n    int tryNo = 0;\n    int collNo = 0;\n    PossibilityIterator possibilityIter = new PossibilityIterator(result.getSuggestions(), maxTries, maxEvaluations);\n    while (tryNo < maxTries && collNo < maxCollations && possibilityIter.hasNext()) {\n\n      RankedSpellPossibility possibility = possibilityIter.next();\n      String collationQueryStr = getCollation(originalQuery, possibility.getCorrections());\n      int hits = 0;\n\n      if (verifyCandidateWithQuery) {\n        tryNo++;\n\n        ModifiableSolrParams params = new ModifiableSolrParams(ultimateResponse.req.getParams());\n        params.set(CommonParams.Q, collationQueryStr);\n        params.remove(CommonParams.START);\n        params.set(CommonParams.FL, \"id\");\n        params.set(CommonParams.ROWS, \"0\");\n        params.remove(GroupParams.GROUP);\n\n        // creating a request here... make sure to close it!\n        ResponseBuilder checkResponse = new ResponseBuilder(new LocalSolrQueryRequest(ultimateResponse.req.getCore(), params),new SolrQueryResponse(), Arrays.asList(new SearchComponent[] { queryComponent }));\n        checkResponse.setQparser(ultimateResponse.getQparser());\n        checkResponse.setFilters(ultimateResponse.getFilters());\n        checkResponse.setQueryString(collationQueryStr);\n        checkResponse.components = Arrays.asList(new SearchComponent[] { queryComponent });\n\n        try {\n          queryComponent.prepare(checkResponse);\n          queryComponent.process(checkResponse);\n          hits = (Integer) checkResponse.rsp.getToLog().get(\"hits\");\n        } catch (Exception e) {\n          LOG.warn(\"Exception trying to re-query to check if a spell check possibility would return any hits.\", e);\n        } finally {\n          checkResponse.req.close();  \n        }\n      }\n      if (hits > 0 || !verifyCandidateWithQuery) {\n        collNo++;\n        SpellCheckCollation collation = new SpellCheckCollation();\n        collation.setCollationQuery(collationQueryStr);\n        collation.setHits(hits);\n        collation.setInternalRank(possibility.getRank());\n\n        NamedList<String> misspellingsAndCorrections = new NamedList<String>();\n        for (SpellCheckCorrection corr : possibility.getCorrections()) {\n          misspellingsAndCorrections.add(corr.getOriginal().toString(), corr.getCorrection());\n        }\n        collation.setMisspellingsAndCorrections(misspellingsAndCorrections);\n        collations.add(collation);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Collation: \" + collationQueryStr + (verifyCandidateWithQuery ? (\" will return \" + hits + \" hits.\") : \"\"));\n      }\n    }\n    return collations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fae06511695f4be0bce5337deb3b3f813d0c3e7c","date":1323890147,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder,int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder,int,int,int).mjava","sourceNew":"  public List<SpellCheckCollation> collate(SpellingResult result, String originalQuery, ResponseBuilder ultimateResponse,\n                                           int maxCollations, int maxTries, int maxEvaluations) {\n    List<SpellCheckCollation> collations = new ArrayList<SpellCheckCollation>();\n\n    QueryComponent queryComponent = null;\n    if (ultimateResponse.components != null) {\n      for (SearchComponent sc : ultimateResponse.components) {\n        if (sc instanceof QueryComponent) {\n          queryComponent = (QueryComponent) sc;\n          break;\n        }\n      }\n    }\n\n    boolean verifyCandidateWithQuery = true;\n    if (maxTries < 1) {\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n    if (queryComponent == null && verifyCandidateWithQuery) {\n      LOG.info(\"Could not find an instance of QueryComponent.  Disabling collation verification against the index.\");\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n\n    int tryNo = 0;\n    int collNo = 0;\n    PossibilityIterator possibilityIter = new PossibilityIterator(result.getSuggestions(), maxTries, maxEvaluations);\n    while (tryNo < maxTries && collNo < maxCollations && possibilityIter.hasNext()) {\n\n      RankedSpellPossibility possibility = possibilityIter.next();\n      String collationQueryStr = getCollation(originalQuery, possibility.getCorrections());\n      int hits = 0;\n\n      if (verifyCandidateWithQuery) {\n        tryNo++;\n\n        ModifiableSolrParams params = new ModifiableSolrParams(ultimateResponse.req.getParams());\n        params.set(CommonParams.Q, collationQueryStr);\n        params.remove(CommonParams.START);\n        params.set(CommonParams.FL, \"id\");\n        params.set(CommonParams.ROWS, \"0\");\n        params.remove(GroupParams.GROUP);\n\n        // creating a request here... make sure to close it!\n        ResponseBuilder checkResponse = new ResponseBuilder(new LocalSolrQueryRequest(ultimateResponse.req.getCore(), params),new SolrQueryResponse(), Arrays.<SearchComponent>asList(queryComponent));\n        checkResponse.setQparser(ultimateResponse.getQparser());\n        checkResponse.setFilters(ultimateResponse.getFilters());\n        checkResponse.setQueryString(collationQueryStr);\n        checkResponse.components = Arrays.<SearchComponent>asList(queryComponent);\n\n        try {\n          queryComponent.prepare(checkResponse);\n          queryComponent.process(checkResponse);\n          hits = (Integer) checkResponse.rsp.getToLog().get(\"hits\");\n        } catch (Exception e) {\n          LOG.warn(\"Exception trying to re-query to check if a spell check possibility would return any hits.\", e);\n        } finally {\n          checkResponse.req.close();  \n        }\n      }\n      if (hits > 0 || !verifyCandidateWithQuery) {\n        collNo++;\n        SpellCheckCollation collation = new SpellCheckCollation();\n        collation.setCollationQuery(collationQueryStr);\n        collation.setHits(hits);\n        collation.setInternalRank(possibility.getRank());\n\n        NamedList<String> misspellingsAndCorrections = new NamedList<String>();\n        for (SpellCheckCorrection corr : possibility.getCorrections()) {\n          misspellingsAndCorrections.add(corr.getOriginal().toString(), corr.getCorrection());\n        }\n        collation.setMisspellingsAndCorrections(misspellingsAndCorrections);\n        collations.add(collation);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Collation: \" + collationQueryStr + (verifyCandidateWithQuery ? (\" will return \" + hits + \" hits.\") : \"\"));\n      }\n    }\n    return collations;\n  }\n\n","sourceOld":"  public List<SpellCheckCollation> collate(SpellingResult result, String originalQuery, ResponseBuilder ultimateResponse,\n                                           int maxCollations, int maxTries, int maxEvaluations) {\n    List<SpellCheckCollation> collations = new ArrayList<SpellCheckCollation>();\n\n    QueryComponent queryComponent = null;\n    if (ultimateResponse.components != null) {\n      for (SearchComponent sc : ultimateResponse.components) {\n        if (sc instanceof QueryComponent) {\n          queryComponent = (QueryComponent) sc;\n          break;\n        }\n      }\n    }\n\n    boolean verifyCandidateWithQuery = true;\n    if (maxTries < 1) {\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n    if (queryComponent == null && verifyCandidateWithQuery) {\n      LOG.info(\"Could not find an instance of QueryComponent.  Disabling collation verification against the index.\");\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n\n    int tryNo = 0;\n    int collNo = 0;\n    PossibilityIterator possibilityIter = new PossibilityIterator(result.getSuggestions(), maxTries, maxEvaluations);\n    while (tryNo < maxTries && collNo < maxCollations && possibilityIter.hasNext()) {\n\n      RankedSpellPossibility possibility = possibilityIter.next();\n      String collationQueryStr = getCollation(originalQuery, possibility.getCorrections());\n      int hits = 0;\n\n      if (verifyCandidateWithQuery) {\n        tryNo++;\n\n        ModifiableSolrParams params = new ModifiableSolrParams(ultimateResponse.req.getParams());\n        params.set(CommonParams.Q, collationQueryStr);\n        params.remove(CommonParams.START);\n        params.set(CommonParams.FL, \"id\");\n        params.set(CommonParams.ROWS, \"0\");\n        params.remove(GroupParams.GROUP);\n\n        // creating a request here... make sure to close it!\n        ResponseBuilder checkResponse = new ResponseBuilder(new LocalSolrQueryRequest(ultimateResponse.req.getCore(), params),new SolrQueryResponse(), Arrays.asList(new SearchComponent[] { queryComponent }));\n        checkResponse.setQparser(ultimateResponse.getQparser());\n        checkResponse.setFilters(ultimateResponse.getFilters());\n        checkResponse.setQueryString(collationQueryStr);\n        checkResponse.components = Arrays.asList(new SearchComponent[] { queryComponent });\n\n        try {\n          queryComponent.prepare(checkResponse);\n          queryComponent.process(checkResponse);\n          hits = (Integer) checkResponse.rsp.getToLog().get(\"hits\");\n        } catch (Exception e) {\n          LOG.warn(\"Exception trying to re-query to check if a spell check possibility would return any hits.\", e);\n        } finally {\n          checkResponse.req.close();  \n        }\n      }\n      if (hits > 0 || !verifyCandidateWithQuery) {\n        collNo++;\n        SpellCheckCollation collation = new SpellCheckCollation();\n        collation.setCollationQuery(collationQueryStr);\n        collation.setHits(hits);\n        collation.setInternalRank(possibility.getRank());\n\n        NamedList<String> misspellingsAndCorrections = new NamedList<String>();\n        for (SpellCheckCorrection corr : possibility.getCorrections()) {\n          misspellingsAndCorrections.add(corr.getOriginal().toString(), corr.getCorrection());\n        }\n        collation.setMisspellingsAndCorrections(misspellingsAndCorrections);\n        collations.add(collation);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Collation: \" + collationQueryStr + (verifyCandidateWithQuery ? (\" will return \" + hits + \" hits.\") : \"\"));\n      }\n    }\n    return collations;\n  }\n\n","bugFix":null,"bugIntro":["2ef113fb050c2f71e3075c84198045b09385eda3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad9ec888e587ca9a3279368245cdf00aabdc108","date":1338832525,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder,int,int,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/SpellCheckCollator#collate(SpellingResult,String,ResponseBuilder,int,int,int).mjava","sourceNew":"  public List<SpellCheckCollation> collate(SpellingResult result, String originalQuery, ResponseBuilder ultimateResponse,\n                                           int maxCollations, int maxTries, int maxEvaluations, boolean suggestionsMayOverlap) {\n    List<SpellCheckCollation> collations = new ArrayList<SpellCheckCollation>();\n\n    QueryComponent queryComponent = null;\n    if (ultimateResponse.components != null) {\n      for (SearchComponent sc : ultimateResponse.components) {\n        if (sc instanceof QueryComponent) {\n          queryComponent = (QueryComponent) sc;\n          break;\n        }\n      }\n    }\n\n    boolean verifyCandidateWithQuery = true;\n    int maxNumberToIterate = maxTries;\n    if (maxTries < 1) {\n      maxTries = 1;\n      maxNumberToIterate = maxCollations;\n      verifyCandidateWithQuery = false;\n    }\n    if (queryComponent == null && verifyCandidateWithQuery) {\n      LOG.info(\"Could not find an instance of QueryComponent.  Disabling collation verification against the index.\");\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n\n    int tryNo = 0;\n    int collNo = 0;\n    PossibilityIterator possibilityIter = new PossibilityIterator(result.getSuggestions(), maxNumberToIterate, maxEvaluations, suggestionsMayOverlap);\n    while (tryNo < maxTries && collNo < maxCollations && possibilityIter.hasNext()) {\n\n      PossibilityIterator.RankedSpellPossibility possibility = possibilityIter.next();\n      String collationQueryStr = getCollation(originalQuery, possibility.corrections);\n      int hits = 0;\n\n      if (verifyCandidateWithQuery) {\n        tryNo++;\n\n        ModifiableSolrParams params = new ModifiableSolrParams(ultimateResponse.req.getParams());\n        params.set(CommonParams.Q, collationQueryStr);\n        params.remove(CommonParams.START);\n        params.set(CommonParams.FL, \"id\");\n        params.set(CommonParams.ROWS, \"0\");\n        params.remove(GroupParams.GROUP);\n\n        // creating a request here... make sure to close it!\n        ResponseBuilder checkResponse = new ResponseBuilder(new LocalSolrQueryRequest(ultimateResponse.req.getCore(), params),new SolrQueryResponse(), Arrays.<SearchComponent>asList(queryComponent));\n        checkResponse.setQparser(ultimateResponse.getQparser());\n        checkResponse.setFilters(ultimateResponse.getFilters());\n        checkResponse.setQueryString(collationQueryStr);\n        checkResponse.components = Arrays.<SearchComponent>asList(queryComponent);\n\n        try {\n          queryComponent.prepare(checkResponse);\n          queryComponent.process(checkResponse);\n          hits = (Integer) checkResponse.rsp.getToLog().get(\"hits\");\n        } catch (Exception e) {\n          LOG.warn(\"Exception trying to re-query to check if a spell check possibility would return any hits.\", e);\n        } finally {\n          checkResponse.req.close();  \n        }\n      }\n      if (hits > 0 || !verifyCandidateWithQuery) {\n        collNo++;\n        SpellCheckCollation collation = new SpellCheckCollation();\n        collation.setCollationQuery(collationQueryStr);\n        collation.setHits(hits);\n        collation.setInternalRank(suggestionsMayOverlap ? ((possibility.rank * 1000) + possibility.index) : possibility.rank);\n\n        NamedList<String> misspellingsAndCorrections = new NamedList<String>();\n        for (SpellCheckCorrection corr : possibility.corrections) {\n          misspellingsAndCorrections.add(corr.getOriginal().toString(), corr.getCorrection());\n        }\n        collation.setMisspellingsAndCorrections(misspellingsAndCorrections);\n        collations.add(collation);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Collation: \" + collationQueryStr + (verifyCandidateWithQuery ? (\" will return \" + hits + \" hits.\") : \"\"));\n      }\n    }\n    return collations;\n  }\n\n","sourceOld":"  public List<SpellCheckCollation> collate(SpellingResult result, String originalQuery, ResponseBuilder ultimateResponse,\n                                           int maxCollations, int maxTries, int maxEvaluations) {\n    List<SpellCheckCollation> collations = new ArrayList<SpellCheckCollation>();\n\n    QueryComponent queryComponent = null;\n    if (ultimateResponse.components != null) {\n      for (SearchComponent sc : ultimateResponse.components) {\n        if (sc instanceof QueryComponent) {\n          queryComponent = (QueryComponent) sc;\n          break;\n        }\n      }\n    }\n\n    boolean verifyCandidateWithQuery = true;\n    if (maxTries < 1) {\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n    if (queryComponent == null && verifyCandidateWithQuery) {\n      LOG.info(\"Could not find an instance of QueryComponent.  Disabling collation verification against the index.\");\n      maxTries = 1;\n      verifyCandidateWithQuery = false;\n    }\n\n    int tryNo = 0;\n    int collNo = 0;\n    PossibilityIterator possibilityIter = new PossibilityIterator(result.getSuggestions(), maxTries, maxEvaluations);\n    while (tryNo < maxTries && collNo < maxCollations && possibilityIter.hasNext()) {\n\n      RankedSpellPossibility possibility = possibilityIter.next();\n      String collationQueryStr = getCollation(originalQuery, possibility.getCorrections());\n      int hits = 0;\n\n      if (verifyCandidateWithQuery) {\n        tryNo++;\n\n        ModifiableSolrParams params = new ModifiableSolrParams(ultimateResponse.req.getParams());\n        params.set(CommonParams.Q, collationQueryStr);\n        params.remove(CommonParams.START);\n        params.set(CommonParams.FL, \"id\");\n        params.set(CommonParams.ROWS, \"0\");\n        params.remove(GroupParams.GROUP);\n\n        // creating a request here... make sure to close it!\n        ResponseBuilder checkResponse = new ResponseBuilder(new LocalSolrQueryRequest(ultimateResponse.req.getCore(), params),new SolrQueryResponse(), Arrays.<SearchComponent>asList(queryComponent));\n        checkResponse.setQparser(ultimateResponse.getQparser());\n        checkResponse.setFilters(ultimateResponse.getFilters());\n        checkResponse.setQueryString(collationQueryStr);\n        checkResponse.components = Arrays.<SearchComponent>asList(queryComponent);\n\n        try {\n          queryComponent.prepare(checkResponse);\n          queryComponent.process(checkResponse);\n          hits = (Integer) checkResponse.rsp.getToLog().get(\"hits\");\n        } catch (Exception e) {\n          LOG.warn(\"Exception trying to re-query to check if a spell check possibility would return any hits.\", e);\n        } finally {\n          checkResponse.req.close();  \n        }\n      }\n      if (hits > 0 || !verifyCandidateWithQuery) {\n        collNo++;\n        SpellCheckCollation collation = new SpellCheckCollation();\n        collation.setCollationQuery(collationQueryStr);\n        collation.setHits(hits);\n        collation.setInternalRank(possibility.getRank());\n\n        NamedList<String> misspellingsAndCorrections = new NamedList<String>();\n        for (SpellCheckCorrection corr : possibility.getCorrections()) {\n          misspellingsAndCorrections.add(corr.getOriginal().toString(), corr.getCorrection());\n        }\n        collation.setMisspellingsAndCorrections(misspellingsAndCorrections);\n        collations.add(collation);\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Collation: \" + collationQueryStr + (verifyCandidateWithQuery ? (\" will return \" + hits + \" hits.\") : \"\"));\n      }\n    }\n    return collations;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0ad9ec888e587ca9a3279368245cdf00aabdc108":["fae06511695f4be0bce5337deb3b3f813d0c3e7c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fae06511695f4be0bce5337deb3b3f813d0c3e7c":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ad9ec888e587ca9a3279368245cdf00aabdc108"]},"commit2Childs":{"0ad9ec888e587ca9a3279368245cdf00aabdc108":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["fae06511695f4be0bce5337deb3b3f813d0c3e7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"fae06511695f4be0bce5337deb3b3f813d0c3e7c":["0ad9ec888e587ca9a3279368245cdf00aabdc108"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}