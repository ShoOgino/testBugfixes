{"path":"lucene/core/src/java/org/apache/lucene/index/SortedBytesDVWriter#flush(SegmentWriteState,SimpleDVConsumer).mjava","commits":[{"id":"127981e5a1e1d1425c5fdc816ceacf753ca70ee4","date":1354205321,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedBytesDVWriter#flush(SegmentWriteState,SimpleDVConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedBytesDVWriter#flush(FieldInfo,SegmentWriteState,SortedDocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, SimpleDVConsumer dvConsumer) throws IOException {\n    SortedDocValuesConsumer consumer = dvConsumer.addSortedField(fieldInfo,\n                                                                 hash.size(),\n                                                                 fixedLength >= 0,\n                                                                 maxLength);\n    final int maxDoc = state.segmentInfo.getDocCount();\n    int emptyOrd = -1;\n    if (pendingIndex < maxDoc) {\n      // Make sure we added EMPTY value before sorting:\n      emptyOrd = hash.add(EMPTY);\n      if (emptyOrd < 0) {\n        emptyOrd = -emptyOrd-1;\n      }\n    }\n\n    int valueCount = hash.size();\n\n    int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int sortedValueRamUsage = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT*valueCount;\n    iwBytesUsed.addAndGet(sortedValueRamUsage);\n    final int[] ordMap = new int[valueCount];\n    // Write values, in sorted order:\n    BytesRef scratch = new BytesRef();\n    for(int ord=0;ord<valueCount;ord++) {\n      consumer.addValue(hash.get(sortedValues[ord], scratch));\n      ordMap[sortedValues[ord]] = ord;\n    }\n    final int bufferedDocCount = pendingIndex;\n\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      consumer.addDoc(ordMap[pending[docID]]);\n    }\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.addDoc(ordMap[emptyOrd]);\n    }\n    iwBytesUsed.addAndGet(-sortedValueRamUsage);\n    reset();\n    consumer.finish();\n  }\n\n","sourceOld":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, SortedDocValuesConsumer consumer) throws IOException {\n\n    final int maxDoc = state.segmentInfo.getDocCount();\n    int emptyOrd = -1;\n    if (pendingIndex < maxDoc) {\n      // Make sure we added EMPTY value before sorting:\n      emptyOrd = hash.add(EMPTY);\n      if (emptyOrd < 0) {\n        emptyOrd = -emptyOrd-1;\n      }\n    }\n\n    int valueCount = hash.size();\n\n    int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int sortedValueRamUsage = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT*valueCount;\n    iwBytesUsed.addAndGet(sortedValueRamUsage);\n    final int[] ordMap = new int[valueCount];\n    // Write values, in sorted order:\n    BytesRef scratch = new BytesRef();\n    for(int ord=0;ord<valueCount;ord++) {\n      consumer.addValue(hash.get(sortedValues[ord], scratch));\n      ordMap[sortedValues[ord]] = ord;\n    }\n    final int bufferedDocCount = pendingIndex;\n\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      consumer.addDoc(ordMap[pending[docID]]);\n    }\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.addDoc(ordMap[emptyOrd]);\n    }\n    iwBytesUsed.addAndGet(-sortedValueRamUsage);\n    reset();\n    consumer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed9002c5afac843c7f2d04d88e74b40d627e1af","date":1357602069,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedBytesDVWriter#flush(SegmentWriteState,SimpleDVConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedBytesDVWriter#flush(SegmentWriteState,SimpleDVConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, SimpleDVConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    final int emptyOrd;\n    if (pendingIndex < maxDoc) {\n      // Make sure we added EMPTY value before sorting:\n      int ord = hash.add(EMPTY);\n      if (ord < 0) {\n        emptyOrd = -ord-1;\n      } else {\n        emptyOrd = ord;\n      }\n    } else {\n      emptyOrd = -1;\n    }\n\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int sortedValueRamUsage = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT*valueCount;\n    iwBytesUsed.addAndGet(sortedValueRamUsage);\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    final int bufferedDocCount = pendingIndex;\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new Iterator<BytesRef>() {\n                                    int ordUpto;\n                                    BytesRef scratch = new BytesRef();\n\n                                    @Override\n                                    public boolean hasNext() {\n                                      return ordUpto < valueCount;\n                                    }\n\n                                    @Override\n                                    public void remove() {\n                                      throw new UnsupportedOperationException();\n                                    }\n\n                                    @Override\n                                    public BytesRef next() {\n                                      hash.get(sortedValues[ordUpto], scratch);\n                                      ordUpto++;\n                                      return scratch;\n                                    }\n                                  };\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new Iterator<Number>() {\n                                    int docUpto;\n\n                                    @Override\n                                    public boolean hasNext() {\n                                      return docUpto < maxDoc;\n                                    }\n\n                                    @Override\n                                    public void remove() {\n                                      throw new UnsupportedOperationException();\n                                    }\n\n                                    @Override\n                                    public Number next() {\n                                      int ord;\n                                      if (docUpto < bufferedDocCount) {\n                                        ord = pending[docUpto];\n                                      } else {\n                                        ord = emptyOrd;\n                                      }\n                                      docUpto++;\n                                      // nocommit make\n                                      // resuable Number?\n                                      return ordMap[ord];\n                                    }\n                                  };\n                                }\n                              });\n    \n    iwBytesUsed.addAndGet(-sortedValueRamUsage);\n    reset();\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, SimpleDVConsumer dvConsumer) throws IOException {\n    SortedDocValuesConsumer consumer = dvConsumer.addSortedField(fieldInfo,\n                                                                 hash.size(),\n                                                                 fixedLength >= 0,\n                                                                 maxLength);\n    final int maxDoc = state.segmentInfo.getDocCount();\n    int emptyOrd = -1;\n    if (pendingIndex < maxDoc) {\n      // Make sure we added EMPTY value before sorting:\n      emptyOrd = hash.add(EMPTY);\n      if (emptyOrd < 0) {\n        emptyOrd = -emptyOrd-1;\n      }\n    }\n\n    int valueCount = hash.size();\n\n    int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int sortedValueRamUsage = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT*valueCount;\n    iwBytesUsed.addAndGet(sortedValueRamUsage);\n    final int[] ordMap = new int[valueCount];\n    // Write values, in sorted order:\n    BytesRef scratch = new BytesRef();\n    for(int ord=0;ord<valueCount;ord++) {\n      consumer.addValue(hash.get(sortedValues[ord], scratch));\n      ordMap[sortedValues[ord]] = ord;\n    }\n    final int bufferedDocCount = pendingIndex;\n\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      consumer.addDoc(ordMap[pending[docID]]);\n    }\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.addDoc(ordMap[emptyOrd]);\n    }\n    iwBytesUsed.addAndGet(-sortedValueRamUsage);\n    reset();\n    consumer.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedBytesDVWriter#flush(SegmentWriteState,DocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedBytesDVWriter#flush(SegmentWriteState,SimpleDVConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, DocValuesConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    final int emptyOrd;\n    if (pendingIndex < maxDoc) {\n      // Make sure we added EMPTY value before sorting:\n      int ord = hash.add(EMPTY);\n      if (ord < 0) {\n        emptyOrd = -ord-1;\n      } else {\n        emptyOrd = ord;\n      }\n    } else {\n      emptyOrd = -1;\n    }\n\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int sortedValueRamUsage = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT*valueCount;\n    iwBytesUsed.addAndGet(sortedValueRamUsage);\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    final int bufferedDocCount = pendingIndex;\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new Iterator<BytesRef>() {\n                                    int ordUpto;\n                                    BytesRef scratch = new BytesRef();\n\n                                    @Override\n                                    public boolean hasNext() {\n                                      return ordUpto < valueCount;\n                                    }\n\n                                    @Override\n                                    public void remove() {\n                                      throw new UnsupportedOperationException();\n                                    }\n\n                                    @Override\n                                    public BytesRef next() {\n                                      hash.get(sortedValues[ordUpto], scratch);\n                                      ordUpto++;\n                                      return scratch;\n                                    }\n                                  };\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new Iterator<Number>() {\n                                    int docUpto;\n\n                                    @Override\n                                    public boolean hasNext() {\n                                      return docUpto < maxDoc;\n                                    }\n\n                                    @Override\n                                    public void remove() {\n                                      throw new UnsupportedOperationException();\n                                    }\n\n                                    @Override\n                                    public Number next() {\n                                      int ord;\n                                      if (docUpto < bufferedDocCount) {\n                                        ord = pending[docUpto];\n                                      } else {\n                                        ord = emptyOrd;\n                                      }\n                                      docUpto++;\n                                      // nocommit make\n                                      // resuable Number?\n                                      return ordMap[ord];\n                                    }\n                                  };\n                                }\n                              });\n    \n    iwBytesUsed.addAndGet(-sortedValueRamUsage);\n    reset();\n  }\n\n","sourceOld":"  @Override\n  public void flush(SegmentWriteState state, SimpleDVConsumer dvConsumer) throws IOException {\n    final int maxDoc = state.segmentInfo.getDocCount();\n\n    final int emptyOrd;\n    if (pendingIndex < maxDoc) {\n      // Make sure we added EMPTY value before sorting:\n      int ord = hash.add(EMPTY);\n      if (ord < 0) {\n        emptyOrd = -ord-1;\n      } else {\n        emptyOrd = ord;\n      }\n    } else {\n      emptyOrd = -1;\n    }\n\n    final int valueCount = hash.size();\n\n    final int[] sortedValues = hash.sort(BytesRef.getUTF8SortedAsUnicodeComparator());\n    final int sortedValueRamUsage = RamUsageEstimator.NUM_BYTES_ARRAY_HEADER + RamUsageEstimator.NUM_BYTES_INT*valueCount;\n    iwBytesUsed.addAndGet(sortedValueRamUsage);\n    final int[] ordMap = new int[valueCount];\n\n    for(int ord=0;ord<valueCount;ord++) {\n      ordMap[sortedValues[ord]] = ord;\n    }\n\n    final int bufferedDocCount = pendingIndex;\n\n    dvConsumer.addSortedField(fieldInfo,\n\n                              // ord -> value\n                              new Iterable<BytesRef>() {\n                                @Override\n                                public Iterator<BytesRef> iterator() {\n                                  return new Iterator<BytesRef>() {\n                                    int ordUpto;\n                                    BytesRef scratch = new BytesRef();\n\n                                    @Override\n                                    public boolean hasNext() {\n                                      return ordUpto < valueCount;\n                                    }\n\n                                    @Override\n                                    public void remove() {\n                                      throw new UnsupportedOperationException();\n                                    }\n\n                                    @Override\n                                    public BytesRef next() {\n                                      hash.get(sortedValues[ordUpto], scratch);\n                                      ordUpto++;\n                                      return scratch;\n                                    }\n                                  };\n                                }\n                              },\n\n                              // doc -> ord\n                              new Iterable<Number>() {\n                                @Override\n                                public Iterator<Number> iterator() {\n                                  return new Iterator<Number>() {\n                                    int docUpto;\n\n                                    @Override\n                                    public boolean hasNext() {\n                                      return docUpto < maxDoc;\n                                    }\n\n                                    @Override\n                                    public void remove() {\n                                      throw new UnsupportedOperationException();\n                                    }\n\n                                    @Override\n                                    public Number next() {\n                                      int ord;\n                                      if (docUpto < bufferedDocCount) {\n                                        ord = pending[docUpto];\n                                      } else {\n                                        ord = emptyOrd;\n                                      }\n                                      docUpto++;\n                                      // nocommit make\n                                      // resuable Number?\n                                      return ordMap[ord];\n                                    }\n                                  };\n                                }\n                              });\n    \n    iwBytesUsed.addAndGet(-sortedValueRamUsage);\n    reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["1ed9002c5afac843c7f2d04d88e74b40d627e1af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1ed9002c5afac843c7f2d04d88e74b40d627e1af":["127981e5a1e1d1425c5fdc816ceacf753ca70ee4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["127981e5a1e1d1425c5fdc816ceacf753ca70ee4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["1ed9002c5afac843c7f2d04d88e74b40d627e1af"],"1ed9002c5afac843c7f2d04d88e74b40d627e1af":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}