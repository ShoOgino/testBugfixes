{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoModelTest#testBasicRectangle().mjava","commits":[{"id":"f9f97ca977ad649f14b4f60a888adef2edd7a64e","date":1432702490,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoModelTest#testBasicRectangle().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicRectangle() {\n    final GeoBBox bbox = GeoBBoxFactory.makeGeoBBox(scaledModel, 1.0, 0.0, 0.0, 1.0);\n    final GeoPoint insidePoint = new GeoPoint(scaledModel, 0.5, 0.5);\n    assertTrue(bbox.isWithin(insidePoint));\n    final GeoPoint topOutsidePoint = new GeoPoint(scaledModel, 1.01, 0.5);\n    assertFalse(bbox.isWithin(topOutsidePoint));\n    final GeoPoint bottomOutsidePoint = new GeoPoint(scaledModel, -0.01, 0.5);\n    assertFalse(bbox.isWithin(bottomOutsidePoint));\n    final GeoPoint leftOutsidePoint = new GeoPoint(scaledModel, 0.5, -0.01);\n    assertFalse(bbox.isWithin(leftOutsidePoint));\n    final GeoPoint rightOutsidePoint = new GeoPoint(scaledModel, 0.5, 1.01);\n    assertFalse(bbox.isWithin(rightOutsidePoint));\n    final Bounds bounds = bbox.getBounds(null);\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(1.0, bounds.getMaxLatitude(), 0.00001);\n    assertEquals(0.0, bounds.getMinLatitude(), 0.00001);\n    assertEquals(1.0, bounds.getRightLongitude(), 0.00001);\n    assertEquals(0.0, bounds.getLeftLongitude(), 0.00001);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fec06d6753751ae302c7d35866763e6cb414112d","date":1433250698,"type":0,"author":"David Wayne Smiley","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoModelTest#testBasicRectangle().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBasicRectangle() {\n    final GeoBBox bbox = GeoBBoxFactory.makeGeoBBox(scaledModel, 1.0, 0.0, 0.0, 1.0);\n    final GeoPoint insidePoint = new GeoPoint(scaledModel, 0.5, 0.5);\n    assertTrue(bbox.isWithin(insidePoint));\n    final GeoPoint topOutsidePoint = new GeoPoint(scaledModel, 1.01, 0.5);\n    assertFalse(bbox.isWithin(topOutsidePoint));\n    final GeoPoint bottomOutsidePoint = new GeoPoint(scaledModel, -0.01, 0.5);\n    assertFalse(bbox.isWithin(bottomOutsidePoint));\n    final GeoPoint leftOutsidePoint = new GeoPoint(scaledModel, 0.5, -0.01);\n    assertFalse(bbox.isWithin(leftOutsidePoint));\n    final GeoPoint rightOutsidePoint = new GeoPoint(scaledModel, 0.5, 1.01);\n    assertFalse(bbox.isWithin(rightOutsidePoint));\n    final Bounds bounds = bbox.getBounds(null);\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(1.0, bounds.getMaxLatitude(), 0.00001);\n    assertEquals(0.0, bounds.getMinLatitude(), 0.00001);\n    assertEquals(1.0, bounds.getRightLongitude(), 0.00001);\n    assertEquals(0.0, bounds.getLeftLongitude(), 0.00001);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3022be5842502b7c2a57a5124199bbc30236f0a0","date":1436724252,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/GeoModelTest#testBasicRectangle().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/spatial4j/geo3d/GeoModelTest#testBasicRectangle().mjava","sourceNew":"  @Test\n  public void testBasicRectangle() {\n    final GeoBBox bbox = GeoBBoxFactory.makeGeoBBox(scaledModel, 1.0, 0.0, 0.0, 1.0);\n    final GeoPoint insidePoint = new GeoPoint(scaledModel, 0.5, 0.5);\n    assertTrue(bbox.isWithin(insidePoint));\n    final GeoPoint topOutsidePoint = new GeoPoint(scaledModel, 1.01, 0.5);\n    assertFalse(bbox.isWithin(topOutsidePoint));\n    final GeoPoint bottomOutsidePoint = new GeoPoint(scaledModel, -0.01, 0.5);\n    assertFalse(bbox.isWithin(bottomOutsidePoint));\n    final GeoPoint leftOutsidePoint = new GeoPoint(scaledModel, 0.5, -0.01);\n    assertFalse(bbox.isWithin(leftOutsidePoint));\n    final GeoPoint rightOutsidePoint = new GeoPoint(scaledModel, 0.5, 1.01);\n    assertFalse(bbox.isWithin(rightOutsidePoint));\n    final Bounds bounds = bbox.getBounds(null);\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(1.0, bounds.getMaxLatitude(), 0.00001);\n    assertEquals(0.0, bounds.getMinLatitude(), 0.00001);\n    assertEquals(1.0, bounds.getRightLongitude(), 0.00001);\n    assertEquals(0.0, bounds.getLeftLongitude(), 0.00001);\n  }\n\n","sourceOld":"  @Test\n  public void testBasicRectangle() {\n    final GeoBBox bbox = GeoBBoxFactory.makeGeoBBox(scaledModel, 1.0, 0.0, 0.0, 1.0);\n    final GeoPoint insidePoint = new GeoPoint(scaledModel, 0.5, 0.5);\n    assertTrue(bbox.isWithin(insidePoint));\n    final GeoPoint topOutsidePoint = new GeoPoint(scaledModel, 1.01, 0.5);\n    assertFalse(bbox.isWithin(topOutsidePoint));\n    final GeoPoint bottomOutsidePoint = new GeoPoint(scaledModel, -0.01, 0.5);\n    assertFalse(bbox.isWithin(bottomOutsidePoint));\n    final GeoPoint leftOutsidePoint = new GeoPoint(scaledModel, 0.5, -0.01);\n    assertFalse(bbox.isWithin(leftOutsidePoint));\n    final GeoPoint rightOutsidePoint = new GeoPoint(scaledModel, 0.5, 1.01);\n    assertFalse(bbox.isWithin(rightOutsidePoint));\n    final Bounds bounds = bbox.getBounds(null);\n    assertFalse(bounds.checkNoLongitudeBound());\n    assertFalse(bounds.checkNoTopLatitudeBound());\n    assertFalse(bounds.checkNoBottomLatitudeBound());\n    assertEquals(1.0, bounds.getMaxLatitude(), 0.00001);\n    assertEquals(0.0, bounds.getMinLatitude(), 0.00001);\n    assertEquals(1.0, bounds.getRightLongitude(), 0.00001);\n    assertEquals(0.0, bounds.getLeftLongitude(), 0.00001);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fec06d6753751ae302c7d35866763e6cb414112d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["fec06d6753751ae302c7d35866763e6cb414112d"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3022be5842502b7c2a57a5124199bbc30236f0a0"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fec06d6753751ae302c7d35866763e6cb414112d","f9f97ca977ad649f14b4f60a888adef2edd7a64e"],"fec06d6753751ae302c7d35866763e6cb414112d":["3022be5842502b7c2a57a5124199bbc30236f0a0"],"3022be5842502b7c2a57a5124199bbc30236f0a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9f97ca977ad649f14b4f60a888adef2edd7a64e":["fec06d6753751ae302c7d35866763e6cb414112d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}