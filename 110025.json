{"path":"lucene/classification/src/java/org/apache/lucene/classification/Classifier#train(AtomicReader,String,String,Analyzer,Query).mjava","commits":[{"id":"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e","date":1381993379,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/Classifier#train(AtomicReader,String,String,Analyzer,Query).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Train the classifier using the underlying Lucene index\n   * @param atomicReader the reader to use to access the Lucene index\n   * @param textFieldName the name of the field used to compare documents\n   * @param classFieldName the name of the field containing the class assigned to documents\n   * @param analyzer the analyzer used to tokenize / filter the unseen text\n   * @param query the query to filter which documents use for training\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer, Query query)\n      throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7533828cbcc5f498a44cca5d9bce92692663778","date":1408525002,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/Classifier#train(AtomicReader,String,String,Analyzer,Query).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/Classifier#train(AtomicReader,String,String,Analyzer,Query).mjava","sourceNew":"  /**\n   * Train the classifier using the underlying Lucene index\n   *\n   * @param atomicReader   the reader to use to access the Lucene index\n   * @param textFieldName  the name of the field used to compare documents\n   * @param classFieldName the name of the field containing the class assigned to documents\n   * @param analyzer       the analyzer used to tokenize / filter the unseen text\n   * @param query          the query to filter which documents use for training\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer, Query query)\n      throws IOException;\n\n","sourceOld":"  /**\n   * Train the classifier using the underlying Lucene index\n   * @param atomicReader the reader to use to access the Lucene index\n   * @param textFieldName the name of the field used to compare documents\n   * @param classFieldName the name of the field containing the class assigned to documents\n   * @param analyzer the analyzer used to tokenize / filter the unseen text\n   * @param query the query to filter which documents use for training\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer, Query query)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/Classifier#train(AtomicReader,String,String,Analyzer,Query).mjava","sourceNew":null,"sourceOld":"  /**\n   * Train the classifier using the underlying Lucene index\n   *\n   * @param atomicReader   the reader to use to access the Lucene index\n   * @param textFieldName  the name of the field used to compare documents\n   * @param classFieldName the name of the field containing the class assigned to documents\n   * @param analyzer       the analyzer used to tokenize / filter the unseen text\n   * @param query          the query to filter which documents use for training\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer, Query query)\n      throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7533828cbcc5f498a44cca5d9bce92692663778":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e7533828cbcc5f498a44cca5d9bce92692663778"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"e7533828cbcc5f498a44cca5d9bce92692663778":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["e7533828cbcc5f498a44cca5d9bce92692663778"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}