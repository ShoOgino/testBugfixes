{"path":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWCodec#files(SegmentInfo,Set[String]).mjava","commits":[{"id":"78977ccc47b451a8e645b77504e2ef0a05e4b1a3","date":1327846052,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWCodec#files(SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWCodec#files(Directory,SegmentInfo,Set[String]).mjava","sourceNew":"  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile() && LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {\n      // because we don't fully emulate 3.x codec, PreFlexRW actually writes 4.x format CFS files.\n      // so we must check segment version here to see if its a \"real\" 3.x segment or a \"fake\"\n      // one that we wrote with a 4.x-format CFS+CFE\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      String version = info.getVersion();\n      if (version != null && StringHelper.getVersionComparator().compare(\"4.0\", version) <= 0) {\n        files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n      }\n    } else {\n      super.files(info, files);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void files(Directory dir, SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile() && LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {\n      // because we don't fully emulate 3.x codec, PreFlexRW actually writes 4.x format CFS files.\n      // so we must check segment version here to see if its a \"real\" 3.x segment or a \"fake\"\n      // one that we wrote with a 4.x-format CFS+CFE\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      String version = info.getVersion();\n      if (version != null && StringHelper.getVersionComparator().compare(\"4.0\", version) <= 0) {\n        files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n      }\n    } else {\n      super.files(dir, info, files);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3","date":1327944832,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWCodec#files(SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWCodec#files(SegmentInfo,Set[String]).mjava","sourceNew":"  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile() && LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {\n      // because we don't fully emulate 3.x codec, PreFlexRW actually writes 4.x format CFS files.\n      // so we must check segment version here to see if its a \"real\" 3.x segment or a \"fake\"\n      // one that we wrote with a 4.x-format CFS+CFE, in this case we must add the .CFE\n      String version = info.getVersion();\n      if (version != null && StringHelper.getVersionComparator().compare(\"4.0\", version) <= 0) {\n        files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n      }\n    }\n    \n    super.files(info, files);\n  }\n\n","sourceOld":"  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile() && LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {\n      // because we don't fully emulate 3.x codec, PreFlexRW actually writes 4.x format CFS files.\n      // so we must check segment version here to see if its a \"real\" 3.x segment or a \"fake\"\n      // one that we wrote with a 4.x-format CFS+CFE\n      files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_EXTENSION));\n      String version = info.getVersion();\n      if (version != null && StringHelper.getVersionComparator().compare(\"4.0\", version) <= 0) {\n        files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n      }\n    } else {\n      super.files(info, files);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"296df632fd63421ea20756fa11ad36fbc6f4c8a9","date":1327957998,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWCodec#files(SegmentInfo,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile() && LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {\n      // because we don't fully emulate 3.x codec, PreFlexRW actually writes 4.x format CFS files.\n      // so we must check segment version here to see if its a \"real\" 3.x segment or a \"fake\"\n      // one that we wrote with a 4.x-format CFS+CFE, in this case we must add the .CFE\n      String version = info.getVersion();\n      if (version != null && StringHelper.getVersionComparator().compare(\"4.0\", version) <= 0) {\n        files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n      }\n    }\n    \n    super.files(info, files);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"410e066f093e407222d9681429d209084e783149","date":1327958394,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWCodec#files(SegmentInfo,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile() && LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {\n      // because we don't fully emulate 3.x codec, PreFlexRW actually writes 4.x format CFS files.\n      // so we must check segment version here to see if its a \"real\" 3.x segment or a \"fake\"\n      // one that we wrote with a 4.x-format CFS+CFE, in this case we must add the .CFE\n      String version = info.getVersion();\n      if (version != null && StringHelper.getVersionComparator().compare(\"4.0\", version) <= 0) {\n        files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n      }\n    }\n    \n    super.files(info, files);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e92a321a2612261e1010a4038c8586e30b081552","date":1328456689,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/codecs/lucene3x/PreFlexRWCodec#files(SegmentInfo,Set[String]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/codecs/preflexrw/PreFlexRWCodec#files(SegmentInfo,Set[String]).mjava","sourceNew":"  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile() && LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {\n      // because we don't fully emulate 3.x codec, PreFlexRW actually writes 4.x format CFS files.\n      // so we must check segment version here to see if its a \"real\" 3.x segment or a \"fake\"\n      // one that we wrote with a 4.x-format CFS+CFE, in this case we must add the .CFE\n      String version = info.getVersion();\n      if (version != null && StringHelper.getVersionComparator().compare(\"4.0\", version) <= 0) {\n        files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n      }\n    }\n    \n    super.files(info, files);\n  }\n\n","sourceOld":"  @Override\n  public void files(SegmentInfo info, Set<String> files) throws IOException {\n    if (info.getUseCompoundFile() && LuceneTestCase.PREFLEX_IMPERSONATION_IS_ACTIVE) {\n      // because we don't fully emulate 3.x codec, PreFlexRW actually writes 4.x format CFS files.\n      // so we must check segment version here to see if its a \"real\" 3.x segment or a \"fake\"\n      // one that we wrote with a 4.x-format CFS+CFE, in this case we must add the .CFE\n      String version = info.getVersion();\n      if (version != null && StringHelper.getVersionComparator().compare(\"4.0\", version) <= 0) {\n        files.add(IndexFileNames.segmentFileName(info.name, \"\", IndexFileNames.COMPOUND_FILE_ENTRIES_EXTENSION));\n      }\n    }\n    \n    super.files(info, files);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"410e066f093e407222d9681429d209084e783149":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78977ccc47b451a8e645b77504e2ef0a05e4b1a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3"],"e92a321a2612261e1010a4038c8586e30b081552":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e92a321a2612261e1010a4038c8586e30b081552"],"be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3":["78977ccc47b451a8e645b77504e2ef0a05e4b1a3"]},"commit2Childs":{"410e066f093e407222d9681429d209084e783149":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["410e066f093e407222d9681429d209084e783149","78977ccc47b451a8e645b77504e2ef0a05e4b1a3","296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"78977ccc47b451a8e645b77504e2ef0a05e4b1a3":["be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3"],"296df632fd63421ea20756fa11ad36fbc6f4c8a9":["410e066f093e407222d9681429d209084e783149","e92a321a2612261e1010a4038c8586e30b081552"],"e92a321a2612261e1010a4038c8586e30b081552":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"be9e3e7d2fc880996ffcfe9a8fc47057b647e9e3":["296df632fd63421ea20756fa11ad36fbc6f4c8a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["410e066f093e407222d9681429d209084e783149","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}