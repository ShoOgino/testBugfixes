{"path":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#close().mjava","commits":[{"id":"39d69912999d6e0acfb6eb6be558fcc165eee0b2","date":1308066875,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#close().mjava","pathOld":"/dev/null","sourceNew":"  /** NOTE: caller must separately close the writer. */\n  // @Override -- not until Java 1.6\n  public void close() throws IOException {\n    swapSearcher(null, indexingGen.getAndIncrement(), true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ed208afa1e7aa98899ddb1dedfddedddf898253","date":1308079587,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#close().mjava","pathOld":"/dev/null","sourceNew":"  /** NOTE: caller must separately close the writer. */\n  // @Override -- not until Java 1.6\n  public void close() throws IOException {\n    swapSearcher(null, indexingGen.getAndIncrement(), true);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9b7b579125f96af579b1c85930f519dee4f32c3","date":1309436076,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#close().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#close().mjava","sourceNew":"  /** NOTE: caller must separately close the writer. */\n  @Override\n  public void close() throws IOException {\n    swapSearcher(null, indexingGen.getAndIncrement(), true);\n  }\n\n","sourceOld":"  /** NOTE: caller must separately close the writer. */\n  // @Override -- not until Java 1.6\n  public void close() throws IOException {\n    swapSearcher(null, indexingGen.getAndIncrement(), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#close().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#close().mjava","sourceNew":"  /** NOTE: caller must separately close the writer. */\n  @Override\n  public void close() throws IOException {\n    swapSearcher(null, indexingGen.getAndIncrement(), true);\n  }\n\n","sourceOld":"  /** NOTE: caller must separately close the writer. */\n  // @Override -- not until Java 1.6\n  public void close() throws IOException {\n    swapSearcher(null, indexingGen.getAndIncrement(), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#close().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#close().mjava","sourceNew":"  /** NOTE: caller must separately close the writer. */\n  @Override\n  public void close() throws IOException {\n    swapSearcher(null, indexingGen.getAndIncrement(), true);\n  }\n\n","sourceOld":"  /** NOTE: caller must separately close the writer. */\n  // @Override -- not until Java 1.6\n  public void close() throws IOException {\n    swapSearcher(null, indexingGen.getAndIncrement(), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9","date":1316963893,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#close().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#close().mjava","sourceNew":"  /** Close this NRTManager to future searching.  Any\n   *  searches still in process in other threads won't be\n   *  affected, and they should still call {@link #release}\n   *  after they are done.\n   *\n   * <p><b>NOTE</b>: caller must separately close the writer. */\n  @Override\n  public void close() throws IOException {\n    swapSearcher(null, indexingGen.getAndIncrement(), true);\n  }\n\n","sourceOld":"  /** NOTE: caller must separately close the writer. */\n  @Override\n  public void close() throws IOException {\n    swapSearcher(null, indexingGen.getAndIncrement(), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"606baff722a317c76a92b111d183b54b6e6e5741","date":1317974711,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#close().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#close().mjava","sourceNew":"  /**\n   * Close this NRTManager to future searching. Any searches still in process in\n   * other threads won't be affected, and they should still call\n   * {@link SearcherManager#release(IndexSearcher)} after they are done.\n   * \n   * <p>\n   * <b>NOTE</b>: caller must separately close the writer.\n   */\n  public synchronized void close() throws IOException {\n    reopenLock.lock();\n    try {\n      IOUtils.close(withDeletes, withoutDeletes);\n      newGeneration.signalAll();\n    } finally {\n      reopenLock.unlock();\n    }\n  }\n\n","sourceOld":"  /** Close this NRTManager to future searching.  Any\n   *  searches still in process in other threads won't be\n   *  affected, and they should still call {@link #release}\n   *  after they are done.\n   *\n   * <p><b>NOTE</b>: caller must separately close the writer. */\n  @Override\n  public void close() throws IOException {\n    swapSearcher(null, indexingGen.getAndIncrement(), true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84d8c6d0287478d53558b573bf767214e0813c47","date":1320696863,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#close().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#close().mjava","sourceNew":"  /**\n   * Close this NRTManager to future searching. Any searches still in process in\n   * other threads won't be affected, and they should still call\n   * {@link SearcherManager#release(IndexSearcher)} after they are done.\n   * \n   * <p>\n   * <b>NOTE</b>: caller must separately close the writer.\n   */\n  public void close() throws IOException {\n    reopenLock.lock();\n    try {\n      try {\n        IOUtils.close(withDeletes, withoutDeletes);\n      } finally { // make sure we signal even if close throws an exception\n        newGeneration.signalAll();\n      }\n    } finally {\n      reopenLock.unlock();\n      assert withDeletes.generation == MAX_SEARCHER_GEN && withoutDeletes.generation == MAX_SEARCHER_GEN;\n    }\n  }\n\n","sourceOld":"  /**\n   * Close this NRTManager to future searching. Any searches still in process in\n   * other threads won't be affected, and they should still call\n   * {@link SearcherManager#release(IndexSearcher)} after they are done.\n   * \n   * <p>\n   * <b>NOTE</b>: caller must separately close the writer.\n   */\n  public synchronized void close() throws IOException {\n    reopenLock.lock();\n    try {\n      IOUtils.close(withDeletes, withoutDeletes);\n      newGeneration.signalAll();\n    } finally {\n      reopenLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df16fc2e9b615e0138edac46655ae628f5d098ad","date":1320876869,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NRTManager#close().mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/index/NRTManager#close().mjava","sourceNew":"  /**\n   * Close this NRTManager to future searching. Any searches still in process in\n   * other threads won't be affected, and they should still call\n   * {@link SearcherManager#release(IndexSearcher)} after they are done.\n   * \n   * <p>\n   * <b>NOTE</b>: caller must separately close the writer.\n   */\n  public void close() throws IOException {\n    reopenLock.lock();\n    try {\n      try {\n        IOUtils.close(withDeletes, withoutDeletes);\n      } finally { // make sure we signal even if close throws an exception\n        newGeneration.signalAll();\n      }\n    } finally {\n      reopenLock.unlock();\n      assert withDeletes.generation == MAX_SEARCHER_GEN && withoutDeletes.generation == MAX_SEARCHER_GEN;\n    }\n  }\n\n","sourceOld":"  /**\n   * Close this NRTManager to future searching. Any searches still in process in\n   * other threads won't be affected, and they should still call\n   * {@link SearcherManager#release(IndexSearcher)} after they are done.\n   * \n   * <p>\n   * <b>NOTE</b>: caller must separately close the writer.\n   */\n  public void close() throws IOException {\n    reopenLock.lock();\n    try {\n      try {\n        IOUtils.close(withDeletes, withoutDeletes);\n      } finally { // make sure we signal even if close throws an exception\n        newGeneration.signalAll();\n      }\n    } finally {\n      reopenLock.unlock();\n      assert withDeletes.generation == MAX_SEARCHER_GEN && withoutDeletes.generation == MAX_SEARCHER_GEN;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d9b7b579125f96af579b1c85930f519dee4f32c3":["39d69912999d6e0acfb6eb6be558fcc165eee0b2"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["84d8c6d0287478d53558b573bf767214e0813c47"],"39d69912999d6e0acfb6eb6be558fcc165eee0b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["d9b7b579125f96af579b1c85930f519dee4f32c3"],"606baff722a317c76a92b111d183b54b6e6e5741":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9"],"84d8c6d0287478d53558b573bf767214e0813c47":["606baff722a317c76a92b111d183b54b6e6e5741"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["39d69912999d6e0acfb6eb6be558fcc165eee0b2","d9b7b579125f96af579b1c85930f519dee4f32c3"],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","39d69912999d6e0acfb6eb6be558fcc165eee0b2"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["9ed208afa1e7aa98899ddb1dedfddedddf898253","d9b7b579125f96af579b1c85930f519dee4f32c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df16fc2e9b615e0138edac46655ae628f5d098ad"]},"commit2Childs":{"d9b7b579125f96af579b1c85930f519dee4f32c3":["edcc2c2cbab6bf89ea584169ffb3ca83a31827f9","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"df16fc2e9b615e0138edac46655ae628f5d098ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"39d69912999d6e0acfb6eb6be558fcc165eee0b2":["d9b7b579125f96af579b1c85930f519dee4f32c3","d083e83f225b11e5fdd900e83d26ddb385b6955c","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39d69912999d6e0acfb6eb6be558fcc165eee0b2","9ed208afa1e7aa98899ddb1dedfddedddf898253"],"edcc2c2cbab6bf89ea584169ffb3ca83a31827f9":["606baff722a317c76a92b111d183b54b6e6e5741"],"606baff722a317c76a92b111d183b54b6e6e5741":["84d8c6d0287478d53558b573bf767214e0813c47"],"84d8c6d0287478d53558b573bf767214e0813c47":["df16fc2e9b615e0138edac46655ae628f5d098ad"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"9ed208afa1e7aa98899ddb1dedfddedddf898253":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}