{"path":"lucene/test-framework/src/java/org/apache/lucene/search/BaseExplanationTestCase#snear(SpanQuery,SpanQuery,SpanQuery,int,boolean).mjava","commits":[{"id":"40ed2b673f6264a3f84e2f3925b529283f2eb096","date":1415102987,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseExplanationTestCase#snear(SpanQuery,SpanQuery,SpanQuery,int,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestExplanations#snear(SpanQuery,SpanQuery,SpanQuery,int,boolean).mjava","sourceNew":"  /** MACRO for SpanNearQuery containing three SpanQueries */\n  public SpanNearQuery snear(SpanQuery s, SpanQuery m, SpanQuery e,\n                             int slop, boolean inOrder) {\n    return new SpanNearQuery(new SpanQuery[] { s, m, e }, slop, inOrder);\n  }\n\n","sourceOld":"  /** MACRO for SpanNearQuery containing three SpanQueries */\n  public SpanNearQuery snear(SpanQuery s, SpanQuery m, SpanQuery e,\n                             int slop, boolean inOrder) {\n    return new SpanNearQuery(new SpanQuery[] { s, m, e }, slop, inOrder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/BaseExplanationTestCase#snear(SpanQuery,SpanQuery,SpanQuery,int,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/BaseExplanationTestCase#snear(SpanQuery,SpanQuery,SpanQuery,int,boolean).mjava","sourceNew":"  /** MACRO for SpanNearQuery containing three SpanQueries */\n  public SpanQuery snear(SpanQuery s, SpanQuery m, SpanQuery e, int slop, boolean inOrder) {\n    if (inOrder) {\n      return spanNearOrderedQuery(slop, s, m, e);\n    } else {\n      return spanNearUnorderedQuery(slop, s, m, e);\n    }\n  }\n\n","sourceOld":"  /** MACRO for SpanNearQuery containing three SpanQueries */\n  public SpanNearQuery snear(SpanQuery s, SpanQuery m, SpanQuery e,\n                             int slop, boolean inOrder) {\n    return new SpanNearQuery(new SpanQuery[] { s, m, e }, slop, inOrder);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["40ed2b673f6264a3f84e2f3925b529283f2eb096"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"40ed2b673f6264a3f84e2f3925b529283f2eb096":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"]},"commit2Childs":{"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40ed2b673f6264a3f84e2f3925b529283f2eb096"],"40ed2b673f6264a3f84e2f3925b529283f2eb096":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}