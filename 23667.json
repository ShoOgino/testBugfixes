{"path":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null || perReaderTermState.topReaderContext != context) {\n      // make TermQuery single-pass if we don't have a PRTS or if the context differs!\n      termState = TermContext.build(context, term, true); // cache term lookups!\n    } else {\n     // PRTS was pre-build for this IS\n     termState = this.perReaderTermState;\n    }\n\n    // we must not ignore the given docFreq - if set use the given value (lie)\n    if (docFreq != -1)\n      termState.setDocFreq(docFreq);\n    \n    return new TermWeight(searcher, termState);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null || perReaderTermState.topReaderContext != context) {\n      // make TermQuery single-pass if we don't have a PRTS or if the context differs!\n      termState = TermContext.build(context, term, true); // cache term lookups!\n    } else {\n     // PRTS was pre-build for this IS\n     termState = this.perReaderTermState;\n    }\n\n    // we must not ignore the given docFreq - if set use the given value (lie)\n    if (docFreq != -1)\n      termState.setDocFreq(docFreq);\n    \n    return new TermWeight(searcher, termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null || perReaderTermState.topReaderContext != context) {\n      // make TermQuery single-pass if we don't have a PRTS or if the context differs!\n      termState = TermContext.build(context, term);\n    } else {\n     // PRTS was pre-build for this IS\n     termState = this.perReaderTermState;\n    }\n\n    // we must not ignore the given docFreq - if set use the given value (lie)\n    if (docFreq != -1)\n      termState.setDocFreq(docFreq);\n    \n    return new TermWeight(searcher, termState);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null || perReaderTermState.topReaderContext != context) {\n      // make TermQuery single-pass if we don't have a PRTS or if the context differs!\n      termState = TermContext.build(context, term, true); // cache term lookups!\n    } else {\n     // PRTS was pre-build for this IS\n     termState = this.perReaderTermState;\n    }\n\n    // we must not ignore the given docFreq - if set use the given value (lie)\n    if (docFreq != -1)\n      termState.setDocFreq(docFreq);\n    \n    return new TermWeight(searcher, termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null || perReaderTermState.topReaderContext != context) {\n      // make TermQuery single-pass if we don't have a PRTS or if the context differs!\n      termState = TermContext.build(context, term);\n    } else {\n     // PRTS was pre-build for this IS\n     termState = this.perReaderTermState;\n    }\n\n    // we must not ignore the given docFreq - if set use the given value (lie)\n    if (docFreq != -1)\n      termState.setDocFreq(docFreq);\n    \n    return new TermWeight(searcher, termState);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null || perReaderTermState.topReaderContext != context) {\n      // make TermQuery single-pass if we don't have a PRTS or if the context differs!\n      termState = TermContext.build(context, term, true); // cache term lookups!\n    } else {\n     // PRTS was pre-build for this IS\n     termState = this.perReaderTermState;\n    }\n\n    // we must not ignore the given docFreq - if set use the given value (lie)\n    if (docFreq != -1)\n      termState.setDocFreq(docFreq);\n    \n    return new TermWeight(searcher, termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null\n        || perReaderTermState.topReaderContext != context) {\n      // make TermQuery single-pass if we don't have a PRTS or if the context\n      // differs!\n      termState = TermContext.build(context, term);\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n    \n    // we must not ignore the given docFreq - if set use the given value (lie)\n    if (docFreq != -1) termState.setDocFreq(docFreq);\n    \n    return new TermWeight(searcher, termState);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null || perReaderTermState.topReaderContext != context) {\n      // make TermQuery single-pass if we don't have a PRTS or if the context differs!\n      termState = TermContext.build(context, term);\n    } else {\n     // PRTS was pre-build for this IS\n     termState = this.perReaderTermState;\n    }\n\n    // we must not ignore the given docFreq - if set use the given value (lie)\n    if (docFreq != -1)\n      termState.setDocFreq(docFreq);\n    \n    return new TermWeight(searcher, termState);\n  }\n\n","bugFix":null,"bugIntro":["365f98746545c0785c9778597f8558f5f91db4ad","365f98746545c0785c9778597f8558f5f91db4ad"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TermQuery#createWeight(IndexSearcher).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null\n        || perReaderTermState.topReaderContext != context) {\n      // make TermQuery single-pass if we don't have a PRTS or if the context\n      // differs!\n      termState = TermContext.build(context, term);\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n    \n    // we must not ignore the given docFreq - if set use the given value (lie)\n    if (docFreq != -1) termState.setDocFreq(docFreq);\n    \n    return new TermWeight(searcher, needsScores, termState);\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher) throws IOException {\n    final IndexReaderContext context = searcher.getTopReaderContext();\n    final TermContext termState;\n    if (perReaderTermState == null\n        || perReaderTermState.topReaderContext != context) {\n      // make TermQuery single-pass if we don't have a PRTS or if the context\n      // differs!\n      termState = TermContext.build(context, term);\n    } else {\n      // PRTS was pre-build for this IS\n      termState = this.perReaderTermState;\n    }\n    \n    // we must not ignore the given docFreq - if set use the given value (lie)\n    if (docFreq != -1) termState.setDocFreq(docFreq);\n    \n    return new TermWeight(searcher, termState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["51f5280f31484820499077f41fcdfe92d527d9dc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"51f5280f31484820499077f41fcdfe92d527d9dc":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb17639909a369c1e64866842e5c213440acc17e"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"51f5280f31484820499077f41fcdfe92d527d9dc":["fb17639909a369c1e64866842e5c213440acc17e"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["51f5280f31484820499077f41fcdfe92d527d9dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}