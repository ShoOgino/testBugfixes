{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","commits":[{"id":"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1","date":1310612214,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source;\n      try {\n        source = this.analyzer.reusableTokenStream(field, new StringReader(text));\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source;\n      try {\n        source = this.analyzer.reusableTokenStream(field, new StringReader(text));\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25","date":1315500470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node.getParent() instanceof RangeQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source;\n      try {\n        source = this.analyzer.reusableTokenStream(field, new StringReader(text));\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node instanceof ParametricQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source;\n      try {\n        source = this.analyzer.reusableTokenStream(field, new StringReader(text));\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69e043c521d4e8db770cc140c63f5ef51f03426a","date":1317187614,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node.getParent() instanceof RangeQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source;\n      try {\n        source = this.analyzer.tokenStream(field, new StringReader(text));\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node.getParent() instanceof RangeQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source;\n      try {\n        source = this.analyzer.reusableTokenStream(field, new StringReader(text));\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e5dc366a7d1607715cc8f08fda777417daef8569","date":1320016490,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node.getParent() instanceof RangeQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source;\n      try {\n        source = this.analyzer.tokenStream(field, new StringReader(text));\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          return new GroupQueryNode(\n            new StandardBooleanQueryNode(children, positionCount==1));\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node.getParent() instanceof RangeQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source;\n      try {\n        source = this.analyzer.tokenStream(field, new StringReader(text));\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          if (positionCount == 1)\n            return new GroupQueryNode(\n              new StandardBooleanQueryNode(children, true));\n          else\n            return new StandardBooleanQueryNode(children, false);\n\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":["8d78f014fded44fbde905f4f84cdc21907b371e8","b955a87bc7c5daeda1ed56821ec0bec2e8789e44","55f0d8e9a3f2e45eeea14a4803eaac02a0865097"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/AnalyzerQueryNodeProcessor#postProcessNode(QueryNode).mjava","sourceNew":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node.getParent() instanceof RangeQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source;\n      try {\n        source = this.analyzer.tokenStream(field, new StringReader(text));\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          return new GroupQueryNode(\n            new StandardBooleanQueryNode(children, positionCount==1));\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","sourceOld":"  @Override\n  protected QueryNode postProcessNode(QueryNode node) throws QueryNodeException {\n\n    if (node instanceof TextableQueryNode\n        && !(node instanceof WildcardQueryNode)\n        && !(node instanceof FuzzyQueryNode)\n        && !(node.getParent() instanceof RangeQueryNode)) {\n\n      FieldQueryNode fieldNode = ((FieldQueryNode) node);\n      String text = fieldNode.getTextAsString();\n      String field = fieldNode.getFieldAsString();\n\n      TokenStream source;\n      try {\n        source = this.analyzer.tokenStream(field, new StringReader(text));\n        source.reset();\n      } catch (IOException e1) {\n        throw new RuntimeException(e1);\n      }\n      CachingTokenFilter buffer = new CachingTokenFilter(source);\n\n      PositionIncrementAttribute posIncrAtt = null;\n      int numTokens = 0;\n      int positionCount = 0;\n      boolean severalTokensAtSamePosition = false;\n\n      if (buffer.hasAttribute(PositionIncrementAttribute.class)) {\n        posIncrAtt = buffer.getAttribute(PositionIncrementAttribute.class);\n      }\n\n      try {\n\n        while (buffer.incrementToken()) {\n          numTokens++;\n          int positionIncrement = (posIncrAtt != null) ? posIncrAtt\n              .getPositionIncrement() : 1;\n          if (positionIncrement != 0) {\n            positionCount += positionIncrement;\n\n          } else {\n            severalTokensAtSamePosition = true;\n          }\n\n        }\n\n      } catch (IOException e) {\n        // ignore\n      }\n\n      try {\n        // rewind the buffer stream\n        buffer.reset();\n\n        // close original stream - all tokens buffered\n        source.close();\n      } catch (IOException e) {\n        // ignore\n      }\n\n      if (!buffer.hasAttribute(CharTermAttribute.class)) {\n        return new NoTokenFoundQueryNode();\n      }\n\n      CharTermAttribute termAtt = buffer.getAttribute(CharTermAttribute.class);\n\n      if (numTokens == 0) {\n        return new NoTokenFoundQueryNode();\n\n      } else if (numTokens == 1) {\n        String term = null;\n        try {\n          boolean hasNext;\n          hasNext = buffer.incrementToken();\n          assert hasNext == true;\n          term = termAtt.toString();\n\n        } catch (IOException e) {\n          // safe to ignore, because we know the number of tokens\n        }\n\n        fieldNode.setText(term);\n\n        return fieldNode;\n\n      } else if (severalTokensAtSamePosition || !(node instanceof QuotedFieldQueryNode)) {\n        if (positionCount == 1 || !(node instanceof QuotedFieldQueryNode)) {\n          // no phrase query:\n          LinkedList<QueryNode> children = new LinkedList<QueryNode>();\n\n          for (int i = 0; i < numTokens; i++) {\n            String term = null;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            children.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n          return new GroupQueryNode(\n            new StandardBooleanQueryNode(children, positionCount==1));\n        } else {\n          // phrase query:\n          MultiPhraseQueryNode mpq = new MultiPhraseQueryNode();\n\n          List<FieldQueryNode> multiTerms = new ArrayList<FieldQueryNode>();\n          int position = -1;\n          int i = 0;\n          int termGroupCount = 0;\n          for (; i < numTokens; i++) {\n            String term = null;\n            int positionIncrement = 1;\n            try {\n              boolean hasNext = buffer.incrementToken();\n              assert hasNext == true;\n              term = termAtt.toString();\n              if (posIncrAtt != null) {\n                positionIncrement = posIncrAtt.getPositionIncrement();\n              }\n\n            } catch (IOException e) {\n              // safe to ignore, because we know the number of tokens\n            }\n\n            if (positionIncrement > 0 && multiTerms.size() > 0) {\n\n              for (FieldQueryNode termNode : multiTerms) {\n\n                if (this.positionIncrementsEnabled) {\n                  termNode.setPositionIncrement(position);\n                } else {\n                  termNode.setPositionIncrement(termGroupCount);\n                }\n\n                mpq.add(termNode);\n\n              }\n\n              // Only increment once for each \"group\" of\n              // terms that were in the same position:\n              termGroupCount++;\n\n              multiTerms.clear();\n\n            }\n\n            position += positionIncrement;\n            multiTerms.add(new FieldQueryNode(field, term, -1, -1));\n\n          }\n\n          for (FieldQueryNode termNode : multiTerms) {\n\n            if (this.positionIncrementsEnabled) {\n              termNode.setPositionIncrement(position);\n\n            } else {\n              termNode.setPositionIncrement(termGroupCount);\n            }\n\n            mpq.add(termNode);\n\n          }\n\n          return mpq;\n\n        }\n\n      } else {\n\n        TokenizedPhraseQueryNode pq = new TokenizedPhraseQueryNode();\n\n        int position = -1;\n\n        for (int i = 0; i < numTokens; i++) {\n          String term = null;\n          int positionIncrement = 1;\n\n          try {\n            boolean hasNext = buffer.incrementToken();\n            assert hasNext == true;\n            term = termAtt.toString();\n\n            if (posIncrAtt != null) {\n              positionIncrement = posIncrAtt.getPositionIncrement();\n            }\n\n          } catch (IOException e) {\n            // safe to ignore, because we know the number of tokens\n          }\n\n          FieldQueryNode newFieldNode = new FieldQueryNode(field, term, -1, -1);\n\n          if (this.positionIncrementsEnabled) {\n            position += positionIncrement;\n            newFieldNode.setPositionIncrement(position);\n\n          } else {\n            newFieldNode.setPositionIncrement(i);\n          }\n\n          pq.add(newFieldNode);\n\n        }\n\n        return pq;\n\n      }\n\n    }\n\n    return node;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e5dc366a7d1607715cc8f08fda777417daef8569"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e5dc366a7d1607715cc8f08fda777417daef8569":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1":["aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cf7d991c51b580d4b7bf2ad583dba058c0a2dd1"],"e5dc366a7d1607715cc8f08fda777417daef8569":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"aff8a13a1bad7d9e3a7180e3f64825fa93b1ed25":["69e043c521d4e8db770cc140c63f5ef51f03426a"],"69e043c521d4e8db770cc140c63f5ef51f03426a":["e5dc366a7d1607715cc8f08fda777417daef8569"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}