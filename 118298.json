{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","pathOld":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","sourceNew":"  protected Field[] getFields( IndexReader reader, int docId, String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    Document doc = reader.document( docId, new MapFieldSelector( new String[]{ fieldName } ) );\n    return doc.getFields( fieldName ); // according to Document class javadoc, this never returns null\n  }\n\n","sourceOld":"  protected Field[] getFields( IndexReader reader, int docId, String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    Document doc = reader.document( docId, new MapFieldSelector( new String[]{ fieldName } ) );\n    return doc.getFields( fieldName ); // according to Document class javadoc, this never returns null\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","sourceNew":"  protected Field[] getFields( IndexReader reader, int docId, String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    Document doc = reader.document( docId, new MapFieldSelector(fieldName) );\n    return doc.getFields( fieldName ); // according to Document class javadoc, this never returns null\n  }\n\n","sourceOld":"  protected Field[] getFields( IndexReader reader, int docId, String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    Document doc = reader.document( docId, new MapFieldSelector( new String[]{ fieldName } ) );\n    return doc.getFields( fieldName ); // according to Document class javadoc, this never returns null\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","sourceNew":"  protected Field[] getFields( IndexReader reader, int docId, String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    Document doc = reader.document( docId, new MapFieldSelector(fieldName) );\n    return doc.getFields( fieldName ); // according to Document class javadoc, this never returns null\n  }\n\n","sourceOld":"  protected Field[] getFields( IndexReader reader, int docId, String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    Document doc = reader.document( docId, new MapFieldSelector( new String[]{ fieldName } ) );\n    return doc.getFields( fieldName ); // according to Document class javadoc, this never returns null\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","sourceNew":"  protected Field[] getFields( IndexReader reader, int docId, String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    Document doc = reader.document( docId, new MapFieldSelector(fieldName) );\n    return doc.getFields( fieldName ); // according to Document class javadoc, this never returns null\n  }\n\n","sourceOld":"  protected Field[] getFields( IndexReader reader, int docId, String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    Document doc = reader.document( docId, new MapFieldSelector( new String[]{ fieldName } ) );\n    return doc.getFields( fieldName ); // according to Document class javadoc, this never returns null\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","sourceNew":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        @Override\n        public boolean stringField(FieldInfo fieldInfo, IndexInput in, int numUTF8Bytes) throws IOException {\n          if (fieldInfo.name.equals(fieldName)) {\n            final byte[] b = new byte[numUTF8Bytes];\n            in.readBytes(b, 0, b.length);\n            FieldType ft = new FieldType(TextField.TYPE_STORED);\n            ft.setStoreTermVectors(fieldInfo.storeTermVector);\n            ft.setStoreTermVectorOffsets(fieldInfo.storeOffsetWithTermVector);\n            ft.setStoreTermVectorPositions(fieldInfo.storePositionWithTermVector);\n            fields.add(new Field(fieldInfo.name, ft, new String(b, \"UTF-8\")));\n          } else {\n            in.seek(in.getFilePointer() + numUTF8Bytes);\n          }\n          return false;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","sourceOld":"  protected Field[] getFields( IndexReader reader, int docId, String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    Document doc = reader.document( docId, new MapFieldSelector(fieldName) );\n    return doc.getFields( fieldName ); // according to Document class javadoc, this never returns null\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","sourceNew":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        @Override\n        public boolean stringField(FieldInfo fieldInfo, IndexInput in, int numUTF8Bytes) throws IOException {\n          if (fieldInfo.name.equals(fieldName)) {\n            final byte[] b = new byte[numUTF8Bytes];\n            in.readBytes(b, 0, b.length);\n            FieldType ft = new FieldType(TextField.TYPE_STORED);\n            ft.setStoreTermVectors(fieldInfo.storeTermVector);\n            ft.setStoreTermVectorOffsets(fieldInfo.storeOffsetWithTermVector);\n            ft.setStoreTermVectorPositions(fieldInfo.storePositionWithTermVector);\n            fields.add(new Field(fieldInfo.name, new String(b, \"UTF-8\"), ft));\n          } else {\n            in.seek(in.getFilePointer() + numUTF8Bytes);\n          }\n          return false;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","sourceOld":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        @Override\n        public boolean stringField(FieldInfo fieldInfo, IndexInput in, int numUTF8Bytes) throws IOException {\n          if (fieldInfo.name.equals(fieldName)) {\n            final byte[] b = new byte[numUTF8Bytes];\n            in.readBytes(b, 0, b.length);\n            FieldType ft = new FieldType(TextField.TYPE_STORED);\n            ft.setStoreTermVectors(fieldInfo.storeTermVector);\n            ft.setStoreTermVectorOffsets(fieldInfo.storeOffsetWithTermVector);\n            ft.setStoreTermVectorPositions(fieldInfo.storePositionWithTermVector);\n            fields.add(new Field(fieldInfo.name, ft, new String(b, \"UTF-8\")));\n          } else {\n            in.seek(in.getFilePointer() + numUTF8Bytes);\n          }\n          return false;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","sourceNew":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.storeTermVector);\n          ft.setStoreTermVectorOffsets(fieldInfo.storeOffsetWithTermVector);\n          ft.setStoreTermVectorPositions(fieldInfo.storePositionWithTermVector);\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","sourceOld":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        @Override\n        public boolean stringField(FieldInfo fieldInfo, IndexInput in, int numUTF8Bytes) throws IOException {\n          if (fieldInfo.name.equals(fieldName)) {\n            final byte[] b = new byte[numUTF8Bytes];\n            in.readBytes(b, 0, b.length);\n            FieldType ft = new FieldType(TextField.TYPE_STORED);\n            ft.setStoreTermVectors(fieldInfo.storeTermVector);\n            ft.setStoreTermVectorOffsets(fieldInfo.storeOffsetWithTermVector);\n            ft.setStoreTermVectorPositions(fieldInfo.storePositionWithTermVector);\n            fields.add(new Field(fieldInfo.name, new String(b, \"UTF-8\"), ft));\n          } else {\n            in.seek(in.getFilePointer() + numUTF8Bytes);\n          }\n          return false;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06","date":1326148180,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","sourceNew":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.storeTermVector);\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","sourceOld":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.storeTermVector);\n          ft.setStoreTermVectorOffsets(fieldInfo.storeOffsetWithTermVector);\n          ft.setStoreTermVectorPositions(fieldInfo.storePositionWithTermVector);\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/BaseFragmentsBuilder#getFields(IndexReader,int,String).mjava","sourceNew":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.storeTermVector);\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","sourceOld":"  protected Field[] getFields( IndexReader reader, int docId, final String fieldName) throws IOException {\n    // according to javadoc, doc.getFields(fieldName) cannot be used with lazy loaded field???\n    final List<Field> fields = new ArrayList<Field>();\n    reader.document(docId, new StoredFieldVisitor() {\n        \n        @Override\n        public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n          FieldType ft = new FieldType(TextField.TYPE_STORED);\n          ft.setStoreTermVectors(fieldInfo.storeTermVector);\n          fields.add(new Field(fieldInfo.name, value, ft));\n        }\n\n        @Override\n        public Status needsField(FieldInfo fieldInfo) throws IOException {\n          return fieldInfo.name.equals(fieldName) ? Status.YES : Status.NO;\n        }\n      });\n    return fields.toArray(new Field[fields.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"06584e6e98d592b34e1329b384182f368d2025e8":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["06584e6e98d592b34e1329b384182f368d2025e8"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"06584e6e98d592b34e1329b384182f368d2025e8":["3321cfbf7f8aba27e37e7a4d6901531a97ac2b06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"3321cfbf7f8aba27e37e7a4d6901531a97ac2b06":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["06584e6e98d592b34e1329b384182f368d2025e8"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1509f151d7692d84fae414b2b799ac06ba60fcb4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}