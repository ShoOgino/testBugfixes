{"path":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer();\n    }\n    return name;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":null,"sourceOld":"  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer();\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer();\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer();\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"/dev/null","sourceNew":"  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer();\n    }\n    return name;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8791e05c7282d372fc82da64046329f3221e48c6","date":1282142333,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer();\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer();\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer();\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":["ef7724982540101e7fe429e8eb67b97f3dcac862","ef7724982540101e7fe429e8eb67b97f3dcac862","ef7724982540101e7fe429e8eb67b97f3dcac862"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer();\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer();\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","sourceOld":"  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker#init(NamedList,SolrCore).mjava","sourceNew":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","sourceOld":"  @Override\n  public String init(NamedList config, SolrCore core) {\n    super.init(config, core);\n    indexDir = (String) config.get(INDEX_DIR);\n    String accuracy = (String) config.get(ACCURACY);\n    //If indexDir is relative then create index inside core.getDataDir()\n    if (indexDir != null)   {\n      if (!new File(indexDir).isAbsolute()) {\n        indexDir = core.getDataDir() + File.separator + indexDir;\n      }\n    }\n    sourceLocation = (String) config.get(LOCATION);\n    String compClass = (String) config.get(COMPARATOR_CLASS);\n    Comparator<SuggestWord> comp = null;\n    if (compClass != null){\n      if (compClass.equalsIgnoreCase(SCORE_COMP)){\n        comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n      } else if (compClass.equalsIgnoreCase(FREQ_COMP)){\n        comp = new SuggestWordFrequencyComparator();\n      } else{//must be a FQCN\n        comp = (Comparator<SuggestWord>) core.getResourceLoader().newInstance(compClass);\n      }\n    } else {\n      comp = SuggestWordQueue.DEFAULT_COMPARATOR;\n    }\n    field = (String) config.get(FIELD);\n    String strDistanceName = (String)config.get(STRING_DISTANCE);\n    if (strDistanceName != null) {\n      sd = (StringDistance) core.getResourceLoader().newInstance(strDistanceName);\n      //TODO: Figure out how to configure options.  Where's Spring when you need it?  Or at least BeanUtils...\n    } else {\n      sd = new LevensteinDistance();\n    }\n    try {\n      initIndex();\n      spellChecker = new SpellChecker(index, sd, comp);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    if (accuracy != null) {\n      try {\n        this.accuracy = Float.parseFloat(accuracy);\n        spellChecker.setAccuracy(this.accuracy);\n      } catch (NumberFormatException e) {\n        throw new RuntimeException(\n                \"Unparseable accuracy given for dictionary: \" + name, e);\n      }\n    }\n    if (field != null && core.getSchema().getFieldTypeNoEx(field) != null)  {\n      analyzer = core.getSchema().getFieldType(field).getQueryAnalyzer();\n    }\n    fieldTypeName = (String) config.get(FIELD_TYPE);\n    if (core.getSchema().getFieldTypes().containsKey(fieldTypeName))  {\n      FieldType fieldType = core.getSchema().getFieldTypes().get(fieldTypeName);\n      analyzer = fieldType.getQueryAnalyzer();\n    }\n    if (analyzer == null)   {\n      log.info(\"Using WhitespaceAnalzyer for dictionary: \" + name);\n      analyzer = new WhitespaceAnalyzer(core.getSolrConfig().luceneMatchVersion);\n    }\n    return name;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"8791e05c7282d372fc82da64046329f3221e48c6":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"3bb13258feba31ab676502787ab2e1779f129b7a":["8791e05c7282d372fc82da64046329f3221e48c6","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["8791e05c7282d372fc82da64046329f3221e48c6"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"8791e05c7282d372fc82da64046329f3221e48c6":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1da8d55113b689b06716246649de6f62430f15c0":["8791e05c7282d372fc82da64046329f3221e48c6","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}