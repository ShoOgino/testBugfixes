{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetrics(MetricRegistry,Collection[String],boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","commits":[{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetrics(MetricRegistry,Collection[String],boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert selected metrics from a registry into maps (when <code>compact==false</code>) or\n   * flattened objects.\n   * @param registry registry\n   * @param names metric names\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertMetrics(MetricRegistry registry, Collection<String> names,\n                                    boolean skipHistograms, boolean skipAggregateValues,\n                                    boolean compact, boolean simple,\n                                    BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    names.stream()\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d6879a535f14bc53be7c86de58142558c4f9eee","date":1492512399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetrics(MetricRegistry,Collection[String],boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetrics(MetricRegistry,Collection[String],boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert selected metrics from a registry into maps (when <code>compact==false</code>) or\n   * flattened objects.\n   * @param registry registry\n   * @param names metric names\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertMetrics(MetricRegistry registry, Collection<String> names,\n                                    boolean skipHistograms, boolean skipAggregateValues,\n                                    boolean compact, boolean simple,\n                                    BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    names.stream()\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, PropertyFilter.ALL, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n\n","sourceOld":"  /**\n   * Convert selected metrics from a registry into maps (when <code>compact==false</code>) or\n   * flattened objects.\n   * @param registry registry\n   * @param names metric names\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertMetrics(MetricRegistry registry, Collection<String> names,\n                                    boolean skipHistograms, boolean skipAggregateValues,\n                                    boolean compact, boolean simple,\n                                    BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    names.stream()\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetrics(MetricRegistry,Collection[String],boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Convert selected metrics from a registry into maps (when <code>compact==false</code>) or\n   * flattened objects.\n   * @param registry registry\n   * @param names metric names\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertMetrics(MetricRegistry registry, Collection<String> names,\n                                    boolean skipHistograms, boolean skipAggregateValues,\n                                    boolean compact, boolean simple,\n                                    BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    names.stream()\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, PropertyFilter.ALL, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e75e40c2252a5624016ad28ba7e8d3354c4d9c86","date":1502965942,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetrics(MetricRegistry,Collection[String],boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetrics(MetricRegistry,Collection[String],boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert selected metrics from a registry into maps (when <code>compact==false</code>) or\n   * flattened objects.\n   * @param registry registry\n   * @param names metric names\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertMetrics(MetricRegistry registry, Collection<String> names,\n                                    boolean skipHistograms, boolean skipAggregateValues,\n                                    boolean compact, boolean simple,\n                                    BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    names.stream()\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, PropertyFilter.ALL, skipHistograms, skipAggregateValues, compact, simple, \".\", consumer);\n        });\n  }\n\n","sourceOld":"  /**\n   * Convert selected metrics from a registry into maps (when <code>compact==false</code>) or\n   * flattened objects.\n   * @param registry registry\n   * @param names metric names\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertMetrics(MetricRegistry registry, Collection<String> names,\n                                    boolean skipHistograms, boolean skipAggregateValues,\n                                    boolean compact, boolean simple,\n                                    BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    names.stream()\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, PropertyFilter.ALL, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68541eebed1904d72a1ab713fc1afcec49e3f466","date":1502966016,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetrics(MetricRegistry,Collection[String],boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#convertMetrics(MetricRegistry,Collection[String],boolean,boolean,boolean,boolean,BiConsumer[String,Object]).mjava","sourceNew":"  /**\n   * Convert selected metrics from a registry into maps (when <code>compact==false</code>) or\n   * flattened objects.\n   * @param registry registry\n   * @param names metric names\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertMetrics(MetricRegistry registry, Collection<String> names,\n                                    boolean skipHistograms, boolean skipAggregateValues,\n                                    boolean compact, boolean simple,\n                                    BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    names.stream()\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, PropertyFilter.ALL, skipHistograms, skipAggregateValues, compact, simple, \".\", consumer);\n        });\n  }\n\n","sourceOld":"  /**\n   * Convert selected metrics from a registry into maps (when <code>compact==false</code>) or\n   * flattened objects.\n   * @param registry registry\n   * @param names metric names\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.\n   * @param compact use compact representation for counters and gauges.\n   * @param simple use simplified representation for complex metrics - instead of a (name, map)\n   *             only the selected (name \".\" key, value) pairs will be produced.\n   * @param consumer consumer that accepts produced objects\n   */\n  public static void convertMetrics(MetricRegistry registry, Collection<String> names,\n                                    boolean skipHistograms, boolean skipAggregateValues,\n                                    boolean compact, boolean simple,\n                                    BiConsumer<String, Object> consumer) {\n    final Map<String, Metric> metrics = registry.getMetrics();\n    names.stream()\n        .forEach(n -> {\n          Metric metric = metrics.get(n);\n          convertMetric(n, metric, PropertyFilter.ALL, skipHistograms, skipAggregateValues, compact, simple, consumer);\n        });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"816521ebaad5add9cb96bb88c577394e2938c40b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["816521ebaad5add9cb96bb88c577394e2938c40b"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e75e40c2252a5624016ad28ba7e8d3354c4d9c86"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","816521ebaad5add9cb96bb88c577394e2938c40b"],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e75e40c2252a5624016ad28ba7e8d3354c4d9c86","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}