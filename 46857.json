{"path":"lucene/sandbox/src/java/org/apache/lucene/search/PointInPolygonQuery#PointInPolygonQuery(String,double[],double[]).mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/PointInPolygonQuery#PointInPolygonQuery(String,double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/DimensionalPointInPolygonQuery#DimensionalPointInPolygonQuery(String,double[],double[]).mjava","sourceNew":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public PointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    this.field = field;\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal innner bounding box, to make relations faster to compute?\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<polyLats.length;i++) {\n      double lat = polyLats[i];\n      if (GeoUtils.isValidLat(lat) == false) {\n        throw new IllegalArgumentException(\"polyLats[\" + i + \"]=\" + lat + \" is not a valid latitude\");\n      }\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n      double lon = polyLons[i];\n      if (GeoUtils.isValidLon(lon) == false) {\n        throw new IllegalArgumentException(\"polyLons[\" + i + \"]=\" + lat + \" is not a valid longitude\");\n      }\n      minLon = Math.min(minLon, lon);\n      maxLon = Math.max(maxLon, lon);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","sourceOld":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public DimensionalPointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    this.field = field;\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal innner bounding box, to make relations faster to compute?\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<polyLats.length;i++) {\n      double lat = polyLats[i];\n      if (GeoUtils.isValidLat(lat) == false) {\n        throw new IllegalArgumentException(\"polyLats[\" + i + \"]=\" + lat + \" is not a valid latitude\");\n      }\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n      double lon = polyLons[i];\n      if (GeoUtils.isValidLon(lon) == false) {\n        throw new IllegalArgumentException(\"polyLons[\" + i + \"]=\" + lat + \" is not a valid longitude\");\n      }\n      minLon = Math.min(minLon, lon);\n      maxLon = Math.max(maxLon, lon);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"609ba4ce51a7095e9815d4fb2666ec85714f8f54","date":1456320705,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/PointInPolygonQuery#PointInPolygonQuery(String,double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/PointInPolygonQuery#PointInPolygonQuery(String,double[],double[]).mjava","sourceNew":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public PointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    this.field = field;\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal inner bounding box, to make relations faster to compute?\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<polyLats.length;i++) {\n      double lat = polyLats[i];\n      if (GeoUtils.isValidLat(lat) == false) {\n        throw new IllegalArgumentException(\"polyLats[\" + i + \"]=\" + lat + \" is not a valid latitude\");\n      }\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n      double lon = polyLons[i];\n      if (GeoUtils.isValidLon(lon) == false) {\n        throw new IllegalArgumentException(\"polyLons[\" + i + \"]=\" + lat + \" is not a valid longitude\");\n      }\n      minLon = Math.min(minLon, lon);\n      maxLon = Math.max(maxLon, lon);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","sourceOld":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public PointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    this.field = field;\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal innner bounding box, to make relations faster to compute?\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<polyLats.length;i++) {\n      double lat = polyLats[i];\n      if (GeoUtils.isValidLat(lat) == false) {\n        throw new IllegalArgumentException(\"polyLats[\" + i + \"]=\" + lat + \" is not a valid latitude\");\n      }\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n      double lon = polyLons[i];\n      if (GeoUtils.isValidLon(lon) == false) {\n        throw new IllegalArgumentException(\"polyLons[\" + i + \"]=\" + lat + \" is not a valid longitude\");\n      }\n      minLon = Math.min(minLon, lon);\n      maxLon = Math.max(maxLon, lon);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","bugFix":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","date":1456321728,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/PointInPolygonQuery#PointInPolygonQuery(String,double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/PointInPolygonQuery#PointInPolygonQuery(String,double[],double[]).mjava","sourceNew":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public PointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    this.field = field;\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal inner bounding box, to make relations faster to compute?\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<polyLats.length;i++) {\n      double lat = polyLats[i];\n      if (GeoUtils.isValidLat(lat) == false) {\n        throw new IllegalArgumentException(\"polyLats[\" + i + \"]=\" + lat + \" is not a valid latitude\");\n      }\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n      double lon = polyLons[i];\n      if (GeoUtils.isValidLon(lon) == false) {\n        throw new IllegalArgumentException(\"polyLons[\" + i + \"]=\" + lat + \" is not a valid longitude\");\n      }\n      minLon = Math.min(minLon, lon);\n      maxLon = Math.max(maxLon, lon);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","sourceOld":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public PointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    this.field = field;\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal innner bounding box, to make relations faster to compute?\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<polyLats.length;i++) {\n      double lat = polyLats[i];\n      if (GeoUtils.isValidLat(lat) == false) {\n        throw new IllegalArgumentException(\"polyLats[\" + i + \"]=\" + lat + \" is not a valid latitude\");\n      }\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n      double lon = polyLons[i];\n      if (GeoUtils.isValidLon(lon) == false) {\n        throw new IllegalArgumentException(\"polyLons[\" + i + \"]=\" + lat + \" is not a valid longitude\");\n      }\n      minLon = Math.min(minLon, lon);\n      maxLon = Math.max(maxLon, lon);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ee361295fb38310ac4d53cb4773d1622423d68","date":1456833885,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#LatLonPointInPolygonQuery(String,double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/PointInPolygonQuery#PointInPolygonQuery(String,double[],double[]).mjava","sourceNew":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public LatLonPointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    this.field = field;\n    if (field == null) {\n      throw new IllegalArgumentException(\"field cannot be null\");\n    }\n    if (polyLats == null) {\n      throw new IllegalArgumentException(\"polyLats cannot be null\");\n    }\n    if (polyLons == null) {\n      throw new IllegalArgumentException(\"polyLons cannot be null\");\n    }\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal inner bounding box, to make relations faster to compute?\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<polyLats.length;i++) {\n      double lat = polyLats[i];\n      if (GeoUtils.isValidLat(lat) == false) {\n        throw new IllegalArgumentException(\"polyLats[\" + i + \"]=\" + lat + \" is not a valid latitude\");\n      }\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n      double lon = polyLons[i];\n      if (GeoUtils.isValidLon(lon) == false) {\n        throw new IllegalArgumentException(\"polyLons[\" + i + \"]=\" + lat + \" is not a valid longitude\");\n      }\n      minLon = Math.min(minLon, lon);\n      maxLon = Math.max(maxLon, lon);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","sourceOld":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public PointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    this.field = field;\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal inner bounding box, to make relations faster to compute?\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<polyLats.length;i++) {\n      double lat = polyLats[i];\n      if (GeoUtils.isValidLat(lat) == false) {\n        throw new IllegalArgumentException(\"polyLats[\" + i + \"]=\" + lat + \" is not a valid latitude\");\n      }\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n      double lon = polyLons[i];\n      if (GeoUtils.isValidLon(lon) == false) {\n        throw new IllegalArgumentException(\"polyLons[\" + i + \"]=\" + lat + \" is not a valid longitude\");\n      }\n      minLon = Math.min(minLon, lon);\n      maxLon = Math.max(maxLon, lon);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","bugFix":null,"bugIntro":["ad0d09e969f4763b0df4230f8e3f74357872a4e4","ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#LatLonPointInPolygonQuery(String,double[],double[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/PointInPolygonQuery#PointInPolygonQuery(String,double[],double[]).mjava","sourceNew":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public LatLonPointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    this.field = field;\n    if (field == null) {\n      throw new IllegalArgumentException(\"field cannot be null\");\n    }\n    if (polyLats == null) {\n      throw new IllegalArgumentException(\"polyLats cannot be null\");\n    }\n    if (polyLons == null) {\n      throw new IllegalArgumentException(\"polyLons cannot be null\");\n    }\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal inner bounding box, to make relations faster to compute?\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<polyLats.length;i++) {\n      double lat = polyLats[i];\n      if (GeoUtils.isValidLat(lat) == false) {\n        throw new IllegalArgumentException(\"polyLats[\" + i + \"]=\" + lat + \" is not a valid latitude\");\n      }\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n      double lon = polyLons[i];\n      if (GeoUtils.isValidLon(lon) == false) {\n        throw new IllegalArgumentException(\"polyLons[\" + i + \"]=\" + lat + \" is not a valid longitude\");\n      }\n      minLon = Math.min(minLon, lon);\n      maxLon = Math.max(maxLon, lon);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","sourceOld":"  /** The lats/lons must be clockwise or counter-clockwise. */\n  public PointInPolygonQuery(String field, double[] polyLats, double[] polyLons) {\n    this.field = field;\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLats = polyLats;\n    this.polyLons = polyLons;\n\n    // TODO: we could also compute the maximal inner bounding box, to make relations faster to compute?\n\n    double minLon = Double.POSITIVE_INFINITY;\n    double minLat = Double.POSITIVE_INFINITY;\n    double maxLon = Double.NEGATIVE_INFINITY;\n    double maxLat = Double.NEGATIVE_INFINITY;\n    for(int i=0;i<polyLats.length;i++) {\n      double lat = polyLats[i];\n      if (GeoUtils.isValidLat(lat) == false) {\n        throw new IllegalArgumentException(\"polyLats[\" + i + \"]=\" + lat + \" is not a valid latitude\");\n      }\n      minLat = Math.min(minLat, lat);\n      maxLat = Math.max(maxLat, lat);\n      double lon = polyLons[i];\n      if (GeoUtils.isValidLon(lon) == false) {\n        throw new IllegalArgumentException(\"polyLons[\" + i + \"]=\" + lat + \" is not a valid longitude\");\n      }\n      minLon = Math.min(minLon, lon);\n      maxLon = Math.max(maxLon, lon);\n    }\n    this.minLon = minLon;\n    this.maxLon = maxLon;\n    this.minLat = minLat;\n    this.maxLat = maxLat;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"94ee361295fb38310ac4d53cb4773d1622423d68":["609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","94ee361295fb38310ac4d53cb4773d1622423d68"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","609ba4ce51a7095e9815d4fb2666ec85714f8f54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["609ba4ce51a7095e9815d4fb2666ec85714f8f54","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"609ba4ce51a7095e9815d4fb2666ec85714f8f54":["94ee361295fb38310ac4d53cb4773d1622423d68","cf1a614098b46c9c22afebd7b898ae4d1d2fc273","1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6"],"94ee361295fb38310ac4d53cb4773d1622423d68":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1af4bde3de13aa03ab458c2b7adb1c088fcf7ad6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}