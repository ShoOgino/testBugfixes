{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","commits":[{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results)\n      throws Exception {\n\n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n\n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName);\n      reloadCollection(null, cloudConfig, new ZkNodeProps(NAME, collectionName), results);\n    }\n\n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !updateEntry.getValue().equals(collection.get(updateKey))) {\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n\n    // if switching to/from read-only mode reload the collection\n    if (message.keySet().contains(ZkStateReader.READ_ONLY)) {\n      reloadCollection(null, cloudConfig, new ZkNodeProps(NAME, collectionName), results);\n    }\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results)\n      throws Exception {\n\n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n\n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n\n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !updateEntry.getValue().equals(collection.get(updateKey))) {\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n\n    // if switching to/from read-only mode reload the collection\n    if (message.keySet().contains(ZkStateReader.READ_ONLY)) {\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#modifyCollection(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","sourceNew":"  private void modifyCollection(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results)\n      throws Exception {\n\n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n\n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName);\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n\n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !updateEntry.getValue().equals(collection.get(updateKey))) {\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n\n    // if switching to/from read-only mode reload the collection\n    if (message.keySet().contains(ZkStateReader.READ_ONLY)) {\n      reloadCollection(null, new ZkNodeProps(NAME, collectionName), results);\n    }\n  }\n\n","sourceOld":"  private void modifyCollection(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results)\n      throws Exception {\n\n    final String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    //the rest of the processing is based on writing cluster state properties\n    //remove the property here to avoid any errors down the pipeline due to this property appearing\n    String configName = (String) message.getProperties().remove(CollectionAdminParams.COLL_CONF);\n\n    if(configName != null) {\n      validateConfigOrThrowSolrException(configName);\n\n      createConfNode(cloudManager.getDistribStateManager(), configName, collectionName);\n      reloadCollection(null, cloudConfig, new ZkNodeProps(NAME, collectionName), results);\n    }\n\n    overseer.offerStateUpdate(Utils.toJSON(message));\n\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n    boolean areChangesVisible = true;\n    while (!timeout.hasTimedOut()) {\n      DocCollection collection = cloudManager.getClusterStateProvider().getClusterState().getCollection(collectionName);\n      areChangesVisible = true;\n      for (Map.Entry<String,Object> updateEntry : message.getProperties().entrySet()) {\n        String updateKey = updateEntry.getKey();\n\n        if (!updateKey.equals(ZkStateReader.COLLECTION_PROP)\n            && !updateKey.equals(Overseer.QUEUE_OPERATION)\n            && updateEntry.getValue() != null // handled below in a separate conditional\n            && !updateEntry.getValue().equals(collection.get(updateKey))) {\n          areChangesVisible = false;\n          break;\n        }\n\n        if (updateEntry.getValue() == null && collection.containsKey(updateKey)) {\n          areChangesVisible = false;\n          break;\n        }\n      }\n      if (areChangesVisible) break;\n      timeout.sleep(100);\n    }\n\n    if (!areChangesVisible)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Could not modify collection \" + message);\n\n    // if switching to/from read-only mode reload the collection\n    if (message.keySet().contains(ZkStateReader.READ_ONLY)) {\n      reloadCollection(null, cloudConfig, new ZkNodeProps(NAME, collectionName), results);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"c526352db87264a72a7a9ad68c1b769b81e54305":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c526352db87264a72a7a9ad68c1b769b81e54305"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}