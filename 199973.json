{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedSearch(ResponseBuilder,QueryResult).mjava","commits":[{"id":"af8334dcf26521da965e339ff1096e0e7bcdd8c6","date":1504885366,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedSearch(ResponseBuilder,QueryResult).mjava","pathOld":"/dev/null","sourceNew":"  private void doProcessGroupedSearch(ResponseBuilder rb, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    QueryCommand cmd = rb.getQueryCommand();\n\n    int maxDocsPercentageToCache = params.getInt(GroupParams.GROUP_CACHE_PERCENTAGE, 0);\n    boolean cacheSecondPassSearch = maxDocsPercentageToCache >= 1 && maxDocsPercentageToCache <= 100;\n    Grouping.TotalCount defaultTotalCount = groupingSpec.isIncludeGroupCount() ?\n        Grouping.TotalCount.grouped : Grouping.TotalCount.ungrouped;\n    int limitDefault = cmd.getLen(); // this is normally from \"rows\"\n    Grouping grouping =\n        new Grouping(searcher, result, cmd, cacheSecondPassSearch, maxDocsPercentageToCache, groupingSpec.isMain());\n    grouping.setGroupSort(groupingSpec.getGroupSort())\n        .setWithinGroupSort(groupingSpec.getSortWithinGroup())\n        .setDefaultFormat(groupingSpec.getResponseFormat())\n        .setLimitDefault(limitDefault)\n        .setDefaultTotalCount(defaultTotalCount)\n        .setDocsPerGroupDefault(groupingSpec.getWithinGroupLimit())\n        .setGroupOffsetDefault(groupingSpec.getWithinGroupOffset())\n        .setGetGroupedDocSet(groupingSpec.isTruncateGroups());\n\n    if (groupingSpec.getFields() != null) {\n      for (String field : groupingSpec.getFields()) {\n        grouping.addFieldCommand(field, rb.req);\n      }\n    }\n\n    if (groupingSpec.getFunctions() != null) {\n      for (String groupByStr : groupingSpec.getFunctions()) {\n        grouping.addFunctionCommand(groupByStr, rb.req);\n      }\n    }\n\n    if (groupingSpec.getQueries() != null) {\n      for (String groupByStr : groupingSpec.getQueries()) {\n        grouping.addQueryCommand(groupByStr, rb.req);\n      }\n    }\n\n    if( rb.isNeedDocList() || rb.isDebug() ){\n      // we need a single list of the returned docs\n      cmd.setFlags(SolrIndexSearcher.GET_DOCLIST);\n    }\n\n    grouping.execute();\n    if (grouping.isSignalCacheWarning()) {\n      rsp.add(\n          \"cacheWarning\",\n          String.format(Locale.ROOT, \"Cache limit of %d percent relative to maxdoc has exceeded. Please increase cache size or disable caching.\", maxDocsPercentageToCache)\n      );\n    }\n    rb.setResult(result);\n\n    if (grouping.mainResult != null) {\n      ResultContext ctx = new BasicResultContext(rb, grouping.mainResult);\n      rsp.addResponse(ctx);\n      rsp.getToLog().add(\"hits\", grouping.mainResult.matches());\n    } else if (!grouping.getCommands().isEmpty()) { // Can never be empty since grouping.execute() checks for this.\n      rsp.add(\"grouped\", result.groupedResults);\n      rsp.getToLog().add(\"hits\", grouping.getCommands().get(0).getMatches());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd68c90c39731aaa564d6995e5dd4a4c2388e13e","date":1504887539,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedSearch(ResponseBuilder,QueryResult).mjava","pathOld":"/dev/null","sourceNew":"  private void doProcessGroupedSearch(ResponseBuilder rb, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    QueryCommand cmd = rb.getQueryCommand();\n\n    int maxDocsPercentageToCache = params.getInt(GroupParams.GROUP_CACHE_PERCENTAGE, 0);\n    boolean cacheSecondPassSearch = maxDocsPercentageToCache >= 1 && maxDocsPercentageToCache <= 100;\n    Grouping.TotalCount defaultTotalCount = groupingSpec.isIncludeGroupCount() ?\n        Grouping.TotalCount.grouped : Grouping.TotalCount.ungrouped;\n    int limitDefault = cmd.getLen(); // this is normally from \"rows\"\n    Grouping grouping =\n        new Grouping(searcher, result, cmd, cacheSecondPassSearch, maxDocsPercentageToCache, groupingSpec.isMain());\n    grouping.setGroupSort(groupingSpec.getGroupSort())\n        .setWithinGroupSort(groupingSpec.getSortWithinGroup())\n        .setDefaultFormat(groupingSpec.getResponseFormat())\n        .setLimitDefault(limitDefault)\n        .setDefaultTotalCount(defaultTotalCount)\n        .setDocsPerGroupDefault(groupingSpec.getWithinGroupLimit())\n        .setGroupOffsetDefault(groupingSpec.getWithinGroupOffset())\n        .setGetGroupedDocSet(groupingSpec.isTruncateGroups());\n\n    if (groupingSpec.getFields() != null) {\n      for (String field : groupingSpec.getFields()) {\n        grouping.addFieldCommand(field, rb.req);\n      }\n    }\n\n    if (groupingSpec.getFunctions() != null) {\n      for (String groupByStr : groupingSpec.getFunctions()) {\n        grouping.addFunctionCommand(groupByStr, rb.req);\n      }\n    }\n\n    if (groupingSpec.getQueries() != null) {\n      for (String groupByStr : groupingSpec.getQueries()) {\n        grouping.addQueryCommand(groupByStr, rb.req);\n      }\n    }\n\n    if( rb.isNeedDocList() || rb.isDebug() ){\n      // we need a single list of the returned docs\n      cmd.setFlags(SolrIndexSearcher.GET_DOCLIST);\n    }\n\n    grouping.execute();\n    if (grouping.isSignalCacheWarning()) {\n      rsp.add(\n          \"cacheWarning\",\n          String.format(Locale.ROOT, \"Cache limit of %d percent relative to maxdoc has exceeded. Please increase cache size or disable caching.\", maxDocsPercentageToCache)\n      );\n    }\n    rb.setResult(result);\n\n    if (grouping.mainResult != null) {\n      ResultContext ctx = new BasicResultContext(rb, grouping.mainResult);\n      rsp.addResponse(ctx);\n      rsp.getToLog().add(\"hits\", grouping.mainResult.matches());\n    } else if (!grouping.getCommands().isEmpty()) { // Can never be empty since grouping.execute() checks for this.\n      rsp.add(\"grouped\", result.groupedResults);\n      rsp.getToLog().add(\"hits\", grouping.getCommands().get(0).getMatches());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4924281697ed8ed3790f0f327be1fbde8160afc","date":1505151135,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedSearch(ResponseBuilder,QueryCommand,QueryResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedSearch(ResponseBuilder,QueryResult).mjava","sourceNew":"  private void doProcessGroupedSearch(ResponseBuilder rb, QueryCommand cmd, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    int maxDocsPercentageToCache = params.getInt(GroupParams.GROUP_CACHE_PERCENTAGE, 0);\n    boolean cacheSecondPassSearch = maxDocsPercentageToCache >= 1 && maxDocsPercentageToCache <= 100;\n    Grouping.TotalCount defaultTotalCount = groupingSpec.isIncludeGroupCount() ?\n        Grouping.TotalCount.grouped : Grouping.TotalCount.ungrouped;\n    int limitDefault = cmd.getLen(); // this is normally from \"rows\"\n    Grouping grouping =\n        new Grouping(searcher, result, cmd, cacheSecondPassSearch, maxDocsPercentageToCache, groupingSpec.isMain());\n    grouping.setGroupSort(groupingSpec.getGroupSort())\n        .setWithinGroupSort(groupingSpec.getSortWithinGroup())\n        .setDefaultFormat(groupingSpec.getResponseFormat())\n        .setLimitDefault(limitDefault)\n        .setDefaultTotalCount(defaultTotalCount)\n        .setDocsPerGroupDefault(groupingSpec.getWithinGroupLimit())\n        .setGroupOffsetDefault(groupingSpec.getWithinGroupOffset())\n        .setGetGroupedDocSet(groupingSpec.isTruncateGroups());\n\n    if (groupingSpec.getFields() != null) {\n      for (String field : groupingSpec.getFields()) {\n        grouping.addFieldCommand(field, rb.req);\n      }\n    }\n\n    if (groupingSpec.getFunctions() != null) {\n      for (String groupByStr : groupingSpec.getFunctions()) {\n        grouping.addFunctionCommand(groupByStr, rb.req);\n      }\n    }\n\n    if (groupingSpec.getQueries() != null) {\n      for (String groupByStr : groupingSpec.getQueries()) {\n        grouping.addQueryCommand(groupByStr, rb.req);\n      }\n    }\n\n    if( rb.isNeedDocList() || rb.isDebug() ){\n      // we need a single list of the returned docs\n      cmd.setFlags(SolrIndexSearcher.GET_DOCLIST);\n    }\n\n    grouping.execute();\n    if (grouping.isSignalCacheWarning()) {\n      rsp.add(\n          \"cacheWarning\",\n          String.format(Locale.ROOT, \"Cache limit of %d percent relative to maxdoc has exceeded. Please increase cache size or disable caching.\", maxDocsPercentageToCache)\n      );\n    }\n    rb.setResult(result);\n\n    if (grouping.mainResult != null) {\n      ResultContext ctx = new BasicResultContext(rb, grouping.mainResult);\n      rsp.addResponse(ctx);\n      rsp.getToLog().add(\"hits\", grouping.mainResult.matches());\n    } else if (!grouping.getCommands().isEmpty()) { // Can never be empty since grouping.execute() checks for this.\n      rsp.add(\"grouped\", result.groupedResults);\n      rsp.getToLog().add(\"hits\", grouping.getCommands().get(0).getMatches());\n    }\n  }\n\n","sourceOld":"  private void doProcessGroupedSearch(ResponseBuilder rb, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    QueryCommand cmd = rb.getQueryCommand();\n\n    int maxDocsPercentageToCache = params.getInt(GroupParams.GROUP_CACHE_PERCENTAGE, 0);\n    boolean cacheSecondPassSearch = maxDocsPercentageToCache >= 1 && maxDocsPercentageToCache <= 100;\n    Grouping.TotalCount defaultTotalCount = groupingSpec.isIncludeGroupCount() ?\n        Grouping.TotalCount.grouped : Grouping.TotalCount.ungrouped;\n    int limitDefault = cmd.getLen(); // this is normally from \"rows\"\n    Grouping grouping =\n        new Grouping(searcher, result, cmd, cacheSecondPassSearch, maxDocsPercentageToCache, groupingSpec.isMain());\n    grouping.setGroupSort(groupingSpec.getGroupSort())\n        .setWithinGroupSort(groupingSpec.getSortWithinGroup())\n        .setDefaultFormat(groupingSpec.getResponseFormat())\n        .setLimitDefault(limitDefault)\n        .setDefaultTotalCount(defaultTotalCount)\n        .setDocsPerGroupDefault(groupingSpec.getWithinGroupLimit())\n        .setGroupOffsetDefault(groupingSpec.getWithinGroupOffset())\n        .setGetGroupedDocSet(groupingSpec.isTruncateGroups());\n\n    if (groupingSpec.getFields() != null) {\n      for (String field : groupingSpec.getFields()) {\n        grouping.addFieldCommand(field, rb.req);\n      }\n    }\n\n    if (groupingSpec.getFunctions() != null) {\n      for (String groupByStr : groupingSpec.getFunctions()) {\n        grouping.addFunctionCommand(groupByStr, rb.req);\n      }\n    }\n\n    if (groupingSpec.getQueries() != null) {\n      for (String groupByStr : groupingSpec.getQueries()) {\n        grouping.addQueryCommand(groupByStr, rb.req);\n      }\n    }\n\n    if( rb.isNeedDocList() || rb.isDebug() ){\n      // we need a single list of the returned docs\n      cmd.setFlags(SolrIndexSearcher.GET_DOCLIST);\n    }\n\n    grouping.execute();\n    if (grouping.isSignalCacheWarning()) {\n      rsp.add(\n          \"cacheWarning\",\n          String.format(Locale.ROOT, \"Cache limit of %d percent relative to maxdoc has exceeded. Please increase cache size or disable caching.\", maxDocsPercentageToCache)\n      );\n    }\n    rb.setResult(result);\n\n    if (grouping.mainResult != null) {\n      ResultContext ctx = new BasicResultContext(rb, grouping.mainResult);\n      rsp.addResponse(ctx);\n      rsp.getToLog().add(\"hits\", grouping.mainResult.matches());\n    } else if (!grouping.getCommands().isEmpty()) { // Can never be empty since grouping.execute() checks for this.\n      rsp.add(\"grouped\", result.groupedResults);\n      rsp.getToLog().add(\"hits\", grouping.getCommands().get(0).getMatches());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffb85feece8645a035c02443a625f5af15e1106b","date":1505219692,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedSearch(ResponseBuilder,QueryCommand,QueryResult).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryComponent#doProcessGroupedSearch(ResponseBuilder,QueryResult).mjava","sourceNew":"  private void doProcessGroupedSearch(ResponseBuilder rb, QueryCommand cmd, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    int maxDocsPercentageToCache = params.getInt(GroupParams.GROUP_CACHE_PERCENTAGE, 0);\n    boolean cacheSecondPassSearch = maxDocsPercentageToCache >= 1 && maxDocsPercentageToCache <= 100;\n    Grouping.TotalCount defaultTotalCount = groupingSpec.isIncludeGroupCount() ?\n        Grouping.TotalCount.grouped : Grouping.TotalCount.ungrouped;\n    int limitDefault = cmd.getLen(); // this is normally from \"rows\"\n    Grouping grouping =\n        new Grouping(searcher, result, cmd, cacheSecondPassSearch, maxDocsPercentageToCache, groupingSpec.isMain());\n    grouping.setGroupSort(groupingSpec.getGroupSort())\n        .setWithinGroupSort(groupingSpec.getSortWithinGroup())\n        .setDefaultFormat(groupingSpec.getResponseFormat())\n        .setLimitDefault(limitDefault)\n        .setDefaultTotalCount(defaultTotalCount)\n        .setDocsPerGroupDefault(groupingSpec.getWithinGroupLimit())\n        .setGroupOffsetDefault(groupingSpec.getWithinGroupOffset())\n        .setGetGroupedDocSet(groupingSpec.isTruncateGroups());\n\n    if (groupingSpec.getFields() != null) {\n      for (String field : groupingSpec.getFields()) {\n        grouping.addFieldCommand(field, rb.req);\n      }\n    }\n\n    if (groupingSpec.getFunctions() != null) {\n      for (String groupByStr : groupingSpec.getFunctions()) {\n        grouping.addFunctionCommand(groupByStr, rb.req);\n      }\n    }\n\n    if (groupingSpec.getQueries() != null) {\n      for (String groupByStr : groupingSpec.getQueries()) {\n        grouping.addQueryCommand(groupByStr, rb.req);\n      }\n    }\n\n    if( rb.isNeedDocList() || rb.isDebug() ){\n      // we need a single list of the returned docs\n      cmd.setFlags(SolrIndexSearcher.GET_DOCLIST);\n    }\n\n    grouping.execute();\n    if (grouping.isSignalCacheWarning()) {\n      rsp.add(\n          \"cacheWarning\",\n          String.format(Locale.ROOT, \"Cache limit of %d percent relative to maxdoc has exceeded. Please increase cache size or disable caching.\", maxDocsPercentageToCache)\n      );\n    }\n    rb.setResult(result);\n\n    if (grouping.mainResult != null) {\n      ResultContext ctx = new BasicResultContext(rb, grouping.mainResult);\n      rsp.addResponse(ctx);\n      rsp.getToLog().add(\"hits\", grouping.mainResult.matches());\n    } else if (!grouping.getCommands().isEmpty()) { // Can never be empty since grouping.execute() checks for this.\n      rsp.add(\"grouped\", result.groupedResults);\n      rsp.getToLog().add(\"hits\", grouping.getCommands().get(0).getMatches());\n    }\n  }\n\n","sourceOld":"  private void doProcessGroupedSearch(ResponseBuilder rb, QueryResult result) throws IOException, SyntaxError {\n\n    GroupingSpecification groupingSpec = rb.getGroupingSpec();\n    assert null != groupingSpec : \"GroupingSpecification is null\";\n\n    SolrQueryRequest req = rb.req;\n    SolrQueryResponse rsp = rb.rsp;\n\n    SolrParams params = req.getParams();\n\n    SolrIndexSearcher searcher = req.getSearcher();\n\n    QueryCommand cmd = rb.getQueryCommand();\n\n    int maxDocsPercentageToCache = params.getInt(GroupParams.GROUP_CACHE_PERCENTAGE, 0);\n    boolean cacheSecondPassSearch = maxDocsPercentageToCache >= 1 && maxDocsPercentageToCache <= 100;\n    Grouping.TotalCount defaultTotalCount = groupingSpec.isIncludeGroupCount() ?\n        Grouping.TotalCount.grouped : Grouping.TotalCount.ungrouped;\n    int limitDefault = cmd.getLen(); // this is normally from \"rows\"\n    Grouping grouping =\n        new Grouping(searcher, result, cmd, cacheSecondPassSearch, maxDocsPercentageToCache, groupingSpec.isMain());\n    grouping.setGroupSort(groupingSpec.getGroupSort())\n        .setWithinGroupSort(groupingSpec.getSortWithinGroup())\n        .setDefaultFormat(groupingSpec.getResponseFormat())\n        .setLimitDefault(limitDefault)\n        .setDefaultTotalCount(defaultTotalCount)\n        .setDocsPerGroupDefault(groupingSpec.getWithinGroupLimit())\n        .setGroupOffsetDefault(groupingSpec.getWithinGroupOffset())\n        .setGetGroupedDocSet(groupingSpec.isTruncateGroups());\n\n    if (groupingSpec.getFields() != null) {\n      for (String field : groupingSpec.getFields()) {\n        grouping.addFieldCommand(field, rb.req);\n      }\n    }\n\n    if (groupingSpec.getFunctions() != null) {\n      for (String groupByStr : groupingSpec.getFunctions()) {\n        grouping.addFunctionCommand(groupByStr, rb.req);\n      }\n    }\n\n    if (groupingSpec.getQueries() != null) {\n      for (String groupByStr : groupingSpec.getQueries()) {\n        grouping.addQueryCommand(groupByStr, rb.req);\n      }\n    }\n\n    if( rb.isNeedDocList() || rb.isDebug() ){\n      // we need a single list of the returned docs\n      cmd.setFlags(SolrIndexSearcher.GET_DOCLIST);\n    }\n\n    grouping.execute();\n    if (grouping.isSignalCacheWarning()) {\n      rsp.add(\n          \"cacheWarning\",\n          String.format(Locale.ROOT, \"Cache limit of %d percent relative to maxdoc has exceeded. Please increase cache size or disable caching.\", maxDocsPercentageToCache)\n      );\n    }\n    rb.setResult(result);\n\n    if (grouping.mainResult != null) {\n      ResultContext ctx = new BasicResultContext(rb, grouping.mainResult);\n      rsp.addResponse(ctx);\n      rsp.getToLog().add(\"hits\", grouping.mainResult.matches());\n    } else if (!grouping.getCommands().isEmpty()) { // Can never be empty since grouping.execute() checks for this.\n      rsp.add(\"grouped\", result.groupedResults);\n      rsp.getToLog().add(\"hits\", grouping.getCommands().get(0).getMatches());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af8334dcf26521da965e339ff1096e0e7bcdd8c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ffb85feece8645a035c02443a625f5af15e1106b":["dd68c90c39731aaa564d6995e5dd4a4c2388e13e","f4924281697ed8ed3790f0f327be1fbde8160afc"],"f4924281697ed8ed3790f0f327be1fbde8160afc":["dd68c90c39731aaa564d6995e5dd4a4c2388e13e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd68c90c39731aaa564d6995e5dd4a4c2388e13e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af8334dcf26521da965e339ff1096e0e7bcdd8c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ffb85feece8645a035c02443a625f5af15e1106b"]},"commit2Childs":{"af8334dcf26521da965e339ff1096e0e7bcdd8c6":["dd68c90c39731aaa564d6995e5dd4a4c2388e13e"],"ffb85feece8645a035c02443a625f5af15e1106b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f4924281697ed8ed3790f0f327be1fbde8160afc":["ffb85feece8645a035c02443a625f5af15e1106b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af8334dcf26521da965e339ff1096e0e7bcdd8c6","dd68c90c39731aaa564d6995e5dd4a4c2388e13e"],"dd68c90c39731aaa564d6995e5dd4a4c2388e13e":["ffb85feece8645a035c02443a625f5af15e1106b","f4924281697ed8ed3790f0f327be1fbde8160afc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}