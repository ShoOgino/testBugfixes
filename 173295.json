{"path":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#setMatchingSegmentReaders().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#setMatchingSegmentReaders().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentMerger#setMatchingSegmentReaders().mjava","sourceNew":"  private void setMatchingSegmentReaders() {\n    // If the i'th reader is a SegmentReader and has\n    // identical fieldName -> number mapping, then this\n    // array will be non-null at position i:\n    int numReaders = readers.size();\n    matchingSegmentReaders = new SegmentReader[numReaders];\n\n    // If this reader is a SegmentReader, and all of its\n    // field name -> number mappings match the \"merged\"\n    // FieldInfos, then we can do a bulk copy of the\n    // stored fields:\n    for (int i = 0; i < numReaders; i++) {\n      IndexReader reader = readers.get(i);\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        boolean same = true;\n        FieldInfos segmentFieldInfos = segmentReader.fieldInfos();\n        int numFieldInfos = segmentFieldInfos.size();\n        for (int j = 0; same && j < numFieldInfos; j++) {\n          same = fieldInfos.fieldName(j).equals(segmentFieldInfos.fieldName(j));\n        }\n        if (same) {\n          matchingSegmentReaders[i] = segmentReader;\n        }\n      }\n    }\n\n    // Used for bulk-reading raw bytes for stored fields\n    rawDocLengths = new int[MAX_RAW_MERGE_DOCS];\n    rawDocLengths2 = new int[MAX_RAW_MERGE_DOCS];\n  }\n\n","sourceOld":"  private void setMatchingSegmentReaders() {\n    // If the i'th reader is a SegmentReader and has\n    // identical fieldName -> number mapping, then this\n    // array will be non-null at position i:\n    int numReaders = readers.size();\n    matchingSegmentReaders = new SegmentReader[numReaders];\n\n    // If this reader is a SegmentReader, and all of its\n    // field name -> number mappings match the \"merged\"\n    // FieldInfos, then we can do a bulk copy of the\n    // stored fields:\n    for (int i = 0; i < numReaders; i++) {\n      IndexReader reader = readers.get(i);\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        boolean same = true;\n        FieldInfos segmentFieldInfos = segmentReader.fieldInfos();\n        int numFieldInfos = segmentFieldInfos.size();\n        for (int j = 0; same && j < numFieldInfos; j++) {\n          same = fieldInfos.fieldName(j).equals(segmentFieldInfos.fieldName(j));\n        }\n        if (same) {\n          matchingSegmentReaders[i] = segmentReader;\n        }\n      }\n    }\n\n    // Used for bulk-reading raw bytes for stored fields\n    rawDocLengths = new int[MAX_RAW_MERGE_DOCS];\n    rawDocLengths2 = new int[MAX_RAW_MERGE_DOCS];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#setMatchingSegmentReaders().mjava","sourceNew":null,"sourceOld":"  private void setMatchingSegmentReaders() {\n    // If the i'th reader is a SegmentReader and has\n    // identical fieldName -> number mapping, then this\n    // array will be non-null at position i:\n    int numReaders = readers.size();\n    matchingSegmentReaders = new SegmentReader[numReaders];\n\n    // If this reader is a SegmentReader, and all of its\n    // field name -> number mappings match the \"merged\"\n    // FieldInfos, then we can do a bulk copy of the\n    // stored fields:\n    for (int i = 0; i < numReaders; i++) {\n      IndexReader reader = readers.get(i);\n      if (reader instanceof SegmentReader) {\n        SegmentReader segmentReader = (SegmentReader) reader;\n        boolean same = true;\n        FieldInfos segmentFieldInfos = segmentReader.fieldInfos();\n        int numFieldInfos = segmentFieldInfos.size();\n        for (int j = 0; same && j < numFieldInfos; j++) {\n          same = fieldInfos.fieldName(j).equals(segmentFieldInfos.fieldName(j));\n        }\n        if (same) {\n          matchingSegmentReaders[i] = segmentReader;\n        }\n      }\n    }\n\n    // Used for bulk-reading raw bytes for stored fields\n    rawDocLengths = new int[MAX_RAW_MERGE_DOCS];\n    rawDocLengths2 = new int[MAX_RAW_MERGE_DOCS];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}