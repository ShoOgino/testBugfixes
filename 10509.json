{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","sourceNew":"  // extract properties to array, e.g. for \"true:true:false\" return boolean[]{true,false,false}. \n  private boolean[] propToBooleanArray(String s) {\n    if (s.indexOf(\":\") < 0) {\n      return new boolean[]{Boolean.valueOf(s).booleanValue()};\n    }\n\n    ArrayList<Boolean> a = new ArrayList<Boolean>();\n    StringTokenizer st = new StringTokenizer(s, \":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(new Boolean(t));\n    }\n    boolean res[] = new boolean[a.size()];\n    for (int i = 0; i < a.size(); i++) {\n      res[i] = a.get(i).booleanValue();\n    }\n    return res;\n  }\n\n","sourceOld":"  // extract properties to array, e.g. for \"true:true:false\" return boolean[]{true,false,false}. \n  private boolean[] propToBooleanArray(String s) {\n    if (s.indexOf(\":\") < 0) {\n      return new boolean[]{Boolean.valueOf(s).booleanValue()};\n    }\n\n    ArrayList<Boolean> a = new ArrayList<Boolean>();\n    StringTokenizer st = new StringTokenizer(s, \":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(new Boolean(t));\n    }\n    boolean res[] = new boolean[a.size()];\n    for (int i = 0; i < a.size(); i++) {\n      res[i] = a.get(i).booleanValue();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","sourceNew":"  // extract properties to array, e.g. for \"true:true:false\" return boolean[]{true,false,false}. \n  private boolean[] propToBooleanArray(String s) {\n    if (s.indexOf(\":\") < 0) {\n      return new boolean[]{Boolean.valueOf(s).booleanValue()};\n    }\n\n    ArrayList<Boolean> a = new ArrayList<>();\n    StringTokenizer st = new StringTokenizer(s, \":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(new Boolean(t));\n    }\n    boolean res[] = new boolean[a.size()];\n    for (int i = 0; i < a.size(); i++) {\n      res[i] = a.get(i).booleanValue();\n    }\n    return res;\n  }\n\n","sourceOld":"  // extract properties to array, e.g. for \"true:true:false\" return boolean[]{true,false,false}. \n  private boolean[] propToBooleanArray(String s) {\n    if (s.indexOf(\":\") < 0) {\n      return new boolean[]{Boolean.valueOf(s).booleanValue()};\n    }\n\n    ArrayList<Boolean> a = new ArrayList<Boolean>();\n    StringTokenizer st = new StringTokenizer(s, \":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(new Boolean(t));\n    }\n    boolean res[] = new boolean[a.size()];\n    for (int i = 0; i < a.size(); i++) {\n      res[i] = a.get(i).booleanValue();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","sourceNew":"  // extract properties to array, e.g. for \"true:true:false\" return boolean[]{true,false,false}. \n  private boolean[] propToBooleanArray(String s) {\n    if (s.indexOf(\":\") < 0) {\n      return new boolean[]{Boolean.valueOf(s).booleanValue()};\n    }\n\n    ArrayList<Boolean> a = new ArrayList<>();\n    StringTokenizer st = new StringTokenizer(s, \":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Boolean.valueOf(t));\n    }\n    boolean res[] = new boolean[a.size()];\n    for (int i = 0; i < a.size(); i++) {\n      res[i] = a.get(i).booleanValue();\n    }\n    return res;\n  }\n\n","sourceOld":"  // extract properties to array, e.g. for \"true:true:false\" return boolean[]{true,false,false}. \n  private boolean[] propToBooleanArray(String s) {\n    if (s.indexOf(\":\") < 0) {\n      return new boolean[]{Boolean.valueOf(s).booleanValue()};\n    }\n\n    ArrayList<Boolean> a = new ArrayList<>();\n    StringTokenizer st = new StringTokenizer(s, \":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(new Boolean(t));\n    }\n    boolean res[] = new boolean[a.size()];\n    for (int i = 0; i < a.size(); i++) {\n      res[i] = a.get(i).booleanValue();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","sourceNew":"  // extract properties to array, e.g. for \"true:true:false\" return boolean[]{true,false,false}. \n  private boolean[] propToBooleanArray(String s) {\n    if (s.indexOf(\":\") < 0) {\n      return new boolean[]{Boolean.valueOf(s).booleanValue()};\n    }\n\n    ArrayList<Boolean> a = new ArrayList<>();\n    StringTokenizer st = new StringTokenizer(s, \":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Boolean.valueOf(t));\n    }\n    boolean res[] = new boolean[a.size()];\n    for (int i = 0; i < a.size(); i++) {\n      res[i] = a.get(i).booleanValue();\n    }\n    return res;\n  }\n\n","sourceOld":"  // extract properties to array, e.g. for \"true:true:false\" return boolean[]{true,false,false}. \n  private boolean[] propToBooleanArray(String s) {\n    if (s.indexOf(\":\") < 0) {\n      return new boolean[]{Boolean.valueOf(s).booleanValue()};\n    }\n\n    ArrayList<Boolean> a = new ArrayList<>();\n    StringTokenizer st = new StringTokenizer(s, \":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(new Boolean(t));\n    }\n    boolean res[] = new boolean[a.size()];\n    for (int i = 0; i < a.size(); i++) {\n      res[i] = a.get(i).booleanValue();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#propToBooleanArray(String).mjava","sourceNew":"  // extract properties to array, e.g. for \"true:true:false\" return boolean[]{true,false,false}. \n  private boolean[] propToBooleanArray(String s) {\n    if (s.indexOf(\":\") < 0) {\n      return new boolean[]{Boolean.valueOf(s).booleanValue()};\n    }\n\n    ArrayList<Boolean> a = new ArrayList<>();\n    StringTokenizer st = new StringTokenizer(s, \":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(Boolean.valueOf(t));\n    }\n    boolean res[] = new boolean[a.size()];\n    for (int i = 0; i < a.size(); i++) {\n      res[i] = a.get(i).booleanValue();\n    }\n    return res;\n  }\n\n","sourceOld":"  // extract properties to array, e.g. for \"true:true:false\" return boolean[]{true,false,false}. \n  private boolean[] propToBooleanArray(String s) {\n    if (s.indexOf(\":\") < 0) {\n      return new boolean[]{Boolean.valueOf(s).booleanValue()};\n    }\n\n    ArrayList<Boolean> a = new ArrayList<>();\n    StringTokenizer st = new StringTokenizer(s, \":\");\n    while (st.hasMoreTokens()) {\n      String t = st.nextToken();\n      a.add(new Boolean(t));\n    }\n    boolean res[] = new boolean[a.size()];\n    for (int i = 0; i < a.size(); i++) {\n      res[i] = a.get(i).booleanValue();\n    }\n    return res;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}