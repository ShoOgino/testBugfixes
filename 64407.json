{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#getOverseerSort(String).mjava","commits":[{"id":"4e6b620c271c84c0f14919eec7b90083b292ee51","date":1419461736,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#getOverseerSort(String).mjava","pathOld":"/dev/null","sourceNew":"  // Get the shard leader election from ZK and sort it. The node may not actually be there, so retry\n  List<String> getOverseerSort(String key) {\n    List<String> ret = null;\n    try {\n      ret = OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n          \"/collections/\" + COLLECTION_NAME + \"/leader_elect/\" + key + \"/election\");\n      return ret;\n    } catch (KeeperException e) {\n      cloudClient.connect();\n    } catch (InterruptedException e) {\n      return null;\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#getOverseerSort(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#getOverseerSort(String).mjava","sourceNew":"  // Get the shard leader election from ZK and sort it. The node may not actually be there, so retry\n  List<String> getOverseerSort(String key) {\n    List<String> ret = null;\n    try {\n      ret = OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n          \"/collections/\" + COLLECTION_NAME + \"/leader_elect/\" + key + \"/election\");\n      return ret;\n    } catch (KeeperException e) {\n      cloudClient.connect();\n    } catch (InterruptedException e) {\n      return null;\n    }\n    return null;\n  }\n\n","sourceOld":"  // Get the shard leader election from ZK and sort it. The node may not actually be there, so retry\n  List<String> getOverseerSort(String key) {\n    List<String> ret = null;\n    try {\n      ret = OverseerCollectionProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n          \"/collections/\" + COLLECTION_NAME + \"/leader_elect/\" + key + \"/election\");\n      return ret;\n    } catch (KeeperException e) {\n      cloudClient.connect();\n    } catch (InterruptedException e) {\n      return null;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#getOverseerSort(String).mjava","sourceNew":null,"sourceOld":"  // Get the shard leader election from ZK and sort it. The node may not actually be there, so retry\n  List<String> getOverseerSort(String key) {\n    List<String> ret = null;\n    try {\n      ret = OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n          \"/collections/\" + COLLECTION_NAME + \"/leader_elect/\" + key + \"/election\");\n      return ret;\n    } catch (KeeperException e) {\n      cloudClient.connect();\n    } catch (InterruptedException e) {\n      return null;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":4,"author":"Tommaso Teofili","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#getOverseerSort(String).mjava","sourceNew":null,"sourceOld":"  // Get the shard leader election from ZK and sort it. The node may not actually be there, so retry\n  List<String> getOverseerSort(String key) {\n    List<String> ret = null;\n    try {\n      ret = OverseerCollectionConfigSetProcessor.getSortedElectionNodes(cloudClient.getZkStateReader().getZkClient(),\n          \"/collections/\" + COLLECTION_NAME + \"/leader_elect/\" + key + \"/election\");\n      return ret;\n    } catch (KeeperException e) {\n      cloudClient.connect();\n    } catch (InterruptedException e) {\n      return null;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["2209af2c265d2258ec4b29c8cc78622d36994a15","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73fd358e8ec697393d56617f4d9cedaca74dca14":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73fd358e8ec697393d56617f4d9cedaca74dca14"]},"commit2Childs":{"2209af2c265d2258ec4b29c8cc78622d36994a15":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e6b620c271c84c0f14919eec7b90083b292ee51"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6b620c271c84c0f14919eec7b90083b292ee51":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}