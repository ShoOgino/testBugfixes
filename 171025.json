{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.skip(arc.posArcsStart, arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.skip(arc.posArcsStart, arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.pos;\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.pos;\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.length) {\n          // Deref\n          arc.target = nodeRefToAddress[code];\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code + \" derefLen=\" + nodeRefToAddress.length);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.pos;\n    }\n    return arc;\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.skip(arc.posArcsStart, arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.skip(arc.posArcsStart, arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.pos;\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.pos;\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.length) {\n          // Deref\n          arc.target = nodeRefToAddress[code];\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code + \" derefLen=\" + nodeRefToAddress.length);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.pos;\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0984ad47974c2d5d354519ddb2aa8358973a6271","date":1330868053,"type":3,"author":"Christian Moen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n    assert in.bytes == bytes;\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.skip(arc.posArcsStart, arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.skip(arc.posArcsStart, arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.pos;\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.pos;\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.length) {\n          // Deref\n          arc.target = nodeRefToAddress[code];\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code + \" derefLen=\" + nodeRefToAddress.length);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.pos;\n    }\n    return arc;\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.skip(arc.posArcsStart, arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.skip(arc.posArcsStart, arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.pos;\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.pos;\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.length) {\n          // Deref\n          arc.target = nodeRefToAddress[code];\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code + \" derefLen=\" + nodeRefToAddress.length);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.pos;\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n    assert in.bytes == bytes;\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.skip(arc.posArcsStart, arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.skip(arc.posArcsStart, arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.pos;\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.pos;\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.length) {\n          // Deref\n          arc.target = nodeRefToAddress[code];\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code + \" derefLen=\" + nodeRefToAddress.length);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.pos;\n    }\n    return arc;\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.skip(arc.posArcsStart, arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.skip(arc.posArcsStart, arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.pos;\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.pos;\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.length) {\n          // Deref\n          arc.target = nodeRefToAddress[code];\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code + \" derefLen=\" + nodeRefToAddress.length);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.pos;\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edb74c83fff94196b864e08ca033d92823252cb7","date":1339593164,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n    assert in.bytes == bytes;\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.skip(arc.posArcsStart, arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.skip(arc.posArcsStart, arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.pos;\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.pos;\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.size()) {\n          // Deref\n          arc.target = (int) nodeRefToAddress.get(code);\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code + \" derefLen=\" + nodeRefToAddress.length);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.pos;\n    }\n    return arc;\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n    assert in.bytes == bytes;\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.skip(arc.posArcsStart, arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.skip(arc.posArcsStart, arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.pos;\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.pos;\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.length) {\n          // Deref\n          arc.target = nodeRefToAddress[code];\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code + \" derefLen=\" + nodeRefToAddress.length);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.pos;\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ebe14aae60589c9bb6423f3cce02d5f599e1540","date":1348361556,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n    assert in.bytes == bytes;\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.skip(arc.posArcsStart, arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.skip(arc.posArcsStart, arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.pos;\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.pos;\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.size()) {\n          // Deref\n          arc.target = (int) nodeRefToAddress.get(code);\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code + \" derefLen=\" + nodeRefToAddress.length);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.pos;\n    }\n    return arc;\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n    assert in.bytes == bytes;\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.skip(arc.posArcsStart, arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.read(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.skip(arc.posArcsStart, arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.pos;\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.pos;\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.size()) {\n          // Deref\n          arc.target = (int) nodeRefToAddress.get(code);\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code + \" derefLen=\" + nodeRefToAddress.length);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.pos;\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87e78f3c129251e74ecc2ff73a32de0f27cf09d5","date":1358006150,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.setPosition(arc.posArcsStart);\n      in.skipBytes(arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.getPosition();\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.setPosition(arc.posArcsStart);\n            in.skipBytes(arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.getPosition();\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.getPosition();\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.size()) {\n          // Deref\n          arc.target = (int) nodeRefToAddress.get(code);\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.getPosition();\n    }\n    return arc;\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n    assert in.bytes == bytes;\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.skip(arc.posArcsStart, arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.skip(arc.posArcsStart, arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.pos;\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.pos;\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.size()) {\n          // Deref\n          arc.target = (int) nodeRefToAddress.get(code);\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code + \" derefLen=\" + nodeRefToAddress.length);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.pos;\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556c8202987f72dd8458e25e21a82d98fc274979","date":1358008288,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.setPosition(arc.posArcsStart);\n      in.skipBytes(arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.getPosition();\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.setPosition(arc.posArcsStart);\n            in.skipBytes(arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.getPosition();\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.getPosition();\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.size()) {\n          // Deref\n          arc.target = (int) nodeRefToAddress.get(code);\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code);\n        }\n      } else {\n        arc.target = readUnpackedNodeTarget(in);\n      }\n      arc.nextArc = in.getPosition();\n    }\n    return arc;\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.setPosition(arc.posArcsStart);\n      in.skipBytes(arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.getPosition();\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.setPosition(arc.posArcsStart);\n            in.skipBytes(arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.getPosition();\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.getPosition();\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.size()) {\n          // Deref\n          arc.target = (int) nodeRefToAddress.get(code);\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.getPosition();\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","date":1358188277,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.setPosition(arc.posArcsStart);\n      in.skipBytes(arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.getPosition();\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.setPosition(arc.posArcsStart);\n            in.skipBytes(arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.getPosition();\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final long pos = in.getPosition();\n        final long code = in.readVLong();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.size()) {\n          // Deref\n          arc.target = nodeRefToAddress.get((int) code);\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code);\n        }\n      } else {\n        arc.target = readUnpackedNodeTarget(in);\n      }\n      arc.nextArc = in.getPosition();\n    }\n    return arc;\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.setPosition(arc.posArcsStart);\n      in.skipBytes(arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.getPosition();\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.setPosition(arc.posArcsStart);\n            in.skipBytes(arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.getPosition();\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.getPosition();\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.size()) {\n          // Deref\n          arc.target = (int) nodeRefToAddress.get(code);\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code);\n        }\n      } else {\n        arc.target = readUnpackedNodeTarget(in);\n      }\n      arc.nextArc = in.getPosition();\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.setPosition(arc.posArcsStart);\n      in.skipBytes(arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.getPosition();\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.setPosition(arc.posArcsStart);\n            in.skipBytes(arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.getPosition();\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final long pos = in.getPosition();\n        final long code = in.readVLong();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.size()) {\n          // Deref\n          arc.target = nodeRefToAddress.get((int) code);\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code);\n        }\n      } else {\n        arc.target = readUnpackedNodeTarget(in);\n      }\n      arc.nextArc = in.getPosition();\n    }\n    return arc;\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n    assert in.bytes == bytes;\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.skip(arc.posArcsStart, arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.pos = arc.nextArc;\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.pos;\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.pos;\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.skip(arc.posArcsStart, arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.pos;\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final int pos = in.pos;\n        final int code = in.readVInt();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.size()) {\n          // Deref\n          arc.target = (int) nodeRefToAddress.get(code);\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code + \" derefLen=\" + nodeRefToAddress.length);\n        }\n      } else {\n        arc.target = in.readInt();\n      }\n      arc.nextArc = in.pos;\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6244579a467d5f2673ac98265d74bddbea1a8114","date":1478786509,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.setPosition(arc.posArcsStart);\n      in.skipBytes(arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.getPosition();\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.setPosition(arc.posArcsStart);\n          in.skipBytes(arc.bytesPerArc * arc.numArcs);\n        }\n      }\n      arc.target = in.getPosition();\n    } else {\n      arc.target = readUnpackedNodeTarget(in);\n      arc.nextArc = in.getPosition();\n    }\n    return arc;\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.setPosition(arc.posArcsStart);\n      in.skipBytes(arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.getPosition();\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.setPosition(arc.posArcsStart);\n            in.skipBytes(arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.getPosition();\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final long pos = in.getPosition();\n        final long code = in.readVLong();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.size()) {\n          // Deref\n          arc.target = nodeRefToAddress.get((int) code);\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code);\n        }\n      } else {\n        arc.target = readUnpackedNodeTarget(in);\n      }\n      arc.nextArc = in.getPosition();\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.setPosition(arc.posArcsStart);\n      in.skipBytes(arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.getPosition();\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.setPosition(arc.posArcsStart);\n          in.skipBytes(arc.bytesPerArc * arc.numArcs);\n        }\n      }\n      arc.target = in.getPosition();\n    } else {\n      arc.target = readUnpackedNodeTarget(in);\n      arc.nextArc = in.getPosition();\n    }\n    return arc;\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.setPosition(arc.posArcsStart);\n      in.skipBytes(arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.getPosition();\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (nodeAddress == null) {\n        if (!arc.flag(BIT_LAST_ARC)) {\n          if (arc.bytesPerArc == 0) {\n            // must scan\n            seekToNextNode(in);\n          } else {\n            in.setPosition(arc.posArcsStart);\n            in.skipBytes(arc.bytesPerArc * arc.numArcs);\n          }\n        }\n        arc.target = in.getPosition();\n      } else {\n        arc.target = arc.node - 1;\n        assert arc.target > 0;\n      }\n    } else {\n      if (packed) {\n        final long pos = in.getPosition();\n        final long code = in.readVLong();\n        if (arc.flag(BIT_TARGET_DELTA)) {\n          // Address is delta-coded from current address:\n          arc.target = pos + code;\n          //System.out.println(\"    delta pos=\" + pos + \" delta=\" + code + \" target=\" + arc.target);\n        } else if (code < nodeRefToAddress.size()) {\n          // Deref\n          arc.target = nodeRefToAddress.get((int) code);\n          //System.out.println(\"    deref code=\" + code + \" target=\" + arc.target);\n        } else {\n          // Absolute\n          arc.target = code;\n          //System.out.println(\"    abs code=\" + code);\n        }\n      } else {\n        arc.target = readUnpackedNodeTarget(in);\n      }\n      arc.nextArc = in.getPosition();\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae67e1f82a53594208ca929f382ee861dad3d7a8","date":1557134375,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are in an array\n      if (arc.arcIdx > Integer.MIN_VALUE) {\n        arc.arcIdx++;\n        assert arc.arcIdx < arc.numArcs;\n        in.setPosition(arc.posArcsStart - arc.arcIdx * arc.bytesPerArc);\n        arc.flags = in.readByte();\n      } else {\n        assert arc.nextArc <= arc.posArcsStart && arc.nextArc > arc.posArcsStart - arc.numArcs * arc.bytesPerArc;\n        in.setPosition(arc.nextArc);\n        arc.flags = in.readByte();\n        while (flag(arc.flags, BIT_MISSING_ARC)) {\n          // skip empty arcs\n          arc.nextArc -= arc.bytesPerArc;\n          in.skipBytes(arc.bytesPerArc - 1);\n          arc.flags = in.readByte();\n        }\n      }\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc);\n      arc.flags = in.readByte();\n    }\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      if (arc.bytesPerArc == 0) {\n        arc.nextArc = in.getPosition();\n      } else {\n        arc.nextArc -= arc.bytesPerArc;\n      }\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.setPosition(arc.posArcsStart);\n          in.skipBytes(arc.bytesPerArc * arc.numArcs);\n        }\n      }\n      arc.target = in.getPosition();\n    } else {\n      arc.target = readUnpackedNodeTarget(in);\n      if (arc.bytesPerArc > 0 && arc.arcIdx == Integer.MIN_VALUE) {\n        // nextArc was pointing to *this* arc when we entered; advance to the next\n        // if it is a missing arc, we will skip it later\n        arc.nextArc -= arc.bytesPerArc;\n      } else {\n        // in list and fixed table encodings, the next arc always follows this one\n        arc.nextArc = in.getPosition();\n      }\n    }\n    return arc;\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are at fixed entries\n      arc.arcIdx++;\n      assert arc.arcIdx < arc.numArcs;\n      in.setPosition(arc.posArcsStart);\n      in.skipBytes(arc.arcIdx*arc.bytesPerArc);\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc);\n    }\n    arc.flags = in.readByte();\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      arc.nextArc = in.getPosition();\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.setPosition(arc.posArcsStart);\n          in.skipBytes(arc.bytesPerArc * arc.numArcs);\n        }\n      }\n      arc.target = in.getPosition();\n    } else {\n      arc.target = readUnpackedNodeTarget(in);\n      arc.nextArc = in.getPosition();\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc() != 0) {\n      // arcs are in an array\n      if (arc.arcIdx() > Integer.MIN_VALUE) {\n        arc.arcIdx++;\n        assert arc.arcIdx < arc.numArcs;\n        in.setPosition(arc.posArcsStart() - arc.arcIdx() * arc.bytesPerArc());\n        arc.flags = in.readByte();\n      } else {\n        assert arc.nextArc() <= arc.posArcsStart() && arc.nextArc() > arc.posArcsStart() - arc.numArcs() * arc.bytesPerArc();\n        in.setPosition(arc.nextArc());\n        arc.flags = in.readByte();\n        while (flag(arc.flags(), BIT_MISSING_ARC)) {\n          // skip empty arcs\n          arc.nextArc = arc.nextArc() - arc.bytesPerArc();\n          in.skipBytes(arc.bytesPerArc() - 1);\n          arc.flags = in.readByte();\n        }\n      }\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc());\n      arc.flags = in.readByte();\n    }\n\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      if (arc.bytesPerArc() == 0) {\n        arc.nextArc = in.getPosition();\n      } else {\n        arc.nextArc -= arc.bytesPerArc();\n      }\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc() == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.setPosition(arc.posArcsStart());\n          in.skipBytes(arc.bytesPerArc() * arc.numArcs());\n        }\n      }\n      arc.target = in.getPosition();\n    } else {\n      arc.target = readUnpackedNodeTarget(in);\n      if (arc.bytesPerArc() > 0 && arc.arcIdx() == Integer.MIN_VALUE) {\n        // nextArc was pointing to *this* arc when we entered; advance to the next\n        // if it is a missing arc, we will skip it later\n        arc.nextArc = arc.nextArc() - arc.bytesPerArc();\n      } else {\n        // in list and fixed table encodings, the next arc always follows this one\n        arc.nextArc = in.getPosition();\n      }\n    }\n    return arc;\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are in an array\n      if (arc.arcIdx > Integer.MIN_VALUE) {\n        arc.arcIdx++;\n        assert arc.arcIdx < arc.numArcs;\n        in.setPosition(arc.posArcsStart - arc.arcIdx * arc.bytesPerArc);\n        arc.flags = in.readByte();\n      } else {\n        assert arc.nextArc <= arc.posArcsStart && arc.nextArc > arc.posArcsStart - arc.numArcs * arc.bytesPerArc;\n        in.setPosition(arc.nextArc);\n        arc.flags = in.readByte();\n        while (flag(arc.flags, BIT_MISSING_ARC)) {\n          // skip empty arcs\n          arc.nextArc -= arc.bytesPerArc;\n          in.skipBytes(arc.bytesPerArc - 1);\n          arc.flags = in.readByte();\n        }\n      }\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc);\n      arc.flags = in.readByte();\n    }\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      if (arc.bytesPerArc == 0) {\n        arc.nextArc = in.getPosition();\n      } else {\n        arc.nextArc -= arc.bytesPerArc;\n      }\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.setPosition(arc.posArcsStart);\n          in.skipBytes(arc.bytesPerArc * arc.numArcs);\n        }\n      }\n      arc.target = in.getPosition();\n    } else {\n      arc.target = readUnpackedNodeTarget(in);\n      if (arc.bytesPerArc > 0 && arc.arcIdx == Integer.MIN_VALUE) {\n        // nextArc was pointing to *this* arc when we entered; advance to the next\n        // if it is a missing arc, we will skip it later\n        arc.nextArc -= arc.bytesPerArc;\n      } else {\n        // in list and fixed table encodings, the next arc always follows this one\n        arc.nextArc = in.getPosition();\n      }\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc() != 0) {\n      // arcs are in an array\n      if (arc.arcIdx() > Integer.MIN_VALUE) {\n        arc.arcIdx++;\n        assert arc.arcIdx < arc.numArcs;\n        in.setPosition(arc.posArcsStart() - arc.arcIdx() * arc.bytesPerArc());\n        arc.flags = in.readByte();\n      } else {\n        assert arc.nextArc() <= arc.posArcsStart() && arc.nextArc() > arc.posArcsStart() - arc.numArcs() * arc.bytesPerArc();\n        in.setPosition(arc.nextArc());\n        arc.flags = in.readByte();\n        while (flag(arc.flags(), BIT_MISSING_ARC)) {\n          // skip empty arcs\n          arc.nextArc = arc.nextArc() - arc.bytesPerArc();\n          in.skipBytes(arc.bytesPerArc() - 1);\n          arc.flags = in.readByte();\n        }\n      }\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc());\n      arc.flags = in.readByte();\n    }\n    return readArc(arc, in);\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc() != 0) {\n      // arcs are in an array\n      if (arc.arcIdx() > Integer.MIN_VALUE) {\n        arc.arcIdx++;\n        assert arc.arcIdx < arc.numArcs;\n        in.setPosition(arc.posArcsStart() - arc.arcIdx() * arc.bytesPerArc());\n        arc.flags = in.readByte();\n      } else {\n        assert arc.nextArc() <= arc.posArcsStart() && arc.nextArc() > arc.posArcsStart() - arc.numArcs() * arc.bytesPerArc();\n        in.setPosition(arc.nextArc());\n        arc.flags = in.readByte();\n        while (flag(arc.flags(), BIT_MISSING_ARC)) {\n          // skip empty arcs\n          arc.nextArc = arc.nextArc() - arc.bytesPerArc();\n          in.skipBytes(arc.bytesPerArc() - 1);\n          arc.flags = in.readByte();\n        }\n      }\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc());\n      arc.flags = in.readByte();\n    }\n\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      if (arc.bytesPerArc() == 0) {\n        arc.nextArc = in.getPosition();\n      } else {\n        arc.nextArc -= arc.bytesPerArc();\n      }\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc() == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.setPosition(arc.posArcsStart());\n          in.skipBytes(arc.bytesPerArc() * arc.numArcs());\n        }\n      }\n      arc.target = in.getPosition();\n    } else {\n      arc.target = readUnpackedNodeTarget(in);\n      if (arc.bytesPerArc() > 0 && arc.arcIdx() == Integer.MIN_VALUE) {\n        // nextArc was pointing to *this* arc when we entered; advance to the next\n        // if it is a missing arc, we will skip it later\n        arc.nextArc = arc.nextArc() - arc.bytesPerArc();\n      } else {\n        // in list and fixed table encodings, the next arc always follows this one\n        arc.nextArc = in.getPosition();\n      }\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc() != 0) {\n      // arcs are in an array\n      if (arc.arcIdx() > Integer.MIN_VALUE) {\n        arc.arcIdx++;\n        assert arc.arcIdx < arc.numArcs;\n        in.setPosition(arc.posArcsStart() - arc.arcIdx() * arc.bytesPerArc());\n        arc.flags = in.readByte();\n      } else {\n        assert arc.nextArc() <= arc.posArcsStart() && arc.nextArc() > arc.posArcsStart() - arc.numArcs() * arc.bytesPerArc();\n        in.setPosition(arc.nextArc());\n        arc.flags = in.readByte();\n        while (flag(arc.flags(), BIT_MISSING_ARC)) {\n          // skip empty arcs\n          arc.nextArc = arc.nextArc() - arc.bytesPerArc();\n          in.skipBytes(arc.bytesPerArc() - 1);\n          arc.flags = in.readByte();\n        }\n      }\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc());\n      arc.flags = in.readByte();\n    }\n    return readArc(arc, in);\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc != 0) {\n      // arcs are in an array\n      if (arc.arcIdx > Integer.MIN_VALUE) {\n        arc.arcIdx++;\n        assert arc.arcIdx < arc.numArcs;\n        in.setPosition(arc.posArcsStart - arc.arcIdx * arc.bytesPerArc);\n        arc.flags = in.readByte();\n      } else {\n        assert arc.nextArc <= arc.posArcsStart && arc.nextArc > arc.posArcsStart - arc.numArcs * arc.bytesPerArc;\n        in.setPosition(arc.nextArc);\n        arc.flags = in.readByte();\n        while (flag(arc.flags, BIT_MISSING_ARC)) {\n          // skip empty arcs\n          arc.nextArc -= arc.bytesPerArc;\n          in.skipBytes(arc.bytesPerArc - 1);\n          arc.flags = in.readByte();\n        }\n      }\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc);\n      arc.flags = in.readByte();\n    }\n    arc.label = readLabel(in);\n\n    if (arc.flag(BIT_ARC_HAS_OUTPUT)) {\n      arc.output = outputs.read(in);\n    } else {\n      arc.output = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_ARC_HAS_FINAL_OUTPUT)) {\n      arc.nextFinalOutput = outputs.readFinalOutput(in);\n    } else {\n      arc.nextFinalOutput = outputs.getNoOutput();\n    }\n\n    if (arc.flag(BIT_STOP_NODE)) {\n      if (arc.flag(BIT_FINAL_ARC)) {\n        arc.target = FINAL_END_NODE;\n      } else {\n        arc.target = NON_FINAL_END_NODE;\n      }\n      if (arc.bytesPerArc == 0) {\n        arc.nextArc = in.getPosition();\n      } else {\n        arc.nextArc -= arc.bytesPerArc;\n      }\n    } else if (arc.flag(BIT_TARGET_NEXT)) {\n      arc.nextArc = in.getPosition();\n      // TODO: would be nice to make this lazy -- maybe\n      // caller doesn't need the target and is scanning arcs...\n      if (!arc.flag(BIT_LAST_ARC)) {\n        if (arc.bytesPerArc == 0) {\n          // must scan\n          seekToNextNode(in);\n        } else {\n          in.setPosition(arc.posArcsStart);\n          in.skipBytes(arc.bytesPerArc * arc.numArcs);\n        }\n      }\n      arc.target = in.getPosition();\n    } else {\n      arc.target = readUnpackedNodeTarget(in);\n      if (arc.bytesPerArc > 0 && arc.arcIdx == Integer.MIN_VALUE) {\n        // nextArc was pointing to *this* arc when we entered; advance to the next\n        // if it is a missing arc, we will skip it later\n        arc.nextArc -= arc.bytesPerArc;\n      } else {\n        // in list and fixed table encodings, the next arc always follows this one\n        arc.nextArc = in.getPosition();\n      }\n    }\n    return arc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    switch (arc.nodeFlags()) {\n\n      case ARCS_FOR_BINARY_SEARCH:\n        assert arc.bytesPerArc() > 0;\n        arc.arcIdx++;\n        assert arc.arcIdx() >= 0 && arc.arcIdx() < arc.numArcs();\n        in.setPosition(arc.posArcsStart() - arc.arcIdx() * arc.bytesPerArc());\n        arc.flags = in.readByte();\n        break;\n\n      case ARCS_FOR_DIRECT_ADDRESSING:\n        assert arc.bytesPerArc() > 0;\n        assert assertPresenceBytesAreValid(arc);\n        assert arc.arcIdx() == -1 || arc.bitTable().isBitSet(arc.arcIdx());\n        int nextIndex = arc.bitTable().nextBitSet(arc.arcIdx());\n        return readArcByDirectAddressing(arc, in, nextIndex);\n\n      default:\n        // Variable length arcs - linear search.\n        assert arc.bytesPerArc() == 0;\n        in.setPosition(arc.nextArc());\n        arc.flags = in.readByte();\n    }\n    return readArc(arc, in);\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    // this is a continuing arc in a fixed array\n    if (arc.bytesPerArc() != 0) {\n      // arcs are in an array\n      if (arc.arcIdx() > Integer.MIN_VALUE) {\n        arc.arcIdx++;\n        assert arc.arcIdx < arc.numArcs;\n        in.setPosition(arc.posArcsStart() - arc.arcIdx() * arc.bytesPerArc());\n        arc.flags = in.readByte();\n      } else {\n        assert arc.nextArc() <= arc.posArcsStart() && arc.nextArc() > arc.posArcsStart() - arc.numArcs() * arc.bytesPerArc();\n        in.setPosition(arc.nextArc());\n        arc.flags = in.readByte();\n        while (flag(arc.flags(), BIT_MISSING_ARC)) {\n          // skip empty arcs\n          arc.nextArc = arc.nextArc() - arc.bytesPerArc();\n          in.skipBytes(arc.bytesPerArc() - 1);\n          arc.flags = in.readByte();\n        }\n      }\n    } else {\n      // arcs are packed\n      in.setPosition(arc.nextArc());\n      arc.flags = in.readByte();\n    }\n    return readArc(arc, in);\n  }\n\n","bugFix":null,"bugIntro":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06086b5bd0f0d57858f0675becc58edf1f6b7c11","date":1586421397,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FST#readNextRealArc(Arc[T],BytesReader).mjava","sourceNew":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    switch (arc.nodeFlags()) {\n\n      case ARCS_FOR_BINARY_SEARCH:\n        assert arc.bytesPerArc() > 0;\n        arc.arcIdx++;\n        assert arc.arcIdx() >= 0 && arc.arcIdx() < arc.numArcs();\n        in.setPosition(arc.posArcsStart() - arc.arcIdx() * arc.bytesPerArc());\n        arc.flags = in.readByte();\n        break;\n\n      case ARCS_FOR_DIRECT_ADDRESSING:\n        assert BitTable.assertIsValid(arc, in);\n        assert arc.arcIdx() == -1 || BitTable.isBitSet(arc.arcIdx(), arc, in);\n        int nextIndex = BitTable.nextBitSet(arc.arcIdx(), arc, in);\n        return readArcByDirectAddressing(arc, in, nextIndex, arc.presenceIndex + 1);\n\n      default:\n        // Variable length arcs - linear search.\n        assert arc.bytesPerArc() == 0;\n        in.setPosition(arc.nextArc());\n        arc.flags = in.readByte();\n    }\n    return readArc(arc, in);\n  }\n\n","sourceOld":"  /** Never returns null, but you should never call this if\n   *  arc.isLast() is true. */\n  public Arc<T> readNextRealArc(Arc<T> arc, final BytesReader in) throws IOException {\n\n    // TODO: can't assert this because we call from readFirstArc\n    // assert !flag(arc.flags, BIT_LAST_ARC);\n\n    switch (arc.nodeFlags()) {\n\n      case ARCS_FOR_BINARY_SEARCH:\n        assert arc.bytesPerArc() > 0;\n        arc.arcIdx++;\n        assert arc.arcIdx() >= 0 && arc.arcIdx() < arc.numArcs();\n        in.setPosition(arc.posArcsStart() - arc.arcIdx() * arc.bytesPerArc());\n        arc.flags = in.readByte();\n        break;\n\n      case ARCS_FOR_DIRECT_ADDRESSING:\n        assert arc.bytesPerArc() > 0;\n        assert assertPresenceBytesAreValid(arc);\n        assert arc.arcIdx() == -1 || arc.bitTable().isBitSet(arc.arcIdx());\n        int nextIndex = arc.bitTable().nextBitSet(arc.arcIdx());\n        return readArcByDirectAddressing(arc, in, nextIndex);\n\n      default:\n        // Variable length arcs - linear search.\n        assert arc.bytesPerArc() == 0;\n        in.setPosition(arc.nextArc());\n        arc.flags = in.readByte();\n    }\n    return readArc(arc, in);\n  }\n\n","bugFix":["71d31a7d5773508492505519bb5230b87c8937ad"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0984ad47974c2d5d354519ddb2aa8358973a6271"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["556c8202987f72dd8458e25e21a82d98fc274979"],"0984ad47974c2d5d354519ddb2aa8358973a6271":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["5ebe14aae60589c9bb6423f3cce02d5f599e1540","d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"556c8202987f72dd8458e25e21a82d98fc274979":["87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244":["54204c8a3ca26aeafd273139fc29baf70d0f6786"],"6244579a467d5f2673ac98265d74bddbea1a8114":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0","6244579a467d5f2673ac98265d74bddbea1a8114"],"71d31a7d5773508492505519bb5230b87c8937ad":["f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["6244579a467d5f2673ac98265d74bddbea1a8114"],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"f8061ddd97f3352007d927dae445884a6f3d857b":["ae67e1f82a53594208ca929f382ee861dad3d7a8","f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"],"54204c8a3ca26aeafd273139fc29baf70d0f6786":["ae67e1f82a53594208ca929f382ee861dad3d7a8"],"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["71d31a7d5773508492505519bb5230b87c8937ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edb74c83fff94196b864e08ca033d92823252cb7":["0984ad47974c2d5d354519ddb2aa8358973a6271"],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["edb74c83fff94196b864e08ca033d92823252cb7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"0984ad47974c2d5d354519ddb2aa8358973a6271":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","edb74c83fff94196b864e08ca033d92823252cb7"],"d3c397b1515e745d8b12d70edfc0e17cb7eac7f0":["8917bfede3b4ca30f4305c1e391e9218959cd723","6244579a467d5f2673ac98265d74bddbea1a8114","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","0984ad47974c2d5d354519ddb2aa8358973a6271"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"556c8202987f72dd8458e25e21a82d98fc274979":["d3c397b1515e745d8b12d70edfc0e17cb7eac7f0"],"f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244":["71d31a7d5773508492505519bb5230b87c8937ad","f8061ddd97f3352007d927dae445884a6f3d857b"],"6244579a467d5f2673ac98265d74bddbea1a8114":["199dfa410f1fdbfd3294106b04096cce5ed34b21","ae67e1f82a53594208ca929f382ee861dad3d7a8"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"87e78f3c129251e74ecc2ff73a32de0f27cf09d5":["556c8202987f72dd8458e25e21a82d98fc274979"],"71d31a7d5773508492505519bb5230b87c8937ad":["06086b5bd0f0d57858f0675becc58edf1f6b7c11"],"ae67e1f82a53594208ca929f382ee861dad3d7a8":["f8061ddd97f3352007d927dae445884a6f3d857b","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f9b7d62e1503063c6f8cd0aeaa3ca4f8428cd244"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"06086b5bd0f0d57858f0675becc58edf1f6b7c11":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"edb74c83fff94196b864e08ca033d92823252cb7":["5ebe14aae60589c9bb6423f3cce02d5f599e1540"],"5ebe14aae60589c9bb6423f3cce02d5f599e1540":["8917bfede3b4ca30f4305c1e391e9218959cd723","87e78f3c129251e74ecc2ff73a32de0f27cf09d5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8917bfede3b4ca30f4305c1e391e9218959cd723","199dfa410f1fdbfd3294106b04096cce5ed34b21","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}