{"path":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","commits":[{"id":"68759a52d8da5c4ac149c4484a1dbc071b480bb3","date":1276544744,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#doTestFuncs().mjava","sourceNew":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","sourceOld":"  public void doTestFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c469cad18e1dcd393c2fedefaabbb32a56ec2ba9","date":1297957482,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","sourceNew":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","sourceOld":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","sourceNew":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","sourceOld":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","sourceNew":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","sourceOld":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","sourceNew":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","sourceOld":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","sourceNew":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","sourceOld":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","pathOld":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#testFuncs().mjava","sourceNew":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","sourceOld":"  @Test\n  public void testFuncs() throws Exception {\n    assertU(adoc(\"id\", \"1\", \"foo_d\", \"9\"));\n    assertU(commit());    \n\n    dofunc(\"1.0\", 1.0);\n    dofunc(\"e()\", Math.E);\n    dofunc(\"pi()\", Math.PI);\n    dofunc(\"add(2,3)\", 2+3);\n    dofunc(\"mul(2,3)\", 2*3);\n    dofunc(\"rad(45)\", Math.toRadians(45));\n    dofunc(\"deg(.5)\", Math.toDegrees(.5));\n    dofunc(\"sqrt(9)\", Math.sqrt(9));\n    dofunc(\"cbrt(8)\", Math.cbrt(8));\n    dofunc(\"max(0,1)\", Math.max(0,1));\n    dofunc(\"min(0,1)\", Math.min(0,1));\n    dofunc(\"log(100)\", Math.log10(100));\n    dofunc(\"ln(3)\", Math.log(3));\n    dofunc(\"exp(1)\", Math.exp(1));\n    dofunc(\"sin(.5)\", Math.sin(.5));\n    dofunc(\"cos(.5)\", Math.cos(.5));\n    dofunc(\"tan(.5)\", Math.tan(.5));\n    dofunc(\"asin(.5)\", Math.asin(.5));\n    dofunc(\"acos(.5)\", Math.acos(.5));\n    dofunc(\"atan(.5)\", Math.atan(.5));\n    dofunc(\"sinh(.5)\", Math.sinh(.5));\n    dofunc(\"cosh(.5)\", Math.cosh(.5));\n    dofunc(\"tanh(.5)\", Math.tanh(.5));\n    dofunc(\"ceil(2.3)\", Math.ceil(2.3));\n    dofunc(\"floor(2.3)\", Math.floor(2.3));\n    dofunc(\"rint(2.3)\", Math.rint(2.3));\n    dofunc(\"pow(2,0.5)\", Math.pow(2,0.5));\n    dofunc(\"hypot(3,4)\", Math.hypot(3,4));\n    dofunc(\"atan2(.25,.5)\", Math.atan2(.25,.5));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c469cad18e1dcd393c2fedefaabbb32a56ec2ba9":["68759a52d8da5c4ac149c4484a1dbc071b480bb3"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["68759a52d8da5c4ac149c4484a1dbc071b480bb3","c469cad18e1dcd393c2fedefaabbb32a56ec2ba9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c469cad18e1dcd393c2fedefaabbb32a56ec2ba9"],"c26f00b574427b55127e869b935845554afde1fa":["c469cad18e1dcd393c2fedefaabbb32a56ec2ba9","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68759a52d8da5c4ac149c4484a1dbc071b480bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["c469cad18e1dcd393c2fedefaabbb32a56ec2ba9"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","68759a52d8da5c4ac149c4484a1dbc071b480bb3"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["5f4e87790277826a2aea119328600dfb07761f32","c469cad18e1dcd393c2fedefaabbb32a56ec2ba9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c469cad18e1dcd393c2fedefaabbb32a56ec2ba9":["f1bdbf92da222965b46c0a942c3857ba56e5c638","c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68759a52d8da5c4ac149c4484a1dbc071b480bb3","5f4e87790277826a2aea119328600dfb07761f32"],"68759a52d8da5c4ac149c4484a1dbc071b480bb3":["c469cad18e1dcd393c2fedefaabbb32a56ec2ba9","f1bdbf92da222965b46c0a942c3857ba56e5c638","5f4e87790277826a2aea119328600dfb07761f32"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"5f4e87790277826a2aea119328600dfb07761f32":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}