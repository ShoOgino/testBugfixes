{"path":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","commits":[{"id":"b291fa953aeb2a135ed14740cb774eb76bfc64b0","date":1386184301,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public TokenizeText(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      this.inputFieldName = getConfigs().getString(config, \"inputField\");\n      this.outputFieldName = getConfigs().getString(config, \"outputField\");      \n      String solrFieldType = getConfigs().getString(config, \"solrFieldType\");      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      FieldType fieldType = schema.getFieldTypeByName(solrFieldType);\n      if (fieldType == null) {\n        throw new MorphlineCompilationException(\"Missing Solr field type in schema.xml for name: \" + solrFieldType, config);\n      }\n      this.analyzer = fieldType.getAnalyzer();\n      Preconditions.checkNotNull(analyzer);\n      try { // register CharTermAttribute for later (implicit) reuse\n        this.token = analyzer.tokenStream(\"content\", reader).addAttribute(CharTermAttribute.class);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot create token stream\", config, e);\n      }\n      Preconditions.checkNotNull(token);\n      validateArguments();\n    }\n\n","sourceOld":"    public TokenizeText(Config config, Command parent, Command child, MorphlineContext context) {\n      super(config, parent, child, context);\n      this.inputFieldName = getConfigs().getString(config, \"inputField\");\n      this.outputFieldName = getConfigs().getString(config, \"outputField\");      \n      String solrFieldType = getConfigs().getString(config, \"solrFieldType\");      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      FieldType fieldType = schema.getFieldTypeByName(solrFieldType);\n      if (fieldType == null) {\n        throw new MorphlineCompilationException(\"Missing Solr field type in schema.xml for name: \" + solrFieldType, config);\n      }\n      this.analyzer = fieldType.getAnalyzer();\n      Preconditions.checkNotNull(analyzer);\n      try { // register CharTermAttribute for later (implicit) reuse\n        this.token = analyzer.tokenStream(\"content\", reader).addAttribute(CharTermAttribute.class);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot create token stream\", config, e);\n      }\n      Preconditions.checkNotNull(token);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"/dev/null","sourceNew":"    public TokenizeText(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      this.inputFieldName = getConfigs().getString(config, \"inputField\");\n      this.outputFieldName = getConfigs().getString(config, \"outputField\");      \n      String solrFieldType = getConfigs().getString(config, \"solrFieldType\");      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      FieldType fieldType = schema.getFieldTypeByName(solrFieldType);\n      if (fieldType == null) {\n        throw new MorphlineCompilationException(\"Missing Solr field type in schema.xml for name: \" + solrFieldType, config);\n      }\n      this.analyzer = fieldType.getAnalyzer();\n      Preconditions.checkNotNull(analyzer);\n      try { // register CharTermAttribute for later (implicit) reuse\n        this.token = analyzer.tokenStream(\"content\", reader).addAttribute(CharTermAttribute.class);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot create token stream\", config, e);\n      }\n      Preconditions.checkNotNull(token);\n      validateArguments();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"123698fbe83b595f9e084f0019cd35ab4a01d7f7","date":1399070065,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public TokenizeText(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      this.inputFieldName = getConfigs().getString(config, \"inputField\");\n      this.outputFieldName = getConfigs().getString(config, \"outputField\");      \n      String solrFieldType = getConfigs().getString(config, \"solrFieldType\");      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      FieldType fieldType = schema.getFieldTypeByName(solrFieldType);\n      if (fieldType == null) {\n        throw new MorphlineCompilationException(\"Missing Solr field type in schema.xml for name: \" + solrFieldType, config);\n      }\n      this.analyzer = fieldType.getIndexAnalyzer();\n      Preconditions.checkNotNull(analyzer);\n      try { // register CharTermAttribute for later (implicit) reuse\n        this.token = analyzer.tokenStream(\"content\", reader).addAttribute(CharTermAttribute.class);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot create token stream\", config, e);\n      }\n      Preconditions.checkNotNull(token);\n      validateArguments();\n    }\n\n","sourceOld":"    public TokenizeText(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      this.inputFieldName = getConfigs().getString(config, \"inputField\");\n      this.outputFieldName = getConfigs().getString(config, \"outputField\");      \n      String solrFieldType = getConfigs().getString(config, \"solrFieldType\");      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      FieldType fieldType = schema.getFieldTypeByName(solrFieldType);\n      if (fieldType == null) {\n        throw new MorphlineCompilationException(\"Missing Solr field type in schema.xml for name: \" + solrFieldType, config);\n      }\n      this.analyzer = fieldType.getAnalyzer();\n      Preconditions.checkNotNull(analyzer);\n      try { // register CharTermAttribute for later (implicit) reuse\n        this.token = analyzer.tokenStream(\"content\", reader).addAttribute(CharTermAttribute.class);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot create token stream\", config, e);\n      }\n      Preconditions.checkNotNull(token);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e859719dc778fb66d3d21e7be08cd408fc2bde98","date":1446717611,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public TokenizeText(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      this.inputFieldName = getConfigs().getString(config, \"inputField\");\n      this.outputFieldName = getConfigs().getString(config, \"outputField\");      \n      String solrFieldType = getConfigs().getString(config, \"solrFieldType\");      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      FieldType fieldType = schema.getFieldTypeByName(solrFieldType);\n      if (fieldType == null) {\n        throw new MorphlineCompilationException(\"Missing Solr field type in schema.xml for name: \" + solrFieldType, config);\n      }\n      this.analyzer = fieldType.getIndexAnalyzer();\n      Preconditions.checkNotNull(analyzer);\n      // register CharTermAttribute for later (implicit) reuse\n      this.token = analyzer.tokenStream(\"content\", reader).addAttribute(CharTermAttribute.class);\n      Preconditions.checkNotNull(token);\n      validateArguments();\n    }\n\n","sourceOld":"    public TokenizeText(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      this.inputFieldName = getConfigs().getString(config, \"inputField\");\n      this.outputFieldName = getConfigs().getString(config, \"outputField\");      \n      String solrFieldType = getConfigs().getString(config, \"solrFieldType\");      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      FieldType fieldType = schema.getFieldTypeByName(solrFieldType);\n      if (fieldType == null) {\n        throw new MorphlineCompilationException(\"Missing Solr field type in schema.xml for name: \" + solrFieldType, config);\n      }\n      this.analyzer = fieldType.getIndexAnalyzer();\n      Preconditions.checkNotNull(analyzer);\n      try { // register CharTermAttribute for later (implicit) reuse\n        this.token = analyzer.tokenStream(\"content\", reader).addAttribute(CharTermAttribute.class);\n      } catch (IOException e) {\n        throw new MorphlineCompilationException(\"Cannot create token stream\", config, e);\n      }\n      Preconditions.checkNotNull(token);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public TokenizeText(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      this.inputFieldName = getConfigs().getString(config, \"inputField\");\n      this.outputFieldName = getConfigs().getString(config, \"outputField\");      \n      String solrFieldType = getConfigs().getString(config, \"solrFieldType\");      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      FieldType fieldType = schema.getFieldTypeByName(solrFieldType);\n      if (fieldType == null) {\n        throw new MorphlineCompilationException(\"Missing Solr field type in schema.xml for name: \" + solrFieldType, config);\n      }\n      this.analyzer = Objects.requireNonNull(fieldType.getIndexAnalyzer());\n      // register CharTermAttribute for later (implicit) reuse\n      this.token = Objects.requireNonNull(analyzer.tokenStream(\"content\", reader).addAttribute(CharTermAttribute.class));\n      validateArguments();\n    }\n\n","sourceOld":"    public TokenizeText(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      this.inputFieldName = getConfigs().getString(config, \"inputField\");\n      this.outputFieldName = getConfigs().getString(config, \"outputField\");      \n      String solrFieldType = getConfigs().getString(config, \"solrFieldType\");      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      FieldType fieldType = schema.getFieldTypeByName(solrFieldType);\n      if (fieldType == null) {\n        throw new MorphlineCompilationException(\"Missing Solr field type in schema.xml for name: \" + solrFieldType, config);\n      }\n      this.analyzer = fieldType.getIndexAnalyzer();\n      Preconditions.checkNotNull(analyzer);\n      // register CharTermAttribute for later (implicit) reuse\n      this.token = analyzer.tokenStream(\"content\", reader).addAttribute(CharTermAttribute.class);\n      Preconditions.checkNotNull(token);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","sourceNew":"    public TokenizeText(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      this.inputFieldName = getConfigs().getString(config, \"inputField\");\n      this.outputFieldName = getConfigs().getString(config, \"outputField\");      \n      String solrFieldType = getConfigs().getString(config, \"solrFieldType\");      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      FieldType fieldType = schema.getFieldTypeByName(solrFieldType);\n      if (fieldType == null) {\n        throw new MorphlineCompilationException(\"Missing Solr field type in schema.xml for name: \" + solrFieldType, config);\n      }\n      this.analyzer = Objects.requireNonNull(fieldType.getIndexAnalyzer());\n      // register CharTermAttribute for later (implicit) reuse\n      this.token = Objects.requireNonNull(analyzer.tokenStream(\"content\", reader).addAttribute(CharTermAttribute.class));\n      validateArguments();\n    }\n\n","sourceOld":"    public TokenizeText(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      this.inputFieldName = getConfigs().getString(config, \"inputField\");\n      this.outputFieldName = getConfigs().getString(config, \"outputField\");      \n      String solrFieldType = getConfigs().getString(config, \"solrFieldType\");      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      FieldType fieldType = schema.getFieldTypeByName(solrFieldType);\n      if (fieldType == null) {\n        throw new MorphlineCompilationException(\"Missing Solr field type in schema.xml for name: \" + solrFieldType, config);\n      }\n      this.analyzer = fieldType.getIndexAnalyzer();\n      Preconditions.checkNotNull(analyzer);\n      // register CharTermAttribute for later (implicit) reuse\n      this.token = analyzer.tokenStream(\"content\", reader).addAttribute(CharTermAttribute.class);\n      Preconditions.checkNotNull(token);\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","sourceNew":null,"sourceOld":"    public TokenizeText(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      this.inputFieldName = getConfigs().getString(config, \"inputField\");\n      this.outputFieldName = getConfigs().getString(config, \"outputField\");      \n      String solrFieldType = getConfigs().getString(config, \"solrFieldType\");      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      FieldType fieldType = schema.getFieldTypeByName(solrFieldType);\n      if (fieldType == null) {\n        throw new MorphlineCompilationException(\"Missing Solr field type in schema.xml for name: \" + solrFieldType, config);\n      }\n      this.analyzer = Objects.requireNonNull(fieldType.getIndexAnalyzer());\n      // register CharTermAttribute for later (implicit) reuse\n      this.token = Objects.requireNonNull(analyzer.tokenStream(\"content\", reader).addAttribute(CharTermAttribute.class));\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.TokenizeText#TokenizeText(CommandBuilder,Config,Command,Command,MorphlineContext).mjava","sourceNew":null,"sourceOld":"    public TokenizeText(CommandBuilder builder, Config config, Command parent, Command child, MorphlineContext context) {\n      super(builder, config, parent, child, context);\n      this.inputFieldName = getConfigs().getString(config, \"inputField\");\n      this.outputFieldName = getConfigs().getString(config, \"outputField\");      \n      String solrFieldType = getConfigs().getString(config, \"solrFieldType\");      \n      Config solrLocatorConfig = getConfigs().getConfig(config, \"solrLocator\");\n      SolrLocator locator = new SolrLocator(solrLocatorConfig, context);\n      LOG.debug(\"solrLocator: {}\", locator);\n      IndexSchema schema = locator.getIndexSchema();\n      FieldType fieldType = schema.getFieldTypeByName(solrFieldType);\n      if (fieldType == null) {\n        throw new MorphlineCompilationException(\"Missing Solr field type in schema.xml for name: \" + solrFieldType, config);\n      }\n      this.analyzer = Objects.requireNonNull(fieldType.getIndexAnalyzer());\n      // register CharTermAttribute for later (implicit) reuse\n      this.token = Objects.requireNonNull(analyzer.tokenStream(\"content\", reader).addAttribute(CharTermAttribute.class));\n      validateArguments();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b291fa953aeb2a135ed14740cb774eb76bfc64b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["b291fa953aeb2a135ed14740cb774eb76bfc64b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["e859719dc778fb66d3d21e7be08cd408fc2bde98"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b291fa953aeb2a135ed14740cb774eb76bfc64b0"],"320888923ec13b91f53082558f01f4c9960dd226":["e859719dc778fb66d3d21e7be08cd408fc2bde98","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"e859719dc778fb66d3d21e7be08cd408fc2bde98":["123698fbe83b595f9e084f0019cd35ab4a01d7f7"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"b291fa953aeb2a135ed14740cb774eb76bfc64b0":["123698fbe83b595f9e084f0019cd35ab4a01d7f7","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b291fa953aeb2a135ed14740cb774eb76bfc64b0","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"123698fbe83b595f9e084f0019cd35ab4a01d7f7":["e859719dc778fb66d3d21e7be08cd408fc2bde98"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["12109b652e9210b8d58fca47f6c4a725d058a58e","320888923ec13b91f53082558f01f4c9960dd226","fe1c4aa9af769a38e878f608070f672efbeac27f"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"320888923ec13b91f53082558f01f4c9960dd226":[],"e859719dc778fb66d3d21e7be08cd408fc2bde98":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","320888923ec13b91f53082558f01f4c9960dd226"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","320888923ec13b91f53082558f01f4c9960dd226","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}