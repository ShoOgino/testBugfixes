{"path":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the DirectoryReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    currentSearcher = searcherFactory.newSearcher(DirectoryReader.open(dir));\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the DirectoryReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    currentSearcher = searcherFactory.newSearcher(DirectoryReader.open(dir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e81b0b3c14cf61c8ec366450276ab80654f7d0d","date":1329233774,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the DirectoryReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    current = searcherFactory.newSearcher(DirectoryReader.open(dir));\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the DirectoryReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    currentSearcher = searcherFactory.newSearcher(DirectoryReader.open(dir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c380c22ff3b659b2d7412a3335f853d354d17568","date":1329505731,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the DirectoryReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    current = getSearcher(searcherFactory, DirectoryReader.open(dir));\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the DirectoryReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    current = searcherFactory.newSearcher(DirectoryReader.open(dir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the DirectoryReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException if there is a low-level I/O error\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    current = getSearcher(searcherFactory, DirectoryReader.open(dir));\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the DirectoryReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    current = getSearcher(searcherFactory, DirectoryReader.open(dir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0dfae671422e7453a9199aa320f91427cd80d60","date":1427895926,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the DirectoryReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException if there is a low-level I/O error\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    current = getSearcher(searcherFactory, DirectoryReader.open(dir), null);\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the DirectoryReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException if there is a low-level I/O error\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    current = getSearcher(searcherFactory, DirectoryReader.open(dir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c924d4069ef5a5bc479a493befe0121aada6896","date":1427901860,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SearcherManager#SearcherManager(Directory,SearcherFactory).mjava","sourceNew":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the DirectoryReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException if there is a low-level I/O error\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    current = getSearcher(searcherFactory, DirectoryReader.open(dir), null);\n  }\n\n","sourceOld":"  /**\n   * Creates and returns a new SearcherManager from the given {@link Directory}. \n   * @param dir the directory to open the DirectoryReader on.\n   * @param searcherFactory An optional {@link SearcherFactory}. Pass\n   *        <code>null</code> if you don't require the searcher to be warmed\n   *        before going live or other custom behavior.\n   *        \n   * @throws IOException if there is a low-level I/O error\n   */\n  public SearcherManager(Directory dir, SearcherFactory searcherFactory) throws IOException {\n    if (searcherFactory == null) {\n      searcherFactory = new SearcherFactory();\n    }\n    this.searcherFactory = searcherFactory;\n    current = getSearcher(searcherFactory, DirectoryReader.open(dir));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e0dfae671422e7453a9199aa320f91427cd80d60":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["c380c22ff3b659b2d7412a3335f853d354d17568"],"c380c22ff3b659b2d7412a3335f853d354d17568":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e0dfae671422e7453a9199aa320f91427cd80d60"],"0c924d4069ef5a5bc479a493befe0121aada6896":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","e0dfae671422e7453a9199aa320f91427cd80d60"]},"commit2Childs":{"e0dfae671422e7453a9199aa320f91427cd80d60":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["e0dfae671422e7453a9199aa320f91427cd80d60","0c924d4069ef5a5bc479a493befe0121aada6896"],"c380c22ff3b659b2d7412a3335f853d354d17568":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6e81b0b3c14cf61c8ec366450276ab80654f7d0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6e81b0b3c14cf61c8ec366450276ab80654f7d0d":["c380c22ff3b659b2d7412a3335f853d354d17568"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0c924d4069ef5a5bc479a493befe0121aada6896":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","0c924d4069ef5a5bc479a493befe0121aada6896"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}