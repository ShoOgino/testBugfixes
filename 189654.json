{"path":"modules/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createContext(int,RandomIndexWriter,RandomIndexWriter,boolean).mjava","commits":[{"id":"3cd7782b032787117c986a2278d05b25056b2eba","date":1326755795,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createContext(int,RandomIndexWriter,RandomIndexWriter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private IndexIterationContext createContext(int nDocs, RandomIndexWriter fromWriter, RandomIndexWriter toWriter, boolean multipleValuesPerDocument) throws IOException {\n    IndexIterationContext context = new IndexIterationContext();\n    int numRandomValues = nDocs / 2;\n    context.randomUniqueValues = new String[numRandomValues];\n    Set<String> trackSet = new HashSet<String>();\n    context.randomFrom = new boolean[numRandomValues];\n    for (int i = 0; i < numRandomValues; i++) {\n      String uniqueRandomValue;\n      do {\n        uniqueRandomValue = _TestUtil.randomRealisticUnicodeString(random);\n//        uniqueRandomValue = _TestUtil.randomSimpleString(random);\n      } while (\"\".equals(uniqueRandomValue) || trackSet.contains(uniqueRandomValue));\n      // Generate unique values and empty strings aren't allowed.\n      trackSet.add(uniqueRandomValue);\n      context.randomFrom[i] = random.nextBoolean();\n      context.randomUniqueValues[i] = uniqueRandomValue;\n    }\n\n    for (int i = 0; i < nDocs; i++) {\n      String id = Integer.toString(i);\n      int randomI = random.nextInt(context.randomUniqueValues.length);\n      String value = context.randomUniqueValues[randomI];\n      Document document = new Document();\n      document.add(newField(random, \"id\", id, TextField.TYPE_STORED));\n      document.add(newField(random, \"value\", value, TextField.TYPE_STORED));\n\n      boolean from = context.randomFrom[randomI];\n      int numberOfLinkValues = multipleValuesPerDocument ? 2 + random.nextInt(10) : 1;\n      RandomDoc doc = new RandomDoc(id, numberOfLinkValues, value);\n      for (int j = 0; j < numberOfLinkValues; j++) {\n        String linkValue = context.randomUniqueValues[random.nextInt(context.randomUniqueValues.length)];\n        doc.linkValues.add(linkValue);\n        if (from) {\n          if (!context.fromDocuments.containsKey(linkValue)) {\n            context.fromDocuments.put(linkValue, new ArrayList<RandomDoc>());\n          }\n          if (!context.randomValueFromDocs.containsKey(value)) {\n            context.randomValueFromDocs.put(value, new ArrayList<RandomDoc>());\n          }\n\n          context.fromDocuments.get(linkValue).add(doc);\n          context.randomValueFromDocs.get(value).add(doc);\n          document.add(newField(random, \"from\", linkValue, TextField.TYPE_STORED));\n        } else {\n          if (!context.toDocuments.containsKey(linkValue)) {\n            context.toDocuments.put(linkValue, new ArrayList<RandomDoc>());\n          }\n          if (!context.randomValueToDocs.containsKey(value)) {\n            context.randomValueToDocs.put(value, new ArrayList<RandomDoc>());\n          }\n\n          context.toDocuments.get(linkValue).add(doc);\n          context.randomValueToDocs.get(value).add(doc);\n          document.add(newField(random, \"to\", linkValue, TextField.TYPE_STORED));\n        }\n      }\n\n      final RandomIndexWriter w;\n      if (from) {\n        w = fromWriter;\n      } else {\n        w = toWriter;\n      }\n\n      w.addDocument(document);\n      if (random.nextInt(10) == 4) {\n        w.commit();\n      }\n      if (VERBOSE) {\n        System.out.println(\"Added document[\" + i + \"]: \" + document);\n      }\n    }\n    return context;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createContext(int,RandomIndexWriter,RandomIndexWriter,boolean).mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createContext(int,RandomIndexWriter,RandomIndexWriter,boolean).mjava","sourceNew":"  private IndexIterationContext createContext(int nDocs, RandomIndexWriter fromWriter, RandomIndexWriter toWriter, boolean multipleValuesPerDocument) throws IOException {\n    IndexIterationContext context = new IndexIterationContext();\n    int numRandomValues = nDocs / 2;\n    context.randomUniqueValues = new String[numRandomValues];\n    Set<String> trackSet = new HashSet<String>();\n    context.randomFrom = new boolean[numRandomValues];\n    for (int i = 0; i < numRandomValues; i++) {\n      String uniqueRandomValue;\n      do {\n        uniqueRandomValue = _TestUtil.randomRealisticUnicodeString(random());\n//        uniqueRandomValue = _TestUtil.randomSimpleString(random);\n      } while (\"\".equals(uniqueRandomValue) || trackSet.contains(uniqueRandomValue));\n      // Generate unique values and empty strings aren't allowed.\n      trackSet.add(uniqueRandomValue);\n      context.randomFrom[i] = random().nextBoolean();\n      context.randomUniqueValues[i] = uniqueRandomValue;\n    }\n\n    for (int i = 0; i < nDocs; i++) {\n      String id = Integer.toString(i);\n      int randomI = random().nextInt(context.randomUniqueValues.length);\n      String value = context.randomUniqueValues[randomI];\n      Document document = new Document();\n      document.add(newField(random(), \"id\", id, TextField.TYPE_STORED));\n      document.add(newField(random(), \"value\", value, TextField.TYPE_STORED));\n\n      boolean from = context.randomFrom[randomI];\n      int numberOfLinkValues = multipleValuesPerDocument ? 2 + random().nextInt(10) : 1;\n      RandomDoc doc = new RandomDoc(id, numberOfLinkValues, value);\n      for (int j = 0; j < numberOfLinkValues; j++) {\n        String linkValue = context.randomUniqueValues[random().nextInt(context.randomUniqueValues.length)];\n        doc.linkValues.add(linkValue);\n        if (from) {\n          if (!context.fromDocuments.containsKey(linkValue)) {\n            context.fromDocuments.put(linkValue, new ArrayList<RandomDoc>());\n          }\n          if (!context.randomValueFromDocs.containsKey(value)) {\n            context.randomValueFromDocs.put(value, new ArrayList<RandomDoc>());\n          }\n\n          context.fromDocuments.get(linkValue).add(doc);\n          context.randomValueFromDocs.get(value).add(doc);\n          document.add(newField(random(), \"from\", linkValue, TextField.TYPE_STORED));\n        } else {\n          if (!context.toDocuments.containsKey(linkValue)) {\n            context.toDocuments.put(linkValue, new ArrayList<RandomDoc>());\n          }\n          if (!context.randomValueToDocs.containsKey(value)) {\n            context.randomValueToDocs.put(value, new ArrayList<RandomDoc>());\n          }\n\n          context.toDocuments.get(linkValue).add(doc);\n          context.randomValueToDocs.get(value).add(doc);\n          document.add(newField(random(), \"to\", linkValue, TextField.TYPE_STORED));\n        }\n      }\n\n      final RandomIndexWriter w;\n      if (from) {\n        w = fromWriter;\n      } else {\n        w = toWriter;\n      }\n\n      w.addDocument(document);\n      if (random().nextInt(10) == 4) {\n        w.commit();\n      }\n      if (VERBOSE) {\n        System.out.println(\"Added document[\" + i + \"]: \" + document);\n      }\n    }\n    return context;\n  }\n\n","sourceOld":"  private IndexIterationContext createContext(int nDocs, RandomIndexWriter fromWriter, RandomIndexWriter toWriter, boolean multipleValuesPerDocument) throws IOException {\n    IndexIterationContext context = new IndexIterationContext();\n    int numRandomValues = nDocs / 2;\n    context.randomUniqueValues = new String[numRandomValues];\n    Set<String> trackSet = new HashSet<String>();\n    context.randomFrom = new boolean[numRandomValues];\n    for (int i = 0; i < numRandomValues; i++) {\n      String uniqueRandomValue;\n      do {\n        uniqueRandomValue = _TestUtil.randomRealisticUnicodeString(random);\n//        uniqueRandomValue = _TestUtil.randomSimpleString(random);\n      } while (\"\".equals(uniqueRandomValue) || trackSet.contains(uniqueRandomValue));\n      // Generate unique values and empty strings aren't allowed.\n      trackSet.add(uniqueRandomValue);\n      context.randomFrom[i] = random.nextBoolean();\n      context.randomUniqueValues[i] = uniqueRandomValue;\n    }\n\n    for (int i = 0; i < nDocs; i++) {\n      String id = Integer.toString(i);\n      int randomI = random.nextInt(context.randomUniqueValues.length);\n      String value = context.randomUniqueValues[randomI];\n      Document document = new Document();\n      document.add(newField(random, \"id\", id, TextField.TYPE_STORED));\n      document.add(newField(random, \"value\", value, TextField.TYPE_STORED));\n\n      boolean from = context.randomFrom[randomI];\n      int numberOfLinkValues = multipleValuesPerDocument ? 2 + random.nextInt(10) : 1;\n      RandomDoc doc = new RandomDoc(id, numberOfLinkValues, value);\n      for (int j = 0; j < numberOfLinkValues; j++) {\n        String linkValue = context.randomUniqueValues[random.nextInt(context.randomUniqueValues.length)];\n        doc.linkValues.add(linkValue);\n        if (from) {\n          if (!context.fromDocuments.containsKey(linkValue)) {\n            context.fromDocuments.put(linkValue, new ArrayList<RandomDoc>());\n          }\n          if (!context.randomValueFromDocs.containsKey(value)) {\n            context.randomValueFromDocs.put(value, new ArrayList<RandomDoc>());\n          }\n\n          context.fromDocuments.get(linkValue).add(doc);\n          context.randomValueFromDocs.get(value).add(doc);\n          document.add(newField(random, \"from\", linkValue, TextField.TYPE_STORED));\n        } else {\n          if (!context.toDocuments.containsKey(linkValue)) {\n            context.toDocuments.put(linkValue, new ArrayList<RandomDoc>());\n          }\n          if (!context.randomValueToDocs.containsKey(value)) {\n            context.randomValueToDocs.put(value, new ArrayList<RandomDoc>());\n          }\n\n          context.toDocuments.get(linkValue).add(doc);\n          context.randomValueToDocs.get(value).add(doc);\n          document.add(newField(random, \"to\", linkValue, TextField.TYPE_STORED));\n        }\n      }\n\n      final RandomIndexWriter w;\n      if (from) {\n        w = fromWriter;\n      } else {\n        w = toWriter;\n      }\n\n      w.addDocument(document);\n      if (random.nextInt(10) == 4) {\n        w.commit();\n      }\n      if (VERBOSE) {\n        System.out.println(\"Added document[\" + i + \"]: \" + document);\n      }\n    }\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createContext(int,RandomIndexWriter,RandomIndexWriter,boolean).mjava","pathOld":"modules/join/src/test/org/apache/lucene/search/join/TestJoinUtil#createContext(int,RandomIndexWriter,RandomIndexWriter,boolean).mjava","sourceNew":"  private IndexIterationContext createContext(int nDocs, RandomIndexWriter fromWriter, RandomIndexWriter toWriter, boolean multipleValuesPerDocument) throws IOException {\n    IndexIterationContext context = new IndexIterationContext();\n    int numRandomValues = nDocs / 2;\n    context.randomUniqueValues = new String[numRandomValues];\n    Set<String> trackSet = new HashSet<String>();\n    context.randomFrom = new boolean[numRandomValues];\n    for (int i = 0; i < numRandomValues; i++) {\n      String uniqueRandomValue;\n      do {\n        uniqueRandomValue = _TestUtil.randomRealisticUnicodeString(random());\n//        uniqueRandomValue = _TestUtil.randomSimpleString(random);\n      } while (\"\".equals(uniqueRandomValue) || trackSet.contains(uniqueRandomValue));\n      // Generate unique values and empty strings aren't allowed.\n      trackSet.add(uniqueRandomValue);\n      context.randomFrom[i] = random().nextBoolean();\n      context.randomUniqueValues[i] = uniqueRandomValue;\n    }\n\n    for (int i = 0; i < nDocs; i++) {\n      String id = Integer.toString(i);\n      int randomI = random().nextInt(context.randomUniqueValues.length);\n      String value = context.randomUniqueValues[randomI];\n      Document document = new Document();\n      document.add(newField(random(), \"id\", id, TextField.TYPE_STORED));\n      document.add(newField(random(), \"value\", value, TextField.TYPE_STORED));\n\n      boolean from = context.randomFrom[randomI];\n      int numberOfLinkValues = multipleValuesPerDocument ? 2 + random().nextInt(10) : 1;\n      RandomDoc doc = new RandomDoc(id, numberOfLinkValues, value);\n      for (int j = 0; j < numberOfLinkValues; j++) {\n        String linkValue = context.randomUniqueValues[random().nextInt(context.randomUniqueValues.length)];\n        doc.linkValues.add(linkValue);\n        if (from) {\n          if (!context.fromDocuments.containsKey(linkValue)) {\n            context.fromDocuments.put(linkValue, new ArrayList<RandomDoc>());\n          }\n          if (!context.randomValueFromDocs.containsKey(value)) {\n            context.randomValueFromDocs.put(value, new ArrayList<RandomDoc>());\n          }\n\n          context.fromDocuments.get(linkValue).add(doc);\n          context.randomValueFromDocs.get(value).add(doc);\n          document.add(newField(random(), \"from\", linkValue, TextField.TYPE_STORED));\n        } else {\n          if (!context.toDocuments.containsKey(linkValue)) {\n            context.toDocuments.put(linkValue, new ArrayList<RandomDoc>());\n          }\n          if (!context.randomValueToDocs.containsKey(value)) {\n            context.randomValueToDocs.put(value, new ArrayList<RandomDoc>());\n          }\n\n          context.toDocuments.get(linkValue).add(doc);\n          context.randomValueToDocs.get(value).add(doc);\n          document.add(newField(random(), \"to\", linkValue, TextField.TYPE_STORED));\n        }\n      }\n\n      final RandomIndexWriter w;\n      if (from) {\n        w = fromWriter;\n      } else {\n        w = toWriter;\n      }\n\n      w.addDocument(document);\n      if (random().nextInt(10) == 4) {\n        w.commit();\n      }\n      if (VERBOSE) {\n        System.out.println(\"Added document[\" + i + \"]: \" + document);\n      }\n    }\n    return context;\n  }\n\n","sourceOld":"  private IndexIterationContext createContext(int nDocs, RandomIndexWriter fromWriter, RandomIndexWriter toWriter, boolean multipleValuesPerDocument) throws IOException {\n    IndexIterationContext context = new IndexIterationContext();\n    int numRandomValues = nDocs / 2;\n    context.randomUniqueValues = new String[numRandomValues];\n    Set<String> trackSet = new HashSet<String>();\n    context.randomFrom = new boolean[numRandomValues];\n    for (int i = 0; i < numRandomValues; i++) {\n      String uniqueRandomValue;\n      do {\n        uniqueRandomValue = _TestUtil.randomRealisticUnicodeString(random());\n//        uniqueRandomValue = _TestUtil.randomSimpleString(random);\n      } while (\"\".equals(uniqueRandomValue) || trackSet.contains(uniqueRandomValue));\n      // Generate unique values and empty strings aren't allowed.\n      trackSet.add(uniqueRandomValue);\n      context.randomFrom[i] = random().nextBoolean();\n      context.randomUniqueValues[i] = uniqueRandomValue;\n    }\n\n    for (int i = 0; i < nDocs; i++) {\n      String id = Integer.toString(i);\n      int randomI = random().nextInt(context.randomUniqueValues.length);\n      String value = context.randomUniqueValues[randomI];\n      Document document = new Document();\n      document.add(newField(random(), \"id\", id, TextField.TYPE_STORED));\n      document.add(newField(random(), \"value\", value, TextField.TYPE_STORED));\n\n      boolean from = context.randomFrom[randomI];\n      int numberOfLinkValues = multipleValuesPerDocument ? 2 + random().nextInt(10) : 1;\n      RandomDoc doc = new RandomDoc(id, numberOfLinkValues, value);\n      for (int j = 0; j < numberOfLinkValues; j++) {\n        String linkValue = context.randomUniqueValues[random().nextInt(context.randomUniqueValues.length)];\n        doc.linkValues.add(linkValue);\n        if (from) {\n          if (!context.fromDocuments.containsKey(linkValue)) {\n            context.fromDocuments.put(linkValue, new ArrayList<RandomDoc>());\n          }\n          if (!context.randomValueFromDocs.containsKey(value)) {\n            context.randomValueFromDocs.put(value, new ArrayList<RandomDoc>());\n          }\n\n          context.fromDocuments.get(linkValue).add(doc);\n          context.randomValueFromDocs.get(value).add(doc);\n          document.add(newField(random(), \"from\", linkValue, TextField.TYPE_STORED));\n        } else {\n          if (!context.toDocuments.containsKey(linkValue)) {\n            context.toDocuments.put(linkValue, new ArrayList<RandomDoc>());\n          }\n          if (!context.randomValueToDocs.containsKey(value)) {\n            context.randomValueToDocs.put(value, new ArrayList<RandomDoc>());\n          }\n\n          context.toDocuments.get(linkValue).add(doc);\n          context.randomValueToDocs.get(value).add(doc);\n          document.add(newField(random(), \"to\", linkValue, TextField.TYPE_STORED));\n        }\n      }\n\n      final RandomIndexWriter w;\n      if (from) {\n        w = fromWriter;\n      } else {\n        w = toWriter;\n      }\n\n      w.addDocument(document);\n      if (random().nextInt(10) == 4) {\n        w.commit();\n      }\n      if (VERBOSE) {\n        System.out.println(\"Added document[\" + i + \"]: \" + document);\n      }\n    }\n    return context;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3cd7782b032787117c986a2278d05b25056b2eba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3cd7782b032787117c986a2278d05b25056b2eba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cd7782b032787117c986a2278d05b25056b2eba":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cd7782b032787117c986a2278d05b25056b2eba"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}