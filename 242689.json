{"path":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","commits":[{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    final long dirStart = out.getFilePointer();\n    final int fieldCount = fields.size();\n\n    out.writeInt(fieldCount);\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      out.writeInt(field.fieldInfo.number);\n      out.writeInt(field.numIndexTerms);\n      out.writeLong(field.termsStart);\n      out.writeLong(field.indexStart);\n      out.writeLong(field.packedIndexStart);\n      out.writeLong(field.packedOffsetsStart);\n    }\n    writeTrailer(dirStart);\n    out.close();\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    final long dirStart = out.getFilePointer();\n    final int fieldCount = fields.size();\n\n    out.writeInt(fieldCount);\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      out.writeInt(field.fieldInfo.number);\n      out.writeInt(field.numIndexTerms);\n      out.writeLong(field.termsStart);\n      out.writeLong(field.indexStart);\n      out.writeLong(field.packedIndexStart);\n      out.writeLong(field.packedOffsetsStart);\n    }\n    writeTrailer(dirStart);\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/SimpleStandardTermsIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    final long dirStart = out.getFilePointer();\n    final int fieldCount = fields.size();\n\n    out.writeInt(fieldCount);\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      out.writeInt(field.fieldInfo.number);\n      out.writeInt(field.numIndexTerms);\n      out.writeLong(field.termsStart);\n      out.writeLong(field.indexStart);\n      out.writeLong(field.packedIndexStart);\n      out.writeLong(field.packedOffsetsStart);\n    }\n    writeTrailer(dirStart);\n    out.close();\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    final long dirStart = out.getFilePointer();\n    final int fieldCount = fields.size();\n\n    out.writeInt(fieldCount);\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      out.writeInt(field.fieldInfo.number);\n      out.writeInt(field.numIndexTerms);\n      out.writeLong(field.termsStart);\n      out.writeLong(field.indexStart);\n      out.writeLong(field.packedIndexStart);\n      out.writeLong(field.packedOffsetsStart);\n    }\n    writeTrailer(dirStart);\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    final long dirStart = out.getFilePointer();\n    final int fieldCount = fields.size();\n\n    int nonNullFieldCount = 0;\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      if (field.numIndexTerms > 0) {\n        nonNullFieldCount++;\n      }\n    }\n\n    out.writeVInt(nonNullFieldCount);\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      if (field.numIndexTerms > 0) {\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVInt(field.numIndexTerms);\n        out.writeVLong(field.termsStart);\n        out.writeVLong(field.indexStart);\n        out.writeVLong(field.packedIndexStart);\n        out.writeVLong(field.packedOffsetsStart);\n      }\n    }\n    writeTrailer(dirStart);\n    out.close();\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    final long dirStart = out.getFilePointer();\n    final int fieldCount = fields.size();\n\n    out.writeInt(fieldCount);\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      out.writeInt(field.fieldInfo.number);\n      out.writeInt(field.numIndexTerms);\n      out.writeLong(field.termsStart);\n      out.writeLong(field.indexStart);\n      out.writeLong(field.packedIndexStart);\n      out.writeLong(field.packedOffsetsStart);\n    }\n    writeTrailer(dirStart);\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    final long dirStart = out.getFilePointer();\n    final int fieldCount = fields.size();\n\n    int nonNullFieldCount = 0;\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      if (field.numIndexTerms > 0) {\n        nonNullFieldCount++;\n      }\n    }\n\n    out.writeVInt(nonNullFieldCount);\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      if (field.numIndexTerms > 0) {\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVInt(field.numIndexTerms);\n        out.writeVLong(field.termsStart);\n        out.writeVLong(field.indexStart);\n        out.writeVLong(field.packedIndexStart);\n        out.writeVLong(field.packedOffsetsStart);\n      }\n    }\n    writeTrailer(dirStart);\n    out.close();\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    final long dirStart = out.getFilePointer();\n    final int fieldCount = fields.size();\n\n    out.writeInt(fieldCount);\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      out.writeInt(field.fieldInfo.number);\n      out.writeInt(field.numIndexTerms);\n      out.writeLong(field.termsStart);\n      out.writeLong(field.indexStart);\n      out.writeLong(field.packedIndexStart);\n      out.writeLong(field.packedOffsetsStart);\n    }\n    writeTrailer(dirStart);\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n    final long dirStart = out.getFilePointer();\n    final int fieldCount = fields.size();\n\n    int nonNullFieldCount = 0;\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      if (field.numIndexTerms > 0) {\n        nonNullFieldCount++;\n      }\n    }\n\n    out.writeVInt(nonNullFieldCount);\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      if (field.numIndexTerms > 0) {\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVInt(field.numIndexTerms);\n        out.writeVLong(field.termsStart);\n        out.writeVLong(field.indexStart);\n        out.writeVLong(field.packedIndexStart);\n        out.writeVLong(field.packedOffsetsStart);\n      }\n    }\n    writeTrailer(dirStart);\n    out.close();\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    final long dirStart = out.getFilePointer();\n    final int fieldCount = fields.size();\n\n    out.writeInt(fieldCount);\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      out.writeInt(field.fieldInfo.number);\n      out.writeInt(field.numIndexTerms);\n      out.writeLong(field.termsStart);\n      out.writeLong(field.indexStart);\n      out.writeLong(field.packedIndexStart);\n      out.writeLong(field.packedOffsetsStart);\n    }\n    writeTrailer(dirStart);\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","sourceNew":"  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      IOUtils.closeSafely(!success, out);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    final long dirStart = out.getFilePointer();\n    final int fieldCount = fields.size();\n\n    int nonNullFieldCount = 0;\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      if (field.numIndexTerms > 0) {\n        nonNullFieldCount++;\n      }\n    }\n\n    out.writeVInt(nonNullFieldCount);\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      if (field.numIndexTerms > 0) {\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVInt(field.numIndexTerms);\n        out.writeVLong(field.termsStart);\n        out.writeVLong(field.indexStart);\n        out.writeVLong(field.packedIndexStart);\n        out.writeVLong(field.packedOffsetsStart);\n      }\n    }\n    writeTrailer(dirStart);\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","sourceNew":"  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      IOUtils.closeSafely(!success, out);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    final long dirStart = out.getFilePointer();\n    final int fieldCount = fields.size();\n\n    int nonNullFieldCount = 0;\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      if (field.numIndexTerms > 0) {\n        nonNullFieldCount++;\n      }\n    }\n\n    out.writeVInt(nonNullFieldCount);\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      if (field.numIndexTerms > 0) {\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVInt(field.numIndexTerms);\n        out.writeVLong(field.termsStart);\n        out.writeVLong(field.indexStart);\n        out.writeVLong(field.packedIndexStart);\n        out.writeVLong(field.packedOffsetsStart);\n      }\n    }\n    writeTrailer(dirStart);\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","sourceNew":"  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      IOUtils.closeSafely(!success, out);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n    final long dirStart = out.getFilePointer();\n    final int fieldCount = fields.size();\n\n    int nonNullFieldCount = 0;\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      if (field.numIndexTerms > 0) {\n        nonNullFieldCount++;\n      }\n    }\n\n    out.writeVInt(nonNullFieldCount);\n    for(int i=0;i<fieldCount;i++) {\n      SimpleFieldWriter field = fields.get(i);\n      if (field.numIndexTerms > 0) {\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVInt(field.numIndexTerms);\n        out.writeVLong(field.termsStart);\n        out.writeVLong(field.indexStart);\n        out.writeVLong(field.packedIndexStart);\n        out.writeVLong(field.packedOffsetsStart);\n      }\n    }\n    writeTrailer(dirStart);\n    out.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","sourceNew":"  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      IOUtils.closeSafely(!success, out);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/FixedGapTermsIndexWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#close().mjava","sourceNew":"  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","sourceOld":"  public void close() throws IOException {\n    boolean success = false;\n    try {\n      final long dirStart = out.getFilePointer();\n      final int fieldCount = fields.size();\n      \n      int nonNullFieldCount = 0;\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          nonNullFieldCount++;\n        }\n      }\n      \n      out.writeVInt(nonNullFieldCount);\n      for(int i=0;i<fieldCount;i++) {\n        SimpleFieldWriter field = fields.get(i);\n        if (field.numIndexTerms > 0) {\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVInt(field.numIndexTerms);\n          out.writeVLong(field.termsStart);\n          out.writeVLong(field.indexStart);\n          out.writeVLong(field.packedIndexStart);\n          out.writeVLong(field.packedOffsetsStart);\n        }\n      }\n      writeTrailer(dirStart);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out);\n      } else {\n        IOUtils.closeWhileHandlingException(out);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["efb7a19703a037c29e30440260d393500febc1f4"],"70ad682703b8585f5d0a637efec044d57ec05efb":["99cf56f3a650b908f7017a72f9d23940418f8a52","56da903869515527852ee21ea7ef7bfe414cd40d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["56da903869515527852ee21ea7ef7bfe414cd40d","efb7a19703a037c29e30440260d393500febc1f4"],"efb7a19703a037c29e30440260d393500febc1f4":["56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["99cf56f3a650b908f7017a72f9d23940418f8a52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99cf56f3a650b908f7017a72f9d23940418f8a52"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["24230fe54121f9be9d85f2c2067536296785e421"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["70ad682703b8585f5d0a637efec044d57ec05efb","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"70ad682703b8585f5d0a637efec044d57ec05efb":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"efb7a19703a037c29e30440260d393500febc1f4":["24230fe54121f9be9d85f2c2067536296785e421","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","efb7a19703a037c29e30440260d393500febc1f4","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["70ad682703b8585f5d0a637efec044d57ec05efb","56da903869515527852ee21ea7ef7bfe414cd40d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}