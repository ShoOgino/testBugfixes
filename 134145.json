{"path":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","commits":[{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isOptimized(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  protected boolean isMerged(SegmentInfos infos, int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToMerge) throws IOException {\n    final int numSegments = infos.size();\n    int numToMerge = 0;\n    SegmentInfo mergeInfo = null;\n    boolean segmentIsOriginal = false;\n    for(int i=0;i<numSegments && numToMerge <= maxNumSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        numToMerge++;\n        mergeInfo = info;\n      }\n    }\n\n    return numToMerge <= maxNumSegments &&\n      (numToMerge != 1 || !segmentIsOriginal || isMerged(mergeInfo));\n  }\n\n","sourceOld":"  protected boolean isOptimized(SegmentInfos infos, int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToOptimize) throws IOException {\n    final int numSegments = infos.size();\n    int numToOptimize = 0;\n    SegmentInfo optimizeInfo = null;\n    boolean segmentIsOriginal = false;\n    for(int i=0;i<numSegments && numToOptimize <= maxNumSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      final Boolean isOriginal = segmentsToOptimize.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        numToOptimize++;\n        optimizeInfo = info;\n      }\n    }\n\n    return numToOptimize <= maxNumSegments &&\n      (numToOptimize != 1 || !segmentIsOriginal || isOptimized(optimizeInfo));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/LogMergePolicy#isMerged(SegmentInfos,int,Map[SegmentInfo,Boolean]).mjava","sourceNew":"  protected boolean isMerged(SegmentInfos infos, int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToMerge) throws IOException {\n    final int numSegments = infos.size();\n    int numToMerge = 0;\n    SegmentInfo mergeInfo = null;\n    boolean segmentIsOriginal = false;\n    for(int i=0;i<numSegments && numToMerge <= maxNumSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        numToMerge++;\n        mergeInfo = info;\n      }\n    }\n\n    return numToMerge <= maxNumSegments &&\n      (numToMerge != 1 || !segmentIsOriginal || isMerged(mergeInfo));\n  }\n\n","sourceOld":"  protected boolean isMerged(SegmentInfos infos, int maxNumSegments, Map<SegmentInfo,Boolean> segmentsToMerge) throws IOException {\n    final int numSegments = infos.size();\n    int numToMerge = 0;\n    SegmentInfo mergeInfo = null;\n    boolean segmentIsOriginal = false;\n    for(int i=0;i<numSegments && numToMerge <= maxNumSegments;i++) {\n      final SegmentInfo info = infos.info(i);\n      final Boolean isOriginal = segmentsToMerge.get(info);\n      if (isOriginal != null) {\n        segmentIsOriginal = isOriginal;\n        numToMerge++;\n        mergeInfo = info;\n      }\n    }\n\n    return numToMerge <= maxNumSegments &&\n      (numToMerge != 1 || !segmentIsOriginal || isMerged(mergeInfo));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}