{"path":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#checkSort(OfflineSorter,byte[][]).mjava","commits":[{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#checkSort(OfflineSorter,byte[][]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#checkSort(Sort,byte[][]).mjava","sourceNew":"  /**\n   * Check sorting data on an instance of {@link OfflineSorter}.\n   */\n  private SortInfo checkSort(OfflineSorter sort, byte[][] data) throws IOException {\n    File unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, unsignedByteOrderComparator);\n    File golden = writeAll(\"golden\", data);\n\n    File sorted = new File(tempDir, \"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    //System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    //System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","sourceOld":"  /**\n   * Check sorting data on an instance of {@link Sort}.\n   */\n  private SortInfo checkSort(Sort sort, byte[][] data) throws IOException {\n    File unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, unsignedByteOrderComparator);\n    File golden = writeAll(\"golden\", data);\n\n    File sorted = new File(tempDir, \"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    //System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    //System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#checkSort(OfflineSorter,byte[][]).mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#checkSort(Sort,byte[][]).mjava","sourceNew":"  /**\n   * Check sorting data on an instance of {@link OfflineSorter}.\n   */\n  private SortInfo checkSort(OfflineSorter sort, byte[][] data) throws IOException {\n    File unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, unsignedByteOrderComparator);\n    File golden = writeAll(\"golden\", data);\n\n    File sorted = new File(tempDir, \"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    //System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    //System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","sourceOld":"  /**\n   * Check sorting data on an instance of {@link Sort}.\n   */\n  private SortInfo checkSort(Sort sort, byte[][] data) throws IOException {\n    File unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, unsignedByteOrderComparator);\n    File golden = writeAll(\"golden\", data);\n\n    File sorted = new File(tempDir, \"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    //System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    //System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#checkSort(OfflineSorter,byte[][]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#checkSort(OfflineSorter,byte[][]).mjava","sourceNew":"  /**\n   * Check sorting data on an instance of {@link OfflineSorter}.\n   */\n  private SortInfo checkSort(OfflineSorter sort, byte[][] data) throws IOException {\n    Path unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, unsignedByteOrderComparator);\n    Path golden = writeAll(\"golden\", data);\n\n    Path sorted = tempDir.resolve(\"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    //System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    //System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","sourceOld":"  /**\n   * Check sorting data on an instance of {@link OfflineSorter}.\n   */\n  private SortInfo checkSort(OfflineSorter sort, byte[][] data) throws IOException {\n    File unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, unsignedByteOrderComparator);\n    File golden = writeAll(\"golden\", data);\n\n    File sorted = new File(tempDir, \"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    //System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    //System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2","date":1443129829,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#checkSort(OfflineSorter,byte[][]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#checkSort(OfflineSorter,byte[][]).mjava","sourceNew":"  /**\n   * Check sorting data on an instance of {@link OfflineSorter}.\n   */\n  private SortInfo checkSort(OfflineSorter sort, byte[][] data) throws IOException {\n    Path unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, unsignedByteOrderComparator);\n    Path golden = writeAll(\"golden\", data);\n\n    Path sorted = Files.createTempFile(OfflineSorter.getDefaultTempDir(), \"sorted\", \"\");\n    SortInfo sortInfo;\n    try {\n      sortInfo = sort.sort(unsorted, sorted);\n      //System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n      //System.out.println(sortInfo);\n      assertFilesIdentical(golden, sorted);\n    } finally {\n      IOUtils.rm(unsorted, golden, sorted);\n    }\n\n    return sortInfo;\n  }\n\n","sourceOld":"  /**\n   * Check sorting data on an instance of {@link OfflineSorter}.\n   */\n  private SortInfo checkSort(OfflineSorter sort, byte[][] data) throws IOException {\n    Path unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, unsignedByteOrderComparator);\n    Path golden = writeAll(\"golden\", data);\n\n    Path sorted = tempDir.resolve(\"sorted\");\n    SortInfo sortInfo = sort.sort(unsorted, sorted);\n    //System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n    //System.out.println(sortInfo);\n\n    assertFilesIdentical(golden, sorted);\n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#checkSort(OfflineSorter,byte[][]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Check sorting data on an instance of {@link OfflineSorter}.\n   */\n  private SortInfo checkSort(OfflineSorter sort, byte[][] data) throws IOException {\n    Path unsorted = writeAll(\"unsorted\", data);\n\n    Arrays.sort(data, unsignedByteOrderComparator);\n    Path golden = writeAll(\"golden\", data);\n\n    Path sorted = Files.createTempFile(OfflineSorter.getDefaultTempDir(), \"sorted\", \"\");\n    SortInfo sortInfo;\n    try {\n      sortInfo = sort.sort(unsorted, sorted);\n      //System.out.println(\"Input size [MB]: \" + unsorted.length() / (1024 * 1024));\n      //System.out.println(sortInfo);\n      assertFilesIdentical(golden, sorted);\n    } finally {\n      IOUtils.rm(unsorted, golden, sorted);\n    }\n\n    return sortInfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["f4abec28b874149a7223e32cc7a01704c27790de"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36f5a8c57e16c0f801006a52f87c75378427852e"],"36f5a8c57e16c0f801006a52f87c75378427852e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"]},"commit2Childs":{"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["f4abec28b874149a7223e32cc7a01704c27790de"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"f4abec28b874149a7223e32cc7a01704c27790de":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}