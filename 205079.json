{"path":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,Collection[Query]).mjava","commits":[{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,Collection[Query]).mjava","pathOld":"lucene/contrib/fast-vector-highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,Collection[Query]).mjava","sourceNew":"  void flatten( Query sourceQuery, Collection<Query> flatQueries ){\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq.getClauses() ){\n        if( !clause.isProhibited() )\n          flatten( clause.getQuery(), flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          flatQueries.add( new TermQuery( pq.getTerms()[0] ) );\n        }\n      }\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, Collection<Query> flatQueries ){\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq.getClauses() ){\n        if( !clause.isProhibited() )\n          flatten( clause.getQuery(), flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          flatQueries.add( new TermQuery( pq.getTerms()[0] ) );\n        }\n      }\n    }\n    // else discard queries\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b77dee084743b07be452cf7c07c992a225b11146","date":1315532213,"type":5,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,IndexReader,Collection[Query]).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/vectorhighlight/FieldQuery#flatten(Query,Collection[Query]).mjava","sourceNew":"  void flatten( Query sourceQuery, IndexReader reader, Collection<Query> flatQueries ) throws IOException{\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq.getClauses() ){\n        if( !clause.isProhibited() )\n          flatten( clause.getQuery(), reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, reader, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if (sourceQuery instanceof MultiTermQuery) {\n      MultiTermQuery copy = (MultiTermQuery) sourceQuery.clone();\n      copy.setRewriteMethod(new MultiTermQuery.TopTermsScoringBooleanQueryRewrite(MAX_MTQ_TERMS));\n      BooleanQuery mtqTerms = (BooleanQuery) copy.rewrite(reader);\n      flatten(mtqTerms, reader, flatQueries);\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          flatQueries.add( new TermQuery( pq.getTerms()[0] ) );\n        }\n      }\n    }\n    // else discard queries\n  }\n\n","sourceOld":"  void flatten( Query sourceQuery, Collection<Query> flatQueries ){\n    if( sourceQuery instanceof BooleanQuery ){\n      BooleanQuery bq = (BooleanQuery)sourceQuery;\n      for( BooleanClause clause : bq.getClauses() ){\n        if( !clause.isProhibited() )\n          flatten( clause.getQuery(), flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof DisjunctionMaxQuery ){\n      DisjunctionMaxQuery dmq = (DisjunctionMaxQuery)sourceQuery;\n      for( Query query : dmq ){\n        flatten( query, flatQueries );\n      }\n    }\n    else if( sourceQuery instanceof TermQuery ){\n      if( !flatQueries.contains( sourceQuery ) )\n        flatQueries.add( sourceQuery );\n    }\n    else if( sourceQuery instanceof PhraseQuery ){\n      if( !flatQueries.contains( sourceQuery ) ){\n        PhraseQuery pq = (PhraseQuery)sourceQuery;\n        if( pq.getTerms().length > 1 )\n          flatQueries.add( pq );\n        else if( pq.getTerms().length == 1 ){\n          flatQueries.add( new TermQuery( pq.getTerms()[0] ) );\n        }\n      }\n    }\n    // else discard queries\n  }\n\n","bugFix":null,"bugIntro":["94221e4190ec47a1ec4f0bd8f99b3648af295a06"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b77dee084743b07be452cf7c07c992a225b11146":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b77dee084743b07be452cf7c07c992a225b11146"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["b77dee084743b07be452cf7c07c992a225b11146"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"b77dee084743b07be452cf7c07c992a225b11146":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}