{"path":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","commits":[{"id":"a53a291ad9b1cc050d846b68758c061a55d52734","date":1310437344,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator();\n\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && text.startsWith(prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator();\n\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && text.startsWith(prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator(null);\n\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && text.startsWith(prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator();\n\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && text.startsWith(prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15","date":1322511317,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator(null);\n\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && StringHelper.startsWith(text, prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator(null);\n\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && text.startsWith(prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SrndTruncQuery#visitMatchingTerms(IndexReader,String,MatchingTermVisitor).mjava","sourceNew":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator(null);\n\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && StringHelper.startsWith(text, prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void visitMatchingTerms(\n    IndexReader reader,\n    String fieldName,\n    MatchingTermVisitor mtv) throws IOException\n  {\n    int prefixLength = prefix.length();\n    Terms terms = MultiFields.getTerms(reader, fieldName);\n    if (terms != null) {\n      Matcher matcher = pattern.matcher(\"\");\n      try {\n        TermsEnum termsEnum = terms.iterator(null);\n\n        TermsEnum.SeekStatus status = termsEnum.seekCeil(prefixRef);\n        BytesRef text;\n        if (status == TermsEnum.SeekStatus.FOUND) {\n          text = prefixRef;\n        } else if (status == TermsEnum.SeekStatus.NOT_FOUND) {\n          text = termsEnum.term();\n        } else {\n          text = null;\n        }\n\n        while(text != null) {\n          if (text != null && StringHelper.startsWith(text, prefixRef)) {\n            String textString = text.utf8ToString();\n            matcher.reset(textString.substring(prefixLength));\n            if (matcher.matches()) {\n              mtv.visitMatchingTerm(new Term(fieldName, textString));\n            }\n          } else {\n            break;\n          }\n          text = termsEnum.next();\n        }\n      } finally {\n        matcher.reset();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["a53a291ad9b1cc050d846b68758c061a55d52734"],"a53a291ad9b1cc050d846b68758c061a55d52734":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"61f30939a6ca0891c7b0c0f34aa43800bd4c9a15":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a53a291ad9b1cc050d846b68758c061a55d52734"],"3cc749c053615f5871f3b95715fe292f34e70a53":["61f30939a6ca0891c7b0c0f34aa43800bd4c9a15"],"a53a291ad9b1cc050d846b68758c061a55d52734":["3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}