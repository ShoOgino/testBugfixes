{"path":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestCase#assertFloatValuesEquals(List[FacetResult],List[FacetResult]).mjava","commits":[{"id":"56d44586f4c409c6c6c5942b9f0227df806b7300","date":1386027853,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestCase#assertFloatValuesEquals(List[FacetResult],List[FacetResult]).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertFloatValuesEquals(List<FacetResult> a, List<FacetResult> b) {\n    assertEquals(a.size(), b.size());\n    float lastValue = Float.POSITIVE_INFINITY;\n    Map<String,FacetResult> aByDim = new HashMap<String,FacetResult>();\n    for(int i=0;i<a.size();i++) {\n      assertTrue(a.get(i).value.floatValue() <= lastValue);\n      lastValue = a.get(i).value.floatValue();\n      aByDim.put(a.get(i).dim, a.get(i));\n    }\n    lastValue = Float.POSITIVE_INFINITY;\n    Map<String,FacetResult> bByDim = new HashMap<String,FacetResult>();\n    for(int i=0;i<b.size();i++) {\n      bByDim.put(b.get(i).dim, b.get(i));\n      assertTrue(b.get(i).value.floatValue() <= lastValue);\n      lastValue = b.get(i).value.floatValue();\n    }\n    for(String dim : aByDim.keySet()) {\n      assertFloatValuesEquals(aByDim.get(dim), bByDim.get(dim));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestCase#assertFloatValuesEquals(List[FacetResult],List[FacetResult]).mjava","pathOld":"/dev/null","sourceNew":"  protected void assertFloatValuesEquals(List<FacetResult> a, List<FacetResult> b) {\n    assertEquals(a.size(), b.size());\n    float lastValue = Float.POSITIVE_INFINITY;\n    Map<String,FacetResult> aByDim = new HashMap<String,FacetResult>();\n    for(int i=0;i<a.size();i++) {\n      assertTrue(a.get(i).value.floatValue() <= lastValue);\n      lastValue = a.get(i).value.floatValue();\n      aByDim.put(a.get(i).dim, a.get(i));\n    }\n    lastValue = Float.POSITIVE_INFINITY;\n    Map<String,FacetResult> bByDim = new HashMap<String,FacetResult>();\n    for(int i=0;i<b.size();i++) {\n      bByDim.put(b.get(i).dim, b.get(i));\n      assertTrue(b.get(i).value.floatValue() <= lastValue);\n      lastValue = b.get(i).value.floatValue();\n    }\n    for(String dim : aByDim.keySet()) {\n      assertFloatValuesEquals(aByDim.get(dim), bByDim.get(dim));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestCase#assertFloatValuesEquals(List[FacetResult],List[FacetResult]).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/FacetTestCase#assertFloatValuesEquals(List[FacetResult],List[FacetResult]).mjava","sourceNew":"  protected void assertFloatValuesEquals(List<FacetResult> a, List<FacetResult> b) {\n    assertEquals(a.size(), b.size());\n    float lastValue = Float.POSITIVE_INFINITY;\n    Map<String,FacetResult> aByDim = new HashMap<>();\n    for(int i=0;i<a.size();i++) {\n      assertTrue(a.get(i).value.floatValue() <= lastValue);\n      lastValue = a.get(i).value.floatValue();\n      aByDim.put(a.get(i).dim, a.get(i));\n    }\n    lastValue = Float.POSITIVE_INFINITY;\n    Map<String,FacetResult> bByDim = new HashMap<>();\n    for(int i=0;i<b.size();i++) {\n      bByDim.put(b.get(i).dim, b.get(i));\n      assertTrue(b.get(i).value.floatValue() <= lastValue);\n      lastValue = b.get(i).value.floatValue();\n    }\n    for(String dim : aByDim.keySet()) {\n      assertFloatValuesEquals(aByDim.get(dim), bByDim.get(dim));\n    }\n  }\n\n","sourceOld":"  protected void assertFloatValuesEquals(List<FacetResult> a, List<FacetResult> b) {\n    assertEquals(a.size(), b.size());\n    float lastValue = Float.POSITIVE_INFINITY;\n    Map<String,FacetResult> aByDim = new HashMap<String,FacetResult>();\n    for(int i=0;i<a.size();i++) {\n      assertTrue(a.get(i).value.floatValue() <= lastValue);\n      lastValue = a.get(i).value.floatValue();\n      aByDim.put(a.get(i).dim, a.get(i));\n    }\n    lastValue = Float.POSITIVE_INFINITY;\n    Map<String,FacetResult> bByDim = new HashMap<String,FacetResult>();\n    for(int i=0;i<b.size();i++) {\n      bByDim.put(b.get(i).dim, b.get(i));\n      assertTrue(b.get(i).value.floatValue() <= lastValue);\n      lastValue = b.get(i).value.floatValue();\n    }\n    for(String dim : aByDim.keySet()) {\n      assertFloatValuesEquals(aByDim.get(dim), bByDim.get(dim));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"56d44586f4c409c6c6c5942b9f0227df806b7300":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56d44586f4c409c6c6c5942b9f0227df806b7300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56d44586f4c409c6c6c5942b9f0227df806b7300":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56d44586f4c409c6c6c5942b9f0227df806b7300","3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}