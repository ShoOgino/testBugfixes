{"path":"solr/core/src/java/org/apache/solr/core/SolrPaths#locateSolrHome().mjava","commits":[{"id":"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3","date":1583932828,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrPaths#locateSolrHome().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrResourceLoader#locateSolrHome().mjava","sourceNew":"  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   * <li>JNDI: via java:comp/env/solr/home</li>\n   * <li>The system property solr.solr.home</li>\n   * <li>Look in the current working directory for a solr/ directory</li>\n   * </ol>\n   * <p>\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   *\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String) c.lookup(\"java:comp/env/solr/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \" + home);\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for solr (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /solr/home in JNDI\");\n    } catch (RuntimeException ex) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    }\n\n    // Now try system property\n    if (home == null) {\n      String prop = \"solr.solr.home\";\n      home = System.getProperty(prop);\n      if (home != null) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \" + prop + \": \" + home);\n      }\n    }\n\n    // if all else fails, try\n    if (home == null) {\n      home = \"solr/\";\n      logOnceInfo(\"home_default\", \"solr home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","sourceOld":"  /**\n   * Determines the solrhome from the environment.\n   * Tries JNDI (java:comp/env/solr/home) then system property (solr.solr.home);\n   * if both fail, defaults to solr/\n   * @return the instance directory name\n   */\n  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   * <li>JNDI: via java:comp/env/solr/home</li>\n   * <li>The system property solr.solr.home</li>\n   * <li>Look in the current working directory for a solr/ directory</li>\n   * </ol>\n   * <p>\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   *\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String) c.lookup(\"java:comp/env/\" + project + \"/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \" + home);\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for \" + project + \" (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /\" + project + \"/home in JNDI\");\n    } catch (RuntimeException ex) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    }\n\n    // Now try system property\n    if (home == null) {\n      String prop = project + \".solr.home\";\n      home = System.getProperty(prop);\n      if (home != null) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \" + prop + \": \" + home);\n      }\n    }\n\n    // if all else fails, try \n    if (home == null) {\n      home = project + '/';\n      logOnceInfo(\"home_default\", project + \" home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"140be51d03394488536f4aacedace29f9b318347","date":1587170432,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrPaths#locateSolrHome().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrPaths#locateSolrHome().mjava","sourceNew":"  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   * <li>JNDI: via java:comp/env/solr/home</li>\n   * <li>The system property solr.solr.home</li>\n   * <li>Look in the current working directory for a solr/ directory</li>\n   * </ol>\n   * <p>\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   *\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String) c.lookup(\"java:comp/env/solr/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \" + home);\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for solr (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /solr/home in JNDI\");\n    } catch (RuntimeException ex) {\n      if (log.isWarnEnabled()) {\n        log.warn(\"Odd RuntimeException while testing for JNDI: {}\", ex.getMessage());\n      }\n    }\n\n    // Now try system property\n    if (home == null) {\n      String prop = \"solr.solr.home\";\n      home = System.getProperty(prop);\n      if (home != null) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \" + prop + \": \" + home);\n      }\n    }\n\n    // if all else fails, try\n    if (home == null) {\n      home = \"solr/\";\n      logOnceInfo(\"home_default\", \"solr home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","sourceOld":"  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   * <li>JNDI: via java:comp/env/solr/home</li>\n   * <li>The system property solr.solr.home</li>\n   * <li>Look in the current working directory for a solr/ directory</li>\n   * </ol>\n   * <p>\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   *\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String) c.lookup(\"java:comp/env/solr/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \" + home);\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for solr (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /solr/home in JNDI\");\n    } catch (RuntimeException ex) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \" + ex.getMessage());\n    }\n\n    // Now try system property\n    if (home == null) {\n      String prop = \"solr.solr.home\";\n      home = System.getProperty(prop);\n      if (home != null) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \" + prop + \": \" + home);\n      }\n    }\n\n    // if all else fails, try\n    if (home == null) {\n      home = \"solr/\";\n      logOnceInfo(\"home_default\", \"solr home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrPaths#locateSolrHome().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrPaths#locateSolrHome().mjava","sourceNew":"  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   * <li>JNDI: via java:comp/env/solr/home</li>\n   * <li>The system property solr.solr.home</li>\n   * <li>Look in the current working directory for a solr/ directory</li>\n   * </ol>\n   * <p>\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   *\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String) c.lookup(\"java:comp/env/solr/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \" + home);\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for solr (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /solr/home in JNDI\");\n    } catch (RuntimeException ex) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: {}\", ex.getMessage());\n    }\n\n    // Now try system property\n    if (home == null) {\n      String prop = \"solr.solr.home\";\n      home = System.getProperty(prop);\n      if (home != null) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \" + prop + \": \" + home);\n      }\n    }\n\n    // if all else fails, try\n    if (home == null) {\n      home = \"solr/\";\n      logOnceInfo(\"home_default\", \"solr home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","sourceOld":"  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   * <li>JNDI: via java:comp/env/solr/home</li>\n   * <li>The system property solr.solr.home</li>\n   * <li>Look in the current working directory for a solr/ directory</li>\n   * </ol>\n   * <p>\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   *\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String) c.lookup(\"java:comp/env/solr/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \" + home);\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for solr (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /solr/home in JNDI\");\n    } catch (RuntimeException ex) {\n      if (log.isWarnEnabled()) {\n        log.warn(\"Odd RuntimeException while testing for JNDI: {}\", ex.getMessage());\n      }\n    }\n\n    // Now try system property\n    if (home == null) {\n      String prop = \"solr.solr.home\";\n      home = System.getProperty(prop);\n      if (home != null) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \" + prop + \": \" + home);\n      }\n    }\n\n    // if all else fails, try\n    if (home == null) {\n      home = \"solr/\";\n      logOnceInfo(\"home_default\", \"solr home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfc068060fd93e9c7417d1271ca797dc90496f67","date":1592771305,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrPaths#locateSolrHome().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrPaths#locateSolrHome().mjava","sourceNew":"  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   * <li>JNDI: via java:comp/env/solr/home</li>\n   * <li>The system property solr.solr.home</li>\n   * <li>Look in the current working directory for a solr/ directory</li>\n   * </ol>\n   * <p>\n   *\n   * @return the Solr home, absolute and normalized.\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String) c.lookup(\"java:comp/env/solr/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \" + home);\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for solr (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /solr/home in JNDI\");\n    } catch (RuntimeException ex) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: {}\", ex.getMessage());\n    }\n\n    // Now try system property\n    if (home == null) {\n      String prop = \"solr.solr.home\";\n      home = System.getProperty(prop);\n      if (home != null) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \" + prop + \": \" + home);\n      }\n    }\n\n    // if all else fails, try\n    if (home == null) {\n      home = \"solr/\";\n      logOnceInfo(\"home_default\", \"solr home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home).toAbsolutePath().normalize();\n  }\n\n","sourceOld":"  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   * <li>JNDI: via java:comp/env/solr/home</li>\n   * <li>The system property solr.solr.home</li>\n   * <li>Look in the current working directory for a solr/ directory</li>\n   * </ol>\n   * <p>\n   * The return value is normalized.  Normalization essentially means it ends in a trailing slash.\n   *\n   * @return A normalized solrhome\n   * @see #normalizeDir(String)\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String) c.lookup(\"java:comp/env/solr/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \" + home);\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for solr (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /solr/home in JNDI\");\n    } catch (RuntimeException ex) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: {}\", ex.getMessage());\n    }\n\n    // Now try system property\n    if (home == null) {\n      String prop = \"solr.solr.home\";\n      home = System.getProperty(prop);\n      if (home != null) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \" + prop + \": \" + home);\n      }\n    }\n\n    // if all else fails, try\n    if (home == null) {\n      home = \"solr/\";\n      logOnceInfo(\"home_default\", \"solr home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrPaths#locateSolrHome().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrPaths#locateSolrHome().mjava","sourceNew":"  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   * <li>JNDI: via java:comp/env/solr/home</li>\n   * <li>The system property solr.solr.home</li>\n   * <li>Look in the current working directory for a solr/ directory</li>\n   * </ol>\n   * <p>\n   *\n   * @return the Solr home, absolute and normalized.\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String) c.lookup(\"java:comp/env/solr/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \" + home);\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for solr (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /solr/home in JNDI\");\n    } catch (RuntimeException ex) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: \", ex);\n    }\n\n    // Now try system property\n    if (home == null) {\n      String prop = \"solr.solr.home\";\n      home = System.getProperty(prop);\n      if (home != null) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \" + prop + \": \" + home);\n      }\n    }\n\n    // if all else fails, try\n    if (home == null) {\n      home = \"solr/\";\n      logOnceInfo(\"home_default\", \"solr home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home).toAbsolutePath().normalize();\n  }\n\n","sourceOld":"  /**\n   * Finds the solrhome based on looking up the value in one of three places:\n   * <ol>\n   * <li>JNDI: via java:comp/env/solr/home</li>\n   * <li>The system property solr.solr.home</li>\n   * <li>Look in the current working directory for a solr/ directory</li>\n   * </ol>\n   * <p>\n   *\n   * @return the Solr home, absolute and normalized.\n   */\n  public static Path locateSolrHome() {\n\n    String home = null;\n    // Try JNDI\n    try {\n      Context c = new InitialContext();\n      home = (String) c.lookup(\"java:comp/env/solr/home\");\n      logOnceInfo(\"home_using_jndi\", \"Using JNDI solr.home: \" + home);\n    } catch (NoInitialContextException e) {\n      log.debug(\"JNDI not configured for solr (NoInitialContextEx)\");\n    } catch (NamingException e) {\n      log.debug(\"No /solr/home in JNDI\");\n    } catch (RuntimeException ex) {\n      log.warn(\"Odd RuntimeException while testing for JNDI: {}\", ex.getMessage());\n    }\n\n    // Now try system property\n    if (home == null) {\n      String prop = \"solr.solr.home\";\n      home = System.getProperty(prop);\n      if (home != null) {\n        logOnceInfo(\"home_using_sysprop\", \"Using system property \" + prop + \": \" + home);\n      }\n    }\n\n    // if all else fails, try\n    if (home == null) {\n      home = \"solr/\";\n      logOnceInfo(\"home_default\", \"solr home defaulted to '\" + home + \"' (could not find system property or JNDI)\");\n    }\n    return Paths.get(home).toAbsolutePath().normalize();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dfc068060fd93e9c7417d1271ca797dc90496f67":["575e66bd4b2349209027f6801184da7fc3cba13f"],"140be51d03394488536f4aacedace29f9b318347":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57c238f5fb83803b49b37b3a1a12224a64d47542":["dfc068060fd93e9c7417d1271ca797dc90496f67"],"575e66bd4b2349209027f6801184da7fc3cba13f":["140be51d03394488536f4aacedace29f9b318347"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"]},"commit2Childs":{"ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3":["140be51d03394488536f4aacedace29f9b318347"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec5a4e4c455009870c1cb8d21cf6671b8b78d3e3"],"dfc068060fd93e9c7417d1271ca797dc90496f67":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"140be51d03394488536f4aacedace29f9b318347":["575e66bd4b2349209027f6801184da7fc3cba13f"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"575e66bd4b2349209027f6801184da7fc3cba13f":["dfc068060fd93e9c7417d1271ca797dc90496f67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}