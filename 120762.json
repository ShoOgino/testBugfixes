{"path":"solr/core/src/java/org/apache/solr/cloud/Overseer#systemCollectionCompatCheck(BiConsumer[String,Object]).mjava","commits":[{"id":"dad6a48950aafc9c2f5dc54740f8c6ab81304203","date":1552999379,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Overseer#systemCollectionCompatCheck(BiConsumer[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  public void systemCollectionCompatCheck(final BiConsumer<String, Object> consumer) {\n    ClusterState clusterState = zkController.getClusterState();\n    if (clusterState == null) {\n      log.warn(\"Unable to check back-compat of .system collection - can't obtain ClusterState.\");\n      return;\n    }\n    DocCollection coll = clusterState.getCollectionOrNull(CollectionAdminParams.SYSTEM_COLL);\n    if (coll == null) {\n      return;\n    }\n    // check that all shard leaders are active\n    boolean allActive = true;\n    for (Slice s : coll.getActiveSlices()) {\n      if (s.getLeader() == null || !s.getLeader().isActive(clusterState.getLiveNodes())) {\n        allActive = false;\n        break;\n      }\n    }\n    if (allActive) {\n      doCompatCheck(consumer);\n    } else {\n      // wait for all leaders to become active and then check\n      zkController.zkStateReader.registerCollectionStateWatcher(CollectionAdminParams.SYSTEM_COLL, (liveNodes, state) -> {\n        boolean active = true;\n        if (state == null || liveNodes.isEmpty()) {\n          return true;\n        }\n        for (Slice s : state.getActiveSlices()) {\n          if (s.getLeader() == null || !s.getLeader().isActive(liveNodes)) {\n            active = false;\n            break;\n          }\n        }\n        if (active) {\n          doCompatCheck(consumer);\n        }\n        return active;\n      });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"]},"commit2Childs":{"dad6a48950aafc9c2f5dc54740f8c6ab81304203":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dad6a48950aafc9c2f5dc54740f8c6ab81304203"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}