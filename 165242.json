{"path":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#takeCompletedIncludingErrors().mjava","commits":[{"id":"e6dd476b943b132ecfa6b3ffc72e439eb2d9e061","date":1330500722,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#takeCompletedIncludingErrors().mjava","pathOld":"/dev/null","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest.  This won't \r\n   * return early if it runs into an error.  \r\n   **/\r\n  public ShardResponse takeCompletedIncludingErrors() {\r\n    return take(false);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#takeCompletedIncludingErrors().mjava","pathOld":"/dev/null","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest.  This won't \r\n   * return early if it runs into an error.  \r\n   **/\r\n  public ShardResponse takeCompletedIncludingErrors() {\r\n    return take(false);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d76dfc2581b6998f72c0e749c6200e9c2432c36f","date":1332788228,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#takeCompletedIncludingErrors().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#takeCompletedIncludingErrors().mjava","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest.  This won't \n   * return early if it runs into an error.  \n   **/\n  public ShardResponse takeCompletedIncludingErrors() {\n    return take(false);\n  }\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest.  This won't \r\n   * return early if it runs into an error.  \r\n   **/\r\n  public ShardResponse takeCompletedIncludingErrors() {\r\n    return take(false);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#takeCompletedIncludingErrors().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#takeCompletedIncludingErrors().mjava","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest.  This won't \n   * return early if it runs into an error.  \n   **/\n  @Override\n  public ShardResponse takeCompletedIncludingErrors() {\n    return take(false);\n  }\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest.  This won't \n   * return early if it runs into an error.  \n   **/\n  public ShardResponse takeCompletedIncludingErrors() {\n    return take(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#takeCompletedIncludingErrors().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#takeCompletedIncludingErrors().mjava","sourceNew":"  /** returns a ShardResponse of the last response correlated with a ShardRequest.  This won't \n   * return early if it runs into an error.  \n   **/\n  @Override\n  public ShardResponse takeCompletedIncludingErrors() {\n    return take(false);\n  }\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest.  This won't \n   * return early if it runs into an error.  \n   **/\n  public ShardResponse takeCompletedIncludingErrors() {\n    return take(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc28b46d62a8b91c8e90f9345612c4050eab98d4","date":1581344825,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#takeCompletedIncludingErrors().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler#takeCompletedIncludingErrors().mjava","sourceNew":"  /**\n   * returns a ShardResponse of the last response correlated with a ShardRequest.  This won't\n   * return early if it runs into an error.\n   **/\n  @Override\n  public ShardResponse takeCompletedIncludingErrors() {\n    return take(false);\n  }\n\n","sourceOld":"  /** returns a ShardResponse of the last response correlated with a ShardRequest.  This won't \n   * return early if it runs into an error.  \n   **/\n  @Override\n  public ShardResponse takeCompletedIncludingErrors() {\n    return take(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["d76dfc2581b6998f72c0e749c6200e9c2432c36f","7530de27b87b961b51f01bd1299b7004d46e8823"],"e6dd476b943b132ecfa6b3ffc72e439eb2d9e061":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e6dd476b943b132ecfa6b3ffc72e439eb2d9e061"],"d76dfc2581b6998f72c0e749c6200e9c2432c36f":["e6dd476b943b132ecfa6b3ffc72e439eb2d9e061"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc28b46d62a8b91c8e90f9345612c4050eab98d4":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d76dfc2581b6998f72c0e749c6200e9c2432c36f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc28b46d62a8b91c8e90f9345612c4050eab98d4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"e6dd476b943b132ecfa6b3ffc72e439eb2d9e061":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d76dfc2581b6998f72c0e749c6200e9c2432c36f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"d76dfc2581b6998f72c0e749c6200e9c2432c36f":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6dd476b943b132ecfa6b3ffc72e439eb2d9e061","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cc28b46d62a8b91c8e90f9345612c4050eab98d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cc28b46d62a8b91c8e90f9345612c4050eab98d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}