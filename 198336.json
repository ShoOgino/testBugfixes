{"path":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean,boolean).mjava","commits":[{"id":"0d49a158012a8ff48f328a4558e4bfcffbaed16f","date":1453677440,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Expert: open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter},\n   * controlling whether past deletions should be applied.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @param writeAllDeletes If true, new deletes will be written\n   * down to index files instead of carried over from writer to\n   * reader in heap\n   *\n   * @see #open(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    return writer.getReader(applyAllDeletes, writeAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Expert: open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter},\n   * controlling whether past deletions should be applied.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   *\n   * @see #open(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70303239aff48a883d655b94899202818b0aecd6","date":1455032616,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean,boolean).mjava","sourceNew":"  /**\n   * Expert: open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter},\n   * controlling whether past deletions should be applied.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @param writeAllDeletes If true, new deletes will be written\n   * down to index files instead of carried over from writer to\n   * reader directly in heap\n   *\n   * @see #open(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    return writer.getReader(applyAllDeletes, writeAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Expert: open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter},\n   * controlling whether past deletions should be applied.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @param writeAllDeletes If true, new deletes will be written\n   * down to index files instead of carried over from writer to\n   * reader in heap\n   *\n   * @see #open(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    return writer.getReader(applyAllDeletes, writeAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68496c2200e559fb7802f7575427b7a482659afb","date":1455207618,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DirectoryReader#open(IndexWriter,boolean).mjava","sourceNew":"  /**\n   * Expert: open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter},\n   * controlling whether past deletions should be applied.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   * @param writeAllDeletes If true, new deletes will be written\n   * down to index files instead of carried over from writer to\n   * reader directly in heap\n   *\n   * @see #open(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes, boolean writeAllDeletes) throws IOException {\n    return writer.getReader(applyAllDeletes, writeAllDeletes);\n  }\n\n","sourceOld":"  /**\n   * Expert: open a near real time IndexReader from the {@link org.apache.lucene.index.IndexWriter},\n   * controlling whether past deletions should be applied.\n   *\n   * @param writer The IndexWriter to open from\n   * @param applyAllDeletes If true, all buffered deletes will\n   * be applied (made visible) in the returned reader.  If\n   * false, the deletes are not applied but remain buffered\n   * (in IndexWriter) so that they will be applied in the\n   * future.  Applying deletes can be costly, so if your app\n   * can tolerate deleted documents being returned you might\n   * gain some performance by passing false.\n   *\n   * @see #open(IndexWriter)\n   *\n   * @lucene.experimental\n   */\n  public static DirectoryReader open(final IndexWriter writer, boolean applyAllDeletes) throws IOException {\n    return writer.getReader(applyAllDeletes);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70303239aff48a883d655b94899202818b0aecd6":["0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"68496c2200e559fb7802f7575427b7a482659afb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70303239aff48a883d655b94899202818b0aecd6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["68496c2200e559fb7802f7575427b7a482659afb"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70303239aff48a883d655b94899202818b0aecd6":["68496c2200e559fb7802f7575427b7a482659afb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68496c2200e559fb7802f7575427b7a482659afb","0d49a158012a8ff48f328a4558e4bfcffbaed16f"],"68496c2200e559fb7802f7575427b7a482659afb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d49a158012a8ff48f328a4558e4bfcffbaed16f":["70303239aff48a883d655b94899202818b0aecd6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}