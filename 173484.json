{"path":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.CurrencyValue#convertAmount(double,String,long,String).mjava","commits":[{"id":"f107636c2cc82350a2607d774c092da5b73152e5","date":1498227268,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.CurrencyValue#convertAmount(double,String,long,String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Performs a currency conversion & unit conversion.\n     *\n     * @param exchangeRate       Exchange rate to apply.\n     * @param sourceCurrencyCode The source currency code.\n     * @param sourceAmount       The source amount.\n     * @param targetCurrencyCode The target currency code.\n     * @return The converted indexable units after the exchange rate and currency fraction digits are applied.\n     */\n    public static long convertAmount(double exchangeRate, String sourceCurrencyCode, long sourceAmount, String targetCurrencyCode) {\n      if (targetCurrencyCode.equals(sourceCurrencyCode)) {\n        return sourceAmount;\n      }\n  \n      int sourceFractionDigits = Currency.getInstance(sourceCurrencyCode).getDefaultFractionDigits();\n      Currency targetCurrency = Currency.getInstance(targetCurrencyCode);\n      int targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n      return convertAmount(exchangeRate, sourceFractionDigits, sourceAmount, targetFractionDigits);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.CurrencyValue#convertAmount(double,String,long,String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Performs a currency conversion & unit conversion.\n     *\n     * @param exchangeRate       Exchange rate to apply.\n     * @param sourceCurrencyCode The source currency code.\n     * @param sourceAmount       The source amount.\n     * @param targetCurrencyCode The target currency code.\n     * @return The converted indexable units after the exchange rate and currency fraction digits are applied.\n     */\n    public static long convertAmount(double exchangeRate, String sourceCurrencyCode, long sourceAmount, String targetCurrencyCode) {\n      if (targetCurrencyCode.equals(sourceCurrencyCode)) {\n        return sourceAmount;\n      }\n  \n      int sourceFractionDigits = Currency.getInstance(sourceCurrencyCode).getDefaultFractionDigits();\n      Currency targetCurrency = Currency.getInstance(targetCurrencyCode);\n      int targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n      return convertAmount(exchangeRate, sourceFractionDigits, sourceAmount, targetFractionDigits);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.CurrencyValue#convertAmount(double,String,long,String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Performs a currency conversion & unit conversion.\n     *\n     * @param exchangeRate       Exchange rate to apply.\n     * @param sourceCurrencyCode The source currency code.\n     * @param sourceAmount       The source amount.\n     * @param targetCurrencyCode The target currency code.\n     * @return The converted indexable units after the exchange rate and currency fraction digits are applied.\n     */\n    public static long convertAmount(double exchangeRate, String sourceCurrencyCode, long sourceAmount, String targetCurrencyCode) {\n      if (targetCurrencyCode.equals(sourceCurrencyCode)) {\n        return sourceAmount;\n      }\n  \n      int sourceFractionDigits = Currency.getInstance(sourceCurrencyCode).getDefaultFractionDigits();\n      Currency targetCurrency = Currency.getInstance(targetCurrencyCode);\n      int targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n      return convertAmount(exchangeRate, sourceFractionDigits, sourceAmount, targetFractionDigits);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6409f24cc7d96b04fb1c932845092b0e307fb5d4","date":1515972624,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.CurrencyValue#convertAmount(double,String,long,String).mjava","sourceNew":null,"sourceOld":"    /**\n     * Performs a currency conversion & unit conversion.\n     *\n     * @param exchangeRate       Exchange rate to apply.\n     * @param sourceCurrencyCode The source currency code.\n     * @param sourceAmount       The source amount.\n     * @param targetCurrencyCode The target currency code.\n     * @return The converted indexable units after the exchange rate and currency fraction digits are applied.\n     */\n    public static long convertAmount(double exchangeRate, String sourceCurrencyCode, long sourceAmount, String targetCurrencyCode) {\n      if (targetCurrencyCode.equals(sourceCurrencyCode)) {\n        return sourceAmount;\n      }\n  \n      int sourceFractionDigits = Currency.getInstance(sourceCurrencyCode).getDefaultFractionDigits();\n      Currency targetCurrency = Currency.getInstance(targetCurrencyCode);\n      int targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n      return convertAmount(exchangeRate, sourceFractionDigits, sourceAmount, targetFractionDigits);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/schema/CurrencyFieldType.CurrencyValue#convertAmount(double,String,long,String).mjava","sourceNew":null,"sourceOld":"    /**\n     * Performs a currency conversion & unit conversion.\n     *\n     * @param exchangeRate       Exchange rate to apply.\n     * @param sourceCurrencyCode The source currency code.\n     * @param sourceAmount       The source amount.\n     * @param targetCurrencyCode The target currency code.\n     * @return The converted indexable units after the exchange rate and currency fraction digits are applied.\n     */\n    public static long convertAmount(double exchangeRate, String sourceCurrencyCode, long sourceAmount, String targetCurrencyCode) {\n      if (targetCurrencyCode.equals(sourceCurrencyCode)) {\n        return sourceAmount;\n      }\n  \n      int sourceFractionDigits = Currency.getInstance(sourceCurrencyCode).getDefaultFractionDigits();\n      Currency targetCurrency = Currency.getInstance(targetCurrencyCode);\n      int targetFractionDigits = targetCurrency.getDefaultFractionDigits();\n      return convertAmount(exchangeRate, sourceFractionDigits, sourceAmount, targetFractionDigits);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f107636c2cc82350a2607d774c092da5b73152e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"f107636c2cc82350a2607d774c092da5b73152e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","f107636c2cc82350a2607d774c092da5b73152e5"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"f107636c2cc82350a2607d774c092da5b73152e5":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}