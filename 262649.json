{"path":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testFactory().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","sourceOld":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","sourceOld":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","sourceOld":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","sourceOld":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2","date":1344893790,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  /**\n   * Case: default\n   */\n  public void testFactory() throws IOException {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    ff.inform(new ClasspathResourceLoader(ff.getClass()));\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    ff.inform(new ClasspathResourceLoader(ff.getClass()));\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init(args);\n    ff.inform(new ClasspathResourceLoader(ff.getClass()));\n    assertEquals(2, ((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","sourceOld":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","bugFix":["ccea5bb6cc45a411fd349ce24ab5a37b343f1d7f","76cc9b4f652f477b113ac4dcf7593e1414108fcc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  /**\n   * Case: default\n   */\n  public void testFactory() throws IOException {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    ff.inform(new ClasspathResourceLoader(ff.getClass()));\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    ff.inform(new ClasspathResourceLoader(ff.getClass()));\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init(args);\n    ff.inform(new ClasspathResourceLoader(ff.getClass()));\n    assertEquals(2, ((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","sourceOld":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testFactory().mjava","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":"  /**\n   * Case: default\n   */\n  public void testFactory() throws IOException {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    ff.inform(new ClasspathResourceLoader(ff.getClass()));\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    ff.inform(new ClasspathResourceLoader(ff.getClass()));\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init(args);\n    ff.inform(new ClasspathResourceLoader(ff.getClass()));\n    assertEquals(2, ((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","sourceOld":"  /**\n   * Case: default\n   */\n  public void testFactory()\n  {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init( args );\n    assertEquals(2,((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory#testFactory().mjava","sourceNew":null,"sourceOld":"  /**\n   * Case: default\n   */\n  public void testFactory() throws IOException {\n    Map<String,String> args = new HashMap<String, String>();\n    \n    PhoneticFilterFactory ff = new PhoneticFilterFactory();\n    \n    args.put( PhoneticFilterFactory.ENCODER, \"Metaphone\" );\n    ff.init( args );\n    ff.inform(new ClasspathResourceLoader(ff.getClass()));\n    assertTrue( ff.getEncoder() instanceof Metaphone );\n    assertTrue( ff.inject ); // default\n\n    args.put( PhoneticFilterFactory.INJECT, \"false\" );\n    ff.init( args );\n    ff.inform(new ClasspathResourceLoader(ff.getClass()));\n    assertFalse( ff.inject );\n\n    args.put( PhoneticFilterFactory.MAX_CODE_LENGTH, \"2\");\n    ff.init(args);\n    ff.inform(new ClasspathResourceLoader(ff.getClass()));\n    assertEquals(2, ((Metaphone) ff.getEncoder()).getMaxCodeLen());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["aba371508186796cc6151d8223a5b4e16d02e26e","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":["c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b05c56a41b733e02a189c48895922b5bd8c7f3d1"],"2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","57da959ec15bb701bd1d1bf3c613b69009ff4bfd","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","2f0a6976d1fc8560dc1cc1ba74ffe3f2474babd2"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}