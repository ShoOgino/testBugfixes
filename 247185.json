{"path":"lucene/core/src/test/org/apache/lucene/search/TestSort.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"b7523dd562634d9145b67eb4c8b3b3db2340532b","date":1330467618,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final DocValues.Source idSource = context.reader().docValues(\"id\").getSource();\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get((int) idSource.getInt(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final DocValues.Source idSource = context.reader().docValues(\"id\").getSource();\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get((int) idSource.getInt(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final FieldCache.Ints idSource = FieldCache.DEFAULT.getInts(context.reader(), \"id\", false);\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get(idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final DocValues.Source idSource = context.reader().docValues(\"id\").getSource();\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get((int) idSource.getInt(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final FieldCache.Ints idSource = FieldCache.DEFAULT.getInts(context.reader(), \"id\", false);\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get(idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final DocValues.Source idSource = context.reader().docValues(\"id\").getSource();\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get((int) idSource.getInt(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","bugFix":["b7523dd562634d9145b67eb4c8b3b3db2340532b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1d5408c3fa04da2652aa3db3f21d700f7111cef","date":1360854465,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final FieldCache.Ints idSource = FieldCache.DEFAULT.getInts(context.reader(), \"id\", false);\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get(idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final FieldCache.Ints idSource = FieldCache.DEFAULT.getInts(context.reader(), \"id\", false);\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get(idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSortRandom.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestSort.RandomFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final FieldCache.Ints idSource = FieldCache.DEFAULT.getInts(context.reader(), \"id\", false);\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get(idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","sourceOld":"    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, Bits acceptDocs) throws IOException {\n      final int maxDoc = context.reader().maxDoc();\n      final FieldCache.Ints idSource = FieldCache.DEFAULT.getInts(context.reader(), \"id\", false);\n      assertNotNull(idSource);\n      final FixedBitSet bits = new FixedBitSet(maxDoc);\n      for(int docID=0;docID<maxDoc;docID++) {\n        if (random.nextFloat() <= density && (acceptDocs == null || acceptDocs.get(docID))) {\n          bits.set(docID);\n          //System.out.println(\"  acc id=\" + idSource.getInt(docID) + \" docID=\" + docID);\n          matchValues.add(docValues.get(idSource.get(docID)));\n        }\n      }\n\n      return bits;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["b7523dd562634d9145b67eb4c8b3b3db2340532b","ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b7523dd562634d9145b67eb4c8b3b3db2340532b"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["b7523dd562634d9145b67eb4c8b3b3db2340532b"],"3b41f996b22bd5518650f897d050088ff808ec03":["d4d69c535930b5cce125cff868d40f6373dc27d4","f1d5408c3fa04da2652aa3db3f21d700f7111cef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f1d5408c3fa04da2652aa3db3f21d700f7111cef":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"b7523dd562634d9145b67eb4c8b3b3db2340532b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f1d5408c3fa04da2652aa3db3f21d700f7111cef"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["3b41f996b22bd5518650f897d050088ff808ec03","f1d5408c3fa04da2652aa3db3f21d700f7111cef"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b7523dd562634d9145b67eb4c8b3b3db2340532b"],"f1d5408c3fa04da2652aa3db3f21d700f7111cef":["3b41f996b22bd5518650f897d050088ff808ec03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7523dd562634d9145b67eb4c8b3b3db2340532b":["d4d69c535930b5cce125cff868d40f6373dc27d4","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","3b41f996b22bd5518650f897d050088ff808ec03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}