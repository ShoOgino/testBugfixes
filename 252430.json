{"path":"src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#rewrite(IndexReader,MultiTermQuery).mjava","commits":[{"id":"8b20609f6fb2cd074bd08115b0c3280b9646af7c","date":1248480213,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"/dev/null","sourceNew":"    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      // Get the enum and start visiting terms.  If we\n      // exhaust the enum before hitting either of the\n      // cutoffs, we use ConstantBooleanQueryRewrite; else,\n      // ConstantFilterRewrite:\n      final Collection pendingTerms = new ArrayList();\n      final int docCountCutoff = (int) ((docCountPercent / 100.) * reader.maxDoc());\n      final int termCountLimit = Math.min(BooleanQuery.getMaxClauseCount(), termCountCutoff);\n      int docVisitCount = 0;\n\n      FilteredTermEnum enumerator = query.getEnum(reader);\n      try {\n        while(true) {\n          Term t = enumerator.term();\n          if (t != null) {\n            pendingTerms.add(t);\n            // Loading the TermInfo from the terms dict here\n            // should not be costly, because 1) the\n            // query/filter will load the TermInfo when it\n            // runs, and 2) the terms dict has a cache:\n            docVisitCount += reader.docFreq(t);\n          }\n\n          if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n            // Too many terms -- make a filter.\n            Query result = new ConstantScoreQuery(new MultiTermQueryWrapperFilter(query));\n            result.setBoost(query.getBoost());\n            return result;\n          } else  if (!enumerator.next()) {\n            // Enumeration is done, and we hit a small\n            // enough number of terms & docs -- just make a\n            // BooleanQuery, now\n            Iterator it = pendingTerms.iterator();\n            BooleanQuery bq = new BooleanQuery(true);\n            while(it.hasNext()) {\n              TermQuery tq = new TermQuery((Term) it.next());\n              bq.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            // Strip scores\n            Query result = new ConstantScoreQuery(new QueryWrapperFilter(bq));\n            result.setBoost(query.getBoost());\n            query.incTotalNumberOfTerms(pendingTerms.size());\n            return result;\n          }\n        }\n      } finally {\n        enumerator.close();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      // Get the enum and start visiting terms.  If we\n      // exhaust the enum before hitting either of the\n      // cutoffs, we use ConstantBooleanQueryRewrite; else,\n      // ConstantFilterRewrite:\n      final Collection<Term> pendingTerms = new ArrayList<Term>();\n      final int docCountCutoff = (int) ((docCountPercent / 100.) * reader.maxDoc());\n      final int termCountLimit = Math.min(BooleanQuery.getMaxClauseCount(), termCountCutoff);\n      int docVisitCount = 0;\n\n      FilteredTermEnum enumerator = query.getEnum(reader);\n      try {\n        while(true) {\n          Term t = enumerator.term();\n          if (t != null) {\n            pendingTerms.add(t);\n            // Loading the TermInfo from the terms dict here\n            // should not be costly, because 1) the\n            // query/filter will load the TermInfo when it\n            // runs, and 2) the terms dict has a cache:\n            docVisitCount += reader.docFreq(t);\n          }\n\n          if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n            // Too many terms -- make a filter.\n            Query result = new ConstantScoreQuery(new MultiTermQueryWrapperFilter(query));\n            result.setBoost(query.getBoost());\n            return result;\n          } else  if (!enumerator.next()) {\n            // Enumeration is done, and we hit a small\n            // enough number of terms & docs -- just make a\n            // BooleanQuery, now\n            BooleanQuery bq = new BooleanQuery(true);\n            for (final Term term: pendingTerms) {\n              TermQuery tq = new TermQuery(term);\n              bq.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            // Strip scores\n            Query result = new ConstantScoreQuery(new QueryWrapperFilter(bq));\n            result.setBoost(query.getBoost());\n            query.incTotalNumberOfTerms(pendingTerms.size());\n            return result;\n          }\n        }\n      } finally {\n        enumerator.close();\n      }\n    }\n\n","sourceOld":"    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      // Get the enum and start visiting terms.  If we\n      // exhaust the enum before hitting either of the\n      // cutoffs, we use ConstantBooleanQueryRewrite; else,\n      // ConstantFilterRewrite:\n      final Collection pendingTerms = new ArrayList();\n      final int docCountCutoff = (int) ((docCountPercent / 100.) * reader.maxDoc());\n      final int termCountLimit = Math.min(BooleanQuery.getMaxClauseCount(), termCountCutoff);\n      int docVisitCount = 0;\n\n      FilteredTermEnum enumerator = query.getEnum(reader);\n      try {\n        while(true) {\n          Term t = enumerator.term();\n          if (t != null) {\n            pendingTerms.add(t);\n            // Loading the TermInfo from the terms dict here\n            // should not be costly, because 1) the\n            // query/filter will load the TermInfo when it\n            // runs, and 2) the terms dict has a cache:\n            docVisitCount += reader.docFreq(t);\n          }\n\n          if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n            // Too many terms -- make a filter.\n            Query result = new ConstantScoreQuery(new MultiTermQueryWrapperFilter(query));\n            result.setBoost(query.getBoost());\n            return result;\n          } else  if (!enumerator.next()) {\n            // Enumeration is done, and we hit a small\n            // enough number of terms & docs -- just make a\n            // BooleanQuery, now\n            Iterator it = pendingTerms.iterator();\n            BooleanQuery bq = new BooleanQuery(true);\n            while(it.hasNext()) {\n              TermQuery tq = new TermQuery((Term) it.next());\n              bq.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            // Strip scores\n            Query result = new ConstantScoreQuery(new QueryWrapperFilter(bq));\n            result.setBoost(query.getBoost());\n            query.incTotalNumberOfTerms(pendingTerms.size());\n            return result;\n          }\n        }\n      } finally {\n        enumerator.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9e2d1d6b657a74e02a910fbc07c98e0420000f3","date":1255993579,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      // Get the enum and start visiting terms.  If we\n      // exhaust the enum before hitting either of the\n      // cutoffs, we use ConstantBooleanQueryRewrite; else,\n      // ConstantFilterRewrite:\n      final Collection<Term> pendingTerms = new ArrayList<Term>();\n      final int docCountCutoff = (int) ((docCountPercent / 100.) * reader.maxDoc());\n      final int termCountLimit = Math.min(BooleanQuery.getMaxClauseCount(), termCountCutoff);\n      int docVisitCount = 0;\n\n      FilteredTermEnum enumerator = query.getEnum(reader);\n      try {\n        while(true) {\n          Term t = enumerator.term();\n          if (t != null) {\n            pendingTerms.add(t);\n            // Loading the TermInfo from the terms dict here\n            // should not be costly, because 1) the\n            // query/filter will load the TermInfo when it\n            // runs, and 2) the terms dict has a cache:\n            docVisitCount += reader.docFreq(t);\n          }\n\n          if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n            // Too many terms -- make a filter.\n            Query result = new ConstantScoreQuery(new MultiTermQueryWrapperFilter<MultiTermQuery>(query));\n            result.setBoost(query.getBoost());\n            return result;\n          } else  if (!enumerator.next()) {\n            // Enumeration is done, and we hit a small\n            // enough number of terms & docs -- just make a\n            // BooleanQuery, now\n            BooleanQuery bq = new BooleanQuery(true);\n            for (final Term term: pendingTerms) {\n              TermQuery tq = new TermQuery(term);\n              bq.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            // Strip scores\n            Query result = new ConstantScoreQuery(new QueryWrapperFilter(bq));\n            result.setBoost(query.getBoost());\n            query.incTotalNumberOfTerms(pendingTerms.size());\n            return result;\n          }\n        }\n      } finally {\n        enumerator.close();\n      }\n    }\n\n","sourceOld":"    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      // Get the enum and start visiting terms.  If we\n      // exhaust the enum before hitting either of the\n      // cutoffs, we use ConstantBooleanQueryRewrite; else,\n      // ConstantFilterRewrite:\n      final Collection<Term> pendingTerms = new ArrayList<Term>();\n      final int docCountCutoff = (int) ((docCountPercent / 100.) * reader.maxDoc());\n      final int termCountLimit = Math.min(BooleanQuery.getMaxClauseCount(), termCountCutoff);\n      int docVisitCount = 0;\n\n      FilteredTermEnum enumerator = query.getEnum(reader);\n      try {\n        while(true) {\n          Term t = enumerator.term();\n          if (t != null) {\n            pendingTerms.add(t);\n            // Loading the TermInfo from the terms dict here\n            // should not be costly, because 1) the\n            // query/filter will load the TermInfo when it\n            // runs, and 2) the terms dict has a cache:\n            docVisitCount += reader.docFreq(t);\n          }\n\n          if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n            // Too many terms -- make a filter.\n            Query result = new ConstantScoreQuery(new MultiTermQueryWrapperFilter(query));\n            result.setBoost(query.getBoost());\n            return result;\n          } else  if (!enumerator.next()) {\n            // Enumeration is done, and we hit a small\n            // enough number of terms & docs -- just make a\n            // BooleanQuery, now\n            BooleanQuery bq = new BooleanQuery(true);\n            for (final Term term: pendingTerms) {\n              TermQuery tq = new TermQuery(term);\n              bq.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            // Strip scores\n            Query result = new ConstantScoreQuery(new QueryWrapperFilter(bq));\n            result.setBoost(query.getBoost());\n            query.incTotalNumberOfTerms(pendingTerms.size());\n            return result;\n          }\n        }\n      } finally {\n        enumerator.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      // Get the enum and start visiting terms.  If we\n      // exhaust the enum before hitting either of the\n      // cutoffs, we use ConstantBooleanQueryRewrite; else,\n      // ConstantFilterRewrite:\n      final Collection<Term> pendingTerms = new ArrayList<Term>();\n      final int docCountCutoff = (int) ((docCountPercent / 100.) * reader.maxDoc());\n      final int termCountLimit = Math.min(BooleanQuery.getMaxClauseCount(), termCountCutoff);\n      int docVisitCount = 0;\n\n      FilteredTermEnum enumerator = query.getEnum(reader);\n      try {\n        while(true) {\n          Term t = enumerator.term();\n          if (t != null) {\n            pendingTerms.add(t);\n            // Loading the TermInfo from the terms dict here\n            // should not be costly, because 1) the\n            // query/filter will load the TermInfo when it\n            // runs, and 2) the terms dict has a cache:\n            docVisitCount += reader.docFreq(t);\n          }\n\n          if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n            // Too many terms -- make a filter.\n            Query result = new ConstantScoreQuery(new MultiTermQueryWrapperFilter<MultiTermQuery>(query));\n            result.setBoost(query.getBoost());\n            return result;\n          } else  if (!enumerator.next()) {\n            // Enumeration is done, and we hit a small\n            // enough number of terms & docs -- just make a\n            // BooleanQuery, now\n            BooleanQuery bq = new BooleanQuery(true);\n            for (final Term term: pendingTerms) {\n              TermQuery tq = new TermQuery(term);\n              bq.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            // Strip scores\n            Query result = new ConstantScoreQuery(new QueryWrapperFilter(bq));\n            result.setBoost(query.getBoost());\n            query.incTotalNumberOfTerms(pendingTerms.size());\n            return result;\n          }\n        }\n      } finally {\n        enumerator.close();\n      }\n    }\n\n","sourceOld":"    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      // Get the enum and start visiting terms.  If we\n      // exhaust the enum before hitting either of the\n      // cutoffs, we use ConstantBooleanQueryRewrite; else,\n      // ConstantFilterRewrite:\n      final Collection<Term> pendingTerms = new ArrayList<Term>();\n      final int docCountCutoff = (int) ((docCountPercent / 100.) * reader.maxDoc());\n      final int termCountLimit = Math.min(BooleanQuery.getMaxClauseCount(), termCountCutoff);\n      int docVisitCount = 0;\n\n      FilteredTermEnum enumerator = query.getEnum(reader);\n      try {\n        while(true) {\n          Term t = enumerator.term();\n          if (t != null) {\n            pendingTerms.add(t);\n            // Loading the TermInfo from the terms dict here\n            // should not be costly, because 1) the\n            // query/filter will load the TermInfo when it\n            // runs, and 2) the terms dict has a cache:\n            docVisitCount += reader.docFreq(t);\n          }\n\n          if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n            // Too many terms -- make a filter.\n            Query result = new ConstantScoreQuery(new MultiTermQueryWrapperFilter<MultiTermQuery>(query));\n            result.setBoost(query.getBoost());\n            return result;\n          } else  if (!enumerator.next()) {\n            // Enumeration is done, and we hit a small\n            // enough number of terms & docs -- just make a\n            // BooleanQuery, now\n            BooleanQuery bq = new BooleanQuery(true);\n            for (final Term term: pendingTerms) {\n              TermQuery tq = new TermQuery(term);\n              bq.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            // Strip scores\n            Query result = new ConstantScoreQuery(new QueryWrapperFilter(bq));\n            result.setBoost(query.getBoost());\n            query.incTotalNumberOfTerms(pendingTerms.size());\n            return result;\n          }\n        }\n      } finally {\n        enumerator.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6cac733bfe923fb362d2b289b2996b0bf10ae22e","date":1260443093,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n\n      // Get the enum and start visiting terms.  If we\n      // exhaust the enum before hitting either of the\n      // cutoffs, we use ConstantBooleanQueryRewrite; else,\n      // ConstantFilterRewrite:\n      final int docCountCutoff = (int) ((docCountPercent / 100.) * reader.maxDoc());\n      final int termCountLimit = Math.min(BooleanQuery.getMaxClauseCount(), termCountCutoff);\n\n      final CutOffTermCollector col = new CutOffTermCollector(reader, docCountCutoff, termCountLimit);\n      collectTerms(reader, query, col);\n      \n      if (col.hasCutOff) {\n        return CONSTANT_SCORE_FILTER_REWRITE.rewrite(reader, query);\n      } else {\n        final Query result;\n        if (col.pendingTerms.isEmpty()) {\n          result = new BooleanQuery(true);\n        } else {\n          BooleanQuery bq = new BooleanQuery(true);\n          for(Term term : col.pendingTerms) {\n            TermQuery tq = new TermQuery(term);\n            bq.add(tq, BooleanClause.Occur.SHOULD);\n          }\n          // Strip scores\n          result = new ConstantScoreQuery(new QueryWrapperFilter(bq));\n          result.setBoost(query.getBoost());\n        }\n        query.incTotalNumberOfTerms(col.pendingTerms.size());\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      // Get the enum and start visiting terms.  If we\n      // exhaust the enum before hitting either of the\n      // cutoffs, we use ConstantBooleanQueryRewrite; else,\n      // ConstantFilterRewrite:\n      final Collection<Term> pendingTerms = new ArrayList<Term>();\n      final int docCountCutoff = (int) ((docCountPercent / 100.) * reader.maxDoc());\n      final int termCountLimit = Math.min(BooleanQuery.getMaxClauseCount(), termCountCutoff);\n      int docVisitCount = 0;\n\n      FilteredTermEnum enumerator = query.getEnum(reader);\n      try {\n        while(true) {\n          Term t = enumerator.term();\n          if (t != null) {\n            pendingTerms.add(t);\n            // Loading the TermInfo from the terms dict here\n            // should not be costly, because 1) the\n            // query/filter will load the TermInfo when it\n            // runs, and 2) the terms dict has a cache:\n            docVisitCount += reader.docFreq(t);\n          }\n\n          if (pendingTerms.size() >= termCountLimit || docVisitCount >= docCountCutoff) {\n            // Too many terms -- make a filter.\n            Query result = new ConstantScoreQuery(new MultiTermQueryWrapperFilter<MultiTermQuery>(query));\n            result.setBoost(query.getBoost());\n            return result;\n          } else  if (!enumerator.next()) {\n            // Enumeration is done, and we hit a small\n            // enough number of terms & docs -- just make a\n            // BooleanQuery, now\n            BooleanQuery bq = new BooleanQuery(true);\n            for (final Term term: pendingTerms) {\n              TermQuery tq = new TermQuery(term);\n              bq.add(tq, BooleanClause.Occur.SHOULD);\n            }\n            // Strip scores\n            Query result = new ConstantScoreQuery(new QueryWrapperFilter(bq));\n            result.setBoost(query.getBoost());\n            query.incTotalNumberOfTerms(pendingTerms.size());\n            return result;\n          }\n        }\n      } finally {\n        enumerator.close();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery.ConstantScoreAutoRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n\n      // Get the enum and start visiting terms.  If we\n      // exhaust the enum before hitting either of the\n      // cutoffs, we use ConstantBooleanQueryRewrite; else,\n      // ConstantFilterRewrite:\n      final int docCountCutoff = (int) ((docCountPercent / 100.) * reader.maxDoc());\n      final int termCountLimit = Math.min(BooleanQuery.getMaxClauseCount(), termCountCutoff);\n\n      final CutOffTermCollector col = new CutOffTermCollector(reader, docCountCutoff, termCountLimit);\n      collectTerms(reader, query, col);\n      \n      if (col.hasCutOff) {\n        return CONSTANT_SCORE_FILTER_REWRITE.rewrite(reader, query);\n      } else {\n        final Query result;\n        if (col.pendingTerms.isEmpty()) {\n          result = new BooleanQuery(true);\n        } else {\n          BooleanQuery bq = new BooleanQuery(true);\n          for(Term term : col.pendingTerms) {\n            TermQuery tq = new TermQuery(term);\n            bq.add(tq, BooleanClause.Occur.SHOULD);\n          }\n          // Strip scores\n          result = new ConstantScoreQuery(new QueryWrapperFilter(bq));\n          result.setBoost(query.getBoost());\n        }\n        query.incTotalNumberOfTerms(col.pendingTerms.size());\n        return result;\n      }\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(final IndexReader reader, final MultiTermQuery query) throws IOException {\n\n      // Get the enum and start visiting terms.  If we\n      // exhaust the enum before hitting either of the\n      // cutoffs, we use ConstantBooleanQueryRewrite; else,\n      // ConstantFilterRewrite:\n      final int docCountCutoff = (int) ((docCountPercent / 100.) * reader.maxDoc());\n      final int termCountLimit = Math.min(BooleanQuery.getMaxClauseCount(), termCountCutoff);\n\n      final CutOffTermCollector col = new CutOffTermCollector(reader, docCountCutoff, termCountLimit);\n      collectTerms(reader, query, col);\n      \n      if (col.hasCutOff) {\n        return CONSTANT_SCORE_FILTER_REWRITE.rewrite(reader, query);\n      } else {\n        final Query result;\n        if (col.pendingTerms.isEmpty()) {\n          result = new BooleanQuery(true);\n        } else {\n          BooleanQuery bq = new BooleanQuery(true);\n          for(Term term : col.pendingTerms) {\n            TermQuery tq = new TermQuery(term);\n            bq.add(tq, BooleanClause.Occur.SHOULD);\n          }\n          // Strip scores\n          result = new ConstantScoreQuery(new QueryWrapperFilter(bq));\n          result.setBoost(query.getBoost());\n        }\n        query.incTotalNumberOfTerms(col.pendingTerms.size());\n        return result;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6cac733bfe923fb362d2b289b2996b0bf10ae22e":["8a9e385641d717e641408d8fbbc62be8fc766357"],"c9e2d1d6b657a74e02a910fbc07c98e0420000f3":["ef82ff03e4016c705811b2658e81471a645c0e49"],"8a9e385641d717e641408d8fbbc62be8fc766357":["c9e2d1d6b657a74e02a910fbc07c98e0420000f3"],"ef82ff03e4016c705811b2658e81471a645c0e49":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["6cac733bfe923fb362d2b289b2996b0bf10ae22e"]},"commit2Childs":{"6cac733bfe923fb362d2b289b2996b0bf10ae22e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c9e2d1d6b657a74e02a910fbc07c98e0420000f3":["8a9e385641d717e641408d8fbbc62be8fc766357"],"8a9e385641d717e641408d8fbbc62be8fc766357":["6cac733bfe923fb362d2b289b2996b0bf10ae22e"],"ef82ff03e4016c705811b2658e81471a645c0e49":["c9e2d1d6b657a74e02a910fbc07c98e0420000f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b20609f6fb2cd074bd08115b0c3280b9646af7c"],"8b20609f6fb2cd074bd08115b0c3280b9646af7c":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}