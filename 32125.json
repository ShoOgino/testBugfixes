{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) {\n    FileOutputStream outFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    try {\n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n      outFile.close();\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(outFile);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) {\n    FileOutputStream outFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    try {\n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n      outFile.close();\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(outFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) {\n    FileOutputStream outFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    try {\n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n      outFile.close();\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(outFile);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) {\n    FileOutputStream outFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    try {\n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n      outFile.close();\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(outFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"solr/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) {\n    FileOutputStream outFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    try {\n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n      outFile.close();\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(outFile);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) {\n    FileOutputStream outFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    try {\n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n      outFile.close();\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(outFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1888bdba4dbb0c062f4a2456bba74c12fb0f42e","date":1355002015,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, IOContext.DEFAULT);\n      OutputStream outFile = new PropertiesOutputStream(out);\n      try {\n        props.store(outFile, \"Replication details\");\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) {\n    FileOutputStream outFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    try {\n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n      outFile.close();\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(outFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"865348f7ac33f21bb9d0acd227b4af06d95e3f9c","date":1355011923,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, IOContext.DEFAULT);\n      OutputStream outFile = new PropertiesOutputStream(out);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, IOContext.DEFAULT);\n      OutputStream outFile = new PropertiesOutputStream(out);\n      try {\n        props.store(outFile, \"Replication details\");\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, IOContext.DEFAULT);\n      OutputStream outFile = new PropertiesOutputStream(out);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) {\n    FileOutputStream outFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    try {\n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n      outFile.close();\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(outFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15fdb1d84f9e74320d318f682fd2b7d370398857","date":1355194688,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      OutputStream outFile = new PropertiesOutputStream(out);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, IOContext.DEFAULT);\n      OutputStream outFile = new PropertiesOutputStream(out);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      OutputStream outFile = new PropertiesOutputStream(out);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, IOContext.DEFAULT);\n      OutputStream outFile = new PropertiesOutputStream(out);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","date":1358098706,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      OutputStream outFile = new PropertiesOutputStream(out);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      OutputStream outFile = new PropertiesOutputStream(out);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      OutputStream outFile = new PropertiesOutputStream(out);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      OutputStream outFile = new PropertiesOutputStream(out);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fd8fc50365ae7bb9c0d47256bc40182559b70d1","date":1373649022,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      Writer outFile = new OutputStreamWriter(new PropertiesOutputStream(out), CHARSET_UTF_8);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      OutputStream outFile = new PropertiesOutputStream(out);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      Writer outFile = new OutputStreamWriter(new PropertiesOutputStream(out), CHARSET_UTF_8);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      OutputStream outFile = new PropertiesOutputStream(out);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d06343967a29132f5d782f74e8d0988400278a02","date":1388963049,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuilder sb = readToStringBuilder(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuilder(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      Writer outFile = new OutputStreamWriter(new PropertiesOutputStream(out), CHARSET_UTF_8);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      Writer outFile = new OutputStreamWriter(new PropertiesOutputStream(out), CHARSET_UTF_8);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","bugFix":["4f1a1d7f1604a41328b566b1be0c5ad6038117e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuilder sb = readToStringBuilder(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuilder(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      Writer outFile = new OutputStreamWriter(new PropertiesOutputStream(out), CHARSET_UTF_8);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuilder sb = readToStringBuilder(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuilder(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      Writer outFile = new OutputStreamWriter(new PropertiesOutputStream(out), CHARSET_UTF_8);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuilder sb = readToStringBuilder(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuilder(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      Writer outFile = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuilder sb = readToStringBuilder(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuilder(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      Writer outFile = new OutputStreamWriter(new PropertiesOutputStream(out), CHARSET_UTF_8);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuilder sb = readToStringBuilder(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuilder(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      Writer outFile = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuilder sb = readToStringBuilder(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuilder(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      Writer outFile = new OutputStreamWriter(new PropertiesOutputStream(out), CHARSET_UTF_8);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":5,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuilder sb = readToStringBuilder(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded()));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuilder(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      Writer outFile = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuilder sb = readToStringBuilder(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuilder(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      Writer outFile = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   * @throws IOException on IO error\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) throws IOException {\n    List<String> confFiles = new ArrayList<>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    Directory dir = null;\n    try {\n      dir = solrCore.getDirectoryFactory().get(solrCore.getDataDir(), DirContext.META_DATA, solrCore.getSolrConfig().indexConfig.lockType);\n      \n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuilder sb = readToStringBuilder(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuilder(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n\n      final IndexOutput out = dir.createOutput(REPLICATION_PROPERTIES, DirectoryFactory.IOCONTEXT_NO_CACHE);\n      Writer outFile = new OutputStreamWriter(new PropertiesOutputStream(out), StandardCharsets.UTF_8);\n      try {\n        props.store(outFile, \"Replication details\");\n        dir.sync(Collections.singleton(REPLICATION_PROPERTIES));\n      } finally {\n        IOUtils.closeQuietly(outFile);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    } finally {\n      if (dir != null) {\n        solrCore.getDirectoryFactory().release(dir);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15fdb1d84f9e74320d318f682fd2b7d370398857":["865348f7ac33f21bb9d0acd227b4af06d95e3f9c"],"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","7d89d7e4e5101347833eea558851bf4209218619"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","15fdb1d84f9e74320d318f682fd2b7d370398857"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d06343967a29132f5d782f74e8d0988400278a02"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674","1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["15fdb1d84f9e74320d318f682fd2b7d370398857"],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","865348f7ac33f21bb9d0acd227b4af06d95e3f9c"],"7d89d7e4e5101347833eea558851bf4209218619":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"865348f7ac33f21bb9d0acd227b4af06d95e3f9c":["d1888bdba4dbb0c062f4a2456bba74c12fb0f42e"],"d1888bdba4dbb0c062f4a2456bba74c12fb0f42e":["c26f00b574427b55127e869b935845554afde1fa"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["7d89d7e4e5101347833eea558851bf4209218619","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["7d89d7e4e5101347833eea558851bf4209218619"],"d06343967a29132f5d782f74e8d0988400278a02":["1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20f6b7cff3771384f27af0f059795d7e64aff6b9"]},"commit2Childs":{"15fdb1d84f9e74320d318f682fd2b7d370398857":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["8917bfede3b4ca30f4305c1e391e9218959cd723"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","7d89d7e4e5101347833eea558851bf4209218619"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c26f00b574427b55127e869b935845554afde1fa":["407687e67faf6e1f02a211ca078d8e3eed631027","d1888bdba4dbb0c062f4a2456bba74c12fb0f42e"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"1eda2abfda9da3ca2bc5c5872d6b8c0f4948f674":["37a0f60745e53927c4c876cfe5b5a58170f0646c","8917bfede3b4ca30f4305c1e391e9218959cd723","1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"865348f7ac33f21bb9d0acd227b4af06d95e3f9c":["15fdb1d84f9e74320d318f682fd2b7d370398857","407687e67faf6e1f02a211ca078d8e3eed631027"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d06343967a29132f5d782f74e8d0988400278a02"],"d1888bdba4dbb0c062f4a2456bba74c12fb0f42e":["865348f7ac33f21bb9d0acd227b4af06d95e3f9c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d06343967a29132f5d782f74e8d0988400278a02":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","37a0f60745e53927c4c876cfe5b5a58170f0646c","8917bfede3b4ca30f4305c1e391e9218959cd723","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}