{"path":"solr/core/src/java/org/apache/solr/util/CryptoKeys#main(String[]).mjava","commits":[{"id":"b3a34dae868734612eb6329aa0ef754f30bd2036","date":1438783154,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  public static void main(String[] args) throws Exception {\n    RSAKeyPair keyPair = new RSAKeyPair();\n    System.out.println(keyPair.getPublicKeyStr());\n    PublicKey pk = deserializeX509PublicKey(keyPair.getPublicKeyStr());\n    byte[] payload = \"Hello World!\".getBytes(StandardCharsets.UTF_8);\n    byte[] encrypted = keyPair.encrypt(ByteBuffer.wrap(payload));\n    String cipherBase64 = Base64.byteArrayToBase64(encrypted);\n    System.out.println(\"encrypted: \"+ cipherBase64);\n    System.out.println(\"signed: \"+ Base64.byteArrayToBase64(keyPair.signSha256(payload)));\n    System.out.println(\"decrypted \"+  new String(decryptRSA(encrypted , pk), StandardCharsets.UTF_8));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/CryptoKeys#main(String[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/CryptoKeys#main(String[]).mjava","sourceNew":"  public static void main(String[] args) throws Exception {\n    RSAKeyPair keyPair = new RSAKeyPair();\n    CLIO.out(keyPair.getPublicKeyStr());\n    PublicKey pk = deserializeX509PublicKey(keyPair.getPublicKeyStr());\n    byte[] payload = \"Hello World!\".getBytes(StandardCharsets.UTF_8);\n    byte[] encrypted = keyPair.encrypt(ByteBuffer.wrap(payload));\n    String cipherBase64 = Base64.byteArrayToBase64(encrypted);\n    CLIO.out(\"encrypted: \"+ cipherBase64);\n    CLIO.out(\"signed: \"+ Base64.byteArrayToBase64(keyPair.signSha256(payload)));\n    CLIO.out(\"decrypted \"+  new String(decryptRSA(encrypted , pk), StandardCharsets.UTF_8));\n  }\n\n","sourceOld":"  public static void main(String[] args) throws Exception {\n    RSAKeyPair keyPair = new RSAKeyPair();\n    System.out.println(keyPair.getPublicKeyStr());\n    PublicKey pk = deserializeX509PublicKey(keyPair.getPublicKeyStr());\n    byte[] payload = \"Hello World!\".getBytes(StandardCharsets.UTF_8);\n    byte[] encrypted = keyPair.encrypt(ByteBuffer.wrap(payload));\n    String cipherBase64 = Base64.byteArrayToBase64(encrypted);\n    System.out.println(\"encrypted: \"+ cipherBase64);\n    System.out.println(\"signed: \"+ Base64.byteArrayToBase64(keyPair.signSha256(payload)));\n    System.out.println(\"decrypted \"+  new String(decryptRSA(encrypted , pk), StandardCharsets.UTF_8));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b409047f69fb85704c506753bc23a37d7ad37b54","date":1582574830,"type":4,"author":"Mike","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/CryptoKeys#main(String[]).mjava","sourceNew":null,"sourceOld":"  public static void main(String[] args) throws Exception {\n    RSAKeyPair keyPair = new RSAKeyPair();\n    CLIO.out(keyPair.getPublicKeyStr());\n    PublicKey pk = deserializeX509PublicKey(keyPair.getPublicKeyStr());\n    byte[] payload = \"Hello World!\".getBytes(StandardCharsets.UTF_8);\n    byte[] encrypted = keyPair.encrypt(ByteBuffer.wrap(payload));\n    String cipherBase64 = Base64.byteArrayToBase64(encrypted);\n    CLIO.out(\"encrypted: \"+ cipherBase64);\n    CLIO.out(\"signed: \"+ Base64.byteArrayToBase64(keyPair.signSha256(payload)));\n    CLIO.out(\"decrypted \"+  new String(decryptRSA(encrypted , pk), StandardCharsets.UTF_8));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b409047f69fb85704c506753bc23a37d7ad37b54":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b3a34dae868734612eb6329aa0ef754f30bd2036":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b409047f69fb85704c506753bc23a37d7ad37b54"]},"commit2Childs":{"b409047f69fb85704c506753bc23a37d7ad37b54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3a34dae868734612eb6329aa0ef754f30bd2036"],"b3a34dae868734612eb6329aa0ef754f30bd2036":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["b409047f69fb85704c506753bc23a37d7ad37b54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}