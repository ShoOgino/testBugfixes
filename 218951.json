{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,SegmentReader,IOContext).mjava","commits":[{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,SegmentReader,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfo si, SegmentReader parent, IOContext context) throws IOException {\n    assert si.dir == parent.getSegmentInfo().dir;\n    this.si = si;\n\n    // It's no longer possible to unDeleteAll, so, we can\n    // only be created if we have deletions:\n    assert si.hasDeletions();\n\n    // ... but load our own deleted docs:\n    liveDocs = new BitVector(si.dir, si.getDelFileName(), new IOContext(IOContext.READ, true));\n    numDocs = si.docCount - si.getDelCount();\n    assert checkLiveCounts(false);\n\n    // We share core w/ parent:\n    parent.core.incRef();\n    core = parent.core;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99103c6ef1abff86551794839ef5db8e59fed24a","date":1324406223,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,SegmentReader,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,SegmentReader,IOContext).mjava","sourceNew":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfo si, SegmentReader parent, IOContext context) throws IOException {\n    assert si.dir == parent.getSegmentInfo().dir;\n    this.si = si;\n\n    // It's no longer possible to unDeleteAll, so, we can\n    // only be created if we have deletions:\n    assert si.hasDeletions();\n\n    // ... but load our own deleted docs:\n    liveDocs = new BitVector(si.dir, si.getDelFileName(), context);\n    numDocs = si.docCount - si.getDelCount();\n    assert checkLiveCounts(false);\n\n    // We share core w/ parent:\n    parent.core.incRef();\n    core = parent.core;\n  }\n\n","sourceOld":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfo si, SegmentReader parent, IOContext context) throws IOException {\n    assert si.dir == parent.getSegmentInfo().dir;\n    this.si = si;\n\n    // It's no longer possible to unDeleteAll, so, we can\n    // only be created if we have deletions:\n    assert si.hasDeletions();\n\n    // ... but load our own deleted docs:\n    liveDocs = new BitVector(si.dir, si.getDelFileName(), new IOContext(IOContext.READ, true));\n    numDocs = si.docCount - si.getDelCount();\n    assert checkLiveCounts(false);\n\n    // We share core w/ parent:\n    parent.core.incRef();\n    core = parent.core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7","date":1326996651,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,SegmentReader,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,SegmentReader,IOContext).mjava","sourceNew":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfo si, SegmentReader parent, IOContext context) throws IOException {\n    assert si.dir == parent.getSegmentInfo().dir;\n    this.si = si;\n\n    // It's no longer possible to unDeleteAll, so, we can\n    // only be created if we have deletions:\n    assert si.hasDeletions();\n\n    // ... but load our own deleted docs:\n    liveDocs = si.getCodec().liveDocsFormat().readLiveDocs(si.dir, si, context);\n    numDocs = si.docCount - si.getDelCount();\n    assert checkLiveCounts(false);\n\n    // We share core w/ parent:\n    parent.core.incRef();\n    core = parent.core;\n  }\n\n","sourceOld":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfo si, SegmentReader parent, IOContext context) throws IOException {\n    assert si.dir == parent.getSegmentInfo().dir;\n    this.si = si;\n\n    // It's no longer possible to unDeleteAll, so, we can\n    // only be created if we have deletions:\n    assert si.hasDeletions();\n\n    // ... but load our own deleted docs:\n    liveDocs = new BitVector(si.dir, si.getDelFileName(), context);\n    numDocs = si.docCount - si.getDelCount();\n    assert checkLiveCounts(false);\n\n    // We share core w/ parent:\n    parent.core.incRef();\n    core = parent.core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e","date":1327757020,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,SegmentReader,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,SegmentReader,IOContext).mjava","sourceNew":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfo si, SegmentReader parent, IOContext context) throws IOException {\n    assert si.dir == parent.getSegmentInfo().dir;\n    this.si = si;\n\n    // It's no longer possible to unDeleteAll, so, we can\n    // only be created if we have deletions:\n    assert si.hasDeletions();\n\n    // ... but load our own deleted docs:\n    liveDocs = si.getCodec().liveDocsFormat().readLiveDocs(si.dir, si, context);\n    numDocs = si.docCount - si.getDelCount();\n\n    // We share core w/ parent:\n    parent.core.incRef();\n    core = parent.core;\n  }\n\n","sourceOld":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfo si, SegmentReader parent, IOContext context) throws IOException {\n    assert si.dir == parent.getSegmentInfo().dir;\n    this.si = si;\n\n    // It's no longer possible to unDeleteAll, so, we can\n    // only be created if we have deletions:\n    assert si.hasDeletions();\n\n    // ... but load our own deleted docs:\n    liveDocs = si.getCodec().liveDocsFormat().readLiveDocs(si.dir, si, context);\n    numDocs = si.docCount - si.getDelCount();\n    assert checkLiveCounts(false);\n\n    // We share core w/ parent:\n    parent.core.incRef();\n    core = parent.core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0f3fe3cd74aebb73ff7e1b4f2fe8354d5976093","date":1327765628,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,SegmentReader,IOContext).mjava","sourceNew":null,"sourceOld":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfo si, SegmentReader parent, IOContext context) throws IOException {\n    assert si.dir == parent.getSegmentInfo().dir;\n    this.si = si;\n\n    // It's no longer possible to unDeleteAll, so, we can\n    // only be created if we have deletions:\n    assert si.hasDeletions();\n\n    // ... but load our own deleted docs:\n    liveDocs = si.getCodec().liveDocsFormat().readLiveDocs(si.dir, si, context);\n    numDocs = si.docCount - si.getDelCount();\n\n    // We share core w/ parent:\n    parent.core.incRef();\n    core = parent.core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31","date":1327836826,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,SegmentReader,IOContext).mjava","sourceNew":null,"sourceOld":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfo si, SegmentReader parent, IOContext context) throws IOException {\n    assert si.dir == parent.getSegmentInfo().dir;\n    this.si = si;\n\n    // It's no longer possible to unDeleteAll, so, we can\n    // only be created if we have deletions:\n    assert si.hasDeletions();\n\n    // ... but load our own deleted docs:\n    liveDocs = new BitVector(si.dir, si.getDelFileName(), context);\n    numDocs = si.docCount - si.getDelCount();\n    assert checkLiveCounts(false);\n\n    // We share core w/ parent:\n    parent.core.incRef();\n    core = parent.core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,SegmentReader,IOContext).mjava","sourceNew":null,"sourceOld":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfo si, SegmentReader parent, IOContext context) throws IOException {\n    assert si.dir == parent.getSegmentInfo().dir;\n    this.si = si;\n\n    // It's no longer possible to unDeleteAll, so, we can\n    // only be created if we have deletions:\n    assert si.hasDeletions();\n\n    // ... but load our own deleted docs:\n    liveDocs = new BitVector(si.dir, si.getDelFileName(), context);\n    numDocs = si.docCount - si.getDelCount();\n    assert checkLiveCounts(false);\n\n    // We share core w/ parent:\n    parent.core.incRef();\n    core = parent.core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7":["99103c6ef1abff86551794839ef5db8e59fed24a"],"99103c6ef1abff86551794839ef5db8e59fed24a":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"d0f3fe3cd74aebb73ff7e1b4f2fe8354d5976093":["d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e":["ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["99103c6ef1abff86551794839ef5db8e59fed24a","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["99103c6ef1abff86551794839ef5db8e59fed24a","d0f3fe3cd74aebb73ff7e1b4f2fe8354d5976093"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"]},"commit2Childs":{"ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7":["d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e"],"99103c6ef1abff86551794839ef5db8e59fed24a":["ef2642aa76c0d0714b26e5e7d5e3438a62db3cb7","fd92b8bcc88e969302510acf77bd6970da3994c4","c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"d0f3fe3cd74aebb73ff7e1b4f2fe8354d5976093":["c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"d3d53ad7b9687e0dfaacaab099d3c7e98bfbe78e":["d0f3fe3cd74aebb73ff7e1b4f2fe8354d5976093"],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"c9f2d6bb11ccaac366d9b7652b2feb0c715d9c31":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["99103c6ef1abff86551794839ef5db8e59fed24a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}