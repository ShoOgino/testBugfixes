{"path":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","commits":[{"id":"1f192203c3feece147e3227c2446101d33858d81","date":1438359704,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","pathOld":"/dev/null","sourceNew":"  /** Initializes core and does some sanity checking of schema */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-functionquery.xml\",\"schema11.xml\");\n\n    // sanity check the expected properties of our fields (ie: who broke the schema?)\n    IndexSchema schema = h.getCore().getLatestSchema();\n    for (String type : new String[] {\"i\", \"l\", \"f\", \"d\"}) {\n      for (String suffix : new String [] {\"\", \"_dv\", \"_ni_dv\"}) {\n        String f = \"val_t\" + type + \"s\" + suffix;\n        SchemaField sf = schema.getField(f);\n        assertTrue(f + \" is not multivalued\", sf.multiValued());\n        assertEquals(f + \" doesn't have expected docValues status\",\n                     f.contains(\"dv\"), sf.hasDocValues());\n        assertEquals(f + \" doesn't have expected index status\",\n                     ! f.contains(\"ni\"), sf.indexed());\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"351efe6fdecf9af62134d37ec2582e4a0331a4dc","date":1498149096,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","sourceNew":"  /** Initializes core and does some sanity checking of schema */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    initCore(\"solrconfig-functionquery.xml\",\"schema11.xml\");\n    checkFields(new String[] {\"i\", \"l\", \"f\", \"d\"}, new String [] {\"_p\", \"_ni_p\"});\n    checkFields(new String[] {\"ti\", \"tl\", \"tf\", \"td\"}, new String [] {\"\", \"_dv\", \"_ni_dv\"});\n  }\n\n","sourceOld":"  /** Initializes core and does some sanity checking of schema */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-functionquery.xml\",\"schema11.xml\");\n    checkFields(new String[] {\"i\", \"l\", \"f\", \"d\"}, new String [] {\"_p\", \"_ni_p\"});\n    checkFields(new String[] {\"ti\", \"tl\", \"tf\", \"td\"}, new String [] {\"\", \"_dv\", \"_ni_dv\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e","date":1497547232,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","sourceNew":"  /** Initializes core and does some sanity checking of schema */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-functionquery.xml\",\"schema11.xml\");\n    checkFields(new String[] {\"i\", \"l\", \"f\", \"d\"}, new String [] {\"_p\", \"_ni_p\"});\n    checkFields(new String[] {\"ti\", \"tl\", \"tf\", \"td\"}, new String [] {\"\", \"_dv\", \"_ni_dv\"});\n  }\n\n","sourceOld":"  /** Initializes core and does some sanity checking of schema */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-functionquery.xml\",\"schema11.xml\");\n\n    // sanity check the expected properties of our fields (ie: who broke the schema?)\n    IndexSchema schema = h.getCore().getLatestSchema();\n    for (String type : new String[] {\"i\", \"l\", \"f\", \"d\"}) {\n      for (String suffix : new String [] {\"\", \"_dv\", \"_ni_dv\"}) {\n        String f = \"val_t\" + type + \"s\" + suffix;\n        SchemaField sf = schema.getField(f);\n        assertTrue(f + \" is not multivalued\", sf.multiValued());\n        assertEquals(f + \" doesn't have expected docValues status\",\n                     f.contains(\"dv\"), sf.hasDocValues());\n        assertEquals(f + \" doesn't have expected index status\",\n                     ! f.contains(\"ni\"), sf.indexed());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","sourceNew":"  /** Initializes core and does some sanity checking of schema */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-functionquery.xml\",\"schema11.xml\");\n    checkFields(new String[] {\"i\", \"l\", \"f\", \"d\"}, new String [] {\"_p\", \"_ni_p\"});\n    checkFields(new String[] {\"ti\", \"tl\", \"tf\", \"td\"}, new String [] {\"\", \"_dv\", \"_ni_dv\"});\n  }\n\n","sourceOld":"  /** Initializes core and does some sanity checking of schema */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-functionquery.xml\",\"schema11.xml\");\n\n    // sanity check the expected properties of our fields (ie: who broke the schema?)\n    IndexSchema schema = h.getCore().getLatestSchema();\n    for (String type : new String[] {\"i\", \"l\", \"f\", \"d\"}) {\n      for (String suffix : new String [] {\"\", \"_dv\", \"_ni_dv\"}) {\n        String f = \"val_t\" + type + \"s\" + suffix;\n        SchemaField sf = schema.getField(f);\n        assertTrue(f + \" is not multivalued\", sf.multiValued());\n        assertEquals(f + \" doesn't have expected docValues status\",\n                     f.contains(\"dv\"), sf.hasDocValues());\n        assertEquals(f + \" doesn't have expected index status\",\n                     ! f.contains(\"ni\"), sf.indexed());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","sourceNew":"  /** Initializes core and does some sanity checking of schema */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    initCore(\"solrconfig-functionquery.xml\",\"schema11.xml\");\n    checkFields(new String[] {\"i\", \"l\", \"f\", \"d\"}, new String [] {\"_p\", \"_ni_p\"});\n    checkFields(new String[] {\"ti\", \"tl\", \"tf\", \"td\"}, new String [] {\"\", \"_dv\", \"_ni_dv\"});\n  }\n\n","sourceOld":"  /** Initializes core and does some sanity checking of schema */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-functionquery.xml\",\"schema11.xml\");\n    checkFields(new String[] {\"i\", \"l\", \"f\", \"d\"}, new String [] {\"_p\", \"_ni_p\"});\n    checkFields(new String[] {\"ti\", \"tl\", \"tf\", \"td\"}, new String [] {\"\", \"_dv\", \"_ni_dv\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","sourceNew":"  /** Initializes core and does some sanity checking of schema */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    initCore(\"solrconfig-functionquery.xml\",\"schema11.xml\");\n    checkFields(new String[] {\"i\", \"l\", \"f\", \"d\"}, new String [] {\"_p\", \"_ni_p\"});\n    checkFields(new String[] {\"ti\", \"tl\", \"tf\", \"td\"}, new String [] {\"\", \"_dv\", \"_ni_dv\"});\n  }\n\n","sourceOld":"  /** Initializes core and does some sanity checking of schema */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig-functionquery.xml\",\"schema11.xml\");\n\n    // sanity check the expected properties of our fields (ie: who broke the schema?)\n    IndexSchema schema = h.getCore().getLatestSchema();\n    for (String type : new String[] {\"i\", \"l\", \"f\", \"d\"}) {\n      for (String suffix : new String [] {\"\", \"_dv\", \"_ni_dv\"}) {\n        String f = \"val_t\" + type + \"s\" + suffix;\n        SchemaField sf = schema.getField(f);\n        assertTrue(f + \" is not multivalued\", sf.multiValued());\n        assertEquals(f + \" doesn't have expected docValues status\",\n                     f.contains(\"dv\"), sf.hasDocValues());\n        assertEquals(f + \" doesn't have expected index status\",\n                     ! f.contains(\"ni\"), sf.indexed());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cf2282b6a7c3f113e7a233b785b80527c03d590","date":1516129064,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","sourceNew":"  /** Initializes core and does some sanity checking of schema */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    initCore(\"solrconfig-functionquery.xml\",\"schema11.xml\");\n    checkFields(new String[] {\"i\", \"l\", \"f\", \"d\"}, new String [] {\"_p\", \"_ni_p\"});\n    checkFields(new String[] {\"ti\", \"tl\", \"tf\", \"td\"}, new String [] {\"\", \"_dv\", \"_ni_dv\"});\n    checkFields(new String[] {\"str\", // no expectation on missing first/last\n                              \"str_missf_\", \"str_missl_\",\n                              \"int_missf_\", \"int_missl_\",\n                              \"long_missf_\", \"long_missl_\",\n                              \"float_missf_\", \"float_missl_\",\n                              \"double_missf_\", \"double_missl_\",\n                              \"date_missf_\", \"date_missl_\",\n                              \"enum_missf_\", \"enum_missl_\",\n                              \"bool_missf_\", \"bool_missl_\"  }, new String [] {\"_dv\"});\n      \n  }\n\n","sourceOld":"  /** Initializes core and does some sanity checking of schema */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    initCore(\"solrconfig-functionquery.xml\",\"schema11.xml\");\n    checkFields(new String[] {\"i\", \"l\", \"f\", \"d\"}, new String [] {\"_p\", \"_ni_p\"});\n    checkFields(new String[] {\"ti\", \"tl\", \"tf\", \"td\"}, new String [] {\"\", \"_dv\", \"_ni_dv\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","sourceNew":"  /** Initializes core and does some sanity checking of schema */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    initCore(\"solrconfig-functionquery.xml\",\"schema11.xml\");\n    checkFields(new String[] {\"i\", \"l\", \"f\", \"d\"}, new String [] {\"_p\", \"_ni_p\"});\n    checkFields(new String[] {\"ti\", \"tl\", \"tf\", \"td\"}, new String [] {\"\", \"_dv\", \"_ni_dv\"});\n    checkFields(new String[] {\"str\", // no expectation on missing first/last\n                              \"str_missf_\", \"str_missl_\",\n                              \"int_missf_\", \"int_missl_\",\n                              \"long_missf_\", \"long_missl_\",\n                              \"float_missf_\", \"float_missl_\",\n                              \"double_missf_\", \"double_missl_\",\n                              \"date_missf_\", \"date_missl_\",\n                              \"enum_missf_\", \"enum_missl_\",\n                              \"bool_missf_\", \"bool_missl_\"  }, new String [] {\"_dv\"});\n      \n  }\n\n","sourceOld":"  /** Initializes core and does some sanity checking of schema */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    initCore(\"solrconfig-functionquery.xml\",\"schema11.xml\");\n    checkFields(new String[] {\"i\", \"l\", \"f\", \"d\"}, new String [] {\"_p\", \"_ni_p\"});\n    checkFields(new String[] {\"ti\", \"tl\", \"tf\", \"td\"}, new String [] {\"\", \"_dv\", \"_ni_dv\"});\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09db84b25dda87b73022d145a68f14c86a3a552d","date":1517506829,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/function/TestMinMaxOnMultiValuedField#beforeClass().mjava","sourceNew":"  /** Initializes core and does some sanity checking of schema */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    initCore(\"solrconfig-functionquery.xml\",\"schema11.xml\");\n    checkFields(new String[] {\"i\", \"l\", \"f\", \"d\"}, new String [] {\"_p\", \"_ni_p\"});\n    checkFields(new String[] {\"ti\", \"tl\", \"tf\", \"td\"}, new String [] {\"\", \"_dv\", \"_ni_dv\"});\n    checkFields(new String[] {\"str\", // no expectation on missing first/last\n                              \"str_missf_\", \"str_missl_\",\n                              \"int_missf_\", \"int_missl_\",\n                              \"long_missf_\", \"long_missl_\",\n                              \"float_missf_\", \"float_missl_\",\n                              \"double_missf_\", \"double_missl_\",\n                              \"date_missf_\", \"date_missl_\",\n                              \"enum_missf_\", \"enum_missl_\",\n                              \"bool_missf_\", \"bool_missl_\"  }, new String [] {\"_dv\"});\n    checkFields(new String[] {\"stxt_\", // no expectation on missing first/last\n                              \"stxt_missf_\", \"stxt_missl_\" }, new String [] { \"_dv\"});\n    checkFields(new String [] { \"stxt_\" }, // no expectation on missing first/last\n                new String [] { \"_nodv\", \"_dv\" });\n    checkFields(new String [] { \"stxt_missf_\", \"stxt_missl_\" }, new String [] { \"_dv\"});\n      \n  }\n\n","sourceOld":"  /** Initializes core and does some sanity checking of schema */\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n\n    initCore(\"solrconfig-functionquery.xml\",\"schema11.xml\");\n    checkFields(new String[] {\"i\", \"l\", \"f\", \"d\"}, new String [] {\"_p\", \"_ni_p\"});\n    checkFields(new String[] {\"ti\", \"tl\", \"tf\", \"td\"}, new String [] {\"\", \"_dv\", \"_ni_dv\"});\n    checkFields(new String[] {\"str\", // no expectation on missing first/last\n                              \"str_missf_\", \"str_missl_\",\n                              \"int_missf_\", \"int_missl_\",\n                              \"long_missf_\", \"long_missl_\",\n                              \"float_missf_\", \"float_missl_\",\n                              \"double_missf_\", \"double_missl_\",\n                              \"date_missf_\", \"date_missl_\",\n                              \"enum_missf_\", \"enum_missl_\",\n                              \"bool_missf_\", \"bool_missl_\"  }, new String [] {\"_dv\"});\n      \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e"],"5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e":["1f192203c3feece147e3227c2446101d33858d81"],"b94236357aaa22b76c10629851fe4e376e0cea82":["28288370235ed02234a64753cdbf0c6ec096304a","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"1f192203c3feece147e3227c2446101d33858d81":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09db84b25dda87b73022d145a68f14c86a3a552d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"28288370235ed02234a64753cdbf0c6ec096304a":["1f192203c3feece147e3227c2446101d33858d81","351efe6fdecf9af62134d37ec2582e4a0331a4dc"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["1f192203c3feece147e3227c2446101d33858d81","5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09db84b25dda87b73022d145a68f14c86a3a552d"]},"commit2Childs":{"351efe6fdecf9af62134d37ec2582e4a0331a4dc":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e":["351efe6fdecf9af62134d37ec2582e4a0331a4dc","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b94236357aaa22b76c10629851fe4e376e0cea82":["09db84b25dda87b73022d145a68f14c86a3a552d"],"1f192203c3feece147e3227c2446101d33858d81":["5dcf7e23cdc5dbb083ed311e37cd712418cc4c5e","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f192203c3feece147e3227c2446101d33858d81"],"09db84b25dda87b73022d145a68f14c86a3a552d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cf2282b6a7c3f113e7a233b785b80527c03d590":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["b94236357aaa22b76c10629851fe4e376e0cea82","4cf2282b6a7c3f113e7a233b785b80527c03d590"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}