{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/ElisionFilter#incrementToken().mjava","commits":[{"id":"3106630d90d0d9e238f170a5cb83cd1dee5ddd72","date":1343657007,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/ElisionFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/fr/ElisionFilter#incrementToken().mjava","sourceNew":"  /**\n   * Increments the {@link TokenStream} with a {@link CharTermAttribute} without elisioned start\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.buffer();\n      int termLength = termAtt.length();\n\n      int index = -1;\n      for (int i = 0; i < termLength; i++) {\n        char ch = termBuffer[i];\n        if (ch == '\\'' || ch == '\\u2019') {\n          index = i;\n          break;\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (index >= 0 && articles.contains(termBuffer, 0, index)) {\n        termAtt.copyBuffer(termBuffer, index + 1, termLength - (index + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":"  /**\n   * Increments the {@link TokenStream} with a {@link CharTermAttribute} without elisioned start\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.buffer();\n      int termLength = termAtt.length();\n\n      int minPoz = Integer.MAX_VALUE;\n      for (int i = 0; i < apostrophes.length; i++) {\n        char apos = apostrophes[i];\n        // The equivalent of String.indexOf(ch)\n        for (int poz = 0; poz < termLength ; poz++) {\n          if (termBuffer[poz] == apos) {\n            minPoz = Math.min(poz, minPoz);\n            break;\n          }\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (minPoz != Integer.MAX_VALUE\n          && articles.contains(termAtt.buffer(), 0, minPoz)) {\n        termAtt.copyBuffer(termAtt.buffer(), minPoz + 1, termAtt.length() - (minPoz + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/ElisionFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Increments the {@link TokenStream} with a {@link CharTermAttribute} without elisioned start\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.buffer();\n      int termLength = termAtt.length();\n\n      int index = -1;\n      for (int i = 0; i < termLength; i++) {\n        char ch = termBuffer[i];\n        if (ch == '\\'' || ch == '\\u2019') {\n          index = i;\n          break;\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (index >= 0 && articles.contains(termBuffer, 0, index)) {\n        termAtt.copyBuffer(termBuffer, index + 1, termLength - (index + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/util/ElisionFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Increments the {@link TokenStream} with a {@link CharTermAttribute} without elisioned start\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    if (input.incrementToken()) {\n      char[] termBuffer = termAtt.buffer();\n      int termLength = termAtt.length();\n\n      int index = -1;\n      for (int i = 0; i < termLength; i++) {\n        char ch = termBuffer[i];\n        if (ch == '\\'' || ch == '\\u2019') {\n          index = i;\n          break;\n        }\n      }\n\n      // An apostrophe has been found. If the prefix is an article strip it off.\n      if (index >= 0 && articles.contains(termBuffer, 0, index)) {\n        termAtt.copyBuffer(termBuffer, index + 1, termLength - (index + 1));\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3106630d90d0d9e238f170a5cb83cd1dee5ddd72"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3106630d90d0d9e238f170a5cb83cd1dee5ddd72"],"3106630d90d0d9e238f170a5cb83cd1dee5ddd72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3106630d90d0d9e238f170a5cb83cd1dee5ddd72"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","3106630d90d0d9e238f170a5cb83cd1dee5ddd72"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"3106630d90d0d9e238f170a5cb83cd1dee5ddd72":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}