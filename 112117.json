{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#saveInts(int[],int,DataOutput).mjava","commits":[{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#saveInts(int[],int,DataOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#saveInts(int[],int,DataOutput).mjava","sourceNew":"  private static void saveInts(int[] values, int length, DataOutput out) throws IOException {\n    assert length > 0;\n    if (length == 1) {\n      out.writeVInt(values[0]);\n    } else {\n      boolean allEqual = true;\n      for (int i = 1; i < length; ++i) {\n        if (values[i] != values[0]) {\n          allEqual = false;\n          break;\n        }\n      }\n      if (allEqual) {\n        out.writeVInt(0);\n        out.writeVInt(values[0]);\n      } else {\n        long max = 0;\n        for (int i = 0; i < length; ++i) {\n          max |= values[i];\n        }\n        final int bitsRequired = PackedInts.bitsRequired(max);\n        out.writeVInt(bitsRequired);\n        final PackedInts.Writer w = PackedInts.getWriterNoHeader(out, PackedInts.Format.PACKED, length, bitsRequired, 1);\n        for (int i = 0; i < length; ++i) {\n          w.add(values[i]);\n        }\n        w.finish();\n      }\n    }\n  }\n\n","sourceOld":"  private static void saveInts(int[] values, int length, DataOutput out) throws IOException {\n    assert length > 0;\n    if (length == 1) {\n      out.writeVInt(values[0]);\n    } else {\n      boolean allEqual = true;\n      for (int i = 1; i < length; ++i) {\n        if (values[i] != values[0]) {\n          allEqual = false;\n          break;\n        }\n      }\n      if (allEqual) {\n        out.writeVInt(0);\n        out.writeVInt(values[0]);\n      } else {\n        long max = 0;\n        for (int i = 0; i < length; ++i) {\n          max |= values[i];\n        }\n        final int bitsRequired = PackedInts.bitsRequired(max);\n        out.writeVInt(bitsRequired);\n        final PackedInts.Writer w = PackedInts.getWriterNoHeader(out, PackedInts.Format.PACKED, length, bitsRequired, 1);\n        for (int i = 0; i < length; ++i) {\n          w.add(values[i]);\n        }\n        w.finish();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#saveInts(int[],int,DataOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsWriter#saveInts(int[],int,DataOutput).mjava","sourceNew":"  private static void saveInts(int[] values, int length, DataOutput out) throws IOException {\n    assert length > 0;\n    if (length == 1) {\n      out.writeVInt(values[0]);\n    } else {\n      boolean allEqual = true;\n      for (int i = 1; i < length; ++i) {\n        if (values[i] != values[0]) {\n          allEqual = false;\n          break;\n        }\n      }\n      if (allEqual) {\n        out.writeVInt(0);\n        out.writeVInt(values[0]);\n      } else {\n        long max = 0;\n        for (int i = 0; i < length; ++i) {\n          max |= values[i];\n        }\n        final int bitsRequired = PackedInts.bitsRequired(max);\n        out.writeVInt(bitsRequired);\n        final PackedInts.Writer w = PackedInts.getWriterNoHeader(out, PackedInts.Format.PACKED, length, bitsRequired, 1);\n        for (int i = 0; i < length; ++i) {\n          w.add(values[i]);\n        }\n        w.finish();\n      }\n    }\n  }\n\n","sourceOld":"  private static void saveInts(int[] values, int length, DataOutput out) throws IOException {\n    assert length > 0;\n    if (length == 1) {\n      out.writeVInt(values[0]);\n    } else {\n      boolean allEqual = true;\n      for (int i = 1; i < length; ++i) {\n        if (values[i] != values[0]) {\n          allEqual = false;\n          break;\n        }\n      }\n      if (allEqual) {\n        out.writeVInt(0);\n        out.writeVInt(values[0]);\n      } else {\n        long max = 0;\n        for (int i = 0; i < length; ++i) {\n          max |= values[i];\n        }\n        final int bitsRequired = PackedInts.bitsRequired(max);\n        out.writeVInt(bitsRequired);\n        final PackedInts.Writer w = PackedInts.getWriterNoHeader(out, PackedInts.Format.PACKED, length, bitsRequired, 1);\n        for (int i = 0; i < length; ++i) {\n          w.add(values[i]);\n        }\n        w.finish();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"]},"commit2Childs":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}