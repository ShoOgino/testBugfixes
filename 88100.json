{"path":"src/java/org/apache/lucene/util/OpenBitSet#fastGet(long).mjava","commits":[{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/OpenBitSet#fastGet(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns true or false for the specified bit index.  Allows specifying\n   * an index outside the current size. */\n  public boolean fastGet(long index) {\n    int i = (int)(index >> 6);               // div 64\n    int bit = (int)index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7a25464fa56c7023e650d450de5a6718bf5193d","date":1220024392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/util/OpenBitSet#fastGet(long).mjava","pathOld":"src/java/org/apache/lucene/util/OpenBitSet#fastGet(long).mjava","sourceNew":"  /** Returns true or false for the specified bit index.\n   * The index should be less than the OpenBitSet size.\n   */\n  public boolean fastGet(long index) {\n    int i = (int)(index >> 6);               // div 64\n    int bit = (int)index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","sourceOld":"  /** Returns true or false for the specified bit index.  Allows specifying\n   * an index outside the current size. */\n  public boolean fastGet(long index) {\n    int i = (int)(index >> 6);               // div 64\n    int bit = (int)index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/OpenBitSet#fastGet(long).mjava","pathOld":"src/java/org/apache/lucene/util/OpenBitSet#fastGet(long).mjava","sourceNew":"  /** Returns true or false for the specified bit index.\n   * The index should be less than the OpenBitSet size.\n   */\n  public boolean fastGet(long index) {\n    int i = (int)(index >> 6);               // div 64\n    int bit = (int)index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","sourceOld":"  /** Returns true or false for the specified bit index.\n   * The index should be less than the OpenBitSet size.\n   */\n  public boolean fastGet(long index) {\n    int i = (int)(index >> 6);               // div 64\n    int bit = (int)index & 0x3f;           // mod 64\n    long bitmask = 1L << bit;\n    return (bits[i] & bitmask) != 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d7a25464fa56c7023e650d450de5a6718bf5193d":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d7a25464fa56c7023e650d450de5a6718bf5193d"]},"commit2Childs":{"d7a25464fa56c7023e650d450de5a6718bf5193d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["d7a25464fa56c7023e650d450de5a6718bf5193d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}