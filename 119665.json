{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","commits":[{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer).mjava","sourceNew":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version,znode);\n  }\n\n","sourceOld":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","sourceNew":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version);\n  }\n\n","sourceOld":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version,znode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9279b175e5e66258442d2123a50f052219a9cc1b","date":1410531077,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer).mjava","sourceNew":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","sourceOld":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5c99ad021f3da085fcb66220598a8f91dc5e453","date":1462242046,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","sourceNew":"  // TODO move to static DocCollection.loadFromMap\n  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = Slice.loadAllFromMap(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = Slice.loadAllFromMap(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","sourceOld":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c7a21395bae9e2f61aeb639f47aaca771c426ed","date":1462255690,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","sourceNew":"  // TODO move to static DocCollection.loadFromMap\n  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = Slice.loadAllFromMap(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = Slice.loadAllFromMap(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","sourceOld":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","sourceNew":"  // TODO move to static DocCollection.loadFromMap\n  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = Slice.loadAllFromMap(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = Slice.loadAllFromMap(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","sourceOld":"  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = makeSlices(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = makeSlices(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","sourceNew":"  // TODO move to static DocCollection.loadFromMap\n  @SuppressWarnings(\"unchecked\")\n  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = Slice.loadAllFromMap(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = Slice.loadAllFromMap(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","sourceOld":"  // TODO move to static DocCollection.loadFromMap\n  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = Slice.loadAllFromMap(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = Slice.loadAllFromMap(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","sourceNew":"  // TODO move to static DocCollection.loadFromMap\n  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = Slice.loadAllFromMap(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = Slice.loadAllFromMap(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","sourceOld":"  // TODO move to static DocCollection.loadFromMap\n  @SuppressWarnings(\"unchecked\")\n  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = Slice.loadAllFromMap(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = Slice.loadAllFromMap(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","sourceNew":"  // TODO move to static DocCollection.loadFromMap\n  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String, Object> sliceObjs = (Map<String, Object>) objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = Slice.loadAllFromMap(name, objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = Slice.loadAllFromMap(name, sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","sourceOld":"  // TODO move to static DocCollection.loadFromMap\n  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = Slice.loadAllFromMap(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = Slice.loadAllFromMap(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","sourceNew":"  // TODO move to static DocCollection.loadFromMap\n  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String, Object> sliceObjs = (Map<String, Object>) objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = Slice.loadAllFromMap(name, objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = Slice.loadAllFromMap(name, sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","sourceOld":"  // TODO move to static DocCollection.loadFromMap\n  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String,Object> sliceObjs = (Map<String,Object>)objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = Slice.loadAllFromMap(objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = Slice.loadAllFromMap(sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":5,"author":"murblanc","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#collectionFromObjects(String,Map[String,Object],Integer,String).mjava","sourceNew":"  // TODO move to static DocCollection.loadFromMap\n  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, int version) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String, Object> sliceObjs = (Map<String, Object>) objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = Slice.loadAllFromMap(name, objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = Slice.loadAllFromMap(name, sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version);\n  }\n\n","sourceOld":"  // TODO move to static DocCollection.loadFromMap\n  private static DocCollection collectionFromObjects(String name, Map<String, Object> objs, Integer version, String znode) {\n    Map<String,Object> props;\n    Map<String,Slice> slices;\n\n    Map<String, Object> sliceObjs = (Map<String, Object>) objs.get(DocCollection.SHARDS);\n    if (sliceObjs == null) {\n      // legacy format from 4.0... there was no separate \"shards\" level to contain the collection shards.\n      slices = Slice.loadAllFromMap(name, objs);\n      props = Collections.emptyMap();\n    } else {\n      slices = Slice.loadAllFromMap(name, sliceObjs);\n      props = new HashMap<>(objs);\n      objs.remove(DocCollection.SHARDS);\n    }\n\n    Object routerObj = props.get(DocCollection.DOC_ROUTER);\n    DocRouter router;\n    if (routerObj == null) {\n      router = DocRouter.DEFAULT;\n    } else if (routerObj instanceof String) {\n      // back compat with Solr4.4\n      router = DocRouter.getDocRouter((String)routerObj);\n    } else {\n      Map routerProps = (Map)routerObj;\n      router = DocRouter.getDocRouter((String) routerProps.get(\"name\"));\n    }\n\n    return new DocCollection(name, slices, props, router, version, znode);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["9279b175e5e66258442d2123a50f052219a9cc1b"],"d3aa683bba99315838c968fefedf3d74f44aa993":["bb9c3baacabd473e8ecd6c4948aabacead49b88e","6681d02f2302c363be938426e68f8dfd090cc1bf"],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"9279b175e5e66258442d2123a50f052219a9cc1b":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["9279b175e5e66258442d2123a50f052219a9cc1b","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["9279b175e5e66258442d2123a50f052219a9cc1b","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"c5c99ad021f3da085fcb66220598a8f91dc5e453":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"d3aa683bba99315838c968fefedf3d74f44aa993":[],"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["9279b175e5e66258442d2123a50f052219a9cc1b"],"9279b175e5e66258442d2123a50f052219a9cc1b":["c5c99ad021f3da085fcb66220598a8f91dc5e453","55b50463286869f584cf849d1587a0fcd54d1dfa","1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"55b50463286869f584cf849d1587a0fcd54d1dfa":[],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","55b50463286869f584cf849d1587a0fcd54d1dfa","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}