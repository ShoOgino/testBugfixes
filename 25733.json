{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testCheckIntegrity().mjava","commits":[{"id":"91593ae7fe3dbcea4afa49c2e8133db2822dc800","date":1586956259,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testCheckIntegrity().mjava","pathOld":"/dev/null","sourceNew":"  public void testCheckIntegrity() throws IOException {\n    Directory dir = newDirectory();\n    String subFile = \"_123.xyz\";\n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    try (IndexOutput os = dir.createOutput(subFile, newIOContext(random()))) {\n      CodecUtil.writeIndexHeader(os, \"Foo\", 0, si.getId(), \"suffix\");\n      for (int i = 0; i < 1024; i++) {\n        os.writeByte((byte) i);\n      }\n      os.writeInt(CodecUtil.FOOTER_MAGIC);\n      os.writeInt(0);\n      long checksum = os.getChecksum();\n      os.writeLong(checksum);\n    }\n\n    si.setFiles(Collections.singletonList(subFile));\n    \n    FileTrackingDirectoryWrapper writeTrackingDir = new FileTrackingDirectoryWrapper(dir);\n    si.getCodec().compoundFormat().write(writeTrackingDir, si, IOContext.DEFAULT);\n    final Set<String> createdFiles = writeTrackingDir.getFiles();\n\n    ReadBytesDirectoryWrapper readTrackingDir = new ReadBytesDirectoryWrapper(dir);\n    CompoundDirectory compoundDir = si.getCodec().compoundFormat().getCompoundReader(readTrackingDir, si, IOContext.READ);\n    compoundDir.checkIntegrity();\n    Map<String,FixedBitSet> readBytes = readTrackingDir.getReadBytes();\n    assertEquals(createdFiles, readBytes.keySet());\n    for (Map.Entry<String, FixedBitSet> entry : readBytes.entrySet()) {\n      final String file = entry.getKey();\n      final FixedBitSet set = entry.getValue().clone();\n      set.flip(0, set.length());\n      final int next = set.nextSetBit(0);\n      assertEquals(\"Byte at offset \" + next + \" of \" + file + \" was not read\", DocIdSetIterator.NO_MORE_DOCS, next);\n    }\n    compoundDir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"91593ae7fe3dbcea4afa49c2e8133db2822dc800":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91593ae7fe3dbcea4afa49c2e8133db2822dc800"]},"commit2Childs":{"91593ae7fe3dbcea4afa49c2e8133db2822dc800":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91593ae7fe3dbcea4afa49c2e8133db2822dc800"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}