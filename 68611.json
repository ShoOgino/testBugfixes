{"path":"src/java/org/apache/lucene/index/SegmentTermPositions#getPayload(byte[],int).mjava","commits":[{"id":"8522ae207a56c6db28ca06fe6cc33e70911c3600","date":1173935743,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermPositions#getPayload(byte[],int).mjava","pathOld":"/dev/null","sourceNew":"  public byte[] getPayload(byte[] data, int offset) throws IOException {\n    if (!needToLoadPayload) {\n      throw new IOException(\"Payload cannot be loaded more than once for the same term position.\");\n    }\n\n    // read payloads lazily\n    byte[] retArray;\n    int retOffset;\n    if (data == null || data.length - offset < payloadLength) {\n      // the array is too small to store the payload data,\n      // so we allocate a new one\n      retArray = new byte[payloadLength];\n      retOffset = 0;\n    } else {\n      retArray = data;\n      retOffset = offset;\n    }\n    proxStream.readBytes(retArray, retOffset, payloadLength);\n    needToLoadPayload = false;\n    return retArray;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea2124f225a0b2440b21d0b886c09d82ba87b0c7","date":1226746261,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentTermPositions#getPayload(byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermPositions#getPayload(byte[],int).mjava","sourceNew":"  public byte[] getPayload(byte[] data, int offset) throws IOException {\n    if (!needToLoadPayload) {\n      throw new IOException(\"Either no payload exists at this term position or an attempt was made to load it more than once.\");\n    }\n\n    // read payloads lazily\n    byte[] retArray;\n    int retOffset;\n    if (data == null || data.length - offset < payloadLength) {\n      // the array is too small to store the payload data,\n      // so we allocate a new one\n      retArray = new byte[payloadLength];\n      retOffset = 0;\n    } else {\n      retArray = data;\n      retOffset = offset;\n    }\n    proxStream.readBytes(retArray, retOffset, payloadLength);\n    needToLoadPayload = false;\n    return retArray;\n  }\n\n","sourceOld":"  public byte[] getPayload(byte[] data, int offset) throws IOException {\n    if (!needToLoadPayload) {\n      throw new IOException(\"Payload cannot be loaded more than once for the same term position.\");\n    }\n\n    // read payloads lazily\n    byte[] retArray;\n    int retOffset;\n    if (data == null || data.length - offset < payloadLength) {\n      // the array is too small to store the payload data,\n      // so we allocate a new one\n      retArray = new byte[payloadLength];\n      retOffset = 0;\n    } else {\n      retArray = data;\n      retOffset = offset;\n    }\n    proxStream.readBytes(retArray, retOffset, payloadLength);\n    needToLoadPayload = false;\n    return retArray;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentTermPositions#getPayload(byte[],int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentTermPositions#getPayload(byte[],int).mjava","sourceNew":"  public byte[] getPayload(byte[] data, int offset) throws IOException {\n    if (!needToLoadPayload) {\n      throw new IOException(\"Either no payload exists at this term position or an attempt was made to load it more than once.\");\n    }\n\n    // read payloads lazily\n    byte[] retArray;\n    int retOffset;\n    if (data == null || data.length - offset < payloadLength) {\n      // the array is too small to store the payload data,\n      // so we allocate a new one\n      retArray = new byte[payloadLength];\n      retOffset = 0;\n    } else {\n      retArray = data;\n      retOffset = offset;\n    }\n    proxStream.readBytes(retArray, retOffset, payloadLength);\n    needToLoadPayload = false;\n    return retArray;\n  }\n\n","sourceOld":"  public byte[] getPayload(byte[] data, int offset) throws IOException {\n    if (!needToLoadPayload) {\n      throw new IOException(\"Either no payload exists at this term position or an attempt was made to load it more than once.\");\n    }\n\n    // read payloads lazily\n    byte[] retArray;\n    int retOffset;\n    if (data == null || data.length - offset < payloadLength) {\n      // the array is too small to store the payload data,\n      // so we allocate a new one\n      retArray = new byte[payloadLength];\n      retOffset = 0;\n    } else {\n      retArray = data;\n      retOffset = offset;\n    }\n    proxStream.readBytes(retArray, retOffset, payloadLength);\n    needToLoadPayload = false;\n    return retArray;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8522ae207a56c6db28ca06fe6cc33e70911c3600":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea2124f225a0b2440b21d0b886c09d82ba87b0c7":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ea2124f225a0b2440b21d0b886c09d82ba87b0c7"]},"commit2Childs":{"8522ae207a56c6db28ca06fe6cc33e70911c3600":["ea2124f225a0b2440b21d0b886c09d82ba87b0c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8522ae207a56c6db28ca06fe6cc33e70911c3600"],"ea2124f225a0b2440b21d0b886c09d82ba87b0c7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}