{"path":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#doTestRanges(IndexSearcher,String,String,Query,Collator).mjava","commits":[{"id":"9222ff3275c9f12c3ed1b874004083b8f7fc8e7a","date":1399822162,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#doTestRanges(IndexSearcher,String,String,Query,Collator).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, Query query, Collator collator) throws Exception { \n    QueryUtils.check(query);\n    \n    // positive test\n    TopDocs docs = is.search(query, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) >= 0);\n      assertTrue(collator.compare(value, endPoint) <= 0);\n    }\n    \n    // negative test\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    bq.add(query, Occur.MUST_NOT);\n    docs = is.search(bq, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) < 0 || collator.compare(value, endPoint) > 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#doTestRanges(IndexSearcher,String,String,Query,Collator).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, Query query, Collator collator) throws Exception { \n    QueryUtils.check(query);\n    \n    // positive test\n    TopDocs docs = is.search(query, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) >= 0);\n      assertTrue(collator.compare(value, endPoint) <= 0);\n    }\n    \n    // negative test\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    bq.add(query, Occur.MUST_NOT);\n    docs = is.search(bq, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) < 0 || collator.compare(value, endPoint) > 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#doTestRanges(IndexSearcher,String,String,Query,Collator).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, Query query, Collator collator) throws Exception { \n    QueryUtils.check(query);\n    \n    // positive test\n    TopDocs docs = is.search(query, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) >= 0);\n      assertTrue(collator.compare(value, endPoint) <= 0);\n    }\n    \n    // negative test\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    bq.add(query, Occur.MUST_NOT);\n    docs = is.search(bq, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) < 0 || collator.compare(value, endPoint) > 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abc07c8978acf0345f72aa643295788b6816b481","date":1422539230,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#doTestRanges(IndexSearcher,String,String,Query,Collator).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#doTestRanges(IndexSearcher,String,String,Query,Collator).mjava","sourceNew":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, Query query, Collator collator) throws Exception { \n    QueryUtils.check(query);\n    \n    // positive test\n    TopDocs docs = is.search(query, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collate(collator, value, startPoint) >= 0);\n      assertTrue(collate(collator, value, endPoint) <= 0);\n    }\n    \n    // negative test\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    bq.add(query, Occur.MUST_NOT);\n    docs = is.search(bq, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collate(collator, value, startPoint) < 0 || collate(collator, value, endPoint) > 0);\n    }\n  }\n\n","sourceOld":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, Query query, Collator collator) throws Exception { \n    QueryUtils.check(query);\n    \n    // positive test\n    TopDocs docs = is.search(query, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) >= 0);\n      assertTrue(collator.compare(value, endPoint) <= 0);\n    }\n    \n    // negative test\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    bq.add(query, Occur.MUST_NOT);\n    docs = is.search(bq, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collator.compare(value, startPoint) < 0 || collator.compare(value, endPoint) > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationDocValuesField#doTestRanges(IndexSearcher,String,String,Query,Collator).mjava","sourceNew":null,"sourceOld":"  private void doTestRanges(IndexSearcher is, String startPoint, String endPoint, Query query, Collator collator) throws Exception { \n    QueryUtils.check(query);\n    \n    // positive test\n    TopDocs docs = is.search(query, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collate(collator, value, startPoint) >= 0);\n      assertTrue(collate(collator, value, endPoint) <= 0);\n    }\n    \n    // negative test\n    BooleanQuery bq = new BooleanQuery();\n    bq.add(new MatchAllDocsQuery(), Occur.SHOULD);\n    bq.add(query, Occur.MUST_NOT);\n    docs = is.search(bq, is.getIndexReader().maxDoc());\n    for (ScoreDoc doc : docs.scoreDocs) {\n      String value = is.doc(doc.doc).get(\"field\");\n      assertTrue(collate(collator, value, startPoint) < 0 || collate(collator, value, endPoint) > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9222ff3275c9f12c3ed1b874004083b8f7fc8e7a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9222ff3275c9f12c3ed1b874004083b8f7fc8e7a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["abc07c8978acf0345f72aa643295788b6816b481"],"abc07c8978acf0345f72aa643295788b6816b481":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"56572ec06f1407c066d6b7399413178b33176cd8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fb0efe75e5c6021561f115dfe334b74786364ba"]},"commit2Childs":{"93dd449115a9247533e44bab47e8429e5dccbc6d":["abc07c8978acf0345f72aa643295788b6816b481","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["93dd449115a9247533e44bab47e8429e5dccbc6d","9222ff3275c9f12c3ed1b874004083b8f7fc8e7a","56572ec06f1407c066d6b7399413178b33176cd8"],"9222ff3275c9f12c3ed1b874004083b8f7fc8e7a":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"abc07c8978acf0345f72aa643295788b6816b481":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}