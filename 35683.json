{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","commits":[{"id":"b4e0d3f6116e64a8ab4c338fed19498407856738","date":1360786773,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Bytes bytes = cache.getBytes(ar, \"bogusbytes\", true);\n    assertEquals(0, bytes.get(0));\n\n    Shorts shorts = cache.getShorts(ar, \"bogusshorts\", true);\n    assertEquals(0, shorts.get(0));\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\");\n    binaries.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["87d6f9603307ae2ad642fb01deedf031320fd0c3","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f9453e226f2896430e77ec8e7837c1441a9aeb0","date":1360788152,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Bytes bytes = cache.getBytes(ar, \"bogusbytes\", true);\n    assertEquals(0, bytes.get(0));\n\n    Shorts shorts = cache.getShorts(ar, \"bogusshorts\", true);\n    assertEquals(0, shorts.get(0));\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\");\n    binaries.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb11e4a63ba3891117b5988c50a7a927c27b3656","date":1360788410,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Bytes bytes = cache.getBytes(ar, \"bogusbytes\", true);\n    assertEquals(0, bytes.get(0));\n\n    Shorts shorts = cache.getShorts(ar, \"bogusshorts\", true);\n    assertEquals(0, shorts.get(0));\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\");\n    binaries.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Bytes bytes = cache.getBytes(ar, \"bogusbytes\", true);\n    assertEquals(0, bytes.get(0));\n\n    Shorts shorts = cache.getShorts(ar, \"bogusshorts\", true);\n    assertEquals(0, shorts.get(0));\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\");\n    binaries.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Bytes bytes = cache.getBytes(ar, \"bogusbytes\", true);\n    assertEquals(0, bytes.get(0));\n\n    Shorts shorts = cache.getShorts(ar, \"bogusshorts\", true);\n    assertEquals(0, shorts.get(0));\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\");\n    binaries.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Bytes bytes = cache.getBytes(ar, \"bogusbytes\", true);\n    assertEquals(0, bytes.get(0));\n\n    Shorts shorts = cache.getShorts(ar, \"bogusshorts\", true);\n    assertEquals(0, shorts.get(0));\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\");\n    binaries.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\");\n    binaries.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Bytes bytes = cache.getBytes(ar, \"bogusbytes\", true);\n    assertEquals(0, bytes.get(0));\n\n    Shorts shorts = cache.getShorts(ar, \"bogusshorts\", true);\n    assertEquals(0, shorts.get(0));\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\");\n    binaries.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\");\n    binaries.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Bytes bytes = cache.getBytes(ar, \"bogusbytes\", true);\n    assertEquals(0, bytes.get(0));\n\n    Shorts shorts = cache.getShorts(ar, \"bogusshorts\", true);\n    assertEquals(0, shorts.get(0));\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\");\n    binaries.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87d6f9603307ae2ad642fb01deedf031320fd0c3","date":1377877563,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\");\n    binaries.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertTrue(scratch.bytes == BinaryDocValues.MISSING);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":["b4e0d3f6116e64a8ab4c338fed19498407856738"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.close();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.NUMERIC_UTILS_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.NUMERIC_UTILS_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache#testNonexistantFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestFieldCache#testNonexistantFields().mjava","sourceNew":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    NumericDocValues ints = cache.getNumerics(ar, \"bogusints\", FieldCache.NUMERIC_UTILS_INT_PARSER, true);\n    assertEquals(0, ints.get(0));\n    \n    NumericDocValues longs = cache.getNumerics(ar, \"boguslongs\", FieldCache.NUMERIC_UTILS_LONG_PARSER, true);\n    assertEquals(0, longs.get(0));\n    \n    NumericDocValues floats = cache.getNumerics(ar, \"bogusfloats\", FieldCache.NUMERIC_UTILS_FLOAT_PARSER, true);\n    assertEquals(0, floats.get(0));\n    \n    NumericDocValues doubles = cache.getNumerics(ar, \"bogusdoubles\", FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, true);\n    assertEquals(0, doubles.get(0));\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\", null);\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testNonexistantFields() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    iw.addDocument(doc);\n    DirectoryReader ir = iw.getReader();\n    iw.shutdown();\n    \n    AtomicReader ar = getOnlySegmentReader(ir);\n    \n    final FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n    assertEquals(0, cache.getCacheEntries().length);\n    \n    Ints ints = cache.getInts(ar, \"bogusints\", true);\n    assertEquals(0, ints.get(0));\n    \n    Longs longs = cache.getLongs(ar, \"boguslongs\", true);\n    assertEquals(0, longs.get(0));\n    \n    Floats floats = cache.getFloats(ar, \"bogusfloats\", true);\n    assertEquals(0, floats.get(0), 0.0f);\n    \n    Doubles doubles = cache.getDoubles(ar, \"bogusdoubles\", true);\n    assertEquals(0, doubles.get(0), 0.0D);\n    \n    BytesRef scratch = new BytesRef();\n    BinaryDocValues binaries = cache.getTerms(ar, \"bogusterms\", true);\n    binaries.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedDocValues sorted = cache.getTermsIndex(ar, \"bogustermsindex\");\n    assertEquals(-1, sorted.getOrd(0));\n    sorted.get(0, scratch);\n    assertEquals(0, scratch.length);\n    \n    SortedSetDocValues sortedSet = cache.getDocTermOrds(ar, \"bogusmultivalued\");\n    sortedSet.setDocument(0);\n    assertEquals(SortedSetDocValues.NO_MORE_ORDS, sortedSet.nextOrd());\n    \n    Bits bits = cache.getDocsWithField(ar, \"bogusbits\");\n    assertFalse(bits.get(0));\n    \n    // check that we cached nothing\n    assertEquals(0, cache.getCacheEntries().length);\n    ir.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["ddbb72a33557d2b5bc22ee95daf3281c43560502","59a0020b413d44dd79d85d7a66ed5004265fb453"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["b4e0d3f6116e64a8ab4c338fed19498407856738","bb11e4a63ba3891117b5988c50a7a927c27b3656"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"b4e0d3f6116e64a8ab4c338fed19498407856738":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb11e4a63ba3891117b5988c50a7a927c27b3656":["0f9453e226f2896430e77ec8e7837c1441a9aeb0"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f9453e226f2896430e77ec8e7837c1441a9aeb0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b4e0d3f6116e64a8ab4c338fed19498407856738"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"b4e0d3f6116e64a8ab4c338fed19498407856738":["ddbb72a33557d2b5bc22ee95daf3281c43560502","0f9453e226f2896430e77ec8e7837c1441a9aeb0"],"bb11e4a63ba3891117b5988c50a7a927c27b3656":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e0d3f6116e64a8ab4c338fed19498407856738","0f9453e226f2896430e77ec8e7837c1441a9aeb0"],"0f9453e226f2896430e77ec8e7837c1441a9aeb0":["bb11e4a63ba3891117b5988c50a7a927c27b3656"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","87d6f9603307ae2ad642fb01deedf031320fd0c3"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}