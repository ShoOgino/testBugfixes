{"path":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n\n\n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<Object>();\n\n    if (fi.exceptionList != null) {\n      facet_counts.add(\"exception\",fi.exceptionList);\n    }\n\n    NamedList<Number> facet_queries = new SimpleOrderedMap<Number>();\n    facet_counts.add(\"facet_queries\",facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n\n    NamedList<Object> facet_fields = new SimpleOrderedMap<Object>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n\n    for (DistribFieldFacet dff : fi.facets.values()) {\n      NamedList<Object> fieldCounts = new NamedList<Object>(); // order is more important for facets\n      facet_fields.add(dff.getKey(), fieldCounts);\n\n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n          counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n          counts = dff.getLexSorted();\n      }\n\n      if (countSorted) {\n        int end = dff.limit < 0 ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i=dff.offset; i<end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n\n        // index order...\n        for (int i=0; i<counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n\n\n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<Object>();\n\n    if (fi.exceptionList != null) {\n      facet_counts.add(\"exception\",fi.exceptionList);\n    }\n\n    NamedList<Number> facet_queries = new SimpleOrderedMap<Number>();\n    facet_counts.add(\"facet_queries\",facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n\n    NamedList<Object> facet_fields = new SimpleOrderedMap<Object>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n\n    for (DistribFieldFacet dff : fi.facets.values()) {\n      NamedList<Object> fieldCounts = new NamedList<Object>(); // order is more important for facets\n      facet_fields.add(dff.getKey(), fieldCounts);\n\n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n          counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n          counts = dff.getLexSorted();\n      }\n\n      if (countSorted) {\n        int end = dff.limit < 0 ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i=dff.offset; i<end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n\n        // index order...\n        for (int i=0; i<counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n\n\n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<Object>();\n\n    if (fi.exceptionList != null) {\n      facet_counts.add(\"exception\",fi.exceptionList);\n    }\n\n    NamedList<Number> facet_queries = new SimpleOrderedMap<Number>();\n    facet_counts.add(\"facet_queries\",facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n\n    NamedList<Object> facet_fields = new SimpleOrderedMap<Object>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n\n    for (DistribFieldFacet dff : fi.facets.values()) {\n      NamedList<Object> fieldCounts = new NamedList<Object>(); // order is more important for facets\n      facet_fields.add(dff.getKey(), fieldCounts);\n\n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n          counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n          counts = dff.getLexSorted();\n      }\n\n      if (countSorted) {\n        int end = dff.limit < 0 ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i=dff.offset; i<end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n\n        // index order...\n        for (int i=0; i<counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n\n\n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<Object>();\n\n    if (fi.exceptionList != null) {\n      facet_counts.add(\"exception\",fi.exceptionList);\n    }\n\n    NamedList<Number> facet_queries = new SimpleOrderedMap<Number>();\n    facet_counts.add(\"facet_queries\",facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n\n    NamedList<Object> facet_fields = new SimpleOrderedMap<Object>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n\n    for (DistribFieldFacet dff : fi.facets.values()) {\n      NamedList<Object> fieldCounts = new NamedList<Object>(); // order is more important for facets\n      facet_fields.add(dff.getKey(), fieldCounts);\n\n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n          counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n          counts = dff.getLexSorted();\n      }\n\n      if (countSorted) {\n        int end = dff.limit < 0 ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i=dff.offset; i<end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n\n        // index order...\n        for (int i=0; i<counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n\n\n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<Object>();\n\n    if (fi.exceptionList != null) {\n      facet_counts.add(\"exception\",fi.exceptionList);\n    }\n\n    NamedList<Number> facet_queries = new SimpleOrderedMap<Number>();\n    facet_counts.add(\"facet_queries\",facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n\n    NamedList<Object> facet_fields = new SimpleOrderedMap<Object>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n\n    for (DistribFieldFacet dff : fi.facets.values()) {\n      NamedList<Object> fieldCounts = new NamedList<Object>(); // order is more important for facets\n      facet_fields.add(dff.getKey(), fieldCounts);\n\n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n          counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n          counts = dff.getLexSorted();\n      }\n\n      if (countSorted) {\n        int end = dff.limit < 0 ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i=dff.offset; i<end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n\n        // index order...\n        for (int i=0; i<counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n\n\n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<Object>();\n\n    if (fi.exceptionList != null) {\n      facet_counts.add(\"exception\",fi.exceptionList);\n    }\n\n    NamedList<Number> facet_queries = new SimpleOrderedMap<Number>();\n    facet_counts.add(\"facet_queries\",facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n\n    NamedList<Object> facet_fields = new SimpleOrderedMap<Object>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n\n    for (DistribFieldFacet dff : fi.facets.values()) {\n      NamedList<Object> fieldCounts = new NamedList<Object>(); // order is more important for facets\n      facet_fields.add(dff.getKey(), fieldCounts);\n\n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n          counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n          counts = dff.getLexSorted();\n      }\n\n      if (countSorted) {\n        int end = dff.limit < 0 ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i=dff.offset; i<end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n\n        // index order...\n        for (int i=0; i<counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f3eb2c0361adcc3828df1543195800e225f146e","date":1312072219,"type":3,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n\n\n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<Object>();\n\n    NamedList<Number> facet_queries = new SimpleOrderedMap<Number>();\n    facet_counts.add(\"facet_queries\",facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n\n    NamedList<Object> facet_fields = new SimpleOrderedMap<Object>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n\n    for (DistribFieldFacet dff : fi.facets.values()) {\n      NamedList<Object> fieldCounts = new NamedList<Object>(); // order is more important for facets\n      facet_fields.add(dff.getKey(), fieldCounts);\n\n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n          counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n          counts = dff.getLexSorted();\n      }\n\n      if (countSorted) {\n        int end = dff.limit < 0 ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i=dff.offset; i<end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n\n        // index order...\n        for (int i=0; i<counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n\n\n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<Object>();\n\n    if (fi.exceptionList != null) {\n      facet_counts.add(\"exception\",fi.exceptionList);\n    }\n\n    NamedList<Number> facet_queries = new SimpleOrderedMap<Number>();\n    facet_counts.add(\"facet_queries\",facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n\n    NamedList<Object> facet_fields = new SimpleOrderedMap<Object>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n\n    for (DistribFieldFacet dff : fi.facets.values()) {\n      NamedList<Object> fieldCounts = new NamedList<Object>(); // order is more important for facets\n      facet_fields.add(dff.getKey(), fieldCounts);\n\n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n          counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n          counts = dff.getLexSorted();\n      }\n\n      if (countSorted) {\n        int end = dff.limit < 0 ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i=dff.offset; i<end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n\n        // index order...\n        for (int i=0; i<counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n\n\n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<>();\n\n    NamedList<Number> facet_queries = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_queries\",facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n\n    NamedList<Object> facet_fields = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n\n    for (DistribFieldFacet dff : fi.facets.values()) {\n      NamedList<Object> fieldCounts = new NamedList<>(); // order is more important for facets\n      facet_fields.add(dff.getKey(), fieldCounts);\n\n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n          counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n          counts = dff.getLexSorted();\n      }\n\n      if (countSorted) {\n        int end = dff.limit < 0 ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i=dff.offset; i<end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n\n        // index order...\n        for (int i=0; i<counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n\n\n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<Object>();\n\n    NamedList<Number> facet_queries = new SimpleOrderedMap<Number>();\n    facet_counts.add(\"facet_queries\",facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n\n    NamedList<Object> facet_fields = new SimpleOrderedMap<Object>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n\n    for (DistribFieldFacet dff : fi.facets.values()) {\n      NamedList<Object> fieldCounts = new NamedList<Object>(); // order is more important for facets\n      facet_fields.add(dff.getKey(), fieldCounts);\n\n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n          counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n          counts = dff.getLexSorted();\n      }\n\n      if (countSorted) {\n        int end = dff.limit < 0 ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i=dff.offset; i<end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n\n        // index order...\n        for (int i=0; i<counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd","date":1406137403,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n\n\n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<>();\n\n    NamedList<Number> facet_queries = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_queries\",facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n\n    NamedList<Object> facet_fields = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n\n    for (DistribFieldFacet dff : fi.facets.values()) {\n      NamedList<Object> fieldCounts = new NamedList<>(); // order is more important for facets\n      facet_fields.add(dff.getKey(), fieldCounts);\n\n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n          counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n          counts = dff.getLexSorted();\n      }\n\n      if (countSorted) {\n        int end = dff.limit < 0 ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i=dff.offset; i<end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n\n        // index order...\n        for (int i=0; i<counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n    facet_counts.add(\"facet_intervals\", fi.intervalFacets);\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n\n\n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<>();\n\n    NamedList<Number> facet_queries = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_queries\",facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n\n    NamedList<Object> facet_fields = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n\n    for (DistribFieldFacet dff : fi.facets.values()) {\n      NamedList<Object> fieldCounts = new NamedList<>(); // order is more important for facets\n      facet_fields.add(dff.getKey(), fieldCounts);\n\n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n          counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n          counts = dff.getLexSorted();\n      }\n\n      if (countSorted) {\n        int end = dff.limit < 0 ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i=dff.offset; i<end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n\n        // index order...\n        for (int i=0; i<counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    pivotRefinementCounter = 0;\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n    \n    FacetInfo fi = rb._facetInfo;\n    \n    NamedList<Object> facet_counts = new SimpleOrderedMap<>();\n    \n    NamedList<Number> facet_queries = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_queries\", facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n    \n    NamedList<Object> facet_fields = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n    \n    for (DistribFieldFacet dff : fi.facets.values()) {\n      // order is important for facet values, so use NamedList\n      NamedList<Object> fieldCounts = new NamedList<>(); \n      facet_fields.add(dff.getKey(), fieldCounts);\n      \n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n        counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n        counts = dff.getLexSorted();\n      }\n      \n      if (countSorted) {\n        int end = dff.limit < 0 \n          ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i = dff.offset; i < end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n        \n        // index order...\n        for (int i = 0; i < counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n    facet_counts.add(\"facet_intervals\", fi.intervalFacets);\n\n    if (fi.pivotFacets != null && fi.pivotFacets.size() > 0) {\n      facet_counts.add(PIVOT_KEY, createPivotFacetOutput(rb));\n    }\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n\n\n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<>();\n\n    NamedList<Number> facet_queries = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_queries\",facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n\n    NamedList<Object> facet_fields = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n\n    for (DistribFieldFacet dff : fi.facets.values()) {\n      NamedList<Object> fieldCounts = new NamedList<>(); // order is more important for facets\n      facet_fields.add(dff.getKey(), fieldCounts);\n\n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n          counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n          counts = dff.getLexSorted();\n      }\n\n      if (countSorted) {\n        int end = dff.limit < 0 ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i=dff.offset; i<end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n\n        // index order...\n        for (int i=0; i<counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n    facet_counts.add(\"facet_intervals\", fi.intervalFacets);\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","bugFix":null,"bugIntro":["81ee67591e264becb38dd89e8a00e846753a3bf1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59d82b0be40ecfcc2c94c776b324e0903a62b844","date":1423535462,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    pivotRefinementCounter = 0;\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n    \n    FacetInfo fi = rb._facetInfo;\n    \n    NamedList<Object> facet_counts = new SimpleOrderedMap<>();\n    \n    NamedList<Number> facet_queries = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_queries\", facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n    \n    NamedList<Object> facet_fields = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n    \n    for (DistribFieldFacet dff : fi.facets.values()) {\n      // order is important for facet values, so use NamedList\n      NamedList<Object> fieldCounts = new NamedList<>(); \n      facet_fields.add(dff.getKey(), fieldCounts);\n      \n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n        counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n        counts = dff.getLexSorted();\n      }\n      \n      if (countSorted) {\n        int end = dff.limit < 0 \n          ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i = dff.offset; i < end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n        \n        // index order...\n        for (int i = 0; i < counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n    facet_counts.add(\"facet_intervals\", fi.intervalFacets);\n    facet_counts.add(SpatialHeatmapFacets.RESPONSE_KEY,\n        SpatialHeatmapFacets.distribFinish(fi.heatmapFacets, rb));\n\n    if (fi.pivotFacets != null && fi.pivotFacets.size() > 0) {\n      facet_counts.add(PIVOT_KEY, createPivotFacetOutput(rb));\n    }\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    pivotRefinementCounter = 0;\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n    \n    FacetInfo fi = rb._facetInfo;\n    \n    NamedList<Object> facet_counts = new SimpleOrderedMap<>();\n    \n    NamedList<Number> facet_queries = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_queries\", facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n    \n    NamedList<Object> facet_fields = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n    \n    for (DistribFieldFacet dff : fi.facets.values()) {\n      // order is important for facet values, so use NamedList\n      NamedList<Object> fieldCounts = new NamedList<>(); \n      facet_fields.add(dff.getKey(), fieldCounts);\n      \n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n        counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n        counts = dff.getLexSorted();\n      }\n      \n      if (countSorted) {\n        int end = dff.limit < 0 \n          ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i = dff.offset; i < end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n        \n        // index order...\n        for (int i = 0; i < counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n    facet_counts.add(\"facet_intervals\", fi.intervalFacets);\n\n    if (fi.pivotFacets != null && fi.pivotFacets.size() > 0) {\n      facet_counts.add(PIVOT_KEY, createPivotFacetOutput(rb));\n    }\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"81ee67591e264becb38dd89e8a00e846753a3bf1","date":1433291396,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n    \n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<>();\n    \n    NamedList<Number> facet_queries = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_queries\", facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n    \n    NamedList<Object> facet_fields = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n    \n    for (DistribFieldFacet dff : fi.facets.values()) {\n      // order is important for facet values, so use NamedList\n      NamedList<Object> fieldCounts = new NamedList<>(); \n      facet_fields.add(dff.getKey(), fieldCounts);\n      \n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n        counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n        counts = dff.getLexSorted();\n      }\n      \n      if (countSorted) {\n        int end = dff.limit < 0 \n          ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i = dff.offset; i < end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n        \n        // index order...\n        for (int i = 0; i < counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n    facet_counts.add(\"facet_intervals\", fi.intervalFacets);\n    facet_counts.add(SpatialHeatmapFacets.RESPONSE_KEY,\n        SpatialHeatmapFacets.distribFinish(fi.heatmapFacets, rb));\n\n    if (fi.pivotFacets != null && fi.pivotFacets.size() > 0) {\n      facet_counts.add(PIVOT_KEY, createPivotFacetOutput(rb));\n    }\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    pivotRefinementCounter = 0;\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n    \n    FacetInfo fi = rb._facetInfo;\n    \n    NamedList<Object> facet_counts = new SimpleOrderedMap<>();\n    \n    NamedList<Number> facet_queries = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_queries\", facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n    \n    NamedList<Object> facet_fields = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n    \n    for (DistribFieldFacet dff : fi.facets.values()) {\n      // order is important for facet values, so use NamedList\n      NamedList<Object> fieldCounts = new NamedList<>(); \n      facet_fields.add(dff.getKey(), fieldCounts);\n      \n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n        counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n        counts = dff.getLexSorted();\n      }\n      \n      if (countSorted) {\n        int end = dff.limit < 0 \n          ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i = dff.offset; i < end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n        \n        // index order...\n        for (int i = 0; i < counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n    facet_counts.add(\"facet_intervals\", fi.intervalFacets);\n    facet_counts.add(SpatialHeatmapFacets.RESPONSE_KEY,\n        SpatialHeatmapFacets.distribFinish(fi.heatmapFacets, rb));\n\n    if (fi.pivotFacets != null && fi.pivotFacets.size() > 0) {\n      facet_counts.add(PIVOT_KEY, createPivotFacetOutput(rb));\n    }\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","bugFix":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n    \n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<>();\n    \n    NamedList<Number> facet_queries = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_queries\", facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n    \n    NamedList<Object> facet_fields = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n    \n    for (DistribFieldFacet dff : fi.facets.values()) {\n      // order is important for facet values, so use NamedList\n      NamedList<Object> fieldCounts = new NamedList<>(); \n      facet_fields.add(dff.getKey(), fieldCounts);\n      \n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n        counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n        counts = dff.getLexSorted();\n      }\n      \n      if (countSorted) {\n        int end = dff.limit < 0 \n          ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i = dff.offset; i < end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n        \n        // index order...\n        for (int i = 0; i < counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n\n    SimpleOrderedMap<SimpleOrderedMap<Object>> rangeFacetOutput = new SimpleOrderedMap<>();\n    for (Map.Entry<String, RangeFacetRequest.DistribRangeFacet> entry : fi.rangeFacets.entrySet()) {\n      String key = entry.getKey();\n      RangeFacetRequest.DistribRangeFacet value = entry.getValue();\n      rangeFacetOutput.add(key, value.rangeFacet);\n    }\n    facet_counts.add(\"facet_ranges\", rangeFacetOutput);\n\n    facet_counts.add(\"facet_intervals\", fi.intervalFacets);\n    facet_counts.add(SpatialHeatmapFacets.RESPONSE_KEY,\n        SpatialHeatmapFacets.distribFinish(fi.heatmapFacets, rb));\n\n    if (fi.pivotFacets != null && fi.pivotFacets.size() > 0) {\n      facet_counts.add(PIVOT_KEY, createPivotFacetOutput(rb));\n    }\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n    \n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<>();\n    \n    NamedList<Number> facet_queries = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_queries\", facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n    \n    NamedList<Object> facet_fields = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n    \n    for (DistribFieldFacet dff : fi.facets.values()) {\n      // order is important for facet values, so use NamedList\n      NamedList<Object> fieldCounts = new NamedList<>(); \n      facet_fields.add(dff.getKey(), fieldCounts);\n      \n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n        counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n        counts = dff.getLexSorted();\n      }\n      \n      if (countSorted) {\n        int end = dff.limit < 0 \n          ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i = dff.offset; i < end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n        \n        // index order...\n        for (int i = 0; i < counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n    facet_counts.add(\"facet_ranges\", fi.rangeFacets);\n    facet_counts.add(\"facet_intervals\", fi.intervalFacets);\n    facet_counts.add(SpatialHeatmapFacets.RESPONSE_KEY,\n        SpatialHeatmapFacets.distribFinish(fi.heatmapFacets, rb));\n\n    if (fi.pivotFacets != null && fi.pivotFacets.size() > 0) {\n      facet_counts.add(PIVOT_KEY, createPivotFacetOutput(rb));\n    }\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15cb24c5fa70ba12290e43b3aa0feab5582863ee","date":1457033685,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n    \n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<>();\n    \n    NamedList<Number> facet_queries = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_queries\", facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n    \n    NamedList<Object> facet_fields = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n    \n    for (DistribFieldFacet dff : fi.facets.values()) {\n      // order is important for facet values, so use NamedList\n      NamedList<Object> fieldCounts = new NamedList<>(); \n      facet_fields.add(dff.getKey(), fieldCounts);\n      \n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n        counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n        counts = dff.getLexSorted();\n      }\n      \n      if (countSorted) {\n        int end = dff.limit < 0 \n          ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i = dff.offset; i < end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n        \n        // index order...\n        for (int i = 0; i < counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    SimpleOrderedMap<SimpleOrderedMap<Object>> rangeFacetOutput = new SimpleOrderedMap<>();\n    for (Map.Entry<String, RangeFacetRequest.DistribRangeFacet> entry : fi.rangeFacets.entrySet()) {\n      String key = entry.getKey();\n      RangeFacetRequest.DistribRangeFacet value = entry.getValue();\n      rangeFacetOutput.add(key, value.rangeFacet);\n    }\n    facet_counts.add(\"facet_ranges\", rangeFacetOutput);\n\n    facet_counts.add(\"facet_intervals\", fi.intervalFacets);\n    facet_counts.add(SpatialHeatmapFacets.RESPONSE_KEY,\n        SpatialHeatmapFacets.distribFinish(fi.heatmapFacets, rb));\n\n    if (fi.pivotFacets != null && fi.pivotFacets.size() > 0) {\n      facet_counts.add(PIVOT_KEY, createPivotFacetOutput(rb));\n    }\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n    \n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<>();\n    \n    NamedList<Number> facet_queries = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_queries\", facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n    \n    NamedList<Object> facet_fields = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n    \n    for (DistribFieldFacet dff : fi.facets.values()) {\n      // order is important for facet values, so use NamedList\n      NamedList<Object> fieldCounts = new NamedList<>(); \n      facet_fields.add(dff.getKey(), fieldCounts);\n      \n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n        counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n        counts = dff.getLexSorted();\n      }\n      \n      if (countSorted) {\n        int end = dff.limit < 0 \n          ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i = dff.offset; i < end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n        \n        // index order...\n        for (int i = 0; i < counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n\n    SimpleOrderedMap<SimpleOrderedMap<Object>> rangeFacetOutput = new SimpleOrderedMap<>();\n    for (Map.Entry<String, RangeFacetRequest.DistribRangeFacet> entry : fi.rangeFacets.entrySet()) {\n      String key = entry.getKey();\n      RangeFacetRequest.DistribRangeFacet value = entry.getValue();\n      rangeFacetOutput.add(key, value.rangeFacet);\n    }\n    facet_counts.add(\"facet_ranges\", rangeFacetOutput);\n\n    facet_counts.add(\"facet_intervals\", fi.intervalFacets);\n    facet_counts.add(SpatialHeatmapFacets.RESPONSE_KEY,\n        SpatialHeatmapFacets.distribFinish(fi.heatmapFacets, rb));\n\n    if (fi.pivotFacets != null && fi.pivotFacets.size() > 0) {\n      facet_counts.add(PIVOT_KEY, createPivotFacetOutput(rb));\n    }\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n    \n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<>();\n    \n    NamedList<Number> facet_queries = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_queries\", facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n    \n    NamedList<Object> facet_fields = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n    \n    for (DistribFieldFacet dff : fi.facets.values()) {\n      // order is important for facet values, so use NamedList\n      NamedList<Object> fieldCounts = new NamedList<>(); \n      facet_fields.add(dff.getKey(), fieldCounts);\n      \n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n        counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n        counts = dff.getLexSorted();\n      }\n      \n      if (countSorted) {\n        int end = dff.limit < 0 \n          ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i = dff.offset; i < end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n        \n        // index order...\n        for (int i = 0; i < counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    SimpleOrderedMap<SimpleOrderedMap<Object>> rangeFacetOutput = new SimpleOrderedMap<>();\n    for (Map.Entry<String, RangeFacetRequest.DistribRangeFacet> entry : fi.rangeFacets.entrySet()) {\n      String key = entry.getKey();\n      RangeFacetRequest.DistribRangeFacet value = entry.getValue();\n      rangeFacetOutput.add(key, value.rangeFacet);\n    }\n    facet_counts.add(\"facet_ranges\", rangeFacetOutput);\n\n    facet_counts.add(\"facet_intervals\", fi.intervalFacets);\n    facet_counts.add(SpatialHeatmapFacets.RESPONSE_KEY,\n        SpatialHeatmapFacets.distribFinish(fi.heatmapFacets, rb));\n\n    if (fi.pivotFacets != null && fi.pivotFacets.size() > 0) {\n      facet_counts.add(PIVOT_KEY, createPivotFacetOutput(rb));\n    }\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (!rb.doFacets || rb.stage != ResponseBuilder.STAGE_GET_FIELDS) return;\n    // wait until STAGE_GET_FIELDS\n    // so that \"result\" is already stored in the response (for aesthetics)\n    \n    FacetInfo fi = rb._facetInfo;\n\n    NamedList<Object> facet_counts = new SimpleOrderedMap<>();\n    \n    NamedList<Number> facet_queries = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_queries\", facet_queries);\n    for (QueryFacet qf : fi.queryFacets.values()) {\n      facet_queries.add(qf.getKey(), num(qf.count));\n    }\n    \n    NamedList<Object> facet_fields = new SimpleOrderedMap<>();\n    facet_counts.add(\"facet_fields\", facet_fields);\n    \n    for (DistribFieldFacet dff : fi.facets.values()) {\n      // order is important for facet values, so use NamedList\n      NamedList<Object> fieldCounts = new NamedList<>(); \n      facet_fields.add(dff.getKey(), fieldCounts);\n      \n      ShardFacetCount[] counts;\n      boolean countSorted = dff.sort.equals(FacetParams.FACET_SORT_COUNT);\n      if (countSorted) {\n        counts = dff.countSorted;\n        if (counts == null || dff.needRefinements) {\n          counts = dff.getCountSorted();\n        }\n      } else if (dff.sort.equals(FacetParams.FACET_SORT_INDEX)) {\n        counts = dff.getLexSorted();\n      } else { // TODO: log error or throw exception?\n        counts = dff.getLexSorted();\n      }\n      \n      if (countSorted) {\n        int end = dff.limit < 0 \n          ? counts.length : Math.min(dff.offset + dff.limit, counts.length);\n        for (int i = dff.offset; i < end; i++) {\n          if (counts[i].count < dff.minCount) {\n            break;\n          }\n          fieldCounts.add(counts[i].name, num(counts[i].count));\n        }\n      } else {\n        int off = dff.offset;\n        int lim = dff.limit >= 0 ? dff.limit : Integer.MAX_VALUE;\n        \n        // index order...\n        for (int i = 0; i < counts.length; i++) {\n          long count = counts[i].count;\n          if (count < dff.minCount) continue;\n          if (off > 0) {\n            off--;\n            continue;\n          }\n          if (lim <= 0) {\n            break;\n          }\n          lim--;\n          fieldCounts.add(counts[i].name, num(count));\n        }\n      }\n\n      if (dff.missing) {\n        fieldCounts.add(null, num(dff.missingCount));\n      }\n    }\n\n    facet_counts.add(\"facet_dates\", fi.dateFacets);\n\n    SimpleOrderedMap<SimpleOrderedMap<Object>> rangeFacetOutput = new SimpleOrderedMap<>();\n    for (Map.Entry<String, RangeFacetRequest.DistribRangeFacet> entry : fi.rangeFacets.entrySet()) {\n      String key = entry.getKey();\n      RangeFacetRequest.DistribRangeFacet value = entry.getValue();\n      rangeFacetOutput.add(key, value.rangeFacet);\n    }\n    facet_counts.add(\"facet_ranges\", rangeFacetOutput);\n\n    facet_counts.add(\"facet_intervals\", fi.intervalFacets);\n    facet_counts.add(SpatialHeatmapFacets.RESPONSE_KEY,\n        SpatialHeatmapFacets.distribFinish(fi.heatmapFacets, rb));\n\n    if (fi.pivotFacets != null && fi.pivotFacets.size() > 0) {\n      facet_counts.add(PIVOT_KEY, createPivotFacetOutput(rb));\n    }\n\n    rb.rsp.add(\"facet_counts\", facet_counts);\n\n    rb._facetInfo = null;  // could be big, so release asap\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59d82b0be40ecfcc2c94c776b324e0903a62b844":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"81ee67591e264becb38dd89e8a00e846753a3bf1":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2f3eb2c0361adcc3828df1543195800e225f146e"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"15cb24c5fa70ba12290e43b3aa0feab5582863ee":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["81ee67591e264becb38dd89e8a00e846753a3bf1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["22d0a81a05eba47d5e18976f17d88306b218cc22","15cb24c5fa70ba12290e43b3aa0feab5582863ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"2f3eb2c0361adcc3828df1543195800e225f146e":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"59d82b0be40ecfcc2c94c776b324e0903a62b844":["81ee67591e264becb38dd89e8a00e846753a3bf1"],"81ee67591e264becb38dd89e8a00e846753a3bf1":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["84b24f47dd3dfa4e2396cd6f819a35445b0a53fd"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["59d82b0be40ecfcc2c94c776b324e0903a62b844"],"c26f00b574427b55127e869b935845554afde1fa":["2f3eb2c0361adcc3828df1543195800e225f146e"],"84b24f47dd3dfa4e2396cd6f819a35445b0a53fd":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"15cb24c5fa70ba12290e43b3aa0feab5582863ee":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["15cb24c5fa70ba12290e43b3aa0feab5582863ee","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2f3eb2c0361adcc3828df1543195800e225f146e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}