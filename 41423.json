{"path":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int,Sort).mjava","commits":[{"id":"c6691cb6747f9e850337c706c06b92e9ddf816e1","date":1077044431,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int,Sort).mjava","pathOld":"/dev/null","sourceNew":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   * Results are ordered as specified by <code>sort</code>.\n   *\n   * <p>Called by {@link Hits}.\n   *\n   * <p>Applications should usually call {@link #search(Query)} or {@link\n   * #search(Query,Filter)} instead.\n   */\n  public TopFieldDocs search(Query query, Filter filter, final int nDocs,\n                             Sort sort)\n    throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopFieldDocs(0, new ScoreDoc[0], sort.fields);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final MultiFieldSortedHitQueue hq =\n      new MultiFieldSortedHitQueue(reader, sort.fields, nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n            totalHits[0]++;\n            hq.insert(new FieldDoc(doc, score));\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.fillFields ((FieldDoc) hq.pop());\n\n    return new TopFieldDocs(totalHits[0], scoreDocs, hq.getFields());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32cf2e30bd45f6248722d0d19a0045a712782ebc","date":1080240435,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int,Sort).mjava","sourceNew":"  // inherit javadoc\n  public TopFieldDocs search(Query query, Filter filter, final int nDocs,\n                             Sort sort)\n    throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopFieldDocs(0, new ScoreDoc[0], sort.fields);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final MultiFieldSortedHitQueue hq =\n      new MultiFieldSortedHitQueue(reader, sort.fields, nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n            totalHits[0]++;\n            hq.insert(new FieldDoc(doc, score));\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.fillFields ((FieldDoc) hq.pop());\n\n    return new TopFieldDocs(totalHits[0], scoreDocs, hq.getFields());\n  }\n\n","sourceOld":"  /** Expert: Low-level search implementation.  Finds the top <code>n</code>\n   * hits for <code>query</code>, applying <code>filter</code> if non-null.\n   * Results are ordered as specified by <code>sort</code>.\n   *\n   * <p>Called by {@link Hits}.\n   *\n   * <p>Applications should usually call {@link #search(Query)} or {@link\n   * #search(Query,Filter)} instead.\n   */\n  public TopFieldDocs search(Query query, Filter filter, final int nDocs,\n                             Sort sort)\n    throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopFieldDocs(0, new ScoreDoc[0], sort.fields);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final MultiFieldSortedHitQueue hq =\n      new MultiFieldSortedHitQueue(reader, sort.fields, nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n            totalHits[0]++;\n            hq.insert(new FieldDoc(doc, score));\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.fillFields ((FieldDoc) hq.pop());\n\n    return new TopFieldDocs(totalHits[0], scoreDocs, hq.getFields());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99ee715b9c02dd47d9e69a18607a5192c1ebd82b","date":1085007927,"type":3,"author":"Tim Jones","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int,Sort).mjava","sourceNew":"  // inherit javadoc\n  public TopFieldDocs search(Query query, Filter filter, final int nDocs,\n                             Sort sort)\n    throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopFieldDocs(0, new ScoreDoc[0], sort.fields);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final FieldSortedHitQueue hq =\n      new FieldSortedHitQueue(reader, sort.fields, nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n            totalHits[0]++;\n            hq.insert(new FieldDoc(doc, score));\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.fillFields ((FieldDoc) hq.pop());\n\n    return new TopFieldDocs(totalHits[0], scoreDocs, hq.getFields());\n  }\n\n","sourceOld":"  // inherit javadoc\n  public TopFieldDocs search(Query query, Filter filter, final int nDocs,\n                             Sort sort)\n    throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopFieldDocs(0, new ScoreDoc[0], sort.fields);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final MultiFieldSortedHitQueue hq =\n      new MultiFieldSortedHitQueue(reader, sort.fields, nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n            totalHits[0]++;\n            hq.insert(new FieldDoc(doc, score));\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.fillFields ((FieldDoc) hq.pop());\n\n    return new TopFieldDocs(totalHits[0], scoreDocs, hq.getFields());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ba06d3dd45ae38f56781aaf97cdb9c2fbc3b8b3","date":1095872580,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int,Sort).mjava","sourceNew":"  // inherit javadoc\n  public TopFieldDocs search(Query query, Filter filter, final int nDocs,\n                             Sort sort)\n    throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopFieldDocs(0, new ScoreDoc[0], sort.fields);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final FieldSortedHitQueue hq =\n      new FieldSortedHitQueue(reader, sort.fields, nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        private float minScore = 0.0f;\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&                     // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {    // skip docs not in bits\n            totalHits[0]++;\n            if (hq.size() < nDocs || score >= minScore) {\n              hq.insert(new FieldDoc(doc, score));\n              minScore = ((FieldDoc)hq.top()).score; // maintain minScore\n            }\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)        // put docs in array\n      scoreDocs[i] = hq.fillFields ((FieldDoc) hq.pop());\n\n    return new TopFieldDocs(totalHits[0], scoreDocs, hq.getFields());\n  }\n\n","sourceOld":"  // inherit javadoc\n  public TopFieldDocs search(Query query, Filter filter, final int nDocs,\n                             Sort sort)\n    throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopFieldDocs(0, new ScoreDoc[0], sort.fields);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final FieldSortedHitQueue hq =\n      new FieldSortedHitQueue(reader, sort.fields, nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n            totalHits[0]++;\n            hq.insert(new FieldDoc(doc, score));\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)\t  // put docs in array\n      scoreDocs[i] = hq.fillFields ((FieldDoc) hq.pop());\n\n    return new TopFieldDocs(totalHits[0], scoreDocs, hq.getFields());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a58463ecf8865952a19e57292bcdc3bcab5ed6c0","date":1096390484,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int,Sort).mjava","sourceNew":"  // inherit javadoc\n  public TopFieldDocs search(Query query, Filter filter, final int nDocs,\n                             Sort sort)\n    throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopFieldDocs(0, new ScoreDoc[0], sort.fields);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final FieldSortedHitQueue hq =\n      new FieldSortedHitQueue(reader, sort.fields, nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n            totalHits[0]++;\n            hq.insert(new FieldDoc(doc, score));\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)        // put docs in array\n      scoreDocs[i] = hq.fillFields ((FieldDoc) hq.pop());\n\n    return new TopFieldDocs(totalHits[0], scoreDocs, hq.getFields());\n  }\n\n","sourceOld":"  // inherit javadoc\n  public TopFieldDocs search(Query query, Filter filter, final int nDocs,\n                             Sort sort)\n    throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopFieldDocs(0, new ScoreDoc[0], sort.fields);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final FieldSortedHitQueue hq =\n      new FieldSortedHitQueue(reader, sort.fields, nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        private float minScore = 0.0f;\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&                     // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {    // skip docs not in bits\n            totalHits[0]++;\n            if (hq.size() < nDocs || score >= minScore) {\n              hq.insert(new FieldDoc(doc, score));\n              minScore = ((FieldDoc)hq.top()).score; // maintain minScore\n            }\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)        // put docs in array\n      scoreDocs[i] = hq.fillFields ((FieldDoc) hq.pop());\n\n    return new TopFieldDocs(totalHits[0], scoreDocs, hq.getFields());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int,Sort).mjava","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int,Sort).mjava","sourceNew":"  // inherit javadoc\n  public TopFieldDocs search(Query query, Filter filter, final int nDocs,\n                             Sort sort)\n    throws IOException {\n    return search(query.weight(this), filter, nDocs, sort);\n  }\n\n","sourceOld":"  // inherit javadoc\n  public TopFieldDocs search(Query query, Filter filter, final int nDocs,\n                             Sort sort)\n    throws IOException {\n    Scorer scorer = query.weight(this).scorer(reader);\n    if (scorer == null)\n      return new TopFieldDocs(0, new ScoreDoc[0], sort.fields);\n\n    final BitSet bits = filter != null ? filter.bits(reader) : null;\n    final FieldSortedHitQueue hq =\n      new FieldSortedHitQueue(reader, sort.fields, nDocs);\n    final int[] totalHits = new int[1];\n    scorer.score(new HitCollector() {\n        public final void collect(int doc, float score) {\n          if (score > 0.0f &&\t\t\t  // ignore zeroed buckets\n              (bits==null || bits.get(doc))) {\t  // skip docs not in bits\n            totalHits[0]++;\n            hq.insert(new FieldDoc(doc, score));\n          }\n        }\n      });\n\n    ScoreDoc[] scoreDocs = new ScoreDoc[hq.size()];\n    for (int i = hq.size()-1; i >= 0; i--)        // put docs in array\n      scoreDocs[i] = hq.fillFields ((FieldDoc) hq.pop());\n\n    return new TopFieldDocs(totalHits[0], scoreDocs, hq.getFields());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ceaa9738cad9616d1831286111af106e13e0e4b","date":1114543820,"type":4,"author":"Doug Cutting","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,int,Sort).mjava","sourceNew":null,"sourceOld":"  // inherit javadoc\n  public TopFieldDocs search(Query query, Filter filter, final int nDocs,\n                             Sort sort)\n    throws IOException {\n    return search(query.weight(this), filter, nDocs, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ceaa9738cad9616d1831286111af106e13e0e4b":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"c6691cb6747f9e850337c706c06b92e9ddf816e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["a58463ecf8865952a19e57292bcdc3bcab5ed6c0"],"8ba06d3dd45ae38f56781aaf97cdb9c2fbc3b8b3":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["32cf2e30bd45f6248722d0d19a0045a712782ebc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"32cf2e30bd45f6248722d0d19a0045a712782ebc":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"a58463ecf8865952a19e57292bcdc3bcab5ed6c0":["8ba06d3dd45ae38f56781aaf97cdb9c2fbc3b8b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ceaa9738cad9616d1831286111af106e13e0e4b"]},"commit2Childs":{"4ceaa9738cad9616d1831286111af106e13e0e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6691cb6747f9e850337c706c06b92e9ddf816e1":["32cf2e30bd45f6248722d0d19a0045a712782ebc"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["4ceaa9738cad9616d1831286111af106e13e0e4b"],"8ba06d3dd45ae38f56781aaf97cdb9c2fbc3b8b3":["a58463ecf8865952a19e57292bcdc3bcab5ed6c0"],"99ee715b9c02dd47d9e69a18607a5192c1ebd82b":["8ba06d3dd45ae38f56781aaf97cdb9c2fbc3b8b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6691cb6747f9e850337c706c06b92e9ddf816e1"],"32cf2e30bd45f6248722d0d19a0045a712782ebc":["99ee715b9c02dd47d9e69a18607a5192c1ebd82b"],"a58463ecf8865952a19e57292bcdc3bcab5ed6c0":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}