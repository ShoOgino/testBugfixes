{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","commits":[{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n      return get(info, doOpenStores, context, config.getReaderTermsIndexDivisor());\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, config.getReaderTermsIndexDivisor());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n      return get(info, doOpenStores, context, config.getReaderTermsIndexDivisor());\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, config.getReaderTermsIndexDivisor());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n      return get(info, doOpenStores, context, config.getReaderTermsIndexDivisor());\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores) throws IOException {\n      return get(info, doOpenStores, BufferedIndexInput.BUFFER_SIZE, config.getReaderTermsIndexDivisor());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0061262413ecc163d6eebba1b5c43ab91a0c2dc5","date":1311195279,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n\n      SegmentCacheKey cacheKey = new SegmentCacheKey(info, context.context);\n      SegmentReader sr = readerMap.get(cacheKey);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, doOpenStores, context.context == IOContext.Context.MERGE ? -1 : config.getReaderTermsIndexDivisor(), context);\n        sr.readerFinishedListeners = readerFinishedListeners;\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(cacheKey, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n      return get(info, doOpenStores, context, config.getReaderTermsIndexDivisor());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f","date":1323210518,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n\n      SegmentCacheKey cacheKey = new SegmentCacheKey(info, context.context);\n      SegmentReader sr = readerMap.get(cacheKey);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.getRW(info, doOpenStores, context.context == IOContext.Context.MERGE ? -1 : config.getReaderTermsIndexDivisor(), context);\n        sr.readerFinishedListeners = readerFinishedListeners;\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(cacheKey, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n\n      SegmentCacheKey cacheKey = new SegmentCacheKey(info, context.context);\n      SegmentReader sr = readerMap.get(cacheKey);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, doOpenStores, context.context == IOContext.Context.MERGE ? -1 : config.getReaderTermsIndexDivisor(), context);\n        sr.readerFinishedListeners = readerFinishedListeners;\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(cacheKey, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n\n      SegmentCacheKey cacheKey = new SegmentCacheKey(info, context.context);\n      SegmentReader sr = readerMap.get(cacheKey);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.getRW(info, doOpenStores, context.context == IOContext.Context.MERGE ? -1 : config.getReaderTermsIndexDivisor(), context);\n        sr.readerFinishedListeners = readerFinishedListeners;\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(cacheKey, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n\n      SegmentCacheKey cacheKey = new SegmentCacheKey(info, context.context);\n      SegmentReader sr = readerMap.get(cacheKey);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, doOpenStores, context.context == IOContext.Context.MERGE ? -1 : config.getReaderTermsIndexDivisor(), context);\n        sr.readerFinishedListeners = readerFinishedListeners;\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(cacheKey, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n\n      SegmentCacheKey cacheKey = new SegmentCacheKey(info, context.context);\n      SegmentReader sr = readerMap.get(cacheKey);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.getRW(info, doOpenStores, context.context == IOContext.Context.MERGE ? -1 : config.getReaderTermsIndexDivisor(), context);\n        sr.readerFinishedListeners = readerFinishedListeners;\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(cacheKey, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n\n      SegmentCacheKey cacheKey = new SegmentCacheKey(info, context.context);\n      SegmentReader sr = readerMap.get(cacheKey);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.get(false, info.dir, info, doOpenStores, context.context == IOContext.Context.MERGE ? -1 : config.getReaderTermsIndexDivisor(), context);\n        sr.readerFinishedListeners = readerFinishedListeners;\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(cacheKey, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeb24fe119d55091148e2a3d94e80c9e349d886c","date":1323807643,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","sourceNew":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n\n      SegmentCacheKey cacheKey = new SegmentCacheKey(info, context.context);\n      SegmentReader sr = readerMap.get(cacheKey);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.getRW(info, doOpenStores, context.context == IOContext.Context.MERGE ? -1 : config.getReaderTermsIndexDivisor(), context);\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(cacheKey, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n\n      SegmentCacheKey cacheKey = new SegmentCacheKey(info, context.context);\n      SegmentReader sr = readerMap.get(cacheKey);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.getRW(info, doOpenStores, context.context == IOContext.Context.MERGE ? -1 : config.getReaderTermsIndexDivisor(), context);\n        sr.readerFinishedListeners = readerFinishedListeners;\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(cacheKey, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter.ReaderPool#get(SegmentInfo,boolean,IOContext).mjava","sourceNew":null,"sourceOld":"    /**\n     * Obtain a SegmentReader from the readerPool.  The reader\n     * must be returned by calling {@link #release(SegmentReader)}\n     * @see #release(SegmentReader)\n     * @param info\n     * @param doOpenStores\n     * @throws IOException\n     */\n    public synchronized SegmentReader get(SegmentInfo info, boolean doOpenStores, IOContext context) throws IOException {\n\n      SegmentCacheKey cacheKey = new SegmentCacheKey(info, context.context);\n      SegmentReader sr = readerMap.get(cacheKey);\n      if (sr == null) {\n        // TODO: we may want to avoid doing this while\n        // synchronized\n        // Returns a ref, which we xfer to readerMap:\n        sr = SegmentReader.getRW(info, doOpenStores, context.context == IOContext.Context.MERGE ? -1 : config.getReaderTermsIndexDivisor(), context);\n\n        if (info.dir == directory) {\n          // Only pool if reader is not external\n          readerMap.put(cacheKey, sr);\n        }\n      } else {\n        if (doOpenStores) {\n          sr.openDocStores();\n        }\n      }\n\n      // Return a ref to our caller\n      if (info.dir == directory) {\n        // Only incRef if we pooled (reader is not external)\n        sr.incRef();\n      }\n      return sr;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["eeb24fe119d55091148e2a3d94e80c9e349d886c"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"]},"commit2Childs":{"0061262413ecc163d6eebba1b5c43ab91a0c2dc5":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"eeb24fe119d55091148e2a3d94e80c9e349d886c":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","eeb24fe119d55091148e2a3d94e80c9e349d886c"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["0061262413ecc163d6eebba1b5c43ab91a0c2dc5","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cb4972c6aaf6c714c8f5957b5aeb14dcce34b75f":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}