{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#[T]_transformLists(ArrayList[ArrayList[T]],int,int,int,boolean,boolean,boolean,boolean,boolean).mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":1,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#[T]_transformLists(ArrayList[ArrayList[T]],int,int,int,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetCloudTest#[T]_transformLists(ArrayList[ArrayList[T]],int,int,int,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  private <T> ArrayList<ArrayList<T>> transformLists(ArrayList<ArrayList<T>> listsStart, int start, int end, int gap\n      , boolean hardend, boolean incLow, boolean incUp, boolean incEdge, boolean incOut) {\n    int off = (end-start)%gap;\n    if (!hardend && off>0) {\n      end+=gap-off;\n    }\n\n    ArrayList<ArrayList<T>> lists = new ArrayList<>();\n    ArrayList<T> between = new ArrayList<>();\n    if (incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (incLow && !incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (!incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    }\n    \n    if (incEdge && !incLow && start>=0) {\n      lists.get(0).addAll(listsStart.get(start));\n      between.addAll(listsStart.get(start));\n    }\n    if (incEdge && !incUp && end<listsStart.size()) {\n      lists.get(lists.size()-1).addAll(listsStart.get(end));\n      between.addAll(listsStart.get(end));\n    }\n    ArrayList<T> before = new ArrayList<>();\n    ArrayList<T> after = new ArrayList<>();\n    if (incOut || !(incLow||incEdge)) {\n      for (int i = 0; i<=start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = 0; i<start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    }\n    if (incOut || !(incUp||incEdge)) {\n      for (int i = end; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    } \n    else {\n      for (int i = end+1; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    }\n    lists.add(before);\n    lists.add(after);\n    lists.add(between);\n    return lists;\n  }\n\n","sourceOld":"  private <T> ArrayList<ArrayList<T>> transformLists(ArrayList<ArrayList<T>> listsStart, int start, int end, int gap\n      , boolean hardend, boolean incLow, boolean incUp, boolean incEdge, boolean incOut) {\n    int off = (end-start)%gap;\n    if (!hardend && off>0) {\n      end+=gap-off;\n    }\n\n    ArrayList<ArrayList<T>> lists = new ArrayList<>();\n    ArrayList<T> between = new ArrayList<>();\n    if (incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (incLow && !incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (!incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    }\n    \n    if (incEdge && !incLow && start>=0) {\n      lists.get(0).addAll(listsStart.get(start));\n      between.addAll(listsStart.get(start));\n    }\n    if (incEdge && !incUp && end<listsStart.size()) {\n      lists.get(lists.size()-1).addAll(listsStart.get(end));\n      between.addAll(listsStart.get(end));\n    }\n    ArrayList<T> before = new ArrayList<>();\n    ArrayList<T> after = new ArrayList<>();\n    if (incOut || !(incLow||incEdge)) {\n      for (int i = 0; i<=start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = 0; i<start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    }\n    if (incOut || !(incUp||incEdge)) {\n      for (int i = end; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    } \n    else {\n      for (int i = end+1; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    }\n    lists.add(before);\n    lists.add(after);\n    lists.add(between);\n    return lists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#[T]_transformLists(ArrayList[ArrayList[T]],int,int,int,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#[T]_transformLists(ArrayList[ArrayList[T]],int,int,int,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  private <T> ArrayList<ArrayList<T>> transformLists(ArrayList<ArrayList<T>> listsStart, int start, int end, int gap\n      , boolean hardend, boolean incLow, boolean incUp, boolean incEdge, boolean incOut) {\n    int off = (end-start)%gap;\n    if (!hardend && off>0) {\n      end+=gap-off;\n    }\n\n    ArrayList<ArrayList<T>> lists = new ArrayList<>();\n    ArrayList<T> between = new ArrayList<>();\n    if (incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (incLow && !incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (!incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    }\n\n    if (incEdge && !incLow && start>=0) {\n      lists.get(0).addAll(listsStart.get(start));\n      between.addAll(listsStart.get(start));\n    }\n    if (incEdge && !incUp && end<listsStart.size()) {\n      lists.get(lists.size()-1).addAll(listsStart.get(end));\n      between.addAll(listsStart.get(end));\n    }\n    ArrayList<T> before = new ArrayList<>();\n    ArrayList<T> after = new ArrayList<>();\n    if (incOut || !(incLow||incEdge)) {\n      for (int i = 0; i<=start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = 0; i<start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    }\n    if (incOut || !(incUp||incEdge)) {\n      for (int i = end; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    }\n    else {\n      for (int i = end+1; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    }\n    lists.add(before);\n    lists.add(after);\n    lists.add(between);\n    return lists;\n  }\n\n","sourceOld":"  private <T> ArrayList<ArrayList<T>> transformLists(ArrayList<ArrayList<T>> listsStart, int start, int end, int gap\n      , boolean hardend, boolean incLow, boolean incUp, boolean incEdge, boolean incOut) {\n    int off = (end-start)%gap;\n    if (!hardend && off>0) {\n      end+=gap-off;\n    }\n\n    ArrayList<ArrayList<T>> lists = new ArrayList<>();\n    ArrayList<T> between = new ArrayList<>();\n    if (incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (incLow && !incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (!incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    }\n    \n    if (incEdge && !incLow && start>=0) {\n      lists.get(0).addAll(listsStart.get(start));\n      between.addAll(listsStart.get(start));\n    }\n    if (incEdge && !incUp && end<listsStart.size()) {\n      lists.get(lists.size()-1).addAll(listsStart.get(end));\n      between.addAll(listsStart.get(end));\n    }\n    ArrayList<T> before = new ArrayList<>();\n    ArrayList<T> after = new ArrayList<>();\n    if (incOut || !(incLow||incEdge)) {\n      for (int i = 0; i<=start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = 0; i<start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    }\n    if (incOut || !(incUp||incEdge)) {\n      for (int i = end; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    } \n    else {\n      for (int i = end+1; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    }\n    lists.add(before);\n    lists.add(after);\n    lists.add(between);\n    return lists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#[T]_transformLists(ArrayList[ArrayList[T]],int,int,int,boolean,boolean,boolean,boolean,boolean).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetCloudTest#[T]_transformLists(ArrayList[ArrayList[T]],int,int,int,boolean,boolean,boolean,boolean,boolean).mjava","sourceNew":"  private <T> ArrayList<ArrayList<T>> transformLists(ArrayList<ArrayList<T>> listsStart, int start, int end, int gap\n      , boolean hardend, boolean incLow, boolean incUp, boolean incEdge, boolean incOut) {\n    int off = (end-start)%gap;\n    if (!hardend && off>0) {\n      end+=gap-off;\n    }\n\n    ArrayList<ArrayList<T>> lists = new ArrayList<>();\n    ArrayList<T> between = new ArrayList<>();\n    if (incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (incLow && !incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (!incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    }\n\n    if (incEdge && !incLow && start>=0) {\n      lists.get(0).addAll(listsStart.get(start));\n      between.addAll(listsStart.get(start));\n    }\n    if (incEdge && !incUp && end<listsStart.size()) {\n      lists.get(lists.size()-1).addAll(listsStart.get(end));\n      between.addAll(listsStart.get(end));\n    }\n    ArrayList<T> before = new ArrayList<>();\n    ArrayList<T> after = new ArrayList<>();\n    if (incOut || !(incLow||incEdge)) {\n      for (int i = 0; i<=start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = 0; i<start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    }\n    if (incOut || !(incUp||incEdge)) {\n      for (int i = end; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    }\n    else {\n      for (int i = end+1; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    }\n    lists.add(before);\n    lists.add(after);\n    lists.add(between);\n    return lists;\n  }\n\n","sourceOld":"  private <T> ArrayList<ArrayList<T>> transformLists(ArrayList<ArrayList<T>> listsStart, int start, int end, int gap\n      , boolean hardend, boolean incLow, boolean incUp, boolean incEdge, boolean incOut) {\n    int off = (end-start)%gap;\n    if (!hardend && off>0) {\n      end+=gap-off;\n    }\n\n    ArrayList<ArrayList<T>> lists = new ArrayList<>();\n    ArrayList<T> between = new ArrayList<>();\n    if (incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (incLow && !incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else if (!incLow && incUp) {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<=i+gap && j<=end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<=end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = start; i<end && i<listsStart.size(); i+=gap) {\n        ArrayList<T> list = new ArrayList<>();\n        for (int j = i+1; j<i+gap && j<end && j<listsStart.size(); j++) {\n          list.addAll(listsStart.get(j));\n        }\n        lists.add(list);\n      }\n      for (int i = start+1; i<listsStart.size() && i<end; i++) {\n        between.addAll(listsStart.get(i));\n      }\n    }\n    \n    if (incEdge && !incLow && start>=0) {\n      lists.get(0).addAll(listsStart.get(start));\n      between.addAll(listsStart.get(start));\n    }\n    if (incEdge && !incUp && end<listsStart.size()) {\n      lists.get(lists.size()-1).addAll(listsStart.get(end));\n      between.addAll(listsStart.get(end));\n    }\n    ArrayList<T> before = new ArrayList<>();\n    ArrayList<T> after = new ArrayList<>();\n    if (incOut || !(incLow||incEdge)) {\n      for (int i = 0; i<=start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    } else {\n      for (int i = 0; i<start; i++) {\n        before.addAll(listsStart.get(i));\n      }\n    }\n    if (incOut || !(incUp||incEdge)) {\n      for (int i = end; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    } \n    else {\n      for (int i = end+1; i<listsStart.size(); i++) {\n        after.addAll(listsStart.get(i));\n      }\n    }\n    lists.add(before);\n    lists.add(after);\n    lists.add(between);\n    return lists;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}