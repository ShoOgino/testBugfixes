{"path":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesFieldUpdates#merge(DocValuesFieldUpdates).mjava","commits":[{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesFieldUpdates#merge(DocValuesFieldUpdates).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void merge(DocValuesFieldUpdates other) {\n    assert other instanceof NumericDocValuesFieldUpdates;\n    NumericDocValuesFieldUpdates otherUpdates = (NumericDocValuesFieldUpdates) other;\n    if (size  + otherUpdates.size > Integer.MAX_VALUE) {\n      throw new IllegalStateException(\n          \"cannot support more than Integer.MAX_VALUE doc/value entries; size=\"\n              + size + \" other.size=\" + otherUpdates.size);\n    }\n    docs = docs.grow(size + otherUpdates.size);\n    values = values.grow(size + otherUpdates.size);\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, (int) docs.size());\n    for (int i = 0; i < otherUpdates.size; i++) {\n      int doc = (int) otherUpdates.docs.get(i);\n      if (otherUpdates.docsWithField.get(i)) {\n        docsWithField.set(size);\n      }\n      docs.set(size, doc);\n      values.set(size, otherUpdates.values.get(i));\n      ++size;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7","date":1401116050,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesFieldUpdates#merge(DocValuesFieldUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesFieldUpdates#merge(DocValuesFieldUpdates).mjava","sourceNew":"  @Override\n  public void merge(DocValuesFieldUpdates other) {\n    assert other instanceof NumericDocValuesFieldUpdates;\n    NumericDocValuesFieldUpdates otherUpdates = (NumericDocValuesFieldUpdates) other;\n    if (size  + otherUpdates.size > Integer.MAX_VALUE) {\n      throw new IllegalStateException(\n          \"cannot support more than Integer.MAX_VALUE doc/value entries; size=\"\n              + size + \" other.size=\" + otherUpdates.size);\n    }\n    docs = docs.grow(size + otherUpdates.size);\n    values = values.grow(size + otherUpdates.size);\n    for (int i = 0; i < otherUpdates.size; i++) {\n      int doc = (int) otherUpdates.docs.get(i);\n      docs.set(size, doc);\n      values.set(size, otherUpdates.values.get(i));\n      ++size;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void merge(DocValuesFieldUpdates other) {\n    assert other instanceof NumericDocValuesFieldUpdates;\n    NumericDocValuesFieldUpdates otherUpdates = (NumericDocValuesFieldUpdates) other;\n    if (size  + otherUpdates.size > Integer.MAX_VALUE) {\n      throw new IllegalStateException(\n          \"cannot support more than Integer.MAX_VALUE doc/value entries; size=\"\n              + size + \" other.size=\" + otherUpdates.size);\n    }\n    docs = docs.grow(size + otherUpdates.size);\n    values = values.grow(size + otherUpdates.size);\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, (int) docs.size());\n    for (int i = 0; i < otherUpdates.size; i++) {\n      int doc = (int) otherUpdates.docs.get(i);\n      if (otherUpdates.docsWithField.get(i)) {\n        docsWithField.set(size);\n      }\n      docs.set(size, doc);\n      values.set(size, otherUpdates.values.get(i));\n      ++size;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1e41198cb1c4ffb33f12196af07535be589153d","date":1449247514,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesFieldUpdates#merge(DocValuesFieldUpdates).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesFieldUpdates#merge(DocValuesFieldUpdates).mjava","sourceNew":"  @Override\n  public void merge(DocValuesFieldUpdates other) {\n    assert other instanceof NumericDocValuesFieldUpdates;\n    NumericDocValuesFieldUpdates otherUpdates = (NumericDocValuesFieldUpdates) other;\n    if (otherUpdates.size > Integer.MAX_VALUE - size) {\n      throw new IllegalStateException(\n          \"cannot support more than Integer.MAX_VALUE doc/value entries; size=\"\n              + size + \" other.size=\" + otherUpdates.size);\n    }\n    docs = docs.grow(size + otherUpdates.size);\n    values = values.grow(size + otherUpdates.size);\n    for (int i = 0; i < otherUpdates.size; i++) {\n      int doc = (int) otherUpdates.docs.get(i);\n      docs.set(size, doc);\n      values.set(size, otherUpdates.values.get(i));\n      ++size;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void merge(DocValuesFieldUpdates other) {\n    assert other instanceof NumericDocValuesFieldUpdates;\n    NumericDocValuesFieldUpdates otherUpdates = (NumericDocValuesFieldUpdates) other;\n    if (size  + otherUpdates.size > Integer.MAX_VALUE) {\n      throw new IllegalStateException(\n          \"cannot support more than Integer.MAX_VALUE doc/value entries; size=\"\n              + size + \" other.size=\" + otherUpdates.size);\n    }\n    docs = docs.grow(size + otherUpdates.size);\n    values = values.grow(size + otherUpdates.size);\n    for (int i = 0; i < otherUpdates.size; i++) {\n      int doc = (int) otherUpdates.docs.get(i);\n      docs.set(size, doc);\n      values.set(size, otherUpdates.values.get(i));\n      ++size;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesFieldUpdates#merge(DocValuesFieldUpdates).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void merge(DocValuesFieldUpdates other) {\n    assert other instanceof NumericDocValuesFieldUpdates;\n    NumericDocValuesFieldUpdates otherUpdates = (NumericDocValuesFieldUpdates) other;\n    if (otherUpdates.size > Integer.MAX_VALUE - size) {\n      throw new IllegalStateException(\n          \"cannot support more than Integer.MAX_VALUE doc/value entries; size=\"\n              + size + \" other.size=\" + otherUpdates.size);\n    }\n    docs = docs.grow(size + otherUpdates.size);\n    values = values.grow(size + otherUpdates.size);\n    for (int i = 0; i < otherUpdates.size; i++) {\n      int doc = (int) otherUpdates.docs.get(i);\n      docs.set(size, doc);\n      values.set(size, otherUpdates.values.get(i));\n      ++size;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesFieldUpdates#merge(DocValuesFieldUpdates).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void merge(DocValuesFieldUpdates other) {\n    assert other instanceof NumericDocValuesFieldUpdates;\n    NumericDocValuesFieldUpdates otherUpdates = (NumericDocValuesFieldUpdates) other;\n    if (otherUpdates.size > Integer.MAX_VALUE - size) {\n      throw new IllegalStateException(\n          \"cannot support more than Integer.MAX_VALUE doc/value entries; size=\"\n              + size + \" other.size=\" + otherUpdates.size);\n    }\n    docs = docs.grow(size + otherUpdates.size);\n    values = values.grow(size + otherUpdates.size);\n    for (int i = 0; i < otherUpdates.size; i++) {\n      int doc = (int) otherUpdates.docs.get(i);\n      docs.set(size, doc);\n      values.set(size, otherUpdates.values.get(i));\n      ++size;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/NumericDocValuesFieldUpdates#merge(DocValuesFieldUpdates).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void merge(DocValuesFieldUpdates other) {\n    assert other instanceof NumericDocValuesFieldUpdates;\n    NumericDocValuesFieldUpdates otherUpdates = (NumericDocValuesFieldUpdates) other;\n    if (otherUpdates.size > Integer.MAX_VALUE - size) {\n      throw new IllegalStateException(\n          \"cannot support more than Integer.MAX_VALUE doc/value entries; size=\"\n              + size + \" other.size=\" + otherUpdates.size);\n    }\n    docs = docs.grow(size + otherUpdates.size);\n    values = values.grow(size + otherUpdates.size);\n    for (int i = 0; i < otherUpdates.size; i++) {\n      int doc = (int) otherUpdates.docs.get(i);\n      docs.set(size, doc);\n      values.set(size, otherUpdates.values.get(i));\n      ++size;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["d1e41198cb1c4ffb33f12196af07535be589153d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1e41198cb1c4ffb33f12196af07535be589153d":["30d3ec601cbd11cf056b7336f0e03f688ebcd9f7"],"06805da26538ed636bd89b10c2699cc3834032ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7":["06805da26538ed636bd89b10c2699cc3834032ae"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["d1e41198cb1c4ffb33f12196af07535be589153d","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["d1e41198cb1c4ffb33f12196af07535be589153d","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06805da26538ed636bd89b10c2699cc3834032ae"],"d1e41198cb1c4ffb33f12196af07535be589153d":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"06805da26538ed636bd89b10c2699cc3834032ae":["30d3ec601cbd11cf056b7336f0e03f688ebcd9f7"],"30d3ec601cbd11cf056b7336f0e03f688ebcd9f7":["d1e41198cb1c4ffb33f12196af07535be589153d"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}