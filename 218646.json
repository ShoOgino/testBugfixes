{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#commit(NamedList,String,Replica).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#commit(NamedList,String,Replica).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#commit(NamedList,String,Replica).mjava","sourceNew":"  void commit(NamedList results, String slice, Replica parentShardLeader) {\n    log.debug(\"Calling soft commit to make sub shard updates visible\");\n    String coreUrl = new ZkCoreNodeProps(parentShardLeader).getCoreUrl();\n    // HttpShardHandler is hard coded to send a QueryRequest hence we go direct\n    // and we force open a searcher so that we have documents to show upon switching states\n    UpdateResponse updateResponse = null;\n    try {\n      updateResponse = softCommit(coreUrl);\n      processResponse(results, null, coreUrl, updateResponse, slice, Collections.emptySet());\n    } catch (Exception e) {\n      processResponse(results, e, coreUrl, updateResponse, slice, Collections.emptySet());\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to call distrib softCommit on: \" + coreUrl, e);\n    }\n  }\n\n","sourceOld":"  void commit(NamedList results, String slice, Replica parentShardLeader) {\n    log.debug(\"Calling soft commit to make sub shard updates visible\");\n    String coreUrl = new ZkCoreNodeProps(parentShardLeader).getCoreUrl();\n    // HttpShardHandler is hard coded to send a QueryRequest hence we go direct\n    // and we force open a searcher so that we have documents to show upon switching states\n    UpdateResponse updateResponse = null;\n    try {\n      updateResponse = softCommit(coreUrl);\n      processResponse(results, null, coreUrl, updateResponse, slice, Collections.emptySet());\n    } catch (Exception e) {\n      processResponse(results, e, coreUrl, updateResponse, slice, Collections.emptySet());\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to call distrib softCommit on: \" + coreUrl, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#commit(NamedList,String,Replica).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#commit(NamedList,String,Replica).mjava","sourceNew":"  void commit(NamedList results, String slice, Replica parentShardLeader) {\n    log.debug(\"Calling soft commit to make sub shard updates visible\");\n    String coreUrl = new ZkCoreNodeProps(parentShardLeader).getCoreUrl();\n    // HttpShardHandler is hard coded to send a QueryRequest hence we go direct\n    // and we force open a searcher so that we have documents to show upon switching states\n    UpdateResponse updateResponse = null;\n    try {\n      updateResponse = softCommit(coreUrl);\n      processResponse(results, null, coreUrl, updateResponse, slice, Collections.emptySet());\n    } catch (Exception e) {\n      processResponse(results, e, coreUrl, updateResponse, slice, Collections.emptySet());\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to call distrib softCommit on: \" + coreUrl, e);\n    }\n  }\n\n","sourceOld":"  void commit(NamedList results, String slice, Replica parentShardLeader) {\n    log.debug(\"Calling soft commit to make sub shard updates visible\");\n    String coreUrl = new ZkCoreNodeProps(parentShardLeader).getCoreUrl();\n    // HttpShardHandler is hard coded to send a QueryRequest hence we go direct\n    // and we force open a searcher so that we have documents to show upon switching states\n    UpdateResponse updateResponse = null;\n    try {\n      updateResponse = softCommit(coreUrl);\n      processResponse(results, null, coreUrl, updateResponse, slice, Collections.emptySet());\n    } catch (Exception e) {\n      processResponse(results, e, coreUrl, updateResponse, slice, Collections.emptySet());\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to call distrib softCommit on: \" + coreUrl, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#commit(NamedList,String,Replica).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#commit(NamedList,String,Replica).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  void commit(@SuppressWarnings({\"rawtypes\"})NamedList results, String slice, Replica parentShardLeader) {\n    log.debug(\"Calling soft commit to make sub shard updates visible\");\n    String coreUrl = new ZkCoreNodeProps(parentShardLeader).getCoreUrl();\n    // HttpShardHandler is hard coded to send a QueryRequest hence we go direct\n    // and we force open a searcher so that we have documents to show upon switching states\n    UpdateResponse updateResponse = null;\n    try {\n      updateResponse = softCommit(coreUrl);\n      processResponse(results, null, coreUrl, updateResponse, slice, Collections.emptySet());\n    } catch (Exception e) {\n      processResponse(results, e, coreUrl, updateResponse, slice, Collections.emptySet());\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to call distrib softCommit on: \" + coreUrl, e);\n    }\n  }\n\n","sourceOld":"  void commit(NamedList results, String slice, Replica parentShardLeader) {\n    log.debug(\"Calling soft commit to make sub shard updates visible\");\n    String coreUrl = new ZkCoreNodeProps(parentShardLeader).getCoreUrl();\n    // HttpShardHandler is hard coded to send a QueryRequest hence we go direct\n    // and we force open a searcher so that we have documents to show upon switching states\n    UpdateResponse updateResponse = null;\n    try {\n      updateResponse = softCommit(coreUrl);\n      processResponse(results, null, coreUrl, updateResponse, slice, Collections.emptySet());\n    } catch (Exception e) {\n      processResponse(results, e, coreUrl, updateResponse, slice, Collections.emptySet());\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to call distrib softCommit on: \" + coreUrl, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}