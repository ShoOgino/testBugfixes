{"path":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","sourceNew":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_FLAT) {\n      writeNamedListAsFlat(name,val);\n    } else if (namedListStyle==JSON_NL_MAP){\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name,val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_FLAT) {\n      writeNamedListAsFlat(name,val);\n    } else if (namedListStyle==JSON_NL_MAP){\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name,val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","sourceNew":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_FLAT) {\n      writeNamedListAsFlat(name,val);\n    } else if (namedListStyle==JSON_NL_MAP){\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name,val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_FLAT) {\n      writeNamedListAsFlat(name,val);\n    } else if (namedListStyle==JSON_NL_MAP){\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name,val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","pathOld":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","sourceNew":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_FLAT) {\n      writeNamedListAsFlat(name,val);\n    } else if (namedListStyle==JSON_NL_MAP){\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name,val);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_FLAT) {\n      writeNamedListAsFlat(name,val);\n    } else if (namedListStyle==JSON_NL_MAP){\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name,val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be24bc5afb9111e35bec7963fc84f96ebd98d9ee","date":1477912779,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","sourceNew":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_FLAT) {\n      writeNamedListAsFlat(name,val);\n    } else if (namedListStyle==JSON_NL_MAP){\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFNVP) {\n      throw new UnsupportedOperationException(namedListStyle\n          + \" namedListStyle must only be used with \"+ArrayOfNamedValuePairJSONWriter.class.getSimpleName());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_FLAT) {\n      writeNamedListAsFlat(name,val);\n    } else if (namedListStyle==JSON_NL_MAP){\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name,val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","sourceNew":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_FLAT) {\n      writeNamedListAsFlat(name,val);\n    } else if (namedListStyle==JSON_NL_MAP){\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFNVP) {\n      throw new UnsupportedOperationException(namedListStyle\n          + \" namedListStyle must only be used with \"+ArrayOfNamedValuePairJSONWriter.class.getSimpleName());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_FLAT) {\n      writeNamedListAsFlat(name,val);\n    } else if (namedListStyle==JSON_NL_MAP){\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name,val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87f40a063571d1870bae89b6d191c3cb53b10f5e","date":1482933535,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","sourceNew":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_FLAT) {\n      writeNamedListAsFlat(name,val);\n    } else if (namedListStyle==JSON_NL_MAP){\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFNTV) {\n      throw new UnsupportedOperationException(namedListStyle\n          + \" namedListStyle must only be used with \"+ArrayOfNameTypeValueJSONWriter.class.getSimpleName());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_FLAT) {\n      writeNamedListAsFlat(name,val);\n    } else if (namedListStyle==JSON_NL_MAP){\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFNVP) {\n      throw new UnsupportedOperationException(namedListStyle\n          + \" namedListStyle must only be used with \"+ArrayOfNamedValuePairJSONWriter.class.getSimpleName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","sourceNew":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_FLAT) {\n      writeNamedListAsFlat(name,val);\n    } else if (namedListStyle==JSON_NL_MAP){\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFNTV) {\n      throw new UnsupportedOperationException(namedListStyle\n          + \" namedListStyle must only be used with \"+ArrayOfNameTypeValueJSONWriter.class.getSimpleName());\n    }\n  }\n\n","sourceOld":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_FLAT) {\n      writeNamedListAsFlat(name,val);\n    } else if (namedListStyle==JSON_NL_MAP){\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFNVP) {\n      throw new UnsupportedOperationException(namedListStyle\n          + \" namedListStyle must only be used with \"+ArrayOfNamedValuePairJSONWriter.class.getSimpleName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"119f84a673d2ea32c0ec18c36987696dd31aa174","date":1528551316,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_FLAT) {\n      writeNamedListAsFlat(name,val);\n    } else if (namedListStyle==JSON_NL_MAP){\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFNTV) {\n      throw new UnsupportedOperationException(namedListStyle\n          + \" namedListStyle must only be used with \"+ArrayOfNameTypeValueJSONWriter.class.getSimpleName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_FLAT) {\n      writeNamedListAsFlat(name,val);\n    } else if (namedListStyle==JSON_NL_MAP){\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFNTV) {\n      throw new UnsupportedOperationException(namedListStyle\n          + \" namedListStyle must only be used with \"+ArrayOfNameTypeValueJSONWriter.class.getSimpleName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeNamedList(String,NamedList).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void writeNamedList(String name, NamedList val) throws IOException {\n    if (val instanceof SimpleOrderedMap) {\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_FLAT) {\n      writeNamedListAsFlat(name,val);\n    } else if (namedListStyle==JSON_NL_MAP){\n      writeNamedListAsMapWithDups(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFARR) {\n      writeNamedListAsArrArr(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFMAP) {\n      writeNamedListAsArrMap(name,val);\n    } else if (namedListStyle==JSON_NL_ARROFNTV) {\n      throw new UnsupportedOperationException(namedListStyle\n          + \" namedListStyle must only be used with \"+ArrayOfNameTypeValueJSONWriter.class.getSimpleName());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be24bc5afb9111e35bec7963fc84f96ebd98d9ee":["c26f00b574427b55127e869b935845554afde1fa"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["87f40a063571d1870bae89b6d191c3cb53b10f5e","119f84a673d2ea32c0ec18c36987696dd31aa174"],"119f84a673d2ea32c0ec18c36987696dd31aa174":["87f40a063571d1870bae89b6d191c3cb53b10f5e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"87f40a063571d1870bae89b6d191c3cb53b10f5e":["be24bc5afb9111e35bec7963fc84f96ebd98d9ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"320888923ec13b91f53082558f01f4c9960dd226":["c26f00b574427b55127e869b935845554afde1fa","be24bc5afb9111e35bec7963fc84f96ebd98d9ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["119f84a673d2ea32c0ec18c36987696dd31aa174"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["87f40a063571d1870bae89b6d191c3cb53b10f5e","119f84a673d2ea32c0ec18c36987696dd31aa174"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["320888923ec13b91f53082558f01f4c9960dd226","87f40a063571d1870bae89b6d191c3cb53b10f5e"]},"commit2Childs":{"be24bc5afb9111e35bec7963fc84f96ebd98d9ee":["87f40a063571d1870bae89b6d191c3cb53b10f5e","320888923ec13b91f53082558f01f4c9960dd226"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"119f84a673d2ea32c0ec18c36987696dd31aa174":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["be24bc5afb9111e35bec7963fc84f96ebd98d9ee","320888923ec13b91f53082558f01f4c9960dd226"],"87f40a063571d1870bae89b6d191c3cb53b10f5e":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","119f84a673d2ea32c0ec18c36987696dd31aa174","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"320888923ec13b91f53082558f01f4c9960dd226":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}