{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest#assertRange(String,Object,Object,Object,int,RangeFacet).mjava","commits":[{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest#assertRange(String,Object,Object,Object,int,RangeFacet).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * asserts that the actual RangeFacet matches the expected criteria\n   */\n  private void assertRange(String name, Object start, Object gap, Object end, int numCount,\n                           RangeFacet actual) {\n    assertEquals(\"NAME: \" + actual.toString(), name, actual.getName());\n    assertEquals(\"START: \" + actual.toString(), start, actual.getStart());\n    assertEquals(\"GAP: \" + actual.toString(), gap, actual.getGap());\n    assertEquals(\"END: \" + actual.toString(), end, actual.getEnd());\n    assertEquals(\"#COUNT: \" + actual.toString(), numCount, actual.getCounts().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest#assertRange(String,Object,Object,Object,int,RangeFacet).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest#assertRange(String,Object,Object,Object,int,RangeFacet).mjava","sourceNew":"  /**\n   * asserts that the actual RangeFacet matches the expected criteria\n   */\n  private void assertRange(String name, Object start, Object gap, Object end, int numCount,\n                           @SuppressWarnings({\"rawtypes\"})RangeFacet actual) {\n    assertEquals(\"NAME: \" + actual.toString(), name, actual.getName());\n    assertEquals(\"START: \" + actual.toString(), start, actual.getStart());\n    assertEquals(\"GAP: \" + actual.toString(), gap, actual.getGap());\n    assertEquals(\"END: \" + actual.toString(), end, actual.getEnd());\n    assertEquals(\"#COUNT: \" + actual.toString(), numCount, actual.getCounts().size());\n  }\n\n","sourceOld":"  /**\n   * asserts that the actual RangeFacet matches the expected criteria\n   */\n  private void assertRange(String name, Object start, Object gap, Object end, int numCount,\n                           RangeFacet actual) {\n    assertEquals(\"NAME: \" + actual.toString(), name, actual.getName());\n    assertEquals(\"START: \" + actual.toString(), start, actual.getStart());\n    assertEquals(\"GAP: \" + actual.toString(), gap, actual.getGap());\n    assertEquals(\"END: \" + actual.toString(), end, actual.getEnd());\n    assertEquals(\"#COUNT: \" + actual.toString(), numCount, actual.getCounts().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}