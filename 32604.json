{"path":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","commits":[{"id":"9140d3568539d7cd892885f2979289c780ba93c8","date":1458041347,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    IndexSchema schema = req.getSchema();\n    LeafReader leafReader = req.getSearcher().getLeafReader();\n    return new ClassificationUpdateProcessor(inputFieldNames, classFieldName, minDf, minTf, k, algorithm, next, leafReader, schema);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"444d4b906d0e3398f87d6a5c4967c508f11a7f0b","date":1466507434,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    IndexSchema schema = req.getSchema();\n    IndexReader indexReader = req.getSearcher().getIndexReader();\n    return new ClassificationUpdateProcessor(inputFieldNames, classFieldName, minDf, minTf, k, algorithm, next, indexReader, schema);\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    IndexSchema schema = req.getSchema();\n    LeafReader leafReader = req.getSearcher().getLeafReader();\n    return new ClassificationUpdateProcessor(inputFieldNames, classFieldName, minDf, minTf, k, algorithm, next, leafReader, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    IndexSchema schema = req.getSchema();\n    IndexReader indexReader = req.getSearcher().getIndexReader();\n    return new ClassificationUpdateProcessor(inputFieldNames, classFieldName, minDf, minTf, k, algorithm, next, indexReader, schema);\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    IndexSchema schema = req.getSchema();\n    LeafReader leafReader = req.getSearcher().getLeafReader();\n    return new ClassificationUpdateProcessor(inputFieldNames, classFieldName, minDf, minTf, k, algorithm, next, leafReader, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f1ec46dc24c2330c5e9dd0edefaede91c962926","date":1480027437,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    String trainingFilterQueryString = (params.get(KNN_FILTER_QUERY));\n    try {\n      if (trainingFilterQueryString != null && !trainingFilterQueryString.isEmpty()) {\n        Query trainingFilterQuery = this.parseFilterQuery(trainingFilterQueryString, params, req);\n        classificationParams.setTrainingFilterQuery(trainingFilterQuery);\n      }\n    } catch (SyntaxError | RuntimeException syntaxError) {\n      throw new SolrException\n          (SolrException.ErrorCode.SERVER_ERROR,\n              \"Classification UpdateProcessor Training Filter Query: '\" + trainingFilterQueryString + \"' is not supported\", syntaxError);\n    }\n\n    IndexSchema schema = req.getSchema();\n    IndexReader indexReader = req.getSearcher().getIndexReader();\n\n    return new ClassificationUpdateProcessor(classificationParams, next, indexReader, schema);\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    IndexSchema schema = req.getSchema();\n    IndexReader indexReader = req.getSearcher().getIndexReader();\n    return new ClassificationUpdateProcessor(inputFieldNames, classFieldName, minDf, minTf, k, algorithm, next, indexReader, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75babd1dfc2521603bfeb0968042e921d8c6c652","date":1480042089,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    String trainingFilterQueryString = (params.get(KNN_FILTER_QUERY));\n    try {\n      if (trainingFilterQueryString != null && !trainingFilterQueryString.isEmpty()) {\n        Query trainingFilterQuery = this.parseFilterQuery(trainingFilterQueryString, params, req);\n        classificationParams.setTrainingFilterQuery(trainingFilterQuery);\n      }\n    } catch (SyntaxError | RuntimeException syntaxError) {\n      throw new SolrException\n          (SolrException.ErrorCode.SERVER_ERROR,\n              \"Classification UpdateProcessor Training Filter Query: '\" + trainingFilterQueryString + \"' is not supported\", syntaxError);\n    }\n\n    IndexSchema schema = req.getSchema();\n    IndexReader indexReader = req.getSearcher().getIndexReader();\n\n    return new ClassificationUpdateProcessor(classificationParams, next, indexReader, schema);\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    IndexSchema schema = req.getSchema();\n    IndexReader indexReader = req.getSearcher().getIndexReader();\n    return new ClassificationUpdateProcessor(inputFieldNames, classFieldName, minDf, minTf, k, algorithm, next, indexReader, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/ClassificationUpdateProcessorFactory#getInstance(SolrQueryRequest,SolrQueryResponse,UpdateRequestProcessor).mjava","sourceNew":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    String trainingFilterQueryString = (params.get(KNN_FILTER_QUERY));\n    try {\n      if (trainingFilterQueryString != null && !trainingFilterQueryString.isEmpty()) {\n        Query trainingFilterQuery = this.parseFilterQuery(trainingFilterQueryString, params, req);\n        classificationParams.setTrainingFilterQuery(trainingFilterQuery);\n      }\n    } catch (SyntaxError | RuntimeException syntaxError) {\n      throw new SolrException\n          (SolrException.ErrorCode.SERVER_ERROR,\n              \"Classification UpdateProcessor Training Filter Query: '\" + trainingFilterQueryString + \"' is not supported\", syntaxError);\n    }\n\n    IndexSchema schema = req.getSchema();\n    IndexReader indexReader = req.getSearcher().getIndexReader();\n\n    return new ClassificationUpdateProcessor(classificationParams, next, indexReader, schema);\n  }\n\n","sourceOld":"  @Override\n  public UpdateRequestProcessor getInstance(SolrQueryRequest req, SolrQueryResponse rsp, UpdateRequestProcessor next) {\n    IndexSchema schema = req.getSchema();\n    IndexReader indexReader = req.getSearcher().getIndexReader();\n    return new ClassificationUpdateProcessor(inputFieldNames, classFieldName, minDf, minTf, k, algorithm, next, indexReader, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["9140d3568539d7cd892885f2979289c780ba93c8"],"9140d3568539d7cd892885f2979289c780ba93c8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9f1ec46dc24c2330c5e9dd0edefaede91c962926":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","75babd1dfc2521603bfeb0968042e921d8c6c652"],"75babd1dfc2521603bfeb0968042e921d8c6c652":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b","9f1ec46dc24c2330c5e9dd0edefaede91c962926"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9140d3568539d7cd892885f2979289c780ba93c8","444d4b906d0e3398f87d6a5c4967c508f11a7f0b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75babd1dfc2521603bfeb0968042e921d8c6c652"]},"commit2Childs":{"444d4b906d0e3398f87d6a5c4967c508f11a7f0b":["9f1ec46dc24c2330c5e9dd0edefaede91c962926","75babd1dfc2521603bfeb0968042e921d8c6c652","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9140d3568539d7cd892885f2979289c780ba93c8":["444d4b906d0e3398f87d6a5c4967c508f11a7f0b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9f1ec46dc24c2330c5e9dd0edefaede91c962926":["75babd1dfc2521603bfeb0968042e921d8c6c652"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"75babd1dfc2521603bfeb0968042e921d8c6c652":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9140d3568539d7cd892885f2979289c780ba93c8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}