{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#finish().mjava","commits":[{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#finish().mjava","pathOld":"/dev/null","sourceNew":"    public long finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return -1;\n      }\n\n      pointCount = valueCount;\n\n      long indexFP = out.getFilePointer();\n\n      int numInnerNodes = leafBlockStartValues.size();\n\n      //System.out.println(\"BKDW: now rotate numInnerNodes=\" + numInnerNodes + \" leafBlockStarts=\" + leafBlockStartValues.size());\n\n      byte[] index = new byte[(1+numInnerNodes) * (1+bytesPerDim)];\n      rotateToTree(1, 0, numInnerNodes, index, leafBlockStartValues);\n      long[] arr = new long[leafBlockFPs.size()];\n      for(int i=0;i<leafBlockFPs.size();i++) {\n        arr[i] = leafBlockFPs.get(i);\n      }\n      writeIndex(out, arr, index);\n      return indexFP;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#finish().mjava","pathOld":"/dev/null","sourceNew":"    public long finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return -1;\n      }\n\n      pointCount = valueCount;\n\n      long indexFP = out.getFilePointer();\n\n      int numInnerNodes = leafBlockStartValues.size();\n\n      //System.out.println(\"BKDW: now rotate numInnerNodes=\" + numInnerNodes + \" leafBlockStarts=\" + leafBlockStartValues.size());\n\n      byte[] index = new byte[(1+numInnerNodes) * (1+bytesPerDim)];\n      rotateToTree(1, 0, numInnerNodes, index, leafBlockStartValues);\n      long[] arr = new long[leafBlockFPs.size()];\n      for(int i=0;i<leafBlockFPs.size();i++) {\n        arr[i] = leafBlockFPs.get(i);\n      }\n      writeIndex(out, arr, index);\n      return indexFP;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#finish().mjava","pathOld":"/dev/null","sourceNew":"    public long finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return -1;\n      }\n\n      pointCount = valueCount;\n\n      long indexFP = out.getFilePointer();\n\n      int numInnerNodes = leafBlockStartValues.size();\n\n      //System.out.println(\"BKDW: now rotate numInnerNodes=\" + numInnerNodes + \" leafBlockStarts=\" + leafBlockStartValues.size());\n\n      byte[] index = new byte[(1+numInnerNodes) * (1+bytesPerDim)];\n      rotateToTree(1, 0, numInnerNodes, index, leafBlockStartValues);\n      long[] arr = new long[leafBlockFPs.size()];\n      for(int i=0;i<leafBlockFPs.size();i++) {\n        arr[i] = leafBlockFPs.get(i);\n      }\n      writeIndex(out, arr, index);\n      return indexFP;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15fe6782474c00ec2ccc636052a025f8fe0bdb8b","date":1484743707,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#finish().mjava","sourceNew":"    public long finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return -1;\n      }\n\n      pointCount = valueCount;\n\n      long indexFP = out.getFilePointer();\n\n      int numInnerNodes = leafBlockStartValues.size();\n\n      //System.out.println(\"BKDW: now rotate numInnerNodes=\" + numInnerNodes + \" leafBlockStarts=\" + leafBlockStartValues.size());\n\n      byte[] index = new byte[(1+numInnerNodes) * (1+bytesPerDim)];\n      rotateToTree(1, 0, numInnerNodes, index, leafBlockStartValues);\n      long[] arr = new long[leafBlockFPs.size()];\n      for(int i=0;i<leafBlockFPs.size();i++) {\n        arr[i] = leafBlockFPs.get(i);\n      }\n      writeIndex(out, maxPointsInLeafNode, arr, index);\n      return indexFP;\n    }\n\n","sourceOld":"    public long finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return -1;\n      }\n\n      pointCount = valueCount;\n\n      long indexFP = out.getFilePointer();\n\n      int numInnerNodes = leafBlockStartValues.size();\n\n      //System.out.println(\"BKDW: now rotate numInnerNodes=\" + numInnerNodes + \" leafBlockStarts=\" + leafBlockStartValues.size());\n\n      byte[] index = new byte[(1+numInnerNodes) * (1+bytesPerDim)];\n      rotateToTree(1, 0, numInnerNodes, index, leafBlockStartValues);\n      long[] arr = new long[leafBlockFPs.size()];\n      for(int i=0;i<leafBlockFPs.size();i++) {\n        arr[i] = leafBlockFPs.get(i);\n      }\n      writeIndex(out, arr, index);\n      return indexFP;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#finish().mjava","sourceNew":"    public long finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return -1;\n      }\n\n      pointCount = valueCount;\n\n      long indexFP = out.getFilePointer();\n\n      int numInnerNodes = leafBlockStartValues.size();\n\n      //System.out.println(\"BKDW: now rotate numInnerNodes=\" + numInnerNodes + \" leafBlockStarts=\" + leafBlockStartValues.size());\n\n      byte[] index = new byte[(1+numInnerNodes) * (1+bytesPerDim)];\n      rotateToTree(1, 0, numInnerNodes, index, leafBlockStartValues);\n      long[] arr = new long[leafBlockFPs.size()];\n      for(int i=0;i<leafBlockFPs.size();i++) {\n        arr[i] = leafBlockFPs.get(i);\n      }\n      writeIndex(out, maxPointsInLeafNode, arr, index);\n      return indexFP;\n    }\n\n","sourceOld":"    public long finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return -1;\n      }\n\n      pointCount = valueCount;\n\n      long indexFP = out.getFilePointer();\n\n      int numInnerNodes = leafBlockStartValues.size();\n\n      //System.out.println(\"BKDW: now rotate numInnerNodes=\" + numInnerNodes + \" leafBlockStarts=\" + leafBlockStartValues.size());\n\n      byte[] index = new byte[(1+numInnerNodes) * (1+bytesPerDim)];\n      rotateToTree(1, 0, numInnerNodes, index, leafBlockStartValues);\n      long[] arr = new long[leafBlockFPs.size()];\n      for(int i=0;i<leafBlockFPs.size();i++) {\n        arr[i] = leafBlockFPs.get(i);\n      }\n      writeIndex(out, arr, index);\n      return indexFP;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b","date":1561536972,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#finish().mjava","sourceNew":"    public long finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock(leafCardinality);\n        leafCardinality = 0;\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return -1;\n      }\n\n      pointCount = valueCount;\n\n      long indexFP = out.getFilePointer();\n\n      int numInnerNodes = leafBlockStartValues.size();\n\n      //System.out.println(\"BKDW: now rotate numInnerNodes=\" + numInnerNodes + \" leafBlockStarts=\" + leafBlockStartValues.size());\n\n      byte[] index = new byte[(1+numInnerNodes) * (1+bytesPerDim)];\n      rotateToTree(1, 0, numInnerNodes, index, leafBlockStartValues);\n      long[] arr = new long[leafBlockFPs.size()];\n      for(int i=0;i<leafBlockFPs.size();i++) {\n        arr[i] = leafBlockFPs.get(i);\n      }\n      writeIndex(out, maxPointsInLeafNode, arr, index);\n      return indexFP;\n    }\n\n","sourceOld":"    public long finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock();\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return -1;\n      }\n\n      pointCount = valueCount;\n\n      long indexFP = out.getFilePointer();\n\n      int numInnerNodes = leafBlockStartValues.size();\n\n      //System.out.println(\"BKDW: now rotate numInnerNodes=\" + numInnerNodes + \" leafBlockStarts=\" + leafBlockStartValues.size());\n\n      byte[] index = new byte[(1+numInnerNodes) * (1+bytesPerDim)];\n      rotateToTree(1, 0, numInnerNodes, index, leafBlockStartValues);\n      long[] arr = new long[leafBlockFPs.size()];\n      for(int i=0;i<leafBlockFPs.size();i++) {\n        arr[i] = leafBlockFPs.get(i);\n      }\n      writeIndex(out, maxPointsInLeafNode, arr, index);\n      return indexFP;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125e5eeb7e933deec0cc0510c2368fe1ec7c36ce","date":1589215155,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#finish().mjava","sourceNew":"    public long finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock(leafCardinality);\n        leafCardinality = 0;\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return -1;\n      }\n\n      pointCount = valueCount;\n\n      long indexFP = out.getFilePointer();\n\n      scratchBytesRef1.length = bytesPerDim;\n      scratchBytesRef1.offset = 0;\n      assert leafBlockStartValues.size() + 1 == leafBlockFPs.size();\n      BKDTreeLeafNodes leafNodes = new BKDTreeLeafNodes() {\n        @Override\n        public long getLeafLP(int index) {\n          return leafBlockFPs.get(index);\n        }\n\n        @Override\n        public BytesRef getSplitValue(int index) {\n          scratchBytesRef1.bytes = leafBlockStartValues.get(index);\n          return scratchBytesRef1;\n        }\n\n        @Override\n        public int getSplitDimension(int index) {\n          return 0;\n        }\n\n        @Override\n        public int numLeaves() {\n          return leafBlockFPs.size();\n        }\n      };\n      writeIndex(out, maxPointsInLeafNode, leafNodes);\n      return indexFP;\n    }\n\n","sourceOld":"    public long finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock(leafCardinality);\n        leafCardinality = 0;\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return -1;\n      }\n\n      pointCount = valueCount;\n\n      long indexFP = out.getFilePointer();\n\n      int numInnerNodes = leafBlockStartValues.size();\n\n      //System.out.println(\"BKDW: now rotate numInnerNodes=\" + numInnerNodes + \" leafBlockStarts=\" + leafBlockStartValues.size());\n\n      byte[] index = new byte[(1+numInnerNodes) * (1+bytesPerDim)];\n      rotateToTree(1, 0, numInnerNodes, index, leafBlockStartValues);\n      long[] arr = new long[leafBlockFPs.size()];\n      for(int i=0;i<leafBlockFPs.size();i++) {\n        arr[i] = leafBlockFPs.get(i);\n      }\n      writeIndex(out, maxPointsInLeafNode, arr, index);\n      return indexFP;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78e689a3b60e84c75dc6dd7b181a71fc19ef8482","date":1591689554,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#finish().mjava","sourceNew":"    public Runnable finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock(leafCardinality);\n        leafCardinality = 0;\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return null;\n      }\n\n      pointCount = valueCount;\n\n      scratchBytesRef1.length = bytesPerDim;\n      scratchBytesRef1.offset = 0;\n      assert leafBlockStartValues.size() + 1 == leafBlockFPs.size();\n      BKDTreeLeafNodes leafNodes = new BKDTreeLeafNodes() {\n        @Override\n        public long getLeafLP(int index) {\n          return leafBlockFPs.get(index);\n        }\n\n        @Override\n        public BytesRef getSplitValue(int index) {\n          scratchBytesRef1.bytes = leafBlockStartValues.get(index);\n          return scratchBytesRef1;\n        }\n\n        @Override\n        public int getSplitDimension(int index) {\n          return 0;\n        }\n\n        @Override\n        public int numLeaves() {\n          return leafBlockFPs.size();\n        }\n      };\n      return () -> {\n        try {\n          writeIndex(metaOut, indexOut, maxPointsInLeafNode, leafNodes, dataStartFP);\n        } catch (IOException e) {\n          throw new UncheckedIOException(e);\n        }\n      };\n    }\n\n","sourceOld":"    public long finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock(leafCardinality);\n        leafCardinality = 0;\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return -1;\n      }\n\n      pointCount = valueCount;\n\n      long indexFP = out.getFilePointer();\n\n      scratchBytesRef1.length = bytesPerDim;\n      scratchBytesRef1.offset = 0;\n      assert leafBlockStartValues.size() + 1 == leafBlockFPs.size();\n      BKDTreeLeafNodes leafNodes = new BKDTreeLeafNodes() {\n        @Override\n        public long getLeafLP(int index) {\n          return leafBlockFPs.get(index);\n        }\n\n        @Override\n        public BytesRef getSplitValue(int index) {\n          scratchBytesRef1.bytes = leafBlockStartValues.get(index);\n          return scratchBytesRef1;\n        }\n\n        @Override\n        public int getSplitDimension(int index) {\n          return 0;\n        }\n\n        @Override\n        public int numLeaves() {\n          return leafBlockFPs.size();\n        }\n      };\n      writeIndex(out, maxPointsInLeafNode, leafNodes);\n      return indexFP;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#finish().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter.OneDimensionBKDWriter#finish().mjava","sourceNew":"    public Runnable finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock(leafCardinality);\n        leafCardinality = 0;\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return null;\n      }\n\n      pointCount = valueCount;\n\n      scratchBytesRef1.length = config.bytesPerDim;\n      scratchBytesRef1.offset = 0;\n      assert leafBlockStartValues.size() + 1 == leafBlockFPs.size();\n      BKDTreeLeafNodes leafNodes = new BKDTreeLeafNodes() {\n        @Override\n        public long getLeafLP(int index) {\n          return leafBlockFPs.get(index);\n        }\n\n        @Override\n        public BytesRef getSplitValue(int index) {\n          scratchBytesRef1.bytes = leafBlockStartValues.get(index);\n          return scratchBytesRef1;\n        }\n\n        @Override\n        public int getSplitDimension(int index) {\n          return 0;\n        }\n\n        @Override\n        public int numLeaves() {\n          return leafBlockFPs.size();\n        }\n      };\n      return () -> {\n        try {\n          writeIndex(metaOut, indexOut, config.maxPointsInLeafNode, leafNodes, dataStartFP);\n        } catch (IOException e) {\n          throw new UncheckedIOException(e);\n        }\n      };\n    }\n\n","sourceOld":"    public Runnable finish() throws IOException {\n      if (leafCount > 0) {\n        writeLeafBlock(leafCardinality);\n        leafCardinality = 0;\n        leafCount = 0;\n      }\n\n      if (valueCount == 0) {\n        return null;\n      }\n\n      pointCount = valueCount;\n\n      scratchBytesRef1.length = bytesPerDim;\n      scratchBytesRef1.offset = 0;\n      assert leafBlockStartValues.size() + 1 == leafBlockFPs.size();\n      BKDTreeLeafNodes leafNodes = new BKDTreeLeafNodes() {\n        @Override\n        public long getLeafLP(int index) {\n          return leafBlockFPs.get(index);\n        }\n\n        @Override\n        public BytesRef getSplitValue(int index) {\n          scratchBytesRef1.bytes = leafBlockStartValues.get(index);\n          return scratchBytesRef1;\n        }\n\n        @Override\n        public int getSplitDimension(int index) {\n          return 0;\n        }\n\n        @Override\n        public int numLeaves() {\n          return leafBlockFPs.size();\n        }\n      };\n      return () -> {\n        try {\n          writeIndex(metaOut, indexOut, maxPointsInLeafNode, leafNodes, dataStartFP);\n        } catch (IOException e) {\n          throw new UncheckedIOException(e);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"125e5eeb7e933deec0cc0510c2368fe1ec7c36ce":["e70dbc563c35c0f6b6a0a545e65346166e6e5f2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b":["15fe6782474c00ec2ccc636052a025f8fe0bdb8b"],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["125e5eeb7e933deec0cc0510c2368fe1ec7c36ce"],"15fe6782474c00ec2ccc636052a025f8fe0bdb8b":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"302d34f2c66e8d489ee13078305c330cbf67b226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","15fe6782474c00ec2ccc636052a025f8fe0bdb8b"]},"commit2Childs":{"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"125e5eeb7e933deec0cc0510c2368fe1ec7c36ce":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"e70dbc563c35c0f6b6a0a545e65346166e6e5f2b":["125e5eeb7e933deec0cc0510c2368fe1ec7c36ce"],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"15fe6782474c00ec2ccc636052a025f8fe0bdb8b":["e70dbc563c35c0f6b6a0a545e65346166e6e5f2b","302d34f2c66e8d489ee13078305c330cbf67b226"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["15fe6782474c00ec2ccc636052a025f8fe0bdb8b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["302d34f2c66e8d489ee13078305c330cbf67b226"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}