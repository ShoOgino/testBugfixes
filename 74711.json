{"path":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#randomIndexedShape().mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#randomIndexedShape().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#randomIndexedShape().mjava","sourceNew":"  @Override\n  protected Shape randomIndexedShape() {\n    Rectangle world = ctx.getWorldBounds();\n    if (random().nextInt(10) == 0) // increased chance of getting one of these\n      return world;\n\n    int worldWidth = (int) Math.round(world.getWidth());\n    int deltaLeft = nextIntInclusive(worldWidth);\n    int deltaRight = nextIntInclusive(worldWidth - deltaLeft);\n    int worldHeight = (int) Math.round(world.getHeight());\n    int deltaTop = nextIntInclusive(worldHeight);\n    int deltaBottom = nextIntInclusive(worldHeight - deltaTop);\n    if (ctx.isGeo() && (deltaLeft != 0 || deltaRight != 0)) {\n      //if geo & doesn't world-wrap, we shift randomly to potentially cross dateline\n      int shift = nextIntInclusive(360);\n      return ctx.makeRectangle(\n          DistanceUtils.normLonDEG(world.getMinX() + deltaLeft + shift),\n          DistanceUtils.normLonDEG(world.getMaxX() - deltaRight + shift),\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    } else {\n      return ctx.makeRectangle(\n          world.getMinX() + deltaLeft, world.getMaxX() - deltaRight,\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomIndexedShape() {\n    Rectangle world = ctx.getWorldBounds();\n    if (random().nextInt(10) == 0) // increased chance of getting one of these\n      return world;\n\n    int worldWidth = (int) Math.round(world.getWidth());\n    int deltaLeft = nextIntInclusive(worldWidth);\n    int deltaRight = nextIntInclusive(worldWidth - deltaLeft);\n    int worldHeight = (int) Math.round(world.getHeight());\n    int deltaTop = nextIntInclusive(worldHeight);\n    int deltaBottom = nextIntInclusive(worldHeight - deltaTop);\n    if (ctx.isGeo() && (deltaLeft != 0 || deltaRight != 0)) {\n      //if geo & doesn't world-wrap, we shift randomly to potentially cross dateline\n      int shift = nextIntInclusive(360);\n      return ctx.makeRectangle(\n          DistanceUtils.normLonDEG(world.getMinX() + deltaLeft + shift),\n          DistanceUtils.normLonDEG(world.getMaxX() - deltaRight + shift),\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    } else {\n      return ctx.makeRectangle(\n          world.getMinX() + deltaLeft, world.getMaxX() - deltaRight,\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#randomIndexedShape().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#randomIndexedShape().mjava","sourceNew":"  @Override\n  protected Shape randomIndexedShape() {\n    Rectangle world = ctx.getWorldBounds();\n    if (random().nextInt(10) == 0) // increased chance of getting one of these\n      return world;\n\n    int worldWidth = (int) Math.round(world.getWidth());\n    int deltaLeft = nextIntInclusive(worldWidth);\n    int deltaRight = nextIntInclusive(worldWidth - deltaLeft);\n    int worldHeight = (int) Math.round(world.getHeight());\n    int deltaTop = nextIntInclusive(worldHeight);\n    int deltaBottom = nextIntInclusive(worldHeight - deltaTop);\n    if (ctx.isGeo() && (deltaLeft != 0 || deltaRight != 0)) {\n      //if geo & doesn't world-wrap, we shift randomly to potentially cross dateline\n      int shift = nextIntInclusive(360);\n      return ctx.makeRectangle(\n          DistanceUtils.normLonDEG(world.getMinX() + deltaLeft + shift),\n          DistanceUtils.normLonDEG(world.getMaxX() - deltaRight + shift),\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    } else {\n      return ctx.makeRectangle(\n          world.getMinX() + deltaLeft, world.getMaxX() - deltaRight,\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomIndexedShape() {\n    Rectangle world = ctx.getWorldBounds();\n    if (random().nextInt(10) == 0) // increased chance of getting one of these\n      return world;\n\n    int worldWidth = (int) Math.round(world.getWidth());\n    int deltaLeft = nextIntInclusive(worldWidth);\n    int deltaRight = nextIntInclusive(worldWidth - deltaLeft);\n    int worldHeight = (int) Math.round(world.getHeight());\n    int deltaTop = nextIntInclusive(worldHeight);\n    int deltaBottom = nextIntInclusive(worldHeight - deltaTop);\n    if (ctx.isGeo() && (deltaLeft != 0 || deltaRight != 0)) {\n      //if geo & doesn't world-wrap, we shift randomly to potentially cross dateline\n      int shift = nextIntInclusive(360);\n      return ctx.makeRectangle(\n          DistanceUtils.normLonDEG(world.getMinX() + deltaLeft + shift),\n          DistanceUtils.normLonDEG(world.getMaxX() - deltaRight + shift),\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    } else {\n      return ctx.makeRectangle(\n          world.getMinX() + deltaLeft, world.getMaxX() - deltaRight,\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#randomIndexedShape().mjava","pathOld":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/bbox/TestBBoxStrategy#randomIndexedShape().mjava","sourceNew":"  @Override\n  protected Shape randomIndexedShape() {\n    Rectangle world = ctx.getWorldBounds();\n    if (random().nextInt(10) == 0) // increased chance of getting one of these\n      return world;\n\n    int worldWidth = (int) Math.round(world.getWidth());\n    int deltaLeft = nextIntInclusive(worldWidth);\n    int deltaRight = nextIntInclusive(worldWidth - deltaLeft);\n    int worldHeight = (int) Math.round(world.getHeight());\n    int deltaTop = nextIntInclusive(worldHeight);\n    int deltaBottom = nextIntInclusive(worldHeight - deltaTop);\n    if (ctx.isGeo() && (deltaLeft != 0 || deltaRight != 0)) {\n      //if geo & doesn't world-wrap, we shift randomly to potentially cross dateline\n      int shift = nextIntInclusive(360);\n      return ctx.getShapeFactory().rect(\n          DistanceUtils.normLonDEG(world.getMinX() + deltaLeft + shift),\n          DistanceUtils.normLonDEG(world.getMaxX() - deltaRight + shift),\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    } else {\n      return ctx.getShapeFactory().rect(\n          world.getMinX() + deltaLeft, world.getMaxX() - deltaRight,\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Shape randomIndexedShape() {\n    Rectangle world = ctx.getWorldBounds();\n    if (random().nextInt(10) == 0) // increased chance of getting one of these\n      return world;\n\n    int worldWidth = (int) Math.round(world.getWidth());\n    int deltaLeft = nextIntInclusive(worldWidth);\n    int deltaRight = nextIntInclusive(worldWidth - deltaLeft);\n    int worldHeight = (int) Math.round(world.getHeight());\n    int deltaTop = nextIntInclusive(worldHeight);\n    int deltaBottom = nextIntInclusive(worldHeight - deltaTop);\n    if (ctx.isGeo() && (deltaLeft != 0 || deltaRight != 0)) {\n      //if geo & doesn't world-wrap, we shift randomly to potentially cross dateline\n      int shift = nextIntInclusive(360);\n      return ctx.makeRectangle(\n          DistanceUtils.normLonDEG(world.getMinX() + deltaLeft + shift),\n          DistanceUtils.normLonDEG(world.getMaxX() - deltaRight + shift),\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    } else {\n      return ctx.makeRectangle(\n          world.getMinX() + deltaLeft, world.getMaxX() - deltaRight,\n          world.getMinY() + deltaBottom, world.getMaxY() - deltaTop);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}