{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJetty(File,String,String,String,String,Replica.Type).mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJetty(File,String,String,String,String,Replica.Type).mjava","pathOld":"/dev/null","sourceNew":"  public JettySolrRunner createJetty(File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType) throws Exception {\n    // randomly test a relative solr.home path\n    if (random().nextBoolean()) {\n      solrHome = getRelativeSolrHomePath(solrHome);\n    }\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n    jetty.start();\n\n    return jetty;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJetty(File,String,String,String,String,Replica.Type).mjava","pathOld":"/dev/null","sourceNew":"  public JettySolrRunner createJetty(File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType) throws Exception {\n    // randomly test a relative solr.home path\n    if (random().nextBoolean()) {\n      solrHome = getRelativeSolrHomePath(solrHome);\n    }\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n    jetty.start();\n\n    return jetty;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJetty(File,String,String,String,String,Replica.Type).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJetty(File,String,String,String,String,Replica.Type).mjava","sourceNew":"  public JettySolrRunner createJetty(File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType) throws Exception {\n    // randomly test a relative solr.home path\n    if (random().nextBoolean()) {\n      solrHome = getRelativeSolrHomePath(solrHome);\n    }\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    return jetty;\n  }\n\n","sourceOld":"  public JettySolrRunner createJetty(File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType) throws Exception {\n    // randomly test a relative solr.home path\n    if (random().nextBoolean()) {\n      solrHome = getRelativeSolrHomePath(solrHome);\n    }\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n    jetty.start();\n\n    return jetty;\n  }\n\n","bugFix":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJetty(File,String,String,String,String,Replica.Type).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJetty(File,String,String,String,String,Replica.Type).mjava","sourceNew":"  public JettySolrRunner createJetty(File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType) throws Exception {\n    // randomly test a relative solr.home path\n    if (random().nextBoolean()) {\n      solrHome = getRelativeSolrHomePath(solrHome);\n    }\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig.buildServerSSLConfig())\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    return jetty;\n  }\n\n","sourceOld":"  public JettySolrRunner createJetty(File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType) throws Exception {\n    // randomly test a relative solr.home path\n    if (random().nextBoolean()) {\n      solrHome = getRelativeSolrHomePath(solrHome);\n    }\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig)\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfc068060fd93e9c7417d1271ca797dc90496f67","date":1592771305,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJetty(File,String,String,String,String,Replica.Type).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJetty(File,String,String,String,String,Replica.Type).mjava","sourceNew":"  public JettySolrRunner createJetty(File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType) throws Exception {\n    // randomly test a relative solr.home path\n    if (random().nextBoolean()) {\n      solrHome = getRelativeSolrHomePath(solrHome);\n    }\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig.buildServerSSLConfig())\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toString());\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    return jetty;\n  }\n\n","sourceOld":"  public JettySolrRunner createJetty(File solrHome, String dataDir, String shardList, String solrConfigOverride, String schemaOverride, Replica.Type replicaType) throws Exception {\n    // randomly test a relative solr.home path\n    if (random().nextBoolean()) {\n      solrHome = getRelativeSolrHomePath(solrHome);\n    }\n\n    JettyConfig jettyconfig = JettyConfig.builder()\n        .setContext(context)\n        .stopAtShutdown(false)\n        .withServlets(getExtraServlets())\n        .withFilters(getExtraRequestFilters())\n        .withSSLConfig(sslConfig.buildServerSSLConfig())\n        .build();\n\n    Properties props = new Properties();\n    if (solrConfigOverride != null)\n      props.setProperty(\"solrconfig\", solrConfigOverride);\n    if (schemaOverride != null)\n      props.setProperty(\"schema\", schemaOverride);\n    if (shardList != null)\n      props.setProperty(\"shards\", shardList);\n    if (dataDir != null)\n      props.setProperty(\"solr.data.dir\", getDataDir(dataDir));\n    if (replicaType != null) {\n      props.setProperty(\"replicaType\", replicaType.toString());\n    } else if (random().nextBoolean()) {\n      props.setProperty(\"replicaType\", Replica.Type.NRT.toString());\n    }\n    props.setProperty(\"coreRootDirectory\", solrHome.toPath().resolve(\"cores\").toAbsolutePath().toString());\n    \n    JettySolrRunner jetty = new JettySolrRunner(solrHome.getPath(), props, jettyconfig);\n\n    return jetty;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["61c45e99cf6676da48f19d7511c73712ad39402b"],"dfc068060fd93e9c7417d1271ca797dc90496f67":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dfc068060fd93e9c7417d1271ca797dc90496f67"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["dfc068060fd93e9c7417d1271ca797dc90496f67"],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"dfc068060fd93e9c7417d1271ca797dc90496f67":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}