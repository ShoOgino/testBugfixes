{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#advance(int).mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      if (target > nextSkipDoc) {\n        advanceShallow(target);\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        if (seekTo >= 0) {\n          docIn.seek(seekTo);\n          seekTo = -1;\n        }\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      position = 0;\n      lastStartOffset = 0;\n\n      return doc = accum;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9089237f2fb93105f12a1135e60257f4cf8ed41","date":1562086738,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      if (target > nextSkipDoc) {\n        advanceShallow(target);\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        if (seekTo >= 0) {\n          docIn.seek(seekTo);\n          seekTo = -1;\n          isFreqsRead = true; // reset isFreqsRead\n        }\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      position = 0;\n      lastStartOffset = 0;\n\n      return doc = accum;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      if (target > nextSkipDoc) {\n        advanceShallow(target);\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        if (seekTo >= 0) {\n          docIn.seek(seekTo);\n          seekTo = -1;\n        }\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        freq = freqBuffer[docBufferUpto];\n        posPendingCount += freq;\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      position = 0;\n      lastStartOffset = 0;\n\n      return doc = accum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsReader.BlockImpactsEverythingEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      if (target > nextSkipDoc) {\n        advanceShallow(target);\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        if (seekTo >= 0) {\n          docIn.seek(seekTo);\n          seekTo = -1;\n          isFreqsRead = true; // reset isFreqsRead\n        }\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      position = 0;\n      lastStartOffset = 0;\n\n      return doc = accum;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      if (target > nextSkipDoc) {\n        advanceShallow(target);\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        if (seekTo >= 0) {\n          docIn.seek(seekTo);\n          seekTo = -1;\n          isFreqsRead = true; // reset isFreqsRead\n        }\n        refillDocs();\n      }\n\n      // Now scan:\n      while (true) {\n        accum += docDeltaBuffer[docBufferUpto];\n        docBufferUpto++;\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      position = 0;\n      lastStartOffset = 0;\n\n      return doc = accum;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a9089237f2fb93105f12a1135e60257f4cf8ed41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9089237f2fb93105f12a1135e60257f4cf8ed41":["622a708571e534680618b3c5e0c28ac539a47776"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["a9089237f2fb93105f12a1135e60257f4cf8ed41"],"a9089237f2fb93105f12a1135e60257f4cf8ed41":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}