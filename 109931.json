{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer#readBinary(ChecksumIndexInput).mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer#readBinary(ChecksumIndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryEntry readBinary(ChecksumIndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.dataOffset = meta.readLong();\n    entry.dataLength = meta.readLong();\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.jumpTableEntryCount = meta.readShort();\n    entry.denseRankPower = meta.readByte();\n    entry.numDocsWithField = meta.readInt();\n    entry.minLength = meta.readInt();\n    entry.maxLength = meta.readInt();\n    if (entry.minLength < entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      final int blockShift = meta.readVInt();\n      entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithField + 1L, blockShift);\n      ramBytesUsed += entry.addressesMeta.ramBytesUsed();\n      entry.addressesLength = meta.readLong();\n    }\n    return entry;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer#readBinary(ChecksumIndexInput).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryEntry readBinary(ChecksumIndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.dataOffset = meta.readLong();\n    entry.dataLength = meta.readLong();\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.jumpTableEntryCount = meta.readShort();\n    entry.denseRankPower = meta.readByte();\n    entry.numDocsWithField = meta.readInt();\n    entry.minLength = meta.readInt();\n    entry.maxLength = meta.readInt();\n    if (entry.minLength < entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      final int blockShift = meta.readVInt();\n      entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithField + 1L, blockShift);\n      ramBytesUsed += entry.addressesMeta.ramBytesUsed();\n      entry.addressesLength = meta.readLong();\n    }\n    return entry;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fcfc028fca127dc2779630e53a9c2ec208ee7a0","date":1582034562,"type":3,"author":"markharwood","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer#readBinary(ChecksumIndexInput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene80/Lucene80DocValuesProducer#readBinary(ChecksumIndexInput).mjava","sourceNew":"  private BinaryEntry readBinary(ChecksumIndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.dataOffset = meta.readLong();\n    entry.dataLength = meta.readLong();\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.jumpTableEntryCount = meta.readShort();\n    entry.denseRankPower = meta.readByte();\n    entry.numDocsWithField = meta.readInt();\n    entry.minLength = meta.readInt();\n    entry.maxLength = meta.readInt();\n    if ((version >= Lucene80DocValuesFormat.VERSION_BIN_COMPRESSED && entry.numDocsWithField > 0) ||  entry.minLength < entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n\n      // Old count of uncompressed addresses \n      long numAddresses = entry.numDocsWithField + 1L;\n      // New count of compressed addresses - the number of compresseed blocks\n      if (version >= Lucene80DocValuesFormat.VERSION_BIN_COMPRESSED) {\n        entry.numCompressedChunks = meta.readVInt();\n        entry.docsPerChunkShift = meta.readVInt();\n        entry.maxUncompressedChunkSize = meta.readVInt();\n        numAddresses = entry.numCompressedChunks;\n      }      \n      \n      final int blockShift = meta.readVInt();\n      entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, numAddresses, blockShift);\n      ramBytesUsed += entry.addressesMeta.ramBytesUsed();\n      entry.addressesLength = meta.readLong();\n    }\n    return entry;\n  }\n\n","sourceOld":"  private BinaryEntry readBinary(ChecksumIndexInput meta) throws IOException {\n    BinaryEntry entry = new BinaryEntry();\n    entry.dataOffset = meta.readLong();\n    entry.dataLength = meta.readLong();\n    entry.docsWithFieldOffset = meta.readLong();\n    entry.docsWithFieldLength = meta.readLong();\n    entry.jumpTableEntryCount = meta.readShort();\n    entry.denseRankPower = meta.readByte();\n    entry.numDocsWithField = meta.readInt();\n    entry.minLength = meta.readInt();\n    entry.maxLength = meta.readInt();\n    if (entry.minLength < entry.maxLength) {\n      entry.addressesOffset = meta.readLong();\n      final int blockShift = meta.readVInt();\n      entry.addressesMeta = DirectMonotonicReader.loadMeta(meta, entry.numDocsWithField + 1L, blockShift);\n      ramBytesUsed += entry.addressesMeta.ramBytesUsed();\n      entry.addressesLength = meta.readLong();\n    }\n    return entry;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fcfc028fca127dc2779630e53a9c2ec208ee7a0":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5fcfc028fca127dc2779630e53a9c2ec208ee7a0"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","5fcfc028fca127dc2779630e53a9c2ec208ee7a0"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"5fcfc028fca127dc2779630e53a9c2ec208ee7a0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}