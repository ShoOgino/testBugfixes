{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilter#CapitalizationFilter(TokenStream,boolean,CharArraySet,boolean,Collection[char[]],int,int,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilter#CapitalizationFilter(TokenStream,boolean,CharArraySet,boolean,Collection[char[]],int,int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilter#CapitalizationFilter(TokenStream,boolean,CharArraySet,boolean,Collection[char[]],int,int,int).mjava","sourceNew":"  /**\n   * Creates a CapitalizationFilter with the specified parameters.\n   * @param in input tokenstream \n   * @param onlyFirstWord should each word be capitalized or all of the words?\n   * @param keep a keep word list.  Each word that should be kept separated by whitespace.\n   * @param forceFirstLetter Force the first letter to be capitalized even if it is in the keep list.\n   * @param okPrefix do not change word capitalization if a word begins with something in this list.\n   * @param minWordLength how long the word needs to be to get capitalization applied.  If the\n   *                      minWordLength is 3, \"and\" > \"And\" but \"or\" stays \"or\".\n   * @param maxWordCount if the token contains more then maxWordCount words, the capitalization is\n   *                     assumed to be correct.\n   * @param maxTokenLength ???\n   */\n  public CapitalizationFilter(TokenStream in, boolean onlyFirstWord, CharArraySet keep, \n      boolean forceFirstLetter, Collection<char[]> okPrefix, int minWordLength, \n      int maxWordCount, int maxTokenLength) {\n    super(in);\n    this.onlyFirstWord = onlyFirstWord;\n    this.keep = keep;\n    this.forceFirstLetter = forceFirstLetter;\n    this.okPrefix = okPrefix;\n    this.minWordLength = minWordLength;\n    this.maxWordCount = maxWordCount;\n    this.maxTokenLength = maxTokenLength;\n  }\n\n","sourceOld":"  /**\n   * Creates a CapitalizationFilter with the specified parameters.\n   * @param in input tokenstream \n   * @param onlyFirstWord should each word be capitalized or all of the words?\n   * @param keep a keep word list.  Each word that should be kept separated by whitespace.\n   * @param forceFirstLetter Force the first letter to be capitalized even if it is in the keep list.\n   * @param okPrefix do not change word capitalization if a word begins with something in this list.\n   * @param minWordLength how long the word needs to be to get capitalization applied.  If the\n   *                      minWordLength is 3, \"and\" > \"And\" but \"or\" stays \"or\".\n   * @param maxWordCount if the token contains more then maxWordCount words, the capitalization is\n   *                     assumed to be correct.\n   * @param maxTokenLength ???\n   */\n  public CapitalizationFilter(TokenStream in, boolean onlyFirstWord, CharArraySet keep, \n      boolean forceFirstLetter, Collection<char[]> okPrefix, int minWordLength, \n      int maxWordCount, int maxTokenLength) {\n    super(in);\n    this.onlyFirstWord = onlyFirstWord;\n    this.keep = keep;\n    this.forceFirstLetter = forceFirstLetter;\n    this.okPrefix = okPrefix;\n    this.minWordLength = minWordLength;\n    this.maxWordCount = maxWordCount;\n    this.maxTokenLength = maxTokenLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d47c249ea6af39c2da32cebcf113b7ac5c12bad8","date":1398390859,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilter#CapitalizationFilter(TokenStream,boolean,CharArraySet,boolean,Collection[char[]],int,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilter#CapitalizationFilter(TokenStream,boolean,CharArraySet,boolean,Collection[char[]],int,int,int).mjava","sourceNew":"  /**\n   * Creates a CapitalizationFilter with the specified parameters.\n   * @param in input tokenstream \n   * @param onlyFirstWord should each word be capitalized or all of the words?\n   * @param keep a keep word list.  Each word that should be kept separated by whitespace.\n   * @param forceFirstLetter Force the first letter to be capitalized even if it is in the keep list.\n   * @param okPrefix do not change word capitalization if a word begins with something in this list.\n   * @param minWordLength how long the word needs to be to get capitalization applied.  If the\n   *                      minWordLength is 3, \"and\" > \"And\" but \"or\" stays \"or\".\n   * @param maxWordCount if the token contains more then maxWordCount words, the capitalization is\n   *                     assumed to be correct.\n   * @param maxTokenLength ???\n   */\n  public CapitalizationFilter(TokenStream in, boolean onlyFirstWord, CharArraySet keep, \n      boolean forceFirstLetter, Collection<char[]> okPrefix, int minWordLength, \n      int maxWordCount, int maxTokenLength) {\n    super(in);\n    this.onlyFirstWord = onlyFirstWord;\n    this.keep = keep;\n    this.forceFirstLetter = forceFirstLetter;\n    this.okPrefix = okPrefix;\n    if (minWordLength < 0) {\n      throw new IllegalArgumentException(\"minWordLength must be greater than or equal to zero\");\n    }\n    if (maxWordCount < 1) {\n      throw new IllegalArgumentException(\"maxWordCount must be greater than zero\");\n    }\n    if (maxTokenLength < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    }\n    this.minWordLength = minWordLength;\n    this.maxWordCount = maxWordCount;\n    this.maxTokenLength = maxTokenLength;\n  }\n\n","sourceOld":"  /**\n   * Creates a CapitalizationFilter with the specified parameters.\n   * @param in input tokenstream \n   * @param onlyFirstWord should each word be capitalized or all of the words?\n   * @param keep a keep word list.  Each word that should be kept separated by whitespace.\n   * @param forceFirstLetter Force the first letter to be capitalized even if it is in the keep list.\n   * @param okPrefix do not change word capitalization if a word begins with something in this list.\n   * @param minWordLength how long the word needs to be to get capitalization applied.  If the\n   *                      minWordLength is 3, \"and\" > \"And\" but \"or\" stays \"or\".\n   * @param maxWordCount if the token contains more then maxWordCount words, the capitalization is\n   *                     assumed to be correct.\n   * @param maxTokenLength ???\n   */\n  public CapitalizationFilter(TokenStream in, boolean onlyFirstWord, CharArraySet keep, \n      boolean forceFirstLetter, Collection<char[]> okPrefix, int minWordLength, \n      int maxWordCount, int maxTokenLength) {\n    super(in);\n    this.onlyFirstWord = onlyFirstWord;\n    this.keep = keep;\n    this.forceFirstLetter = forceFirstLetter;\n    this.okPrefix = okPrefix;\n    this.minWordLength = minWordLength;\n    this.maxWordCount = maxWordCount;\n    this.maxTokenLength = maxTokenLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilter#CapitalizationFilter(TokenStream,boolean,CharArraySet,boolean,Collection[char[]],int,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilter#CapitalizationFilter(TokenStream,boolean,CharArraySet,boolean,Collection[char[]],int,int,int).mjava","sourceNew":"  /**\n   * Creates a CapitalizationFilter with the specified parameters.\n   * @param in input tokenstream \n   * @param onlyFirstWord should each word be capitalized or all of the words?\n   * @param keep a keep word list.  Each word that should be kept separated by whitespace.\n   * @param forceFirstLetter Force the first letter to be capitalized even if it is in the keep list.\n   * @param okPrefix do not change word capitalization if a word begins with something in this list.\n   * @param minWordLength how long the word needs to be to get capitalization applied.  If the\n   *                      minWordLength is 3, \"and\" > \"And\" but \"or\" stays \"or\".\n   * @param maxWordCount if the token contains more then maxWordCount words, the capitalization is\n   *                     assumed to be correct.\n   * @param maxTokenLength ???\n   */\n  public CapitalizationFilter(TokenStream in, boolean onlyFirstWord, CharArraySet keep, \n      boolean forceFirstLetter, Collection<char[]> okPrefix, int minWordLength, \n      int maxWordCount, int maxTokenLength) {\n    super(in);\n    this.onlyFirstWord = onlyFirstWord;\n    this.keep = keep;\n    this.forceFirstLetter = forceFirstLetter;\n    this.okPrefix = okPrefix;\n    if (minWordLength < 0) {\n      throw new IllegalArgumentException(\"minWordLength must be greater than or equal to zero\");\n    }\n    if (maxWordCount < 1) {\n      throw new IllegalArgumentException(\"maxWordCount must be greater than zero\");\n    }\n    if (maxTokenLength < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    }\n    this.minWordLength = minWordLength;\n    this.maxWordCount = maxWordCount;\n    this.maxTokenLength = maxTokenLength;\n  }\n\n","sourceOld":"  /**\n   * Creates a CapitalizationFilter with the specified parameters.\n   * @param in input tokenstream \n   * @param onlyFirstWord should each word be capitalized or all of the words?\n   * @param keep a keep word list.  Each word that should be kept separated by whitespace.\n   * @param forceFirstLetter Force the first letter to be capitalized even if it is in the keep list.\n   * @param okPrefix do not change word capitalization if a word begins with something in this list.\n   * @param minWordLength how long the word needs to be to get capitalization applied.  If the\n   *                      minWordLength is 3, \"and\" > \"And\" but \"or\" stays \"or\".\n   * @param maxWordCount if the token contains more then maxWordCount words, the capitalization is\n   *                     assumed to be correct.\n   * @param maxTokenLength ???\n   */\n  public CapitalizationFilter(TokenStream in, boolean onlyFirstWord, CharArraySet keep, \n      boolean forceFirstLetter, Collection<char[]> okPrefix, int minWordLength, \n      int maxWordCount, int maxTokenLength) {\n    super(in);\n    this.onlyFirstWord = onlyFirstWord;\n    this.keep = keep;\n    this.forceFirstLetter = forceFirstLetter;\n    this.okPrefix = okPrefix;\n    this.minWordLength = minWordLength;\n    this.maxWordCount = maxWordCount;\n    this.maxTokenLength = maxTokenLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilter#CapitalizationFilter(TokenStream,boolean,CharArraySet,boolean,Collection[char[]],int,int,int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilter#CapitalizationFilter(TokenStream,boolean,CharArraySet,boolean,Collection[char[]],int,int,int).mjava","sourceNew":"  /**\n   * Creates a CapitalizationFilter with the specified parameters.\n   * @param in input tokenstream \n   * @param onlyFirstWord should each word be capitalized or all of the words?\n   * @param keep a keep word list.  Each word that should be kept separated by whitespace.\n   * @param forceFirstLetter Force the first letter to be capitalized even if it is in the keep list.\n   * @param okPrefix do not change word capitalization if a word begins with something in this list.\n   * @param minWordLength how long the word needs to be to get capitalization applied.  If the\n   *                      minWordLength is 3, \"and\" &gt; \"And\" but \"or\" stays \"or\".\n   * @param maxWordCount if the token contains more then maxWordCount words, the capitalization is\n   *                     assumed to be correct.\n   * @param maxTokenLength ???\n   */\n  public CapitalizationFilter(TokenStream in, boolean onlyFirstWord, CharArraySet keep, \n      boolean forceFirstLetter, Collection<char[]> okPrefix, int minWordLength, \n      int maxWordCount, int maxTokenLength) {\n    super(in);\n    this.onlyFirstWord = onlyFirstWord;\n    this.keep = keep;\n    this.forceFirstLetter = forceFirstLetter;\n    this.okPrefix = okPrefix;\n    if (minWordLength < 0) {\n      throw new IllegalArgumentException(\"minWordLength must be greater than or equal to zero\");\n    }\n    if (maxWordCount < 1) {\n      throw new IllegalArgumentException(\"maxWordCount must be greater than zero\");\n    }\n    if (maxTokenLength < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    }\n    this.minWordLength = minWordLength;\n    this.maxWordCount = maxWordCount;\n    this.maxTokenLength = maxTokenLength;\n  }\n\n","sourceOld":"  /**\n   * Creates a CapitalizationFilter with the specified parameters.\n   * @param in input tokenstream \n   * @param onlyFirstWord should each word be capitalized or all of the words?\n   * @param keep a keep word list.  Each word that should be kept separated by whitespace.\n   * @param forceFirstLetter Force the first letter to be capitalized even if it is in the keep list.\n   * @param okPrefix do not change word capitalization if a word begins with something in this list.\n   * @param minWordLength how long the word needs to be to get capitalization applied.  If the\n   *                      minWordLength is 3, \"and\" > \"And\" but \"or\" stays \"or\".\n   * @param maxWordCount if the token contains more then maxWordCount words, the capitalization is\n   *                     assumed to be correct.\n   * @param maxTokenLength ???\n   */\n  public CapitalizationFilter(TokenStream in, boolean onlyFirstWord, CharArraySet keep, \n      boolean forceFirstLetter, Collection<char[]> okPrefix, int minWordLength, \n      int maxWordCount, int maxTokenLength) {\n    super(in);\n    this.onlyFirstWord = onlyFirstWord;\n    this.keep = keep;\n    this.forceFirstLetter = forceFirstLetter;\n    this.okPrefix = okPrefix;\n    if (minWordLength < 0) {\n      throw new IllegalArgumentException(\"minWordLength must be greater than or equal to zero\");\n    }\n    if (maxWordCount < 1) {\n      throw new IllegalArgumentException(\"maxWordCount must be greater than zero\");\n    }\n    if (maxTokenLength < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    }\n    this.minWordLength = minWordLength;\n    this.maxWordCount = maxWordCount;\n    this.maxTokenLength = maxTokenLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["d47c249ea6af39c2da32cebcf113b7ac5c12bad8"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d47c249ea6af39c2da32cebcf113b7ac5c12bad8"],"d47c249ea6af39c2da32cebcf113b7ac5c12bad8":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b1eb427f2c6beed80d1724555fc1db003ccf3030"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","d47c249ea6af39c2da32cebcf113b7ac5c12bad8"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"d47c249ea6af39c2da32cebcf113b7ac5c12bad8":["b1eb427f2c6beed80d1724555fc1db003ccf3030","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}