{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","commits":[{"id":"a05464f071eda06541fd9ed6f04aaca99b131dfa","date":1343110729,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","sourceNew":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = StrUtils.splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","sourceNew":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = StrUtils.splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6f80818731469e00f54165ec94aae2db868ea05","date":1343266866,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","sourceNew":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new IllegalArgumentException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new InitializationException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new IllegalArgumentException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new IllegalArgumentException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","sourceNew":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    final boolean expand = getBoolean(\"expand\", true);\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new IllegalArgumentException(\"Missing required argument 'synonyms'.\");\n    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85f3a2d749715373feb8529516e92d3538103525","date":1379624134,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSynonyms(ResourceLoader,String,boolean,Analyzer).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilterFactory#loadSolrSynonyms(ResourceLoader,boolean,Analyzer).mjava","sourceNew":"  /**\n   * Load synonyms with the given {@link SynonymMap.Parser} class.\n   */\n  private SynonymMap loadSynonyms(ResourceLoader loader, String cname, boolean dedup, Analyzer analyzer) throws IOException, ParseException {\n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n        .onMalformedInput(CodingErrorAction.REPORT)\n        .onUnmappableCharacter(CodingErrorAction.REPORT);\n\n    SynonymMap.Parser parser;\n    Class<? extends SynonymMap.Parser> clazz = loader.findClass(cname, SynonymMap.Parser.class);\n    try {\n      parser = clazz.getConstructor(boolean.class, boolean.class, Analyzer.class).newInstance(dedup, expand, analyzer);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.parse(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.parse(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","sourceOld":"  /**\n   * Load synonyms from the solr format, \"format=solr\".\n   */\n  private SynonymMap loadSolrSynonyms(ResourceLoader loader, boolean dedup, Analyzer analyzer) throws IOException, ParseException {    \n    CharsetDecoder decoder = Charset.forName(\"UTF-8\").newDecoder()\n      .onMalformedInput(CodingErrorAction.REPORT)\n      .onUnmappableCharacter(CodingErrorAction.REPORT);\n    \n    SolrSynonymParser parser = new SolrSynonymParser(dedup, expand, analyzer);\n    File synonymFile = new File(synonyms);\n    if (synonymFile.exists()) {\n      decoder.reset();\n      parser.add(new InputStreamReader(loader.openResource(synonyms), decoder));\n    } else {\n      List<String> files = splitFileNames(synonyms);\n      for (String file : files) {\n        decoder.reset();\n        parser.add(new InputStreamReader(loader.openResource(file), decoder));\n      }\n    }\n    return parser.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f6f80818731469e00f54165ec94aae2db868ea05"],"f6f80818731469e00f54165ec94aae2db868ea05":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"a05464f071eda06541fd9ed6f04aaca99b131dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["f6f80818731469e00f54165ec94aae2db868ea05"],"85f3a2d749715373feb8529516e92d3538103525":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a05464f071eda06541fd9ed6f04aaca99b131dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85f3a2d749715373feb8529516e92d3538103525"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a05464f071eda06541fd9ed6f04aaca99b131dfa","5a1a22b1ad88b436661458df567f3fdb446392a4"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"f6f80818731469e00f54165ec94aae2db868ea05":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"a05464f071eda06541fd9ed6f04aaca99b131dfa":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["85f3a2d749715373feb8529516e92d3538103525"],"85f3a2d749715373feb8529516e92d3538103525":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["f6f80818731469e00f54165ec94aae2db868ea05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}