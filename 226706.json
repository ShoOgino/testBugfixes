{"path":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/BinaryDictionaryWriter#writeTargetMap(Path).mjava","commits":[{"id":"05feb7eb5e91cb64742ce32b2ca3f02433530446","date":1561602840,"type":1,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/BinaryDictionaryWriter#writeTargetMap(Path).mjava","pathOld":"lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/BinaryDictionaryWriter#writeTargetMap(String).mjava","sourceNew":"  // TODO: maybe this int[] should instead be the output to the FST...\n  private void writeTargetMap(Path path) throws IOException {\n    Files.createDirectories(path.getParent());\n    try (OutputStream os = Files.newOutputStream(path);\n         OutputStream bos = new BufferedOutputStream(os)) {\n      final DataOutput out = new OutputStreamDataOutput(bos);\n      CodecUtil.writeHeader(out, BinaryDictionary.TARGETMAP_HEADER, BinaryDictionary.VERSION);\n      \n      final int numSourceIds = lastSourceId + 1;\n      out.writeVInt(targetMapEndOffset); // <-- size of main array\n      out.writeVInt(numSourceIds + 1); // <-- size of offset array (+ 1 more entry)\n      int prev = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMapEndOffset; ofs++) {\n        final int val = targetMap[ofs], delta = val - prev;\n        assert delta >= 0;\n        if (ofs == targetMapOffsets[sourceId]) {\n          out.writeVInt((delta << 1) | 0x01);\n          sourceId++;\n        } else {\n          out.writeVInt((delta << 1));\n        }\n        prev += delta;\n      }\n      if (sourceId != numSourceIds) {\n        throw new IllegalStateException(\"sourceId:\" + sourceId + \" != numSourceIds:\" + numSourceIds);\n      }\n    }\n  }\n\n","sourceOld":"  // TODO: maybe this int[] should instead be the output to the FST...\n  protected void writeTargetMap(String filename) throws IOException {\n    new File(filename).getParentFile().mkdirs();\n    OutputStream os = new FileOutputStream(filename);\n    try {\n      os = new BufferedOutputStream(os);\n      final DataOutput out = new OutputStreamDataOutput(os);\n      CodecUtil.writeHeader(out, BinaryDictionary.TARGETMAP_HEADER, BinaryDictionary.VERSION);\n      \n      final int numSourceIds = lastSourceId + 1;\n      out.writeVInt(targetMapEndOffset); // <-- size of main array\n      out.writeVInt(numSourceIds + 1); // <-- size of offset array (+ 1 more entry)\n      int prev = 0, sourceId = 0;\n      for (int ofs = 0; ofs < targetMapEndOffset; ofs++) {\n        final int val = targetMap[ofs], delta = val - prev;\n        assert delta >= 0;\n        if (ofs == targetMapOffsets[sourceId]) {\n          out.writeVInt((delta << 1) | 0x01);\n          sourceId++;\n        } else {\n          out.writeVInt((delta << 1));\n        }\n        prev += delta;\n      }\n      if (sourceId != numSourceIds) {\n        throw new IllegalStateException(\"sourceId:\" + sourceId + \" != numSourceIds:\" + numSourceIds);\n      }\n    } finally {\n      os.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05feb7eb5e91cb64742ce32b2ca3f02433530446":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05feb7eb5e91cb64742ce32b2ca3f02433530446"]},"commit2Childs":{"05feb7eb5e91cb64742ce32b2ca3f02433530446":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05feb7eb5e91cb64742ce32b2ca3f02433530446"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}