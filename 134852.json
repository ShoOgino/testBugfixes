{"path":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdateWithRouteField#testUpdatingDocValuesWithRouteField().mjava","commits":[{"id":"de77148275e541f915efc6e934c276a0a7ec45ea","date":1556190342,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdateWithRouteField#testUpdatingDocValuesWithRouteField().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpdatingDocValuesWithRouteField() throws Exception {\n\n     new UpdateRequest()\n      .deleteByQuery(\"*:*\").commit(cluster.getSolrClient(), COLLECTION);\n    \n     new UpdateRequest().add(createDocs(NUMBER_OF_DOCS)).commit(cluster.getSolrClient(), COLLECTION);\n\n    int id = TestUtil.nextInt(random(), 1, NUMBER_OF_DOCS - 1);\n    SolrDocument solrDocument = queryDoc(id);\n    Long initialVersion = (Long) solrDocument.get(\"_version_\");\n    Integer luceneDocId = (Integer) solrDocument.get(\"[docid]\");\n    String shardName = (String) solrDocument.get(\"shardName\");\n    Assert.assertThat(solrDocument.get(\"inplace_updatable_int\"), is(id));\n\n    int newDocValue = TestUtil.nextInt(random(), 1, 2 * NUMBER_OF_DOCS - 1);\n    SolrInputDocument sdoc = sdoc(\"id\", \"\"+id,\n        // use route field in update command\n        \"shardName\", shardName,\n        \"inplace_updatable_int\", map(\"set\", newDocValue));\n    \n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(sdoc);\n    updateRequest.commit(cluster.getSolrClient(), COLLECTION);\n    solrDocument = queryDoc(id);\n    Long newVersion = (Long) solrDocument.get(\"_version_\");\n    Assert.assertTrue(\"Version of updated document must be greater than original one\",\n        newVersion > initialVersion);\n    Assert.assertThat( \"Doc value must be updated\", solrDocument.get(\"inplace_updatable_int\"), is(newDocValue));\n    Assert.assertThat(\"Lucene doc id should not be changed for In-Place Updates.\", solrDocument.get(\"[docid]\"), is(luceneDocId));\n    \n    try {\n      sdoc.remove(\"shardName\");\n      new UpdateRequest()\n         .add(sdoc).process(cluster.getSolrClient(), COLLECTION);\n      fail(\"expect  an exception w/o route field\");\n    }catch(SolrException ex) {\n      assertThat(\"expecting 400 in \"+ex.getMessage(), ex.code(), is(400));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["689f9afcb5195815904e30fd753e3db8f5fcbf29"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"689f9afcb5195815904e30fd753e3db8f5fcbf29","date":1582804294,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdateWithRouteField#testUpdatingDocValuesWithRouteField().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/TestInPlaceUpdateWithRouteField#testUpdatingDocValuesWithRouteField().mjava","sourceNew":"  @Test\n  public void testUpdatingDocValuesWithRouteField() throws Exception {\n\n     new UpdateRequest()\n      .deleteByQuery(\"*:*\").commit(cluster.getSolrClient(), COLLECTION);\n    \n     new UpdateRequest().add(createDocs(NUMBER_OF_DOCS)).commit(cluster.getSolrClient(), COLLECTION);\n\n    int id = TestUtil.nextInt(random(), 1, NUMBER_OF_DOCS - 1);\n    SolrDocument solrDocument = queryDoc(id);\n    Long initialVersion = (Long) solrDocument.get(\"_version_\");\n    Integer luceneDocId = (Integer) solrDocument.get(\"[docid]\");\n    String shardName = (String) solrDocument.get(\"shardName\");\n    Assert.assertThat(solrDocument.get(\"inplace_updatable_int\"), is(id));\n\n    int newDocValue = TestUtil.nextInt(random(), 1, 2 * NUMBER_OF_DOCS - 1);\n    SolrInputDocument sdoc = sdoc(\"id\", \"\"+id,\n        // use route field in update command\n        \"shardName\", shardName,\n        \"inplace_updatable_int\", map(\"set\", newDocValue));\n    \n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(sdoc);\n    updateRequest.commit(cluster.getSolrClient(), COLLECTION);\n    solrDocument = queryDoc(id);\n    Long newVersion = (Long) solrDocument.get(\"_version_\");\n    Assert.assertTrue(\"Version of updated document must be greater than original one\",\n        newVersion > initialVersion);\n    Assert.assertThat( \"Doc value must be updated\", solrDocument.get(\"inplace_updatable_int\"), is(newDocValue));\n    Assert.assertThat(\"Lucene doc id should not be changed for In-Place Updates.\", solrDocument.get(\"[docid]\"), is(luceneDocId));\n\n    sdoc.remove(\"shardName\");\n    checkWrongCommandFailure(sdoc);\n\n    sdoc.addField(\"shardName\",  map(\"set\", \"newShardName\"));\n    checkWrongCommandFailure(sdoc);\n  }\n\n","sourceOld":"  @Test\n  public void testUpdatingDocValuesWithRouteField() throws Exception {\n\n     new UpdateRequest()\n      .deleteByQuery(\"*:*\").commit(cluster.getSolrClient(), COLLECTION);\n    \n     new UpdateRequest().add(createDocs(NUMBER_OF_DOCS)).commit(cluster.getSolrClient(), COLLECTION);\n\n    int id = TestUtil.nextInt(random(), 1, NUMBER_OF_DOCS - 1);\n    SolrDocument solrDocument = queryDoc(id);\n    Long initialVersion = (Long) solrDocument.get(\"_version_\");\n    Integer luceneDocId = (Integer) solrDocument.get(\"[docid]\");\n    String shardName = (String) solrDocument.get(\"shardName\");\n    Assert.assertThat(solrDocument.get(\"inplace_updatable_int\"), is(id));\n\n    int newDocValue = TestUtil.nextInt(random(), 1, 2 * NUMBER_OF_DOCS - 1);\n    SolrInputDocument sdoc = sdoc(\"id\", \"\"+id,\n        // use route field in update command\n        \"shardName\", shardName,\n        \"inplace_updatable_int\", map(\"set\", newDocValue));\n    \n    UpdateRequest updateRequest = new UpdateRequest()\n        .add(sdoc);\n    updateRequest.commit(cluster.getSolrClient(), COLLECTION);\n    solrDocument = queryDoc(id);\n    Long newVersion = (Long) solrDocument.get(\"_version_\");\n    Assert.assertTrue(\"Version of updated document must be greater than original one\",\n        newVersion > initialVersion);\n    Assert.assertThat( \"Doc value must be updated\", solrDocument.get(\"inplace_updatable_int\"), is(newDocValue));\n    Assert.assertThat(\"Lucene doc id should not be changed for In-Place Updates.\", solrDocument.get(\"[docid]\"), is(luceneDocId));\n    \n    try {\n      sdoc.remove(\"shardName\");\n      new UpdateRequest()\n         .add(sdoc).process(cluster.getSolrClient(), COLLECTION);\n      fail(\"expect  an exception w/o route field\");\n    }catch(SolrException ex) {\n      assertThat(\"expecting 400 in \"+ex.getMessage(), ex.code(), is(400));\n    }\n  }\n\n","bugFix":["de77148275e541f915efc6e934c276a0a7ec45ea"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de77148275e541f915efc6e934c276a0a7ec45ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["689f9afcb5195815904e30fd753e3db8f5fcbf29"],"689f9afcb5195815904e30fd753e3db8f5fcbf29":["de77148275e541f915efc6e934c276a0a7ec45ea"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de77148275e541f915efc6e934c276a0a7ec45ea"],"de77148275e541f915efc6e934c276a0a7ec45ea":["689f9afcb5195815904e30fd753e3db8f5fcbf29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"689f9afcb5195815904e30fd753e3db8f5fcbf29":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}