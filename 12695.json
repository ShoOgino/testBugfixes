{"path":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationKeyAnalyzer#testThreadSafe().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationKeyAnalyzer#testThreadSafe().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/collation/TestCollationKeyAnalyzer#testThreadSafe().mjava","sourceNew":"  public void testThreadSafe() throws Exception {\n    int iters = 20 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < iters; i++) {\n      Collator collator = Collator.getInstance(Locale.GERMAN);\n      collator.setStrength(Collator.PRIMARY);\n      assertThreadSafe(new CollationKeyAnalyzer(TEST_VERSION_CURRENT, collator));\n    }\n  }\n\n","sourceOld":"  public void testThreadSafe() throws Exception {\n    int iters = 20 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < iters; i++) {\n      Collator collator = Collator.getInstance(Locale.GERMAN);\n      collator.setStrength(Collator.PRIMARY);\n      assertThreadSafe(new CollationKeyAnalyzer(TEST_VERSION_CURRENT, collator));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationKeyAnalyzer#testThreadSafe().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationKeyAnalyzer#testThreadSafe().mjava","sourceNew":"  public void testThreadSafe() throws Exception {\n    int iters = 20 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < iters; i++) {\n      Collator collator = Collator.getInstance(Locale.GERMAN);\n      collator.setStrength(Collator.PRIMARY);\n      assertThreadSafe(new CollationKeyAnalyzer(collator));\n    }\n  }\n\n","sourceOld":"  public void testThreadSafe() throws Exception {\n    int iters = 20 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < iters; i++) {\n      Collator collator = Collator.getInstance(Locale.GERMAN);\n      collator.setStrength(Collator.PRIMARY);\n      assertThreadSafe(new CollationKeyAnalyzer(TEST_VERSION_CURRENT, collator));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationKeyAnalyzer#testThreadSafe().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationKeyAnalyzer#testThreadSafe().mjava","sourceNew":"  public void testThreadSafe() throws Exception {\n    int iters = 20 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < iters; i++) {\n      Collator collator = Collator.getInstance(Locale.GERMAN);\n      collator.setStrength(Collator.PRIMARY);\n      Analyzer analyzer = new CollationKeyAnalyzer(collator);\n      assertThreadSafe(analyzer);\n      analyzer.close();\n    }\n  }\n\n","sourceOld":"  public void testThreadSafe() throws Exception {\n    int iters = 20 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < iters; i++) {\n      Collator collator = Collator.getInstance(Locale.GERMAN);\n      collator.setStrength(Collator.PRIMARY);\n      assertThreadSafe(new CollationKeyAnalyzer(collator));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationKeyAnalyzer#testThreadSafe().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/collation/TestCollationKeyAnalyzer#testThreadSafe().mjava","sourceNew":"  public void testThreadSafe() throws Exception {\n    int iters = 20 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < iters; i++) {\n      Collator collator = Collator.getInstance(Locale.GERMAN);\n      collator.setStrength(Collator.PRIMARY);\n      Analyzer analyzer = new CollationKeyAnalyzer(collator);\n      assertThreadSafe(analyzer);\n      analyzer.close();\n    }\n  }\n\n","sourceOld":"  public void testThreadSafe() throws Exception {\n    int iters = 20 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < iters; i++) {\n      Collator collator = Collator.getInstance(Locale.GERMAN);\n      collator.setStrength(Collator.PRIMARY);\n      assertThreadSafe(new CollationKeyAnalyzer(collator));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}