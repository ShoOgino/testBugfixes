{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testInvalidValidParams().mjava","commits":[{"id":"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","date":1358784296,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testInvalidValidParams().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInvalidValidParams() throws Exception {\n    final CategoryPath dummyCP = new CategoryPath(\"a\");\n    final FacetRequest dummyFR = new CountFacetRequest(dummyCP, 10);\n\n    // only CountFacetRequests are allowed\n    assertNotNull(\"only CountFacetRequests should be allowed\", \n        CountingFacetsCollector.assertParams(new FacetSearchParams(new ScoreFacetRequest(dummyCP, 10))));\n\n    // only depth=1\n    FacetRequest cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setDepth(2);\n    assertNotNull(\"only depth 1 should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n\n    // only SortOrder.DESCENDING\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setSortOrder(SortOrder.ASCENDING);\n    assertNotNull(\"only SortOrder.DESCENDING should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n    \n    // only SortBy.VALUE\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setSortBy(SortBy.ORDINAL);\n    assertNotNull(\"only SortBy.VALUE should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n\n    // no numToLabel\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setNumLabel(2);\n    assertNotNull(\"numToLabel should not be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n    \n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams(\"moo\")) {\n      @Override\n      public List<CategoryListParams> getAllCategoryListParams() {\n        return Arrays.asList(new CategoryListParams[] { clParams, clParams });\n      }\n    };\n    assertNotNull(\"only one CLP should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR)));\n    \n    fip = new FacetIndexingParams(new CategoryListParams(\"moo\")) {\n      final CategoryListParams clp = new CategoryListParams() {\n        @Override\n        public IntEncoder createEncoder() {\n          return new VInt8IntEncoder();\n        }\n      };\n      @Override\n      public List<CategoryListParams> getAllCategoryListParams() {\n        return Collections.singletonList(clp);\n      }\n      \n      @Override\n      public CategoryListParams getCategoryListParams(CategoryPath category) {\n        return clp;\n      }\n    };\n    assertNotNull(\"only DGapVIntEncoder should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR)));\n\n    fip = new FacetIndexingParams(new CategoryListParams(\"moo\")) {\n      @Override\n      public int getPartitionSize() {\n        return 2;\n      }\n    };\n    assertNotNull(\"partitions should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testInvalidValidParams().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInvalidValidParams() throws Exception {\n    final CategoryPath dummyCP = new CategoryPath(\"a\");\n    final FacetRequest dummyFR = new CountFacetRequest(dummyCP, 10);\n\n    // only CountFacetRequests are allowed\n    assertNotNull(\"only CountFacetRequests should be allowed\", \n        CountingFacetsCollector.assertParams(new FacetSearchParams(new ScoreFacetRequest(dummyCP, 10))));\n\n    // only depth=1\n    FacetRequest cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setDepth(2);\n    assertNotNull(\"only depth 1 should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n\n    // only SortOrder.DESCENDING\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setSortOrder(SortOrder.ASCENDING);\n    assertNotNull(\"only SortOrder.DESCENDING should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n    \n    // only SortBy.VALUE\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setSortBy(SortBy.ORDINAL);\n    assertNotNull(\"only SortBy.VALUE should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n\n    // no numToLabel\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setNumLabel(2);\n    assertNotNull(\"numToLabel should not be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n    \n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams(\"moo\")) {\n      @Override\n      public List<CategoryListParams> getAllCategoryListParams() {\n        return Arrays.asList(new CategoryListParams[] { clParams, clParams });\n      }\n    };\n    assertNotNull(\"only one CLP should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR)));\n    \n    fip = new FacetIndexingParams(new CategoryListParams(\"moo\")) {\n      final CategoryListParams clp = new CategoryListParams() {\n        @Override\n        public IntEncoder createEncoder() {\n          return new VInt8IntEncoder();\n        }\n      };\n      @Override\n      public List<CategoryListParams> getAllCategoryListParams() {\n        return Collections.singletonList(clp);\n      }\n      \n      @Override\n      public CategoryListParams getCategoryListParams(CategoryPath category) {\n        return clp;\n      }\n    };\n    assertNotNull(\"only DGapVIntEncoder should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR)));\n\n    fip = new FacetIndexingParams(new CategoryListParams(\"moo\")) {\n      @Override\n      public int getPartitionSize() {\n        return 2;\n      }\n    };\n    assertNotNull(\"partitions should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc0a6cdc2cfb2407dce68d524fb63993c0209a2d","date":1359020450,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testInvalidParams().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testInvalidValidParams().mjava","sourceNew":"  @Test\n  public void testInvalidParams() throws Exception {\n    final CategoryPath dummyCP = new CategoryPath(\"a\");\n    final FacetRequest dummyFR = new CountFacetRequest(dummyCP, 10);\n\n    // only CountFacetRequests are allowed\n    assertNotNull(\"only CountFacetRequests should be allowed\", \n        CountingFacetsCollector.assertParams(new FacetSearchParams(new ScoreFacetRequest(dummyCP, 10))));\n\n    // only depth=1\n    FacetRequest cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setDepth(2);\n    assertNotNull(\"only depth 1 should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n\n    // only SortOrder.DESCENDING\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setSortOrder(SortOrder.ASCENDING);\n    assertNotNull(\"only SortOrder.DESCENDING should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n    \n    // only SortBy.VALUE\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setSortBy(SortBy.ORDINAL);\n    assertNotNull(\"only SortBy.VALUE should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n\n    // no numToLabel\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setNumLabel(2);\n    assertNotNull(\"numToLabel should not be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n    \n    FacetIndexingParams fip = new FacetIndexingParams() {\n      @Override\n      public CategoryListParams getCategoryListParams(CategoryPath category) {\n        return new CategoryListParams();\n      }\n    };\n    assertNotNull(\"only one CLP should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR, \n        new CountFacetRequest(new CategoryPath(\"moo\"), 10))));\n    \n    fip = new FacetIndexingParams(new CategoryListParams(\"moo\")) {\n      final CategoryListParams clp = new CategoryListParams() {\n        @Override\n        public IntEncoder createEncoder() {\n          return new VInt8IntEncoder();\n        }\n      };\n      @Override\n      public List<CategoryListParams> getAllCategoryListParams() {\n        return Collections.singletonList(clp);\n      }\n      \n      @Override\n      public CategoryListParams getCategoryListParams(CategoryPath category) {\n        return clp;\n      }\n    };\n    assertNotNull(\"only DGapVIntEncoder should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR)));\n\n    fip = new FacetIndexingParams(new CategoryListParams(\"moo\")) {\n      @Override\n      public int getPartitionSize() {\n        return 2;\n      }\n    };\n    assertNotNull(\"partitions should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR)));\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValidParams() throws Exception {\n    final CategoryPath dummyCP = new CategoryPath(\"a\");\n    final FacetRequest dummyFR = new CountFacetRequest(dummyCP, 10);\n\n    // only CountFacetRequests are allowed\n    assertNotNull(\"only CountFacetRequests should be allowed\", \n        CountingFacetsCollector.assertParams(new FacetSearchParams(new ScoreFacetRequest(dummyCP, 10))));\n\n    // only depth=1\n    FacetRequest cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setDepth(2);\n    assertNotNull(\"only depth 1 should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n\n    // only SortOrder.DESCENDING\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setSortOrder(SortOrder.ASCENDING);\n    assertNotNull(\"only SortOrder.DESCENDING should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n    \n    // only SortBy.VALUE\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setSortBy(SortBy.ORDINAL);\n    assertNotNull(\"only SortBy.VALUE should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n\n    // no numToLabel\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setNumLabel(2);\n    assertNotNull(\"numToLabel should not be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n    \n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams(\"moo\")) {\n      @Override\n      public List<CategoryListParams> getAllCategoryListParams() {\n        return Arrays.asList(new CategoryListParams[] { clParams, clParams });\n      }\n    };\n    assertNotNull(\"only one CLP should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR)));\n    \n    fip = new FacetIndexingParams(new CategoryListParams(\"moo\")) {\n      final CategoryListParams clp = new CategoryListParams() {\n        @Override\n        public IntEncoder createEncoder() {\n          return new VInt8IntEncoder();\n        }\n      };\n      @Override\n      public List<CategoryListParams> getAllCategoryListParams() {\n        return Collections.singletonList(clp);\n      }\n      \n      @Override\n      public CategoryListParams getCategoryListParams(CategoryPath category) {\n        return clp;\n      }\n    };\n    assertNotNull(\"only DGapVIntEncoder should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR)));\n\n    fip = new FacetIndexingParams(new CategoryListParams(\"moo\")) {\n      @Override\n      public int getPartitionSize() {\n        return 2;\n      }\n    };\n    assertNotNull(\"partitions should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2d5244a676b83c2d551c3746e8181588ba619e1","date":1359031414,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testInvalidParams().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/CountingFacetsCollectorTest#testInvalidValidParams().mjava","sourceNew":"  @Test\n  public void testInvalidParams() throws Exception {\n    final CategoryPath dummyCP = new CategoryPath(\"a\");\n    final FacetRequest dummyFR = new CountFacetRequest(dummyCP, 10);\n\n    // only CountFacetRequests are allowed\n    assertNotNull(\"only CountFacetRequests should be allowed\", \n        CountingFacetsCollector.assertParams(new FacetSearchParams(new ScoreFacetRequest(dummyCP, 10))));\n\n    // only depth=1\n    FacetRequest cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setDepth(2);\n    assertNotNull(\"only depth 1 should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n\n    // only SortOrder.DESCENDING\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setSortOrder(SortOrder.ASCENDING);\n    assertNotNull(\"only SortOrder.DESCENDING should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n    \n    // only SortBy.VALUE\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setSortBy(SortBy.ORDINAL);\n    assertNotNull(\"only SortBy.VALUE should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n\n    // no numToLabel\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setNumLabel(2);\n    assertNotNull(\"numToLabel should not be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n    \n    FacetIndexingParams fip = new FacetIndexingParams() {\n      @Override\n      public CategoryListParams getCategoryListParams(CategoryPath category) {\n        return new CategoryListParams();\n      }\n    };\n    assertNotNull(\"only one CLP should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR, \n        new CountFacetRequest(new CategoryPath(\"moo\"), 10))));\n    \n    fip = new FacetIndexingParams(new CategoryListParams(\"moo\")) {\n      final CategoryListParams clp = new CategoryListParams() {\n        @Override\n        public IntEncoder createEncoder() {\n          return new VInt8IntEncoder();\n        }\n      };\n      @Override\n      public List<CategoryListParams> getAllCategoryListParams() {\n        return Collections.singletonList(clp);\n      }\n      \n      @Override\n      public CategoryListParams getCategoryListParams(CategoryPath category) {\n        return clp;\n      }\n    };\n    assertNotNull(\"only DGapVIntEncoder should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR)));\n\n    fip = new FacetIndexingParams(new CategoryListParams(\"moo\")) {\n      @Override\n      public int getPartitionSize() {\n        return 2;\n      }\n    };\n    assertNotNull(\"partitions should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR)));\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValidParams() throws Exception {\n    final CategoryPath dummyCP = new CategoryPath(\"a\");\n    final FacetRequest dummyFR = new CountFacetRequest(dummyCP, 10);\n\n    // only CountFacetRequests are allowed\n    assertNotNull(\"only CountFacetRequests should be allowed\", \n        CountingFacetsCollector.assertParams(new FacetSearchParams(new ScoreFacetRequest(dummyCP, 10))));\n\n    // only depth=1\n    FacetRequest cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setDepth(2);\n    assertNotNull(\"only depth 1 should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n\n    // only SortOrder.DESCENDING\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setSortOrder(SortOrder.ASCENDING);\n    assertNotNull(\"only SortOrder.DESCENDING should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n    \n    // only SortBy.VALUE\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setSortBy(SortBy.ORDINAL);\n    assertNotNull(\"only SortBy.VALUE should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n\n    // no numToLabel\n    cfr = new CountFacetRequest(dummyCP, 10);\n    cfr.setNumLabel(2);\n    assertNotNull(\"numToLabel should not be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(cfr)));\n    \n    FacetIndexingParams fip = new FacetIndexingParams(new CategoryListParams(\"moo\")) {\n      @Override\n      public List<CategoryListParams> getAllCategoryListParams() {\n        return Arrays.asList(new CategoryListParams[] { clParams, clParams });\n      }\n    };\n    assertNotNull(\"only one CLP should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR)));\n    \n    fip = new FacetIndexingParams(new CategoryListParams(\"moo\")) {\n      final CategoryListParams clp = new CategoryListParams() {\n        @Override\n        public IntEncoder createEncoder() {\n          return new VInt8IntEncoder();\n        }\n      };\n      @Override\n      public List<CategoryListParams> getAllCategoryListParams() {\n        return Collections.singletonList(clp);\n      }\n      \n      @Override\n      public CategoryListParams getCategoryListParams(CategoryPath category) {\n        return clp;\n      }\n    };\n    assertNotNull(\"only DGapVIntEncoder should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR)));\n\n    fip = new FacetIndexingParams(new CategoryListParams(\"moo\")) {\n      @Override\n      public int getPartitionSize() {\n        return 2;\n      }\n    };\n    assertNotNull(\"partitions should be allowed\", CountingFacetsCollector.assertParams(new FacetSearchParams(fip, dummyFR)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cc0a6cdc2cfb2407dce68d524fb63993c0209a2d":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc0a6cdc2cfb2407dce68d524fb63993c0209a2d"],"b2d5244a676b83c2d551c3746e8181588ba619e1":["07155cdd910937cdf6877e48884d5782845c8b8b","cc0a6cdc2cfb2407dce68d524fb63993c0209a2d"]},"commit2Childs":{"f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d":["cc0a6cdc2cfb2407dce68d524fb63993c0209a2d","07155cdd910937cdf6877e48884d5782845c8b8b"],"cc0a6cdc2cfb2407dce68d524fb63993c0209a2d":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f96e4a056f7ee1bafbfb8a06c5bd93f7708e560d","07155cdd910937cdf6877e48884d5782845c8b8b"],"07155cdd910937cdf6877e48884d5782845c8b8b":["b2d5244a676b83c2d551c3746e8181588ba619e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b2d5244a676b83c2d551c3746e8181588ba619e1":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b2d5244a676b83c2d551c3746e8181588ba619e1"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}