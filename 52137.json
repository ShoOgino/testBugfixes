{"path":"src/java/org/apache/lucene/search/MultiPhraseQuery#termArraysEquals(List,List).mjava","commits":[{"id":"7757c08ec94a8148b09e422e72ff266b9a7dd4bc","date":1223667919,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery#termArraysEquals(List,List).mjava","pathOld":"/dev/null","sourceNew":"  // Breakout calculation of the termArrays equals\n  private boolean termArraysEquals(List termArrays1, List termArrays2) {\n    if (termArrays1.size() != termArrays2.size()) {\n      return false;\n    }\n    ListIterator iterator1 = termArrays1.listIterator();\n    ListIterator iterator2 = termArrays2.listIterator();\n    while (iterator1.hasNext()) {\n      Term[] termArray1 = (Term[]) iterator1.next();\n      Term[] termArray2 = (Term[]) iterator2.next();\n      if (!(termArray1 == null ? termArray2 == null : Arrays.equals(termArray1,\n          termArray2))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiPhraseQuery#termArraysEquals(List[Term[]],List[Term[]]).mjava","pathOld":"src/java/org/apache/lucene/search/MultiPhraseQuery#termArraysEquals(List,List).mjava","sourceNew":"  // Breakout calculation of the termArrays equals\n  private boolean termArraysEquals(List<Term[]> termArrays1, List<Term[]> termArrays2) {\n    if (termArrays1.size() != termArrays2.size()) {\n      return false;\n    }\n    ListIterator<Term[]> iterator1 = termArrays1.listIterator();\n    ListIterator<Term[]> iterator2 = termArrays2.listIterator();\n    while (iterator1.hasNext()) {\n      Term[] termArray1 = iterator1.next();\n      Term[] termArray2 = iterator2.next();\n      if (!(termArray1 == null ? termArray2 == null : Arrays.equals(termArray1,\n          termArray2))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  // Breakout calculation of the termArrays equals\n  private boolean termArraysEquals(List termArrays1, List termArrays2) {\n    if (termArrays1.size() != termArrays2.size()) {\n      return false;\n    }\n    ListIterator iterator1 = termArrays1.listIterator();\n    ListIterator iterator2 = termArrays2.listIterator();\n    while (iterator1.hasNext()) {\n      Term[] termArray1 = (Term[]) iterator1.next();\n      Term[] termArray2 = (Term[]) iterator2.next();\n      if (!(termArray1 == null ? termArray2 == null : Arrays.equals(termArray1,\n          termArray2))) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7757c08ec94a8148b09e422e72ff266b9a7dd4bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef82ff03e4016c705811b2658e81471a645c0e49":["7757c08ec94a8148b09e422e72ff266b9a7dd4bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"7757c08ec94a8148b09e422e72ff266b9a7dd4bc":["ef82ff03e4016c705811b2658e81471a645c0e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7757c08ec94a8148b09e422e72ff266b9a7dd4bc"],"ef82ff03e4016c705811b2658e81471a645c0e49":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}