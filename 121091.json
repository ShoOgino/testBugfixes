{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked36#decode(byte[],int,long[],int,int).mjava","commits":[{"id":"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f","date":1345677220,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked36#decode(byte[],int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 28) | (byte1 << 20) | (byte2 << 12) | (byte3 << 4) | (byte4 >>> 4);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 15) << 32) | (byte5 << 24) | (byte6 << 16) | (byte7 << 8) | byte8;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte9 << 28) | (byte10 << 20) | (byte11 << 12) | (byte12 << 4) | (byte13 >>> 4);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 15) << 32) | (byte14 << 24) | (byte15 << 16) | (byte16 << 8) | byte17;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte18 << 28) | (byte19 << 20) | (byte20 << 12) | (byte21 << 4) | (byte22 >>> 4);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 15) << 32) | (byte23 << 24) | (byte24 << 16) | (byte25 << 8) | byte26;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte27 << 28) | (byte28 << 20) | (byte29 << 12) | (byte30 << 4) | (byte31 >>> 4);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 15) << 32) | (byte32 << 24) | (byte33 << 16) | (byte34 << 8) | byte35;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte36 << 28) | (byte37 << 20) | (byte38 << 12) | (byte39 << 4) | (byte40 >>> 4);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 15) << 32) | (byte41 << 24) | (byte42 << 16) | (byte43 << 8) | byte44;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte45 << 28) | (byte46 << 20) | (byte47 << 12) | (byte48 << 4) | (byte49 >>> 4);\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte49 & 15) << 32) | (byte50 << 24) | (byte51 << 16) | (byte52 << 8) | byte53;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte54 << 28) | (byte55 << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 32) | (byte59 << 24) | (byte60 << 16) | (byte61 << 8) | byte62;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte63 << 28) | (byte64 << 20) | (byte65 << 12) | (byte66 << 4) | (byte67 >>> 4);\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte67 & 15) << 32) | (byte68 << 24) | (byte69 << 16) | (byte70 << 8) | byte71;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353f5909b00345d98d079a7db9a1bbe7485b1ea6","date":1345745476,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked36#decode(byte[],int,long[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked36#decode(byte[],int,long[],int,int).mjava","sourceNew":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 28) | (byte1 << 20) | (byte2 << 12) | (byte3 << 4) | (byte4 >>> 4);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 15) << 32) | (byte5 << 24) | (byte6 << 16) | (byte7 << 8) | byte8;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte9 << 28) | (byte10 << 20) | (byte11 << 12) | (byte12 << 4) | (byte13 >>> 4);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 15) << 32) | (byte14 << 24) | (byte15 << 16) | (byte16 << 8) | byte17;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte18 << 28) | (byte19 << 20) | (byte20 << 12) | (byte21 << 4) | (byte22 >>> 4);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 15) << 32) | (byte23 << 24) | (byte24 << 16) | (byte25 << 8) | byte26;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte27 << 28) | (byte28 << 20) | (byte29 << 12) | (byte30 << 4) | (byte31 >>> 4);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 15) << 32) | (byte32 << 24) | (byte33 << 16) | (byte34 << 8) | byte35;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte36 << 28) | (byte37 << 20) | (byte38 << 12) | (byte39 << 4) | (byte40 >>> 4);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 15) << 32) | (byte41 << 24) | (byte42 << 16) | (byte43 << 8) | byte44;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte45 << 28) | (byte46 << 20) | (byte47 << 12) | (byte48 << 4) | (byte49 >>> 4);\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte49 & 15) << 32) | (byte50 << 24) | (byte51 << 16) | (byte52 << 8) | byte53;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte54 << 28) | (byte55 << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 32) | (byte59 << 24) | (byte60 << 16) | (byte61 << 8) | byte62;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte63 << 28) | (byte64 << 20) | (byte65 << 12) | (byte66 << 4) | (byte67 >>> 4);\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte67 & 15) << 32) | (byte68 << 24) | (byte69 << 16) | (byte70 << 8) | byte71;\n      }\n    }\n\n","sourceOld":"    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 28) | (byte1 << 20) | (byte2 << 12) | (byte3 << 4) | (byte4 >>> 4);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 15) << 32) | (byte5 << 24) | (byte6 << 16) | (byte7 << 8) | byte8;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte9 << 28) | (byte10 << 20) | (byte11 << 12) | (byte12 << 4) | (byte13 >>> 4);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 15) << 32) | (byte14 << 24) | (byte15 << 16) | (byte16 << 8) | byte17;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte18 << 28) | (byte19 << 20) | (byte20 << 12) | (byte21 << 4) | (byte22 >>> 4);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 15) << 32) | (byte23 << 24) | (byte24 << 16) | (byte25 << 8) | byte26;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte27 << 28) | (byte28 << 20) | (byte29 << 12) | (byte30 << 4) | (byte31 >>> 4);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 15) << 32) | (byte32 << 24) | (byte33 << 16) | (byte34 << 8) | byte35;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte36 << 28) | (byte37 << 20) | (byte38 << 12) | (byte39 << 4) | (byte40 >>> 4);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 15) << 32) | (byte41 << 24) | (byte42 << 16) | (byte43 << 8) | byte44;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte45 << 28) | (byte46 << 20) | (byte47 << 12) | (byte48 << 4) | (byte49 >>> 4);\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte49 & 15) << 32) | (byte50 << 24) | (byte51 << 16) | (byte52 << 8) | byte53;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte54 << 28) | (byte55 << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 32) | (byte59 << 24) | (byte60 << 16) | (byte61 << 8) | byte62;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte63 << 28) | (byte64 << 20) | (byte65 << 12) | (byte66 << 4) | (byte67 >>> 4);\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte67 & 15) << 32) | (byte68 << 24) | (byte69 << 16) | (byte70 << 8) | byte71;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked36#decode(byte[],int,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 28) | (byte1 << 20) | (byte2 << 12) | (byte3 << 4) | (byte4 >>> 4);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 15) << 32) | (byte5 << 24) | (byte6 << 16) | (byte7 << 8) | byte8;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte9 << 28) | (byte10 << 20) | (byte11 << 12) | (byte12 << 4) | (byte13 >>> 4);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 15) << 32) | (byte14 << 24) | (byte15 << 16) | (byte16 << 8) | byte17;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte18 << 28) | (byte19 << 20) | (byte20 << 12) | (byte21 << 4) | (byte22 >>> 4);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 15) << 32) | (byte23 << 24) | (byte24 << 16) | (byte25 << 8) | byte26;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte27 << 28) | (byte28 << 20) | (byte29 << 12) | (byte30 << 4) | (byte31 >>> 4);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 15) << 32) | (byte32 << 24) | (byte33 << 16) | (byte34 << 8) | byte35;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte36 << 28) | (byte37 << 20) | (byte38 << 12) | (byte39 << 4) | (byte40 >>> 4);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 15) << 32) | (byte41 << 24) | (byte42 << 16) | (byte43 << 8) | byte44;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte45 << 28) | (byte46 << 20) | (byte47 << 12) | (byte48 << 4) | (byte49 >>> 4);\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte49 & 15) << 32) | (byte50 << 24) | (byte51 << 16) | (byte52 << 8) | byte53;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte54 << 28) | (byte55 << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 32) | (byte59 << 24) | (byte60 << 16) | (byte61 << 8) | byte62;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte63 << 28) | (byte64 << 20) | (byte65 << 12) | (byte66 << 4) | (byte67 >>> 4);\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte67 & 15) << 32) | (byte68 << 24) | (byte69 << 16) | (byte70 << 8) | byte71;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58d488e3fd72dfc95fa76fcb24f58e90c343323c","date":1346235723,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked36#decode(byte[],int,long[],int,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 28) | (byte1 << 20) | (byte2 << 12) | (byte3 << 4) | (byte4 >>> 4);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 15) << 32) | (byte5 << 24) | (byte6 << 16) | (byte7 << 8) | byte8;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte9 << 28) | (byte10 << 20) | (byte11 << 12) | (byte12 << 4) | (byte13 >>> 4);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 15) << 32) | (byte14 << 24) | (byte15 << 16) | (byte16 << 8) | byte17;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte18 << 28) | (byte19 << 20) | (byte20 << 12) | (byte21 << 4) | (byte22 >>> 4);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 15) << 32) | (byte23 << 24) | (byte24 << 16) | (byte25 << 8) | byte26;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte27 << 28) | (byte28 << 20) | (byte29 << 12) | (byte30 << 4) | (byte31 >>> 4);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 15) << 32) | (byte32 << 24) | (byte33 << 16) | (byte34 << 8) | byte35;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte36 << 28) | (byte37 << 20) | (byte38 << 12) | (byte39 << 4) | (byte40 >>> 4);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 15) << 32) | (byte41 << 24) | (byte42 << 16) | (byte43 << 8) | byte44;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte45 << 28) | (byte46 << 20) | (byte47 << 12) | (byte48 << 4) | (byte49 >>> 4);\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte49 & 15) << 32) | (byte50 << 24) | (byte51 << 16) | (byte52 << 8) | byte53;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte54 << 28) | (byte55 << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 32) | (byte59 << 24) | (byte60 << 16) | (byte61 << 8) | byte62;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte63 << 28) | (byte64 << 20) | (byte65 << 12) | (byte66 << 4) | (byte67 >>> 4);\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte67 & 15) << 32) | (byte68 << 24) | (byte69 << 16) | (byte70 << 8) | byte71;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked36#decode(byte[],int,long[],int,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void decode(byte[] blocks, int blocksOffset, long[] values, int valuesOffset, int iterations) {\n      assert blocksOffset + 8 * iterations * blockCount() <= blocks.length;\n      assert valuesOffset + iterations * valueCount() <= values.length;\n      for (int i = 0; i < iterations; ++i) {\n        final long byte0 = blocks[blocksOffset++] & 0xFF;\n        final long byte1 = blocks[blocksOffset++] & 0xFF;\n        final long byte2 = blocks[blocksOffset++] & 0xFF;\n        final long byte3 = blocks[blocksOffset++] & 0xFF;\n        final long byte4 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte0 << 28) | (byte1 << 20) | (byte2 << 12) | (byte3 << 4) | (byte4 >>> 4);\n        final long byte5 = blocks[blocksOffset++] & 0xFF;\n        final long byte6 = blocks[blocksOffset++] & 0xFF;\n        final long byte7 = blocks[blocksOffset++] & 0xFF;\n        final long byte8 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte4 & 15) << 32) | (byte5 << 24) | (byte6 << 16) | (byte7 << 8) | byte8;\n        final long byte9 = blocks[blocksOffset++] & 0xFF;\n        final long byte10 = blocks[blocksOffset++] & 0xFF;\n        final long byte11 = blocks[blocksOffset++] & 0xFF;\n        final long byte12 = blocks[blocksOffset++] & 0xFF;\n        final long byte13 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte9 << 28) | (byte10 << 20) | (byte11 << 12) | (byte12 << 4) | (byte13 >>> 4);\n        final long byte14 = blocks[blocksOffset++] & 0xFF;\n        final long byte15 = blocks[blocksOffset++] & 0xFF;\n        final long byte16 = blocks[blocksOffset++] & 0xFF;\n        final long byte17 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte13 & 15) << 32) | (byte14 << 24) | (byte15 << 16) | (byte16 << 8) | byte17;\n        final long byte18 = blocks[blocksOffset++] & 0xFF;\n        final long byte19 = blocks[blocksOffset++] & 0xFF;\n        final long byte20 = blocks[blocksOffset++] & 0xFF;\n        final long byte21 = blocks[blocksOffset++] & 0xFF;\n        final long byte22 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte18 << 28) | (byte19 << 20) | (byte20 << 12) | (byte21 << 4) | (byte22 >>> 4);\n        final long byte23 = blocks[blocksOffset++] & 0xFF;\n        final long byte24 = blocks[blocksOffset++] & 0xFF;\n        final long byte25 = blocks[blocksOffset++] & 0xFF;\n        final long byte26 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte22 & 15) << 32) | (byte23 << 24) | (byte24 << 16) | (byte25 << 8) | byte26;\n        final long byte27 = blocks[blocksOffset++] & 0xFF;\n        final long byte28 = blocks[blocksOffset++] & 0xFF;\n        final long byte29 = blocks[blocksOffset++] & 0xFF;\n        final long byte30 = blocks[blocksOffset++] & 0xFF;\n        final long byte31 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte27 << 28) | (byte28 << 20) | (byte29 << 12) | (byte30 << 4) | (byte31 >>> 4);\n        final long byte32 = blocks[blocksOffset++] & 0xFF;\n        final long byte33 = blocks[blocksOffset++] & 0xFF;\n        final long byte34 = blocks[blocksOffset++] & 0xFF;\n        final long byte35 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte31 & 15) << 32) | (byte32 << 24) | (byte33 << 16) | (byte34 << 8) | byte35;\n        final long byte36 = blocks[blocksOffset++] & 0xFF;\n        final long byte37 = blocks[blocksOffset++] & 0xFF;\n        final long byte38 = blocks[blocksOffset++] & 0xFF;\n        final long byte39 = blocks[blocksOffset++] & 0xFF;\n        final long byte40 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte36 << 28) | (byte37 << 20) | (byte38 << 12) | (byte39 << 4) | (byte40 >>> 4);\n        final long byte41 = blocks[blocksOffset++] & 0xFF;\n        final long byte42 = blocks[blocksOffset++] & 0xFF;\n        final long byte43 = blocks[blocksOffset++] & 0xFF;\n        final long byte44 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte40 & 15) << 32) | (byte41 << 24) | (byte42 << 16) | (byte43 << 8) | byte44;\n        final long byte45 = blocks[blocksOffset++] & 0xFF;\n        final long byte46 = blocks[blocksOffset++] & 0xFF;\n        final long byte47 = blocks[blocksOffset++] & 0xFF;\n        final long byte48 = blocks[blocksOffset++] & 0xFF;\n        final long byte49 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte45 << 28) | (byte46 << 20) | (byte47 << 12) | (byte48 << 4) | (byte49 >>> 4);\n        final long byte50 = blocks[blocksOffset++] & 0xFF;\n        final long byte51 = blocks[blocksOffset++] & 0xFF;\n        final long byte52 = blocks[blocksOffset++] & 0xFF;\n        final long byte53 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte49 & 15) << 32) | (byte50 << 24) | (byte51 << 16) | (byte52 << 8) | byte53;\n        final long byte54 = blocks[blocksOffset++] & 0xFF;\n        final long byte55 = blocks[blocksOffset++] & 0xFF;\n        final long byte56 = blocks[blocksOffset++] & 0xFF;\n        final long byte57 = blocks[blocksOffset++] & 0xFF;\n        final long byte58 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte54 << 28) | (byte55 << 20) | (byte56 << 12) | (byte57 << 4) | (byte58 >>> 4);\n        final long byte59 = blocks[blocksOffset++] & 0xFF;\n        final long byte60 = blocks[blocksOffset++] & 0xFF;\n        final long byte61 = blocks[blocksOffset++] & 0xFF;\n        final long byte62 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte58 & 15) << 32) | (byte59 << 24) | (byte60 << 16) | (byte61 << 8) | byte62;\n        final long byte63 = blocks[blocksOffset++] & 0xFF;\n        final long byte64 = blocks[blocksOffset++] & 0xFF;\n        final long byte65 = blocks[blocksOffset++] & 0xFF;\n        final long byte66 = blocks[blocksOffset++] & 0xFF;\n        final long byte67 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = (byte63 << 28) | (byte64 << 20) | (byte65 << 12) | (byte66 << 4) | (byte67 >>> 4);\n        final long byte68 = blocks[blocksOffset++] & 0xFF;\n        final long byte69 = blocks[blocksOffset++] & 0xFF;\n        final long byte70 = blocks[blocksOffset++] & 0xFF;\n        final long byte71 = blocks[blocksOffset++] & 0xFF;\n        values[valuesOffset++] = ((byte67 & 15) << 32) | (byte68 << 24) | (byte69 << 16) | (byte70 << 8) | byte71;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"58d488e3fd72dfc95fa76fcb24f58e90c343323c":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["001b25b42373b22a52f399dbf072f1224632e8e6","58d488e3fd72dfc95fa76fcb24f58e90c343323c"],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["58d488e3fd72dfc95fa76fcb24f58e90c343323c"]},"commit2Childs":{"353f5909b00345d98d079a7db9a1bbe7485b1ea6":["001b25b42373b22a52f399dbf072f1224632e8e6","58d488e3fd72dfc95fa76fcb24f58e90c343323c"],"001b25b42373b22a52f399dbf072f1224632e8e6":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"58d488e3fd72dfc95fa76fcb24f58e90c343323c":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","3edb451c214b0d41e9d16514e3a1d6984ca2ca5f"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"3edb451c214b0d41e9d16514e3a1d6984ca2ca5f":["353f5909b00345d98d079a7db9a1bbe7485b1ea6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}