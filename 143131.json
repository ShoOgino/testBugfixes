{"path":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleUpdatesSameDoc().mjava","commits":[{"id":"84c1ba52905cc7eaf624aac5e10414eccc0af92d","date":1464805673,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleUpdatesSameDoc().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleUpdatesSameDoc() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    conf.setMaxBufferedDocs(3); // small number of docs, so use a tiny maxBufferedDocs\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    writer.updateDocument       (new Term(\"id\",\"doc-1\"), doc(1, 1000000000L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1000001111L );\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2000000000L ));\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2222222222L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1111111111L );\n    writer.commit();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    TopFieldDocs td;\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-1\")), 1, \n                         new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-1 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-1 value\", 1111111111L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-2\")), 1, \n                        new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-2 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-2 value\", 2222222222L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleUpdatesSameDoc().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleUpdatesSameDoc() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    conf.setMaxBufferedDocs(3); // small number of docs, so use a tiny maxBufferedDocs\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    writer.updateDocument       (new Term(\"id\",\"doc-1\"), doc(1, 1000000000L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1000001111L );\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2000000000L ));\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2222222222L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1111111111L );\n    writer.commit();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    TopFieldDocs td;\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-1\")), 1, \n                         new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-1 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-1 value\", 1111111111L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-2\")), 1, \n                        new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-2 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-2 value\", 2222222222L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleUpdatesSameDoc().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleUpdatesSameDoc() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    conf.setMaxBufferedDocs(3); // small number of docs, so use a tiny maxBufferedDocs\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    writer.updateDocument       (new Term(\"id\",\"doc-1\"), doc(1, 1000000000L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1000001111L );\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2000000000L ));\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2222222222L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1111111111L );\n    writer.commit();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    TopFieldDocs td;\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-1\")), 1, \n                         new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-1 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-1 value\", 1111111111L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-2\")), 1, \n                        new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-2 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-2 value\", 2222222222L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f69e96b07e265f3e18957be540909b01fae36f8","date":1464859090,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleUpdatesSameDoc().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleUpdatesSameDoc() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    conf.setMaxBufferedDocs(3); // small number of docs, so use a tiny maxBufferedDocs\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    writer.updateDocument       (new Term(\"id\",\"doc-1\"), doc(1, 1000000000L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1000001111L );\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2000000000L ));\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2222222222L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1111111111L );\n    writer.commit();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    TopFieldDocs td;\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-1\")), 1, \n                         new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-1 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-1 value\", 1111111111L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-2\")), 1, \n                        new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-2 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-2 value\", 2222222222L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleUpdatesSameDoc().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultipleUpdatesSameDoc() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    conf.setMaxBufferedDocs(3); // small number of docs, so use a tiny maxBufferedDocs\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    writer.updateDocument       (new Term(\"id\",\"doc-1\"), doc(1, 1000000000L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1000001111L );\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2000000000L ));\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2222222222L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1111111111L );\n    writer.commit();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    TopFieldDocs td;\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-1\")), 1, \n                         new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-1 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-1 value\", 1111111111L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-2\")), 1, \n                        new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-2 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-2 value\", 2222222222L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleUpdatesSameDoc().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleUpdatesSameDoc().mjava","sourceNew":"  public void testMultipleUpdatesSameDoc() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    conf.setMaxBufferedDocs(3); // small number of docs, so use a tiny maxBufferedDocs\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    writer.updateDocument       (new Term(\"id\",\"doc-1\"), doc(1, 1000000000L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1000001111L );\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2000000000L ));\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2222222222L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1111111111L );\n\n    final DirectoryReader reader;\n    if (random().nextBoolean()) {\n      writer.commit();\n      reader = DirectoryReader.open(dir);\n    } else {\n      reader = DirectoryReader.open(writer);\n    }\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    TopFieldDocs td;\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-1\")), 1, \n                         new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-1 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-1 value\", 1111111111L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-2\")), 1, \n                        new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-2 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-2 value\", 2222222222L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testMultipleUpdatesSameDoc() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    conf.setMaxBufferedDocs(3); // small number of docs, so use a tiny maxBufferedDocs\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    writer.updateDocument       (new Term(\"id\",\"doc-1\"), doc(1, 1000000000L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1000001111L );\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2000000000L ));\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2222222222L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1111111111L );\n    writer.commit();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    TopFieldDocs td;\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-1\")), 1, \n                         new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-1 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-1 value\", 1111111111L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-2\")), 1, \n                        new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-2 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-2 value\", 2222222222L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleUpdatesSameDoc().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleUpdatesSameDoc().mjava","sourceNew":"  public void testMultipleUpdatesSameDoc() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    conf.setMaxBufferedDocs(3); // small number of docs, so use a tiny maxBufferedDocs\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    writer.updateDocument       (new Term(\"id\",\"doc-1\"), doc(1, 1000000000L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1000001111L );\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2000000000L ));\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2222222222L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1111111111L );\n\n    final DirectoryReader reader;\n    if (random().nextBoolean()) {\n      writer.commit();\n      reader = DirectoryReader.open(dir);\n    } else {\n      reader = DirectoryReader.open(writer);\n    }\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    TopFieldDocs td;\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-1\")), 1, \n                         new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-1 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-1 value\", 1111111111L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-2\")), 1, \n                        new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-2 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-2 value\", 2222222222L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testMultipleUpdatesSameDoc() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    conf.setMaxBufferedDocs(3); // small number of docs, so use a tiny maxBufferedDocs\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    writer.updateDocument       (new Term(\"id\",\"doc-1\"), doc(1, 1000000000L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1000001111L );\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2000000000L ));\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2222222222L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1111111111L );\n    writer.commit();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    TopFieldDocs td;\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-1\")), 1, \n                         new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-1 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-1 value\", 1111111111L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-2\")), 1, \n                        new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-2 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-2 value\", 2222222222L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleUpdatesSameDoc().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleUpdatesSameDoc().mjava","sourceNew":"  public void testMultipleUpdatesSameDoc() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    conf.setMaxBufferedDocs(3); // small number of docs, so use a tiny maxBufferedDocs\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    writer.updateDocument       (new Term(\"id\",\"doc-1\"), doc(1, 1000000000L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1000001111L );\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2000000000L ));\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2222222222L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1111111111L );\n\n    final DirectoryReader reader;\n    if (random().nextBoolean()) {\n      writer.commit();\n      reader = DirectoryReader.open(dir);\n    } else {\n      reader = DirectoryReader.open(writer);\n    }\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    TopFieldDocs td;\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-1\")), 1, \n                         new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-1 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-1 value\", 1111111111L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-2\")), 1, \n                        new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-2 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-2 value\", 2222222222L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    IOUtils.close(reader, writer, dir);\n  }\n\n","sourceOld":"  public void testMultipleUpdatesSameDoc() throws Exception {\n\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    \n    conf.setMaxBufferedDocs(3); // small number of docs, so use a tiny maxBufferedDocs\n\n    IndexWriter writer = new IndexWriter(dir, conf);\n\n    writer.updateDocument       (new Term(\"id\",\"doc-1\"), doc(1, 1000000000L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1000001111L );\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2000000000L ));\n    writer.updateDocument       (new Term(\"id\",\"doc-2\"), doc(2, 2222222222L ));\n    writer.updateNumericDocValue(new Term(\"id\",\"doc-1\"), \"val\", 1111111111L );\n    writer.commit();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    final IndexSearcher searcher = new IndexSearcher(reader);\n    TopFieldDocs td;\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-1\")), 1, \n                         new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-1 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-1 value\", 1111111111L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    td = searcher.search(new TermQuery(new Term(\"id\", \"doc-2\")), 1, \n                        new Sort(new SortField(\"val\", SortField.Type.LONG)));\n    assertEquals(\"doc-2 missing?\", 1, td.scoreDocs.length);\n    assertEquals(\"doc-2 value\", 2222222222L, ((FieldDoc)td.scoreDocs[0]).fields[0]);\n    \n    IOUtils.close(reader, writer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["1f69e96b07e265f3e18957be540909b01fae36f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f69e96b07e265f3e18957be540909b01fae36f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","84c1ba52905cc7eaf624aac5e10414eccc0af92d"],"84c1ba52905cc7eaf624aac5e10414eccc0af92d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","84c1ba52905cc7eaf624aac5e10414eccc0af92d"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["1f69e96b07e265f3e18957be540909b01fae36f8","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["1f69e96b07e265f3e18957be540909b01fae36f8","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f69e96b07e265f3e18957be540909b01fae36f8"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"1f69e96b07e265f3e18957be540909b01fae36f8":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f69e96b07e265f3e18957be540909b01fae36f8","84c1ba52905cc7eaf624aac5e10414eccc0af92d","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"84c1ba52905cc7eaf624aac5e10414eccc0af92d":["1f69e96b07e265f3e18957be540909b01fae36f8","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}