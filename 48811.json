{"path":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","commits":[{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","pathOld":"src/java/org/apache/solr/request/JSONWriter[JSONResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","sourceNew":"  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    incLevel();\n\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    boolean first=true;\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        // not multi-valued, so write it immediately.\n        if (first) {\n          first=false;\n        } else {\n          writeMapSeparator();\n        }\n        indent();\n        writeKey(fname,true);\n        sf.write(this, fname, ff);\n      }\n    }\n\n    for(MultiValueField mvf : multi.values()) {\n      if (first) {\n        first=false;\n      } else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(mvf.sfield.getName(), true);\n\n      boolean indentArrElems=false;\n      if (doIndent) {\n        // heuristic... TextField is probably the only field type likely to be long enough\n        // to warrant indenting individual values.\n        indentArrElems = (mvf.sfield.getType() instanceof TextField);\n      }\n\n      writeArrayOpener(-1); // no trivial way to determine array size\n      boolean firstArrElem=true;\n      incLevel();\n\n      for (Fieldable ff : mvf.fields) {\n        if (firstArrElem) {\n          firstArrElem=false;\n        } else {\n          writeArraySeparator();\n        }\n        if (indentArrElems) indent();\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n      decLevel();\n    }\n\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,first);\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    incLevel();\n\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    boolean first=true;\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        // not multi-valued, so write it immediately.\n        if (first) {\n          first=false;\n        } else {\n          writeMapSeparator();\n        }\n        indent();\n        writeKey(fname,true);\n        sf.write(this, fname, ff);\n      }\n    }\n\n    for(MultiValueField mvf : multi.values()) {\n      if (first) {\n        first=false;\n      } else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(mvf.sfield.getName(), true);\n\n      boolean indentArrElems=false;\n      if (doIndent) {\n        // heuristic... TextField is probably the only field type likely to be long enough\n        // to warrant indenting individual values.\n        indentArrElems = (mvf.sfield.getType() instanceof TextField);\n      }\n\n      writeArrayOpener(-1); // no trivial way to determine array size\n      boolean firstArrElem=true;\n      incLevel();\n\n      for (Fieldable ff : mvf.fields) {\n        if (firstArrElem) {\n          firstArrElem=false;\n        } else {\n          writeArraySeparator();\n        }\n        if (indentArrElems) indent();\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n      decLevel();\n    }\n\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,first);\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","pathOld":"src/java/org/apache/solr/response/JSONWriter[JSONResponseWriter]#writeDoc(String,Collection[Fieldable],Set[String],Map).mjava","sourceNew":"  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    incLevel();\n\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    boolean first=true;\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        // not multi-valued, so write it immediately.\n        if (first) {\n          first=false;\n        } else {\n          writeMapSeparator();\n        }\n        indent();\n        writeKey(fname,true);\n        sf.write(this, fname, ff);\n      }\n    }\n\n    for(MultiValueField mvf : multi.values()) {\n      if (first) {\n        first=false;\n      } else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(mvf.sfield.getName(), true);\n\n      boolean indentArrElems=false;\n      if (doIndent) {\n        // heuristic... TextField is probably the only field type likely to be long enough\n        // to warrant indenting individual values.\n        indentArrElems = (mvf.sfield.getType() instanceof TextField);\n      }\n\n      writeArrayOpener(-1); // no trivial way to determine array size\n      boolean firstArrElem=true;\n      incLevel();\n\n      for (Fieldable ff : mvf.fields) {\n        if (firstArrElem) {\n          firstArrElem=false;\n        } else {\n          writeArraySeparator();\n        }\n        if (indentArrElems) indent();\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n      decLevel();\n    }\n\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,first);\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","sourceOld":"  public void writeDoc(String name, Collection<Fieldable> fields, Set<String> returnFields, Map pseudoFields) throws IOException {\n    writeMapOpener(-1); // no trivial way to determine map size\n    incLevel();\n\n    HashMap<String, MultiValueField> multi = new HashMap<String, MultiValueField>();\n\n    boolean first=true;\n\n    for (Fieldable ff : fields) {\n      String fname = ff.name();\n      if (returnFields!=null && !returnFields.contains(fname)) {\n        continue;\n      }\n\n      // if the field is multivalued, it may have other values further on... so\n      // build up a list for each multi-valued field.\n      SchemaField sf = schema.getField(fname);\n      if (sf.multiValued()) {\n        MultiValueField mf = multi.get(fname);\n        if (mf==null) {\n          mf = new MultiValueField(sf, ff);\n          multi.put(fname, mf);\n        } else {\n          mf.fields.add(ff);\n        }\n      } else {\n        // not multi-valued, so write it immediately.\n        if (first) {\n          first=false;\n        } else {\n          writeMapSeparator();\n        }\n        indent();\n        writeKey(fname,true);\n        sf.write(this, fname, ff);\n      }\n    }\n\n    for(MultiValueField mvf : multi.values()) {\n      if (first) {\n        first=false;\n      } else {\n        writeMapSeparator();\n      }\n\n      indent();\n      writeKey(mvf.sfield.getName(), true);\n\n      boolean indentArrElems=false;\n      if (doIndent) {\n        // heuristic... TextField is probably the only field type likely to be long enough\n        // to warrant indenting individual values.\n        indentArrElems = (mvf.sfield.getType() instanceof TextField);\n      }\n\n      writeArrayOpener(-1); // no trivial way to determine array size\n      boolean firstArrElem=true;\n      incLevel();\n\n      for (Fieldable ff : mvf.fields) {\n        if (firstArrElem) {\n          firstArrElem=false;\n        } else {\n          writeArraySeparator();\n        }\n        if (indentArrElems) indent();\n        mvf.sfield.write(this, null, ff);\n      }\n      writeArrayCloser();\n      decLevel();\n    }\n\n    if (pseudoFields !=null && pseudoFields.size()>0) {\n      writeMap(null,pseudoFields,true,first);\n    }\n\n    decLevel();\n    writeMapCloser();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}