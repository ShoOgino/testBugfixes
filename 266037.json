{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","sourceNew":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    return qp;\n  }\n\n","sourceOld":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    return qp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","sourceNew":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, getDefaultField(), a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, getDefaultField(), a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    return qp;\n  }\n\n","sourceOld":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    return qp;\n  }\n\n","bugFix":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","sourceNew":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, getDefaultField(), a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, getDefaultField(), a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    return qp;\n  }\n\n","sourceOld":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    return qp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","sourceNew":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, getDefaultField(), a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, getDefaultField(), a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    return qp;\n  }\n\n","sourceOld":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, \"field\", a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    return qp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","sourceNew":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        getDefaultField(), a) : new ExtendableQueryParser(\n        getDefaultField(), a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    return qp;\n  }\n\n","sourceOld":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, getDefaultField(), a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, getDefaultField(), a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    return qp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","sourceNew":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, getDefaultField(), a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, getDefaultField(), a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    return qp;\n  }\n\n","sourceOld":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        getDefaultField(), a) : new ExtendableQueryParser(\n        getDefaultField(), a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    return qp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","sourceNew":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        getDefaultField(), a) : new ExtendableQueryParser(\n        getDefaultField(), a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    return qp;\n  }\n\n","sourceOld":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, getDefaultField(), a) : new ExtendableQueryParser(\n        TEST_VERSION_CURRENT, getDefaultField(), a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    return qp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"138a352a6d4e54824d0275bc7aa1b784e78c81fe","date":1467756222,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","sourceNew":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        getDefaultField(), a) : new ExtendableQueryParser(\n        getDefaultField(), a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    qp.setSplitOnWhitespace(splitOnWhitespace);\n    return qp;\n  }\n\n","sourceOld":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        getDefaultField(), a) : new ExtendableQueryParser(\n        getDefaultField(), a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    return qp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/ext/TestExtendableQueryParser#getParser(Analyzer,Extensions).mjava","sourceNew":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        getDefaultField(), a) : new ExtendableQueryParser(\n        getDefaultField(), a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    qp.setSplitOnWhitespace(splitOnWhitespace);\n    return qp;\n  }\n\n","sourceOld":"  public QueryParser getParser(Analyzer a, Extensions extensions)\n      throws Exception {\n    if (a == null)\n      a = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    QueryParser qp = extensions == null ? new ExtendableQueryParser(\n        getDefaultField(), a) : new ExtendableQueryParser(\n        getDefaultField(), a, extensions);\n    qp.setDefaultOperator(QueryParserBase.OR_OPERATOR);\n    return qp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["379db3ad24c4f0214f30a122265a6d6be003a99d","138a352a6d4e54824d0275bc7aa1b784e78c81fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["138a352a6d4e54824d0275bc7aa1b784e78c81fe"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["ff4227bb146f97aabae888091c19e48c88dbb0db","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"138a352a6d4e54824d0275bc7aa1b784e78c81fe":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["138a352a6d4e54824d0275bc7aa1b784e78c81fe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}