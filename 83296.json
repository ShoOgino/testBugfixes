{"path":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#expandDelimiterData().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#expandDelimiterData().mjava","pathOld":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/WordDictionary#expandDelimiterData().mjava","sourceNew":"  /**\n   * The original lexicon puts all information with punctuation into a \n   * chart (from 1 to 3755). Here it then gets expanded, separately being\n   * placed into the chart that has the corresponding symbol.\n   */\n  private void expandDelimiterData() {\n    int i;\n    int cnt;\n    // Punctuation then treating index 3755 as 1, \n    // distribute the original punctuation corresponding dictionary into \n    int delimiterIndex = 3755 + GB2312_FIRST_CHAR;\n    i = 0;\n    while (i < wordItem_charArrayTable[delimiterIndex].length) {\n      char c = wordItem_charArrayTable[delimiterIndex][i][0];\n      int j = getGB2312Id(c);// the id value of the punctuation\n      if (wordItem_charArrayTable[j] == null) {\n\n        int k = i;\n        // Starting from i, count the number of the following worditem symbol from j\n        while (k < wordItem_charArrayTable[delimiterIndex].length\n            && wordItem_charArrayTable[delimiterIndex][k][0] == c) {\n          k++;\n        }\n        // c is the punctuation character, j is the id value of c\n        // k-1 represents the index of the last punctuation character\n        cnt = k - i;\n        if (cnt != 0) {\n          wordItem_charArrayTable[j] = new char[cnt][];\n          wordItem_frequencyTable[j] = new int[cnt];\n        }\n\n        // Assign value for each wordItem.\n        for (k = 0; k < cnt; k++, i++) {\n          // wordItemTable[j][k] = new WordItem();\n          wordItem_frequencyTable[j][k] = wordItem_frequencyTable[delimiterIndex][i];\n          wordItem_charArrayTable[j][k] = new char[wordItem_charArrayTable[delimiterIndex][i].length - 1];\n          System.arraycopy(wordItem_charArrayTable[delimiterIndex][i], 1,\n              wordItem_charArrayTable[j][k], 0,\n              wordItem_charArrayTable[j][k].length);\n        }\n        setTableIndex(c, j);\n      }\n    }\n    // Delete the original corresponding symbol array.\n    wordItem_charArrayTable[delimiterIndex] = null;\n    wordItem_frequencyTable[delimiterIndex] = null;\n  }\n\n","sourceOld":"  /**\n   * The original lexicon puts all information with punctuation into a \n   * chart (from 1 to 3755). Here it then gets expanded, separately being\n   * placed into the chart that has the corresponding symbol.\n   */\n  private void expandDelimiterData() {\n    int i;\n    int cnt;\n    // Punctuation then treating index 3755 as 1, \n    // distribute the original punctuation corresponding dictionary into \n    int delimiterIndex = 3755 + GB2312_FIRST_CHAR;\n    i = 0;\n    while (i < wordItem_charArrayTable[delimiterIndex].length) {\n      char c = wordItem_charArrayTable[delimiterIndex][i][0];\n      int j = getGB2312Id(c);// the id value of the punctuation\n      if (wordItem_charArrayTable[j] == null) {\n\n        int k = i;\n        // Starting from i, count the number of the following worditem symbol from j\n        while (k < wordItem_charArrayTable[delimiterIndex].length\n            && wordItem_charArrayTable[delimiterIndex][k][0] == c) {\n          k++;\n        }\n        // c is the punctuation character, j is the id value of c\n        // k-1 represents the index of the last punctuation character\n        cnt = k - i;\n        if (cnt != 0) {\n          wordItem_charArrayTable[j] = new char[cnt][];\n          wordItem_frequencyTable[j] = new int[cnt];\n        }\n\n        // Assign value for each wordItem.\n        for (k = 0; k < cnt; k++, i++) {\n          // wordItemTable[j][k] = new WordItem();\n          wordItem_frequencyTable[j][k] = wordItem_frequencyTable[delimiterIndex][i];\n          wordItem_charArrayTable[j][k] = new char[wordItem_charArrayTable[delimiterIndex][i].length - 1];\n          System.arraycopy(wordItem_charArrayTable[delimiterIndex][i], 1,\n              wordItem_charArrayTable[j][k], 0,\n              wordItem_charArrayTable[j][k].length);\n        }\n        setTableIndex(c, j);\n      }\n    }\n    // Delete the original corresponding symbol array.\n    wordItem_charArrayTable[delimiterIndex] = null;\n    wordItem_frequencyTable[delimiterIndex] = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}