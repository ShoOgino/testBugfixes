{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,int,Directory,SegmentInfo,IOContext).mjava","commits":[{"id":"78e01dfecb43c655c49996aa6b1a9101bebf7f6c","date":1352485382,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,int,Directory,SegmentInfo,IOContext).mjava","pathOld":"/dev/null","sourceNew":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, int maxDoc, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD);\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        switch(dvType) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          readLine();\n          assert startsWith(PATTERN);\n          field.decoder = new DecimalFormat(stripPrefix(PATTERN), new DecimalFormatSymbols(Locale.ROOT));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = field.decoder.parse(stripPrefix(MAXLENGTH), new ParsePosition(0)).intValue();\n          data.seek(data.getFilePointer() + field.maxLength * maxDoc);\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n          // nocommit TODO\n          break;\n        case VAR_INTS:\n        case FIXED_INTS_8:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case FIXED_INTS_64:\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Integer.parseInt(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.decoder = new DecimalFormat(stripPrefix(PATTERN), new DecimalFormatSymbols(Locale.ROOT));\n          data.seek(data.getFilePointer() + field.maxLength * maxDoc);\n          break;\n        default:\n          break;\n        }\n        field.dataStartFilePointer = data.getFilePointer();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a1ae1ed52cd8aa4e2efeba6b0e4246e8b5a1123","date":1352485754,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#SimpleTextDocValuesReader(FieldInfos,int,Directory,SegmentInfo,IOContext).mjava","sourceNew":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n\n      int maxDoc = si.getDocCount();\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD);\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        switch(dvType) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = Integer.parseInt(stripPrefix(MAXLENGTH));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (9+field.pattern.length()+field.maxLength) * maxDoc);\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n          // nocommit TODO\n          break;\n        case VAR_INTS:\n        case FIXED_INTS_8:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case FIXED_INTS_64:\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Integer.parseInt(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.pattern = stripPrefix(PATTERN);\n          data.seek(data.getFilePointer() + (1+field.pattern.length()) * maxDoc);\n          break;\n        default:\n          break;\n        }\n        field.dataStartFilePointer = data.getFilePointer();\n      }\n    }\n\n","sourceOld":"    SimpleTextDocValuesReader(FieldInfos fieldInfos, int maxDoc, Directory dir, SegmentInfo si, IOContext context) throws IOException {\n      data = dir.openInput(IndexFileNames.segmentFileName(si.name, \"\", \"dat\"), context);\n\n      while(true) {\n        readLine();\n        if (scratch.equals(END)) {\n          break;\n        }\n        assert startsWith(FIELD);\n        String fieldName = stripPrefix(FIELD);\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(fieldName);\n        assert fieldInfo != null;\n\n        OneField field = new OneField();\n        fields.put(fieldName, field);\n\n        field.fieldInfo = fieldInfo;\n        \n        DocValues.Type dvType = fieldInfo.getDocValuesType();\n        assert dvType != null;\n        switch(dvType) {\n        case BYTES_VAR_STRAIGHT:\n        case BYTES_FIXED_STRAIGHT:\n          readLine();\n          assert startsWith(PATTERN);\n          field.decoder = new DecimalFormat(stripPrefix(PATTERN), new DecimalFormatSymbols(Locale.ROOT));\n          readLine();\n          assert startsWith(MAXLENGTH);\n          field.maxLength = field.decoder.parse(stripPrefix(MAXLENGTH), new ParsePosition(0)).intValue();\n          data.seek(data.getFilePointer() + field.maxLength * maxDoc);\n          break;\n        case BYTES_VAR_SORTED:\n        case BYTES_FIXED_SORTED:\n        case BYTES_VAR_DEREF:\n        case BYTES_FIXED_DEREF:\n          // nocommit TODO\n          break;\n        case VAR_INTS:\n        case FIXED_INTS_8:\n        case FIXED_INTS_16:\n        case FIXED_INTS_32:\n        case FIXED_INTS_64:\n          readLine();\n          assert startsWith(MINVALUE);\n          field.minValue = Integer.parseInt(stripPrefix(MINVALUE));\n          readLine();\n          assert startsWith(PATTERN);\n          field.decoder = new DecimalFormat(stripPrefix(PATTERN), new DecimalFormatSymbols(Locale.ROOT));\n          data.seek(data.getFilePointer() + field.maxLength * maxDoc);\n          break;\n        default:\n          break;\n        }\n        field.dataStartFilePointer = data.getFilePointer();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a1ae1ed52cd8aa4e2efeba6b0e4246e8b5a1123":["78e01dfecb43c655c49996aa6b1a9101bebf7f6c"],"78e01dfecb43c655c49996aa6b1a9101bebf7f6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78e01dfecb43c655c49996aa6b1a9101bebf7f6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a1ae1ed52cd8aa4e2efeba6b0e4246e8b5a1123":[],"78e01dfecb43c655c49996aa6b1a9101bebf7f6c":["3a1ae1ed52cd8aa4e2efeba6b0e4246e8b5a1123"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a1ae1ed52cd8aa4e2efeba6b0e4246e8b5a1123","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}