{"path":"lucene/core/src/java/org/apache/lucene/index/Norm#setType(Type).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Norm#setType(Type).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/Norm#setType(Type).mjava","sourceNew":"  private void setType(Type type) {\n    if (field != null) {\n      if (type != field.fieldType().docValueType()) {\n        throw new IllegalArgumentException(\"FieldType missmatch - expected \"+type+\" but was \" + field.fieldType().docValueType());\n      }\n    } else {\n      switch (type) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        this.field = new DocValuesField(\"\", new BytesRef(), type);\n        break;\n\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        this.field = new DocValuesField(\"\", 0, type);\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        this.field = new DocValuesField(\"\", 0f, type);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown Type: \" + type);\n      }\n    }\n  }\n\n","sourceOld":"  private void setType(Type type) {\n    if (field != null) {\n      if (type != field.fieldType().docValueType()) {\n        throw new IllegalArgumentException(\"FieldType missmatch - expected \"+type+\" but was \" + field.fieldType().docValueType());\n      }\n    } else {\n      switch (type) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        this.field = new DocValuesField(\"\", new BytesRef(), type);\n        break;\n\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        this.field = new DocValuesField(\"\", 0, type);\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        this.field = new DocValuesField(\"\", 0f, type);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown Type: \" + type);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","date":1336650316,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/Norm#setType(Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/Norm#setType(Type).mjava","sourceNew":"  private void setType(Type type) {\n    if (field != null) {\n      if (type != field.fieldType().docValueType()) {\n        throw new IllegalArgumentException(\"FieldType missmatch - expected \"+type+\" but was \" + field.fieldType().docValueType());\n      }\n    } else {\n\n      switch(type) {\n      case VAR_INTS:\n        field = new PackedLongDocValuesField(\"\", (long) 0);\n        break;\n      case FIXED_INTS_8:\n        field = new ByteDocValuesField(\"\", (byte) 0);\n        break;\n      case FIXED_INTS_16:\n        field = new ShortDocValuesField(\"\", (short) 0);\n        break;\n      case FIXED_INTS_32:\n        field = new IntDocValuesField(\"\", 0);\n        break;\n      case FIXED_INTS_64:\n        field = new LongDocValuesField(\"\", (byte) 0);\n        break;\n      case FLOAT_32:\n        field = new FloatDocValuesField(\"\", 0f);\n        break;\n      case FLOAT_64:\n        field = new DoubleDocValuesField(\"\", 0d);\n        break;\n      case BYTES_FIXED_STRAIGHT:\n        field = new StraightBytesDocValuesField(\"\", new BytesRef(), true);\n        break;\n      case BYTES_VAR_STRAIGHT:\n        field = new StraightBytesDocValuesField(\"\", new BytesRef(), false);\n        break;\n      case BYTES_FIXED_DEREF:\n        field = new DerefBytesDocValuesField(\"\", new BytesRef(), true);\n        break;\n      case BYTES_VAR_DEREF:\n        field = new DerefBytesDocValuesField(\"\", new BytesRef(), false);\n        break;\n      case BYTES_FIXED_SORTED:\n        field = new SortedBytesDocValuesField(\"\", new BytesRef(), true);\n        break;\n      case BYTES_VAR_SORTED:\n        field = new SortedBytesDocValuesField(\"\", new BytesRef(), false);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown Type: \" + type);\n      }\n    }\n  }\n\n","sourceOld":"  private void setType(Type type) {\n    if (field != null) {\n      if (type != field.fieldType().docValueType()) {\n        throw new IllegalArgumentException(\"FieldType missmatch - expected \"+type+\" but was \" + field.fieldType().docValueType());\n      }\n    } else {\n      switch (type) {\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        this.field = new DocValuesField(\"\", new BytesRef(), type);\n        break;\n\n      case FIXED_INTS_16:\n      case FIXED_INTS_32:\n      case FIXED_INTS_64:\n      case FIXED_INTS_8:\n      case VAR_INTS:\n        this.field = new DocValuesField(\"\", 0, type);\n        break;\n      case FLOAT_32:\n      case FLOAT_64:\n        this.field = new DocValuesField(\"\", 0f, type);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown Type: \" + type);\n      }\n    }\n  }\n\n","bugFix":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/Norm#setType(Type).mjava","sourceNew":null,"sourceOld":"  private void setType(Type type) {\n    if (field != null) {\n      if (type != field.fieldType().docValueType()) {\n        throw new IllegalArgumentException(\"FieldType missmatch - expected \"+type+\" but was \" + field.fieldType().docValueType());\n      }\n    } else {\n\n      switch(type) {\n      case VAR_INTS:\n        field = new PackedLongDocValuesField(\"\", (long) 0);\n        break;\n      case FIXED_INTS_8:\n        field = new ByteDocValuesField(\"\", (byte) 0);\n        break;\n      case FIXED_INTS_16:\n        field = new ShortDocValuesField(\"\", (short) 0);\n        break;\n      case FIXED_INTS_32:\n        field = new IntDocValuesField(\"\", 0);\n        break;\n      case FIXED_INTS_64:\n        field = new LongDocValuesField(\"\", (byte) 0);\n        break;\n      case FLOAT_32:\n        field = new FloatDocValuesField(\"\", 0f);\n        break;\n      case FLOAT_64:\n        field = new DoubleDocValuesField(\"\", 0d);\n        break;\n      case BYTES_FIXED_STRAIGHT:\n        field = new StraightBytesDocValuesField(\"\", new BytesRef(), true);\n        break;\n      case BYTES_VAR_STRAIGHT:\n        field = new StraightBytesDocValuesField(\"\", new BytesRef(), false);\n        break;\n      case BYTES_FIXED_DEREF:\n        field = new DerefBytesDocValuesField(\"\", new BytesRef(), true);\n        break;\n      case BYTES_VAR_DEREF:\n        field = new DerefBytesDocValuesField(\"\", new BytesRef(), false);\n        break;\n      case BYTES_FIXED_SORTED:\n        field = new SortedBytesDocValuesField(\"\", new BytesRef(), true);\n        break;\n      case BYTES_VAR_SORTED:\n        field = new SortedBytesDocValuesField(\"\", new BytesRef(), false);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown Type: \" + type);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/Norm#setType(Type).mjava","sourceNew":null,"sourceOld":"  private void setType(Type type) {\n    if (field != null) {\n      if (type != field.fieldType().docValueType()) {\n        throw new IllegalArgumentException(\"FieldType missmatch - expected \"+type+\" but was \" + field.fieldType().docValueType());\n      }\n    } else {\n\n      switch(type) {\n      case VAR_INTS:\n        field = new PackedLongDocValuesField(\"\", (long) 0);\n        break;\n      case FIXED_INTS_8:\n        field = new ByteDocValuesField(\"\", (byte) 0);\n        break;\n      case FIXED_INTS_16:\n        field = new ShortDocValuesField(\"\", (short) 0);\n        break;\n      case FIXED_INTS_32:\n        field = new IntDocValuesField(\"\", 0);\n        break;\n      case FIXED_INTS_64:\n        field = new LongDocValuesField(\"\", (byte) 0);\n        break;\n      case FLOAT_32:\n        field = new FloatDocValuesField(\"\", 0f);\n        break;\n      case FLOAT_64:\n        field = new DoubleDocValuesField(\"\", 0d);\n        break;\n      case BYTES_FIXED_STRAIGHT:\n        field = new StraightBytesDocValuesField(\"\", new BytesRef(), true);\n        break;\n      case BYTES_VAR_STRAIGHT:\n        field = new StraightBytesDocValuesField(\"\", new BytesRef(), false);\n        break;\n      case BYTES_FIXED_DEREF:\n        field = new DerefBytesDocValuesField(\"\", new BytesRef(), true);\n        break;\n      case BYTES_VAR_DEREF:\n        field = new DerefBytesDocValuesField(\"\", new BytesRef(), false);\n        break;\n      case BYTES_FIXED_SORTED:\n        field = new SortedBytesDocValuesField(\"\", new BytesRef(), true);\n        break;\n      case BYTES_VAR_SORTED:\n        field = new SortedBytesDocValuesField(\"\", new BytesRef(), false);\n        break;\n      default:\n        throw new IllegalArgumentException(\"unknown Type: \" + type);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","0837ab0472feecb3a54260729d845f839e1cbd72"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}