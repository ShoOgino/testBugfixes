{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   *\n   * <p>Takes effect immediately, but only applies to newly\n   *  flushed/merged segments. */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   *\n   * <p>Takes effect immediately, but only applies to newly\n   *  flushed/merged segments. */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4e54ed7cef46f86888b5fb547594f62160395c","date":1340006971,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":"  @Override\n  public IndexWriterConfig setTermIndexInterval(int interval) {\n    return (IndexWriterConfig) super.setTermIndexInterval(interval);\n  }\n\n","sourceOld":"  /**\n   * Expert: set the interval between indexed terms. Large values cause less\n   * memory to be used by IndexReader, but slow random-access to terms. Small\n   * values cause more memory to be used by an IndexReader, and speed\n   * random-access to terms.\n   * <p>\n   * This parameter determines the amount of computation required per query\n   * term, regardless of the number of documents that contain that term. In\n   * particular, it is the maximum number of other terms that must be scanned\n   * before a term is located and its frequency and position information may be\n   * processed. In a large index with user-entered query terms, query processing\n   * time is likely to be dominated not by term lookup but rather by the\n   * processing of frequency and positional data. In a small index or when many\n   * uncommon query terms are generated (e.g., by wildcard queries) term lookup\n   * may become a dominant cost.\n   * <p>\n   * In particular, <code>numUniqueTerms/interval</code> terms are read into\n   * memory by an IndexReader, and, on average, <code>interval/2</code> terms\n   * must be scanned for each random term access.\n   *\n   * @see #DEFAULT_TERM_INDEX_INTERVAL\n   *\n   * <p>Takes effect immediately, but only applies to newly\n   *  flushed/merged segments. */\n  public IndexWriterConfig setTermIndexInterval(int interval) { // TODO: this should be private to the codec, not settable here\n    this.termIndexInterval = interval;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public IndexWriterConfig setTermIndexInterval(int interval) {\n    return (IndexWriterConfig) super.setTermIndexInterval(interval);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setTermIndexInterval(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public IndexWriterConfig setTermIndexInterval(int interval) {\n    return (IndexWriterConfig) super.setTermIndexInterval(interval);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a45bec74b98f6fc05f52770cfb425739e6563960":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f4e54ed7cef46f86888b5fb547594f62160395c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a45bec74b98f6fc05f52770cfb425739e6563960"]},"commit2Childs":{"a45bec74b98f6fc05f52770cfb425739e6563960":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4e54ed7cef46f86888b5fb547594f62160395c":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}