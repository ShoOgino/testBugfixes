{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkReturnValsForEmpty(String[]).mjava","commits":[{"id":"f8c0e05ed2dea5beb7c0246a2a6e68f28595357b","date":1479136768,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkReturnValsForEmpty(String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkReturnValsForEmpty(String[] fields) throws IOException {\n\n    Set<String> voids = new HashSet<>(Arrays.asList(voidIds));\n\n    StringBuilder fl = new StringBuilder(\"id\");\n    for (String f : fields) {\n      fl.append(\",\").append(f);\n    }\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", fl.toString(), \"sort\", \"id asc\");\n\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTION, sParams)) {\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n\n      for (Tuple tuple : tuples) {\n        String id = tuple.getString(\"id\");\n        if (voids.contains(id)) {\n          for (String f : fields) {\n            assertNull(\"Should have returned a void for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        } else {\n          for (String f : fields) {\n            assertNotNull(\"Should have returned a value for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8243e301531f97de264740d6afa71de6781dd64","date":1479139589,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkReturnValsForEmpty(String[]).mjava","pathOld":"/dev/null","sourceNew":"  private void checkReturnValsForEmpty(String[] fields) throws IOException {\n\n    Set<String> voids = new HashSet<>(Arrays.asList(voidIds));\n\n    StringBuilder fl = new StringBuilder(\"id\");\n    for (String f : fields) {\n      fl.append(\",\").append(f);\n    }\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", fl.toString(), \"sort\", \"id asc\");\n\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTION, sParams)) {\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n\n      for (Tuple tuple : tuples) {\n        String id = tuple.getString(\"id\");\n        if (voids.contains(id)) {\n          for (String f : fields) {\n            assertNull(\"Should have returned a void for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        } else {\n          for (String f : fields) {\n            assertNotNull(\"Should have returned a value for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkReturnValsForEmpty(String[]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkReturnValsForEmpty(String[]).mjava","sourceNew":"  private void checkReturnValsForEmpty(String[] fields) throws IOException {\n\n    Set<String> voids = new HashSet<>(Arrays.asList(voidIds));\n\n    StringBuilder fl = new StringBuilder(\"id\");\n    for (String f : fields) {\n      fl.append(\",\").append(f);\n    }\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", fl.toString(), \"sort\", \"id asc\");\n\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams)) {\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n\n      for (Tuple tuple : tuples) {\n        String id = tuple.getString(\"id\");\n        if (voids.contains(id)) {\n          for (String f : fields) {\n            assertNull(\"Should have returned a void for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        } else {\n          for (String f : fields) {\n            assertNotNull(\"Should have returned a value for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkReturnValsForEmpty(String[] fields) throws IOException {\n\n    Set<String> voids = new HashSet<>(Arrays.asList(voidIds));\n\n    StringBuilder fl = new StringBuilder(\"id\");\n    for (String f : fields) {\n      fl.append(\",\").append(f);\n    }\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", fl.toString(), \"sort\", \"id asc\");\n\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTION, sParams)) {\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n\n      for (Tuple tuple : tuples) {\n        String id = tuple.getString(\"id\");\n        if (voids.contains(id)) {\n          for (String f : fields) {\n            assertNull(\"Should have returned a void for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        } else {\n          for (String f : fields) {\n            assertNotNull(\"Should have returned a value for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkReturnValsForEmpty(String[]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkReturnValsForEmpty(String[]).mjava","sourceNew":"  private void checkReturnValsForEmpty(String[] fields) throws IOException {\n\n    Set<String> voids = new HashSet<>(Arrays.asList(voidIds));\n\n    StringBuilder fl = new StringBuilder(\"id\");\n    for (String f : fields) {\n      fl.append(\",\").append(f);\n    }\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", fl.toString(), \"sort\", \"id asc\");\n\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams)) {\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n\n      for (Tuple tuple : tuples) {\n        String id = tuple.getString(\"id\");\n        if (voids.contains(id)) {\n          for (String f : fields) {\n            assertNull(\"Should have returned a void for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        } else {\n          for (String f : fields) {\n            assertNotNull(\"Should have returned a value for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkReturnValsForEmpty(String[] fields) throws IOException {\n\n    Set<String> voids = new HashSet<>(Arrays.asList(voidIds));\n\n    StringBuilder fl = new StringBuilder(\"id\");\n    for (String f : fields) {\n      fl.append(\",\").append(f);\n    }\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", fl.toString(), \"sort\", \"id asc\");\n\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTION, sParams)) {\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n\n      for (Tuple tuple : tuples) {\n        String id = tuple.getString(\"id\");\n        if (voids.contains(id)) {\n          for (String f : fields) {\n            assertNull(\"Should have returned a void for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        } else {\n          for (String f : fields) {\n            assertNotNull(\"Should have returned a value for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c405288c4553ffb50ab8ca5adbdde9881bcec4e4","date":1491938682,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkReturnValsForEmpty(String[]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkReturnValsForEmpty(String[]).mjava","sourceNew":"  private void checkReturnValsForEmpty(String[] fields) throws IOException {\n\n    Set<String> voids = new HashSet<>(Arrays.asList(voidIds));\n\n    StringBuilder fl = new StringBuilder(\"id\");\n    for (String f : fields) {\n      fl.append(\",\").append(f);\n    }\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", fl.toString(), \"sort\", \"id asc\");\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams)) {\n      solrStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n\n      for (Tuple tuple : tuples) {\n        String id = tuple.getString(\"id\");\n        if (voids.contains(id)) {\n          for (String f : fields) {\n            assertNull(\"Should have returned a void for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        } else {\n          for (String f : fields) {\n            assertNotNull(\"Should have returned a value for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        }\n      }\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  private void checkReturnValsForEmpty(String[] fields) throws IOException {\n\n    Set<String> voids = new HashSet<>(Arrays.asList(voidIds));\n\n    StringBuilder fl = new StringBuilder(\"id\");\n    for (String f : fields) {\n      fl.append(\",\").append(f);\n    }\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", fl.toString(), \"sort\", \"id asc\");\n\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams)) {\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n\n      for (Tuple tuple : tuples) {\n        String id = tuple.getString(\"id\");\n        if (voids.contains(id)) {\n          for (String f : fields) {\n            assertNull(\"Should have returned a void for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        } else {\n          for (String f : fields) {\n            assertNotNull(\"Should have returned a value for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkReturnValsForEmpty(String[]).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#checkReturnValsForEmpty(String[]).mjava","sourceNew":"  private void checkReturnValsForEmpty(String[] fields) throws IOException {\n\n    Set<String> voids = new HashSet<>(Arrays.asList(voidIds));\n\n    StringBuilder fl = new StringBuilder(\"id\");\n    for (String f : fields) {\n      fl.append(\",\").append(f);\n    }\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", fl.toString(), \"sort\", \"id asc\");\n\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams)) {\n      solrStream.setStreamContext(streamContext);\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n\n      for (Tuple tuple : tuples) {\n        String id = tuple.getString(\"id\");\n        if (voids.contains(id)) {\n          for (String f : fields) {\n            assertNull(\"Should have returned a void for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        } else {\n          for (String f : fields) {\n            assertNotNull(\"Should have returned a value for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        }\n      }\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  private void checkReturnValsForEmpty(String[] fields) throws IOException {\n\n    Set<String> voids = new HashSet<>(Arrays.asList(voidIds));\n\n    StringBuilder fl = new StringBuilder(\"id\");\n    for (String f : fields) {\n      fl.append(\",\").append(f);\n    }\n    SolrParams sParams = mapParams(\"q\", \"*:*\", \"qt\", \"/export\", \"fl\", fl.toString(), \"sort\", \"id asc\");\n\n    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParams)) {\n      List<Tuple> tuples = getTuples(solrStream);\n      assertEquals(\"There should be exactly 32 responses returned\", 32, tuples.size());\n\n      for (Tuple tuple : tuples) {\n        String id = tuple.getString(\"id\");\n        if (voids.contains(id)) {\n          for (String f : fields) {\n            assertNull(\"Should have returned a void for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        } else {\n          for (String f : fields) {\n            assertNotNull(\"Should have returned a value for field \" + f + \" doc \" + id, tuple.get(f));\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["8c969f15cd04d31e520319c619a445ae21f02d72"],"c8243e301531f97de264740d6afa71de6781dd64":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8c0e05ed2dea5beb7c0246a2a6e68f28595357b"],"f8c0e05ed2dea5beb7c0246a2a6e68f28595357b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["8c969f15cd04d31e520319c619a445ae21f02d72"],"8c969f15cd04d31e520319c619a445ae21f02d72":["f8c0e05ed2dea5beb7c0246a2a6e68f28595357b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c405288c4553ffb50ab8ca5adbdde9881bcec4e4"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"c8243e301531f97de264740d6afa71de6781dd64":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"f8c0e05ed2dea5beb7c0246a2a6e68f28595357b":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c8243e301531f97de264740d6afa71de6781dd64","f8c0e05ed2dea5beb7c0246a2a6e68f28595357b"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"c405288c4553ffb50ab8ca5adbdde9881bcec4e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8c969f15cd04d31e520319c619a445ae21f02d72":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","c405288c4553ffb50ab8ca5adbdde9881bcec4e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}