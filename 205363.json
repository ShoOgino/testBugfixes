{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DerivativeEvaluator#doWork(Object).mjava","commits":[{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DerivativeEvaluator#doWork(Object).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException {\n    if (null == value) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n    }\n\n    if (!(value instanceof VectorFunction)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a FunctionVector\", toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n\n    VectorFunction vectorFunction = (VectorFunction) value;\n    if(!(vectorFunction.getFunction() instanceof DifferentiableUnivariateFunction)) {\n      throw new IOException(\"Cannot evaluate derivative from parameter.\");\n    }\n\n    DifferentiableUnivariateFunction func = (DifferentiableUnivariateFunction)vectorFunction.getFunction();\n    double[] x = (double[])vectorFunction.getFromContext(\"x\");\n    UnivariateFunction derfunc = func.derivative();\n    double[] dvalues = new double[x.length];\n    for(int i=0; i<x.length; i++) {\n      dvalues[i] = derfunc.value(x[i]);\n    }\n\n    VectorFunction vf = new VectorFunction(derfunc, dvalues);\n    vf.addToContext(\"x\", x);\n    vf.addToContext(\"y\", vectorFunction.getFromContext(\"y\"));\n\n    return vf;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6331fb5344e3d737be63af3a7bd470ee133004a","date":1569798100,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DerivativeEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DerivativeEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException {\n    if (null == value) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n    }\n\n    if (!(value instanceof VectorFunction)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a FunctionVector\", toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n\n    VectorFunction vectorFunction = (VectorFunction) value;\n\n    DifferentiableUnivariateFunction func = null;\n    double[] x = (double[])vectorFunction.getFromContext(\"x\");\n\n    if(!(vectorFunction.getFunction() instanceof DifferentiableUnivariateFunction)) {\n      double[] y = (double[])vectorFunction.getFromContext(\"y\");\n      func = new AkimaSplineInterpolator().interpolate(x, y);\n    } else {\n      func = (DifferentiableUnivariateFunction) vectorFunction.getFunction();\n    }\n\n    UnivariateFunction derfunc = func.derivative();\n    double[] dvalues = new double[x.length];\n    for(int i=0; i<x.length; i++) {\n      dvalues[i] = derfunc.value(x[i]);\n    }\n\n    VectorFunction vf = new VectorFunction(derfunc, dvalues);\n    vf.addToContext(\"x\", x);\n    vf.addToContext(\"y\", dvalues);\n\n    return vf;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException {\n    if (null == value) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n    }\n\n    if (!(value instanceof VectorFunction)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a FunctionVector\", toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n\n    VectorFunction vectorFunction = (VectorFunction) value;\n    if(!(vectorFunction.getFunction() instanceof DifferentiableUnivariateFunction)) {\n      throw new IOException(\"Cannot evaluate derivative from parameter.\");\n    }\n\n    DifferentiableUnivariateFunction func = (DifferentiableUnivariateFunction)vectorFunction.getFunction();\n    double[] x = (double[])vectorFunction.getFromContext(\"x\");\n    UnivariateFunction derfunc = func.derivative();\n    double[] dvalues = new double[x.length];\n    for(int i=0; i<x.length; i++) {\n      dvalues[i] = derfunc.value(x[i]);\n    }\n\n    VectorFunction vf = new VectorFunction(derfunc, dvalues);\n    vf.addToContext(\"x\", x);\n    vf.addToContext(\"y\", vectorFunction.getFromContext(\"y\"));\n\n    return vf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b9f74021389e2b32ee750fa5a24281c87951ec3","date":1569845983,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DerivativeEvaluator#doWork(Object).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/DerivativeEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object value) throws IOException {\n    if (null == value) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n    }\n\n    if (!(value instanceof VectorFunction)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a FunctionVector\", toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n\n    VectorFunction vectorFunction = (VectorFunction) value;\n\n    DifferentiableUnivariateFunction func = null;\n    double[] x = (double[])vectorFunction.getFromContext(\"x\");\n\n    if(!(vectorFunction.getFunction() instanceof DifferentiableUnivariateFunction)) {\n      double[] y = (double[])vectorFunction.getFromContext(\"y\");\n      func = new AkimaSplineInterpolator().interpolate(x, y);\n    } else {\n      func = (DifferentiableUnivariateFunction) vectorFunction.getFunction();\n    }\n\n    UnivariateFunction derfunc = func.derivative();\n    double[] dvalues = new double[x.length];\n    for(int i=0; i<x.length; i++) {\n      dvalues[i] = derfunc.value(x[i]);\n    }\n\n    VectorFunction vf = new VectorFunction(derfunc, dvalues);\n    vf.addToContext(\"x\", x);\n    vf.addToContext(\"y\", dvalues);\n\n    return vf;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException {\n    if (null == value) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - null found for the first value\", toExpression(constructingFactory)));\n    }\n\n    if (!(value instanceof VectorFunction)) {\n      throw new IOException(String.format(Locale.ROOT, \"Invalid expression %s - found type %s for the first value, expecting a FunctionVector\", toExpression(constructingFactory), value.getClass().getSimpleName()));\n    }\n\n    VectorFunction vectorFunction = (VectorFunction) value;\n    if(!(vectorFunction.getFunction() instanceof DifferentiableUnivariateFunction)) {\n      throw new IOException(\"Cannot evaluate derivative from parameter.\");\n    }\n\n    DifferentiableUnivariateFunction func = (DifferentiableUnivariateFunction)vectorFunction.getFunction();\n    double[] x = (double[])vectorFunction.getFromContext(\"x\");\n    UnivariateFunction derfunc = func.derivative();\n    double[] dvalues = new double[x.length];\n    for(int i=0; i<x.length; i++) {\n      dvalues[i] = derfunc.value(x[i]);\n    }\n\n    VectorFunction vf = new VectorFunction(derfunc, dvalues);\n    vf.addToContext(\"x\", x);\n    vf.addToContext(\"y\", vectorFunction.getFromContext(\"y\"));\n\n    return vf;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6331fb5344e3d737be63af3a7bd470ee133004a":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","b6331fb5344e3d737be63af3a7bd470ee133004a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b6331fb5344e3d737be63af3a7bd470ee133004a"]},"commit2Childs":{"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["b6331fb5344e3d737be63af3a7bd470ee133004a","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"b6331fb5344e3d737be63af3a7bd470ee133004a":["4b9f74021389e2b32ee750fa5a24281c87951ec3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4b9f74021389e2b32ee750fa5a24281c87951ec3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}