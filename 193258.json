{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrWriter#log(int,String,Object).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrWriter#log(int,String,Object).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter#log(int,String,Object).mjava","sourceNew":"  /**\n   * This method is used for verbose debugging\n   *\n   * @param event The event name start.entity ,end.entity ,transformer.row\n   * @param name  Name of the entity/transformer\n   * @param row   The actual data . Can be a Map<String,object> or a List<Map<String,object>>\n   */\n  public void log(int event, String name, Object row) {\n    getDebugLogger().log(event, name, row);\n  }\n\n","sourceOld":"  /**\n   * This method is used for verbose debugging\n   *\n   * @param event The event name start.entity ,end.entity ,transformer.row\n   * @param name  Name of the entity/transformer\n   * @param row   The actual data . Can be a Map<String,object> or a List<Map<String,object>>\n   */\n  public void log(int event, String name, Object row) {\n    getDebugLogger().log(event, name, row);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrWriter#log(int,String,Object).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/SolrWriter#log(int,String,Object).mjava","sourceNew":"  /**\n   * This method is used for verbose debugging\n   *\n   * @param event The event name start.entity ,end.entity ,transformer.row\n   * @param name  Name of the entity/transformer\n   * @param row   The actual data . Can be a Map<String,object> or a List<Map<String,object>>\n   */\n  public void log(int event, String name, Object row) {\n    getDebugLogger().log(event, name, row);\n  }\n\n","sourceOld":"  /**\n   * This method is used for verbose debugging\n   *\n   * @param event The event name start.entity ,end.entity ,transformer.row\n   * @param name  Name of the entity/transformer\n   * @param row   The actual data . Can be a Map<String,object> or a List<Map<String,object>>\n   */\n  public void log(int event, String name, Object row) {\n    getDebugLogger().log(event, name, row);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a136026dd5340a1feb1e3efd8cafe390616c1d8","date":1311317263,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrWriter#log(int,String,Object).mjava","sourceNew":null,"sourceOld":"  /**\n   * This method is used for verbose debugging\n   *\n   * @param event The event name start.entity ,end.entity ,transformer.row\n   * @param name  Name of the entity/transformer\n   * @param row   The actual data . Can be a Map<String,object> or a List<Map<String,object>>\n   */\n  public void log(int event, String name, Object row) {\n    getDebugLogger().log(event, name, row);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a136026dd5340a1feb1e3efd8cafe390616c1d8":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a136026dd5340a1feb1e3efd8cafe390616c1d8"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7a136026dd5340a1feb1e3efd8cafe390616c1d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"7a136026dd5340a1feb1e3efd8cafe390616c1d8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}