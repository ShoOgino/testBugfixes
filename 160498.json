{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermVector#incrementToken().mjava","commits":[{"id":"714aa8d007eef87d7203cfc6e0fe4dab8dd8a497","date":1417181893,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermVector#incrementToken().mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermPositionVector#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() {\n    if (incrementToken == null) {\n      incrementToken = firstToken;\n      if (incrementToken == null) {\n        return false;\n      }\n    } else if (incrementToken.next != null) {\n      incrementToken = incrementToken.next;\n    } else {\n      return false;\n    }\n    clearAttributes();\n    termAttribute.copyBuffer(incrementToken.termChars, 0, incrementToken.termCharsLen);\n    positionIncrementAttribute.setPositionIncrement(incrementToken.positionIncrement);\n    if (offsetAttribute != null) {\n      offsetAttribute.setOffset(incrementToken.startOffset, incrementToken.endOffset);\n    }\n    if (payloadAttribute != null) {\n      payloadAttribute.setPayload(incrementToken.payload);\n    }\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() {\n    if (incrementToken == null) {\n      incrementToken = firstToken;\n      if (incrementToken == null) {\n        return false;\n      }\n    } else if (incrementToken.next != null) {\n      incrementToken = incrementToken.next;\n    } else {\n      return false;\n    }\n    clearAttributes();\n    termAttribute.copyBuffer(incrementToken.termChars, 0, incrementToken.termCharsLen);\n    positionIncrementAttribute.setPositionIncrement(incrementToken.positionIncrement);\n    if (offsetAttribute != null) {\n      offsetAttribute.setOffset(incrementToken.startOffset, incrementToken.endOffset);\n    }\n    if (payloadAttribute != null) {\n      payloadAttribute.setPayload(incrementToken.payload);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4dc0de75e60c6f90667efd23879e863f5b1ca46e","date":1419308055,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermVector#incrementToken().mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermVector#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (incrementToken == null) {\n      if (!initialized) {\n        init();\n        assert initialized;\n      }\n      incrementToken = firstToken;\n      if (incrementToken == null) {\n        return false;\n      }\n    } else if (incrementToken.next != null) {\n      incrementToken = incrementToken.next;\n    } else {\n      return false;\n    }\n    clearAttributes();\n    termAttribute.copyBuffer(incrementToken.termChars, 0, incrementToken.termCharsLen);\n    positionIncrementAttribute.setPositionIncrement(incrementToken.positionIncrement);\n    if (offsetAttribute != null) {\n      offsetAttribute.setOffset(incrementToken.startOffset, incrementToken.endOffset);\n    }\n    if (payloadAttribute != null) {\n      if (incrementToken.payloadIndex == -1) {\n        payloadAttribute.setPayload(null);\n      } else {\n        payloadAttribute.setPayload(payloadsBytesRefArray.get(spareBytesRefBuilder, incrementToken.payloadIndex));\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() {\n    if (incrementToken == null) {\n      incrementToken = firstToken;\n      if (incrementToken == null) {\n        return false;\n      }\n    } else if (incrementToken.next != null) {\n      incrementToken = incrementToken.next;\n    } else {\n      return false;\n    }\n    clearAttributes();\n    termAttribute.copyBuffer(incrementToken.termChars, 0, incrementToken.termCharsLen);\n    positionIncrementAttribute.setPositionIncrement(incrementToken.positionIncrement);\n    if (offsetAttribute != null) {\n      offsetAttribute.setOffset(incrementToken.startOffset, incrementToken.endOffset);\n    }\n    if (payloadAttribute != null) {\n      payloadAttribute.setPayload(incrementToken.payload);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd5cb61545fbf8394e449204e9780415b9f4c6fc","date":1429738516,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermVector#incrementToken().mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/TokenStreamFromTermVector#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (incrementToken == null) {\n      if (!initialized) {\n        init();\n        assert initialized;\n      }\n      incrementToken = firstToken;\n      if (incrementToken == null) {\n        return false;\n      }\n    } else if (incrementToken.next != null) {\n      incrementToken = incrementToken.next;\n    } else {\n      return false;\n    }\n    clearAttributes();\n    termAttribute.copyBuffer(termCharsBuilder.chars(), incrementToken.termCharsOff, incrementToken.termCharsLen);\n    positionIncrementAttribute.setPositionIncrement(incrementToken.positionIncrement);\n    if (offsetAttribute != null) {\n      offsetAttribute.setOffset(incrementToken.startOffset, incrementToken.startOffset + incrementToken.endOffsetInc);\n    }\n    if (payloadAttribute != null) {\n      if (incrementToken.payloadIndex == -1) {\n        payloadAttribute.setPayload(null);\n      } else {\n        payloadAttribute.setPayload(payloadsBytesRefArray.get(spareBytesRefBuilder, incrementToken.payloadIndex));\n      }\n    }\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (incrementToken == null) {\n      if (!initialized) {\n        init();\n        assert initialized;\n      }\n      incrementToken = firstToken;\n      if (incrementToken == null) {\n        return false;\n      }\n    } else if (incrementToken.next != null) {\n      incrementToken = incrementToken.next;\n    } else {\n      return false;\n    }\n    clearAttributes();\n    termAttribute.copyBuffer(incrementToken.termChars, 0, incrementToken.termCharsLen);\n    positionIncrementAttribute.setPositionIncrement(incrementToken.positionIncrement);\n    if (offsetAttribute != null) {\n      offsetAttribute.setOffset(incrementToken.startOffset, incrementToken.endOffset);\n    }\n    if (payloadAttribute != null) {\n      if (incrementToken.payloadIndex == -1) {\n        payloadAttribute.setPayload(null);\n      } else {\n        payloadAttribute.setPayload(payloadsBytesRefArray.get(spareBytesRefBuilder, incrementToken.payloadIndex));\n      }\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"714aa8d007eef87d7203cfc6e0fe4dab8dd8a497":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd5cb61545fbf8394e449204e9780415b9f4c6fc":["4dc0de75e60c6f90667efd23879e863f5b1ca46e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4dc0de75e60c6f90667efd23879e863f5b1ca46e":["714aa8d007eef87d7203cfc6e0fe4dab8dd8a497"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd5cb61545fbf8394e449204e9780415b9f4c6fc"]},"commit2Childs":{"714aa8d007eef87d7203cfc6e0fe4dab8dd8a497":["4dc0de75e60c6f90667efd23879e863f5b1ca46e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["714aa8d007eef87d7203cfc6e0fe4dab8dd8a497"],"dd5cb61545fbf8394e449204e9780415b9f4c6fc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4dc0de75e60c6f90667efd23879e863f5b1ca46e":["dd5cb61545fbf8394e449204e9780415b9f4c6fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}