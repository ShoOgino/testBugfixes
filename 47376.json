{"path":"solr/core/src/test/org/apache/solr/cloud/TestCollectionsAPIViaSolrCloudCluster#createCollection(String,String).mjava","commits":[{"id":"5719bfb2650ba43855e20564d39873bbbdc7f02c","date":1500676092,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionsAPIViaSolrCloudCluster#createCollection(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(String collectionName, String createNodeSet) throws Exception {\n    if (random().nextBoolean()) { // process asynchronously\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(cluster.getSolrClient(), 30);\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(cluster.getSolrClient());\n    }\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish\n        (collectionName, cluster.getSolrClient().getZkStateReader(), true, true, 330);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionsAPIViaSolrCloudCluster#createCollection(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(String collectionName, String createNodeSet) throws Exception {\n    if (random().nextBoolean()) { // process asynchronously\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(cluster.getSolrClient(), 30);\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(cluster.getSolrClient());\n    }\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish\n        (collectionName, cluster.getSolrClient().getZkStateReader(), true, true, 330);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCollectionsAPIViaSolrCloudCluster#createCollection(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(String collectionName, String createNodeSet) throws Exception {\n    if (random().nextBoolean()) { // process asynchronously\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(cluster.getSolrClient(), 30);\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(cluster.getSolrClient());\n    }\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish\n        (collectionName, cluster.getSolrClient().getZkStateReader(), true, true, 330);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#createCollection(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionsAPIViaSolrCloudCluster#createCollection(String,String).mjava","sourceNew":"  private void createCollection(String collectionName, String createNodeSet) throws Exception {\n    if (random().nextBoolean()) { // process asynchronously\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(cluster.getSolrClient(), 30);\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(cluster.getSolrClient());\n    }\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish\n        (collectionName, cluster.getSolrClient().getZkStateReader(), true, true, 330);\n  }\n\n","sourceOld":"  private void createCollection(String collectionName, String createNodeSet) throws Exception {\n    if (random().nextBoolean()) { // process asynchronously\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(cluster.getSolrClient(), 30);\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(cluster.getSolrClient());\n    }\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish\n        (collectionName, cluster.getSolrClient().getZkStateReader(), true, true, 330);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionsAPIViaSolrCloudCluster#createCollection(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCollectionsAPIViaSolrCloudCluster#createCollection(String,String).mjava","sourceNew":"  private void createCollection(String collectionName, String createNodeSet) throws Exception {\n    if (random().nextBoolean()) { // process asynchronously\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(cluster.getSolrClient(), 30);\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(cluster.getSolrClient());\n    }\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish\n        (collectionName, cluster.getSolrClient().getZkStateReader(), true, true, 330);\n  }\n\n","sourceOld":"  private void createCollection(String collectionName, String createNodeSet) throws Exception {\n    if (random().nextBoolean()) { // process asynchronously\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .processAndWait(cluster.getSolrClient(), 30);\n    }\n    else {\n      CollectionAdminRequest.createCollection(collectionName, configName, numShards, numReplicas)\n          .setMaxShardsPerNode(maxShardsPerNode)\n          .setCreateNodeSet(createNodeSet)\n          .setProperties(collectionProperties)\n          .process(cluster.getSolrClient());\n    }\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish\n        (collectionName, cluster.getSolrClient().getZkStateReader(), true, true, 330);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a52341299179de5479672f7cf518bf4b173f34b3","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a52341299179de5479672f7cf518bf4b173f34b3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5719bfb2650ba43855e20564d39873bbbdc7f02c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"936cdd5882761db3b844afd6f84ab81cbb011a75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5719bfb2650ba43855e20564d39873bbbdc7f02c"],"5719bfb2650ba43855e20564d39873bbbdc7f02c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a52341299179de5479672f7cf518bf4b173f34b3":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75","5719bfb2650ba43855e20564d39873bbbdc7f02c"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"5719bfb2650ba43855e20564d39873bbbdc7f02c":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}