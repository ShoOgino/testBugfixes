{"path":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/SamplePluginAffinityReplicaPlacement#getNodesPerReplicaType(Set[Node],AttributeValues).mjava","commits":[{"id":"f5d9700b23e8e9b11b845fcecef89dbdf21373d9","date":1600294231,"type":0,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/SamplePluginAffinityReplicaPlacement#getNodesPerReplicaType(Set[Node],AttributeValues).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given the set of all nodes on which to do placement and fetched attributes, builds the sets representing\n   * candidate nodes for placement of replicas of each replica type.\n   * These sets are packaged and returned in an EnumMap keyed by replica type (1st member of the Pair).\n   * Also builds the number of existing cores on each node present in the returned EnumMap (2nd member of the returned Pair).\n   * Nodes for which the number of cores is not available for whatever reason are excluded from acceptable candidate nodes\n   * as it would not be possible to make any meaningful placement decisions.\n   * @param nodes all nodes on which this plugin should compute placement\n   * @param attrValues attributes fetched for the nodes. This method uses system property {@link #REPLICA_TYPE_SYSPROP} as\n   *                   well as the number of cores on each node.\n   */\n  private Pair<EnumMap<Replica.ReplicaType, Set<Node>>, Map<Node, Integer>> getNodesPerReplicaType(Set<Node> nodes, final AttributeValues attrValues) {\n    EnumMap<Replica.ReplicaType, Set<Node>> replicaTypeToNodes = new EnumMap<>(Replica.ReplicaType.class);\n    Map<Node, Integer> coresOnNodes = Maps.newHashMap();\n\n    for (Replica.ReplicaType replicaType : Replica.ReplicaType.values()) {\n      replicaTypeToNodes.put(replicaType, new HashSet<>());\n    }\n\n    for (Node node : nodes) {\n      // Exclude nodes with unknown or too small disk free space\n      if (attrValues.getFreeDisk(node).isEmpty()) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Unknown free disk on node {}, excluding it from placement decisions.\", node.getName());\n        }\n        // We rely later on the fact that the free disk optional is present (see CoresAndDiskComparator), be careful it you change anything here.\n        continue;\n      } if (attrValues.getFreeDisk(node).get() < minimalFreeDiskGB) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Node {} free disk ({}GB) lower than configured minimum {}GB, excluding it from placement decisions.\", node.getName(), attrValues.getFreeDisk(node).get(), minimalFreeDiskGB);\n        }\n        continue;\n      }\n\n      if (attrValues.getCoresCount(node).isEmpty()) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Unknown number of cores on node {}, excluding it from placement decisions.\", node.getName());\n        }\n        // We rely later on the fact that the number of cores optional is present (see CoresAndDiskComparator), be careful it you change anything here.\n        continue;\n      }\n\n      Integer coresCount = attrValues.getCoresCount(node).get();\n      coresOnNodes.put(node, coresCount);\n\n      String supportedReplicaTypes = attrValues.getSystemProperty(node, REPLICA_TYPE_SYSPROP).isPresent() ? attrValues.getSystemProperty(node, REPLICA_TYPE_SYSPROP).get() : null;\n      // If property not defined or is only whitespace on a node, assuming node can take any replica type\n      if (supportedReplicaTypes == null || supportedReplicaTypes.isBlank()) {\n        for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n          replicaTypeToNodes.get(rt).add(node);\n        }\n      } else {\n        Set<String> acceptedTypes = Arrays.stream(supportedReplicaTypes.split(\",\")).map(String::trim).map(s -> s.toLowerCase(Locale.ROOT)).collect(Collectors.toSet());\n        for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n          if (acceptedTypes.contains(rt.name().toLowerCase(Locale.ROOT))) {\n            replicaTypeToNodes.get(rt).add(node);\n          }\n        }\n      }\n    }\n    return new Pair<>(replicaTypeToNodes, coresOnNodes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65352f844eb9e9a677ec4eb2abced4404f08181d","date":1600297608,"type":0,"author":"noblepaul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cluster/placement/plugins/SamplePluginAffinityReplicaPlacement#getNodesPerReplicaType(Set[Node],AttributeValues).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given the set of all nodes on which to do placement and fetched attributes, builds the sets representing\n   * candidate nodes for placement of replicas of each replica type.\n   * These sets are packaged and returned in an EnumMap keyed by replica type (1st member of the Pair).\n   * Also builds the number of existing cores on each node present in the returned EnumMap (2nd member of the returned Pair).\n   * Nodes for which the number of cores is not available for whatever reason are excluded from acceptable candidate nodes\n   * as it would not be possible to make any meaningful placement decisions.\n   * @param nodes all nodes on which this plugin should compute placement\n   * @param attrValues attributes fetched for the nodes. This method uses system property {@link #REPLICA_TYPE_SYSPROP} as\n   *                   well as the number of cores on each node.\n   */\n  private Pair<EnumMap<Replica.ReplicaType, Set<Node>>, Map<Node, Integer>> getNodesPerReplicaType(Set<Node> nodes, final AttributeValues attrValues) {\n    EnumMap<Replica.ReplicaType, Set<Node>> replicaTypeToNodes = new EnumMap<>(Replica.ReplicaType.class);\n    Map<Node, Integer> coresOnNodes = Maps.newHashMap();\n\n    for (Replica.ReplicaType replicaType : Replica.ReplicaType.values()) {\n      replicaTypeToNodes.put(replicaType, new HashSet<>());\n    }\n\n    for (Node node : nodes) {\n      // Exclude nodes with unknown or too small disk free space\n      if (attrValues.getFreeDisk(node).isEmpty()) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Unknown free disk on node {}, excluding it from placement decisions.\", node.getName());\n        }\n        // We rely later on the fact that the free disk optional is present (see CoresAndDiskComparator), be careful it you change anything here.\n        continue;\n      } if (attrValues.getFreeDisk(node).get() < minimalFreeDiskGB) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Node {} free disk ({}GB) lower than configured minimum {}GB, excluding it from placement decisions.\", node.getName(), attrValues.getFreeDisk(node).get(), minimalFreeDiskGB);\n        }\n        continue;\n      }\n\n      if (attrValues.getCoresCount(node).isEmpty()) {\n        if (log.isWarnEnabled()) {\n          log.warn(\"Unknown number of cores on node {}, excluding it from placement decisions.\", node.getName());\n        }\n        // We rely later on the fact that the number of cores optional is present (see CoresAndDiskComparator), be careful it you change anything here.\n        continue;\n      }\n\n      Integer coresCount = attrValues.getCoresCount(node).get();\n      coresOnNodes.put(node, coresCount);\n\n      String supportedReplicaTypes = attrValues.getSystemProperty(node, REPLICA_TYPE_SYSPROP).isPresent() ? attrValues.getSystemProperty(node, REPLICA_TYPE_SYSPROP).get() : null;\n      // If property not defined or is only whitespace on a node, assuming node can take any replica type\n      if (supportedReplicaTypes == null || supportedReplicaTypes.isBlank()) {\n        for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n          replicaTypeToNodes.get(rt).add(node);\n        }\n      } else {\n        Set<String> acceptedTypes = Arrays.stream(supportedReplicaTypes.split(\",\")).map(String::trim).map(s -> s.toLowerCase(Locale.ROOT)).collect(Collectors.toSet());\n        for (Replica.ReplicaType rt : Replica.ReplicaType.values()) {\n          if (acceptedTypes.contains(rt.name().toLowerCase(Locale.ROOT))) {\n            replicaTypeToNodes.get(rt).add(node);\n          }\n        }\n      }\n    }\n    return new Pair<>(replicaTypeToNodes, coresOnNodes);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f5d9700b23e8e9b11b845fcecef89dbdf21373d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"65352f844eb9e9a677ec4eb2abced4404f08181d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5d9700b23e8e9b11b845fcecef89dbdf21373d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65352f844eb9e9a677ec4eb2abced4404f08181d"]},"commit2Childs":{"f5d9700b23e8e9b11b845fcecef89dbdf21373d9":["65352f844eb9e9a677ec4eb2abced4404f08181d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f5d9700b23e8e9b11b845fcecef89dbdf21373d9","65352f844eb9e9a677ec4eb2abced4404f08181d"],"65352f844eb9e9a677ec4eb2abced4404f08181d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}