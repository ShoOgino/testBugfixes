{"path":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#fetchTerms(SolrIndexSearcher,String[],String,boolean,NamedList).mjava","commits":[{"id":"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53","date":1490757519,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#fetchTerms(SolrIndexSearcher,String[],String,boolean,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#fetchTerms(SolrIndexSearcher,String[],String,NamedList).mjava","sourceNew":"  private void fetchTerms(SolrIndexSearcher indexSearcher,\n                          String[] fields,\n                          String termList,\n                          boolean includeTotalTermFreq,\n                          NamedList result) throws IOException {\n\n    String field = fields[0];\n    FieldType fieldType = indexSearcher.getSchema().getField(field).getType();\n    String[] splitTerms = termList.split(\",\");\n\n    for(int i=0; i<splitTerms.length; i++) {\n      splitTerms[i] = splitTerms[i].trim();\n    }\n\n    Term[] terms = new Term[splitTerms.length];\n    for(int i=0; i<splitTerms.length; i++) {\n      terms[i] = new Term(field, fieldType.readableToIndexed(splitTerms[i]));\n    }\n\n    Arrays.sort(terms);\n\n    IndexReaderContext topReaderContext = indexSearcher.getTopReaderContext();\n    TermContext[] termContexts = new TermContext[terms.length];\n    collectTermContext(topReaderContext, termContexts, terms);\n\n    NamedList termsMap = new SimpleOrderedMap();\n    for (int i = 0; i < terms.length; i++) {\n      if (termContexts[i] != null) {\n        String outTerm = fieldType.indexedToReadable(terms[i].bytes().utf8ToString());\n        int docFreq = termContexts[i].docFreq();\n        if (!includeTotalTermFreq) {\n          termsMap.add(outTerm, docFreq);\n        } else {\n          long totalTermFreq = termContexts[i].totalTermFreq();\n          NamedList<Long> termStats = new SimpleOrderedMap<>();\n          termStats.add(\"docFreq\", (long) docFreq);\n          termStats.add(\"totalTermFreq\", totalTermFreq);\n          termsMap.add(outTerm, termStats);\n        }\n      }\n    }\n\n    result.add(field, termsMap);\n  }\n\n","sourceOld":"  private void fetchTerms(SolrIndexSearcher indexSearcher,\n                          String[] fields,\n                          String termList,\n                          NamedList result) throws IOException {\n\n    NamedList termsMap = new SimpleOrderedMap();\n    List<LeafReaderContext> leaves = indexSearcher.getTopReaderContext().leaves();\n    String field = fields[0];\n    FieldType fieldType = indexSearcher.getSchema().getField(field).getType();\n    String[] splitTerms = termList.split(\",\");\n\n    for(int i=0; i<splitTerms.length; i++) {\n      splitTerms[i] = splitTerms[i].trim();\n    }\n\n    Term[] terms = new Term[splitTerms.length];\n    TermContext[] termContexts = new TermContext[terms.length];\n    for(int i=0; i<splitTerms.length; i++) {\n      terms[i] = new Term(field, fieldType.readableToIndexed(splitTerms[i]));\n    }\n\n    Arrays.sort(terms);\n\n    collectTermContext(indexSearcher.getTopReaderContext().reader(), leaves, termContexts, terms);\n\n    for(int i=0; i<terms.length; i++) {\n      if(termContexts[i] != null) {\n        String outTerm = fieldType.indexedToReadable(terms[i].bytes().utf8ToString());\n        int docFreq = termContexts[i].docFreq();\n        termsMap.add(outTerm, docFreq);\n      }\n    }\n\n    result.add(field, termsMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4302dfeb5d01c940f69c48bec27f03ad8828668","date":1490873946,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#fetchTerms(SolrIndexSearcher,String[],String,boolean,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#fetchTerms(SolrIndexSearcher,String[],String,NamedList).mjava","sourceNew":"  private void fetchTerms(SolrIndexSearcher indexSearcher,\n                          String[] fields,\n                          String termList,\n                          boolean includeTotalTermFreq,\n                          NamedList result) throws IOException {\n\n    String field = fields[0];\n    FieldType fieldType = indexSearcher.getSchema().getField(field).getType();\n    String[] splitTerms = termList.split(\",\");\n\n    for(int i=0; i<splitTerms.length; i++) {\n      splitTerms[i] = splitTerms[i].trim();\n    }\n\n    Term[] terms = new Term[splitTerms.length];\n    for(int i=0; i<splitTerms.length; i++) {\n      terms[i] = new Term(field, fieldType.readableToIndexed(splitTerms[i]));\n    }\n\n    Arrays.sort(terms);\n\n    IndexReaderContext topReaderContext = indexSearcher.getTopReaderContext();\n    TermContext[] termContexts = new TermContext[terms.length];\n    collectTermContext(topReaderContext, termContexts, terms);\n\n    NamedList termsMap = new SimpleOrderedMap();\n    for (int i = 0; i < terms.length; i++) {\n      if (termContexts[i] != null) {\n        String outTerm = fieldType.indexedToReadable(terms[i].bytes().utf8ToString());\n        int docFreq = termContexts[i].docFreq();\n        if (!includeTotalTermFreq) {\n          termsMap.add(outTerm, docFreq);\n        } else {\n          long totalTermFreq = termContexts[i].totalTermFreq();\n          NamedList<Long> termStats = new SimpleOrderedMap<>();\n          termStats.add(\"docFreq\", (long) docFreq);\n          termStats.add(\"totalTermFreq\", totalTermFreq);\n          termsMap.add(outTerm, termStats);\n        }\n      }\n    }\n\n    result.add(field, termsMap);\n  }\n\n","sourceOld":"  private void fetchTerms(SolrIndexSearcher indexSearcher,\n                          String[] fields,\n                          String termList,\n                          NamedList result) throws IOException {\n\n    NamedList termsMap = new SimpleOrderedMap();\n    List<LeafReaderContext> leaves = indexSearcher.getTopReaderContext().leaves();\n    String field = fields[0];\n    FieldType fieldType = indexSearcher.getSchema().getField(field).getType();\n    String[] splitTerms = termList.split(\",\");\n\n    for(int i=0; i<splitTerms.length; i++) {\n      splitTerms[i] = splitTerms[i].trim();\n    }\n\n    Term[] terms = new Term[splitTerms.length];\n    TermContext[] termContexts = new TermContext[terms.length];\n    for(int i=0; i<splitTerms.length; i++) {\n      terms[i] = new Term(field, fieldType.readableToIndexed(splitTerms[i]));\n    }\n\n    Arrays.sort(terms);\n\n    collectTermContext(indexSearcher.getTopReaderContext().reader(), leaves, termContexts, terms);\n\n    for(int i=0; i<terms.length; i++) {\n      if(termContexts[i] != null) {\n        String outTerm = fieldType.indexedToReadable(terms[i].bytes().utf8ToString());\n        int docFreq = termContexts[i].docFreq();\n        termsMap.add(outTerm, docFreq);\n      }\n    }\n\n    result.add(field, termsMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb88a28fb92adce0607c5b28f8f1cce9e3171639","date":1492689807,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#fetchTerms(SolrIndexSearcher,String[],String,boolean,NamedList).mjava","sourceNew":null,"sourceOld":"  private void fetchTerms(SolrIndexSearcher indexSearcher,\n                          String[] fields,\n                          String termList,\n                          boolean includeTotalTermFreq,\n                          NamedList result) throws IOException {\n\n    String field = fields[0];\n    FieldType fieldType = indexSearcher.getSchema().getField(field).getType();\n    String[] splitTerms = termList.split(\",\");\n\n    for(int i=0; i<splitTerms.length; i++) {\n      splitTerms[i] = splitTerms[i].trim();\n    }\n\n    Term[] terms = new Term[splitTerms.length];\n    for(int i=0; i<splitTerms.length; i++) {\n      terms[i] = new Term(field, fieldType.readableToIndexed(splitTerms[i]));\n    }\n\n    Arrays.sort(terms);\n\n    IndexReaderContext topReaderContext = indexSearcher.getTopReaderContext();\n    TermContext[] termContexts = new TermContext[terms.length];\n    collectTermContext(topReaderContext, termContexts, terms);\n\n    NamedList termsMap = new SimpleOrderedMap();\n    for (int i = 0; i < terms.length; i++) {\n      if (termContexts[i] != null) {\n        String outTerm = fieldType.indexedToReadable(terms[i].bytes().utf8ToString());\n        int docFreq = termContexts[i].docFreq();\n        if (!includeTotalTermFreq) {\n          termsMap.add(outTerm, docFreq);\n        } else {\n          long totalTermFreq = termContexts[i].totalTermFreq();\n          NamedList<Long> termStats = new SimpleOrderedMap<>();\n          termStats.add(\"docFreq\", (long) docFreq);\n          termStats.add(\"totalTermFreq\", totalTermFreq);\n          termsMap.add(outTerm, termStats);\n        }\n      }\n    }\n\n    result.add(field, termsMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#fetchTerms(SolrIndexSearcher,String[],String,boolean,NamedList).mjava","sourceNew":null,"sourceOld":"  private void fetchTerms(SolrIndexSearcher indexSearcher,\n                          String[] fields,\n                          String termList,\n                          boolean includeTotalTermFreq,\n                          NamedList result) throws IOException {\n\n    String field = fields[0];\n    FieldType fieldType = indexSearcher.getSchema().getField(field).getType();\n    String[] splitTerms = termList.split(\",\");\n\n    for(int i=0; i<splitTerms.length; i++) {\n      splitTerms[i] = splitTerms[i].trim();\n    }\n\n    Term[] terms = new Term[splitTerms.length];\n    for(int i=0; i<splitTerms.length; i++) {\n      terms[i] = new Term(field, fieldType.readableToIndexed(splitTerms[i]));\n    }\n\n    Arrays.sort(terms);\n\n    IndexReaderContext topReaderContext = indexSearcher.getTopReaderContext();\n    TermContext[] termContexts = new TermContext[terms.length];\n    collectTermContext(topReaderContext, termContexts, terms);\n\n    NamedList termsMap = new SimpleOrderedMap();\n    for (int i = 0; i < terms.length; i++) {\n      if (termContexts[i] != null) {\n        String outTerm = fieldType.indexedToReadable(terms[i].bytes().utf8ToString());\n        int docFreq = termContexts[i].docFreq();\n        if (!includeTotalTermFreq) {\n          termsMap.add(outTerm, docFreq);\n        } else {\n          long totalTermFreq = termContexts[i].totalTermFreq();\n          NamedList<Long> termStats = new SimpleOrderedMap<>();\n          termStats.add(\"docFreq\", (long) docFreq);\n          termStats.add(\"totalTermFreq\", totalTermFreq);\n          termsMap.add(outTerm, termStats);\n        }\n      }\n    }\n\n    result.add(field, termsMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a4302dfeb5d01c940f69c48bec27f03ad8828668","cb88a28fb92adce0607c5b28f8f1cce9e3171639"],"cb88a28fb92adce0607c5b28f8f1cce9e3171639":["194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53"],"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a4302dfeb5d01c940f69c48bec27f03ad8828668":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cb88a28fb92adce0607c5b28f8f1cce9e3171639"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"cb88a28fb92adce0607c5b28f8f1cce9e3171639":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a4302dfeb5d01c940f69c48bec27f03ad8828668":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53":["cb88a28fb92adce0607c5b28f8f1cce9e3171639"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["194ca6939cf04fa69e4bbcaf0fed482ae1f5fa53","a4302dfeb5d01c940f69c48bec27f03ad8828668"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}