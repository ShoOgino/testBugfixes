{"path":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","sourceNew":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is garunteed to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","sourceOld":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is garunteed to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","sourceNew":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is garunteed to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","sourceOld":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is garunteed to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","sourceNew":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is garunteed to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","sourceOld":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is garunteed to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2396be4785ec8ca6c942dff4d20c1c93dd03db6d","date":1333735663,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","sourceNew":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is guarantee to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","sourceOld":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is garunteed to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/SolrInfoMBeanHandler#arrayToSet(Object[]).mjava","sourceNew":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is guarantee to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","sourceOld":"  /**\n   * Take an array of any type and generate a Set containing the toString.\n   * Set is guarantee to never be null (but may be empty)\n   */\n  private Set<String> arrayToSet(Object[] arr) {\n    HashSet<String> r = new HashSet<String>();\n    if (null == arr) return r;\n    for (Object o : arr) {\n      if (null != o) r.add(o.toString());\n    }\n    return r;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2396be4785ec8ca6c942dff4d20c1c93dd03db6d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2396be4785ec8ca6c942dff4d20c1c93dd03db6d":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["2396be4785ec8ca6c942dff4d20c1c93dd03db6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"2396be4785ec8ca6c942dff4d20c1c93dd03db6d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}