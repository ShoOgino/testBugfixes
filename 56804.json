{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#testDoubleResetFails().mjava","commits":[{"id":"55244759f906151d96839f8451dee793acb06e75","date":1418999882,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#testDoubleResetFails().mjava","pathOld":"/dev/null","sourceNew":"  public void testDoubleResetFails() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n    final TokenStream input = analyzer.tokenStream(\"field\", \"abc\");\n    CachingTokenFilter buffer = new CachingTokenFilter(input);\n    buffer.reset();//ok\n    boolean madeIt = false;\n    try {\n      buffer.reset();//bad (this used to work which we don't want)\n      madeIt = true;\n    } catch (Throwable e) {\n      //ignore\n    }\n    assertFalse(madeIt);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"382746df8b857f96a892c17a54f80d38316c30b8","date":1419007965,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#testDoubleResetFails().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#testDoubleResetFails().mjava","sourceNew":"  public void testDoubleResetFails() throws IOException {\n    assumeTrue(\"We want MockAnalyzer to detect double-reset\", TEST_ASSERTS_ENABLED);\n    Analyzer analyzer = new MockAnalyzer(random());\n    final TokenStream input = analyzer.tokenStream(\"field\", \"abc\");\n    CachingTokenFilter buffer = new CachingTokenFilter(input);\n    buffer.reset();//ok\n    boolean madeIt = false;\n    try {\n      buffer.reset();//bad (this used to work which we don't want)\n      madeIt = true;\n    } catch (Throwable e) {\n      //ignore\n    }\n    assertFalse(madeIt);\n  }\n\n","sourceOld":"  public void testDoubleResetFails() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n    final TokenStream input = analyzer.tokenStream(\"field\", \"abc\");\n    CachingTokenFilter buffer = new CachingTokenFilter(input);\n    buffer.reset();//ok\n    boolean madeIt = false;\n    try {\n      buffer.reset();//bad (this used to work which we don't want)\n      madeIt = true;\n    } catch (Throwable e) {\n      //ignore\n    }\n    assertFalse(madeIt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"50d5b588b112eeb3d6b2a3fcc43a40ef0615a529","date":1419024596,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#testDoubleResetFails().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#testDoubleResetFails().mjava","sourceNew":"  public void testDoubleResetFails() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n    final TokenStream input = analyzer.tokenStream(\"field\", \"abc\");\n    CachingTokenFilter buffer = new CachingTokenFilter(input);\n    buffer.reset();//ok\n    try {\n      buffer.reset();//bad (this used to work which we don't want)\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException e) {\n      assertEquals(\"double reset()\", e.getMessage());\n    }\n  }\n\n","sourceOld":"  public void testDoubleResetFails() throws IOException {\n    assumeTrue(\"We want MockAnalyzer to detect double-reset\", TEST_ASSERTS_ENABLED);\n    Analyzer analyzer = new MockAnalyzer(random());\n    final TokenStream input = analyzer.tokenStream(\"field\", \"abc\");\n    CachingTokenFilter buffer = new CachingTokenFilter(input);\n    buffer.reset();//ok\n    boolean madeIt = false;\n    try {\n      buffer.reset();//bad (this used to work which we don't want)\n      madeIt = true;\n    } catch (Throwable e) {\n      //ignore\n    }\n    assertFalse(madeIt);\n  }\n\n","bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#testDoubleResetFails().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestCachingTokenFilter#testDoubleResetFails().mjava","sourceNew":"  public void testDoubleResetFails() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n    final TokenStream input = analyzer.tokenStream(\"field\", \"abc\");\n    CachingTokenFilter buffer = new CachingTokenFilter(input);\n    buffer.reset();//ok\n    IllegalStateException e = expectThrows(IllegalStateException.class, () -> {\n      buffer.reset();//bad (this used to work which we don't want)\n    });\n    assertEquals(\"double reset()\", e.getMessage());\n  }\n\n","sourceOld":"  public void testDoubleResetFails() throws IOException {\n    Analyzer analyzer = new MockAnalyzer(random());\n    final TokenStream input = analyzer.tokenStream(\"field\", \"abc\");\n    CachingTokenFilter buffer = new CachingTokenFilter(input);\n    buffer.reset();//ok\n    try {\n      buffer.reset();//bad (this used to work which we don't want)\n      fail(\"didn't get expected exception\");\n    } catch (IllegalStateException e) {\n      assertEquals(\"double reset()\", e.getMessage());\n    }\n  }\n\n","bugFix":["50d5b588b112eeb3d6b2a3fcc43a40ef0615a529","55244759f906151d96839f8451dee793acb06e75"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"382746df8b857f96a892c17a54f80d38316c30b8":["55244759f906151d96839f8451dee793acb06e75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["50d5b588b112eeb3d6b2a3fcc43a40ef0615a529"],"50d5b588b112eeb3d6b2a3fcc43a40ef0615a529":["382746df8b857f96a892c17a54f80d38316c30b8"],"55244759f906151d96839f8451dee793acb06e75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["05fe562aa248790944d43cdd478f512572835ba0"]},"commit2Childs":{"382746df8b857f96a892c17a54f80d38316c30b8":["50d5b588b112eeb3d6b2a3fcc43a40ef0615a529"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55244759f906151d96839f8451dee793acb06e75"],"05fe562aa248790944d43cdd478f512572835ba0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"50d5b588b112eeb3d6b2a3fcc43a40ef0615a529":["05fe562aa248790944d43cdd478f512572835ba0"],"55244759f906151d96839f8451dee793acb06e75":["382746df8b857f96a892c17a54f80d38316c30b8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}