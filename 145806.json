{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getParentArray().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getParentArray().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * getParentArray() returns an int array of size getSize() listing the\n   * ordinal of the parent category of each category in the taxonomy.\n   * <P>\n   * The caller can hold on to the array it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the array it got as read-only\n   * and <B>not modify it</B>, because other callers might have gotten the\n   * same array too, and getParent() calls are also answered from the\n   * same array.\n   * <P>\n   * The getParentArray() call is extremely efficient, merely returning\n   * a reference to an array that already exists. For a caller that plans\n   * to call getParent() for many categories, using getParentArray() and\n   * the array it returns is a somewhat faster approach because it avoids\n   * the overhead of method calls and volatile dereferencing.\n   * <P>\n   * If you use getParentArray() instead of getParent(), remember that\n   * the array you got is (naturally) not modified after a refresh(),\n   * so you should always call getParentArray() again after a refresh().\n   */\n\n  public int[] getParentArray() {\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return parentArray.getArray();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getParentArray().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * getParentArray() returns an int array of size getSize() listing the\n   * ordinal of the parent category of each category in the taxonomy.\n   * <P>\n   * The caller can hold on to the array it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the array it got as read-only\n   * and <B>not modify it</B>, because other callers might have gotten the\n   * same array too, and getParent() calls are also answered from the\n   * same array.\n   * <P>\n   * The getParentArray() call is extremely efficient, merely returning\n   * a reference to an array that already exists. For a caller that plans\n   * to call getParent() for many categories, using getParentArray() and\n   * the array it returns is a somewhat faster approach because it avoids\n   * the overhead of method calls and volatile dereferencing.\n   * <P>\n   * If you use getParentArray() instead of getParent(), remember that\n   * the array you got is (naturally) not modified after a refresh(),\n   * so you should always call getParentArray() again after a refresh().\n   */\n\n  public int[] getParentArray() {\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return parentArray.getArray();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getParentArray().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * getParentArray() returns an int array of size getSize() listing the\n   * ordinal of the parent category of each category in the taxonomy.\n   * <P>\n   * The caller can hold on to the array it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the array it got as read-only\n   * and <B>not modify it</B>, because other callers might have gotten the\n   * same array too, and getParent() calls are also answered from the\n   * same array.\n   * <P>\n   * The getParentArray() call is extremely efficient, merely returning\n   * a reference to an array that already exists. For a caller that plans\n   * to call getParent() for many categories, using getParentArray() and\n   * the array it returns is a somewhat faster approach because it avoids\n   * the overhead of method calls and volatile dereferencing.\n   * <P>\n   * If you use getParentArray() instead of getParent(), remember that\n   * the array you got is (naturally) not modified after a refresh(),\n   * so you should always call getParentArray() again after a refresh().\n   */\n\n  public int[] getParentArray() {\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return parentArray.getArray();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fea68ff83c1db2f720597dfcea5bee943a35f35","date":1317817445,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getParentArray().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getParentArray().mjava","sourceNew":"  /**\n   * getParentArray() returns an int array of size getSize() listing the\n   * ordinal of the parent category of each category in the taxonomy.\n   * <P>\n   * The caller can hold on to the array it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the array it got as read-only\n   * and <B>not modify it</B>, because other callers might have gotten the\n   * same array too, and getParent() calls are also answered from the\n   * same array.\n   * <P>\n   * The getParentArray() call is extremely efficient, merely returning\n   * a reference to an array that already exists. For a caller that plans\n   * to call getParent() for many categories, using getParentArray() and\n   * the array it returns is a somewhat faster approach because it avoids\n   * the overhead of method calls and volatile dereferencing.\n   * <P>\n   * If you use getParentArray() instead of getParent(), remember that\n   * the array you got is (naturally) not modified after a refresh(),\n   * so you should always call getParentArray() again after a refresh().\n   */\n\n  public int[] getParentArray() {\n    ensureOpen();\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return parentArray.getArray();\n  }\n\n","sourceOld":"  /**\n   * getParentArray() returns an int array of size getSize() listing the\n   * ordinal of the parent category of each category in the taxonomy.\n   * <P>\n   * The caller can hold on to the array it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the array it got as read-only\n   * and <B>not modify it</B>, because other callers might have gotten the\n   * same array too, and getParent() calls are also answered from the\n   * same array.\n   * <P>\n   * The getParentArray() call is extremely efficient, merely returning\n   * a reference to an array that already exists. For a caller that plans\n   * to call getParent() for many categories, using getParentArray() and\n   * the array it returns is a somewhat faster approach because it avoids\n   * the overhead of method calls and volatile dereferencing.\n   * <P>\n   * If you use getParentArray() instead of getParent(), remember that\n   * the array you got is (naturally) not modified after a refresh(),\n   * so you should always call getParentArray() again after a refresh().\n   */\n\n  public int[] getParentArray() {\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return parentArray.getArray();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getParentArray().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getParentArray().mjava","sourceNew":"  /**\n   * getParentArray() returns an int array of size getSize() listing the\n   * ordinal of the parent category of each category in the taxonomy.\n   * <P>\n   * The caller can hold on to the array it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the array it got as read-only\n   * and <B>not modify it</B>, because other callers might have gotten the\n   * same array too, and getParent() calls are also answered from the\n   * same array.\n   * <P>\n   * The getParentArray() call is extremely efficient, merely returning\n   * a reference to an array that already exists. For a caller that plans\n   * to call getParent() for many categories, using getParentArray() and\n   * the array it returns is a somewhat faster approach because it avoids\n   * the overhead of method calls and volatile dereferencing.\n   * <P>\n   * If you use getParentArray() instead of getParent(), remember that\n   * the array you got is (naturally) not modified after a refresh(),\n   * so you should always call getParentArray() again after a refresh().\n   */\n\n  public int[] getParentArray() {\n    ensureOpen();\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return parentArray.getArray();\n  }\n\n","sourceOld":"  /**\n   * getParentArray() returns an int array of size getSize() listing the\n   * ordinal of the parent category of each category in the taxonomy.\n   * <P>\n   * The caller can hold on to the array it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the array it got as read-only\n   * and <B>not modify it</B>, because other callers might have gotten the\n   * same array too, and getParent() calls are also answered from the\n   * same array.\n   * <P>\n   * The getParentArray() call is extremely efficient, merely returning\n   * a reference to an array that already exists. For a caller that plans\n   * to call getParent() for many categories, using getParentArray() and\n   * the array it returns is a somewhat faster approach because it avoids\n   * the overhead of method calls and volatile dereferencing.\n   * <P>\n   * If you use getParentArray() instead of getParent(), remember that\n   * the array you got is (naturally) not modified after a refresh(),\n   * so you should always call getParentArray() again after a refresh().\n   */\n\n  public int[] getParentArray() {\n    ensureOpen();\n    // Note how we don't need to hold the read lock to do the following,\n    // because the array reference is volatile, ensuring the correct\n    // visibility and ordering: if we get the new reference, the new\n    // data is also visible to this thread.\n    return parentArray.getArray();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["7fea68ff83c1db2f720597dfcea5bee943a35f35"],"7fea68ff83c1db2f720597dfcea5bee943a35f35":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"]},"commit2Childs":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7fea68ff83c1db2f720597dfcea5bee943a35f35":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7fea68ff83c1db2f720597dfcea5bee943a35f35","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}