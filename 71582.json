{"path":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","commits":[{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"/dev/null","sourceNew":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\", \n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\", \n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\", \n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\", \n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n    indexr(id,13, i1, 232, tlong, 232,\n           t1,\"no eggs on wall, lesson learned\", \n           oddField, \"odd man out\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    for (int i=100; i<150; i++) {\n      indexr(id, i);      \n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1));\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["286e1dbf267cac3961c3fc116b9069797ad7d1c2","d423443db06bfcac81733aafcce04ee491880cc7","072f211dfa8387028bb978d128c35bf9a450bbbf","27270b721a573cf4b774ce70b062078ef490388e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0414a20d73ebe5c96a6e7e70e337083ec37f01fd","date":1316542523,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\", \n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\", \n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\", \n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\", \n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n    indexr(id,13, i1, 232, tlong, 232,\n           t1,\"no eggs on wall, lesson learned\", \n           oddField, \"odd man out\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    for (int i=100; i<150; i++) {\n      indexr(id, i);      \n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\", \n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\", \n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\", \n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\", \n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n    indexr(id,13, i1, 232, tlong, 232,\n           t1,\"no eggs on wall, lesson learned\", \n           oddField, \"odd man out\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    for (int i=100; i<150; i++) {\n      indexr(id, i);      \n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1));\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n  }\n\n","bugFix":null,"bugIntro":["d423443db06bfcac81733aafcce04ee491880cc7","3685dcafc9195b0631414aa4d422f788479e62b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9567a7c3443a4d2f26e2bae683fb25265bc6f7ed","date":1323438543,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\", \n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\", \n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\", \n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\", \n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n    indexr(id,13, i1, 232, tlong, 232,\n           t1,\"no eggs on wall, lesson learned\", \n           oddField, \"odd man out\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    for (int i=100; i<150; i++) {\n      indexr(id, i);      \n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\", \n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\", \n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\", \n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\", \n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n    indexr(id,13, i1, 232, tlong, 232,\n           t1,\"no eggs on wall, lesson learned\", \n           oddField, \"odd man out\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    for (int i=100; i<150; i++) {\n      indexr(id, i);      \n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\", \n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\", \n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\", \n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\", \n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n    indexr(id,13, i1, 232, tlong, 232,\n           t1,\"no eggs on wall, lesson learned\", \n           oddField, \"odd man out\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    for (int i=100; i<150; i++) {\n      indexr(id, i);      \n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\", \n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\", \n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\", \n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\", \n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n    indexr(id,13, i1, 232, tlong, 232,\n           t1,\"no eggs on wall, lesson learned\", \n           oddField, \"odd man out\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    for (int i=100; i<150; i++) {\n      indexr(id, i);      \n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27270b721a573cf4b774ce70b062078ef490388e","date":1329092012,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\", \n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\", \n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\", \n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\", \n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n    indexr(id,13, i1, 232, tlong, 232,\n           t1,\"no eggs on wall, lesson learned\", \n           oddField, \"odd man out\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    for (int i=100; i<150; i++) {\n      indexr(id, i);      \n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n  }\n\n","bugFix":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"bugIntro":["286e1dbf267cac3961c3fc116b9069797ad7d1c2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a250ecd3e83b1c6595bcae0474f5b258df42021b","date":1330943490,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"612521de57bdf68711c68b6d8565e4a80ca0d7f6","date":1333716414,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    assertEquals(100 * shardsArr.length, matches);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","bugFix":null,"bugIntro":["d423443db06bfcac81733aafcce04ee491880cc7","af20870f6eab3807c968eec0b24e0c4358d0c1e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af20870f6eab3807c968eec0b24e0c4358d0c1e5","date":1337002937,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    assertEquals(100 * shardsArr.length, matches);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","bugFix":["612521de57bdf68711c68b6d8565e4a80ca0d7f6"],"bugIntro":["d423443db06bfcac81733aafcce04ee491880cc7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n\t  // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f8247163846f78e14d325499507cc0a7d5821e2","date":1353984869,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"79c2f883e7a3be9dc62d29014544d769df774aae","date":1355428241,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","bugFix":null,"bugIntro":["d423443db06bfcac81733aafcce04ee491880cc7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c65b45bfb779756505b3bc20f7c21de51a4483ca","date":1355431132,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a25c7a2a7f197516f4b5542406f2877d0ccd90ae","date":1356016668,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","sourceOld":"  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3685dcafc9195b0631414aa4d422f788479e62b7","date":1364492243,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, \n                       i1, groupValue, \n                       s1, \"a\", \n                       id, i * (shard + 1), \n                       t1, random().nextInt(7));\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n    for (String gfacet : new String[] { \"true\", \"false\" }) {\n      for (String flimit : new String[] { \"-100\",\"-1\", \"1\", \"2\", \"10000\" }) {\n        for (String foffset : new String[] { \"0\",\"1\", \"2\", \"1000\" }) {\n          query(\"q\", \"*:*\", \"fq\", s1+\":a\", \n                \"rows\", 100, \"fl\", \"id,\"+i1, \"sort\", i1+\" asc, id asc\", \n                \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \n                \"facet\", \"true\", \"facet.field\", t1, \"group.facet\", gfacet, \n                \"facet.limit\", flimit, \"facet.offset\", foffset);\n        }\n      }\n    }\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, i1, groupValue, s1, \"a\", id, i * (shard + 1), t1, shard);\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","bugFix":["0414a20d73ebe5c96a6e7e70e337083ec37f01fd"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, \n                       i1, groupValue, \n                       s1, \"a\", \n                       id, i * (shard + 1), \n                       t1, random().nextInt(7));\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n    for (String gfacet : new String[] { \"true\", \"false\" }) {\n      for (String flimit : new String[] { \"-100\",\"-1\", \"1\", \"2\", \"10000\" }) {\n        for (String foffset : new String[] { \"0\",\"1\", \"2\", \"1000\" }) {\n          query(\"q\", \"*:*\", \"fq\", s1+\":a\", \n                \"rows\", 100, \"fl\", \"id,\"+i1, \"sort\", i1+\" asc, id asc\", \n                \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \n                \"facet\", \"true\", \"facet.field\", t1, \"group.facet\", gfacet, \n                \"facet.limit\", flimit, \"facet.offset\", foffset);\n        }\n      }\n    }\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, \n                       i1, groupValue, \n                       s1, \"a\", \n                       id, i * (shard + 1), \n                       t1, random().nextInt(7));\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n    for (String gfacet : new String[] { \"true\", \"false\" }) {\n      for (String flimit : new String[] { \"-100\",\"-1\", \"1\", \"2\", \"10000\" }) {\n        for (String foffset : new String[] { \"0\",\"1\", \"2\", \"1000\" }) {\n          query(\"q\", \"*:*\", \"fq\", s1+\":a\", \n                \"rows\", 100, \"fl\", \"id,\"+i1, \"sort\", i1+\" asc, id asc\", \n                \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \n                \"facet\", \"true\", \"facet.field\", t1, \"group.facet\", gfacet, \n                \"facet.limit\", flimit, \"facet.offset\", foffset);\n        }\n      }\n    }\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, \n                       i1, groupValue, \n                       s1, \"a\", \n                       id, i * (shard + 1), \n                       t1, random().nextInt(7));\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n    for (String gfacet : new String[] { \"true\", \"false\" }) {\n      for (String flimit : new String[] { \"-100\",\"-1\", \"1\", \"2\", \"10000\" }) {\n        for (String foffset : new String[] { \"0\",\"1\", \"2\", \"1000\" }) {\n          query(\"q\", \"*:*\", \"fq\", s1+\":a\", \n                \"rows\", 100, \"fl\", \"id,\"+i1, \"sort\", i1+\" asc, id asc\", \n                \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \n                \"facet\", \"true\", \"facet.field\", t1, \"group.facet\", gfacet, \n                \"facet.limit\", flimit, \"facet.offset\", foffset);\n        }\n      }\n    }\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, \n                       i1, groupValue, \n                       s1, \"a\", \n                       id, i * (shard + 1), \n                       t1, random().nextInt(7));\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n    for (String gfacet : new String[] { \"true\", \"false\" }) {\n      for (String flimit : new String[] { \"-100\",\"-1\", \"1\", \"2\", \"10000\" }) {\n        for (String foffset : new String[] { \"0\",\"1\", \"2\", \"1000\" }) {\n          query(\"q\", \"*:*\", \"fq\", s1+\":a\", \n                \"rows\", 100, \"fl\", \"id,\"+i1, \"sort\", i1+\" asc, id asc\", \n                \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \n                \"facet\", \"true\", \"facet.field\", t1, \"group.facet\", gfacet, \n                \"facet.limit\", flimit, \"facet.offset\", foffset);\n        }\n      }\n    }\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"820731f8480edb13c35c29432e85168fe2c5749f","date":1384418937,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, \n                       i1, groupValue, \n                       s1, \"a\", \n                       id, i * (shard + 1), \n                       t1, random().nextInt(7));\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n    for (String gfacet : new String[] { \"true\", \"false\" }) {\n      for (String flimit : new String[] { \"-100\",\"-1\", \"1\", \"2\", \"10000\" }) {\n        for (String foffset : new String[] { \"0\",\"1\", \"2\", \"1000\" }) {\n          query(\"q\", \"*:*\", \"fq\", s1+\":a\", \n                \"rows\", 100, \"fl\", \"id,\"+i1, \"sort\", i1+\" asc, id asc\", \n                \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \n                \"facet\", \"true\", \"facet.field\", t1, \"group.facet\", gfacet, \n                \"facet.limit\", flimit, \"facet.offset\", foffset);\n        }\n      }\n    }\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n    \n    //Debug\n    simpleQuery(\"q\", \"*:*\", \"rows\", 10, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"debug\", \"true\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, \n                       i1, groupValue, \n                       s1, \"a\", \n                       id, i * (shard + 1), \n                       t1, random().nextInt(7));\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n    for (String gfacet : new String[] { \"true\", \"false\" }) {\n      for (String flimit : new String[] { \"-100\",\"-1\", \"1\", \"2\", \"10000\" }) {\n        for (String foffset : new String[] { \"0\",\"1\", \"2\", \"1000\" }) {\n          query(\"q\", \"*:*\", \"fq\", s1+\":a\", \n                \"rows\", 100, \"fl\", \"id,\"+i1, \"sort\", i1+\" asc, id asc\", \n                \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \n                \"facet\", \"true\", \"facet.field\", t1, \"group.facet\", gfacet, \n                \"facet.limit\", flimit, \"facet.offset\", foffset);\n        }\n      }\n    }\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"072f211dfa8387028bb978d128c35bf9a450bbbf","date":1406041363,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, \n                       i1, groupValue, \n                       s1, \"a\", \n                       id, i * (shard + 1), \n                       t1, random().nextInt(7));\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n    for (String gfacet : new String[] { \"true\", \"false\" }) {\n      for (String flimit : new String[] { \"-100\",\"-1\", \"1\", \"2\", \"10000\" }) {\n        for (String foffset : new String[] { \"0\",\"1\", \"2\", \"1000\" }) {\n          query(\"q\", \"*:*\", \"fq\", s1+\":a\", \n                \"rows\", 100, \"fl\", \"id,\"+i1, \"sort\", i1+\" asc, id asc\", \n                \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \n                \"facet\", \"true\", \"facet.field\", t1, \"group.facet\", gfacet, \n                \"facet.limit\", flimit, \"facet.offset\", foffset);\n        }\n      }\n    }\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n    \n    //Debug\n    simpleQuery(\"q\", \"*:*\", \"rows\", 10, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"debug\", \"true\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, \n                       i1, groupValue, \n                       s1, \"a\", \n                       id, i * (shard + 1), \n                       t1, random().nextInt(7));\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n    for (String gfacet : new String[] { \"true\", \"false\" }) {\n      for (String flimit : new String[] { \"-100\",\"-1\", \"1\", \"2\", \"10000\" }) {\n        for (String foffset : new String[] { \"0\",\"1\", \"2\", \"1000\" }) {\n          query(\"q\", \"*:*\", \"fq\", s1+\":a\", \n                \"rows\", 100, \"fl\", \"id,\"+i1, \"sort\", i1+\" asc, id asc\", \n                \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \n                \"facet\", \"true\", \"facet.field\", t1, \"group.facet\", gfacet, \n                \"facet.limit\", flimit, \"facet.offset\", foffset);\n        }\n      }\n    }\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n    \n    //Debug\n    simpleQuery(\"q\", \"*:*\", \"rows\", 10, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"debug\", \"true\");\n  }\n\n","bugFix":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, \n                       i1, groupValue, \n                       s1, \"a\", \n                       id, i * (shard + 1), \n                       t1, random().nextInt(7));\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n    for (String gfacet : new String[] { \"true\", \"false\" }) {\n      for (String flimit : new String[] { \"-100\",\"-1\", \"1\", \"2\", \"10000\" }) {\n        for (String foffset : new String[] { \"0\",\"1\", \"2\", \"1000\" }) {\n          query(\"q\", \"*:*\", \"fq\", s1+\":a\", \n                \"rows\", 100, \"fl\", \"id,\"+i1, \"sort\", i1+\" asc, id asc\", \n                \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \n                \"facet\", \"true\", \"facet.field\", t1, \"group.facet\", gfacet, \n                \"facet.limit\", flimit, \"facet.offset\", foffset);\n        }\n      }\n    }\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrClient client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n    \n    //Debug\n    simpleQuery(\"q\", \"*:*\", \"rows\", 10, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"debug\", \"true\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, \n                       i1, groupValue, \n                       s1, \"a\", \n                       id, i * (shard + 1), \n                       t1, random().nextInt(7));\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n    for (String gfacet : new String[] { \"true\", \"false\" }) {\n      for (String flimit : new String[] { \"-100\",\"-1\", \"1\", \"2\", \"10000\" }) {\n        for (String foffset : new String[] { \"0\",\"1\", \"2\", \"1000\" }) {\n          query(\"q\", \"*:*\", \"fq\", s1+\":a\", \n                \"rows\", 100, \"fl\", \"id,\"+i1, \"sort\", i1+\" asc, id asc\", \n                \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \n                \"facet\", \"true\", \"facet.field\", t1, \"group.facet\", gfacet, \n                \"facet.limit\", flimit, \"facet.offset\", foffset);\n        }\n      }\n    }\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n    \n    //Debug\n    simpleQuery(\"q\", \"*:*\", \"rows\", 10, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"debug\", \"true\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedGrouping#doTest().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, \n                       i1, groupValue, \n                       s1, \"a\", \n                       id, i * (shard + 1), \n                       t1, random().nextInt(7));\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n    for (String gfacet : new String[] { \"true\", \"false\" }) {\n      for (String flimit : new String[] { \"-100\",\"-1\", \"1\", \"2\", \"10000\" }) {\n        for (String foffset : new String[] { \"0\",\"1\", \"2\", \"1000\" }) {\n          query(\"q\", \"*:*\", \"fq\", s1+\":a\", \n                \"rows\", 100, \"fl\", \"id,\"+i1, \"sort\", i1+\" asc, id asc\", \n                \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \n                \"facet\", \"true\", \"facet.field\", t1, \"group.facet\", gfacet, \n                \"facet.limit\", flimit, \"facet.offset\", foffset);\n        }\n      }\n    }\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrClient client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n    \n    //Debug\n    simpleQuery(\"q\", \"*:*\", \"rows\", 10, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"debug\", \"true\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    // Test distributed grouping with empty indices\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", i1);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    indexr(id,1, i1, 100, tlong, 100,t1,\"now is the time for all good men\",\n           tdate_a, \"2010-04-20T11:00:00Z\",\n           tdate_b, \"2009-08-20T11:00:00Z\",\n           \"foo_f\", 1.414f, \"foo_b\", \"true\", \"foo_d\", 1.414d);\n    indexr(id,2, i1, 50 , tlong, 50,t1,\"to come to the aid of their country.\",\n           tdate_a, \"2010-05-02T11:00:00Z\",\n           tdate_b, \"2009-11-02T11:00:00Z\");\n    indexr(id,3, i1, 2, tlong, 2,t1,\"how now brown cow\",\n           tdate_a, \"2010-05-03T11:00:00Z\");\n    indexr(id,4, i1, -100 ,tlong, 101,\n           t1,\"the quick fox jumped over the lazy dog\",\n           tdate_a, \"2010-05-03T11:00:00Z\",\n           tdate_b, \"2010-05-03T11:00:00Z\");\n    indexr(id,5, i1, 500, tlong, 500 ,\n           t1,\"the quick fox jumped way over the lazy dog\",\n           tdate_a, \"2010-05-05T11:00:00Z\");\n    indexr(id,6, i1, -600, tlong, 600 ,t1,\"humpty dumpy sat on a wall\");\n    indexr(id,7, i1, 123, tlong, 123 ,t1,\"humpty dumpy had a great fall\");\n    indexr(id,8, i1, 876, tlong, 876,\n           tdate_b, \"2010-01-05T11:00:00Z\",\n           t1,\"all the kings horses and all the kings men\");\n    indexr(id,9, i1, 7, tlong, 7,t1,\"couldn't put humpty together again\");\n    indexr(id,10, i1, 4321, tlong, 4321,t1,\"this too shall pass\");\n    indexr(id,11, i1, -987, tlong, 987,\n           t1,\"An eye for eye only ends up making the whole world blind.\");\n    indexr(id,12, i1, 379, tlong, 379,\n           t1,\"Great works are performed, not by strength, but by perseverance.\");\n\n    indexr(id, 14, \"SubjectTerms_mfacet\", new String[]  {\"mathematical models\", \"mathematical analysis\"});\n    indexr(id, 15, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    indexr(id, 16, \"SubjectTerms_mfacet\", new String[]  {\"test 1\", \"test 2\", \"test3\"});\n    String[] vals = new String[100];\n    for (int i=0; i<100; i++) {\n      vals[i] = \"test \" + i;\n    }\n    indexr(id, 17, \"SubjectTerms_mfacet\", vals);\n\n    indexr(\n        id, 18, i1, 232, tlong, 332,\n        t1,\"no eggs on wall, lesson learned\",\n        oddField, \"odd man out\"\n    );\n    indexr(\n        id, 19, i1, 232, tlong, 432,\n        t1, \"many eggs on wall\",\n        oddField, \"odd man in\"\n    );\n    indexr(\n        id, 20, i1, 232, tlong, 532,\n        t1, \"some eggs on wall\",\n        oddField, \"odd man between\"\n    );\n    indexr(\n        id, 21, i1, 232, tlong, 632,\n        t1, \"a few eggs on wall\",\n        oddField, \"odd man under\"\n    );\n    indexr(\n        id, 22, i1, 232, tlong, 732,\n        t1, \"any eggs on wall\",\n        oddField, \"odd man above\"\n    );\n    indexr(\n        id, 23, i1, 233, tlong, 734,\n        t1, \"dirty eggs\",\n        oddField, \"odd eggs\"\n    );\n\n    for (int i = 100; i < 150; i++) {\n      indexr(id, i);\n    }\n\n    int[] values = new int[]{9999, 99999, 999999, 9999999};\n    for (int shard = 0; shard < clients.size(); shard++) {\n      int groupValue = values[shard];\n      for (int i = 500; i < 600; i++) {\n        index_specific(shard, \n                       i1, groupValue, \n                       s1, \"a\", \n                       id, i * (shard + 1), \n                       t1, random().nextInt(7));\n      }\n    }\n\n    commit();\n\n    // test grouping\n    // The second sort = id asc . The sorting behaviour is different in dist mode. See TopDocs#merge\n    // The shard the result came from matters in the order if both document sortvalues are equal\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"id asc, _docid_ asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"{!func}add(\" + i1 + \",5) asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"stats\", \"true\", \"stats.field\", tlong);\n    query(\"q\", \"kings\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"spellcheck\", \"true\", \"spellcheck.build\", \"true\", \"qt\", \"spellCheckCompRH\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"hl\",\"true\",\"hl.fl\",t1);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.sort\", \"id desc\");\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"offset\", 5, \"rows\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.format\", \"simple\", \"offset\", 5, \"rows\", 5);\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.offset\", 5, \"group.limit\", 5, \"sort\", i1 + \" asc, id asc\", \"group.main\", \"true\", \"offset\", 5, \"rows\", 5);\n\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4150: what if group.query has no matches, \n    // or only matches on one shard\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", \"id:5\", // single doc, so only one shard will have it\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n    handle.put(t1 + \":this_will_never_match\", SKIP); // :TODO: SOLR-4181\n    query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-4164: main query matches nothing, or only matches on one shard\n    query(\"q\", \"bogus_s:nothing\", // no docs match\n          \"group\", \"true\", \n          \"group.query\", t1 + \":this_will_never_match\",\n          \"group.field\", i1, \n          \"fl\", \"id\", \"group.limit\", \"2\", \"group.format\", \"simple\");\n    query(\"q\", \"id:5\", // one doc matches, so only one shard\n          \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \n          \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \n          \"group.field\", i1,\n          \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\");\n\n    // SOLR-3109\n    query(\"q\", t1 + \":eggs\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n    query(\"q\", i1 + \":232\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", tlong + \" asc, id asc\");\n\n    // In order to validate this we need to make sure that during indexing that all documents of one group only occur on the same shard\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n    for (String gfacet : new String[] { \"true\", \"false\" }) {\n      for (String flimit : new String[] { \"-100\",\"-1\", \"1\", \"2\", \"10000\" }) {\n        for (String foffset : new String[] { \"0\",\"1\", \"2\", \"1000\" }) {\n          query(\"q\", \"*:*\", \"fq\", s1+\":a\", \n                \"rows\", 100, \"fl\", \"id,\"+i1, \"sort\", i1+\" asc, id asc\", \n                \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \n                \"facet\", \"true\", \"facet.field\", t1, \"group.facet\", gfacet, \n                \"facet.limit\", flimit, \"facet.offset\", foffset);\n        }\n      }\n    }\n\n    // SOLR-3316\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"facet\", \"true\", \"facet.field\", t1);\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", \"group.truncate\", \"true\", \"facet\", \"true\", \"facet.field\", t1);\n\n    // SOLR-3436\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n    query(\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 0, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"sort\", i1 + \" asc, id asc\", \"group.ngroups\", \"true\");\n\n    // SOLR-3960 - include a postfilter\n    for (String facet : new String[] { \"false\", \"true\"}) {\n      for (String fcache : new String[] { \"\", \" cache=false cost=200\"}) {\n      query(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \n            \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\",\n            \"group\", \"true\", \"group.field\", i1, \n            \"fq\", \"{!frange l=50 \"+fcache+\"}\"+tlong,\n            \"facet.field\", t1,\n            \"facet\", facet\n            );\n      }\n    }\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    Object[] q =  {\"q\", \"*:*\", \"fq\", s1 + \":a\", \"rows\", 1, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"group.ngroups\", \"true\"};\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    setDistributedParams(params);\n\n    int which = r.nextInt(clients.size());\n    SolrClient client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n    NamedList nl = (NamedList<?>) rsp.getResponse().get(\"grouped\");\n    nl = (NamedList<?>) nl.getVal(0);\n    int matches = (Integer) nl.getVal(0);\n    int groupCount = (Integer) nl.get(\"ngroups\");\n    assertEquals(100 * shardsArr.length, matches);\n    assertEquals(shardsArr.length, groupCount);\n\n\n    // We cannot validate distributed grouping with scoring as first sort. since there is no global idf. We can check if no errors occur\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", i1 + \" desc\", \"group.sort\", \"score desc\"); // SOLR-2955\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10, \"sort\", \"score desc, _docid_ asc, id asc\");\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"group.limit\", 10);\n\n    // Can't validate the response, but can check if no errors occur.\n    simpleQuery(\"q\", \"*:*\", \"rows\", 100, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.query\", t1 + \":kings OR \" + t1 + \":eggs\", \"group.limit\", 10, \"sort\", i1 + \" asc, id asc\", CommonParams.TIME_ALLOWED, 1);\n    \n    //Debug\n    simpleQuery(\"q\", \"*:*\", \"rows\", 10, \"fl\", \"id,\" + i1, \"group\", \"true\", \"group.field\", i1, \"debug\", \"true\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","a25c7a2a7f197516f4b5542406f2877d0ccd90ae"],"072f211dfa8387028bb978d128c35bf9a450bbbf":["820731f8480edb13c35c29432e85168fe2c5749f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["27270b721a573cf4b774ce70b062078ef490388e","a250ecd3e83b1c6595bcae0474f5b258df42021b"],"abb23fcc2461782ab204e61213240feb77d355aa":["bafca15d8e408346a67f4282ad1143b88023893b"],"820731f8480edb13c35c29432e85168fe2c5749f":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a250ecd3e83b1c6595bcae0474f5b258df42021b":["27270b721a573cf4b774ce70b062078ef490388e"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bafca15d8e408346a67f4282ad1143b88023893b":["072f211dfa8387028bb978d128c35bf9a450bbbf"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["3685dcafc9195b0631414aa4d422f788479e62b7"],"79c2f883e7a3be9dc62d29014544d769df774aae":["7530de27b87b961b51f01bd1299b7004d46e8823"],"612521de57bdf68711c68b6d8565e4a80ca0d7f6":["a250ecd3e83b1c6595bcae0474f5b258df42021b"],"a25c7a2a7f197516f4b5542406f2877d0ccd90ae":["c65b45bfb779756505b3bc20f7c21de51a4483ca"],"9567a7c3443a4d2f26e2bae683fb25265bc6f7ed":["0414a20d73ebe5c96a6e7e70e337083ec37f01fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"af20870f6eab3807c968eec0b24e0c4358d0c1e5":["612521de57bdf68711c68b6d8565e4a80ca0d7f6"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["0414a20d73ebe5c96a6e7e70e337083ec37f01fd","9567a7c3443a4d2f26e2bae683fb25265bc6f7ed"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3685dcafc9195b0631414aa4d422f788479e62b7","19275ba31e621f6da1b83bf13af75233876fd3d4"],"27270b721a573cf4b774ce70b062078ef490388e":["9567a7c3443a4d2f26e2bae683fb25265bc6f7ed"],"407687e67faf6e1f02a211ca078d8e3eed631027":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","2f8247163846f78e14d325499507cc0a7d5821e2"],"2f8247163846f78e14d325499507cc0a7d5821e2":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"0414a20d73ebe5c96a6e7e70e337083ec37f01fd":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"c65b45bfb779756505b3bc20f7c21de51a4483ca":["79c2f883e7a3be9dc62d29014544d769df774aae"],"7530de27b87b961b51f01bd1299b7004d46e8823":["2f8247163846f78e14d325499507cc0a7d5821e2"],"3685dcafc9195b0631414aa4d422f788479e62b7":["a25c7a2a7f197516f4b5542406f2877d0ccd90ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["af20870f6eab3807c968eec0b24e0c4358d0c1e5"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"072f211dfa8387028bb978d128c35bf9a450bbbf":["bafca15d8e408346a67f4282ad1143b88023893b"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"820731f8480edb13c35c29432e85168fe2c5749f":["072f211dfa8387028bb978d128c35bf9a450bbbf"],"a250ecd3e83b1c6595bcae0474f5b258df42021b":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","612521de57bdf68711c68b6d8565e4a80ca0d7f6"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["0414a20d73ebe5c96a6e7e70e337083ec37f01fd"],"bafca15d8e408346a67f4282ad1143b88023893b":["abb23fcc2461782ab204e61213240feb77d355aa"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["820731f8480edb13c35c29432e85168fe2c5749f","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"79c2f883e7a3be9dc62d29014544d769df774aae":["c65b45bfb779756505b3bc20f7c21de51a4483ca"],"612521de57bdf68711c68b6d8565e4a80ca0d7f6":["af20870f6eab3807c968eec0b24e0c4358d0c1e5"],"a25c7a2a7f197516f4b5542406f2877d0ccd90ae":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3685dcafc9195b0631414aa4d422f788479e62b7"],"9567a7c3443a4d2f26e2bae683fb25265bc6f7ed":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","27270b721a573cf4b774ce70b062078ef490388e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"af20870f6eab3807c968eec0b24e0c4358d0c1e5":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"27270b721a573cf4b774ce70b062078ef490388e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a250ecd3e83b1c6595bcae0474f5b258df42021b"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"2f8247163846f78e14d325499507cc0a7d5821e2":["407687e67faf6e1f02a211ca078d8e3eed631027","7530de27b87b961b51f01bd1299b7004d46e8823"],"0414a20d73ebe5c96a6e7e70e337083ec37f01fd":["9567a7c3443a4d2f26e2bae683fb25265bc6f7ed","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"c65b45bfb779756505b3bc20f7c21de51a4483ca":["a25c7a2a7f197516f4b5542406f2877d0ccd90ae"],"7530de27b87b961b51f01bd1299b7004d46e8823":["79c2f883e7a3be9dc62d29014544d769df774aae"],"3685dcafc9195b0631414aa4d422f788479e62b7":["19275ba31e621f6da1b83bf13af75233876fd3d4","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["407687e67faf6e1f02a211ca078d8e3eed631027","2f8247163846f78e14d325499507cc0a7d5821e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}