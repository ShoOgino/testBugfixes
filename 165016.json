{"path":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","commits":[{"id":"a2a81b3988dfbdfb187c425043b89868e359b238","date":1329919075,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelAtomicReader((AtomicReader) wrappedReader);\n    IndexSearcher searcher = newSearcher(wrappedReader);\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (AlreadyClosedException ace) {\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelAtomicReader((AtomicReader) wrappedReader);\n    IndexSearcher searcher = newSearcher(wrappedReader);\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (AlreadyClosedException ace) {\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c8719b2c0b382be11f5b193b6fc14bc310e906b","date":1344770591,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","sourceNew":"  // LUCENE-3800\n  @BadApple\n  @AwaitsFix(bugUrl = \"LUCENE-4280\")\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelAtomicReader((AtomicReader) wrappedReader);\n\n    // TODO: LUCENE-4280; this fails:\n    IndexSearcher searcher = newSearcher(wrappedReader);\n    // but with this it works: IndexSearcher searcher = new IndexSearcher(wrappedReader);\n\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (AlreadyClosedException ace) {\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    }\n  }\n\n","sourceOld":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelAtomicReader((AtomicReader) wrappedReader);\n    IndexSearcher searcher = newSearcher(wrappedReader);\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (AlreadyClosedException ace) {\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dec992086c0eef64fab1328b37bbbfbb829cd192","date":1344771444,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","sourceNew":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelAtomicReader((AtomicReader) wrappedReader);\n\n    IndexSearcher searcher = newSearcher(wrappedReader);\n\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (AlreadyClosedException ace) {\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    } finally {\n      // shutdown executor: in case of wrap-wrap-wrapping\n      searcher.getIndexReader().close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-3800\n  @BadApple\n  @AwaitsFix(bugUrl = \"LUCENE-4280\")\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelAtomicReader((AtomicReader) wrappedReader);\n\n    // TODO: LUCENE-4280; this fails:\n    IndexSearcher searcher = newSearcher(wrappedReader);\n    // but with this it works: IndexSearcher searcher = new IndexSearcher(wrappedReader);\n\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (AlreadyClosedException ace) {\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","sourceNew":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelAtomicReader((AtomicReader) wrappedReader);\n\n    IndexSearcher searcher = newSearcher(wrappedReader);\n\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (AlreadyClosedException ace) {\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    } finally {\n      // shutdown executor: in case of wrap-wrap-wrapping\n      searcher.getIndexReader().close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelAtomicReader((AtomicReader) wrappedReader);\n    IndexSearcher searcher = newSearcher(wrappedReader);\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (AlreadyClosedException ace) {\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","sourceNew":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelAtomicReader((AtomicReader) wrappedReader);\n\n    IndexSearcher searcher = newSearcher(wrappedReader);\n\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (AlreadyClosedException ace) {\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    } finally {\n      // shutdown executor: in case of wrap-wrap-wrapping\n      searcher.getIndexReader().close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelAtomicReader((AtomicReader) wrappedReader);\n    IndexSearcher searcher = newSearcher(wrappedReader);\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (AlreadyClosedException ace) {\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","sourceNew":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelAtomicReader((AtomicReader) wrappedReader);\n\n    IndexSearcher searcher = newSearcher(wrappedReader);\n\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (AlreadyClosedException ace) {\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    } finally {\n      // close executor: in case of wrap-wrap-wrapping\n      searcher.getIndexReader().close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelAtomicReader((AtomicReader) wrappedReader);\n\n    IndexSearcher searcher = newSearcher(wrappedReader);\n\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (AlreadyClosedException ace) {\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    } finally {\n      // shutdown executor: in case of wrap-wrap-wrapping\n      searcher.getIndexReader().close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","sourceNew":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelLeafReader((LeafReader) wrappedReader);\n\n    IndexSearcher searcher = newSearcher(wrappedReader);\n\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (AlreadyClosedException ace) {\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    } finally {\n      // close executor: in case of wrap-wrap-wrapping\n      searcher.getIndexReader().close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelAtomicReader((AtomicReader) wrappedReader);\n\n    IndexSearcher searcher = newSearcher(wrappedReader);\n\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (AlreadyClosedException ace) {\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    } finally {\n      // close executor: in case of wrap-wrap-wrapping\n      searcher.getIndexReader().close();\n    }\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0","date":1412077943,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","sourceNew":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelLeafReader((LeafReader) wrappedReader);\n\n    IndexSearcher searcher = newSearcher(wrappedReader);\n\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (Exception e) {\n      AlreadyClosedException ace = null;\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        if (t instanceof AlreadyClosedException) {\n          ace = (AlreadyClosedException) t;\n        }\n      }\n      assertNotNull(\"Query failed, but not due to an AlreadyClosedException\", ace);\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    } finally {\n      // close executor: in case of wrap-wrap-wrapping\n      searcher.getIndexReader().close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelLeafReader((LeafReader) wrappedReader);\n\n    IndexSearcher searcher = newSearcher(wrappedReader);\n\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (AlreadyClosedException ace) {\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    } finally {\n      // close executor: in case of wrap-wrap-wrapping\n      searcher.getIndexReader().close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","sourceNew":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelLeafReader((LeafReader) wrappedReader);\n\n    IndexSearcher searcher = newSearcher(wrappedReader);\n\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (Exception e) {\n      AlreadyClosedException ace = null;\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        if (t instanceof AlreadyClosedException) {\n          ace = (AlreadyClosedException) t;\n        }\n      }\n      assertNotNull(\"Query failed, but not due to an AlreadyClosedException\", ace);\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    } finally {\n      // close executor: in case of wrap-wrap-wrapping\n      searcher.getIndexReader().close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelLeafReader((LeafReader) wrappedReader);\n\n    IndexSearcher searcher = newSearcher(wrappedReader);\n\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (AlreadyClosedException ace) {\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    } finally {\n      // close executor: in case of wrap-wrap-wrapping\n      searcher.getIndexReader().close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","sourceNew":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    LeafReader wrappedReader = new ParallelLeafReader(getOnlyLeafReader(reader));\n\n    IndexSearcher searcher = newSearcher(wrappedReader);\n\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (Exception e) {\n      AlreadyClosedException ace = null;\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        if (t instanceof AlreadyClosedException) {\n          ace = (AlreadyClosedException) t;\n        }\n      }\n      assertNotNull(\"Query failed, but not due to an AlreadyClosedException\", ace);\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    } finally {\n      // close executor: in case of wrap-wrap-wrapping\n      searcher.getIndexReader().close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    IndexReader wrappedReader = SlowCompositeReaderWrapper.wrap(reader);\n    wrappedReader = new ParallelLeafReader((LeafReader) wrappedReader);\n\n    IndexSearcher searcher = newSearcher(wrappedReader);\n\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (Exception e) {\n      AlreadyClosedException ace = null;\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        if (t instanceof AlreadyClosedException) {\n          ace = (AlreadyClosedException) t;\n        }\n      }\n      assertNotNull(\"Query failed, but not due to an AlreadyClosedException\", ace);\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    } finally {\n      // close executor: in case of wrap-wrap-wrapping\n      searcher.getIndexReader().close();\n    }\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","a2a81b3988dfbdfb187c425043b89868e359b238"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db1392222972bed979defb7b7df4ce46320e36d0","date":1488391934,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestReaderClosed#testReaderChaining().mjava","sourceNew":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    LeafReader wrappedReader = new ParallelLeafReader(getOnlyLeafReader(reader));\n\n    // We wrap with a OwnCacheKeyMultiReader so that closing the underlying reader\n    // does not terminate the threadpool (if that index searcher uses one)\n    IndexSearcher searcher = newSearcher(new OwnCacheKeyMultiReader(wrappedReader));\n\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (Exception e) {\n      AlreadyClosedException ace = null;\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        if (t instanceof AlreadyClosedException) {\n          ace = (AlreadyClosedException) t;\n        }\n      }\n      if (ace == null) {\n        throw new AssertionError(\"Query failed, but not due to an AlreadyClosedException\", e);\n      }\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    } finally {\n      // close executor: in case of wrap-wrap-wrapping\n      searcher.getIndexReader().close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-3800\n  public void testReaderChaining() throws Exception {\n    assertTrue(reader.getRefCount() > 0);\n    LeafReader wrappedReader = new ParallelLeafReader(getOnlyLeafReader(reader));\n\n    IndexSearcher searcher = newSearcher(wrappedReader);\n\n    TermRangeQuery query = TermRangeQuery.newStringRange(\"field\", \"a\", \"z\", true, true);\n    searcher.search(query, 5);\n    reader.close(); // close original child reader\n    try {\n      searcher.search(query, 5);\n    } catch (Exception e) {\n      AlreadyClosedException ace = null;\n      for (Throwable t = e; t != null; t = t.getCause()) {\n        if (t instanceof AlreadyClosedException) {\n          ace = (AlreadyClosedException) t;\n        }\n      }\n      assertNotNull(\"Query failed, but not due to an AlreadyClosedException\", ace);\n      assertEquals(\n        \"this IndexReader cannot be used anymore as one of its child readers was closed\",\n        ace.getMessage()\n      );\n    } finally {\n      // close executor: in case of wrap-wrap-wrapping\n      searcher.getIndexReader().close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a2a81b3988dfbdfb187c425043b89868e359b238"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["c9fb5f46e264daf5ba3860defe623a89d202dd87","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a2a81b3988dfbdfb187c425043b89868e359b238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a2a81b3988dfbdfb187c425043b89868e359b238","dec992086c0eef64fab1328b37bbbfbb829cd192"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db1392222972bed979defb7b7df4ce46320e36d0":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["dec992086c0eef64fab1328b37bbbfbb829cd192"],"dec992086c0eef64fab1328b37bbbfbb829cd192":["1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["a2a81b3988dfbdfb187c425043b89868e359b238","dec992086c0eef64fab1328b37bbbfbb829cd192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db1392222972bed979defb7b7df4ce46320e36d0"],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["a2a81b3988dfbdfb187c425043b89868e359b238"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"59ce67ef5584d0d65a576a6bbe06322cc84eb9b0":["d9a47902d6207303f5ed3e7aaca62ca33433af66","0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"a2a81b3988dfbdfb187c425043b89868e359b238":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","1c8719b2c0b382be11f5b193b6fc14bc310e906b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d9a47902d6207303f5ed3e7aaca62ca33433af66","59ce67ef5584d0d65a576a6bbe06322cc84eb9b0"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["db1392222972bed979defb7b7df4ce46320e36d0"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a2a81b3988dfbdfb187c425043b89868e359b238"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"db1392222972bed979defb7b7df4ce46320e36d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dec992086c0eef64fab1328b37bbbfbb829cd192":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ef034a4f10871667ae75181537775ddcf8ade4","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"1c8719b2c0b382be11f5b193b6fc14bc310e906b":["dec992086c0eef64fab1328b37bbbfbb829cd192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d9a47902d6207303f5ed3e7aaca62ca33433af66","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}