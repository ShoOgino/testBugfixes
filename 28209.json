{"path":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#findArc(int,int,Arc[T]).mjava","commits":[{"id":"d4769bdea5a853f1841c485bc1fd9d79cb7022fc","date":1292168168,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#findArc(int,int,Arc[T]).mjava","pathOld":"/dev/null","sourceNew":"  public Arc<T> findArc(int address, int labelToMatch, Arc<T> arc) throws IOException {\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = new BytesReader(address);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      //System.out.println(\"findArc: array label=\" + labelToMatch);\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextArc(arc);\n        }\n      }\n\n      return null;\n    }\n    //System.out.println(\"findArc: scan\");\n\n    readFirstArc(address, arc);\n\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#findArc(int,int,Arc[T]).mjava","pathOld":"/dev/null","sourceNew":"  public Arc<T> findArc(int address, int labelToMatch, Arc<T> arc) throws IOException {\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = new BytesReader(address);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      //System.out.println(\"findArc: array label=\" + labelToMatch);\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextArc(arc);\n        }\n      }\n\n      return null;\n    }\n    //System.out.println(\"findArc: scan\");\n\n    readFirstArc(address, arc);\n\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#findArc(int,int,Arc[T]).mjava","pathOld":"/dev/null","sourceNew":"  public Arc<T> findArc(int address, int labelToMatch, Arc<T> arc) throws IOException {\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = new BytesReader(address);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      //System.out.println(\"findArc: array label=\" + labelToMatch);\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextArc(arc);\n        }\n      }\n\n      return null;\n    }\n    //System.out.println(\"findArc: scan\");\n\n    readFirstArc(address, arc);\n\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56da903869515527852ee21ea7ef7bfe414cd40d","date":1294224724,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#findTargetArc(int,Arc[T],Arc[T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#findArc(int,int,Arc[T]).mjava","sourceNew":"  /** Finds an arc leaving the incoming arc, replacing the arc in place.\n   *  This returns null if the arc was not found, else the incoming arc. */\n  public Arc<T> findTargetArc(int labelToMatch, Arc<T> follow, Arc<T> arc) throws IOException {\n\n    if (labelToMatch == END_LABEL) {\n      if (follow.isFinal()) {\n        arc.output = follow.nextFinalOutput;\n        arc.label = END_LABEL;\n        return arc;\n      } else {\n        return null;\n      }\n    }\n\n    if (!targetHasArcs(follow)) {\n      return null;\n    }\n\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = getBytesReader(follow.target);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextRealArc(arc);\n        }\n      }\n\n      return null;\n    }\n\n    // Linear scan\n    readFirstTargetArc(follow, arc);\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.label > labelToMatch) {\n        return null;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","sourceOld":"  public Arc<T> findArc(int address, int labelToMatch, Arc<T> arc) throws IOException {\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = new BytesReader(address);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      //System.out.println(\"findArc: array label=\" + labelToMatch);\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextArc(arc);\n        }\n      }\n\n      return null;\n    }\n    //System.out.println(\"findArc: scan\");\n\n    readFirstArc(address, arc);\n\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["7f32ed90e12610550e1363aea43afe3d6e292cf9","7f32ed90e12610550e1363aea43afe3d6e292cf9","7f32ed90e12610550e1363aea43afe3d6e292cf9","7f32ed90e12610550e1363aea43afe3d6e292cf9","7f32ed90e12610550e1363aea43afe3d6e292cf9","7f32ed90e12610550e1363aea43afe3d6e292cf9","7f32ed90e12610550e1363aea43afe3d6e292cf9","7f32ed90e12610550e1363aea43afe3d6e292cf9","7f32ed90e12610550e1363aea43afe3d6e292cf9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#findArc(int,int,Arc[T]).mjava","sourceNew":null,"sourceOld":"  public Arc<T> findArc(int address, int labelToMatch, Arc<T> arc) throws IOException {\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = new BytesReader(address);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      //System.out.println(\"findArc: array label=\" + labelToMatch);\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextArc(arc);\n        }\n      }\n\n      return null;\n    }\n    //System.out.println(\"findArc: scan\");\n\n    readFirstArc(address, arc);\n\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/fst/FST#findArc(int,int,Arc[T]).mjava","sourceNew":null,"sourceOld":"  public Arc<T> findArc(int address, int labelToMatch, Arc<T> arc) throws IOException {\n    // TODO: maybe make an explicit thread state that holds\n    // reusable stuff eg BytesReader:\n    final BytesReader in = new BytesReader(address);\n\n    if ((in.readByte() & BIT_ARCS_AS_FIXED_ARRAY) != 0) {\n      // Arcs are full array; do binary search:\n      //System.out.println(\"findArc: array label=\" + labelToMatch);\n      arc.numArcs = in.readVInt();\n      arc.bytesPerArc = in.readByte() & 0xFF;\n      arc.posArcsStart = in.pos;\n      int low = 0;\n      int high = arc.numArcs-1;\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        in.pos = arc.posArcsStart - arc.bytesPerArc*mid - 1;\n        int midLabel = readLabel(in);\n        final int cmp = midLabel - labelToMatch;\n        if (cmp < 0)\n          low = mid + 1;\n        else if (cmp > 0)\n          high = mid - 1;\n        else {\n          arc.arcIdx = mid-1;\n          return readNextArc(arc);\n        }\n      }\n\n      return null;\n    }\n    //System.out.println(\"findArc: scan\");\n\n    readFirstArc(address, arc);\n\n    while(true) {\n      if (arc.label == labelToMatch) {\n        return arc;\n      } else if (arc.isLast()) {\n        return null;\n      } else {\n        readNextArc(arc);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","56da903869515527852ee21ea7ef7bfe414cd40d"],"56da903869515527852ee21ea7ef7bfe414cd40d":["d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","56da903869515527852ee21ea7ef7bfe414cd40d"],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56da903869515527852ee21ea7ef7bfe414cd40d"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"56da903869515527852ee21ea7ef7bfe414cd40d":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d4769bdea5a853f1841c485bc1fd9d79cb7022fc"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["70ad682703b8585f5d0a637efec044d57ec05efb"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"d4769bdea5a853f1841c485bc1fd9d79cb7022fc":["56da903869515527852ee21ea7ef7bfe414cd40d","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}