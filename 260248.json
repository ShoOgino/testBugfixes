{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#[T]_getClusterProperty(String,T).mjava","commits":[{"id":"115923bc88e5b1dc4bef049b1ded8486723052ed","date":1463216796,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#[T]_getClusterProperty(String,T).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public <T> T getClusterProperty(String key, T defaultValue) {\n    T value = (T) clusterProperties.get(key);\n    if (value == null)\n      return defaultValue;\n    return value;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#[T]_getClusterProperty(String,T).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public <T> T getClusterProperty(String key, T defaultValue) {\n    T value = (T) clusterProperties.get(key);\n    if (value == null)\n      return defaultValue;\n    return value;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#[T]_getClusterProperty(String,T).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public <T> T getClusterProperty(String key, T defaultValue) {\n    T value = (T) clusterProperties.get(key);\n    if (value == null)\n      return defaultValue;\n    return value;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e74e91ad2008b539f378b72f57dbdcaa97b38bce","date":1469699752,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#[T]_getClusterProperty(String,T).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#[T]_getClusterProperty(String,T).mjava","sourceNew":"  /**\n   * Get a cluster property\n   *\n   * N.B. Cluster properties are updated via ZK watchers, and so may not necessarily\n   * be completely up-to-date.  If you need to get the latest version, then use a\n   * {@link ClusterProperties} instance.\n   *\n   * @param key           the property to read\n   * @param defaultValue  a default value to use if no such property exists\n   * @param <T>           the type of the property\n   * @return the cluster property, or a default if the property is not set\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T getClusterProperty(String key, T defaultValue) {\n    T value = (T) clusterProperties.get(key);\n    if (value == null)\n      return defaultValue;\n    return value;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public <T> T getClusterProperty(String key, T defaultValue) {\n    T value = (T) clusterProperties.get(key);\n    if (value == null)\n      return defaultValue;\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#[T]_getClusterProperty(String,T).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#[T]_getClusterProperty(String,T).mjava","sourceNew":"  /**\n   * Get a cluster property\n   *\n   * N.B. Cluster properties are updated via ZK watchers, and so may not necessarily\n   * be completely up-to-date.  If you need to get the latest version, then use a\n   * {@link ClusterProperties} instance.\n   *\n   * @param key           the property to read\n   * @param defaultValue  a default value to use if no such property exists\n   * @param <T>           the type of the property\n   * @return the cluster property, or a default if the property is not set\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T getClusterProperty(String key, T defaultValue) {\n    T value = (T) clusterProperties.get(key);\n    if (value == null)\n      return defaultValue;\n    return value;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public <T> T getClusterProperty(String key, T defaultValue) {\n    T value = (T) clusterProperties.get(key);\n    if (value == null)\n      return defaultValue;\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#[T]_getClusterProperty(String,T).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get a cluster property\n   *\n   * N.B. Cluster properties are updated via ZK watchers, and so may not necessarily\n   * be completely up-to-date.  If you need to get the latest version, then use a\n   * {@link ClusterProperties} instance.\n   *\n   * @param key           the property to read\n   * @param defaultValue  a default value to use if no such property exists\n   * @param <T>           the type of the property\n   * @return the cluster property, or a default if the property is not set\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T getClusterProperty(String key, T defaultValue) {\n    T value = (T) clusterProperties.get(key);\n    if (value == null)\n      return defaultValue;\n    return value;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444","date":1527778252,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#[T]_getClusterProperty(String,T).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#[T]_getClusterProperty(String,T).mjava","sourceNew":"  /**\n   * Get a cluster property\n   *\n   * N.B. Cluster properties are updated via ZK watchers, and so may not necessarily\n   * be completely up-to-date.  If you need to get the latest version, then use a\n   * {@link ClusterProperties} instance.\n   *\n   * @param key           the property to read\n   * @param defaultValue  a default value to use if no such property exists\n   * @param <T>           the type of the property\n   * @return the cluster property, or a default if the property is not set\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T getClusterProperty(String key, T defaultValue) {\n    T value = (T) Utils.getObjectByPath( clusterProperties, false, key);\n    if (value == null)\n      return defaultValue;\n    return value;\n  }\n\n","sourceOld":"  /**\n   * Get a cluster property\n   *\n   * N.B. Cluster properties are updated via ZK watchers, and so may not necessarily\n   * be completely up-to-date.  If you need to get the latest version, then use a\n   * {@link ClusterProperties} instance.\n   *\n   * @param key           the property to read\n   * @param defaultValue  a default value to use if no such property exists\n   * @param <T>           the type of the property\n   * @return the cluster property, or a default if the property is not set\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T getClusterProperty(String key, T defaultValue) {\n    T value = (T) clusterProperties.get(key);\n    if (value == null)\n      return defaultValue;\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#[T]_getClusterProperty(String,T).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#[T]_getClusterProperty(String,T).mjava","sourceNew":"  /**\n   * Get a cluster property\n   * <p>\n   * N.B. Cluster properties are updated via ZK watchers, and so may not necessarily\n   * be completely up-to-date.  If you need to get the latest version, then use a\n   * {@link ClusterProperties} instance.\n   *\n   * @param key          the property to read\n   * @param defaultValue a default value to use if no such property exists\n   * @param <T>          the type of the property\n   * @return the cluster property, or a default if the property is not set\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T getClusterProperty(String key, T defaultValue) {\n    T value = (T) Utils.getObjectByPath(clusterProperties, false, key);\n    if (value == null)\n      return defaultValue;\n    return value;\n  }\n\n","sourceOld":"  /**\n   * Get a cluster property\n   *\n   * N.B. Cluster properties are updated via ZK watchers, and so may not necessarily\n   * be completely up-to-date.  If you need to get the latest version, then use a\n   * {@link ClusterProperties} instance.\n   *\n   * @param key           the property to read\n   * @param defaultValue  a default value to use if no such property exists\n   * @param <T>           the type of the property\n   * @return the cluster property, or a default if the property is not set\n   */\n  @SuppressWarnings(\"unchecked\")\n  public <T> T getClusterProperty(String key, T defaultValue) {\n    T value = (T) Utils.getObjectByPath( clusterProperties, false, key);\n    if (value == null)\n      return defaultValue;\n    return value;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e74e91ad2008b539f378b72f57dbdcaa97b38bce":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["9fa9cb6b109951110cc6d6a6a79c22ad6ee88444"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","115923bc88e5b1dc4bef049b1ded8486723052ed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e74e91ad2008b539f378b72f57dbdcaa97b38bce"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["d470c8182e92b264680e34081b75e70a9f2b3c89","e74e91ad2008b539f378b72f57dbdcaa97b38bce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444":["e74e91ad2008b539f378b72f57dbdcaa97b38bce"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"e74e91ad2008b539f378b72f57dbdcaa97b38bce":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","9fa9cb6b109951110cc6d6a6a79c22ad6ee88444"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["0ad30c6a479e764150a3316e57263319775f1df2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["115923bc88e5b1dc4bef049b1ded8486723052ed","0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["e74e91ad2008b539f378b72f57dbdcaa97b38bce","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"9fa9cb6b109951110cc6d6a6a79c22ad6ee88444":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}