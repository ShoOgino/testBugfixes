{"path":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","pathOld":"src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","sourceNew":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","sourceOld":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","sourceNew":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file, IOContext.DEFAULT);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file, IOContext.DEFAULT);\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","sourceOld":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","sourceNew":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file, newIOContext(random));\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file, newIOContext(random));\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","sourceOld":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file, IOContext.DEFAULT);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file, IOContext.DEFAULT);\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c162b4b9ef005383c38e0912c16267584dc40de5","date":1310021443,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","sourceNew":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // IOContext triggers different buffer sizes so we use default here\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file, IOContext.DEFAULT);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file, IOContext.DEFAULT);\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","sourceOld":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file, newIOContext(random));\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file, newIOContext(random));\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","sourceNew":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file, newIOContext(random));\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file, newIOContext(random));\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","sourceOld":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // IOContext triggers different buffer sizes so we use default here\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file, IOContext.DEFAULT);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file, IOContext.DEFAULT);\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1291e4568eb7d9463d751627596ef14baf4c1603","date":1310112572,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","sourceNew":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file, IOContext.DEFAULT);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file, IOContext.DEFAULT);\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","sourceOld":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file, newIOContext(random));\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file, newIOContext(random));\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","sourceNew":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file, IOContext.DEFAULT);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file, IOContext.DEFAULT);\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","sourceOld":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","sourceNew":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file, IOContext.DEFAULT);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file, IOContext.DEFAULT);\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","sourceOld":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file);\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestCompoundFile#demo_FSIndexInputBug(Directory,String).mjava","sourceNew":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file, IOContext.DEFAULT);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file, IOContext.DEFAULT);\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","sourceOld":"    private void demo_FSIndexInputBug(Directory fsdir, String file)\n    throws IOException\n    {\n        // Setup the test file - we need more than 1024 bytes\n        IndexOutput os = fsdir.createOutput(file, IOContext.DEFAULT);\n        for(int i=0; i<2000; i++) {\n            os.writeByte((byte) i);\n        }\n        os.close();\n\n        IndexInput in = fsdir.openInput(file, IOContext.DEFAULT);\n\n        // This read primes the buffer in IndexInput\n        in.readByte();\n\n        // Close the file\n        in.close();\n\n        // ERROR: this call should fail, but succeeds because the buffer\n        // is still filled\n        in.readByte();\n\n        // ERROR: this call should fail, but succeeds for some reason as well\n        in.seek(1099);\n\n        try {\n            // OK: this call correctly fails. We are now past the 1024 internal\n            // buffer, so an actual IO is attempted, which fails\n            in.readByte();\n            fail(\"expected readByte() to throw exception\");\n        } catch (IOException e) {\n          // expected exception\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1291e4568eb7d9463d751627596ef14baf4c1603":["d083e83f225b11e5fdd900e83d26ddb385b6955c","9454a6510e2db155fb01faa5c049b06ece95fab9"],"c162b4b9ef005383c38e0912c16267584dc40de5":["b6f9be74ca7baaef11857ad002cad40419979516"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["9454a6510e2db155fb01faa5c049b06ece95fab9","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["9454a6510e2db155fb01faa5c049b06ece95fab9","1291e4568eb7d9463d751627596ef14baf4c1603"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["c162b4b9ef005383c38e0912c16267584dc40de5","9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1291e4568eb7d9463d751627596ef14baf4c1603":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"c162b4b9ef005383c38e0912c16267584dc40de5":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b6f9be74ca7baaef11857ad002cad40419979516":["c162b4b9ef005383c38e0912c16267584dc40de5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["1291e4568eb7d9463d751627596ef14baf4c1603"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1291e4568eb7d9463d751627596ef14baf4c1603","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5d004d0e0b3f65bb40da76d476d659d7888270e8","ddc4c914be86e34b54f70023f45a60fa7f04e929","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}