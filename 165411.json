{"path":"src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,float...).mjava","commits":[{"id":"4aa57ace203f336e00a38867cb7e815ca4e1572e","date":1190088278,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,float...).mjava","pathOld":"/dev/null","sourceNew":"  void singleTest(String field, String funcTemplate, float... results) {\n    // lrf.args.put(\"version\",\"2.0\");\n    String parseableQuery = func(field, funcTemplate);\n    List<String> tests = new ArrayList<String>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_pf']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + field + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(\"q\", parseableQuery\n                ,\"fl\", \"*,score\"\n                )\n            , tests.toArray(new String[tests.size()])\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b7074ac9bb3423ad148c7269a478bf1f7ef14030"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7d6b8491b15b391062b53404b4af3c8f18924090","date":1193061194,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,float...).mjava","pathOld":"src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,float...).mjava","sourceNew":"  void singleTest(String field, String funcTemplate, float... results) {\n    // lrf.args.put(\"version\",\"2.0\");\n    String parseableQuery = func(field, funcTemplate);\n    List<String> tests = new ArrayList<String>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_pf']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(\"q\", parseableQuery\n                ,\"fl\", \"*,score\",\"indent\",\"on\",\"rows\",\"100\"\n                )\n            , tests.toArray(new String[tests.size()])\n            );\n  }\n\n","sourceOld":"  void singleTest(String field, String funcTemplate, float... results) {\n    // lrf.args.put(\"version\",\"2.0\");\n    String parseableQuery = func(field, funcTemplate);\n    List<String> tests = new ArrayList<String>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_pf']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + field + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(\"q\", parseableQuery\n                ,\"fl\", \"*,score\"\n                )\n            , tests.toArray(new String[tests.size()])\n            );\n  }\n\n","bugFix":null,"bugIntro":["b7074ac9bb3423ad148c7269a478bf1f7ef14030"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7074ac9bb3423ad148c7269a478bf1f7ef14030","date":1236285231,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,float...).mjava","pathOld":"src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,float...).mjava","sourceNew":"  void singleTest(String field, String funcTemplate, float... results) {\n    singleTest(field, funcTemplate, null, results);\n  }\n\n","sourceOld":"  void singleTest(String field, String funcTemplate, float... results) {\n    // lrf.args.put(\"version\",\"2.0\");\n    String parseableQuery = func(field, funcTemplate);\n    List<String> tests = new ArrayList<String>();\n\n    // Construct xpaths like the following:\n    // \"//doc[./float[@name='foo_pf']='10.0' and ./float[@name='score']='10.0']\"\n\n    for (int i=0; i<results.length; i+=2) {\n      String xpath = \"//doc[./float[@name='\" + \"id\" + \"']='\"\n              + results[i] + \"' and ./float[@name='score']='\"\n              + results[i+1] + \"']\";\n      tests.add(xpath);\n    }\n\n    assertQ(req(\"q\", parseableQuery\n                ,\"fl\", \"*,score\",\"indent\",\"on\",\"rows\",\"100\"\n                )\n            , tests.toArray(new String[tests.size()])\n            );\n  }\n\n","bugFix":["4aa57ace203f336e00a38867cb7e815ca4e1572e","7d6b8491b15b391062b53404b4af3c8f18924090"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,float...).mjava","pathOld":"src/test/org/apache/solr/search/function/TestFunctionQuery#singleTest(String,String,float...).mjava","sourceNew":"  void singleTest(String field, String funcTemplate, float... results) {\n    singleTest(field, funcTemplate, null, results);\n  }\n\n","sourceOld":"  void singleTest(String field, String funcTemplate, float... results) {\n    singleTest(field, funcTemplate, null, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b7074ac9bb3423ad148c7269a478bf1f7ef14030":["7d6b8491b15b391062b53404b4af3c8f18924090"],"4aa57ace203f336e00a38867cb7e815ca4e1572e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7d6b8491b15b391062b53404b4af3c8f18924090":["4aa57ace203f336e00a38867cb7e815ca4e1572e"],"ad94625fb8d088209f46650c8097196fec67f00c":["b7074ac9bb3423ad148c7269a478bf1f7ef14030"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"b7074ac9bb3423ad148c7269a478bf1f7ef14030":["ad94625fb8d088209f46650c8097196fec67f00c"],"4aa57ace203f336e00a38867cb7e815ca4e1572e":["7d6b8491b15b391062b53404b4af3c8f18924090"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4aa57ace203f336e00a38867cb7e815ca4e1572e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7d6b8491b15b391062b53404b4af3c8f18924090":["b7074ac9bb3423ad148c7269a478bf1f7ef14030"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}