{"path":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkPerformance(Classifier[T],Analyzer,String).mjava","commits":[{"id":"45ae8f6354b0826d27014deff71fe330604a9783","date":1378195819,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkPerformance(Classifier[T],Analyzer,String).mjava","pathOld":"/dev/null","sourceNew":"  protected void checkPerformance(Classifier<T> classifier, Analyzer analyzer, String classFieldName) throws Exception {\n    AtomicReader atomicReader = null;\n    long trainStart = System.currentTimeMillis();\n    long trainEnd = 0l;\n    try {\n      populatePerformanceIndex(analyzer);\n      atomicReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(atomicReader, textFieldName, classFieldName, analyzer);\n      trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 2 mins : \" + trainTime / 1000 + \"s\", trainTime < 120000);\n    } finally {\n      if (atomicReader != null)\n        atomicReader.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e81d41dc4e40aa3edd42c5abd8c648b65b9cedec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e81d41dc4e40aa3edd42c5abd8c648b65b9cedec","date":1384175856,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkPerformance(Classifier[T],Analyzer,String).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkPerformance(Classifier[T],Analyzer,String).mjava","sourceNew":"  protected void checkPerformance(Classifier<T> classifier, Analyzer analyzer, String classFieldName) throws Exception {\n    AtomicReader atomicReader = null;\n    long trainStart = System.currentTimeMillis();\n    try {\n      populatePerformanceIndex(analyzer);\n      atomicReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(atomicReader, textFieldName, classFieldName, analyzer);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 2 mins : \" + trainTime / 1000 + \"s\", trainTime < 120000);\n    } finally {\n      if (atomicReader != null)\n        atomicReader.close();\n    }\n  }\n\n","sourceOld":"  protected void checkPerformance(Classifier<T> classifier, Analyzer analyzer, String classFieldName) throws Exception {\n    AtomicReader atomicReader = null;\n    long trainStart = System.currentTimeMillis();\n    long trainEnd = 0l;\n    try {\n      populatePerformanceIndex(analyzer);\n      atomicReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(atomicReader, textFieldName, classFieldName, analyzer);\n      trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 2 mins : \" + trainTime / 1000 + \"s\", trainTime < 120000);\n    } finally {\n      if (atomicReader != null)\n        atomicReader.close();\n    }\n  }\n\n","bugFix":["45ae8f6354b0826d27014deff71fe330604a9783"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkPerformance(Classifier[T],Analyzer,String).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkPerformance(Classifier[T],Analyzer,String).mjava","sourceNew":"  protected void checkPerformance(Classifier<T> classifier, Analyzer analyzer, String classFieldName) throws Exception {\n    LeafReader leafReader = null;\n    long trainStart = System.currentTimeMillis();\n    try {\n      populatePerformanceIndex(analyzer);\n      leafReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(leafReader, textFieldName, classFieldName, analyzer);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 2 mins : \" + trainTime / 1000 + \"s\", trainTime < 120000);\n    } finally {\n      if (leafReader != null)\n        leafReader.close();\n    }\n  }\n\n","sourceOld":"  protected void checkPerformance(Classifier<T> classifier, Analyzer analyzer, String classFieldName) throws Exception {\n    AtomicReader atomicReader = null;\n    long trainStart = System.currentTimeMillis();\n    try {\n      populatePerformanceIndex(analyzer);\n      atomicReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(atomicReader, textFieldName, classFieldName, analyzer);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 2 mins : \" + trainTime / 1000 + \"s\", trainTime < 120000);\n    } finally {\n      if (atomicReader != null)\n        atomicReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"360ff513ddb24a30ffa2111a3ef0f91038803100","date":1430403123,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkPerformance(Classifier[T],Analyzer,String).mjava","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkPerformance(Classifier[T],Analyzer,String).mjava","sourceNew":"  protected void checkPerformance(Classifier<T> classifier, Analyzer analyzer, String classFieldName) throws Exception {\n    long trainStart = System.currentTimeMillis();\n    populatePerformanceIndex(analyzer);\n    long trainEnd = System.currentTimeMillis();\n    long trainTime = trainEnd - trainStart;\n    assertTrue(\"training took more than 2 mins : \" + trainTime / 1000 + \"s\", trainTime < 120000);\n  }\n\n","sourceOld":"  protected void checkPerformance(Classifier<T> classifier, Analyzer analyzer, String classFieldName) throws Exception {\n    LeafReader leafReader = null;\n    long trainStart = System.currentTimeMillis();\n    try {\n      populatePerformanceIndex(analyzer);\n      leafReader = SlowCompositeReaderWrapper.wrap(indexWriter.getReader());\n      classifier.train(leafReader, textFieldName, classFieldName, analyzer);\n      long trainEnd = System.currentTimeMillis();\n      long trainTime = trainEnd - trainStart;\n      assertTrue(\"training took more than 2 mins : \" + trainTime / 1000 + \"s\", trainTime < 120000);\n    } finally {\n      if (leafReader != null)\n        leafReader.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba9b7b122d927a15ff4837e3d72876c609fef1b","date":1441232513,"type":4,"author":"Tommaso Teofili","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/classification/src/test/org/apache/lucene/classification/ClassificationTestBase#checkPerformance(Classifier[T],Analyzer,String).mjava","sourceNew":null,"sourceOld":"  protected void checkPerformance(Classifier<T> classifier, Analyzer analyzer, String classFieldName) throws Exception {\n    long trainStart = System.currentTimeMillis();\n    populatePerformanceIndex(analyzer);\n    long trainEnd = System.currentTimeMillis();\n    long trainTime = trainEnd - trainStart;\n    assertTrue(\"training took more than 2 mins : \" + trainTime / 1000 + \"s\", trainTime < 120000);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e81d41dc4e40aa3edd42c5abd8c648b65b9cedec":["45ae8f6354b0826d27014deff71fe330604a9783"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["e81d41dc4e40aa3edd42c5abd8c648b65b9cedec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"45ae8f6354b0826d27014deff71fe330604a9783":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9ba9b7b122d927a15ff4837e3d72876c609fef1b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["45ae8f6354b0826d27014deff71fe330604a9783"],"e81d41dc4e40aa3edd42c5abd8c648b65b9cedec":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["360ff513ddb24a30ffa2111a3ef0f91038803100"],"360ff513ddb24a30ffa2111a3ef0f91038803100":["9ba9b7b122d927a15ff4837e3d72876c609fef1b"],"45ae8f6354b0826d27014deff71fe330604a9783":["e81d41dc4e40aa3edd42c5abd8c648b65b9cedec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}