{"path":"src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse).mjava","commits":[{"id":"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349","date":1224582283,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  void getReplicationDetails(SolrQueryResponse resp) {\n    String timeLastReplicated = \"\", confFilesReplicated = \"\", confFilesReplicatedTime = \"\", timesIndexReplicated = \"\", timesConfigReplicated = \"\";\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    FileInputStream inFile = null;\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(CMD_INDEX_VERSION, versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n    if (isMaster && indexCommitPoint != null) {\n      details.add(\"replicatable\" + CMD_INDEX_VERSION, indexCommitPoint.getVersion());\n      details.add(\"replicatable\" + GENERATION, indexCommitPoint.getGeneration());\n    }\n\n    if (isSlave) {\n      try {\n        Properties props = new Properties();\n        File f = new File(core.getDataDir(), SnapPuller.REPLICATION_PROPERTIES);\n        if (f.exists()) {\n          inFile = new FileInputStream(f);\n          props.load(inFile);\n          timeLastReplicated = props.getProperty(\"indexReplicatedAt\");\n          if (props.containsKey(\"timesIndexReplicated\"))\n            timesIndexReplicated = props.getProperty(\"timesIndexReplicated\");\n          if (props.containsKey(\"confFilesReplicated\"))\n            confFilesReplicated = props.getProperty(\"confFilesReplicated\");\n          if (props.containsKey(\"confFilesReplicatedAt\"))\n            confFilesReplicatedTime = props.getProperty(\"confFilesReplicatedAt\");\n          if (props.containsKey(\"timesConfigReplicated\"))\n            timesConfigReplicated = props.getProperty(\"timesConfigReplicated\");\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Exception while reading \" + SnapPuller.REPLICATION_PROPERTIES);\n      } finally {\n        closeNoExp(inFile);\n      }\n\n      HttpClient client = null;\n      try {\n        client = new HttpClient();\n        NamedList nl = snapPuller.getCommandResponse(client, CMD_DETAILS);\n        details.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (IOException e) {\n        LOG.warn(\"Exception while invoking a 'details' method on master \", e);\n      } finally {\n        if (client != null)\n          client.getHttpConnectionManager().closeIdleConnections(0);\n      }\n      details.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        details.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        Date d = new Date(snapPuller.getNextScheduledExecTime());\n        details.add(\"nextExecutionAt\", d.toString());\n      } else if (isPollingDisabled()) {\n        details.add(\"nextExecutionAt\", \"Polling disabled\");\n      } else\n        details.add(\"nextExecutionAt\", \"\");\n\n      if (timeLastReplicated != null && timeLastReplicated.length() > 0) {\n        Date d = new Date(Long.valueOf(timeLastReplicated));\n        details.add(\"indexReplicatedAt\", d.toString());\n      } else {\n        details.add(\"indexReplicatedAt\", \"\");\n      }\n      details.add(\"timesIndexReplicated\", timesIndexReplicated);\n      details.add(\"confFilesReplicated\", confFilesReplicated);\n      details.add(\"timesConfigReplicated\", timesConfigReplicated);\n      if (confFilesReplicatedTime != null && confFilesReplicatedTime.length() > 0) {\n        Date d = new Date(Long.valueOf(confFilesReplicatedTime));\n        details.add(\"confFilesReplicatedAt\", d.toString());\n      } else {\n        details.add(\"confFilesReplicatedAt\", confFilesReplicatedTime);\n      }\n\n      try {\n        long bytesToDownload = 0;\n        List<String> filesToDownload = new ArrayList<String>();\n        if (snapPuller.getFilesToDownload() != null) {\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n        }\n\n        //get list of conf files to download\n        for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n          filesToDownload.add((String) file.get(NAME));\n          bytesToDownload += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesToDownload\", filesToDownload.toString());\n        details.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n        details.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n        long bytesDownloaded = 0;\n        List<String> filesDownloaded = new ArrayList<String>();\n        for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        //get list of conf files downloaded\n        for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesDownloaded\", filesDownloaded.toString());\n        details.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n        Map<String, Object> currentFile = snapPuller.getCurrentFile();\n        String currFile = null;\n        long currFileSize = 0, currFileSizeDownloaded = 0;\n        float percentDownloaded = 0;\n        if (currentFile != null) {\n          currFile = (String) currentFile.get(NAME);\n          currFileSize = (Long) currentFile.get(SIZE);\n          if (currentFile.containsKey(\"bytesDownloaded\")) {\n            currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n            bytesDownloaded += currFileSizeDownloaded;\n            if (currFileSize > 0)\n              percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n          }\n        }\n\n        long timeElapsed = 0, estimatedTimeRemaining = 0;\n        Date replicationStartTime = null;\n        if (snapPuller.getReplicationStartTime() > 0) {\n          replicationStartTime = new Date(snapPuller.getReplicationStartTime());\n          timeElapsed = (System.currentTimeMillis() - snapPuller.getReplicationStartTime()) / 1000;\n        }\n        if (replicationStartTime != null) {\n          details.add(\"replicationStartTime\", replicationStartTime.toString());\n        }\n        details.add(\"timeElapsed\", String.valueOf(timeElapsed) + \"s\");\n\n        if (bytesDownloaded > 0)\n          estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * timeElapsed) / bytesDownloaded;\n        float totalPercent = 0;\n        long downloadSpeed = 0;\n        if (bytesToDownload > 0)\n          totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n        if (timeElapsed > 0)\n          downloadSpeed = (bytesDownloaded / timeElapsed);\n        details.add(\"currentFile\", currFile);\n        details.add(\"currentFileSize\", readableSize(currFileSize));\n        details.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n        details.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n        details.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n        details.add(\"totalPercent\", String.valueOf(totalPercent));\n        details.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n        details.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        details.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        details.add(\"isReplicating\", String.valueOf(isReplicating()));\n      } catch (Exception e) {\n        LOG.error(\"Exception while writing details: \", e);\n      }\n    }\n\n    if (isMaster) {\n      details.add(CONF_FILES, includeConfFiles.toString());\n      if (replicateOnCommit)\n        details.add(REPLICATE_AFTER, \"commit\");\n      if (replicateOnOptimize)\n        details.add(REPLICATE_AFTER, \"optimize\");\n    }\n\n    resp.add(CMD_DETAILS, details);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["217dd2e5ec780896e70b9d4bf5ff18c0079142fb","43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","8191177d7e99590f340be1dbfb1cb0f01bf2f993","8191177d7e99590f340be1dbfb1cb0f01bf2f993","8191177d7e99590f340be1dbfb1cb0f01bf2f993","4f1a1d7f1604a41328b566b1be0c5ad6038117e8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"243885d7a8da5b172092cfac738e33970bec02e1","date":1224867045,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse).mjava","sourceNew":"  void getReplicationDetails(SolrQueryResponse resp) {\n    String timeLastReplicated = \"\", confFilesReplicated = \"\", confFilesReplicatedTime = \"\", timesIndexReplicated = \"\", timesConfigReplicated = \"\";\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    FileInputStream inFile = null;\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(CMD_INDEX_VERSION, versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n    if (isMaster && commit != null) {\n      details.add(\"replicatable\" + CMD_INDEX_VERSION, commit.getVersion());\n      details.add(\"replicatable\" + GENERATION, commit.getGeneration());\n    }\n\n    if (isSlave) {\n      try {\n        Properties props = new Properties();\n        File f = new File(core.getDataDir(), SnapPuller.REPLICATION_PROPERTIES);\n        if (f.exists()) {\n          inFile = new FileInputStream(f);\n          props.load(inFile);\n          timeLastReplicated = props.getProperty(\"indexReplicatedAt\");\n          if (props.containsKey(\"timesIndexReplicated\"))\n            timesIndexReplicated = props.getProperty(\"timesIndexReplicated\");\n          if (props.containsKey(\"confFilesReplicated\"))\n            confFilesReplicated = props.getProperty(\"confFilesReplicated\");\n          if (props.containsKey(\"confFilesReplicatedAt\"))\n            confFilesReplicatedTime = props.getProperty(\"confFilesReplicatedAt\");\n          if (props.containsKey(\"timesConfigReplicated\"))\n            timesConfigReplicated = props.getProperty(\"timesConfigReplicated\");\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Exception while reading \" + SnapPuller.REPLICATION_PROPERTIES);\n      } finally {\n        closeNoExp(inFile);\n      }\n\n      HttpClient client = null;\n      try {\n        client = new HttpClient();\n        NamedList nl = snapPuller.getCommandResponse(client, CMD_DETAILS);\n        details.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (IOException e) {\n        LOG.warn(\"Exception while invoking a 'details' method on master \", e);\n      } finally {\n        if (client != null)\n          client.getHttpConnectionManager().closeIdleConnections(0);\n      }\n      details.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        details.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        Date d = new Date(snapPuller.getNextScheduledExecTime());\n        details.add(\"nextExecutionAt\", d.toString());\n      } else if (isPollingDisabled()) {\n        details.add(\"nextExecutionAt\", \"Polling disabled\");\n      } else\n        details.add(\"nextExecutionAt\", \"\");\n\n      if (timeLastReplicated != null && timeLastReplicated.length() > 0) {\n        Date d = new Date(Long.valueOf(timeLastReplicated));\n        details.add(\"indexReplicatedAt\", d.toString());\n      } else {\n        details.add(\"indexReplicatedAt\", \"\");\n      }\n      details.add(\"timesIndexReplicated\", timesIndexReplicated);\n      details.add(\"confFilesReplicated\", confFilesReplicated);\n      details.add(\"timesConfigReplicated\", timesConfigReplicated);\n      if (confFilesReplicatedTime != null && confFilesReplicatedTime.length() > 0) {\n        Date d = new Date(Long.valueOf(confFilesReplicatedTime));\n        details.add(\"confFilesReplicatedAt\", d.toString());\n      } else {\n        details.add(\"confFilesReplicatedAt\", confFilesReplicatedTime);\n      }\n\n      try {\n        long bytesToDownload = 0;\n        List<String> filesToDownload = new ArrayList<String>();\n        if (snapPuller.getFilesToDownload() != null) {\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n        }\n\n        //get list of conf files to download\n        for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n          filesToDownload.add((String) file.get(NAME));\n          bytesToDownload += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesToDownload\", filesToDownload.toString());\n        details.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n        details.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n        long bytesDownloaded = 0;\n        List<String> filesDownloaded = new ArrayList<String>();\n        for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        //get list of conf files downloaded\n        for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesDownloaded\", filesDownloaded.toString());\n        details.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n        Map<String, Object> currentFile = snapPuller.getCurrentFile();\n        String currFile = null;\n        long currFileSize = 0, currFileSizeDownloaded = 0;\n        float percentDownloaded = 0;\n        if (currentFile != null) {\n          currFile = (String) currentFile.get(NAME);\n          currFileSize = (Long) currentFile.get(SIZE);\n          if (currentFile.containsKey(\"bytesDownloaded\")) {\n            currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n            bytesDownloaded += currFileSizeDownloaded;\n            if (currFileSize > 0)\n              percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n          }\n        }\n\n        long timeElapsed = 0, estimatedTimeRemaining = 0;\n        Date replicationStartTime = null;\n        if (snapPuller.getReplicationStartTime() > 0) {\n          replicationStartTime = new Date(snapPuller.getReplicationStartTime());\n          timeElapsed = (System.currentTimeMillis() - snapPuller.getReplicationStartTime()) / 1000;\n        }\n        if (replicationStartTime != null) {\n          details.add(\"replicationStartTime\", replicationStartTime.toString());\n        }\n        details.add(\"timeElapsed\", String.valueOf(timeElapsed) + \"s\");\n\n        if (bytesDownloaded > 0)\n          estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * timeElapsed) / bytesDownloaded;\n        float totalPercent = 0;\n        long downloadSpeed = 0;\n        if (bytesToDownload > 0)\n          totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n        if (timeElapsed > 0)\n          downloadSpeed = (bytesDownloaded / timeElapsed);\n        details.add(\"currentFile\", currFile);\n        details.add(\"currentFileSize\", readableSize(currFileSize));\n        details.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n        details.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n        details.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n        details.add(\"totalPercent\", String.valueOf(totalPercent));\n        details.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n        details.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        details.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        details.add(\"isReplicating\", String.valueOf(isReplicating()));\n      } catch (Exception e) {\n        LOG.error(\"Exception while writing details: \", e);\n      }\n    }\n\n    if (isMaster) {\n      details.add(CONF_FILES, includeConfFiles.toString());\n      if (replicateOnCommit)\n        details.add(REPLICATE_AFTER, \"commit\");\n      if (replicateOnOptimize)\n        details.add(REPLICATE_AFTER, \"optimize\");\n    }\n\n    resp.add(CMD_DETAILS, details);\n  }\n\n","sourceOld":"  void getReplicationDetails(SolrQueryResponse resp) {\n    String timeLastReplicated = \"\", confFilesReplicated = \"\", confFilesReplicatedTime = \"\", timesIndexReplicated = \"\", timesConfigReplicated = \"\";\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    FileInputStream inFile = null;\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(CMD_INDEX_VERSION, versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n    if (isMaster && indexCommitPoint != null) {\n      details.add(\"replicatable\" + CMD_INDEX_VERSION, indexCommitPoint.getVersion());\n      details.add(\"replicatable\" + GENERATION, indexCommitPoint.getGeneration());\n    }\n\n    if (isSlave) {\n      try {\n        Properties props = new Properties();\n        File f = new File(core.getDataDir(), SnapPuller.REPLICATION_PROPERTIES);\n        if (f.exists()) {\n          inFile = new FileInputStream(f);\n          props.load(inFile);\n          timeLastReplicated = props.getProperty(\"indexReplicatedAt\");\n          if (props.containsKey(\"timesIndexReplicated\"))\n            timesIndexReplicated = props.getProperty(\"timesIndexReplicated\");\n          if (props.containsKey(\"confFilesReplicated\"))\n            confFilesReplicated = props.getProperty(\"confFilesReplicated\");\n          if (props.containsKey(\"confFilesReplicatedAt\"))\n            confFilesReplicatedTime = props.getProperty(\"confFilesReplicatedAt\");\n          if (props.containsKey(\"timesConfigReplicated\"))\n            timesConfigReplicated = props.getProperty(\"timesConfigReplicated\");\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Exception while reading \" + SnapPuller.REPLICATION_PROPERTIES);\n      } finally {\n        closeNoExp(inFile);\n      }\n\n      HttpClient client = null;\n      try {\n        client = new HttpClient();\n        NamedList nl = snapPuller.getCommandResponse(client, CMD_DETAILS);\n        details.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (IOException e) {\n        LOG.warn(\"Exception while invoking a 'details' method on master \", e);\n      } finally {\n        if (client != null)\n          client.getHttpConnectionManager().closeIdleConnections(0);\n      }\n      details.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        details.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        Date d = new Date(snapPuller.getNextScheduledExecTime());\n        details.add(\"nextExecutionAt\", d.toString());\n      } else if (isPollingDisabled()) {\n        details.add(\"nextExecutionAt\", \"Polling disabled\");\n      } else\n        details.add(\"nextExecutionAt\", \"\");\n\n      if (timeLastReplicated != null && timeLastReplicated.length() > 0) {\n        Date d = new Date(Long.valueOf(timeLastReplicated));\n        details.add(\"indexReplicatedAt\", d.toString());\n      } else {\n        details.add(\"indexReplicatedAt\", \"\");\n      }\n      details.add(\"timesIndexReplicated\", timesIndexReplicated);\n      details.add(\"confFilesReplicated\", confFilesReplicated);\n      details.add(\"timesConfigReplicated\", timesConfigReplicated);\n      if (confFilesReplicatedTime != null && confFilesReplicatedTime.length() > 0) {\n        Date d = new Date(Long.valueOf(confFilesReplicatedTime));\n        details.add(\"confFilesReplicatedAt\", d.toString());\n      } else {\n        details.add(\"confFilesReplicatedAt\", confFilesReplicatedTime);\n      }\n\n      try {\n        long bytesToDownload = 0;\n        List<String> filesToDownload = new ArrayList<String>();\n        if (snapPuller.getFilesToDownload() != null) {\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n        }\n\n        //get list of conf files to download\n        for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n          filesToDownload.add((String) file.get(NAME));\n          bytesToDownload += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesToDownload\", filesToDownload.toString());\n        details.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n        details.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n        long bytesDownloaded = 0;\n        List<String> filesDownloaded = new ArrayList<String>();\n        for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        //get list of conf files downloaded\n        for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesDownloaded\", filesDownloaded.toString());\n        details.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n        Map<String, Object> currentFile = snapPuller.getCurrentFile();\n        String currFile = null;\n        long currFileSize = 0, currFileSizeDownloaded = 0;\n        float percentDownloaded = 0;\n        if (currentFile != null) {\n          currFile = (String) currentFile.get(NAME);\n          currFileSize = (Long) currentFile.get(SIZE);\n          if (currentFile.containsKey(\"bytesDownloaded\")) {\n            currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n            bytesDownloaded += currFileSizeDownloaded;\n            if (currFileSize > 0)\n              percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n          }\n        }\n\n        long timeElapsed = 0, estimatedTimeRemaining = 0;\n        Date replicationStartTime = null;\n        if (snapPuller.getReplicationStartTime() > 0) {\n          replicationStartTime = new Date(snapPuller.getReplicationStartTime());\n          timeElapsed = (System.currentTimeMillis() - snapPuller.getReplicationStartTime()) / 1000;\n        }\n        if (replicationStartTime != null) {\n          details.add(\"replicationStartTime\", replicationStartTime.toString());\n        }\n        details.add(\"timeElapsed\", String.valueOf(timeElapsed) + \"s\");\n\n        if (bytesDownloaded > 0)\n          estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * timeElapsed) / bytesDownloaded;\n        float totalPercent = 0;\n        long downloadSpeed = 0;\n        if (bytesToDownload > 0)\n          totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n        if (timeElapsed > 0)\n          downloadSpeed = (bytesDownloaded / timeElapsed);\n        details.add(\"currentFile\", currFile);\n        details.add(\"currentFileSize\", readableSize(currFileSize));\n        details.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n        details.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n        details.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n        details.add(\"totalPercent\", String.valueOf(totalPercent));\n        details.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n        details.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        details.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        details.add(\"isReplicating\", String.valueOf(isReplicating()));\n      } catch (Exception e) {\n        LOG.error(\"Exception while writing details: \", e);\n      }\n    }\n\n    if (isMaster) {\n      details.add(CONF_FILES, includeConfFiles.toString());\n      if (replicateOnCommit)\n        details.add(REPLICATE_AFTER, \"commit\");\n      if (replicateOnOptimize)\n        details.add(REPLICATE_AFTER, \"optimize\");\n    }\n\n    resp.add(CMD_DETAILS, details);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8620c64e323e74078214cf931e505179d14c888e","date":1225270494,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   */\n  void getReplicationDetails(SolrQueryResponse resp) {\n    String timeLastReplicated = \"\", confFilesReplicated = \"\", confFilesReplicatedTime = \"\", timesIndexReplicated = \"\", timesConfigReplicated = \"\";\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    FileInputStream inFile = null;\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(CMD_INDEX_VERSION, versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n    if (isMaster && commit != null) {\n      details.add(\"replicatable\" + CMD_INDEX_VERSION, commit.getVersion());\n      details.add(\"replicatable\" + GENERATION, commit.getGeneration());\n    }\n\n    if (isSlave) {\n      try {\n        Properties props = new Properties();\n        File f = new File(core.getDataDir(), SnapPuller.REPLICATION_PROPERTIES);\n        if (f.exists()) {\n          inFile = new FileInputStream(f);\n          props.load(inFile);\n          timeLastReplicated = props.getProperty(\"indexReplicatedAt\");\n          if (props.containsKey(\"timesIndexReplicated\"))\n            timesIndexReplicated = props.getProperty(\"timesIndexReplicated\");\n          if (props.containsKey(\"confFilesReplicated\"))\n            confFilesReplicated = props.getProperty(\"confFilesReplicated\");\n          if (props.containsKey(\"confFilesReplicatedAt\"))\n            confFilesReplicatedTime = props.getProperty(\"confFilesReplicatedAt\");\n          if (props.containsKey(\"timesConfigReplicated\"))\n            timesConfigReplicated = props.getProperty(\"timesConfigReplicated\");\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Exception while reading \" + SnapPuller.REPLICATION_PROPERTIES);\n      } finally {\n        closeNoExp(inFile);\n      }\n\n      HttpClient client = null;\n      try {\n        client = new HttpClient();\n        NamedList nl = snapPuller.getCommandResponse(client, CMD_DETAILS);\n        details.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (IOException e) {\n        LOG.warn(\"Exception while invoking a 'details' method on master \", e);\n      } finally {\n        if (client != null)\n          client.getHttpConnectionManager().closeIdleConnections(0);\n      }\n      details.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        details.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        Date d = new Date(snapPuller.getNextScheduledExecTime());\n        details.add(\"nextExecutionAt\", d.toString());\n      } else if (isPollingDisabled()) {\n        details.add(\"nextExecutionAt\", \"Polling disabled\");\n      } else\n        details.add(\"nextExecutionAt\", \"\");\n\n      if (timeLastReplicated != null && timeLastReplicated.length() > 0) {\n        Date d = new Date(Long.valueOf(timeLastReplicated));\n        details.add(\"indexReplicatedAt\", d.toString());\n      } else {\n        details.add(\"indexReplicatedAt\", \"\");\n      }\n      details.add(\"timesIndexReplicated\", timesIndexReplicated);\n      details.add(\"confFilesReplicated\", confFilesReplicated);\n      details.add(\"timesConfigReplicated\", timesConfigReplicated);\n      if (confFilesReplicatedTime != null && confFilesReplicatedTime.length() > 0) {\n        Date d = new Date(Long.valueOf(confFilesReplicatedTime));\n        details.add(\"confFilesReplicatedAt\", d.toString());\n      } else {\n        details.add(\"confFilesReplicatedAt\", confFilesReplicatedTime);\n      }\n\n      try {\n        long bytesToDownload = 0;\n        List<String> filesToDownload = new ArrayList<String>();\n        if (snapPuller.getFilesToDownload() != null) {\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n        }\n\n        //get list of conf files to download\n        for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n          filesToDownload.add((String) file.get(NAME));\n          bytesToDownload += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesToDownload\", filesToDownload.toString());\n        details.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n        details.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n        long bytesDownloaded = 0;\n        List<String> filesDownloaded = new ArrayList<String>();\n        for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        //get list of conf files downloaded\n        for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesDownloaded\", filesDownloaded.toString());\n        details.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n        Map<String, Object> currentFile = snapPuller.getCurrentFile();\n        String currFile = null;\n        long currFileSize = 0, currFileSizeDownloaded = 0;\n        float percentDownloaded = 0;\n        if (currentFile != null) {\n          currFile = (String) currentFile.get(NAME);\n          currFileSize = (Long) currentFile.get(SIZE);\n          if (currentFile.containsKey(\"bytesDownloaded\")) {\n            currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n            bytesDownloaded += currFileSizeDownloaded;\n            if (currFileSize > 0)\n              percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n          }\n        }\n\n        long timeElapsed = 0, estimatedTimeRemaining = 0;\n        Date replicationStartTime = null;\n        if (snapPuller.getReplicationStartTime() > 0) {\n          replicationStartTime = new Date(snapPuller.getReplicationStartTime());\n          timeElapsed = (System.currentTimeMillis() - snapPuller.getReplicationStartTime()) / 1000;\n        }\n        if (replicationStartTime != null) {\n          details.add(\"replicationStartTime\", replicationStartTime.toString());\n        }\n        details.add(\"timeElapsed\", String.valueOf(timeElapsed) + \"s\");\n\n        if (bytesDownloaded > 0)\n          estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * timeElapsed) / bytesDownloaded;\n        float totalPercent = 0;\n        long downloadSpeed = 0;\n        if (bytesToDownload > 0)\n          totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n        if (timeElapsed > 0)\n          downloadSpeed = (bytesDownloaded / timeElapsed);\n        details.add(\"currentFile\", currFile);\n        details.add(\"currentFileSize\", readableSize(currFileSize));\n        details.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n        details.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n        details.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n        details.add(\"totalPercent\", String.valueOf(totalPercent));\n        details.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n        details.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        details.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        details.add(\"isReplicating\", String.valueOf(isReplicating()));\n      } catch (Exception e) {\n        LOG.error(\"Exception while writing details: \", e);\n      }\n    }\n\n    if (isMaster) {\n      details.add(CONF_FILES, includeConfFiles.toString());\n      if (replicateOnCommit)\n        details.add(REPLICATE_AFTER, \"commit\");\n      if (replicateOnOptimize)\n        details.add(REPLICATE_AFTER, \"optimize\");\n    }\n\n    resp.add(CMD_DETAILS, details);\n  }\n\n","sourceOld":"  void getReplicationDetails(SolrQueryResponse resp) {\n    String timeLastReplicated = \"\", confFilesReplicated = \"\", confFilesReplicatedTime = \"\", timesIndexReplicated = \"\", timesConfigReplicated = \"\";\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    FileInputStream inFile = null;\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(CMD_INDEX_VERSION, versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n    if (isMaster && commit != null) {\n      details.add(\"replicatable\" + CMD_INDEX_VERSION, commit.getVersion());\n      details.add(\"replicatable\" + GENERATION, commit.getGeneration());\n    }\n\n    if (isSlave) {\n      try {\n        Properties props = new Properties();\n        File f = new File(core.getDataDir(), SnapPuller.REPLICATION_PROPERTIES);\n        if (f.exists()) {\n          inFile = new FileInputStream(f);\n          props.load(inFile);\n          timeLastReplicated = props.getProperty(\"indexReplicatedAt\");\n          if (props.containsKey(\"timesIndexReplicated\"))\n            timesIndexReplicated = props.getProperty(\"timesIndexReplicated\");\n          if (props.containsKey(\"confFilesReplicated\"))\n            confFilesReplicated = props.getProperty(\"confFilesReplicated\");\n          if (props.containsKey(\"confFilesReplicatedAt\"))\n            confFilesReplicatedTime = props.getProperty(\"confFilesReplicatedAt\");\n          if (props.containsKey(\"timesConfigReplicated\"))\n            timesConfigReplicated = props.getProperty(\"timesConfigReplicated\");\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Exception while reading \" + SnapPuller.REPLICATION_PROPERTIES);\n      } finally {\n        closeNoExp(inFile);\n      }\n\n      HttpClient client = null;\n      try {\n        client = new HttpClient();\n        NamedList nl = snapPuller.getCommandResponse(client, CMD_DETAILS);\n        details.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (IOException e) {\n        LOG.warn(\"Exception while invoking a 'details' method on master \", e);\n      } finally {\n        if (client != null)\n          client.getHttpConnectionManager().closeIdleConnections(0);\n      }\n      details.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        details.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        Date d = new Date(snapPuller.getNextScheduledExecTime());\n        details.add(\"nextExecutionAt\", d.toString());\n      } else if (isPollingDisabled()) {\n        details.add(\"nextExecutionAt\", \"Polling disabled\");\n      } else\n        details.add(\"nextExecutionAt\", \"\");\n\n      if (timeLastReplicated != null && timeLastReplicated.length() > 0) {\n        Date d = new Date(Long.valueOf(timeLastReplicated));\n        details.add(\"indexReplicatedAt\", d.toString());\n      } else {\n        details.add(\"indexReplicatedAt\", \"\");\n      }\n      details.add(\"timesIndexReplicated\", timesIndexReplicated);\n      details.add(\"confFilesReplicated\", confFilesReplicated);\n      details.add(\"timesConfigReplicated\", timesConfigReplicated);\n      if (confFilesReplicatedTime != null && confFilesReplicatedTime.length() > 0) {\n        Date d = new Date(Long.valueOf(confFilesReplicatedTime));\n        details.add(\"confFilesReplicatedAt\", d.toString());\n      } else {\n        details.add(\"confFilesReplicatedAt\", confFilesReplicatedTime);\n      }\n\n      try {\n        long bytesToDownload = 0;\n        List<String> filesToDownload = new ArrayList<String>();\n        if (snapPuller.getFilesToDownload() != null) {\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n        }\n\n        //get list of conf files to download\n        for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n          filesToDownload.add((String) file.get(NAME));\n          bytesToDownload += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesToDownload\", filesToDownload.toString());\n        details.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n        details.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n        long bytesDownloaded = 0;\n        List<String> filesDownloaded = new ArrayList<String>();\n        for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        //get list of conf files downloaded\n        for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesDownloaded\", filesDownloaded.toString());\n        details.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n        Map<String, Object> currentFile = snapPuller.getCurrentFile();\n        String currFile = null;\n        long currFileSize = 0, currFileSizeDownloaded = 0;\n        float percentDownloaded = 0;\n        if (currentFile != null) {\n          currFile = (String) currentFile.get(NAME);\n          currFileSize = (Long) currentFile.get(SIZE);\n          if (currentFile.containsKey(\"bytesDownloaded\")) {\n            currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n            bytesDownloaded += currFileSizeDownloaded;\n            if (currFileSize > 0)\n              percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n          }\n        }\n\n        long timeElapsed = 0, estimatedTimeRemaining = 0;\n        Date replicationStartTime = null;\n        if (snapPuller.getReplicationStartTime() > 0) {\n          replicationStartTime = new Date(snapPuller.getReplicationStartTime());\n          timeElapsed = (System.currentTimeMillis() - snapPuller.getReplicationStartTime()) / 1000;\n        }\n        if (replicationStartTime != null) {\n          details.add(\"replicationStartTime\", replicationStartTime.toString());\n        }\n        details.add(\"timeElapsed\", String.valueOf(timeElapsed) + \"s\");\n\n        if (bytesDownloaded > 0)\n          estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * timeElapsed) / bytesDownloaded;\n        float totalPercent = 0;\n        long downloadSpeed = 0;\n        if (bytesToDownload > 0)\n          totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n        if (timeElapsed > 0)\n          downloadSpeed = (bytesDownloaded / timeElapsed);\n        details.add(\"currentFile\", currFile);\n        details.add(\"currentFileSize\", readableSize(currFileSize));\n        details.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n        details.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n        details.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n        details.add(\"totalPercent\", String.valueOf(totalPercent));\n        details.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n        details.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        details.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        details.add(\"isReplicating\", String.valueOf(isReplicating()));\n      } catch (Exception e) {\n        LOG.error(\"Exception while writing details: \", e);\n      }\n    }\n\n    if (isMaster) {\n      details.add(CONF_FILES, includeConfFiles.toString());\n      if (replicateOnCommit)\n        details.add(REPLICATE_AFTER, \"commit\");\n      if (replicateOnOptimize)\n        details.add(REPLICATE_AFTER, \"optimize\");\n    }\n\n    resp.add(CMD_DETAILS, details);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c6e1afc23adf8af4aa2dfc781b02b63710546b33","date":1227622754,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   */\n  void getReplicationDetails(SolrQueryResponse resp) {\n    String timeLastReplicated = \"\", confFilesReplicated = \"\", confFilesReplicatedTime = \"\", timesIndexReplicated = \"\", timesConfigReplicated = \"\";\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    FileInputStream inFile = null;\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(CMD_INDEX_VERSION, versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n    if (isMaster && commit != null) {\n      details.add(\"replicatable\" + CMD_INDEX_VERSION, commit.getVersion());\n      details.add(\"replicatable\" + GENERATION, commit.getGeneration());\n    }\n\n    if (isSlave) {\n      try {\n        Properties props = new Properties();\n        File f = new File(core.getDataDir(), SnapPuller.REPLICATION_PROPERTIES);\n        if (f.exists()) {\n          inFile = new FileInputStream(f);\n          props.load(inFile);\n          timeLastReplicated = props.getProperty(\"indexReplicatedAt\");\n          if (props.containsKey(\"timesIndexReplicated\"))\n            timesIndexReplicated = props.getProperty(\"timesIndexReplicated\");\n          if (props.containsKey(\"confFilesReplicated\"))\n            confFilesReplicated = props.getProperty(\"confFilesReplicated\");\n          if (props.containsKey(\"confFilesReplicatedAt\"))\n            confFilesReplicatedTime = props.getProperty(\"confFilesReplicatedAt\");\n          if (props.containsKey(\"timesConfigReplicated\"))\n            timesConfigReplicated = props.getProperty(\"timesConfigReplicated\");\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Exception while reading \" + SnapPuller.REPLICATION_PROPERTIES);\n      } finally {\n        closeNoExp(inFile);\n      }\n\n      try {\n        NamedList nl = snapPuller.getCommandResponse(CMD_DETAILS);\n        details.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (IOException e) {\n        LOG.warn(\"Exception while invoking a 'details' method on master \", e);\n      }\n      details.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        details.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        Date d = new Date(snapPuller.getNextScheduledExecTime());\n        details.add(\"nextExecutionAt\", d.toString());\n      } else if (isPollingDisabled()) {\n        details.add(\"nextExecutionAt\", \"Polling disabled\");\n      } else\n        details.add(\"nextExecutionAt\", \"\");\n\n      if (timeLastReplicated != null && timeLastReplicated.length() > 0) {\n        Date d = new Date(Long.valueOf(timeLastReplicated));\n        details.add(\"indexReplicatedAt\", d.toString());\n      } else {\n        details.add(\"indexReplicatedAt\", \"\");\n      }\n      details.add(\"timesIndexReplicated\", timesIndexReplicated);\n      details.add(\"confFilesReplicated\", confFilesReplicated);\n      details.add(\"timesConfigReplicated\", timesConfigReplicated);\n      if (confFilesReplicatedTime != null && confFilesReplicatedTime.length() > 0) {\n        Date d = new Date(Long.valueOf(confFilesReplicatedTime));\n        details.add(\"confFilesReplicatedAt\", d.toString());\n      } else {\n        details.add(\"confFilesReplicatedAt\", confFilesReplicatedTime);\n      }\n\n      try {\n        long bytesToDownload = 0;\n        List<String> filesToDownload = new ArrayList<String>();\n        if (snapPuller.getFilesToDownload() != null) {\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n        }\n\n        //get list of conf files to download\n        for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n          filesToDownload.add((String) file.get(NAME));\n          bytesToDownload += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesToDownload\", filesToDownload.toString());\n        details.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n        details.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n        long bytesDownloaded = 0;\n        List<String> filesDownloaded = new ArrayList<String>();\n        for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        //get list of conf files downloaded\n        for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesDownloaded\", filesDownloaded.toString());\n        details.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n        Map<String, Object> currentFile = snapPuller.getCurrentFile();\n        String currFile = null;\n        long currFileSize = 0, currFileSizeDownloaded = 0;\n        float percentDownloaded = 0;\n        if (currentFile != null) {\n          currFile = (String) currentFile.get(NAME);\n          currFileSize = (Long) currentFile.get(SIZE);\n          if (currentFile.containsKey(\"bytesDownloaded\")) {\n            currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n            bytesDownloaded += currFileSizeDownloaded;\n            if (currFileSize > 0)\n              percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n          }\n        }\n\n        long timeElapsed = 0, estimatedTimeRemaining = 0;\n        Date replicationStartTime = null;\n        if (snapPuller.getReplicationStartTime() > 0) {\n          replicationStartTime = new Date(snapPuller.getReplicationStartTime());\n          timeElapsed = (System.currentTimeMillis() - snapPuller.getReplicationStartTime()) / 1000;\n        }\n        if (replicationStartTime != null) {\n          details.add(\"replicationStartTime\", replicationStartTime.toString());\n        }\n        details.add(\"timeElapsed\", String.valueOf(timeElapsed) + \"s\");\n\n        if (bytesDownloaded > 0)\n          estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * timeElapsed) / bytesDownloaded;\n        float totalPercent = 0;\n        long downloadSpeed = 0;\n        if (bytesToDownload > 0)\n          totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n        if (timeElapsed > 0)\n          downloadSpeed = (bytesDownloaded / timeElapsed);\n        details.add(\"currentFile\", currFile);\n        details.add(\"currentFileSize\", readableSize(currFileSize));\n        details.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n        details.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n        details.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n        details.add(\"totalPercent\", String.valueOf(totalPercent));\n        details.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n        details.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        details.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        details.add(\"isReplicating\", String.valueOf(isReplicating()));\n      } catch (Exception e) {\n        LOG.error(\"Exception while writing details: \", e);\n      }\n    }\n\n    if (isMaster) {\n      details.add(CONF_FILES, includeConfFiles.toString());\n      if (replicateOnCommit)\n        details.add(REPLICATE_AFTER, \"commit\");\n      if (replicateOnOptimize)\n        details.add(REPLICATE_AFTER, \"optimize\");\n    }\n\n    resp.add(CMD_DETAILS, details);\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   */\n  void getReplicationDetails(SolrQueryResponse resp) {\n    String timeLastReplicated = \"\", confFilesReplicated = \"\", confFilesReplicatedTime = \"\", timesIndexReplicated = \"\", timesConfigReplicated = \"\";\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    FileInputStream inFile = null;\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(CMD_INDEX_VERSION, versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n    if (isMaster && commit != null) {\n      details.add(\"replicatable\" + CMD_INDEX_VERSION, commit.getVersion());\n      details.add(\"replicatable\" + GENERATION, commit.getGeneration());\n    }\n\n    if (isSlave) {\n      try {\n        Properties props = new Properties();\n        File f = new File(core.getDataDir(), SnapPuller.REPLICATION_PROPERTIES);\n        if (f.exists()) {\n          inFile = new FileInputStream(f);\n          props.load(inFile);\n          timeLastReplicated = props.getProperty(\"indexReplicatedAt\");\n          if (props.containsKey(\"timesIndexReplicated\"))\n            timesIndexReplicated = props.getProperty(\"timesIndexReplicated\");\n          if (props.containsKey(\"confFilesReplicated\"))\n            confFilesReplicated = props.getProperty(\"confFilesReplicated\");\n          if (props.containsKey(\"confFilesReplicatedAt\"))\n            confFilesReplicatedTime = props.getProperty(\"confFilesReplicatedAt\");\n          if (props.containsKey(\"timesConfigReplicated\"))\n            timesConfigReplicated = props.getProperty(\"timesConfigReplicated\");\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Exception while reading \" + SnapPuller.REPLICATION_PROPERTIES);\n      } finally {\n        closeNoExp(inFile);\n      }\n\n      HttpClient client = null;\n      try {\n        client = new HttpClient();\n        NamedList nl = snapPuller.getCommandResponse(client, CMD_DETAILS);\n        details.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (IOException e) {\n        LOG.warn(\"Exception while invoking a 'details' method on master \", e);\n      } finally {\n        if (client != null)\n          client.getHttpConnectionManager().closeIdleConnections(0);\n      }\n      details.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        details.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        Date d = new Date(snapPuller.getNextScheduledExecTime());\n        details.add(\"nextExecutionAt\", d.toString());\n      } else if (isPollingDisabled()) {\n        details.add(\"nextExecutionAt\", \"Polling disabled\");\n      } else\n        details.add(\"nextExecutionAt\", \"\");\n\n      if (timeLastReplicated != null && timeLastReplicated.length() > 0) {\n        Date d = new Date(Long.valueOf(timeLastReplicated));\n        details.add(\"indexReplicatedAt\", d.toString());\n      } else {\n        details.add(\"indexReplicatedAt\", \"\");\n      }\n      details.add(\"timesIndexReplicated\", timesIndexReplicated);\n      details.add(\"confFilesReplicated\", confFilesReplicated);\n      details.add(\"timesConfigReplicated\", timesConfigReplicated);\n      if (confFilesReplicatedTime != null && confFilesReplicatedTime.length() > 0) {\n        Date d = new Date(Long.valueOf(confFilesReplicatedTime));\n        details.add(\"confFilesReplicatedAt\", d.toString());\n      } else {\n        details.add(\"confFilesReplicatedAt\", confFilesReplicatedTime);\n      }\n\n      try {\n        long bytesToDownload = 0;\n        List<String> filesToDownload = new ArrayList<String>();\n        if (snapPuller.getFilesToDownload() != null) {\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n        }\n\n        //get list of conf files to download\n        for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n          filesToDownload.add((String) file.get(NAME));\n          bytesToDownload += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesToDownload\", filesToDownload.toString());\n        details.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n        details.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n        long bytesDownloaded = 0;\n        List<String> filesDownloaded = new ArrayList<String>();\n        for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        //get list of conf files downloaded\n        for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesDownloaded\", filesDownloaded.toString());\n        details.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n        Map<String, Object> currentFile = snapPuller.getCurrentFile();\n        String currFile = null;\n        long currFileSize = 0, currFileSizeDownloaded = 0;\n        float percentDownloaded = 0;\n        if (currentFile != null) {\n          currFile = (String) currentFile.get(NAME);\n          currFileSize = (Long) currentFile.get(SIZE);\n          if (currentFile.containsKey(\"bytesDownloaded\")) {\n            currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n            bytesDownloaded += currFileSizeDownloaded;\n            if (currFileSize > 0)\n              percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n          }\n        }\n\n        long timeElapsed = 0, estimatedTimeRemaining = 0;\n        Date replicationStartTime = null;\n        if (snapPuller.getReplicationStartTime() > 0) {\n          replicationStartTime = new Date(snapPuller.getReplicationStartTime());\n          timeElapsed = (System.currentTimeMillis() - snapPuller.getReplicationStartTime()) / 1000;\n        }\n        if (replicationStartTime != null) {\n          details.add(\"replicationStartTime\", replicationStartTime.toString());\n        }\n        details.add(\"timeElapsed\", String.valueOf(timeElapsed) + \"s\");\n\n        if (bytesDownloaded > 0)\n          estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * timeElapsed) / bytesDownloaded;\n        float totalPercent = 0;\n        long downloadSpeed = 0;\n        if (bytesToDownload > 0)\n          totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n        if (timeElapsed > 0)\n          downloadSpeed = (bytesDownloaded / timeElapsed);\n        details.add(\"currentFile\", currFile);\n        details.add(\"currentFileSize\", readableSize(currFileSize));\n        details.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n        details.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n        details.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n        details.add(\"totalPercent\", String.valueOf(totalPercent));\n        details.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n        details.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        details.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        details.add(\"isReplicating\", String.valueOf(isReplicating()));\n      } catch (Exception e) {\n        LOG.error(\"Exception while writing details: \", e);\n      }\n    }\n\n    if (isMaster) {\n      details.add(CONF_FILES, includeConfFiles.toString());\n      if (replicateOnCommit)\n        details.add(REPLICATE_AFTER, \"commit\");\n      if (replicateOnOptimize)\n        details.add(REPLICATE_AFTER, \"optimize\");\n    }\n\n    resp.add(CMD_DETAILS, details);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9be231d18ef58129524215a1d30331523320b744","date":1229505566,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   */\n  void getReplicationDetails(SolrQueryResponse resp) {\n    String timeLastReplicated = \"\", confFilesReplicated = \"\", confFilesReplicatedTime = \"\", timesIndexReplicated = \"\", timesConfigReplicated = \"\";\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    FileInputStream inFile = null;\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(CMD_INDEX_VERSION, versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n    if (isMaster && commit != null) {\n      details.add(\"replicatable\" + CMD_INDEX_VERSION, commit.getVersion());\n      details.add(\"replicatable\" + GENERATION, commit.getGeneration());\n    }\n\n    if (isSlave) {\n      try {\n        Properties props = new Properties();\n        File f = new File(core.getDataDir(), SnapPuller.REPLICATION_PROPERTIES);\n        if (f.exists()) {\n          inFile = new FileInputStream(f);\n          props.load(inFile);\n          timeLastReplicated = props.getProperty(\"indexReplicatedAt\");\n          if (props.containsKey(\"timesIndexReplicated\"))\n            timesIndexReplicated = props.getProperty(\"timesIndexReplicated\");\n          if (props.containsKey(\"confFilesReplicated\"))\n            confFilesReplicated = props.getProperty(\"confFilesReplicated\");\n          if (props.containsKey(\"confFilesReplicatedAt\"))\n            confFilesReplicatedTime = props.getProperty(\"confFilesReplicatedAt\");\n          if (props.containsKey(\"timesConfigReplicated\"))\n            timesConfigReplicated = props.getProperty(\"timesConfigReplicated\");\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Exception while reading \" + SnapPuller.REPLICATION_PROPERTIES);\n      } finally {\n        closeNoExp(inFile);\n      }\n\n      try {\n        NamedList nl = snapPuller.getCommandResponse(CMD_DETAILS);\n        details.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (IOException e) {\n        LOG.warn(\"Exception while invoking a 'details' method on master \", e);\n      }\n      details.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        details.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        Date d = new Date(snapPuller.getNextScheduledExecTime());\n        details.add(\"nextExecutionAt\", d.toString());\n      } else if (isPollingDisabled()) {\n        details.add(\"nextExecutionAt\", \"Polling disabled\");\n      } else\n        details.add(\"nextExecutionAt\", \"\");\n\n      if (timeLastReplicated != null && timeLastReplicated.length() > 0) {\n        Date d = new Date(Long.valueOf(timeLastReplicated));\n        details.add(\"indexReplicatedAt\", d.toString());\n      } else {\n        details.add(\"indexReplicatedAt\", \"\");\n      }\n      details.add(\"timesIndexReplicated\", timesIndexReplicated);\n      details.add(\"confFilesReplicated\", confFilesReplicated);\n      details.add(\"timesConfigReplicated\", timesConfigReplicated);\n      if (confFilesReplicatedTime != null && confFilesReplicatedTime.length() > 0) {\n        Date d = new Date(Long.valueOf(confFilesReplicatedTime));\n        details.add(\"confFilesReplicatedAt\", d.toString());\n      } else {\n        details.add(\"confFilesReplicatedAt\", confFilesReplicatedTime);\n      }\n\n      try {\n        long bytesToDownload = 0;\n        List<String> filesToDownload = new ArrayList<String>();\n        if (snapPuller.getFilesToDownload() != null) {\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n        }\n\n        //get list of conf files to download\n        for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n          filesToDownload.add((String) file.get(NAME));\n          bytesToDownload += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesToDownload\", filesToDownload.toString());\n        details.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n        details.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n        long bytesDownloaded = 0;\n        List<String> filesDownloaded = new ArrayList<String>();\n        for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        //get list of conf files downloaded\n        for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesDownloaded\", filesDownloaded.toString());\n        details.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n        Map<String, Object> currentFile = snapPuller.getCurrentFile();\n        String currFile = null;\n        long currFileSize = 0, currFileSizeDownloaded = 0;\n        float percentDownloaded = 0;\n        if (currentFile != null) {\n          currFile = (String) currentFile.get(NAME);\n          currFileSize = (Long) currentFile.get(SIZE);\n          if (currentFile.containsKey(\"bytesDownloaded\")) {\n            currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n            bytesDownloaded += currFileSizeDownloaded;\n            if (currFileSize > 0)\n              percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n          }\n        }\n\n        long timeElapsed = 0, estimatedTimeRemaining = 0;\n        Date replicationStartTime = null;\n        if (snapPuller.getReplicationStartTime() > 0) {\n          replicationStartTime = new Date(snapPuller.getReplicationStartTime());\n          timeElapsed = (System.currentTimeMillis() - snapPuller.getReplicationStartTime()) / 1000;\n        }\n        if (replicationStartTime != null) {\n          details.add(\"replicationStartTime\", replicationStartTime.toString());\n        }\n        details.add(\"timeElapsed\", String.valueOf(timeElapsed) + \"s\");\n\n        if (bytesDownloaded > 0)\n          estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * timeElapsed) / bytesDownloaded;\n        float totalPercent = 0;\n        long downloadSpeed = 0;\n        if (bytesToDownload > 0)\n          totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n        if (timeElapsed > 0)\n          downloadSpeed = (bytesDownloaded / timeElapsed);\n        if (currFile != null)\n          details.add(\"currentFile\", currFile);\n        details.add(\"currentFileSize\", readableSize(currFileSize));\n        details.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n        details.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n        details.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n        details.add(\"totalPercent\", String.valueOf(totalPercent));\n        details.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n        details.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        details.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        details.add(\"isReplicating\", String.valueOf(isReplicating()));\n      } catch (Exception e) {\n        LOG.error(\"Exception while writing details: \", e);\n      }\n    }\n\n    if (isMaster) {\n      if (includeConfFiles != null)\n        details.add(CONF_FILES, includeConfFiles);\n      if (replicateOnCommit)\n        details.add(REPLICATE_AFTER, \"commit\");\n      if (replicateOnOptimize)\n        details.add(REPLICATE_AFTER, \"optimize\");\n    }\n\n    resp.add(CMD_DETAILS, details);\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   */\n  void getReplicationDetails(SolrQueryResponse resp) {\n    String timeLastReplicated = \"\", confFilesReplicated = \"\", confFilesReplicatedTime = \"\", timesIndexReplicated = \"\", timesConfigReplicated = \"\";\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    FileInputStream inFile = null;\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(CMD_INDEX_VERSION, versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n    if (isMaster && commit != null) {\n      details.add(\"replicatable\" + CMD_INDEX_VERSION, commit.getVersion());\n      details.add(\"replicatable\" + GENERATION, commit.getGeneration());\n    }\n\n    if (isSlave) {\n      try {\n        Properties props = new Properties();\n        File f = new File(core.getDataDir(), SnapPuller.REPLICATION_PROPERTIES);\n        if (f.exists()) {\n          inFile = new FileInputStream(f);\n          props.load(inFile);\n          timeLastReplicated = props.getProperty(\"indexReplicatedAt\");\n          if (props.containsKey(\"timesIndexReplicated\"))\n            timesIndexReplicated = props.getProperty(\"timesIndexReplicated\");\n          if (props.containsKey(\"confFilesReplicated\"))\n            confFilesReplicated = props.getProperty(\"confFilesReplicated\");\n          if (props.containsKey(\"confFilesReplicatedAt\"))\n            confFilesReplicatedTime = props.getProperty(\"confFilesReplicatedAt\");\n          if (props.containsKey(\"timesConfigReplicated\"))\n            timesConfigReplicated = props.getProperty(\"timesConfigReplicated\");\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Exception while reading \" + SnapPuller.REPLICATION_PROPERTIES);\n      } finally {\n        closeNoExp(inFile);\n      }\n\n      try {\n        NamedList nl = snapPuller.getCommandResponse(CMD_DETAILS);\n        details.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (IOException e) {\n        LOG.warn(\"Exception while invoking a 'details' method on master \", e);\n      }\n      details.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        details.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        Date d = new Date(snapPuller.getNextScheduledExecTime());\n        details.add(\"nextExecutionAt\", d.toString());\n      } else if (isPollingDisabled()) {\n        details.add(\"nextExecutionAt\", \"Polling disabled\");\n      } else\n        details.add(\"nextExecutionAt\", \"\");\n\n      if (timeLastReplicated != null && timeLastReplicated.length() > 0) {\n        Date d = new Date(Long.valueOf(timeLastReplicated));\n        details.add(\"indexReplicatedAt\", d.toString());\n      } else {\n        details.add(\"indexReplicatedAt\", \"\");\n      }\n      details.add(\"timesIndexReplicated\", timesIndexReplicated);\n      details.add(\"confFilesReplicated\", confFilesReplicated);\n      details.add(\"timesConfigReplicated\", timesConfigReplicated);\n      if (confFilesReplicatedTime != null && confFilesReplicatedTime.length() > 0) {\n        Date d = new Date(Long.valueOf(confFilesReplicatedTime));\n        details.add(\"confFilesReplicatedAt\", d.toString());\n      } else {\n        details.add(\"confFilesReplicatedAt\", confFilesReplicatedTime);\n      }\n\n      try {\n        long bytesToDownload = 0;\n        List<String> filesToDownload = new ArrayList<String>();\n        if (snapPuller.getFilesToDownload() != null) {\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n        }\n\n        //get list of conf files to download\n        for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n          filesToDownload.add((String) file.get(NAME));\n          bytesToDownload += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesToDownload\", filesToDownload.toString());\n        details.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n        details.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n        long bytesDownloaded = 0;\n        List<String> filesDownloaded = new ArrayList<String>();\n        for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        //get list of conf files downloaded\n        for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesDownloaded\", filesDownloaded.toString());\n        details.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n        Map<String, Object> currentFile = snapPuller.getCurrentFile();\n        String currFile = null;\n        long currFileSize = 0, currFileSizeDownloaded = 0;\n        float percentDownloaded = 0;\n        if (currentFile != null) {\n          currFile = (String) currentFile.get(NAME);\n          currFileSize = (Long) currentFile.get(SIZE);\n          if (currentFile.containsKey(\"bytesDownloaded\")) {\n            currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n            bytesDownloaded += currFileSizeDownloaded;\n            if (currFileSize > 0)\n              percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n          }\n        }\n\n        long timeElapsed = 0, estimatedTimeRemaining = 0;\n        Date replicationStartTime = null;\n        if (snapPuller.getReplicationStartTime() > 0) {\n          replicationStartTime = new Date(snapPuller.getReplicationStartTime());\n          timeElapsed = (System.currentTimeMillis() - snapPuller.getReplicationStartTime()) / 1000;\n        }\n        if (replicationStartTime != null) {\n          details.add(\"replicationStartTime\", replicationStartTime.toString());\n        }\n        details.add(\"timeElapsed\", String.valueOf(timeElapsed) + \"s\");\n\n        if (bytesDownloaded > 0)\n          estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * timeElapsed) / bytesDownloaded;\n        float totalPercent = 0;\n        long downloadSpeed = 0;\n        if (bytesToDownload > 0)\n          totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n        if (timeElapsed > 0)\n          downloadSpeed = (bytesDownloaded / timeElapsed);\n        details.add(\"currentFile\", currFile);\n        details.add(\"currentFileSize\", readableSize(currFileSize));\n        details.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n        details.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n        details.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n        details.add(\"totalPercent\", String.valueOf(totalPercent));\n        details.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n        details.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        details.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        details.add(\"isReplicating\", String.valueOf(isReplicating()));\n      } catch (Exception e) {\n        LOG.error(\"Exception while writing details: \", e);\n      }\n    }\n\n    if (isMaster) {\n      details.add(CONF_FILES, includeConfFiles.toString());\n      if (replicateOnCommit)\n        details.add(REPLICATE_AFTER, \"commit\");\n      if (replicateOnOptimize)\n        details.add(REPLICATE_AFTER, \"optimize\");\n    }\n\n    resp.add(CMD_DETAILS, details);\n  }\n\n","bugFix":null,"bugIntro":["4f1a1d7f1604a41328b566b1be0c5ad6038117e8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd564545498afb928bdfecf369ec06cd377413d2","date":1230103123,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   */\n  void getReplicationDetails(SolrQueryResponse resp) {\n    String timeLastReplicated = \"\", confFilesReplicated = \"\", confFilesReplicatedTime = \"\", timesIndexReplicated = \"\", timesConfigReplicated = \"\";\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    FileInputStream inFile = null;\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(CMD_INDEX_VERSION, versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n    if (isMaster && commit != null) {\n      details.add(\"replicatable\" + CMD_INDEX_VERSION, commit.getVersion());\n      details.add(\"replicatable\" + GENERATION, commit.getGeneration());\n    }\n    SnapPuller snapPuller = tempSnapPuller;\n    if (snapPuller != null) {\n      try {\n        Properties props = new Properties();\n        File f = new File(core.getDataDir(), SnapPuller.REPLICATION_PROPERTIES);\n        if (f.exists()) {\n          inFile = new FileInputStream(f);\n          props.load(inFile);\n          timeLastReplicated = props.getProperty(\"indexReplicatedAt\");\n          if (props.containsKey(\"timesIndexReplicated\"))\n            timesIndexReplicated = props.getProperty(\"timesIndexReplicated\");\n          if (props.containsKey(\"confFilesReplicated\"))\n            confFilesReplicated = props.getProperty(\"confFilesReplicated\");\n          if (props.containsKey(\"confFilesReplicatedAt\"))\n            confFilesReplicatedTime = props.getProperty(\"confFilesReplicatedAt\");\n          if (props.containsKey(\"timesConfigReplicated\"))\n            timesConfigReplicated = props.getProperty(\"timesConfigReplicated\");\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Exception while reading \" + SnapPuller.REPLICATION_PROPERTIES);\n      } finally {\n        closeNoExp(inFile);\n      }\n      try {\n        NamedList nl = snapPuller.getCommandResponse(CMD_DETAILS);\n        details.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (IOException e) {\n        LOG.warn(\"Exception while invoking a 'details' method on master \", e);\n      }\n      details.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        details.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        Date d = new Date(snapPuller.getNextScheduledExecTime());\n        details.add(\"nextExecutionAt\", d.toString());\n      } else if (isPollingDisabled()) {\n        details.add(\"nextExecutionAt\", \"Polling disabled\");\n      } else\n        details.add(\"nextExecutionAt\", \"\");\n\n      if (timeLastReplicated != null && timeLastReplicated.length() > 0) {\n        Date d = new Date(Long.valueOf(timeLastReplicated));\n        details.add(\"indexReplicatedAt\", d.toString());\n      } else {\n        details.add(\"indexReplicatedAt\", \"\");\n      }\n      details.add(\"timesIndexReplicated\", timesIndexReplicated);\n      details.add(\"confFilesReplicated\", confFilesReplicated);\n      details.add(\"timesConfigReplicated\", timesConfigReplicated);\n      if (confFilesReplicatedTime != null && confFilesReplicatedTime.length() > 0) {\n        Date d = new Date(Long.valueOf(confFilesReplicatedTime));\n        details.add(\"confFilesReplicatedAt\", d.toString());\n      } else {\n        details.add(\"confFilesReplicatedAt\", confFilesReplicatedTime);\n      }\n\n      try {\n        long bytesToDownload = 0;\n        List<String> filesToDownload = new ArrayList<String>();\n        if (snapPuller.getFilesToDownload() != null) {\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n        }\n\n        //get list of conf files to download\n        for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n          filesToDownload.add((String) file.get(NAME));\n          bytesToDownload += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesToDownload\", filesToDownload.toString());\n        details.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n        details.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n        long bytesDownloaded = 0;\n        List<String> filesDownloaded = new ArrayList<String>();\n        for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        //get list of conf files downloaded\n        for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesDownloaded\", filesDownloaded.toString());\n        details.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n        Map<String, Object> currentFile = snapPuller.getCurrentFile();\n        String currFile = null;\n        long currFileSize = 0, currFileSizeDownloaded = 0;\n        float percentDownloaded = 0;\n        if (currentFile != null) {\n          currFile = (String) currentFile.get(NAME);\n          currFileSize = (Long) currentFile.get(SIZE);\n          if (currentFile.containsKey(\"bytesDownloaded\")) {\n            currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n            bytesDownloaded += currFileSizeDownloaded;\n            if (currFileSize > 0)\n              percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n          }\n        }\n\n        long timeElapsed = 0, estimatedTimeRemaining = 0;\n        Date replicationStartTime = null;\n        if (snapPuller.getReplicationStartTime() > 0) {\n          replicationStartTime = new Date(snapPuller.getReplicationStartTime());\n          timeElapsed = (System.currentTimeMillis() - snapPuller.getReplicationStartTime()) / 1000;\n        }\n        if (replicationStartTime != null) {\n          details.add(\"replicationStartTime\", replicationStartTime.toString());\n        }\n        details.add(\"timeElapsed\", String.valueOf(timeElapsed) + \"s\");\n\n        if (bytesDownloaded > 0)\n          estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * timeElapsed) / bytesDownloaded;\n        float totalPercent = 0;\n        long downloadSpeed = 0;\n        if (bytesToDownload > 0)\n          totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n        if (timeElapsed > 0)\n          downloadSpeed = (bytesDownloaded / timeElapsed);\n        if (currFile != null)\n          details.add(\"currentFile\", currFile);\n        details.add(\"currentFileSize\", readableSize(currFileSize));\n        details.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n        details.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n        details.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n        details.add(\"totalPercent\", String.valueOf(totalPercent));\n        details.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n        details.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        details.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        details.add(\"isReplicating\", String.valueOf(isReplicating()));\n      } catch (Exception e) {\n        LOG.error(\"Exception while writing details: \", e);\n      }\n    }\n\n    if (isMaster) {\n      if (includeConfFiles != null)\n        details.add(CONF_FILES, includeConfFiles);\n      if (replicateOnCommit)\n        details.add(REPLICATE_AFTER, \"commit\");\n      if (replicateOnOptimize)\n        details.add(REPLICATE_AFTER, \"optimize\");\n    }\n\n    resp.add(CMD_DETAILS, details);\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   */\n  void getReplicationDetails(SolrQueryResponse resp) {\n    String timeLastReplicated = \"\", confFilesReplicated = \"\", confFilesReplicatedTime = \"\", timesIndexReplicated = \"\", timesConfigReplicated = \"\";\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    FileInputStream inFile = null;\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(CMD_INDEX_VERSION, versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n    if (isMaster && commit != null) {\n      details.add(\"replicatable\" + CMD_INDEX_VERSION, commit.getVersion());\n      details.add(\"replicatable\" + GENERATION, commit.getGeneration());\n    }\n\n    if (isSlave) {\n      try {\n        Properties props = new Properties();\n        File f = new File(core.getDataDir(), SnapPuller.REPLICATION_PROPERTIES);\n        if (f.exists()) {\n          inFile = new FileInputStream(f);\n          props.load(inFile);\n          timeLastReplicated = props.getProperty(\"indexReplicatedAt\");\n          if (props.containsKey(\"timesIndexReplicated\"))\n            timesIndexReplicated = props.getProperty(\"timesIndexReplicated\");\n          if (props.containsKey(\"confFilesReplicated\"))\n            confFilesReplicated = props.getProperty(\"confFilesReplicated\");\n          if (props.containsKey(\"confFilesReplicatedAt\"))\n            confFilesReplicatedTime = props.getProperty(\"confFilesReplicatedAt\");\n          if (props.containsKey(\"timesConfigReplicated\"))\n            timesConfigReplicated = props.getProperty(\"timesConfigReplicated\");\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Exception while reading \" + SnapPuller.REPLICATION_PROPERTIES);\n      } finally {\n        closeNoExp(inFile);\n      }\n\n      try {\n        NamedList nl = snapPuller.getCommandResponse(CMD_DETAILS);\n        details.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (IOException e) {\n        LOG.warn(\"Exception while invoking a 'details' method on master \", e);\n      }\n      details.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        details.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        Date d = new Date(snapPuller.getNextScheduledExecTime());\n        details.add(\"nextExecutionAt\", d.toString());\n      } else if (isPollingDisabled()) {\n        details.add(\"nextExecutionAt\", \"Polling disabled\");\n      } else\n        details.add(\"nextExecutionAt\", \"\");\n\n      if (timeLastReplicated != null && timeLastReplicated.length() > 0) {\n        Date d = new Date(Long.valueOf(timeLastReplicated));\n        details.add(\"indexReplicatedAt\", d.toString());\n      } else {\n        details.add(\"indexReplicatedAt\", \"\");\n      }\n      details.add(\"timesIndexReplicated\", timesIndexReplicated);\n      details.add(\"confFilesReplicated\", confFilesReplicated);\n      details.add(\"timesConfigReplicated\", timesConfigReplicated);\n      if (confFilesReplicatedTime != null && confFilesReplicatedTime.length() > 0) {\n        Date d = new Date(Long.valueOf(confFilesReplicatedTime));\n        details.add(\"confFilesReplicatedAt\", d.toString());\n      } else {\n        details.add(\"confFilesReplicatedAt\", confFilesReplicatedTime);\n      }\n\n      try {\n        long bytesToDownload = 0;\n        List<String> filesToDownload = new ArrayList<String>();\n        if (snapPuller.getFilesToDownload() != null) {\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n        }\n\n        //get list of conf files to download\n        for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n          filesToDownload.add((String) file.get(NAME));\n          bytesToDownload += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesToDownload\", filesToDownload.toString());\n        details.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n        details.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n        long bytesDownloaded = 0;\n        List<String> filesDownloaded = new ArrayList<String>();\n        for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        //get list of conf files downloaded\n        for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesDownloaded\", filesDownloaded.toString());\n        details.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n        Map<String, Object> currentFile = snapPuller.getCurrentFile();\n        String currFile = null;\n        long currFileSize = 0, currFileSizeDownloaded = 0;\n        float percentDownloaded = 0;\n        if (currentFile != null) {\n          currFile = (String) currentFile.get(NAME);\n          currFileSize = (Long) currentFile.get(SIZE);\n          if (currentFile.containsKey(\"bytesDownloaded\")) {\n            currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n            bytesDownloaded += currFileSizeDownloaded;\n            if (currFileSize > 0)\n              percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n          }\n        }\n\n        long timeElapsed = 0, estimatedTimeRemaining = 0;\n        Date replicationStartTime = null;\n        if (snapPuller.getReplicationStartTime() > 0) {\n          replicationStartTime = new Date(snapPuller.getReplicationStartTime());\n          timeElapsed = (System.currentTimeMillis() - snapPuller.getReplicationStartTime()) / 1000;\n        }\n        if (replicationStartTime != null) {\n          details.add(\"replicationStartTime\", replicationStartTime.toString());\n        }\n        details.add(\"timeElapsed\", String.valueOf(timeElapsed) + \"s\");\n\n        if (bytesDownloaded > 0)\n          estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * timeElapsed) / bytesDownloaded;\n        float totalPercent = 0;\n        long downloadSpeed = 0;\n        if (bytesToDownload > 0)\n          totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n        if (timeElapsed > 0)\n          downloadSpeed = (bytesDownloaded / timeElapsed);\n        if (currFile != null)\n          details.add(\"currentFile\", currFile);\n        details.add(\"currentFileSize\", readableSize(currFileSize));\n        details.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n        details.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n        details.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n        details.add(\"totalPercent\", String.valueOf(totalPercent));\n        details.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n        details.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        details.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        details.add(\"isReplicating\", String.valueOf(isReplicating()));\n      } catch (Exception e) {\n        LOG.error(\"Exception while writing details: \", e);\n      }\n    }\n\n    if (isMaster) {\n      if (includeConfFiles != null)\n        details.add(CONF_FILES, includeConfFiles);\n      if (replicateOnCommit)\n        details.add(REPLICATE_AFTER, \"commit\");\n      if (replicateOnOptimize)\n        details.add(REPLICATE_AFTER, \"optimize\");\n    }\n\n    resp.add(CMD_DETAILS, details);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e1c62d84fa064ee3b226a7ed01c37d152d0253bb","date":1234445125,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails().mjava","pathOld":"src/java/org/apache/solr/handler/ReplicationHandler#getReplicationDetails(SolrQueryResponse).mjava","sourceNew":"  /**\n   * Used for showing statistics and progress information.\n   */\n  NamedList<Object> getReplicationDetails() {\n    String timeLastReplicated = \"\", confFilesReplicated = \"\", confFilesReplicatedTime = \"\", timesIndexReplicated = \"\", timesConfigReplicated = \"\";\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    NamedList<Object> master = new SimpleOrderedMap<Object>();\n    NamedList<Object> slave = new SimpleOrderedMap<Object>();\n    FileInputStream inFile = null;\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    details.add(\"isSlave\", String.valueOf(isSlave));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(\"indexVersion\", versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n\n    if (isMaster) {\n      if (includeConfFiles != null)\n        master.add(CONF_FILES, includeConfFiles);\n      String replicateAfterString=\"\";\n      if (replicateOnCommit)\n        replicateAfterString += \"commit, \";\n      if (replicateOnOptimize)\n        replicateAfterString += \"optimize, \";\n      if(replicateOnStart)\n        replicateAfterString += \"startup, \";\n      if(replicateAfterString.lastIndexOf(',') > -1)\n        replicateAfterString = replicateAfterString.substring(0, replicateAfterString.lastIndexOf(','));\n      master.add(REPLICATE_AFTER, replicateAfterString);\n    }\n\n    if (isMaster && commit != null) {\n      master.add(\"replicatableIndexVersion\", commit.getVersion());\n      master.add(\"replicatableGeneration\", commit.getGeneration());\n    }\n    \n    SnapPuller snapPuller = tempSnapPuller;\n    if (snapPuller != null) {\n      try {\n        Properties props = new Properties();\n        File f = new File(core.getDataDir(), SnapPuller.REPLICATION_PROPERTIES);\n        if (f.exists()) {\n          inFile = new FileInputStream(f);\n          props.load(inFile);\n          timeLastReplicated = props.getProperty(\"indexReplicatedAt\");\n          if (props.containsKey(\"timesIndexReplicated\"))\n            timesIndexReplicated = props.getProperty(\"timesIndexReplicated\");\n          if (props.containsKey(\"confFilesReplicated\"))\n            confFilesReplicated = props.getProperty(\"confFilesReplicated\");\n          if (props.containsKey(\"confFilesReplicatedAt\"))\n            confFilesReplicatedTime = props.getProperty(\"confFilesReplicatedAt\");\n          if (props.containsKey(\"timesConfigReplicated\"))\n            timesConfigReplicated = props.getProperty(\"timesConfigReplicated\");\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Exception while reading \" + SnapPuller.REPLICATION_PROPERTIES);\n      } finally {\n        closeNoExp(inFile);\n      }\n      try {\n        NamedList nl = snapPuller.getCommandResponse(CMD_DETAILS);\n        slave.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (IOException e) {\n        LOG.warn(\"Exception while invoking a 'details' method on master \", e);\n      }\n      slave.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        slave.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        Date d = new Date(snapPuller.getNextScheduledExecTime());\n        slave.add(\"nextExecutionAt\", d.toString());\n      } else if (isPollingDisabled()) {\n        slave.add(\"nextExecutionAt\", \"Polling disabled\");\n      } else\n        slave.add(\"nextExecutionAt\", \"\");\n\n      if (timeLastReplicated != null && timeLastReplicated.length() > 0) {\n        Date d = new Date(Long.valueOf(timeLastReplicated));\n        slave.add(\"indexReplicatedAt\", d.toString());\n      } else {\n        slave.add(\"indexReplicatedAt\", \"\");\n      }\n      slave.add(\"timesIndexReplicated\", timesIndexReplicated);\n      slave.add(\"confFilesReplicated\", confFilesReplicated);\n      slave.add(\"timesConfigReplicated\", timesConfigReplicated);\n      if (confFilesReplicatedTime != null && confFilesReplicatedTime.length() > 0) {\n        Date d = new Date(Long.valueOf(confFilesReplicatedTime));\n        slave.add(\"confFilesReplicatedAt\", d.toString());\n      } else {\n        slave.add(\"confFilesReplicatedAt\", confFilesReplicatedTime);\n      }\n\n      try {\n        long bytesToDownload = 0;\n        List<String> filesToDownload = new ArrayList<String>();\n        if (snapPuller.getFilesToDownload() != null) {\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n        }\n\n        //get list of conf files to download\n        for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n          filesToDownload.add((String) file.get(NAME));\n          bytesToDownload += (Long) file.get(SIZE);\n        }\n\n        slave.add(\"filesToDownload\", filesToDownload.toString());\n        slave.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n        slave.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n        long bytesDownloaded = 0;\n        List<String> filesDownloaded = new ArrayList<String>();\n        for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        //get list of conf files downloaded\n        for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        slave.add(\"filesDownloaded\", filesDownloaded.toString());\n        slave.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n        Map<String, Object> currentFile = snapPuller.getCurrentFile();\n        String currFile = null;\n        long currFileSize = 0, currFileSizeDownloaded = 0;\n        float percentDownloaded = 0;\n        if (currentFile != null) {\n          currFile = (String) currentFile.get(NAME);\n          currFileSize = (Long) currentFile.get(SIZE);\n          if (currentFile.containsKey(\"bytesDownloaded\")) {\n            currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n            bytesDownloaded += currFileSizeDownloaded;\n            if (currFileSize > 0)\n              percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n          }\n        }\n\n        long timeElapsed = 0, estimatedTimeRemaining = 0;\n        Date replicationStartTime = null;\n        if (snapPuller.getReplicationStartTime() > 0) {\n          replicationStartTime = new Date(snapPuller.getReplicationStartTime());\n          timeElapsed = (System.currentTimeMillis() - snapPuller.getReplicationStartTime()) / 1000;\n        }\n        if (replicationStartTime != null) {\n          slave.add(\"replicationStartTime\", replicationStartTime.toString());\n        }\n        slave.add(\"timeElapsed\", String.valueOf(timeElapsed) + \"s\");\n\n        if (bytesDownloaded > 0)\n          estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * timeElapsed) / bytesDownloaded;\n        float totalPercent = 0;\n        long downloadSpeed = 0;\n        if (bytesToDownload > 0)\n          totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n        if (timeElapsed > 0)\n          downloadSpeed = (bytesDownloaded / timeElapsed);\n        if (currFile != null)\n          slave.add(\"currentFile\", currFile);\n        slave.add(\"currentFileSize\", readableSize(currFileSize));\n        slave.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n        slave.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n        slave.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n        slave.add(\"totalPercent\", String.valueOf(totalPercent));\n        slave.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n        slave.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        slave.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        slave.add(\"isReplicating\", String.valueOf(isReplicating()));\n      } catch (Exception e) {\n        LOG.error(\"Exception while writing details: \", e);\n      }\n    }\n    if(isMaster)\n      details.add(\"master\", master);\n    if(isSlave)\n      details.add(\"slave\", slave);\n    return details;\n  }\n\n","sourceOld":"  /**\n   * Used for showing statistics and progress information.\n   */\n  void getReplicationDetails(SolrQueryResponse resp) {\n    String timeLastReplicated = \"\", confFilesReplicated = \"\", confFilesReplicatedTime = \"\", timesIndexReplicated = \"\", timesConfigReplicated = \"\";\n    NamedList<Object> details = new SimpleOrderedMap<Object>();\n    FileInputStream inFile = null;\n\n    details.add(\"indexSize\", readableSize(getIndexSize()));\n    details.add(\"indexPath\", core.getIndexDir());\n    details.add(CMD_SHOW_COMMITS, getCommits());\n    details.add(\"isMaster\", String.valueOf(isMaster));\n    long[] versionAndGeneration = getIndexVersion();\n    details.add(CMD_INDEX_VERSION, versionAndGeneration[0]);\n    details.add(GENERATION, versionAndGeneration[1]);\n    IndexCommit commit = indexCommitPoint;  // make a copy so it won't change\n    if (isMaster && commit != null) {\n      details.add(\"replicatable\" + CMD_INDEX_VERSION, commit.getVersion());\n      details.add(\"replicatable\" + GENERATION, commit.getGeneration());\n    }\n    SnapPuller snapPuller = tempSnapPuller;\n    if (snapPuller != null) {\n      try {\n        Properties props = new Properties();\n        File f = new File(core.getDataDir(), SnapPuller.REPLICATION_PROPERTIES);\n        if (f.exists()) {\n          inFile = new FileInputStream(f);\n          props.load(inFile);\n          timeLastReplicated = props.getProperty(\"indexReplicatedAt\");\n          if (props.containsKey(\"timesIndexReplicated\"))\n            timesIndexReplicated = props.getProperty(\"timesIndexReplicated\");\n          if (props.containsKey(\"confFilesReplicated\"))\n            confFilesReplicated = props.getProperty(\"confFilesReplicated\");\n          if (props.containsKey(\"confFilesReplicatedAt\"))\n            confFilesReplicatedTime = props.getProperty(\"confFilesReplicatedAt\");\n          if (props.containsKey(\"timesConfigReplicated\"))\n            timesConfigReplicated = props.getProperty(\"timesConfigReplicated\");\n        }\n      } catch (Exception e) {\n        LOG.warn(\"Exception while reading \" + SnapPuller.REPLICATION_PROPERTIES);\n      } finally {\n        closeNoExp(inFile);\n      }\n      try {\n        NamedList nl = snapPuller.getCommandResponse(CMD_DETAILS);\n        details.add(\"masterDetails\", nl.get(CMD_DETAILS));\n      } catch (IOException e) {\n        LOG.warn(\"Exception while invoking a 'details' method on master \", e);\n      }\n      details.add(MASTER_URL, snapPuller.getMasterUrl());\n      if (snapPuller.getPollInterval() != null) {\n        details.add(SnapPuller.POLL_INTERVAL, snapPuller.getPollInterval());\n      }\n      if (snapPuller.getNextScheduledExecTime() != null && !isPollingDisabled()) {\n        Date d = new Date(snapPuller.getNextScheduledExecTime());\n        details.add(\"nextExecutionAt\", d.toString());\n      } else if (isPollingDisabled()) {\n        details.add(\"nextExecutionAt\", \"Polling disabled\");\n      } else\n        details.add(\"nextExecutionAt\", \"\");\n\n      if (timeLastReplicated != null && timeLastReplicated.length() > 0) {\n        Date d = new Date(Long.valueOf(timeLastReplicated));\n        details.add(\"indexReplicatedAt\", d.toString());\n      } else {\n        details.add(\"indexReplicatedAt\", \"\");\n      }\n      details.add(\"timesIndexReplicated\", timesIndexReplicated);\n      details.add(\"confFilesReplicated\", confFilesReplicated);\n      details.add(\"timesConfigReplicated\", timesConfigReplicated);\n      if (confFilesReplicatedTime != null && confFilesReplicatedTime.length() > 0) {\n        Date d = new Date(Long.valueOf(confFilesReplicatedTime));\n        details.add(\"confFilesReplicatedAt\", d.toString());\n      } else {\n        details.add(\"confFilesReplicatedAt\", confFilesReplicatedTime);\n      }\n\n      try {\n        long bytesToDownload = 0;\n        List<String> filesToDownload = new ArrayList<String>();\n        if (snapPuller.getFilesToDownload() != null) {\n          for (Map<String, Object> file : snapPuller.getFilesToDownload()) {\n            filesToDownload.add((String) file.get(NAME));\n            bytesToDownload += (Long) file.get(SIZE);\n          }\n        }\n\n        //get list of conf files to download\n        for (Map<String, Object> file : snapPuller.getConfFilesToDownload()) {\n          filesToDownload.add((String) file.get(NAME));\n          bytesToDownload += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesToDownload\", filesToDownload.toString());\n        details.add(\"numFilesToDownload\", String.valueOf(filesToDownload.size()));\n        details.add(\"bytesToDownload\", readableSize(bytesToDownload));\n\n        long bytesDownloaded = 0;\n        List<String> filesDownloaded = new ArrayList<String>();\n        for (Map<String, Object> file : snapPuller.getFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        //get list of conf files downloaded\n        for (Map<String, Object> file : snapPuller.getConfFilesDownloaded()) {\n          filesDownloaded.add((String) file.get(NAME));\n          bytesDownloaded += (Long) file.get(SIZE);\n        }\n\n        details.add(\"filesDownloaded\", filesDownloaded.toString());\n        details.add(\"numFilesDownloaded\", String.valueOf(filesDownloaded.size()));\n\n        Map<String, Object> currentFile = snapPuller.getCurrentFile();\n        String currFile = null;\n        long currFileSize = 0, currFileSizeDownloaded = 0;\n        float percentDownloaded = 0;\n        if (currentFile != null) {\n          currFile = (String) currentFile.get(NAME);\n          currFileSize = (Long) currentFile.get(SIZE);\n          if (currentFile.containsKey(\"bytesDownloaded\")) {\n            currFileSizeDownloaded = (Long) currentFile.get(\"bytesDownloaded\");\n            bytesDownloaded += currFileSizeDownloaded;\n            if (currFileSize > 0)\n              percentDownloaded = (currFileSizeDownloaded * 100) / currFileSize;\n          }\n        }\n\n        long timeElapsed = 0, estimatedTimeRemaining = 0;\n        Date replicationStartTime = null;\n        if (snapPuller.getReplicationStartTime() > 0) {\n          replicationStartTime = new Date(snapPuller.getReplicationStartTime());\n          timeElapsed = (System.currentTimeMillis() - snapPuller.getReplicationStartTime()) / 1000;\n        }\n        if (replicationStartTime != null) {\n          details.add(\"replicationStartTime\", replicationStartTime.toString());\n        }\n        details.add(\"timeElapsed\", String.valueOf(timeElapsed) + \"s\");\n\n        if (bytesDownloaded > 0)\n          estimatedTimeRemaining = ((bytesToDownload - bytesDownloaded) * timeElapsed) / bytesDownloaded;\n        float totalPercent = 0;\n        long downloadSpeed = 0;\n        if (bytesToDownload > 0)\n          totalPercent = (bytesDownloaded * 100) / bytesToDownload;\n        if (timeElapsed > 0)\n          downloadSpeed = (bytesDownloaded / timeElapsed);\n        if (currFile != null)\n          details.add(\"currentFile\", currFile);\n        details.add(\"currentFileSize\", readableSize(currFileSize));\n        details.add(\"currentFileSizeDownloaded\", readableSize(currFileSizeDownloaded));\n        details.add(\"currentFileSizePercent\", String.valueOf(percentDownloaded));\n        details.add(\"bytesDownloaded\", readableSize(bytesDownloaded));\n        details.add(\"totalPercent\", String.valueOf(totalPercent));\n        details.add(\"timeRemaining\", String.valueOf(estimatedTimeRemaining) + \"s\");\n        details.add(\"downloadSpeed\", readableSize(downloadSpeed));\n        details.add(\"isPollingDisabled\", String.valueOf(isPollingDisabled()));\n        details.add(\"isReplicating\", String.valueOf(isReplicating()));\n      } catch (Exception e) {\n        LOG.error(\"Exception while writing details: \", e);\n      }\n    }\n\n    if (isMaster) {\n      if (includeConfFiles != null)\n        details.add(CONF_FILES, includeConfFiles);\n      if (replicateOnCommit)\n        details.add(REPLICATE_AFTER, \"commit\");\n      if (replicateOnOptimize)\n        details.add(REPLICATE_AFTER, \"optimize\");\n    }\n\n    resp.add(CMD_DETAILS, details);\n  }\n\n","bugFix":null,"bugIntro":["448bf1ddb531a7d63dfaa7596bb7bb291369afa6","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","c01638f4dd94981c1d3d52c4f7991246a5a24aba","43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","43e5779eeb016d5b6980fbf3437f3e8ff4dbf1d6","8191177d7e99590f340be1dbfb1cb0f01bf2f993","8191177d7e99590f340be1dbfb1cb0f01bf2f993","8191177d7e99590f340be1dbfb1cb0f01bf2f993","4f1a1d7f1604a41328b566b1be0c5ad6038117e8"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"9be231d18ef58129524215a1d30331523320b744":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8620c64e323e74078214cf931e505179d14c888e":["243885d7a8da5b172092cfac738e33970bec02e1"],"243885d7a8da5b172092cfac738e33970bec02e1":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["8620c64e323e74078214cf931e505179d14c888e"],"e1c62d84fa064ee3b226a7ed01c37d152d0253bb":["dd564545498afb928bdfecf369ec06cd377413d2"],"dd564545498afb928bdfecf369ec06cd377413d2":["9be231d18ef58129524215a1d30331523320b744"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349":["243885d7a8da5b172092cfac738e33970bec02e1"],"9be231d18ef58129524215a1d30331523320b744":["dd564545498afb928bdfecf369ec06cd377413d2"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["f4ead54bbd0d8cf4a0b5f025fbad65581b8cd349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8620c64e323e74078214cf931e505179d14c888e":["c6e1afc23adf8af4aa2dfc781b02b63710546b33"],"243885d7a8da5b172092cfac738e33970bec02e1":["8620c64e323e74078214cf931e505179d14c888e"],"c6e1afc23adf8af4aa2dfc781b02b63710546b33":["9be231d18ef58129524215a1d30331523320b744"],"e1c62d84fa064ee3b226a7ed01c37d152d0253bb":[],"dd564545498afb928bdfecf369ec06cd377413d2":["e1c62d84fa064ee3b226a7ed01c37d152d0253bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e1c62d84fa064ee3b226a7ed01c37d152d0253bb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}