{"path":"solr/core/src/java/org/apache/solr/util/hll/HLLUtil#alphaMSquared(int).mjava","commits":[{"id":"6d8714f9ceaaff94f0968d1c2d037978c3fde569","date":1437042727,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/HLLUtil#alphaMSquared(int).mjava","pathOld":"/dev/null","sourceNew":"    // ========================================================================\n    /**\n     * Computes the 'alpha-m-squared' constant used by the HyperLogLog algorithm.\n     *\n     * @param  m this must be a power of two, cannot be less than\n     *         16 (2<sup>4</sup>), and cannot be greater than 65536 (2<sup>16</sup>).\n     * @return gamma times <code>registerCount</code> squared where gamma is\n     *         based on the value of <code>registerCount</code>.\n     * @throws IllegalArgumentException if <code>registerCount</code> is less\n     *         than 16.\n     */\n    public static double alphaMSquared(final int m) {\n        switch(m) {\n            case 1/*2^0*/:\n            case 2/*2^1*/:\n            case 4/*2^2*/:\n            case 8/*2^3*/:\n                throw new IllegalArgumentException(\"'m' cannot be less than 16 (\" + m + \" < 16).\");\n\n            case 16/*2^4*/:\n                return 0.673 * m * m;\n\n            case 32/*2^5*/:\n                return 0.697 * m * m;\n\n            case 64/*2^6*/:\n                return 0.709 * m * m;\n\n            default/*>2^6*/:\n                return (0.7213 / (1.0 + 1.079 / m)) * m * m;\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b5ee4c66244bdfcc4796a114519d47701b2c026","date":1437132013,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/hll/HLLUtil#alphaMSquared(int).mjava","pathOld":"/dev/null","sourceNew":"    // ========================================================================\n    /**\n     * Computes the 'alpha-m-squared' constant used by the HyperLogLog algorithm.\n     *\n     * @param  m this must be a power of two, cannot be less than\n     *         16 (2<sup>4</sup>), and cannot be greater than 65536 (2<sup>16</sup>).\n     * @return gamma times <code>registerCount</code> squared where gamma is\n     *         based on the value of <code>registerCount</code>.\n     * @throws IllegalArgumentException if <code>registerCount</code> is less\n     *         than 16.\n     */\n    public static double alphaMSquared(final int m) {\n        switch(m) {\n            case 1/*2^0*/:\n            case 2/*2^1*/:\n            case 4/*2^2*/:\n            case 8/*2^3*/:\n                throw new IllegalArgumentException(\"'m' cannot be less than 16 (\" + m + \" < 16).\");\n\n            case 16/*2^4*/:\n                return 0.673 * m * m;\n\n            case 32/*2^5*/:\n                return 0.697 * m * m;\n\n            case 64/*2^6*/:\n                return 0.709 * m * m;\n\n            default/*>2^6*/:\n                return (0.7213 / (1.0 + 1.079 / m)) * m * m;\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b5ee4c66244bdfcc4796a114519d47701b2c026"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b5ee4c66244bdfcc4796a114519d47701b2c026","6d8714f9ceaaff94f0968d1c2d037978c3fde569"],"3b5ee4c66244bdfcc4796a114519d47701b2c026":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6d8714f9ceaaff94f0968d1c2d037978c3fde569":["3b5ee4c66244bdfcc4796a114519d47701b2c026"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}