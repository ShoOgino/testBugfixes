{"path":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#splitRange(Object,int,int,long,long).mjava","commits":[{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#splitRange(Object,int,int,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#splitRange(Object,int,int,long,long).mjava","sourceNew":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n      final boolean\n        lowerWrapped = nextMinBound < minBound,\n        upperWrapped = nextMaxBound > maxBound;\n      \n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound || lowerWrapped || upperWrapped) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","sourceOld":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n      final boolean\n        lowerWrapped = nextMinBound < minBound,\n        upperWrapped = nextMaxBound > maxBound;\n      \n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound || lowerWrapped || upperWrapped) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#splitRange(Object,int,int,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#splitRange(Object,int,int,long,long).mjava","sourceNew":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n      final boolean\n        lowerWrapped = nextMinBound < minBound,\n        upperWrapped = nextMaxBound > maxBound;\n      \n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound || lowerWrapped || upperWrapped) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","sourceOld":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n      final boolean\n        lowerWrapped = nextMinBound < minBound,\n        upperWrapped = nextMaxBound > maxBound;\n      \n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound || lowerWrapped || upperWrapped) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#splitRange(Object,int,int,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#splitRange(Object,int,int,long,long).mjava","sourceNew":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n      final boolean\n        lowerWrapped = nextMinBound < minBound,\n        upperWrapped = nextMaxBound > maxBound;\n      \n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound || lowerWrapped || upperWrapped) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","sourceOld":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n      final boolean\n        lowerWrapped = nextMinBound < minBound,\n        upperWrapped = nextMaxBound > maxBound;\n      \n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound || lowerWrapped || upperWrapped) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#splitRange(Object,int,int,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#splitRange(Object,int,int,long,long).mjava","sourceNew":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n      final boolean\n        lowerWrapped = nextMinBound < minBound,\n        upperWrapped = nextMaxBound > maxBound;\n      \n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound || lowerWrapped || upperWrapped) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","sourceOld":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n      final boolean\n        lowerWrapped = nextMinBound < minBound,\n        upperWrapped = nextMaxBound > maxBound;\n      \n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound || lowerWrapped || upperWrapped) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/legacy/LegacyNumericUtils#splitRange(Object,int,int,long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/LegacyNumericUtils#splitRange(Object,int,int,long,long).mjava","sourceNew":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n      final boolean\n        lowerWrapped = nextMinBound < minBound,\n        upperWrapped = nextMaxBound > maxBound;\n      \n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound || lowerWrapped || upperWrapped) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","sourceOld":"  /** This helper does the splitting for both 32 and 64 bit. */\n  private static void splitRange(\n    final Object builder, final int valSize,\n    final int precisionStep, long minBound, long maxBound\n  ) {\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    if (minBound > maxBound) return;\n    for (int shift=0; ; shift += precisionStep) {\n      // calculate new bounds for inner precision\n      final long diff = 1L << (shift+precisionStep),\n        mask = ((1L<<precisionStep) - 1L) << shift;\n      final boolean\n        hasLower = (minBound & mask) != 0L,\n        hasUpper = (maxBound & mask) != mask;\n      final long\n        nextMinBound = (hasLower ? (minBound + diff) : minBound) & ~mask,\n        nextMaxBound = (hasUpper ? (maxBound - diff) : maxBound) & ~mask;\n      final boolean\n        lowerWrapped = nextMinBound < minBound,\n        upperWrapped = nextMaxBound > maxBound;\n      \n      if (shift+precisionStep>=valSize || nextMinBound>nextMaxBound || lowerWrapped || upperWrapped) {\n        // We are in the lowest precision or the next precision is not available.\n        addRange(builder, valSize, minBound, maxBound, shift);\n        // exit the split recursion loop\n        break;\n      }\n      \n      if (hasLower)\n        addRange(builder, valSize, minBound, minBound | mask, shift);\n      if (hasUpper)\n        addRange(builder, valSize, maxBound & ~mask, maxBound, shift);\n      \n      // recurse to next precision\n      minBound = nextMinBound;\n      maxBound = nextMaxBound;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["770342641f7b505eaa8dccdc666158bff2419109","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["770342641f7b505eaa8dccdc666158bff2419109"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["770342641f7b505eaa8dccdc666158bff2419109","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"770342641f7b505eaa8dccdc666158bff2419109":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["770342641f7b505eaa8dccdc666158bff2419109","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["770342641f7b505eaa8dccdc666158bff2419109"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"770342641f7b505eaa8dccdc666158bff2419109":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}