{"path":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionWithEmptyReplica#assertConsistentReplicas(CloudSolrClient,Slice).mjava","commits":[{"id":"bb62cc3362417c3e5136f2f26d34a1072ad633eb","date":1475149102,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionWithEmptyReplica#assertConsistentReplicas(CloudSolrClient,Slice).mjava","pathOld":"/dev/null","sourceNew":"  private static int assertConsistentReplicas(CloudSolrClient cloudClient, Slice shard) throws SolrServerException, IOException {\n    long numFound = Long.MIN_VALUE;\n    int count = 0;\n    for (Replica replica : shard.getReplicas()) {\n      HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cloudClient.getLbClient().getHttpClient()).build();\n      QueryResponse response = client.query(new SolrQuery(\"q\", \"*:*\", \"distrib\", \"false\"));\n//      log.info(\"Found numFound={} on replica: {}\", response.getResults().getNumFound(), replica.getCoreUrl());\n      if (numFound == Long.MIN_VALUE)  {\n        numFound = response.getResults().getNumFound();\n      } else  {\n        assertEquals(\"Shard \" + shard.getName() + \" replicas do not have same number of documents\", numFound, response.getResults().getNumFound());\n      }\n      count++;\n    }\n    return count;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionWithEmptyReplica#assertConsistentReplicas(CloudSolrClient,Slice).mjava","pathOld":"/dev/null","sourceNew":"  private static int assertConsistentReplicas(CloudSolrClient cloudClient, Slice shard) throws SolrServerException, IOException {\n    long numFound = Long.MIN_VALUE;\n    int count = 0;\n    for (Replica replica : shard.getReplicas()) {\n      HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cloudClient.getLbClient().getHttpClient()).build();\n      QueryResponse response = client.query(new SolrQuery(\"q\", \"*:*\", \"distrib\", \"false\"));\n//      log.info(\"Found numFound={} on replica: {}\", response.getResults().getNumFound(), replica.getCoreUrl());\n      if (numFound == Long.MIN_VALUE)  {\n        numFound = response.getResults().getNumFound();\n      } else  {\n        assertEquals(\"Shard \" + shard.getName() + \" replicas do not have same number of documents\", numFound, response.getResults().getNumFound());\n      }\n      count++;\n    }\n    return count;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestLeaderElectionWithEmptyReplica#assertConsistentReplicas(CloudSolrClient,Slice).mjava","pathOld":"/dev/null","sourceNew":"  private static int assertConsistentReplicas(CloudSolrClient cloudClient, Slice shard) throws SolrServerException, IOException {\n    long numFound = Long.MIN_VALUE;\n    int count = 0;\n    for (Replica replica : shard.getReplicas()) {\n      HttpSolrClient client = new HttpSolrClient.Builder(replica.getCoreUrl())\n          .withHttpClient(cloudClient.getLbClient().getHttpClient()).build();\n      QueryResponse response = client.query(new SolrQuery(\"q\", \"*:*\", \"distrib\", \"false\"));\n//      log.info(\"Found numFound={} on replica: {}\", response.getResults().getNumFound(), replica.getCoreUrl());\n      if (numFound == Long.MIN_VALUE)  {\n        numFound = response.getResults().getNumFound();\n      } else  {\n        assertEquals(\"Shard \" + shard.getName() + \" replicas do not have same number of documents\", numFound, response.getResults().getNumFound());\n      }\n      count++;\n    }\n    return count;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bb62cc3362417c3e5136f2f26d34a1072ad633eb"],"bb62cc3362417c3e5136f2f26d34a1072ad633eb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bb62cc3362417c3e5136f2f26d34a1072ad633eb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb62cc3362417c3e5136f2f26d34a1072ad633eb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}