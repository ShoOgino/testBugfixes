{"path":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","pathOld":"src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","sourceNew":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","sourceOld":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","sourceNew":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","sourceOld":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","sourceNew":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","sourceOld":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","pathOld":"solr/src/java/org/apache/solr/search/ExtendedDismaxQParser[ExtendedDismaxQParserPlugin]#addShingledPhraseQueries(BooleanQuery,List[Clause],Map[String,Float],int,float,int).mjava","sourceNew":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","sourceOld":"  /**\n   * Modifies the main query by adding a new optional Query consisting\n   * of shingled phrase queries across the specified clauses using the \n   * specified field =&gt; boost mappings.\n   *\n   * @param mainQuery Where the phrase boosting queries will be added\n   * @param clauses Clauses that will be used to construct the phrases\n   * @param fields Field =&gt; boost mappings for the phrase queries\n   * @param shingleSize how big the phrases should be, 0 means a single phrase\n   * @param tiebreaker tie breker value for the DisjunctionMaxQueries\n   * @param slop slop value for the constructed phrases\n   */\n  private void addShingledPhraseQueries(final BooleanQuery mainQuery, \n                                        final List<Clause> clauses,\n                                        final Map<String,Float> fields,\n                                        int shingleSize,\n                                        final float tiebreaker,\n                                        final int slop) \n    throws ParseException {\n    \n    if (null == fields || fields.isEmpty() || \n        null == clauses || clauses.size() <= shingleSize ) \n      return;\n    \n    if (0 == shingleSize) shingleSize = clauses.size();\n\n    final int goat = shingleSize-1; // :TODO: better name for var?\n\n    StringBuilder userPhraseQuery = new StringBuilder();\n      for (int i=0; i < clauses.size() - goat; i++) {\n        userPhraseQuery.append('\"');\n        for (int j=0; j <= goat; j++) {\n          userPhraseQuery.append(clauses.get(i + j).val);\n          userPhraseQuery.append(' ');\n        }\n        userPhraseQuery.append('\"');\n        userPhraseQuery.append(' ');\n      }\n\n      /* for parsing sloppy phrases using DisjunctionMaxQueries */\n      ExtendedSolrQueryParser pp =\n        new ExtendedSolrQueryParser(this, IMPOSSIBLE_FIELD_NAME);\n\n      pp.addAlias(IMPOSSIBLE_FIELD_NAME, tiebreaker, fields);\n      pp.setPhraseSlop(slop);\n      pp.setRemoveStopFilter(true);  // remove stop filter and keep stopwords\n\n      /* :TODO: reevaluate using makeDismax=true vs false...\n       * \n       * The DismaxQueryParser always used DisjunctionMaxQueries for the \n       * pf boost, for the same reasons it used them for the qf fields.\n       * When Yonik first wrote the ExtendedDismaxQParserPlugin, he added\n       * the \"makeDismax=false\" property to use BooleanQueries instead, but \n       * when asked why his response was \"I honestly don't recall\" ...\n       *\n       * https://issues.apache.org/jira/browse/SOLR-1553?focusedCommentId=12793813#action_12793813\n       *\n       * so for now, we continue to use dismax style queries becuse it \n       * seems the most logical and is back compatible, but we should \n       * try to figure out what Yonik was thinking at the time (because he \n       * rarely does things for no reason)\n       */\n      pp.makeDismax = true; \n\n\n      // minClauseSize is independent of the shingleSize because of stop words\n      // (if they are removed from the middle, so be it, but we need at least \n      // two or there shouldn't be a boost)\n      pp.minClauseSize = 2;  \n      \n      // TODO: perhaps we shouldn't use synonyms either...\n\n      Query phrase = pp.parse(userPhraseQuery.toString());\n      if (phrase != null) {\n        mainQuery.add(phrase, BooleanClause.Occur.SHOULD);\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["1da8d55113b689b06716246649de6f62430f15c0","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}