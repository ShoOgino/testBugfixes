{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.AutoscalingTool#runImpl(CommandLine).mjava","commits":[{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AutoscalingTool#runImpl(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      SnapshotCloudManager cloudManager;\n      AutoScalingConfig config = null;\n      String configFile = cli.getOptionValue(\"a\");\n      if (configFile != null) {\n        CLIO.err(\"- reading autoscaling config from \" + configFile);\n        config = new AutoScalingConfig(IOUtils.toByteArray(new FileInputStream(configFile)));\n      }\n      if (cli.hasOption(\"load\")) {\n        File sourceDir = new File(cli.getOptionValue(\"load\"));\n        CLIO.err(\"- loading autoscaling snapshot from \" + sourceDir.getAbsolutePath());\n        cloudManager = SnapshotCloudManager.readSnapshot(sourceDir);\n        if (config == null) {\n          CLIO.err(\"- reading autoscaling config from the snapshot.\");\n          config = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        }\n      } else {\n        String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n\n        log.debug(\"Connecting to Solr cluster: \" + zkHost);\n        try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n          String collection = cli.getOptionValue(\"collection\");\n          if (collection != null)\n            cloudSolrClient.setDefaultCollection(collection);\n\n          cloudSolrClient.connect();\n          try (SolrClientCloudManager realCloudManager = new SolrClientCloudManager(NoopDistributedQueueFactory.INSTANCE, cloudSolrClient)) {\n            if (config == null) {\n              CLIO.err(\"- reading autoscaling config from the cluster.\");\n              config = realCloudManager.getDistribStateManager().getAutoScalingConfig();\n            }\n            cloudManager = new SnapshotCloudManager(realCloudManager, config);\n          }\n        }\n      }\n      if (cli.hasOption(\"save\")) {\n        File targetDir = new File(cli.getOptionValue(\"save\"));\n        cloudManager.saveSnapshot(targetDir, true);\n        CLIO.err(\"- saved autoscaling snapshot to \" + targetDir.getAbsolutePath());\n      }\n      HashSet<String> liveNodes = new HashSet<>();\n      liveNodes.addAll(cloudManager.getClusterStateProvider().getLiveNodes());\n      boolean withSuggestions = cli.hasOption(\"s\");\n      boolean withDiagnostics = cli.hasOption(\"d\") || cli.hasOption(\"n\");\n      boolean withSortedNodes = cli.hasOption(\"n\");\n      boolean withClusterState = cli.hasOption(\"c\");\n      boolean withStats = cli.hasOption(\"stats\");\n      boolean redact = cli.hasOption(\"r\");\n      if (cli.hasOption(\"all\")) {\n        withSuggestions = true;\n        withDiagnostics = true;\n        withSortedNodes = true;\n        withClusterState = true;\n        withStats = true;\n      }\n      // prepare to redact also host names / IPs in base_url and other properties\n      Set<String> redactNames = new HashSet<>();\n      for (String nodeName : liveNodes) {\n        String urlString = Utils.getBaseUrlForNodeName(nodeName, \"http\");\n        try {\n          URL u = new URL(urlString);\n          // protocol format\n          redactNames.add(u.getHost() + \":\" + u.getPort());\n          // node name format\n          redactNames.add(u.getHost() + \"_\" + u.getPort() + \"_\");\n        } catch (MalformedURLException e) {\n          log.warn(\"Invalid URL for node name \" + nodeName + \", replacing including protocol and path\", e);\n          redactNames.add(urlString);\n          redactNames.add(Utils.getBaseUrlForNodeName(nodeName, \"https\"));\n        }\n      }\n      // redact collection names too\n      Set<String> redactCollections = new HashSet<>();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      clusterState.forEachCollection(coll -> redactCollections.add(coll.getName()));\n      if (!withSuggestions && !withDiagnostics) {\n        withSuggestions = true;\n      }\n      Map<String, Object> results = prepareResults(cloudManager, config, withClusterState,\n          withStats, withSuggestions, withSortedNodes, withDiagnostics);\n      if (cli.hasOption(\"simulate\")) {\n        String iterStr = cli.getOptionValue(\"i\", \"10\");\n        String saveSimulated = cli.getOptionValue(\"saveSimulated\");\n        int iterations;\n        try {\n          iterations = Integer.parseInt(iterStr);\n        } catch (Exception e) {\n          log.warn(\"Invalid option 'i' value, using default 10:\" + e);\n          iterations = 10;\n        }\n        Map<String, Object> simulationResults = new HashMap<>();\n        simulate(cloudManager, config, simulationResults, saveSimulated, withClusterState,\n            withStats, withSuggestions, withSortedNodes, withDiagnostics, iterations);\n        results.put(\"simulation\", simulationResults);\n      }\n      String data = Utils.toJSONString(results);\n      if (redact) {\n        data = RedactionUtils.redactNames(redactCollections, COLL_REDACTION_PREFIX, data);\n        data = RedactionUtils.redactNames(redactNames, NODE_REDACTION_PREFIX, data);\n      }\n      stdout.println(data);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3d2a34ea3732f91149b31bcad82026ad85fda69","date":1567850949,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AutoscalingTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AutoscalingTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      SnapshotCloudManager cloudManager;\n      AutoScalingConfig config = null;\n      String configFile = cli.getOptionValue(\"a\");\n      if (configFile != null) {\n        CLIO.err(\"- reading autoscaling config from \" + configFile);\n        config = new AutoScalingConfig(IOUtils.toByteArray(new FileInputStream(configFile)));\n      }\n      if (cli.hasOption(\"load\")) {\n        File sourceDir = new File(cli.getOptionValue(\"load\"));\n        CLIO.err(\"- loading autoscaling snapshot from \" + sourceDir.getAbsolutePath());\n        cloudManager = SnapshotCloudManager.readSnapshot(sourceDir);\n        if (config == null) {\n          CLIO.err(\"- reading autoscaling config from the snapshot.\");\n          config = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        }\n      } else {\n        String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n\n        log.debug(\"Connecting to Solr cluster: \" + zkHost);\n        try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n          String collection = cli.getOptionValue(\"collection\");\n          if (collection != null)\n            cloudSolrClient.setDefaultCollection(collection);\n\n          cloudSolrClient.connect();\n          try (SolrClientCloudManager realCloudManager = new SolrClientCloudManager(NoopDistributedQueueFactory.INSTANCE, cloudSolrClient)) {\n            if (config == null) {\n              CLIO.err(\"- reading autoscaling config from the cluster.\");\n              config = realCloudManager.getDistribStateManager().getAutoScalingConfig();\n            }\n            cloudManager = new SnapshotCloudManager(realCloudManager, config);\n          }\n        }\n      }\n      boolean redact = cli.hasOption(\"r\");\n      if (cli.hasOption(\"save\")) {\n        File targetDir = new File(cli.getOptionValue(\"save\"));\n        cloudManager.saveSnapshot(targetDir, true, redact);\n        CLIO.err(\"- saved autoscaling snapshot to \" + targetDir.getAbsolutePath());\n      }\n      HashSet<String> liveNodes = new HashSet<>();\n      liveNodes.addAll(cloudManager.getClusterStateProvider().getLiveNodes());\n      boolean withSuggestions = cli.hasOption(\"s\");\n      boolean withDiagnostics = cli.hasOption(\"d\") || cli.hasOption(\"n\");\n      boolean withSortedNodes = cli.hasOption(\"n\");\n      boolean withClusterState = cli.hasOption(\"c\");\n      boolean withStats = cli.hasOption(\"stats\");\n      if (cli.hasOption(\"all\")) {\n        withSuggestions = true;\n        withDiagnostics = true;\n        withSortedNodes = true;\n        withClusterState = true;\n        withStats = true;\n      }\n      // prepare to redact also host names / IPs in base_url and other properties\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      RedactionUtils.RedactionContext ctx = null;\n      if (redact) {\n        ctx = SimUtils.getRedactionContext(clusterState);\n      }\n      if (!withSuggestions && !withDiagnostics) {\n        withSuggestions = true;\n      }\n      Map<String, Object> results = prepareResults(cloudManager, config, withClusterState,\n          withStats, withSuggestions, withSortedNodes, withDiagnostics);\n      if (cli.hasOption(\"simulate\")) {\n        String iterStr = cli.getOptionValue(\"i\", \"10\");\n        String saveSimulated = cli.getOptionValue(\"saveSimulated\");\n        int iterations;\n        try {\n          iterations = Integer.parseInt(iterStr);\n        } catch (Exception e) {\n          log.warn(\"Invalid option 'i' value, using default 10:\" + e);\n          iterations = 10;\n        }\n        Map<String, Object> simulationResults = new HashMap<>();\n        simulate(cloudManager, config, simulationResults, saveSimulated, withClusterState,\n            withStats, withSuggestions, withSortedNodes, withDiagnostics, iterations, redact);\n        results.put(\"simulation\", simulationResults);\n      }\n      String data = Utils.toJSONString(results);\n      if (redact) {\n        data = RedactionUtils.redactNames(ctx.getRedactions(), data);\n      }\n      stdout.println(data);\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      SnapshotCloudManager cloudManager;\n      AutoScalingConfig config = null;\n      String configFile = cli.getOptionValue(\"a\");\n      if (configFile != null) {\n        CLIO.err(\"- reading autoscaling config from \" + configFile);\n        config = new AutoScalingConfig(IOUtils.toByteArray(new FileInputStream(configFile)));\n      }\n      if (cli.hasOption(\"load\")) {\n        File sourceDir = new File(cli.getOptionValue(\"load\"));\n        CLIO.err(\"- loading autoscaling snapshot from \" + sourceDir.getAbsolutePath());\n        cloudManager = SnapshotCloudManager.readSnapshot(sourceDir);\n        if (config == null) {\n          CLIO.err(\"- reading autoscaling config from the snapshot.\");\n          config = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        }\n      } else {\n        String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n\n        log.debug(\"Connecting to Solr cluster: \" + zkHost);\n        try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n          String collection = cli.getOptionValue(\"collection\");\n          if (collection != null)\n            cloudSolrClient.setDefaultCollection(collection);\n\n          cloudSolrClient.connect();\n          try (SolrClientCloudManager realCloudManager = new SolrClientCloudManager(NoopDistributedQueueFactory.INSTANCE, cloudSolrClient)) {\n            if (config == null) {\n              CLIO.err(\"- reading autoscaling config from the cluster.\");\n              config = realCloudManager.getDistribStateManager().getAutoScalingConfig();\n            }\n            cloudManager = new SnapshotCloudManager(realCloudManager, config);\n          }\n        }\n      }\n      if (cli.hasOption(\"save\")) {\n        File targetDir = new File(cli.getOptionValue(\"save\"));\n        cloudManager.saveSnapshot(targetDir, true);\n        CLIO.err(\"- saved autoscaling snapshot to \" + targetDir.getAbsolutePath());\n      }\n      HashSet<String> liveNodes = new HashSet<>();\n      liveNodes.addAll(cloudManager.getClusterStateProvider().getLiveNodes());\n      boolean withSuggestions = cli.hasOption(\"s\");\n      boolean withDiagnostics = cli.hasOption(\"d\") || cli.hasOption(\"n\");\n      boolean withSortedNodes = cli.hasOption(\"n\");\n      boolean withClusterState = cli.hasOption(\"c\");\n      boolean withStats = cli.hasOption(\"stats\");\n      boolean redact = cli.hasOption(\"r\");\n      if (cli.hasOption(\"all\")) {\n        withSuggestions = true;\n        withDiagnostics = true;\n        withSortedNodes = true;\n        withClusterState = true;\n        withStats = true;\n      }\n      // prepare to redact also host names / IPs in base_url and other properties\n      Set<String> redactNames = new HashSet<>();\n      for (String nodeName : liveNodes) {\n        String urlString = Utils.getBaseUrlForNodeName(nodeName, \"http\");\n        try {\n          URL u = new URL(urlString);\n          // protocol format\n          redactNames.add(u.getHost() + \":\" + u.getPort());\n          // node name format\n          redactNames.add(u.getHost() + \"_\" + u.getPort() + \"_\");\n        } catch (MalformedURLException e) {\n          log.warn(\"Invalid URL for node name \" + nodeName + \", replacing including protocol and path\", e);\n          redactNames.add(urlString);\n          redactNames.add(Utils.getBaseUrlForNodeName(nodeName, \"https\"));\n        }\n      }\n      // redact collection names too\n      Set<String> redactCollections = new HashSet<>();\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      clusterState.forEachCollection(coll -> redactCollections.add(coll.getName()));\n      if (!withSuggestions && !withDiagnostics) {\n        withSuggestions = true;\n      }\n      Map<String, Object> results = prepareResults(cloudManager, config, withClusterState,\n          withStats, withSuggestions, withSortedNodes, withDiagnostics);\n      if (cli.hasOption(\"simulate\")) {\n        String iterStr = cli.getOptionValue(\"i\", \"10\");\n        String saveSimulated = cli.getOptionValue(\"saveSimulated\");\n        int iterations;\n        try {\n          iterations = Integer.parseInt(iterStr);\n        } catch (Exception e) {\n          log.warn(\"Invalid option 'i' value, using default 10:\" + e);\n          iterations = 10;\n        }\n        Map<String, Object> simulationResults = new HashMap<>();\n        simulate(cloudManager, config, simulationResults, saveSimulated, withClusterState,\n            withStats, withSuggestions, withSortedNodes, withDiagnostics, iterations);\n        results.put(\"simulation\", simulationResults);\n      }\n      String data = Utils.toJSONString(results);\n      if (redact) {\n        data = RedactionUtils.redactNames(redactCollections, COLL_REDACTION_PREFIX, data);\n        data = RedactionUtils.redactNames(redactNames, NODE_REDACTION_PREFIX, data);\n      }\n      stdout.println(data);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","date":1571071547,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AutoscalingTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AutoscalingTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      SnapshotCloudManager cloudManager;\n      AutoScalingConfig config = null;\n      String configFile = cli.getOptionValue(\"a\");\n      if (configFile != null) {\n        CLIO.err(\"- reading autoscaling config from \" + configFile);\n        config = new AutoScalingConfig(IOUtils.toByteArray(new FileInputStream(configFile)));\n      }\n      if (cli.hasOption(\"load\")) {\n        File sourceDir = new File(cli.getOptionValue(\"load\"));\n        CLIO.err(\"- loading autoscaling snapshot from \" + sourceDir.getAbsolutePath());\n        cloudManager = SnapshotCloudManager.readSnapshot(sourceDir);\n        if (config == null) {\n          CLIO.err(\"- reading autoscaling config from the snapshot.\");\n          config = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        }\n      } else {\n        String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n\n        log.debug(\"Connecting to Solr cluster: \" + zkHost);\n        try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n          String collection = cli.getOptionValue(\"collection\");\n          if (collection != null)\n            cloudSolrClient.setDefaultCollection(collection);\n\n          cloudSolrClient.connect();\n          try (SolrClientCloudManager realCloudManager = new SolrClientCloudManager(NoopDistributedQueueFactory.INSTANCE, cloudSolrClient)) {\n            if (config == null) {\n              CLIO.err(\"- reading autoscaling config from the cluster.\");\n              config = realCloudManager.getDistribStateManager().getAutoScalingConfig();\n            }\n            cloudManager = new SnapshotCloudManager(realCloudManager, config);\n          }\n        }\n      }\n      boolean redact = cli.hasOption(\"r\");\n      if (cli.hasOption(\"save\")) {\n        File targetDir = new File(cli.getOptionValue(\"save\"));\n        cloudManager.saveSnapshot(targetDir, true, redact);\n        CLIO.err(\"- saved autoscaling snapshot to \" + targetDir.getAbsolutePath());\n      }\n      HashSet<String> liveNodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      boolean withSuggestions = cli.hasOption(\"s\");\n      boolean withDiagnostics = cli.hasOption(\"d\") || cli.hasOption(\"n\");\n      boolean withSortedNodes = cli.hasOption(\"n\");\n      boolean withClusterState = cli.hasOption(\"c\");\n      boolean withStats = cli.hasOption(\"stats\");\n      if (cli.hasOption(\"all\")) {\n        withSuggestions = true;\n        withDiagnostics = true;\n        withSortedNodes = true;\n        withClusterState = true;\n        withStats = true;\n      }\n      // prepare to redact also host names / IPs in base_url and other properties\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      RedactionUtils.RedactionContext ctx = null;\n      if (redact) {\n        ctx = SimUtils.getRedactionContext(clusterState);\n      }\n      if (!withSuggestions && !withDiagnostics) {\n        withSuggestions = true;\n      }\n      Map<String, Object> results = prepareResults(cloudManager, config, withClusterState,\n          withStats, withSuggestions, withSortedNodes, withDiagnostics);\n      if (cli.hasOption(\"simulate\")) {\n        String iterStr = cli.getOptionValue(\"i\", \"10\");\n        String saveSimulated = cli.getOptionValue(\"saveSimulated\");\n        int iterations;\n        try {\n          iterations = Integer.parseInt(iterStr);\n        } catch (Exception e) {\n          log.warn(\"Invalid option 'i' value, using default 10:\" + e);\n          iterations = 10;\n        }\n        Map<String, Object> simulationResults = new HashMap<>();\n        simulate(cloudManager, config, simulationResults, saveSimulated, withClusterState,\n            withStats, withSuggestions, withSortedNodes, withDiagnostics, iterations, redact);\n        results.put(\"simulation\", simulationResults);\n      }\n      String data = Utils.toJSONString(results);\n      if (redact) {\n        data = RedactionUtils.redactNames(ctx.getRedactions(), data);\n      }\n      stdout.println(data);\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      SnapshotCloudManager cloudManager;\n      AutoScalingConfig config = null;\n      String configFile = cli.getOptionValue(\"a\");\n      if (configFile != null) {\n        CLIO.err(\"- reading autoscaling config from \" + configFile);\n        config = new AutoScalingConfig(IOUtils.toByteArray(new FileInputStream(configFile)));\n      }\n      if (cli.hasOption(\"load\")) {\n        File sourceDir = new File(cli.getOptionValue(\"load\"));\n        CLIO.err(\"- loading autoscaling snapshot from \" + sourceDir.getAbsolutePath());\n        cloudManager = SnapshotCloudManager.readSnapshot(sourceDir);\n        if (config == null) {\n          CLIO.err(\"- reading autoscaling config from the snapshot.\");\n          config = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        }\n      } else {\n        String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n\n        log.debug(\"Connecting to Solr cluster: \" + zkHost);\n        try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n          String collection = cli.getOptionValue(\"collection\");\n          if (collection != null)\n            cloudSolrClient.setDefaultCollection(collection);\n\n          cloudSolrClient.connect();\n          try (SolrClientCloudManager realCloudManager = new SolrClientCloudManager(NoopDistributedQueueFactory.INSTANCE, cloudSolrClient)) {\n            if (config == null) {\n              CLIO.err(\"- reading autoscaling config from the cluster.\");\n              config = realCloudManager.getDistribStateManager().getAutoScalingConfig();\n            }\n            cloudManager = new SnapshotCloudManager(realCloudManager, config);\n          }\n        }\n      }\n      boolean redact = cli.hasOption(\"r\");\n      if (cli.hasOption(\"save\")) {\n        File targetDir = new File(cli.getOptionValue(\"save\"));\n        cloudManager.saveSnapshot(targetDir, true, redact);\n        CLIO.err(\"- saved autoscaling snapshot to \" + targetDir.getAbsolutePath());\n      }\n      HashSet<String> liveNodes = new HashSet<>();\n      liveNodes.addAll(cloudManager.getClusterStateProvider().getLiveNodes());\n      boolean withSuggestions = cli.hasOption(\"s\");\n      boolean withDiagnostics = cli.hasOption(\"d\") || cli.hasOption(\"n\");\n      boolean withSortedNodes = cli.hasOption(\"n\");\n      boolean withClusterState = cli.hasOption(\"c\");\n      boolean withStats = cli.hasOption(\"stats\");\n      if (cli.hasOption(\"all\")) {\n        withSuggestions = true;\n        withDiagnostics = true;\n        withSortedNodes = true;\n        withClusterState = true;\n        withStats = true;\n      }\n      // prepare to redact also host names / IPs in base_url and other properties\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      RedactionUtils.RedactionContext ctx = null;\n      if (redact) {\n        ctx = SimUtils.getRedactionContext(clusterState);\n      }\n      if (!withSuggestions && !withDiagnostics) {\n        withSuggestions = true;\n      }\n      Map<String, Object> results = prepareResults(cloudManager, config, withClusterState,\n          withStats, withSuggestions, withSortedNodes, withDiagnostics);\n      if (cli.hasOption(\"simulate\")) {\n        String iterStr = cli.getOptionValue(\"i\", \"10\");\n        String saveSimulated = cli.getOptionValue(\"saveSimulated\");\n        int iterations;\n        try {\n          iterations = Integer.parseInt(iterStr);\n        } catch (Exception e) {\n          log.warn(\"Invalid option 'i' value, using default 10:\" + e);\n          iterations = 10;\n        }\n        Map<String, Object> simulationResults = new HashMap<>();\n        simulate(cloudManager, config, simulationResults, saveSimulated, withClusterState,\n            withStats, withSuggestions, withSortedNodes, withDiagnostics, iterations, redact);\n        results.put(\"simulation\", simulationResults);\n      }\n      String data = Utils.toJSONString(results);\n      if (redact) {\n        data = RedactionUtils.redactNames(ctx.getRedactions(), data);\n      }\n      stdout.println(data);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AutoscalingTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AutoscalingTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      SnapshotCloudManager cloudManager;\n      AutoScalingConfig config = null;\n      String configFile = cli.getOptionValue(\"a\");\n      if (configFile != null) {\n        CLIO.err(\"- reading autoscaling config from \" + configFile);\n        config = new AutoScalingConfig(IOUtils.toByteArray(new FileInputStream(configFile)));\n      }\n      if (cli.hasOption(\"load\")) {\n        File sourceDir = new File(cli.getOptionValue(\"load\"));\n        CLIO.err(\"- loading autoscaling snapshot from \" + sourceDir.getAbsolutePath());\n        cloudManager = SnapshotCloudManager.readSnapshot(sourceDir);\n        if (config == null) {\n          CLIO.err(\"- reading autoscaling config from the snapshot.\");\n          config = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        }\n      } else {\n        String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n\n        log.debug(\"Connecting to Solr cluster: \" + zkHost);\n        try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n          String collection = cli.getOptionValue(\"collection\");\n          if (collection != null)\n            cloudSolrClient.setDefaultCollection(collection);\n\n          cloudSolrClient.connect();\n          try (SolrClientCloudManager realCloudManager = new SolrClientCloudManager(NoopDistributedQueueFactory.INSTANCE, cloudSolrClient)) {\n            if (config == null) {\n              CLIO.err(\"- reading autoscaling config from the cluster.\");\n              config = realCloudManager.getDistribStateManager().getAutoScalingConfig();\n            }\n            cloudManager = new SnapshotCloudManager(realCloudManager, config);\n          }\n        }\n      }\n      boolean redact = cli.hasOption(\"r\");\n      if (cli.hasOption(\"save\")) {\n        File targetDir = new File(cli.getOptionValue(\"save\"));\n        cloudManager.saveSnapshot(targetDir, true, redact);\n        CLIO.err(\"- saved autoscaling snapshot to \" + targetDir.getAbsolutePath());\n      }\n      HashSet<String> liveNodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      boolean withSuggestions = cli.hasOption(\"s\");\n      boolean withDiagnostics = cli.hasOption(\"d\") || cli.hasOption(\"n\");\n      boolean withSortedNodes = cli.hasOption(\"n\");\n      boolean withClusterState = cli.hasOption(\"c\");\n      boolean withStats = cli.hasOption(\"stats\");\n      if (cli.hasOption(\"all\")) {\n        withSuggestions = true;\n        withDiagnostics = true;\n        withSortedNodes = true;\n        withClusterState = true;\n        withStats = true;\n      }\n      // prepare to redact also host names / IPs in base_url and other properties\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      RedactionUtils.RedactionContext ctx = null;\n      if (redact) {\n        ctx = SimUtils.getRedactionContext(clusterState);\n      }\n      if (!withSuggestions && !withDiagnostics) {\n        withSuggestions = true;\n      }\n      Map<String, Object> results = prepareResults(cloudManager, config, withClusterState,\n          withStats, withSuggestions, withSortedNodes, withDiagnostics);\n      if (cli.hasOption(\"simulate\")) {\n        String iterStr = cli.getOptionValue(\"i\", \"10\");\n        String saveSimulated = cli.getOptionValue(\"saveSimulated\");\n        int iterations;\n        try {\n          iterations = Integer.parseInt(iterStr);\n        } catch (Exception e) {\n          log.warn(\"Invalid option 'i' value, using default 10:\" + e);\n          iterations = 10;\n        }\n        Map<String, Object> simulationResults = new HashMap<>();\n        simulate(cloudManager, config, simulationResults, saveSimulated, withClusterState,\n            withStats, withSuggestions, withSortedNodes, withDiagnostics, iterations, redact);\n        results.put(\"simulation\", simulationResults);\n      }\n      String data = Utils.toJSONString(results);\n      if (redact) {\n        data = RedactionUtils.redactNames(ctx.getRedactions(), data);\n      }\n      stdout.println(data);\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      SnapshotCloudManager cloudManager;\n      AutoScalingConfig config = null;\n      String configFile = cli.getOptionValue(\"a\");\n      if (configFile != null) {\n        CLIO.err(\"- reading autoscaling config from \" + configFile);\n        config = new AutoScalingConfig(IOUtils.toByteArray(new FileInputStream(configFile)));\n      }\n      if (cli.hasOption(\"load\")) {\n        File sourceDir = new File(cli.getOptionValue(\"load\"));\n        CLIO.err(\"- loading autoscaling snapshot from \" + sourceDir.getAbsolutePath());\n        cloudManager = SnapshotCloudManager.readSnapshot(sourceDir);\n        if (config == null) {\n          CLIO.err(\"- reading autoscaling config from the snapshot.\");\n          config = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        }\n      } else {\n        String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n\n        log.debug(\"Connecting to Solr cluster: \" + zkHost);\n        try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n          String collection = cli.getOptionValue(\"collection\");\n          if (collection != null)\n            cloudSolrClient.setDefaultCollection(collection);\n\n          cloudSolrClient.connect();\n          try (SolrClientCloudManager realCloudManager = new SolrClientCloudManager(NoopDistributedQueueFactory.INSTANCE, cloudSolrClient)) {\n            if (config == null) {\n              CLIO.err(\"- reading autoscaling config from the cluster.\");\n              config = realCloudManager.getDistribStateManager().getAutoScalingConfig();\n            }\n            cloudManager = new SnapshotCloudManager(realCloudManager, config);\n          }\n        }\n      }\n      boolean redact = cli.hasOption(\"r\");\n      if (cli.hasOption(\"save\")) {\n        File targetDir = new File(cli.getOptionValue(\"save\"));\n        cloudManager.saveSnapshot(targetDir, true, redact);\n        CLIO.err(\"- saved autoscaling snapshot to \" + targetDir.getAbsolutePath());\n      }\n      HashSet<String> liveNodes = new HashSet<>();\n      liveNodes.addAll(cloudManager.getClusterStateProvider().getLiveNodes());\n      boolean withSuggestions = cli.hasOption(\"s\");\n      boolean withDiagnostics = cli.hasOption(\"d\") || cli.hasOption(\"n\");\n      boolean withSortedNodes = cli.hasOption(\"n\");\n      boolean withClusterState = cli.hasOption(\"c\");\n      boolean withStats = cli.hasOption(\"stats\");\n      if (cli.hasOption(\"all\")) {\n        withSuggestions = true;\n        withDiagnostics = true;\n        withSortedNodes = true;\n        withClusterState = true;\n        withStats = true;\n      }\n      // prepare to redact also host names / IPs in base_url and other properties\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      RedactionUtils.RedactionContext ctx = null;\n      if (redact) {\n        ctx = SimUtils.getRedactionContext(clusterState);\n      }\n      if (!withSuggestions && !withDiagnostics) {\n        withSuggestions = true;\n      }\n      Map<String, Object> results = prepareResults(cloudManager, config, withClusterState,\n          withStats, withSuggestions, withSortedNodes, withDiagnostics);\n      if (cli.hasOption(\"simulate\")) {\n        String iterStr = cli.getOptionValue(\"i\", \"10\");\n        String saveSimulated = cli.getOptionValue(\"saveSimulated\");\n        int iterations;\n        try {\n          iterations = Integer.parseInt(iterStr);\n        } catch (Exception e) {\n          log.warn(\"Invalid option 'i' value, using default 10:\" + e);\n          iterations = 10;\n        }\n        Map<String, Object> simulationResults = new HashMap<>();\n        simulate(cloudManager, config, simulationResults, saveSimulated, withClusterState,\n            withStats, withSuggestions, withSortedNodes, withDiagnostics, iterations, redact);\n        results.put(\"simulation\", simulationResults);\n      }\n      String data = Utils.toJSONString(results);\n      if (redact) {\n        data = RedactionUtils.redactNames(ctx.getRedactions(), data);\n      }\n      stdout.println(data);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","date":1571856490,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AutoscalingTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AutoscalingTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      if (cli.hasOption(\"scenario\")) {\n        String data = IOUtils.toString(new FileInputStream(cli.getOptionValue(\"scenario\")), \"UTF-8\");\n        try (SimScenario scenario = SimScenario.load(data)) {\n          scenario.verbose = verbose;\n          scenario.console = CLIO.getOutStream();\n          scenario.run();\n        }\n        return;\n      }\n      SnapshotCloudManager cloudManager;\n      AutoScalingConfig config = null;\n      String configFile = cli.getOptionValue(\"a\");\n      if (configFile != null) {\n        CLIO.err(\"- reading autoscaling config from \" + configFile);\n        config = new AutoScalingConfig(IOUtils.toByteArray(new FileInputStream(configFile)));\n      }\n      if (cli.hasOption(\"load\")) {\n        File sourceDir = new File(cli.getOptionValue(\"load\"));\n        CLIO.err(\"- loading autoscaling snapshot from \" + sourceDir.getAbsolutePath());\n        cloudManager = SnapshotCloudManager.readSnapshot(sourceDir);\n        if (config == null) {\n          CLIO.err(\"- reading autoscaling config from the snapshot.\");\n          config = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        }\n      } else {\n        String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n\n        log.debug(\"Connecting to Solr cluster: \" + zkHost);\n        try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n          String collection = cli.getOptionValue(\"collection\");\n          if (collection != null)\n            cloudSolrClient.setDefaultCollection(collection);\n\n          cloudSolrClient.connect();\n          try (SolrClientCloudManager realCloudManager = new SolrClientCloudManager(NoopDistributedQueueFactory.INSTANCE, cloudSolrClient)) {\n            if (config == null) {\n              CLIO.err(\"- reading autoscaling config from the cluster.\");\n              config = realCloudManager.getDistribStateManager().getAutoScalingConfig();\n            }\n            cloudManager = new SnapshotCloudManager(realCloudManager, config);\n          }\n        }\n      }\n      boolean redact = cli.hasOption(\"r\");\n      if (cli.hasOption(\"save\")) {\n        File targetDir = new File(cli.getOptionValue(\"save\"));\n        cloudManager.saveSnapshot(targetDir, true, redact);\n        CLIO.err(\"- saved autoscaling snapshot to \" + targetDir.getAbsolutePath());\n      }\n      HashSet<String> liveNodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      boolean withSuggestions = cli.hasOption(\"s\");\n      boolean withDiagnostics = cli.hasOption(\"d\") || cli.hasOption(\"n\");\n      boolean withSortedNodes = cli.hasOption(\"n\");\n      boolean withClusterState = cli.hasOption(\"c\");\n      boolean withStats = cli.hasOption(\"stats\");\n      if (cli.hasOption(\"all\")) {\n        withSuggestions = true;\n        withDiagnostics = true;\n        withSortedNodes = true;\n        withClusterState = true;\n        withStats = true;\n      }\n      // prepare to redact also host names / IPs in base_url and other properties\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      RedactionUtils.RedactionContext ctx = null;\n      if (redact) {\n        ctx = SimUtils.getRedactionContext(clusterState);\n      }\n      if (!withSuggestions && !withDiagnostics) {\n        withSuggestions = true;\n      }\n      Map<String, Object> results = prepareResults(cloudManager, config, withClusterState,\n          withStats, withSuggestions, withSortedNodes, withDiagnostics);\n      if (cli.hasOption(\"simulate\")) {\n        String iterStr = cli.getOptionValue(\"i\", \"10\");\n        String saveSimulated = cli.getOptionValue(\"saveSimulated\");\n        int iterations;\n        try {\n          iterations = Integer.parseInt(iterStr);\n        } catch (Exception e) {\n          log.warn(\"Invalid option 'i' value, using default 10:\" + e);\n          iterations = 10;\n        }\n        Map<String, Object> simulationResults = new HashMap<>();\n        simulate(cloudManager, config, simulationResults, saveSimulated, withClusterState,\n            withStats, withSuggestions, withSortedNodes, withDiagnostics, iterations, redact);\n        results.put(\"simulation\", simulationResults);\n      }\n      String data = Utils.toJSONString(results);\n      if (redact) {\n        data = RedactionUtils.redactNames(ctx.getRedactions(), data);\n      }\n      stdout.println(data);\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      SnapshotCloudManager cloudManager;\n      AutoScalingConfig config = null;\n      String configFile = cli.getOptionValue(\"a\");\n      if (configFile != null) {\n        CLIO.err(\"- reading autoscaling config from \" + configFile);\n        config = new AutoScalingConfig(IOUtils.toByteArray(new FileInputStream(configFile)));\n      }\n      if (cli.hasOption(\"load\")) {\n        File sourceDir = new File(cli.getOptionValue(\"load\"));\n        CLIO.err(\"- loading autoscaling snapshot from \" + sourceDir.getAbsolutePath());\n        cloudManager = SnapshotCloudManager.readSnapshot(sourceDir);\n        if (config == null) {\n          CLIO.err(\"- reading autoscaling config from the snapshot.\");\n          config = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        }\n      } else {\n        String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n\n        log.debug(\"Connecting to Solr cluster: \" + zkHost);\n        try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n          String collection = cli.getOptionValue(\"collection\");\n          if (collection != null)\n            cloudSolrClient.setDefaultCollection(collection);\n\n          cloudSolrClient.connect();\n          try (SolrClientCloudManager realCloudManager = new SolrClientCloudManager(NoopDistributedQueueFactory.INSTANCE, cloudSolrClient)) {\n            if (config == null) {\n              CLIO.err(\"- reading autoscaling config from the cluster.\");\n              config = realCloudManager.getDistribStateManager().getAutoScalingConfig();\n            }\n            cloudManager = new SnapshotCloudManager(realCloudManager, config);\n          }\n        }\n      }\n      boolean redact = cli.hasOption(\"r\");\n      if (cli.hasOption(\"save\")) {\n        File targetDir = new File(cli.getOptionValue(\"save\"));\n        cloudManager.saveSnapshot(targetDir, true, redact);\n        CLIO.err(\"- saved autoscaling snapshot to \" + targetDir.getAbsolutePath());\n      }\n      HashSet<String> liveNodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      boolean withSuggestions = cli.hasOption(\"s\");\n      boolean withDiagnostics = cli.hasOption(\"d\") || cli.hasOption(\"n\");\n      boolean withSortedNodes = cli.hasOption(\"n\");\n      boolean withClusterState = cli.hasOption(\"c\");\n      boolean withStats = cli.hasOption(\"stats\");\n      if (cli.hasOption(\"all\")) {\n        withSuggestions = true;\n        withDiagnostics = true;\n        withSortedNodes = true;\n        withClusterState = true;\n        withStats = true;\n      }\n      // prepare to redact also host names / IPs in base_url and other properties\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      RedactionUtils.RedactionContext ctx = null;\n      if (redact) {\n        ctx = SimUtils.getRedactionContext(clusterState);\n      }\n      if (!withSuggestions && !withDiagnostics) {\n        withSuggestions = true;\n      }\n      Map<String, Object> results = prepareResults(cloudManager, config, withClusterState,\n          withStats, withSuggestions, withSortedNodes, withDiagnostics);\n      if (cli.hasOption(\"simulate\")) {\n        String iterStr = cli.getOptionValue(\"i\", \"10\");\n        String saveSimulated = cli.getOptionValue(\"saveSimulated\");\n        int iterations;\n        try {\n          iterations = Integer.parseInt(iterStr);\n        } catch (Exception e) {\n          log.warn(\"Invalid option 'i' value, using default 10:\" + e);\n          iterations = 10;\n        }\n        Map<String, Object> simulationResults = new HashMap<>();\n        simulate(cloudManager, config, simulationResults, saveSimulated, withClusterState,\n            withStats, withSuggestions, withSortedNodes, withDiagnostics, iterations, redact);\n        results.put(\"simulation\", simulationResults);\n      }\n      String data = Utils.toJSONString(results);\n      if (redact) {\n        data = RedactionUtils.redactNames(ctx.getRedactions(), data);\n      }\n      stdout.println(data);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.AutoscalingTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AutoscalingTool#runImpl(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      if (cli.hasOption(\"scenario\")) {\n        String data = IOUtils.toString(new FileInputStream(cli.getOptionValue(\"scenario\")), \"UTF-8\");\n        try (SimScenario scenario = SimScenario.load(data)) {\n          scenario.verbose = verbose;\n          scenario.console = CLIO.getOutStream();\n          scenario.run();\n        }\n        return;\n      }\n      SnapshotCloudManager cloudManager;\n      AutoScalingConfig config = null;\n      String configFile = cli.getOptionValue(\"a\");\n      if (configFile != null) {\n        CLIO.err(\"- reading autoscaling config from \" + configFile);\n        config = new AutoScalingConfig(IOUtils.toByteArray(new FileInputStream(configFile)));\n      }\n      if (cli.hasOption(\"load\")) {\n        File sourceDir = new File(cli.getOptionValue(\"load\"));\n        CLIO.err(\"- loading autoscaling snapshot from \" + sourceDir.getAbsolutePath());\n        cloudManager = SnapshotCloudManager.readSnapshot(sourceDir);\n        if (config == null) {\n          CLIO.err(\"- reading autoscaling config from the snapshot.\");\n          config = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        }\n      } else {\n        String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n\n        log.debug(\"Connecting to Solr cluster: {}\", zkHost);\n        try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n          String collection = cli.getOptionValue(\"collection\");\n          if (collection != null)\n            cloudSolrClient.setDefaultCollection(collection);\n\n          cloudSolrClient.connect();\n          try (SolrClientCloudManager realCloudManager = new SolrClientCloudManager(NoopDistributedQueueFactory.INSTANCE, cloudSolrClient)) {\n            if (config == null) {\n              CLIO.err(\"- reading autoscaling config from the cluster.\");\n              config = realCloudManager.getDistribStateManager().getAutoScalingConfig();\n            }\n            cloudManager = new SnapshotCloudManager(realCloudManager, config);\n          }\n        }\n      }\n      boolean redact = cli.hasOption(\"r\");\n      if (cli.hasOption(\"save\")) {\n        File targetDir = new File(cli.getOptionValue(\"save\"));\n        cloudManager.saveSnapshot(targetDir, true, redact);\n        CLIO.err(\"- saved autoscaling snapshot to \" + targetDir.getAbsolutePath());\n      }\n      HashSet<String> liveNodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      boolean withSuggestions = cli.hasOption(\"s\");\n      boolean withDiagnostics = cli.hasOption(\"d\") || cli.hasOption(\"n\");\n      boolean withSortedNodes = cli.hasOption(\"n\");\n      boolean withClusterState = cli.hasOption(\"c\");\n      boolean withStats = cli.hasOption(\"stats\");\n      if (cli.hasOption(\"all\")) {\n        withSuggestions = true;\n        withDiagnostics = true;\n        withSortedNodes = true;\n        withClusterState = true;\n        withStats = true;\n      }\n      // prepare to redact also host names / IPs in base_url and other properties\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      RedactionUtils.RedactionContext ctx = null;\n      if (redact) {\n        ctx = SimUtils.getRedactionContext(clusterState);\n      }\n      if (!withSuggestions && !withDiagnostics) {\n        withSuggestions = true;\n      }\n      Map<String, Object> results = prepareResults(cloudManager, config, withClusterState,\n          withStats, withSuggestions, withSortedNodes, withDiagnostics);\n      if (cli.hasOption(\"simulate\")) {\n        String iterStr = cli.getOptionValue(\"i\", \"10\");\n        String saveSimulated = cli.getOptionValue(\"saveSimulated\");\n        int iterations;\n        try {\n          iterations = Integer.parseInt(iterStr);\n        } catch (Exception e) {\n          log.warn(\"Invalid option 'i' value, using default 10:\", e);\n          iterations = 10;\n        }\n        Map<String, Object> simulationResults = new HashMap<>();\n        simulate(cloudManager, config, simulationResults, saveSimulated, withClusterState,\n            withStats, withSuggestions, withSortedNodes, withDiagnostics, iterations, redact);\n        results.put(\"simulation\", simulationResults);\n      }\n      String data = Utils.toJSONString(results);\n      if (redact) {\n        data = RedactionUtils.redactNames(ctx.getRedactions(), data);\n      }\n      stdout.println(data);\n    }\n\n","sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      if (cli.hasOption(\"scenario\")) {\n        String data = IOUtils.toString(new FileInputStream(cli.getOptionValue(\"scenario\")), \"UTF-8\");\n        try (SimScenario scenario = SimScenario.load(data)) {\n          scenario.verbose = verbose;\n          scenario.console = CLIO.getOutStream();\n          scenario.run();\n        }\n        return;\n      }\n      SnapshotCloudManager cloudManager;\n      AutoScalingConfig config = null;\n      String configFile = cli.getOptionValue(\"a\");\n      if (configFile != null) {\n        CLIO.err(\"- reading autoscaling config from \" + configFile);\n        config = new AutoScalingConfig(IOUtils.toByteArray(new FileInputStream(configFile)));\n      }\n      if (cli.hasOption(\"load\")) {\n        File sourceDir = new File(cli.getOptionValue(\"load\"));\n        CLIO.err(\"- loading autoscaling snapshot from \" + sourceDir.getAbsolutePath());\n        cloudManager = SnapshotCloudManager.readSnapshot(sourceDir);\n        if (config == null) {\n          CLIO.err(\"- reading autoscaling config from the snapshot.\");\n          config = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        }\n      } else {\n        String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n\n        log.debug(\"Connecting to Solr cluster: \" + zkHost);\n        try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n          String collection = cli.getOptionValue(\"collection\");\n          if (collection != null)\n            cloudSolrClient.setDefaultCollection(collection);\n\n          cloudSolrClient.connect();\n          try (SolrClientCloudManager realCloudManager = new SolrClientCloudManager(NoopDistributedQueueFactory.INSTANCE, cloudSolrClient)) {\n            if (config == null) {\n              CLIO.err(\"- reading autoscaling config from the cluster.\");\n              config = realCloudManager.getDistribStateManager().getAutoScalingConfig();\n            }\n            cloudManager = new SnapshotCloudManager(realCloudManager, config);\n          }\n        }\n      }\n      boolean redact = cli.hasOption(\"r\");\n      if (cli.hasOption(\"save\")) {\n        File targetDir = new File(cli.getOptionValue(\"save\"));\n        cloudManager.saveSnapshot(targetDir, true, redact);\n        CLIO.err(\"- saved autoscaling snapshot to \" + targetDir.getAbsolutePath());\n      }\n      HashSet<String> liveNodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      boolean withSuggestions = cli.hasOption(\"s\");\n      boolean withDiagnostics = cli.hasOption(\"d\") || cli.hasOption(\"n\");\n      boolean withSortedNodes = cli.hasOption(\"n\");\n      boolean withClusterState = cli.hasOption(\"c\");\n      boolean withStats = cli.hasOption(\"stats\");\n      if (cli.hasOption(\"all\")) {\n        withSuggestions = true;\n        withDiagnostics = true;\n        withSortedNodes = true;\n        withClusterState = true;\n        withStats = true;\n      }\n      // prepare to redact also host names / IPs in base_url and other properties\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      RedactionUtils.RedactionContext ctx = null;\n      if (redact) {\n        ctx = SimUtils.getRedactionContext(clusterState);\n      }\n      if (!withSuggestions && !withDiagnostics) {\n        withSuggestions = true;\n      }\n      Map<String, Object> results = prepareResults(cloudManager, config, withClusterState,\n          withStats, withSuggestions, withSortedNodes, withDiagnostics);\n      if (cli.hasOption(\"simulate\")) {\n        String iterStr = cli.getOptionValue(\"i\", \"10\");\n        String saveSimulated = cli.getOptionValue(\"saveSimulated\");\n        int iterations;\n        try {\n          iterations = Integer.parseInt(iterStr);\n        } catch (Exception e) {\n          log.warn(\"Invalid option 'i' value, using default 10:\" + e);\n          iterations = 10;\n        }\n        Map<String, Object> simulationResults = new HashMap<>();\n        simulate(cloudManager, config, simulationResults, saveSimulated, withClusterState,\n            withStats, withSuggestions, withSortedNodes, withDiagnostics, iterations, redact);\n        results.put(\"simulation\", simulationResults);\n      }\n      String data = Utils.toJSONString(results);\n      if (redact) {\n        data = RedactionUtils.redactNames(ctx.getRedactions(), data);\n      }\n      stdout.println(data);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.AutoscalingTool#runImpl(CommandLine).mjava","sourceNew":null,"sourceOld":"    protected void runImpl(CommandLine cli) throws Exception {\n      raiseLogLevelUnlessVerbose(cli);\n      if (cli.hasOption(\"scenario\")) {\n        String data = IOUtils.toString(new FileInputStream(cli.getOptionValue(\"scenario\")), \"UTF-8\");\n        try (SimScenario scenario = SimScenario.load(data)) {\n          scenario.verbose = verbose;\n          scenario.console = CLIO.getOutStream();\n          scenario.run();\n        }\n        return;\n      }\n      SnapshotCloudManager cloudManager;\n      AutoScalingConfig config = null;\n      String configFile = cli.getOptionValue(\"a\");\n      if (configFile != null) {\n        CLIO.err(\"- reading autoscaling config from \" + configFile);\n        config = new AutoScalingConfig(IOUtils.toByteArray(new FileInputStream(configFile)));\n      }\n      if (cli.hasOption(\"load\")) {\n        File sourceDir = new File(cli.getOptionValue(\"load\"));\n        CLIO.err(\"- loading autoscaling snapshot from \" + sourceDir.getAbsolutePath());\n        cloudManager = SnapshotCloudManager.readSnapshot(sourceDir);\n        if (config == null) {\n          CLIO.err(\"- reading autoscaling config from the snapshot.\");\n          config = cloudManager.getDistribStateManager().getAutoScalingConfig();\n        }\n      } else {\n        String zkHost = cli.getOptionValue(\"zkHost\", ZK_HOST);\n\n        log.debug(\"Connecting to Solr cluster: {}\", zkHost);\n        try (CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zkHost), Optional.empty()).build()) {\n\n          String collection = cli.getOptionValue(\"collection\");\n          if (collection != null)\n            cloudSolrClient.setDefaultCollection(collection);\n\n          cloudSolrClient.connect();\n          try (SolrClientCloudManager realCloudManager = new SolrClientCloudManager(NoopDistributedQueueFactory.INSTANCE, cloudSolrClient)) {\n            if (config == null) {\n              CLIO.err(\"- reading autoscaling config from the cluster.\");\n              config = realCloudManager.getDistribStateManager().getAutoScalingConfig();\n            }\n            cloudManager = new SnapshotCloudManager(realCloudManager, config);\n          }\n        }\n      }\n      boolean redact = cli.hasOption(\"r\");\n      if (cli.hasOption(\"save\")) {\n        File targetDir = new File(cli.getOptionValue(\"save\"));\n        cloudManager.saveSnapshot(targetDir, true, redact);\n        CLIO.err(\"- saved autoscaling snapshot to \" + targetDir.getAbsolutePath());\n      }\n      HashSet<String> liveNodes = new HashSet<>(cloudManager.getClusterStateProvider().getLiveNodes());\n      boolean withSuggestions = cli.hasOption(\"s\");\n      boolean withDiagnostics = cli.hasOption(\"d\") || cli.hasOption(\"n\");\n      boolean withSortedNodes = cli.hasOption(\"n\");\n      boolean withClusterState = cli.hasOption(\"c\");\n      boolean withStats = cli.hasOption(\"stats\");\n      if (cli.hasOption(\"all\")) {\n        withSuggestions = true;\n        withDiagnostics = true;\n        withSortedNodes = true;\n        withClusterState = true;\n        withStats = true;\n      }\n      // prepare to redact also host names / IPs in base_url and other properties\n      ClusterState clusterState = cloudManager.getClusterStateProvider().getClusterState();\n      RedactionUtils.RedactionContext ctx = null;\n      if (redact) {\n        ctx = SimUtils.getRedactionContext(clusterState);\n      }\n      if (!withSuggestions && !withDiagnostics) {\n        withSuggestions = true;\n      }\n      Map<String, Object> results = prepareResults(cloudManager, config, withClusterState,\n          withStats, withSuggestions, withSortedNodes, withDiagnostics);\n      if (cli.hasOption(\"simulate\")) {\n        String iterStr = cli.getOptionValue(\"i\", \"10\");\n        String saveSimulated = cli.getOptionValue(\"saveSimulated\");\n        int iterations;\n        try {\n          iterations = Integer.parseInt(iterStr);\n        } catch (Exception e) {\n          log.warn(\"Invalid option 'i' value, using default 10:\", e);\n          iterations = 10;\n        }\n        Map<String, Object> simulationResults = new HashMap<>();\n        simulate(cloudManager, config, simulationResults, saveSimulated, withClusterState,\n            withStats, withSuggestions, withSortedNodes, withDiagnostics, iterations, redact);\n        results.put(\"simulation\", simulationResults);\n      }\n      String data = Utils.toJSONString(results);\n      if (redact) {\n        data = RedactionUtils.redactNames(ctx.getRedactions(), data);\n      }\n      stdout.println(data);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"d3d2a34ea3732f91149b31bcad82026ad85fda69":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d"],"3f504512a03d978990cbff30db0522b354e846db":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"],"b0b597c65628ca9e73913a07e81691f8229bae35":["d3d2a34ea3732f91149b31bcad82026ad85fda69","23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e"]},"commit2Childs":{"23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e":["a7aeb53916301ea6a5fedff4fdc9617b257cbc7d","b0b597c65628ca9e73913a07e81691f8229bae35"],"d3d2a34ea3732f91149b31bcad82026ad85fda69":["23b14fc1cb7939c2aad1d3a40f6282dee0bfda2e","b0b597c65628ca9e73913a07e81691f8229bae35"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"a7aeb53916301ea6a5fedff4fdc9617b257cbc7d":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}