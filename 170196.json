{"path":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"c220849f876de24a79f756f65b3eb045db59f63f","date":1294902803,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,IndexReader).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, IndexReader reader) throws IOException {\n    // use MultiFields, just in case someone did a top() function\n    Fields fields = MultiFields.getFields(reader);\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89fd70ba895695c81afb216df6886df4475e628e","date":1308801640,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms == null ? null : terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms == null ? null : terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51cb88215648c6da23e00f2ffb57a5e3e1ef14be","date":1309303947,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms == null ? null : terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new RuntimeException(\"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms == null ? null : terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms == null ? null : terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/search/function/TermFreqValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    Fields fields = readerContext.reader.fields();\n    final Terms terms = fields.terms(field);\n\n    return new IntDocValues(this) {\n      DocsEnum docs ;\n      int atDoc;\n      int lastDocRequested = -1;\n\n      { reset(); }\n\n      public void reset() throws IOException {\n        // no one should call us for deleted docs?\n        docs = terms.docs(null, indexedBytes, null);\n        if (docs == null) {\n          docs = new DocsEnum() {\n            @Override\n            public int freq() {\n              return 0;\n            }\n\n            @Override\n            public int docID() {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int nextDoc() throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n\n            @Override\n            public int advance(int target) throws IOException {\n              return DocIdSetIterator.NO_MORE_DOCS;\n            }\n          };\n        }\n        atDoc = -1;\n      }\n\n      @Override\n      public int intVal(int doc) {\n        try {\n          if (doc < lastDocRequested) {\n            // out-of-order access.... reset\n            reset();\n          }\n          lastDocRequested = doc;\n\n          if (atDoc < doc) {\n            atDoc = docs.advance(doc);\n          }\n\n          if (atDoc > doc) {\n            // term doesn't match this document... either because we hit the\n            // end, or because the next doc is after this doc.\n            return 0;\n          }\n\n          // a match!\n          return docs.freq();\n        } catch (IOException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"caught exception in function \"+description()+\" : doc=\"+doc, e);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89fd70ba895695c81afb216df6886df4475e628e":["c220849f876de24a79f756f65b3eb045db59f63f"],"c220849f876de24a79f756f65b3eb045db59f63f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c220849f876de24a79f756f65b3eb045db59f63f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["c220849f876de24a79f756f65b3eb045db59f63f","89fd70ba895695c81afb216df6886df4475e628e"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["c220849f876de24a79f756f65b3eb045db59f63f","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c220849f876de24a79f756f65b3eb045db59f63f"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["2553b00f699380c64959ccb27991289aae87be2e","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["89fd70ba895695c81afb216df6886df4475e628e"]},"commit2Childs":{"89fd70ba895695c81afb216df6886df4475e628e":["2553b00f699380c64959ccb27991289aae87be2e","51cb88215648c6da23e00f2ffb57a5e3e1ef14be"],"c220849f876de24a79f756f65b3eb045db59f63f":["89fd70ba895695c81afb216df6886df4475e628e","29ef99d61cda9641b6250bf9567329a6e65f901d","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c220849f876de24a79f756f65b3eb045db59f63f","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"2553b00f699380c64959ccb27991289aae87be2e":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"51cb88215648c6da23e00f2ffb57a5e3e1ef14be":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","d083e83f225b11e5fdd900e83d26ddb385b6955c","868da859b43505d9d2a023bfeae6dd0c795f5295","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}