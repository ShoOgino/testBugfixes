{"path":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","date":1342989037,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        SyncStrategy syncStrategy = new SyncStrategy();\n\n        Map<String,String> props = new HashMap<String,String>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6e16ac6ee5e1ecac62d077497026318777ef3f63","26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        SyncStrategy syncStrategy = new SyncStrategy();\n\n        Map<String,String> props = new HashMap<String,String>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        SyncStrategy syncStrategy = new SyncStrategy();\n\n        Map<String,String> props = new HashMap<String,String>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        SyncStrategy syncStrategy = new SyncStrategy();\n\n        Map<String,String> props = new HashMap<String,String>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        // solrcloud_debug\n//         try {\n//         RefCounted<SolrIndexSearcher> searchHolder =\n//         core.getNewestSearcher(false);\n//         SolrIndexSearcher searcher = searchHolder.get();\n//         try {\n//         System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName()\n//         + \" synched \"\n//         + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//         } finally {\n//         searchHolder.decref();\n//         }\n//         } catch (Exception e) {\n//        \n//         }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        SyncStrategy syncStrategy = new SyncStrategy();\n\n        Map<String,String> props = new HashMap<String,String>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        SyncStrategy syncStrategy = new SyncStrategy();\n\n        Map<String,String> props = new HashMap<String,String>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        // solrcloud_debug\n//         try {\n//         RefCounted<SolrIndexSearcher> searchHolder =\n//         core.getNewestSearcher(false);\n//         SolrIndexSearcher searcher = searchHolder.get();\n//         try {\n//         System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName()\n//         + \" synched \"\n//         + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//         } finally {\n//         searchHolder.decref();\n//         }\n//         } catch (Exception e) {\n//        \n//         }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        SyncStrategy syncStrategy = new SyncStrategy();\n\n        Map<String,String> props = new HashMap<String,String>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        SyncStrategy syncStrategy = new SyncStrategy();\n\n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        // solrcloud_debug\n//         try {\n//         RefCounted<SolrIndexSearcher> searchHolder =\n//         core.getNewestSearcher(false);\n//         SolrIndexSearcher searcher = searchHolder.get();\n//         try {\n//         System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName()\n//         + \" synched \"\n//         + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//         } finally {\n//         searchHolder.decref();\n//         }\n//         } catch (Exception e) {\n//        \n//         }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        SyncStrategy syncStrategy = new SyncStrategy();\n\n        Map<String,String> props = new HashMap<String,String>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        // solrcloud_debug\n//         try {\n//         RefCounted<SolrIndexSearcher> searchHolder =\n//         core.getNewestSearcher(false);\n//         SolrIndexSearcher searcher = searchHolder.get();\n//         try {\n//         System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName()\n//         + \" synched \"\n//         + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//         } finally {\n//         searchHolder.decref();\n//         }\n//         } catch (Exception e) {\n//        \n//         }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08404c494c3d7f0f23c26191b824a38ac9384877","date":1348446583,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy();\n        \n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        // solrcloud_debug\n//         try {\n//         RefCounted<SolrIndexSearcher> searchHolder =\n//         core.getNewestSearcher(false);\n//         SolrIndexSearcher searcher = searchHolder.get();\n//         try {\n//         System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName()\n//         + \" synched \"\n//         + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//         } finally {\n//         searchHolder.decref();\n//         }\n//         } catch (Exception e) {\n//        \n//         }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        SyncStrategy syncStrategy = new SyncStrategy();\n\n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        // solrcloud_debug\n//         try {\n//         RefCounted<SolrIndexSearcher> searchHolder =\n//         core.getNewestSearcher(false);\n//         SolrIndexSearcher searcher = searchHolder.get();\n//         try {\n//         System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName()\n//         + \" synched \"\n//         + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//         } finally {\n//         searchHolder.decref();\n//         }\n//         } catch (Exception e) {\n//        \n//         }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c52ad29218ee436d52c57bf0829b98acad9de379","date":1383401544,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy();\n        \n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        // solrcloud_debug\n        if (Boolean.getBoolean(\"solr.cloud.debug\")) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              System.out.println(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy();\n        \n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        // solrcloud_debug\n//         try {\n//         RefCounted<SolrIndexSearcher> searchHolder =\n//         core.getNewestSearcher(false);\n//         SolrIndexSearcher searcher = searchHolder.get();\n//         try {\n//         System.out.println(core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName()\n//         + \" synched \"\n//         + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n//         } finally {\n//         searchHolder.decref();\n//         }\n//         } catch (Exception e) {\n//        \n//         }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":["6c94d2661bc1c14426980ec7882e951fdcff08d0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b17e61942d57c9c1c6dc8a926bce1c5c47882f8","date":1383401729,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy();\n        \n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        // solrcloud_debug\n        if (Boolean.getBoolean(\"solr.cloud.debug\")) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              System.err.println(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy();\n        \n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        // solrcloud_debug\n        if (Boolean.getBoolean(\"solr.cloud.debug\")) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              System.out.println(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"89b56ee224dbe29ee4436d91a7070ca418ffc4fb","date":1383492966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy();\n        \n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy();\n        \n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        // solrcloud_debug\n        if (Boolean.getBoolean(\"solr.cloud.debug\")) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              System.err.println(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7035935aa89f6951286e9005cbeb16e89a082a2","date":1385258396,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler());\n        \n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy();\n        \n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler());\n        \n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy();\n        \n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26cb11ce089e71fb909641e7030b53c7d9e3fff3","date":1390348343,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler());\n        \n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true);\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler());\n        \n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props));\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","bugFix":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n        \n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true);\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler());\n        \n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true);\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n        \n        Map<String,Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true);\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n        \n        Map<String,Object> props = new HashMap<String,Object>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true);\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e332392bbbdd01cb69ad6a89051f483cda38e15e","date":1395758779,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n        \n        Map<String,Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true);\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n    SolrCore core = null;\n    SyncStrategy syncStrategy = null;\n    try {\n      core = coreContainer.getCore(cname);\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n        \n        Map<String,Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true);\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (core != null) {\n        core.close();\n      }\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c94d2661bc1c14426980ec7882e951fdcff08d0","date":1427167177,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n        \n        Map<String,Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true);\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n        \n        Map<String,Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true);\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","bugFix":["c52ad29218ee436d52c57bf0829b98acad9de379"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n        \n        Map<String,Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true);\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n        \n        Map<String,Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true);\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            throw new SolrException(ErrorCode.SERVER_ERROR, null, e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e16ac6ee5e1ecac62d077497026318777ef3f63","date":1440707333,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n        \n        Map<String,Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true);\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","sourceOld":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n        \n        Map<String,Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true);\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Cound not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","bugFix":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0876236f0bd8be403747120d248bdd42b75a96","date":1451844229,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CoreAdminHandler#handleRequestSyncAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  protected void handleRequestSyncAction(SolrQueryRequest req,\n      SolrQueryResponse rsp) throws IOException {\n    final SolrParams params = req.getParams();\n\n    log.info(\"I have been requested to sync up my shard\");\n    ZkController zkController = coreContainer.getZkController();\n    if (zkController == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Only valid for SolrCloud\");\n    }\n    \n    String cname = params.get(CoreAdminParams.CORE);\n    if (cname == null) {\n      throw new IllegalArgumentException(CoreAdminParams.CORE + \" is required\");\n    }\n\n    SyncStrategy syncStrategy = null;\n    try (SolrCore core = coreContainer.getCore(cname)) {\n\n      if (core != null) {\n        syncStrategy = new SyncStrategy(core.getCoreDescriptor().getCoreContainer());\n        \n        Map<String,Object> props = new HashMap<>();\n        props.put(ZkStateReader.BASE_URL_PROP, zkController.getBaseUrl());\n        props.put(ZkStateReader.CORE_NAME_PROP, cname);\n        props.put(ZkStateReader.NODE_NAME_PROP, zkController.getNodeName());\n        \n        boolean success = syncStrategy.sync(zkController, core, new ZkNodeProps(props), true);\n        // solrcloud_debug\n        if (log.isDebugEnabled()) {\n          try {\n            RefCounted<SolrIndexSearcher> searchHolder = core\n                .getNewestSearcher(false);\n            SolrIndexSearcher searcher = searchHolder.get();\n            try {\n              log.debug(core.getCoreDescriptor().getCoreContainer()\n                  .getZkController().getNodeName()\n                  + \" synched \"\n                  + searcher.search(new MatchAllDocsQuery(), 1).totalHits);\n            } finally {\n              searchHolder.decref();\n            }\n          } catch (Exception e) {\n            log.debug(\"Error in solrcloud_debug block\", e);\n          }\n        }\n        if (!success) {\n          throw new SolrException(ErrorCode.SERVER_ERROR, \"Sync Failed\");\n        }\n      } else {\n        SolrException.log(log, \"Could not find core to call sync:\" + cname);\n      }\n    } finally {\n      // no recoveryStrat close for now\n      if (syncStrategy != null) {\n        syncStrategy.close();\n      }\n    }\n    \n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"1b17e61942d57c9c1c6dc8a926bce1c5c47882f8":["c52ad29218ee436d52c57bf0829b98acad9de379"],"89b56ee224dbe29ee4436d91a7070ca418ffc4fb":["1b17e61942d57c9c1c6dc8a926bce1c5c47882f8"],"6c94d2661bc1c14426980ec7882e951fdcff08d0":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"fa64435b5902ce266c23755a4a00691a3285dab8":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"fa0876236f0bd8be403747120d248bdd42b75a96":["6e16ac6ee5e1ecac62d077497026318777ef3f63"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["aba371508186796cc6151d8223a5b4e16d02e26e","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e332392bbbdd01cb69ad6a89051f483cda38e15e","6c94d2661bc1c14426980ec7882e951fdcff08d0"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"c52ad29218ee436d52c57bf0829b98acad9de379":["08404c494c3d7f0f23c26191b824a38ac9384877"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["89b56ee224dbe29ee4436d91a7070ca418ffc4fb","a7035935aa89f6951286e9005cbeb16e89a082a2"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"6e16ac6ee5e1ecac62d077497026318777ef3f63":["6c94d2661bc1c14426980ec7882e951fdcff08d0"],"26cb11ce089e71fb909641e7030b53c7d9e3fff3":["a7035935aa89f6951286e9005cbeb16e89a082a2"],"a7035935aa89f6951286e9005cbeb16e89a082a2":["89b56ee224dbe29ee4436d91a7070ca418ffc4fb"],"08404c494c3d7f0f23c26191b824a38ac9384877":["fa64435b5902ce266c23755a4a00691a3285dab8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa0876236f0bd8be403747120d248bdd42b75a96"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"1b17e61942d57c9c1c6dc8a926bce1c5c47882f8":["89b56ee224dbe29ee4436d91a7070ca418ffc4fb"],"89b56ee224dbe29ee4436d91a7070ca418ffc4fb":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","a7035935aa89f6951286e9005cbeb16e89a082a2"],"6c94d2661bc1c14426980ec7882e951fdcff08d0":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","6e16ac6ee5e1ecac62d077497026318777ef3f63"],"fa64435b5902ce266c23755a4a00691a3285dab8":["08404c494c3d7f0f23c26191b824a38ac9384877"],"fa0876236f0bd8be403747120d248bdd42b75a96":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["fa64435b5902ce266c23755a4a00691a3285dab8","05a14b2611ead08655a2b2bdc61632eb31316e57"],"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["6013b4c7388f1627659c8f96c44abd10a294d3a6","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"aba371508186796cc6151d8223a5b4e16d02e26e":["05a14b2611ead08655a2b2bdc61632eb31316e57"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"c52ad29218ee436d52c57bf0829b98acad9de379":["1b17e61942d57c9c1c6dc8a926bce1c5c47882f8"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["6c94d2661bc1c14426980ec7882e951fdcff08d0","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"6e16ac6ee5e1ecac62d077497026318777ef3f63":["fa0876236f0bd8be403747120d248bdd42b75a96"],"26cb11ce089e71fb909641e7030b53c7d9e3fff3":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"a7035935aa89f6951286e9005cbeb16e89a082a2":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","26cb11ce089e71fb909641e7030b53c7d9e3fff3"],"08404c494c3d7f0f23c26191b824a38ac9384877":["c52ad29218ee436d52c57bf0829b98acad9de379"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","74f45af4339b0daf7a95c820ab88c1aea74fbce0","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}