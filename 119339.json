{"path":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCountsCache#markRecentlyUsed(TFCKey).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCountsCache#markRecentlyUsed(TFCKey).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/TotalFacetCountsCache#markRecentlyUsed(TFCKey).mjava","sourceNew":"  /**\n   * Mark key as it as recently used.\n   * <p>\n   * <b>Implementation notes: Synchronization considerations and the interaction between lruKeys and cache:</b>\n   * <ol>\n   *  <li>A concurrent {@link LinkedHashMap} would have made this class much simpler.\n   *      But unfortunately, Java does not provide one.\n   *      Instead, we combine two concurrent objects:\n   *  <ul>\n   *   <li>{@link ConcurrentHashMap} for the cached TFCs.\n   *   <li>{@link ConcurrentLinkedQueue} for active keys\n   *  </ul>\n   *  <li>Both {@link #lruKeys} and {@link #cache} are concurrently safe.\n   *  <li>Checks for a cached item through getTotalCounts() are not synchronized.\n   *      Therefore, the case that a needed TFC is in the cache is very fast:\n   *      it does not wait for the computation of other TFCs.\n   *  <li>computeAndCache() is synchronized, and, has a (double) check of the required\n   *       TFC, to avoid computing the same TFC twice. \n   *  <li>A race condition in this method (markRecentlyUsed) might result in two copies \n   *      of the same 'key' in lruKeys, but this is handled by the loop in trimCache(), \n   *      where an attempt to remove the same key twice is a no-op.\n   * </ol>\n   */\n  private void markRecentlyUsed(TFCKey key) {\n    lruKeys.remove(key);  \n    lruKeys.add(key);\n  }\n\n","sourceOld":"  /**\n   * Mark key as it as recently used.\n   * <p>\n   * <b>Implementation notes: Synchronization considerations and the interaction between lruKeys and cache:</b>\n   * <ol>\n   *  <li>A concurrent {@link LinkedHashMap} would have made this class much simpler.\n   *      But unfortunately, Java does not provide one.\n   *      Instead, we combine two concurrent objects:\n   *  <ul>\n   *   <li>{@link ConcurrentHashMap} for the cached TFCs.\n   *   <li>{@link ConcurrentLinkedQueue} for active keys\n   *  </ul>\n   *  <li>Both {@link #lruKeys} and {@link #cache} are concurrently safe.\n   *  <li>Checks for a cached item through getTotalCounts() are not synchronized.\n   *      Therefore, the case that a needed TFC is in the cache is very fast:\n   *      it does not wait for the computation of other TFCs.\n   *  <li>computeAndCache() is synchronized, and, has a (double) check of the required\n   *       TFC, to avoid computing the same TFC twice. \n   *  <li>A race condition in this method (markRecentlyUsed) might result in two copies \n   *      of the same 'key' in lruKeys, but this is handled by the loop in trimCache(), \n   *      where an attempt to remove the same key twice is a no-op.\n   * </ol>\n   */\n  private void markRecentlyUsed(TFCKey key) {\n    lruKeys.remove(key);  \n    lruKeys.add(key);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCountsCache#markRecentlyUsed(TFCKey).mjava","sourceNew":null,"sourceOld":"  /**\n   * Mark key as it as recently used.\n   * <p>\n   * <b>Implementation notes: Synchronization considerations and the interaction between lruKeys and cache:</b>\n   * <ol>\n   *  <li>A concurrent {@link LinkedHashMap} would have made this class much simpler.\n   *      But unfortunately, Java does not provide one.\n   *      Instead, we combine two concurrent objects:\n   *  <ul>\n   *   <li>{@link ConcurrentHashMap} for the cached TFCs.\n   *   <li>{@link ConcurrentLinkedQueue} for active keys\n   *  </ul>\n   *  <li>Both {@link #lruKeys} and {@link #cache} are concurrently safe.\n   *  <li>Checks for a cached item through getTotalCounts() are not synchronized.\n   *      Therefore, the case that a needed TFC is in the cache is very fast:\n   *      it does not wait for the computation of other TFCs.\n   *  <li>computeAndCache() is synchronized, and, has a (double) check of the required\n   *       TFC, to avoid computing the same TFC twice. \n   *  <li>A race condition in this method (markRecentlyUsed) might result in two copies \n   *      of the same 'key' in lruKeys, but this is handled by the loop in trimCache(), \n   *      where an attempt to remove the same key twice is a no-op.\n   * </ol>\n   */\n  private void markRecentlyUsed(TFCKey key) {\n    lruKeys.remove(key);  \n    lruKeys.add(key);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/complements/TotalFacetCountsCache#markRecentlyUsed(TFCKey).mjava","sourceNew":null,"sourceOld":"  /**\n   * Mark key as it as recently used.\n   * <p>\n   * <b>Implementation notes: Synchronization considerations and the interaction between lruKeys and cache:</b>\n   * <ol>\n   *  <li>A concurrent {@link LinkedHashMap} would have made this class much simpler.\n   *      But unfortunately, Java does not provide one.\n   *      Instead, we combine two concurrent objects:\n   *  <ul>\n   *   <li>{@link ConcurrentHashMap} for the cached TFCs.\n   *   <li>{@link ConcurrentLinkedQueue} for active keys\n   *  </ul>\n   *  <li>Both {@link #lruKeys} and {@link #cache} are concurrently safe.\n   *  <li>Checks for a cached item through getTotalCounts() are not synchronized.\n   *      Therefore, the case that a needed TFC is in the cache is very fast:\n   *      it does not wait for the computation of other TFCs.\n   *  <li>computeAndCache() is synchronized, and, has a (double) check of the required\n   *       TFC, to avoid computing the same TFC twice. \n   *  <li>A race condition in this method (markRecentlyUsed) might result in two copies \n   *      of the same 'key' in lruKeys, but this is handled by the loop in trimCache(), \n   *      where an attempt to remove the same key twice is a no-op.\n   * </ol>\n   */\n  private void markRecentlyUsed(TFCKey key) {\n    lruKeys.remove(key);  \n    lruKeys.add(key);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}