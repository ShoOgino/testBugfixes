{"path":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#evaluateSmallestDocInHeap().mjava","commits":[{"id":"34960be55e437a6c96fe66046bf22d33346059f6","date":1363980156,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#evaluateSmallestDocInHeap().mjava","pathOld":"/dev/null","sourceNew":"  private void evaluateSmallestDocInHeap() throws IOException {\n    // within heap, subScorer[0] now contains the next candidate doc\n    doc = subScorers[0].docID();\n    if (doc == NO_MORE_DOCS) {\n      nrMatchers = Integer.MAX_VALUE; // stop looping\n      return;\n    }\n    // 1. score and count number of matching subScorers within heap\n    score = subScorers[0].score();\n    nrMatchers = 1;\n    countMatches(1);\n    countMatches(2);\n    // 2. score and count number of matching subScorers within stack,\n    //    short-circuit: stop when mm can't be reached for current doc, then perform on heap next() TODO advance() might be possible, but complicates things\n    for (int i = mm-2; i >= 0; i--) { // advance first sparsest subScorer as indicated by next doc\n      if (mmStack[i].docID() >= doc || mmStack[i].advance(doc) != NO_MORE_DOCS) {\n        if (mmStack[i].docID() == doc) { // either it was already on doc, or got there via advance()\n          nrMatchers++;\n          score += mmStack[i].score();\n        } else { // scorer advanced to next after doc, check if enough scorers left for current doc\n          if (nrMatchers + i < mm) { // too few subScorers left, abort advancing\n            return; // continue looping TODO consider advance() here\n          }\n        }\n      } else { // subScorer exhausted\n        numScorers--;\n        if (numScorers < mm) { // too few subScorers left\n          doc = NO_MORE_DOCS;\n          nrMatchers = Integer.MAX_VALUE; // stop looping\n          return;\n        }\n        if (mm-2-i > 0) {\n          // shift RHS of array left, TODO consider double-linked list as data structure\n          System.arraycopy(mmStack, i+1, mmStack, i, mm-2-i);\n        }\n        // find next most costly subScorer within heap\n        while (!minheapRemove(sortedSubScorers[sortedSubScorersIdx++])) // TODO this is O((# clauses)^2), find most costly subScorer within heap in O(n)\n          ;\n        // add the subScorer removed from heap to stack\n        mmStack[mm-2] = sortedSubScorers[sortedSubScorersIdx-1];\n        \n        if (nrMatchers + i < mm) { // too few subScorers left, abort advancing\n          return; // continue looping TODO consider advance() here\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"681329f0d8aa847be84b952db62031b9c15f96c5","date":1364143277,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#evaluateSmallestDocInHeap().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#evaluateSmallestDocInHeap().mjava","sourceNew":"  private void evaluateSmallestDocInHeap() throws IOException {\n    // within heap, subScorer[0] now contains the next candidate doc\n    doc = subScorers[0].docID();\n    if (doc == NO_MORE_DOCS) {\n      nrMatchers = Integer.MAX_VALUE; // stop looping\n      return;\n    }\n    // 1. score and count number of matching subScorers within heap\n    score = subScorers[0].score();\n    nrMatchers = 1;\n    countMatches(1);\n    countMatches(2);\n    // 2. score and count number of matching subScorers within stack,\n    // short-circuit: stop when mm can't be reached for current doc, then perform on heap next()\n    // TODO instead advance() might be possible, but complicates things\n    for (int i = mm-2; i >= 0; i--) { // first advance sparsest subScorer\n      if (mmStack[i].docID() >= doc || mmStack[i].advance(doc) != NO_MORE_DOCS) {\n        if (mmStack[i].docID() == doc) { // either it was already on doc, or got there via advance()\n          nrMatchers++;\n          score += mmStack[i].score();\n        } else { // scorer advanced to next after doc, check if enough scorers left for current doc\n          if (nrMatchers + i < mm) { // too few subScorers left, abort advancing\n            return; // continue looping TODO consider advance() here\n          }\n        }\n      } else { // subScorer exhausted\n        numScorers--;\n        if (numScorers < mm) { // too few subScorers left\n          doc = NO_MORE_DOCS;\n          nrMatchers = Integer.MAX_VALUE; // stop looping\n          return;\n        }\n        if (mm-2-i > 0) {\n          // shift RHS of array left\n          System.arraycopy(mmStack, i+1, mmStack, i, mm-2-i);\n        }\n        // find next most costly subScorer within heap TODO can this be done better?\n        while (!minheapRemove(sortedSubScorers[sortedSubScorersIdx++])) {\n          //assert minheapCheck();\n        }\n        // add the subScorer removed from heap to stack\n        mmStack[mm-2] = sortedSubScorers[sortedSubScorersIdx-1];\n        \n        if (nrMatchers + i < mm) { // too few subScorers left, abort advancing\n          return; // continue looping TODO consider advance() here\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void evaluateSmallestDocInHeap() throws IOException {\n    // within heap, subScorer[0] now contains the next candidate doc\n    doc = subScorers[0].docID();\n    if (doc == NO_MORE_DOCS) {\n      nrMatchers = Integer.MAX_VALUE; // stop looping\n      return;\n    }\n    // 1. score and count number of matching subScorers within heap\n    score = subScorers[0].score();\n    nrMatchers = 1;\n    countMatches(1);\n    countMatches(2);\n    // 2. score and count number of matching subScorers within stack,\n    //    short-circuit: stop when mm can't be reached for current doc, then perform on heap next() TODO advance() might be possible, but complicates things\n    for (int i = mm-2; i >= 0; i--) { // advance first sparsest subScorer as indicated by next doc\n      if (mmStack[i].docID() >= doc || mmStack[i].advance(doc) != NO_MORE_DOCS) {\n        if (mmStack[i].docID() == doc) { // either it was already on doc, or got there via advance()\n          nrMatchers++;\n          score += mmStack[i].score();\n        } else { // scorer advanced to next after doc, check if enough scorers left for current doc\n          if (nrMatchers + i < mm) { // too few subScorers left, abort advancing\n            return; // continue looping TODO consider advance() here\n          }\n        }\n      } else { // subScorer exhausted\n        numScorers--;\n        if (numScorers < mm) { // too few subScorers left\n          doc = NO_MORE_DOCS;\n          nrMatchers = Integer.MAX_VALUE; // stop looping\n          return;\n        }\n        if (mm-2-i > 0) {\n          // shift RHS of array left, TODO consider double-linked list as data structure\n          System.arraycopy(mmStack, i+1, mmStack, i, mm-2-i);\n        }\n        // find next most costly subScorer within heap\n        while (!minheapRemove(sortedSubScorers[sortedSubScorersIdx++])) // TODO this is O((# clauses)^2), find most costly subScorer within heap in O(n)\n          ;\n        // add the subScorer removed from heap to stack\n        mmStack[mm-2] = sortedSubScorers[sortedSubScorersIdx-1];\n        \n        if (nrMatchers + i < mm) { // too few subScorers left, abort advancing\n          return; // continue looping TODO consider advance() here\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251e6911800e3a02e1da3bfd4dc49a914aef9778","date":1423063783,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/MinShouldMatchSumScorer#evaluateSmallestDocInHeap().mjava","sourceNew":null,"sourceOld":"  private void evaluateSmallestDocInHeap() throws IOException {\n    // within heap, subScorer[0] now contains the next candidate doc\n    doc = subScorers[0].docID();\n    if (doc == NO_MORE_DOCS) {\n      nrMatchers = Integer.MAX_VALUE; // stop looping\n      return;\n    }\n    // 1. score and count number of matching subScorers within heap\n    score = subScorers[0].score();\n    nrMatchers = 1;\n    countMatches(1);\n    countMatches(2);\n    // 2. score and count number of matching subScorers within stack,\n    // short-circuit: stop when mm can't be reached for current doc, then perform on heap next()\n    // TODO instead advance() might be possible, but complicates things\n    for (int i = mm-2; i >= 0; i--) { // first advance sparsest subScorer\n      if (mmStack[i].docID() >= doc || mmStack[i].advance(doc) != NO_MORE_DOCS) {\n        if (mmStack[i].docID() == doc) { // either it was already on doc, or got there via advance()\n          nrMatchers++;\n          score += mmStack[i].score();\n        } else { // scorer advanced to next after doc, check if enough scorers left for current doc\n          if (nrMatchers + i < mm) { // too few subScorers left, abort advancing\n            return; // continue looping TODO consider advance() here\n          }\n        }\n      } else { // subScorer exhausted\n        numScorers--;\n        if (numScorers < mm) { // too few subScorers left\n          doc = NO_MORE_DOCS;\n          nrMatchers = Integer.MAX_VALUE; // stop looping\n          return;\n        }\n        if (mm-2-i > 0) {\n          // shift RHS of array left\n          System.arraycopy(mmStack, i+1, mmStack, i, mm-2-i);\n        }\n        // find next most costly subScorer within heap TODO can this be done better?\n        while (!minheapRemove(sortedSubScorers[sortedSubScorersIdx++])) {\n          //assert minheapCheck();\n        }\n        // add the subScorer removed from heap to stack\n        mmStack[mm-2] = sortedSubScorers[sortedSubScorersIdx-1];\n        \n        if (nrMatchers + i < mm) { // too few subScorers left, abort advancing\n          return; // continue looping TODO consider advance() here\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["681329f0d8aa847be84b952db62031b9c15f96c5"],"34960be55e437a6c96fe66046bf22d33346059f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"681329f0d8aa847be84b952db62031b9c15f96c5":["34960be55e437a6c96fe66046bf22d33346059f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["251e6911800e3a02e1da3bfd4dc49a914aef9778"]},"commit2Childs":{"251e6911800e3a02e1da3bfd4dc49a914aef9778":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"34960be55e437a6c96fe66046bf22d33346059f6":["681329f0d8aa847be84b952db62031b9c15f96c5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34960be55e437a6c96fe66046bf22d33346059f6"],"681329f0d8aa847be84b952db62031b9c15f96c5":["251e6911800e3a02e1da3bfd4dc49a914aef9778"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}