{"path":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","commits":[{"id":"caf7f9acfdff984e59be68054cc1e0048b8ee030","date":1407766058,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Build a Node tree structure representing all paths of intrest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if(segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \"+path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actutally have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.isRecord = true; // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH) ) {\n            recursiveWildCardChild = n.recursiveWildCardChild= n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n        }\n      } else {\n        //wildcards must only come at the end\n        if(WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name)) throw new RuntimeException(\"wild cards are allowed only in the end \"+path) ;\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"310045472df7463a74daabf6252eafc9d93960e0","date":1413271286,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","sourceNew":"    /**\n     * Build a Node tree structure representing all paths of intrest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if(segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \"+path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actutally have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.isRecord = true; // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH) ) {\n            recursiveWildCardChild = n.recursiveWildCardChild= n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n          if(\"$FQN\".equals(n.fieldName)) {\n            n.fieldName = null;\n            n.useFqn = true;\n          }\n        }\n      } else {\n        //wildcards must only come at the end\n        if(WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name)) throw new RuntimeException(\"wild cards are allowed only in the end \"+path) ;\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","sourceOld":"    /**\n     * Build a Node tree structure representing all paths of intrest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if(segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \"+path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actutally have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.isRecord = true; // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH) ) {\n            recursiveWildCardChild = n.recursiveWildCardChild= n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n        }\n      } else {\n        //wildcards must only come at the end\n        if(WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name)) throw new RuntimeException(\"wild cards are allowed only in the end \"+path) ;\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","sourceNew":"    /**\n     * Build a Node tree structure representing all paths of intrest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if(segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \"+path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actutally have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.isRecord = true; // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH) ) {\n            recursiveWildCardChild = n.recursiveWildCardChild= n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n          if(\"$FQN\".equals(n.fieldName)) {\n            n.fieldName = null;\n            n.useFqn = true;\n          }\n        }\n      } else {\n        //wildcards must only come at the end\n        if(WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name)) throw new RuntimeException(\"wild cards are allowed only in the end \"+path) ;\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","sourceOld":"    /**\n     * Build a Node tree structure representing all paths of intrest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if(segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \"+path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actutally have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.isRecord = true; // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH) ) {\n            recursiveWildCardChild = n.recursiveWildCardChild= n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n        }\n      } else {\n        //wildcards must only come at the end\n        if(WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name)) throw new RuntimeException(\"wild cards are allowed only in the end \"+path) ;\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2330174b38007b9942205a2679db9ddffe35af89","date":1423653924,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","sourceNew":"    /**\n     * Build a Node tree structure representing all paths of intrest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if (segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \" + path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actutally have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.isRecord = true; // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH)) {\n            recursiveWildCardChild = n.recursiveWildCardChild = n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n          if (\"$FQN\".equals(n.fieldName)) {\n            n.fieldName = null;\n            n.useFqn = true;\n          }\n        }\n      } else {\n        //wildcards must only come at the end\n        if (WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name))\n          throw new RuntimeException(\"wild cards are allowed only in the end \" + path);\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","sourceOld":"    /**\n     * Build a Node tree structure representing all paths of intrest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if(segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \"+path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actutally have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.isRecord = true; // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH) ) {\n            recursiveWildCardChild = n.recursiveWildCardChild= n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n          if(\"$FQN\".equals(n.fieldName)) {\n            n.fieldName = null;\n            n.useFqn = true;\n          }\n        }\n      } else {\n        //wildcards must only come at the end\n        if(WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name)) throw new RuntimeException(\"wild cards are allowed only in the end \"+path) ;\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fd61945b522c69b4bdd1a107f06659c8fee30c3","date":1464716529,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","sourceNew":"    /**\n     * Build a Node tree structure representing all paths of interest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if (segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \" + path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actually have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.isRecord = true; // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH)) {\n            recursiveWildCardChild = n.recursiveWildCardChild = n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n          if (\"$FQN\".equals(n.fieldName)) {\n            n.fieldName = null;\n            n.useFqn = true;\n          }\n        }\n      } else {\n        //wildcards must only come at the end\n        if (WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name))\n          throw new RuntimeException(\"wild cards are allowed only in the end \" + path);\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","sourceOld":"    /**\n     * Build a Node tree structure representing all paths of intrest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if (segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \" + path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actutally have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.isRecord = true; // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH)) {\n            recursiveWildCardChild = n.recursiveWildCardChild = n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n          if (\"$FQN\".equals(n.fieldName)) {\n            n.fieldName = null;\n            n.useFqn = true;\n          }\n        }\n      } else {\n        //wildcards must only come at the end\n        if (WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name))\n          throw new RuntimeException(\"wild cards are allowed only in the end \" + path);\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b4e08e2b6886d78c91752d82ea2b436c4324cd55","date":1464786234,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","sourceNew":"    /**\n     * Build a Node tree structure representing all paths of interest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if (segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \" + path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actually have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.setAsRecord(); // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH)) {\n            recursiveWildCardChild = n.recursiveWildCardChild = n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n          if (\"$FQN\".equals(n.fieldName)) {\n            n.fieldName = null;\n            n.useFqn = true;\n          }\n        }\n      } else {\n        //wildcards must only come at the end\n        if (WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name))\n          throw new RuntimeException(\"wild cards are allowed only in the end \" + path);\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","sourceOld":"    /**\n     * Build a Node tree structure representing all paths of interest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if (segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \" + path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actually have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.isRecord = true; // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH)) {\n            recursiveWildCardChild = n.recursiveWildCardChild = n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n          if (\"$FQN\".equals(n.fieldName)) {\n            n.fieldName = null;\n            n.useFqn = true;\n          }\n        }\n      } else {\n        //wildcards must only come at the end\n        if (WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name))\n          throw new RuntimeException(\"wild cards are allowed only in the end \" + path);\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"611f7ea4eee5babadf4129bfa5fbae964738cd7c","date":1464787051,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","sourceNew":"    /**\n     * Build a Node tree structure representing all paths of interest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if (segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \" + path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actually have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.setAsRecord(); // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH)) {\n            recursiveWildCardChild = n.recursiveWildCardChild = n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n          if (\"$FQN\".equals(n.fieldName)) {\n            n.fieldName = null;\n            n.useFqn = true;\n          }\n        }\n      } else {\n        //wildcards must only come at the end\n        if (WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name))\n          throw new RuntimeException(\"wild cards are allowed only in the end \" + path);\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","sourceOld":"    /**\n     * Build a Node tree structure representing all paths of interest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if (segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \" + path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actually have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.isRecord = true; // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH)) {\n            recursiveWildCardChild = n.recursiveWildCardChild = n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n          if (\"$FQN\".equals(n.fieldName)) {\n            n.fieldName = null;\n            n.useFqn = true;\n          }\n        }\n      } else {\n        //wildcards must only come at the end\n        if (WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name))\n          throw new RuntimeException(\"wild cards are allowed only in the end \" + path);\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","sourceNew":"    /**\n     * Build a Node tree structure representing all paths of interest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if (segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \" + path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actually have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.setAsRecord(); // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH)) {\n            recursiveWildCardChild = n.recursiveWildCardChild = n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n          if (\"$FQN\".equals(n.fieldName)) {\n            n.fieldName = null;\n            n.useFqn = true;\n          }\n        }\n      } else {\n        //wildcards must only come at the end\n        if (WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name))\n          throw new RuntimeException(\"wild cards are allowed only in the end \" + path);\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","sourceOld":"    /**\n     * Build a Node tree structure representing all paths of intrest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if (segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \" + path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actutally have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.isRecord = true; // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH)) {\n            recursiveWildCardChild = n.recursiveWildCardChild = n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n          if (\"$FQN\".equals(n.fieldName)) {\n            n.fieldName = null;\n            n.useFqn = true;\n          }\n        }\n      } else {\n        //wildcards must only come at the end\n        if (WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name))\n          throw new RuntimeException(\"wild cards are allowed only in the end \" + path);\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","sourceNew":"    /**\n     * Build a Node tree structure representing all paths of interest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if (segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \" + path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actually have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.setAsRecord(); // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH)) {\n            recursiveWildCardChild = n.recursiveWildCardChild = n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n          if (\"$FQN\".equals(n.fieldName)) {\n            n.fieldName = null;\n            n.useFqn = true;\n          }\n        }\n      } else {\n        //wildcards must only come at the end\n        if (WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name))\n          throw new RuntimeException(\"wild cards are allowed only in the end \" + path);\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","sourceOld":"    /**\n     * Build a Node tree structure representing all paths of intrest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if (segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \" + path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actutally have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.isRecord = true; // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH)) {\n            recursiveWildCardChild = n.recursiveWildCardChild = n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n          if (\"$FQN\".equals(n.fieldName)) {\n            n.fieldName = null;\n            n.useFqn = true;\n          }\n        }\n      } else {\n        //wildcards must only come at the end\n        if (WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name))\n          throw new RuntimeException(\"wild cards are allowed only in the end \" + path);\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/JsonRecordReader.Node#build(List[String],String,boolean,boolean,String).mjava","sourceNew":"    /**\n     * Build a Node tree structure representing all paths of interest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if (segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \" + path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actually have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.setAsRecord(); // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH)) {\n            recursiveWildCardChild = n.recursiveWildCardChild = n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n          if (\"$FQN\".equals(n.fieldName)) {\n            n.fieldName = null;\n            n.useFqn = true;\n          }\n        }\n      } else {\n        //wildcards must only come at the end\n        if (WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name))\n          throw new RuntimeException(\"wild cards are allowed only in the end \" + path);\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","sourceOld":"    /**\n     * Build a Node tree structure representing all paths of intrest to us.\n     * This must be done before parsing of the JSON stream starts. Each node\n     * holds one portion of an path. Taking each path segment in turn this\n     * method walks the Node tree  and finds where the new segment should be\n     * inserted. It creates a Node representing a field's name, PATH and\n     * some flags and inserts the Node into the Node tree.\n     */\n    private void build(\n        List<String> paths,   // a List of segments from the split paths\n        String fieldName,     // the fieldName assoc with this path\n        boolean multiValued,  // flag if this fieldName is multiValued or not\n        boolean record,       // is this path a record or a field\n        String path) {\n      // recursively walk the paths Lists adding new Nodes as required\n      String segment = paths.remove(0); // shift out next path segment\n\n      if (segment.length() < 1) throw new RuntimeException(\"all pieces in path must be non empty \" + path);\n\n      // does this \"name\" already exist as a child node.\n      Node n = getOrAddNode(segment, childNodes);\n      if (paths.isEmpty()) {\n        // We have emptied paths, we are for the moment a leaf of the tree.\n        // When parsing the actual input we have traversed to a position\n        // where we actutally have to do something. getOrAddNode() will\n        // have created and returned a new minimal Node with name and\n        // pathName already populated. We need to add more information.\n        if (record) {\n          //wild cards cannot be used in split\n          assert !WILDCARD_PATH.equals(n.name);\n          assert !RECURSIVE_WILDCARD_PATH.equals(n.name);\n          // split attribute\n          n.isRecord = true; // flag: split attribute, prepare to emit rec\n          n.splitPath = fieldName; // the full split attribute path\n        } else {\n          if (n.name.equals(WILDCARD_PATH)) {\n            wildCardChild = n;\n          }\n          if (n.name.equals(RECURSIVE_WILDCARD_PATH)) {\n            recursiveWildCardChild = n.recursiveWildCardChild = n;\n          }\n\n          // path with content we want to store and return\n          n.isLeaf = true;        // we have to store text found here\n          n.fieldName = fieldName; // name to store collected text against\n          if (\"$FQN\".equals(n.fieldName)) {\n            n.fieldName = null;\n            n.useFqn = true;\n          }\n        }\n      } else {\n        //wildcards must only come at the end\n        if (WILDCARD_PATH.equals(name) || RECURSIVE_WILDCARD_PATH.equals(name))\n          throw new RuntimeException(\"wild cards are allowed only in the end \" + path);\n        // recurse to handle next paths segment\n        n.build(paths, fieldName, multiValued, record, path);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"310045472df7463a74daabf6252eafc9d93960e0":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["9fd61945b522c69b4bdd1a107f06659c8fee30c3"],"55980207f1977bd1463465de1659b821347e2fa8":["caf7f9acfdff984e59be68054cc1e0048b8ee030","310045472df7463a74daabf6252eafc9d93960e0"],"9fd61945b522c69b4bdd1a107f06659c8fee30c3":["2330174b38007b9942205a2679db9ddffe35af89"],"2330174b38007b9942205a2679db9ddffe35af89":["310045472df7463a74daabf6252eafc9d93960e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["9fd61945b522c69b4bdd1a107f06659c8fee30c3","b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["2330174b38007b9942205a2679db9ddffe35af89","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2330174b38007b9942205a2679db9ddffe35af89","b4e08e2b6886d78c91752d82ea2b436c4324cd55"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["2330174b38007b9942205a2679db9ddffe35af89","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b4e08e2b6886d78c91752d82ea2b436c4324cd55"]},"commit2Childs":{"310045472df7463a74daabf6252eafc9d93960e0":["55980207f1977bd1463465de1659b821347e2fa8","2330174b38007b9942205a2679db9ddffe35af89"],"b4e08e2b6886d78c91752d82ea2b436c4324cd55":["611f7ea4eee5babadf4129bfa5fbae964738cd7c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55980207f1977bd1463465de1659b821347e2fa8":[],"9fd61945b522c69b4bdd1a107f06659c8fee30c3":["b4e08e2b6886d78c91752d82ea2b436c4324cd55","611f7ea4eee5babadf4129bfa5fbae964738cd7c"],"2330174b38007b9942205a2679db9ddffe35af89":["9fd61945b522c69b4bdd1a107f06659c8fee30c3","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["caf7f9acfdff984e59be68054cc1e0048b8ee030"],"611f7ea4eee5babadf4129bfa5fbae964738cd7c":["5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"caf7f9acfdff984e59be68054cc1e0048b8ee030":["310045472df7463a74daabf6252eafc9d93960e0","55980207f1977bd1463465de1659b821347e2fa8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}