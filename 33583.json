{"path":"lucene/misc/src/test/org/apache/lucene/index/IndexSortingTest#beforeClassSorterUtilTest().mjava","commits":[{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/sorter/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // NOTE: index was created by by super's @BeforeClass\n\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = unsortedReader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < unsortedReader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(unsortedReader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    IndexReader reader = SortingLeafReader.wrap(unsortedReader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    // NOTE: also closes unsortedReader\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    sortedReader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", sortedReader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // NOTE: index was created by by super's @BeforeClass\n\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = unsortedReader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < unsortedReader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(unsortedReader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    IndexReader reader = SortingLeafReader.wrap(unsortedReader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    // NOTE: also closes unsortedReader\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    sortedReader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", sortedReader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa","date":1420599177,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // NOTE: index was created by by super's @BeforeClass\n\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = unsortedReader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < unsortedReader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(unsortedReader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    LeafReader reader = SortingLeafReader.wrap(unsortedReader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    // NOTE: also closes unsortedReader\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    sortedReader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", sortedReader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // NOTE: index was created by by super's @BeforeClass\n\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = unsortedReader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < unsortedReader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(unsortedReader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    IndexReader reader = SortingLeafReader.wrap(unsortedReader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    // NOTE: also closes unsortedReader\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    sortedReader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", sortedReader.hasDeletions());\n  }\n\n","bugFix":["c17ec76fa103f80e80ed20ee425dbc357fb1356f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/IndexSortingTest#beforeClassSorterUtilTest().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // NOTE: index was created by by super's @BeforeClass\n\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = unsortedReader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < unsortedReader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(unsortedReader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    LeafReader reader = SortingLeafReader.wrap(unsortedReader, sorter);\n    writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    writer.close();\n    // NOTE: also closes unsortedReader\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    sortedReader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", sortedReader.hasDeletions());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // NOTE: index was created by by super's @BeforeClass\n\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = unsortedReader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < unsortedReader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(unsortedReader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    LeafReader reader = SortingLeafReader.wrap(unsortedReader, sorter);\n    writer.addIndexes(reader);\n    writer.close();\n    // NOTE: also closes unsortedReader\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    sortedReader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", sortedReader.hasDeletions());\n  }\n\n","bugFix":["cb767289784b682dea51f9e6d7222add811edb77"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // NOTE: index was created by by super's @BeforeClass\n\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = unsortedReader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < unsortedReader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(unsortedReader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    LeafReader reader = SortingLeafReader.wrap(unsortedReader, sorter);\n    writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    writer.close();\n    // NOTE: also closes unsortedReader\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    sortedReader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", sortedReader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":4,"author":"Mike McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // NOTE: index was created by by super's @BeforeClass\n\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = unsortedReader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < unsortedReader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(unsortedReader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    LeafReader reader = SortingLeafReader.wrap(unsortedReader, sorter);\n    writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    writer.close();\n    // NOTE: also closes unsortedReader\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    sortedReader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", sortedReader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // NOTE: index was created by by super's @BeforeClass\n\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = unsortedReader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < unsortedReader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(unsortedReader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    LeafReader reader = SortingLeafReader.wrap(unsortedReader, sorter);\n    writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    writer.close();\n    // NOTE: also closes unsortedReader\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    sortedReader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", sortedReader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // NOTE: index was created by by super's @BeforeClass\n\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = unsortedReader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < unsortedReader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(unsortedReader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    LeafReader reader = SortingLeafReader.wrap(unsortedReader, sorter);\n    writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    writer.close();\n    // NOTE: also closes unsortedReader\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    sortedReader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", sortedReader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/IndexSortingTest#beforeClassSorterUtilTest().mjava","sourceNew":null,"sourceOld":"  @BeforeClass\n  public static void beforeClassSorterUtilTest() throws Exception {\n    // NOTE: index was created by by super's @BeforeClass\n\n    // only read the values of the undeleted documents, since after addIndexes,\n    // the deleted ones will be dropped from the index.\n    Bits liveDocs = unsortedReader.getLiveDocs();\n    List<Integer> values = new ArrayList<>();\n    for (int i = 0; i < unsortedReader.maxDoc(); i++) {\n      if (liveDocs == null || liveDocs.get(i)) {\n        values.add(Integer.valueOf(unsortedReader.document(i).get(ID_FIELD)));\n      }\n    }\n    int idx = random().nextInt(SORT.length);\n    Sort sorter = SORT[idx];\n    if (idx == 1) { // reverse doc sort\n      Collections.reverse(values);\n    } else {\n      Collections.sort(values);\n      if (random().nextBoolean()) {\n        sorter = new Sort(new SortField(NUMERIC_DV_FIELD, SortField.Type.LONG, true)); // descending\n        Collections.reverse(values);\n      }\n    }\n    sortedValues = values.toArray(new Integer[values.size()]);\n    if (VERBOSE) {\n      System.out.println(\"sortedValues: \" + sortedValues);\n      System.out.println(\"Sorter: \" + sorter);\n    }\n\n    Directory target = newDirectory();\n    IndexWriter writer = new IndexWriter(target, newIndexWriterConfig(null));\n    LeafReader reader = SortingLeafReader.wrap(unsortedReader, sorter);\n    writer.addIndexes(SlowCodecReaderWrapper.wrap(reader));\n    writer.close();\n    // NOTE: also closes unsortedReader\n    reader.close();\n    dir.close();\n    \n    // CheckIndex the target directory\n    dir = target;\n    TestUtil.checkIndex(dir);\n    \n    // set reader for tests\n    sortedReader = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir));\n    assertFalse(\"index should not have deletions\", sortedReader.hasDeletions());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"0ad30c6a479e764150a3316e57263319775f1df2":["505bff044e47a553f461b6f4484d1d08faf4ac85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["505bff044e47a553f461b6f4484d1d08faf4ac85","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["505bff044e47a553f461b6f4484d1d08faf4ac85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["505bff044e47a553f461b6f4484d1d08faf4ac85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa":["505bff044e47a553f461b6f4484d1d08faf4ac85"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["0fa3fa46c67543546ab45142cc8ee7cf34fc9aaa"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}