{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestDefaultWrapperModel#setupBeforeClass().mjava","commits":[{"id":"a03034a121f635bebacef74693404e3273b614a6","date":1511880957,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestDefaultWrapperModel#setupBeforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupBeforeClass() throws Exception {\n    setuptest(false);\n    assertU(adoc(\"id\", \"1\", \"title\", \"w1\", \"description\", \"w1\", \"popularity\", \"1\"));\n    assertU(adoc(\"id\", \"2\", \"title\", \"w2\", \"description\", \"w2\", \"popularity\", \"2\"));\n    assertU(adoc(\"id\", \"3\", \"title\", \"w3\", \"description\", \"w3\", \"popularity\", \"3\"));\n    assertU(adoc(\"id\", \"4\", \"title\", \"w4\", \"description\", \"w4\", \"popularity\", \"4\"));\n    assertU(adoc(\"id\", \"5\", \"title\", \"w5\", \"description\", \"w5\", \"popularity\", \"5\"));\n    assertU(commit());\n\n    loadFeature(\"popularity\", FieldValueFeature.class.getCanonicalName(), \"test\", \"{\\\"field\\\":\\\"popularity\\\"}\");\n    loadFeature(\"const\", ValueFeature.class.getCanonicalName(), \"test\", \"{\\\"value\\\":5}\");\n    features = new ArrayList<>();\n    features.add(getManagedFeatureStore().getFeatureStore(\"test\").get(\"popularity\"));\n    features.add(getManagedFeatureStore().getFeatureStore(\"test\").get(\"const\"));\n\n    baseModelJson = getModelInJson(\"linear\", LinearModel.class.getCanonicalName(),\n        new String[] {\"popularity\", \"const\"},\n        featureStoreName,\n        \"{\\\"weights\\\":{\\\"popularity\\\":-1.0, \\\"const\\\":1.0}}\");\n    // prepare the base model as a file resource\n    baseModelFile = new File(tmpConfDir, \"baseModel.json\");\n    try (BufferedWriter writer = new BufferedWriter(\n        new OutputStreamWriter(new FileOutputStream(baseModelFile), StandardCharsets.UTF_8))) {\n      writer.write(baseModelJson);\n    }\n    baseModelFile.deleteOnExit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bf344c7efad3160a74c52ef1fd53f535978fc5b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestDefaultWrapperModel#setupBeforeClass().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupBeforeClass() throws Exception {\n    setuptest(false);\n    assertU(adoc(\"id\", \"1\", \"title\", \"w1\", \"description\", \"w1\", \"popularity\", \"1\"));\n    assertU(adoc(\"id\", \"2\", \"title\", \"w2\", \"description\", \"w2\", \"popularity\", \"2\"));\n    assertU(adoc(\"id\", \"3\", \"title\", \"w3\", \"description\", \"w3\", \"popularity\", \"3\"));\n    assertU(adoc(\"id\", \"4\", \"title\", \"w4\", \"description\", \"w4\", \"popularity\", \"4\"));\n    assertU(adoc(\"id\", \"5\", \"title\", \"w5\", \"description\", \"w5\", \"popularity\", \"5\"));\n    assertU(commit());\n\n    loadFeature(\"popularity\", FieldValueFeature.class.getCanonicalName(), \"test\", \"{\\\"field\\\":\\\"popularity\\\"}\");\n    loadFeature(\"const\", ValueFeature.class.getCanonicalName(), \"test\", \"{\\\"value\\\":5}\");\n    features = new ArrayList<>();\n    features.add(getManagedFeatureStore().getFeatureStore(\"test\").get(\"popularity\"));\n    features.add(getManagedFeatureStore().getFeatureStore(\"test\").get(\"const\"));\n\n    baseModelJson = getModelInJson(\"linear\", LinearModel.class.getCanonicalName(),\n        new String[] {\"popularity\", \"const\"},\n        featureStoreName,\n        \"{\\\"weights\\\":{\\\"popularity\\\":-1.0, \\\"const\\\":1.0}}\");\n    // prepare the base model as a file resource\n    baseModelFile = new File(tmpConfDir, \"baseModel.json\");\n    try (BufferedWriter writer = new BufferedWriter(\n        new OutputStreamWriter(new FileOutputStream(baseModelFile), StandardCharsets.UTF_8))) {\n      writer.write(baseModelJson);\n    }\n    baseModelFile.deleteOnExit();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bf344c7efad3160a74c52ef1fd53f535978fc5b7","date":1518199939,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestDefaultWrapperModel#setupBeforeClass().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestDefaultWrapperModel#setupBeforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupBeforeClass() throws Exception {\n    setuptest(false);\n    assertU(adoc(\"id\", \"1\", \"title\", \"w1\", \"description\", \"w1\", \"popularity\", \"1\"));\n    assertU(adoc(\"id\", \"2\", \"title\", \"w2\", \"description\", \"w2\", \"popularity\", \"2\"));\n    assertU(adoc(\"id\", \"3\", \"title\", \"w3\", \"description\", \"w3\", \"popularity\", \"3\"));\n    assertU(adoc(\"id\", \"4\", \"title\", \"w4\", \"description\", \"w4\", \"popularity\", \"4\"));\n    assertU(adoc(\"id\", \"5\", \"title\", \"w5\", \"description\", \"w5\", \"popularity\", \"5\"));\n    assertU(commit());\n\n    loadFeature(\"popularity\", FieldValueFeature.class.getName(), \"test\", \"{\\\"field\\\":\\\"popularity\\\"}\");\n    loadFeature(\"const\", ValueFeature.class.getName(), \"test\", \"{\\\"value\\\":5}\");\n    features = new ArrayList<>();\n    features.add(getManagedFeatureStore().getFeatureStore(\"test\").get(\"popularity\"));\n    features.add(getManagedFeatureStore().getFeatureStore(\"test\").get(\"const\"));\n\n    baseModelJson = getModelInJson(\"linear\", LinearModel.class.getName(),\n        new String[] {\"popularity\", \"const\"},\n        featureStoreName,\n        \"{\\\"weights\\\":{\\\"popularity\\\":-1.0, \\\"const\\\":1.0}}\");\n    // prepare the base model as a file resource\n    baseModelFile = new File(tmpConfDir, \"baseModel.json\");\n    try (BufferedWriter writer = new BufferedWriter(\n        new OutputStreamWriter(new FileOutputStream(baseModelFile), StandardCharsets.UTF_8))) {\n      writer.write(baseModelJson);\n    }\n    baseModelFile.deleteOnExit();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupBeforeClass() throws Exception {\n    setuptest(false);\n    assertU(adoc(\"id\", \"1\", \"title\", \"w1\", \"description\", \"w1\", \"popularity\", \"1\"));\n    assertU(adoc(\"id\", \"2\", \"title\", \"w2\", \"description\", \"w2\", \"popularity\", \"2\"));\n    assertU(adoc(\"id\", \"3\", \"title\", \"w3\", \"description\", \"w3\", \"popularity\", \"3\"));\n    assertU(adoc(\"id\", \"4\", \"title\", \"w4\", \"description\", \"w4\", \"popularity\", \"4\"));\n    assertU(adoc(\"id\", \"5\", \"title\", \"w5\", \"description\", \"w5\", \"popularity\", \"5\"));\n    assertU(commit());\n\n    loadFeature(\"popularity\", FieldValueFeature.class.getCanonicalName(), \"test\", \"{\\\"field\\\":\\\"popularity\\\"}\");\n    loadFeature(\"const\", ValueFeature.class.getCanonicalName(), \"test\", \"{\\\"value\\\":5}\");\n    features = new ArrayList<>();\n    features.add(getManagedFeatureStore().getFeatureStore(\"test\").get(\"popularity\"));\n    features.add(getManagedFeatureStore().getFeatureStore(\"test\").get(\"const\"));\n\n    baseModelJson = getModelInJson(\"linear\", LinearModel.class.getCanonicalName(),\n        new String[] {\"popularity\", \"const\"},\n        featureStoreName,\n        \"{\\\"weights\\\":{\\\"popularity\\\":-1.0, \\\"const\\\":1.0}}\");\n    // prepare the base model as a file resource\n    baseModelFile = new File(tmpConfDir, \"baseModel.json\");\n    try (BufferedWriter writer = new BufferedWriter(\n        new OutputStreamWriter(new FileOutputStream(baseModelFile), StandardCharsets.UTF_8))) {\n      writer.write(baseModelJson);\n    }\n    baseModelFile.deleteOnExit();\n  }\n\n","bugFix":["a03034a121f635bebacef74693404e3273b614a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f906c3206e7eb174774f938416460e39170d819","date":1518202619,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestDefaultWrapperModel#setupBeforeClass().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestDefaultWrapperModel#setupBeforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void setupBeforeClass() throws Exception {\n    setuptest(false);\n    assertU(adoc(\"id\", \"1\", \"title\", \"w1\", \"description\", \"w1\", \"popularity\", \"1\"));\n    assertU(adoc(\"id\", \"2\", \"title\", \"w2\", \"description\", \"w2\", \"popularity\", \"2\"));\n    assertU(adoc(\"id\", \"3\", \"title\", \"w3\", \"description\", \"w3\", \"popularity\", \"3\"));\n    assertU(adoc(\"id\", \"4\", \"title\", \"w4\", \"description\", \"w4\", \"popularity\", \"4\"));\n    assertU(adoc(\"id\", \"5\", \"title\", \"w5\", \"description\", \"w5\", \"popularity\", \"5\"));\n    assertU(commit());\n\n    loadFeature(\"popularity\", FieldValueFeature.class.getName(), \"test\", \"{\\\"field\\\":\\\"popularity\\\"}\");\n    loadFeature(\"const\", ValueFeature.class.getName(), \"test\", \"{\\\"value\\\":5}\");\n    features = new ArrayList<>();\n    features.add(getManagedFeatureStore().getFeatureStore(\"test\").get(\"popularity\"));\n    features.add(getManagedFeatureStore().getFeatureStore(\"test\").get(\"const\"));\n\n    baseModelJson = getModelInJson(\"linear\", LinearModel.class.getName(),\n        new String[] {\"popularity\", \"const\"},\n        featureStoreName,\n        \"{\\\"weights\\\":{\\\"popularity\\\":-1.0, \\\"const\\\":1.0}}\");\n    // prepare the base model as a file resource\n    baseModelFile = new File(tmpConfDir, \"baseModel.json\");\n    try (BufferedWriter writer = new BufferedWriter(\n        new OutputStreamWriter(new FileOutputStream(baseModelFile), StandardCharsets.UTF_8))) {\n      writer.write(baseModelJson);\n    }\n    baseModelFile.deleteOnExit();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupBeforeClass() throws Exception {\n    setuptest(false);\n    assertU(adoc(\"id\", \"1\", \"title\", \"w1\", \"description\", \"w1\", \"popularity\", \"1\"));\n    assertU(adoc(\"id\", \"2\", \"title\", \"w2\", \"description\", \"w2\", \"popularity\", \"2\"));\n    assertU(adoc(\"id\", \"3\", \"title\", \"w3\", \"description\", \"w3\", \"popularity\", \"3\"));\n    assertU(adoc(\"id\", \"4\", \"title\", \"w4\", \"description\", \"w4\", \"popularity\", \"4\"));\n    assertU(adoc(\"id\", \"5\", \"title\", \"w5\", \"description\", \"w5\", \"popularity\", \"5\"));\n    assertU(commit());\n\n    loadFeature(\"popularity\", FieldValueFeature.class.getCanonicalName(), \"test\", \"{\\\"field\\\":\\\"popularity\\\"}\");\n    loadFeature(\"const\", ValueFeature.class.getCanonicalName(), \"test\", \"{\\\"value\\\":5}\");\n    features = new ArrayList<>();\n    features.add(getManagedFeatureStore().getFeatureStore(\"test\").get(\"popularity\"));\n    features.add(getManagedFeatureStore().getFeatureStore(\"test\").get(\"const\"));\n\n    baseModelJson = getModelInJson(\"linear\", LinearModel.class.getCanonicalName(),\n        new String[] {\"popularity\", \"const\"},\n        featureStoreName,\n        \"{\\\"weights\\\":{\\\"popularity\\\":-1.0, \\\"const\\\":1.0}}\");\n    // prepare the base model as a file resource\n    baseModelFile = new File(tmpConfDir, \"baseModel.json\");\n    try (BufferedWriter writer = new BufferedWriter(\n        new OutputStreamWriter(new FileOutputStream(baseModelFile), StandardCharsets.UTF_8))) {\n      writer.write(baseModelJson);\n    }\n    baseModelFile.deleteOnExit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a28c9d9ba74d60642c0d8f0468659a78b9a4bdad","date":1568337084,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestDefaultWrapperModel#setupBeforeClass().mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/model/TestDefaultWrapperModel#setupBeforeClass().mjava","sourceNew":"  @Before\n  public void setupBeforeClass() throws Exception {\n    setuptest(false);\n    assertU(adoc(\"id\", \"1\", \"title\", \"w1\", \"description\", \"w1\", \"popularity\", \"1\"));\n    assertU(adoc(\"id\", \"2\", \"title\", \"w2\", \"description\", \"w2\", \"popularity\", \"2\"));\n    assertU(adoc(\"id\", \"3\", \"title\", \"w3\", \"description\", \"w3\", \"popularity\", \"3\"));\n    assertU(adoc(\"id\", \"4\", \"title\", \"w4\", \"description\", \"w4\", \"popularity\", \"4\"));\n    assertU(adoc(\"id\", \"5\", \"title\", \"w5\", \"description\", \"w5\", \"popularity\", \"5\"));\n    assertU(commit());\n\n    loadFeature(\"popularity\", FieldValueFeature.class.getName(), \"test\", \"{\\\"field\\\":\\\"popularity\\\"}\");\n    loadFeature(\"const\", ValueFeature.class.getName(), \"test\", \"{\\\"value\\\":5}\");\n    features = new ArrayList<>();\n    features.add(getManagedFeatureStore().getFeatureStore(\"test\").get(\"popularity\"));\n    features.add(getManagedFeatureStore().getFeatureStore(\"test\").get(\"const\"));\n\n    final String baseModelJson = getModelInJson(\"linear\", LinearModel.class.getName(),\n        new String[] {\"popularity\", \"const\"},\n        featureStoreName,\n        \"{\\\"weights\\\":{\\\"popularity\\\":-1.0, \\\"const\\\":1.0}}\");\n    // prepare the base model as a file resource\n    baseModelFile = new File(tmpConfDir, \"baseModel.json\");\n    try (BufferedWriter writer = new BufferedWriter(\n        new OutputStreamWriter(new FileOutputStream(baseModelFile), StandardCharsets.UTF_8))) {\n      writer.write(baseModelJson);\n    }\n    baseModelFile.deleteOnExit();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupBeforeClass() throws Exception {\n    setuptest(false);\n    assertU(adoc(\"id\", \"1\", \"title\", \"w1\", \"description\", \"w1\", \"popularity\", \"1\"));\n    assertU(adoc(\"id\", \"2\", \"title\", \"w2\", \"description\", \"w2\", \"popularity\", \"2\"));\n    assertU(adoc(\"id\", \"3\", \"title\", \"w3\", \"description\", \"w3\", \"popularity\", \"3\"));\n    assertU(adoc(\"id\", \"4\", \"title\", \"w4\", \"description\", \"w4\", \"popularity\", \"4\"));\n    assertU(adoc(\"id\", \"5\", \"title\", \"w5\", \"description\", \"w5\", \"popularity\", \"5\"));\n    assertU(commit());\n\n    loadFeature(\"popularity\", FieldValueFeature.class.getName(), \"test\", \"{\\\"field\\\":\\\"popularity\\\"}\");\n    loadFeature(\"const\", ValueFeature.class.getName(), \"test\", \"{\\\"value\\\":5}\");\n    features = new ArrayList<>();\n    features.add(getManagedFeatureStore().getFeatureStore(\"test\").get(\"popularity\"));\n    features.add(getManagedFeatureStore().getFeatureStore(\"test\").get(\"const\"));\n\n    baseModelJson = getModelInJson(\"linear\", LinearModel.class.getName(),\n        new String[] {\"popularity\", \"const\"},\n        featureStoreName,\n        \"{\\\"weights\\\":{\\\"popularity\\\":-1.0, \\\"const\\\":1.0}}\");\n    // prepare the base model as a file resource\n    baseModelFile = new File(tmpConfDir, \"baseModel.json\");\n    try (BufferedWriter writer = new BufferedWriter(\n        new OutputStreamWriter(new FileOutputStream(baseModelFile), StandardCharsets.UTF_8))) {\n      writer.write(baseModelJson);\n    }\n    baseModelFile.deleteOnExit();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bf344c7efad3160a74c52ef1fd53f535978fc5b7":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a03034a121f635bebacef74693404e3273b614a6"],"a28c9d9ba74d60642c0d8f0468659a78b9a4bdad":["3f906c3206e7eb174774f938416460e39170d819"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a03034a121f635bebacef74693404e3273b614a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a28c9d9ba74d60642c0d8f0468659a78b9a4bdad"],"3f906c3206e7eb174774f938416460e39170d819":["1aad05eeff7818b0833c02ac6b743aa72054963b","bf344c7efad3160a74c52ef1fd53f535978fc5b7"]},"commit2Childs":{"bf344c7efad3160a74c52ef1fd53f535978fc5b7":["3f906c3206e7eb174774f938416460e39170d819"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["bf344c7efad3160a74c52ef1fd53f535978fc5b7","3f906c3206e7eb174774f938416460e39170d819"],"a28c9d9ba74d60642c0d8f0468659a78b9a4bdad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1aad05eeff7818b0833c02ac6b743aa72054963b","a03034a121f635bebacef74693404e3273b614a6"],"a03034a121f635bebacef74693404e3273b614a6":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"3f906c3206e7eb174774f938416460e39170d819":["a28c9d9ba74d60642c0d8f0468659a78b9a4bdad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}