{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#runAutomatonFromPrefix(BytesRef).mjava","commits":[{"id":"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89","date":1567784912,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#runAutomatonFromPrefix(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  protected boolean runAutomatonFromPrefix(BytesRef term) {\n    int state = runAutomatonForState(term.bytes, term.offset + blockPrefixLen, term.length - blockPrefixLen, blockPrefixRunAutomatonState);\n    if (state >= 0 && runAutomaton.isAccept(state)) {\n      return true;\n    }\n    if (isBeyondCommonPrefix(term)) {\n      // If the automaton rejects early the term, before the common prefix length,\n      // and if the term rejected byte is lexicographically after the same byte in the common prefix,\n      // then it means the current term is beyond the common prefix.\n      // Exit immediately the enumeration.\n      beyondCommonPrefix = true;\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23fcccd57316410c404dd37307a496ab850efa9c","date":1582897939,"type":4,"author":"Bruno Roustant","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/uniformsplit/IntersectBlockReader#runAutomatonFromPrefix(BytesRef).mjava","sourceNew":null,"sourceOld":"  protected boolean runAutomatonFromPrefix(BytesRef term) {\n    int state = runAutomatonForState(term.bytes, term.offset + blockPrefixLen, term.length - blockPrefixLen, blockPrefixRunAutomatonState);\n    if (state >= 0 && runAutomaton.isAccept(state)) {\n      return true;\n    }\n    if (isBeyondCommonPrefix(term)) {\n      // If the automaton rejects early the term, before the common prefix length,\n      // and if the term rejected byte is lexicographically after the same byte in the common prefix,\n      // then it means the current term is beyond the common prefix.\n      // Exit immediately the enumeration.\n      beyondCommonPrefix = true;\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"23fcccd57316410c404dd37307a496ab850efa9c":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23fcccd57316410c404dd37307a496ab850efa9c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89"],"09dfa411e0e1bbfad83c3e6629cf1fe24a7aed89":["23fcccd57316410c404dd37307a496ab850efa9c"],"23fcccd57316410c404dd37307a496ab850efa9c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}