{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#addPrefixMatch(StringBuilder,String,String,String).mjava","commits":[{"id":"33ba398fa7984fdcb45fd76b87504d5adf7ca5e3","date":1373907993,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#addPrefixMatch(StringBuilder,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Append a matched prefix token, to the provided\n   *  {@code StringBuilder}. \n   *  @param sb {@code StringBuilder} to append to\n   *  @param surface The fragment of the surface form\n   *        (indexed during {@link #build}, corresponding to\n   *        this match\n   *  @param analyzed The analyzed token that matched\n   *  @param prefixToken The prefix of the token that matched\n   */\n  protected void addPrefixMatch(StringBuilder sb, String surface, String analyzed, String prefixToken) {\n    // TODO: apps can try to invert their analysis logic\n    // here, e.g. downcase the two before checking prefix:\n    sb.append(\"<b>\");\n    if (surface.startsWith(prefixToken)) {\n      sb.append(surface.substring(0, prefixToken.length()));\n      sb.append(\"</b>\");\n      sb.append(surface.substring(prefixToken.length()));\n    } else {\n      sb.append(surface);\n      sb.append(\"</b>\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b52d7514e2ea9043764ad70add8ff00e8eccc0c1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#addPrefixMatch(StringBuilder,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  /** Append a matched prefix token, to the provided\n   *  {@code StringBuilder}. \n   *  @param sb {@code StringBuilder} to append to\n   *  @param surface The fragment of the surface form\n   *        (indexed during {@link #build}, corresponding to\n   *        this match\n   *  @param analyzed The analyzed token that matched\n   *  @param prefixToken The prefix of the token that matched\n   */\n  protected void addPrefixMatch(StringBuilder sb, String surface, String analyzed, String prefixToken) {\n    // TODO: apps can try to invert their analysis logic\n    // here, e.g. downcase the two before checking prefix:\n    sb.append(\"<b>\");\n    if (surface.startsWith(prefixToken)) {\n      sb.append(surface.substring(0, prefixToken.length()));\n      sb.append(\"</b>\");\n      sb.append(surface.substring(prefixToken.length()));\n    } else {\n      sb.append(surface);\n      sb.append(\"</b>\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dbf99ca10e1ef2ffbfeb7119d644bf20b267368","date":1379006067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#addPrefixMatch(StringBuilder,String,String,String).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#addPrefixMatch(StringBuilder,String,String,String).mjava","sourceNew":"  /** Called while highlighting a single result, to append a\n   *  matched prefix token, to the provided fragments list.\n   *  @param sb The {@code StringBuilder} to append to\n   *  @param surface The fragment of the surface form\n   *        (indexed during {@link #build}, corresponding to\n   *        this match\n   *  @param analyzed The analyzed token that matched\n   *  @param prefixToken The prefix of the token that matched\n   */\n  protected void addPrefixMatch(StringBuilder sb, String surface, String analyzed, String prefixToken) {\n    // TODO: apps can try to invert their analysis logic\n    // here, e.g. downcase the two before checking prefix:\n    sb.append(\"<b>\");\n    sb.append(surface.substring(0, prefixToken.length()));\n    sb.append(\"</b>\");\n    if (prefixToken.length() < surface.length()) {\n      sb.append(surface.substring(prefixToken.length()));\n    }\n  }\n\n","sourceOld":"  /** Append a matched prefix token, to the provided\n   *  {@code StringBuilder}. \n   *  @param sb {@code StringBuilder} to append to\n   *  @param surface The fragment of the surface form\n   *        (indexed during {@link #build}, corresponding to\n   *        this match\n   *  @param analyzed The analyzed token that matched\n   *  @param prefixToken The prefix of the token that matched\n   */\n  protected void addPrefixMatch(StringBuilder sb, String surface, String analyzed, String prefixToken) {\n    // TODO: apps can try to invert their analysis logic\n    // here, e.g. downcase the two before checking prefix:\n    sb.append(\"<b>\");\n    if (surface.startsWith(prefixToken)) {\n      sb.append(surface.substring(0, prefixToken.length()));\n      sb.append(\"</b>\");\n      sb.append(surface.substring(prefixToken.length()));\n    } else {\n      sb.append(surface);\n      sb.append(\"</b>\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["b52d7514e2ea9043764ad70add8ff00e8eccc0c1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b52d7514e2ea9043764ad70add8ff00e8eccc0c1","date":1415780728,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#addPrefixMatch(StringBuilder,String,String,String).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/AnalyzingInfixSuggester#addPrefixMatch(StringBuilder,String,String,String).mjava","sourceNew":"  /** Called while highlighting a single result, to append a\n   *  matched prefix token, to the provided fragments list.\n   *  @param sb The {@code StringBuilder} to append to\n   *  @param surface The fragment of the surface form\n   *        (indexed during {@link #build}, corresponding to\n   *        this match\n   *  @param analyzed The analyzed token that matched\n   *  @param prefixToken The prefix of the token that matched\n   */\n  protected void addPrefixMatch(StringBuilder sb, String surface, String analyzed, String prefixToken) {\n    // TODO: apps can try to invert their analysis logic\n    // here, e.g. downcase the two before checking prefix:\n    if (prefixToken.length() >= surface.length()) {\n      addWholeMatch(sb, surface, analyzed);\n      return;\n    }\n    sb.append(\"<b>\");\n    sb.append(surface.substring(0, prefixToken.length()));\n    sb.append(\"</b>\");\n    sb.append(surface.substring(prefixToken.length()));\n  }\n\n","sourceOld":"  /** Called while highlighting a single result, to append a\n   *  matched prefix token, to the provided fragments list.\n   *  @param sb The {@code StringBuilder} to append to\n   *  @param surface The fragment of the surface form\n   *        (indexed during {@link #build}, corresponding to\n   *        this match\n   *  @param analyzed The analyzed token that matched\n   *  @param prefixToken The prefix of the token that matched\n   */\n  protected void addPrefixMatch(StringBuilder sb, String surface, String analyzed, String prefixToken) {\n    // TODO: apps can try to invert their analysis logic\n    // here, e.g. downcase the two before checking prefix:\n    sb.append(\"<b>\");\n    sb.append(surface.substring(0, prefixToken.length()));\n    sb.append(\"</b>\");\n    if (prefixToken.length() < surface.length()) {\n      sb.append(surface.substring(prefixToken.length()));\n    }\n  }\n\n","bugFix":["33ba398fa7984fdcb45fd76b87504d5adf7ca5e3","9dbf99ca10e1ef2ffbfeb7119d644bf20b267368"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33ba398fa7984fdcb45fd76b87504d5adf7ca5e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52d7514e2ea9043764ad70add8ff00e8eccc0c1":["9dbf99ca10e1ef2ffbfeb7119d644bf20b267368"],"9dbf99ca10e1ef2ffbfeb7119d644bf20b267368":["33ba398fa7984fdcb45fd76b87504d5adf7ca5e3"],"33ba398fa7984fdcb45fd76b87504d5adf7ca5e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52d7514e2ea9043764ad70add8ff00e8eccc0c1"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","33ba398fa7984fdcb45fd76b87504d5adf7ca5e3"],"b52d7514e2ea9043764ad70add8ff00e8eccc0c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9dbf99ca10e1ef2ffbfeb7119d644bf20b267368":["b52d7514e2ea9043764ad70add8ff00e8eccc0c1"],"33ba398fa7984fdcb45fd76b87504d5adf7ca5e3":["37a0f60745e53927c4c876cfe5b5a58170f0646c","9dbf99ca10e1ef2ffbfeb7119d644bf20b267368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}