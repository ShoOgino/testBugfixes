{"path":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#initMaxMergesAndThreads().mjava","commits":[{"id":"f1db7bd2068060be0b68fcca95c8270c7cb60f6c","date":1419003415,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#initMaxMergesAndThreads().mjava","pathOld":"/dev/null","sourceNew":"  private synchronized void initMaxMergesAndThreads() throws IOException {\n    if (maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {\n      assert writer != null;\n      boolean spins = IOUtils.spins(writer.getDirectory());\n      setDefaultMaxMergesAndThreads(spins);\n      if (verbose()) {\n        message(\"initMaxMergesAndThreads spins=\" + spins + \" maxThreadCount=\" + maxThreadCount + \" maxMergeCount=\" + maxMergeCount);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#initDynamicDefaults(IndexWriter).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/ConcurrentMergeScheduler#initMaxMergesAndThreads().mjava","sourceNew":"  private synchronized void initDynamicDefaults(IndexWriter writer) throws IOException {\n    if (maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {\n      boolean spins = IOUtils.spins(writer.getDirectory());\n      setDefaultMaxMergesAndThreads(spins);\n      if (verbose()) {\n        message(\"initDynamicDefaults spins=\" + spins + \" maxThreadCount=\" + maxThreadCount + \" maxMergeCount=\" + maxMergeCount);\n      }\n    }\n  }\n\n","sourceOld":"  private synchronized void initMaxMergesAndThreads() throws IOException {\n    if (maxThreadCount == AUTO_DETECT_MERGES_AND_THREADS) {\n      assert writer != null;\n      boolean spins = IOUtils.spins(writer.getDirectory());\n      setDefaultMaxMergesAndThreads(spins);\n      if (verbose()) {\n        message(\"initMaxMergesAndThreads spins=\" + spins + \" maxThreadCount=\" + maxThreadCount + \" maxMergeCount=\" + maxMergeCount);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5faf65b6692f15cca0f87bf8666c87899afc619f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1db7bd2068060be0b68fcca95c8270c7cb60f6c"],"f1db7bd2068060be0b68fcca95c8270c7cb60f6c":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}