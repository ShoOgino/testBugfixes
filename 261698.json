{"path":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExampleWithAutoScalingPolicy().mjava","commits":[{"id":"c0ee0c7f6bcf49646748d46aee9383b68eb55c80","date":1502884592,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExampleWithAutoScalingPolicy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInteractiveSolrCloudExampleWithAutoScalingPolicy() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath() + \" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[]{\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt1\";\n\n    // this test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\" + bindPort + \"\\n\" + collectionName + \"\\n2\\n2\\n_default\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\" + bindPort + \"/solr\";\n    String collectionListUrl = solrUrl + \"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\" + collectionName +\n          \"' not found in Solr at: \" + solrUrl + \"; tool output: \" + toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      String setClusterPolicyCommand = \"{\" +\n          \" 'set-cluster-policy': [\" +\n          \"      {'cores':'<10', 'node':'#ANY'},\" +\n          \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"      {'nodeRole':'overseer', 'replica':0}\" +\n          \"    ]\" +\n          \"}\";\n      SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      NamedList<Object> response = cloudClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n      SolrCLI.CreateCollectionTool createCollectionTool = new SolrCLI.CreateCollectionTool(stdoutSim);\n      String[] createArgs = new String[]{\"create_collection\", \"-name\", \"newColl\", \"-configsetsDir\", \"_default\", \"-solrUrl\", solrUrl};\n      createCollectionTool.runTool(\n          SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(createCollectionTool.getOptions()), createArgs));\n      solrUrl = \"http://localhost:\" + bindPort + \"/solr\";\n      collectionListUrl = solrUrl + \"/admin/collections?action=list\";\n      if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, \"newColl\")) {\n        toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n        fail(\"After running Solr cloud example, test collection 'newColl' not found in Solr at: \" + solrUrl + \"; tool output: \" + toolOutput);\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore) {\n        }\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n    deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    deleteArgs = new String[]{\"-name\", \"newColl\", \"-solrUrl\", solrUrl};\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExampleWithAutoScalingPolicy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInteractiveSolrCloudExampleWithAutoScalingPolicy() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath() + \" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[]{\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt1\";\n\n    // this test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\" + bindPort + \"\\n\" + collectionName + \"\\n2\\n2\\n_default\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\" + bindPort + \"/solr\";\n    String collectionListUrl = solrUrl + \"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\" + collectionName +\n          \"' not found in Solr at: \" + solrUrl + \"; tool output: \" + toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      String setClusterPolicyCommand = \"{\" +\n          \" 'set-cluster-policy': [\" +\n          \"      {'cores':'<10', 'node':'#ANY'},\" +\n          \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"      {'nodeRole':'overseer', 'replica':0}\" +\n          \"    ]\" +\n          \"}\";\n      SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      NamedList<Object> response = cloudClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n      SolrCLI.CreateCollectionTool createCollectionTool = new SolrCLI.CreateCollectionTool(stdoutSim);\n      String[] createArgs = new String[]{\"create_collection\", \"-name\", \"newColl\", \"-configsetsDir\", \"_default\", \"-solrUrl\", solrUrl};\n      createCollectionTool.runTool(\n          SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(createCollectionTool.getOptions()), createArgs));\n      solrUrl = \"http://localhost:\" + bindPort + \"/solr\";\n      collectionListUrl = solrUrl + \"/admin/collections?action=list\";\n      if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, \"newColl\")) {\n        toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n        fail(\"After running Solr cloud example, test collection 'newColl' not found in Solr at: \" + solrUrl + \"; tool output: \" + toolOutput);\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore) {\n        }\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n    deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    deleteArgs = new String[]{\"-name\", \"newColl\", \"-solrUrl\", solrUrl};\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExampleWithAutoScalingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExampleWithAutoScalingPolicy().mjava","sourceNew":"  @Test\n  public void testInteractiveSolrCloudExampleWithAutoScalingPolicy() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath() + \" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[]{\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt1\";\n\n    // this test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\" + bindPort + \"\\n\" + collectionName + \"\\n2\\n2\\n_default\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\" + bindPort + \"/solr\";\n    String collectionListUrl = solrUrl + \"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\" + collectionName +\n          \"' not found in Solr at: \" + solrUrl + \"; tool output: \" + toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      String setClusterPolicyCommand = \"{\" +\n          \" 'set-cluster-policy': [\" +\n          \"      {'cores':'<10', 'node':'#ANY'},\" +\n          \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"      {'nodeRole':'overseer', 'replica':0}\" +\n          \"    ]\" +\n          \"}\";\n      SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      NamedList<Object> response = cloudClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n      SolrCLI.CreateCollectionTool createCollectionTool = new SolrCLI.CreateCollectionTool(stdoutSim);\n      String[] createArgs = new String[]{\"create_collection\", \"-name\", \"newColl\", \"-configsetsDir\", \"_default\", \"-solrUrl\", solrUrl};\n      createCollectionTool.runTool(\n          SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(createCollectionTool.getOptions()), createArgs));\n      solrUrl = \"http://localhost:\" + bindPort + \"/solr\";\n      collectionListUrl = solrUrl + \"/admin/collections?action=list\";\n      if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, \"newColl\")) {\n        toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n        fail(\"After running Solr cloud example, test collection 'newColl' not found in Solr at: \" + solrUrl + \"; tool output: \" + toolOutput);\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore) {\n        }\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n    deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    deleteArgs = new String[]{\"-name\", \"newColl\", \"-solrUrl\", solrUrl};\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","sourceOld":"  @Test\n  public void testInteractiveSolrCloudExampleWithAutoScalingPolicy() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath() + \" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[]{\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt1\";\n\n    // this test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\" + bindPort + \"\\n\" + collectionName + \"\\n2\\n2\\n_default\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\" + bindPort + \"/solr\";\n    String collectionListUrl = solrUrl + \"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\" + collectionName +\n          \"' not found in Solr at: \" + solrUrl + \"; tool output: \" + toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      String setClusterPolicyCommand = \"{\" +\n          \" 'set-cluster-policy': [\" +\n          \"      {'cores':'<10', 'node':'#ANY'},\" +\n          \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"      {'nodeRole':'overseer', 'replica':0}\" +\n          \"    ]\" +\n          \"}\";\n      SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      NamedList<Object> response = cloudClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n      SolrCLI.CreateCollectionTool createCollectionTool = new SolrCLI.CreateCollectionTool(stdoutSim);\n      String[] createArgs = new String[]{\"create_collection\", \"-name\", \"newColl\", \"-configsetsDir\", \"_default\", \"-solrUrl\", solrUrl};\n      createCollectionTool.runTool(\n          SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(createCollectionTool.getOptions()), createArgs));\n      solrUrl = \"http://localhost:\" + bindPort + \"/solr\";\n      collectionListUrl = solrUrl + \"/admin/collections?action=list\";\n      if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, \"newColl\")) {\n        toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n        fail(\"After running Solr cloud example, test collection 'newColl' not found in Solr at: \" + solrUrl + \"; tool output: \" + toolOutput);\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore) {\n        }\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n    deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    deleteArgs = new String[]{\"-name\", \"newColl\", \"-solrUrl\", solrUrl};\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExampleWithAutoScalingPolicy().mjava","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExampleWithAutoScalingPolicy().mjava","sourceNew":"  @Test\n  public void testInteractiveSolrCloudExampleWithAutoScalingPolicy() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath() + \" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[]{\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt1\";\n\n    // this test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\" + bindPort + \"\\n\" + collectionName + \"\\n2\\n2\\n_default\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\" + bindPort + \"/solr\";\n    String collectionListUrl = solrUrl + \"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\" + collectionName +\n          \"' not found in Solr at: \" + solrUrl + \"; tool output: \" + toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      String setClusterPolicyCommand = \"{\" +\n          \" 'set-cluster-policy': [\" +\n          \"      {'cores':'<10', 'node':'#ANY'},\" +\n          \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"      {'nodeRole':'overseer', 'replica':0}\" +\n          \"    ]\" +\n          \"}\";\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      NamedList<Object> response = cloudClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n      SolrCLI.CreateCollectionTool createCollectionTool = new SolrCLI.CreateCollectionTool(stdoutSim);\n      String[] createArgs = new String[]{\"create_collection\", \"-name\", \"newColl\", \"-configsetsDir\", \"_default\", \"-solrUrl\", solrUrl};\n      createCollectionTool.runTool(\n          SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(createCollectionTool.getOptions()), createArgs));\n      solrUrl = \"http://localhost:\" + bindPort + \"/solr\";\n      collectionListUrl = solrUrl + \"/admin/collections?action=list\";\n      if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, \"newColl\")) {\n        toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n        fail(\"After running Solr cloud example, test collection 'newColl' not found in Solr at: \" + solrUrl + \"; tool output: \" + toolOutput);\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore) {\n        }\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n    deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    deleteArgs = new String[]{\"-name\", \"newColl\", \"-solrUrl\", solrUrl};\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","sourceOld":"  @Test\n  public void testInteractiveSolrCloudExampleWithAutoScalingPolicy() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath() + \" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[]{\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt1\";\n\n    // this test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\" + bindPort + \"\\n\" + collectionName + \"\\n2\\n2\\n_default\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\" + bindPort + \"/solr\";\n    String collectionListUrl = solrUrl + \"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\" + collectionName +\n          \"' not found in Solr at: \" + solrUrl + \"; tool output: \" + toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      String setClusterPolicyCommand = \"{\" +\n          \" 'set-cluster-policy': [\" +\n          \"      {'cores':'<10', 'node':'#ANY'},\" +\n          \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"      {'nodeRole':'overseer', 'replica':0}\" +\n          \"    ]\" +\n          \"}\";\n      SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      NamedList<Object> response = cloudClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n      SolrCLI.CreateCollectionTool createCollectionTool = new SolrCLI.CreateCollectionTool(stdoutSim);\n      String[] createArgs = new String[]{\"create_collection\", \"-name\", \"newColl\", \"-configsetsDir\", \"_default\", \"-solrUrl\", solrUrl};\n      createCollectionTool.runTool(\n          SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(createCollectionTool.getOptions()), createArgs));\n      solrUrl = \"http://localhost:\" + bindPort + \"/solr\";\n      collectionListUrl = solrUrl + \"/admin/collections?action=list\";\n      if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, \"newColl\")) {\n        toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n        fail(\"After running Solr cloud example, test collection 'newColl' not found in Solr at: \" + solrUrl + \"; tool output: \" + toolOutput);\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore) {\n        }\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n    deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    deleteArgs = new String[]{\"-name\", \"newColl\", \"-solrUrl\", solrUrl};\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/util/TestSolrCLIRunExample#testInteractiveSolrCloudExampleWithAutoScalingPolicy().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testInteractiveSolrCloudExampleWithAutoScalingPolicy() throws Exception {\n    File solrHomeDir = new File(ExternalPaths.SERVER_HOME);\n    if (!solrHomeDir.isDirectory())\n      fail(solrHomeDir.getAbsolutePath() + \" not found and is required to run this test!\");\n\n    Path tmpDir = createTempDir();\n    File solrExampleDir = tmpDir.toFile();\n\n    File solrServerDir = solrHomeDir.getParentFile();\n\n    String[] toolArgs = new String[]{\n        \"-example\", \"cloud\",\n        \"-serverDir\", solrServerDir.getAbsolutePath(),\n        \"-exampleDir\", solrExampleDir.getAbsolutePath()\n    };\n\n    int bindPort = -1;\n    try (ServerSocket socket = new ServerSocket(0)) {\n      bindPort = socket.getLocalPort();\n    }\n\n    String collectionName = \"testCloudExamplePrompt1\";\n\n    // this test only support launching one SolrCloud node due to how MiniSolrCloudCluster works\n    // and the need for setting the host and port system properties ...\n    String userInput = \"1\\n\" + bindPort + \"\\n\" + collectionName + \"\\n2\\n2\\n_default\\n\";\n\n    // simulate user input from stdin\n    InputStream userInputSim = new ByteArrayInputStream(userInput.getBytes(StandardCharsets.UTF_8));\n\n    // capture tool output to stdout\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream stdoutSim = new PrintStream(baos, true, StandardCharsets.UTF_8.name());\n\n    RunExampleExecutor executor = new RunExampleExecutor(stdoutSim);\n    closeables.add(executor);\n\n    SolrCLI.RunExampleTool tool = new SolrCLI.RunExampleTool(executor, userInputSim, stdoutSim);\n    try {\n      tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), toolArgs));\n    } catch (Exception e) {\n      System.err.println(\"RunExampleTool failed due to: \" + e +\n          \"; stdout from tool prior to failure: \" + baos.toString(StandardCharsets.UTF_8.name()));\n      throw e;\n    }\n\n    String toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n\n    // verify Solr is running on the expected port and verify the collection exists\n    String solrUrl = \"http://localhost:\" + bindPort + \"/solr\";\n    String collectionListUrl = solrUrl + \"/admin/collections?action=list\";\n    if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, collectionName)) {\n      fail(\"After running Solr cloud example, test collection '\" + collectionName +\n          \"' not found in Solr at: \" + solrUrl + \"; tool output: \" + toolOutput);\n    }\n\n    // index some docs - to verify all is good for both shards\n    CloudSolrClient cloudClient = null;\n\n    try {\n      cloudClient = getCloudSolrClient(executor.solrCloudCluster.getZkServer().getZkAddress());\n      String setClusterPolicyCommand = \"{\" +\n          \" 'set-cluster-policy': [\" +\n          \"      {'cores':'<10', 'node':'#ANY'},\" +\n          \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n          \"      {'nodeRole':'overseer', 'replica':0}\" +\n          \"    ]\" +\n          \"}\";\n      @SuppressWarnings({\"rawtypes\"})\n      SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n      NamedList<Object> response = cloudClient.request(req);\n      assertEquals(response.get(\"result\").toString(), \"success\");\n      SolrCLI.CreateCollectionTool createCollectionTool = new SolrCLI.CreateCollectionTool(stdoutSim);\n      String[] createArgs = new String[]{\"create_collection\", \"-name\", \"newColl\", \"-configsetsDir\", \"_default\", \"-solrUrl\", solrUrl};\n      createCollectionTool.runTool(\n          SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(createCollectionTool.getOptions()), createArgs));\n      solrUrl = \"http://localhost:\" + bindPort + \"/solr\";\n      collectionListUrl = solrUrl + \"/admin/collections?action=list\";\n      if (!SolrCLI.safeCheckCollectionExists(collectionListUrl, \"newColl\")) {\n        toolOutput = baos.toString(StandardCharsets.UTF_8.name());\n        fail(\"After running Solr cloud example, test collection 'newColl' not found in Solr at: \" + solrUrl + \"; tool output: \" + toolOutput);\n      }\n    } finally {\n      if (cloudClient != null) {\n        try {\n          cloudClient.close();\n        } catch (Exception ignore) {\n        }\n      }\n    }\n\n    File node1SolrHome = new File(solrExampleDir, \"cloud/node1/solr\");\n    if (!node1SolrHome.isDirectory()) {\n      fail(node1SolrHome.getAbsolutePath()+\" not found! run cloud example failed; tool output: \"+toolOutput);\n    }\n\n    // delete the collection\n    SolrCLI.DeleteTool deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    String[] deleteArgs = new String[] { \"-name\", collectionName, \"-solrUrl\", solrUrl };\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n    deleteTool = new SolrCLI.DeleteTool(stdoutSim);\n    deleteArgs = new String[]{\"-name\", \"newColl\", \"-solrUrl\", solrUrl};\n    deleteTool.runTool(\n        SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(deleteTool.getOptions()), deleteArgs));\n\n    // dump all the output written by the SolrCLI commands to stdout\n    //System.out.println(toolOutput);\n\n    // stop the test instance\n    executor.execute(org.apache.commons.exec.CommandLine.parse(\"bin/solr stop -p \"+bindPort));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c0ee0c7f6bcf49646748d46aee9383b68eb55c80"],"3f504512a03d978990cbff30db0522b354e846db":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89948af0461fead48f44ba8fb7866f107ce83f22":["c0ee0c7f6bcf49646748d46aee9383b68eb55c80"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"e98520789adb1d5ad05afb4956eca0944a929688":["89948af0461fead48f44ba8fb7866f107ce83f22"],"c0ee0c7f6bcf49646748d46aee9383b68eb55c80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":[],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","c0ee0c7f6bcf49646748d46aee9383b68eb55c80"],"89948af0461fead48f44ba8fb7866f107ce83f22":["e98520789adb1d5ad05afb4956eca0944a929688"],"c0ee0c7f6bcf49646748d46aee9383b68eb55c80":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","89948af0461fead48f44ba8fb7866f107ce83f22"],"e98520789adb1d5ad05afb4956eca0944a929688":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}