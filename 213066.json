{"path":"src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","commits":[{"id":"ccc767efe2b07067c8983a4a20509d551158025d","date":1166548097,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","pathOld":"/dev/null","sourceNew":"  public static void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"460ea70a086b1e40166cc236947edc7e52a3ddf9","date":1217405516,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","pathOld":"src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","sourceNew":"  public static void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n  }\n\n","sourceOld":"  public static void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb04b610ed800cee9bf5697f6462cf645d4f4866","date":1238616464,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","pathOld":"src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","sourceNew":"  public static void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","sourceOld":"  public static void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","pathOld":"src/test/org/apache/solr/util/TestUtils#testSplitEscaping().mjava","sourceNew":"  public static void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","sourceOld":"  public static void testSplitEscaping() {\n    List<String> arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\r\\\\n:\\\\t\\\\f\\\\b\", \":\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\r\\n\",arr.get(0));\n    assertEquals(\"\\t\\f\\b\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\r\\\\n \\\\t\\\\f\\\\b\", false);\n    assertEquals(2,arr.size());\n    assertEquals(\"\\\\r\\\\n\",arr.get(0));\n    assertEquals(\"\\\\t\\\\f\\\\b\",arr.get(1));\n\n    arr = StrUtils.splitSmart(\"\\\\:foo\\\\::\\\\:bar\\\\:\", \":\", true);\n    assertEquals(2,arr.size());\n    assertEquals(\":foo:\",arr.get(0));\n    assertEquals(\":bar:\",arr.get(1));\n\n    arr = StrUtils.splitWS(\"\\\\ foo\\\\  \\\\ bar\\\\ \", true);\n    assertEquals(2,arr.size());\n    assertEquals(\" foo \",arr.get(0));\n    assertEquals(\" bar \",arr.get(1));\n    \n    arr = StrUtils.splitFileNames(\"/h/s,/h/\\\\,s,\");\n    assertEquals(2,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n    assertEquals(\"/h/,s\",arr.get(1));\n\n    arr = StrUtils.splitFileNames(\"/h/s\");\n    assertEquals(1,arr.size());\n    assertEquals(\"/h/s\",arr.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"460ea70a086b1e40166cc236947edc7e52a3ddf9":["ccc767efe2b07067c8983a4a20509d551158025d"],"fb04b610ed800cee9bf5697f6462cf645d4f4866":["460ea70a086b1e40166cc236947edc7e52a3ddf9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ccc767efe2b07067c8983a4a20509d551158025d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["fb04b610ed800cee9bf5697f6462cf645d4f4866"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"460ea70a086b1e40166cc236947edc7e52a3ddf9":["fb04b610ed800cee9bf5697f6462cf645d4f4866"],"fb04b610ed800cee9bf5697f6462cf645d4f4866":["ad94625fb8d088209f46650c8097196fec67f00c"],"ccc767efe2b07067c8983a4a20509d551158025d":["460ea70a086b1e40166cc236947edc7e52a3ddf9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ccc767efe2b07067c8983a4a20509d551158025d"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}