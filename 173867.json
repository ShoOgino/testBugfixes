{"path":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter#stem(CharSequence).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter#stem(CharSequence).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter#stem(CharSequence).mjava","sourceNew":"\t\t\tpublic CharSequence stem(CharSequence word) {\r\n\t\t\t\tif (word.length() > buffer.length) {\r\n\t\t\t\t\tbuffer = new char[word.length()];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (int i = 0; i < word.length(); i++) {\r\n\t\t\t\t\tbuffer[i] = word.charAt(i);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tint newLen = normalizer.normalize(buffer, word.length());\r\n\t\t\t\tnewLen = delegate.stem(buffer, newLen);\r\n\r\n\t\t\t\tif (newLen != word.length() || !equals(buffer, newLen, word)) {\r\n\t\t\t\t\treturn CharBuffer.wrap(buffer, 0, newLen);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Same-same.\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\n","sourceOld":"\t\t\tpublic CharSequence stem(CharSequence word) {\r\n\t\t\t\tif (word.length() > buffer.length) {\r\n\t\t\t\t\tbuffer = new char[word.length()];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (int i = 0; i < word.length(); i++) {\r\n\t\t\t\t\tbuffer[i] = word.charAt(i);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tint newLen = normalizer.normalize(buffer, word.length());\r\n\t\t\t\tnewLen = delegate.stem(buffer, newLen);\r\n\r\n\t\t\t\tif (newLen != word.length() || !equals(buffer, newLen, word)) {\r\n\t\t\t\t\treturn CharBuffer.wrap(buffer, 0, newLen);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Same-same.\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter#stem(CharSequence).mjava","pathOld":"solr/contrib/clustering/src/main/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter#stem(CharSequence).mjava","sourceNew":"\t\t\tpublic CharSequence stem(CharSequence word) {\r\n\t\t\t\tif (word.length() > buffer.length) {\r\n\t\t\t\t\tbuffer = new char[word.length()];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (int i = 0; i < word.length(); i++) {\r\n\t\t\t\t\tbuffer[i] = word.charAt(i);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tint newLen = normalizer.normalize(buffer, word.length());\r\n\t\t\t\tnewLen = delegate.stem(buffer, newLen);\r\n\r\n\t\t\t\tif (newLen != word.length() || !equals(buffer, newLen, word)) {\r\n\t\t\t\t\treturn CharBuffer.wrap(buffer, 0, newLen);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Same-same.\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\n","sourceOld":"\t\t\tpublic CharSequence stem(CharSequence word) {\r\n\t\t\t\tif (word.length() > buffer.length) {\r\n\t\t\t\t\tbuffer = new char[word.length()];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (int i = 0; i < word.length(); i++) {\r\n\t\t\t\t\tbuffer[i] = word.charAt(i);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tint newLen = normalizer.normalize(buffer, word.length());\r\n\t\t\t\tnewLen = delegate.stem(buffer, newLen);\r\n\r\n\t\t\t\tif (newLen != word.length() || !equals(buffer, newLen, word)) {\r\n\t\t\t\t\treturn CharBuffer.wrap(buffer, 0, newLen);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Same-same.\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef9e7ba08c124ce913ef60415c21ae1ca833d211","date":1323446079,"type":3,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter#stem(CharSequence).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter#stem(CharSequence).mjava","sourceNew":"      public CharSequence stem(CharSequence word) {\r\n        if (word.length() > buffer.length) {\r\n          buffer = new char[word.length()];\r\n        }\r\n\r\n        for (int i = 0; i < word.length(); i++) {\r\n          buffer[i] = word.charAt(i);\r\n        }\r\n\r\n        int newLen = normalizer.normalize(buffer, word.length());\r\n        newLen = delegate.stem(buffer, newLen);\r\n\r\n        if (newLen != word.length() || !equals(buffer, newLen, word)) {\r\n          return CharBuffer.wrap(buffer, 0, newLen);\r\n        }\r\n\r\n        // Same-same.\r\n        return null;\r\n      }\r\n\n","sourceOld":"\t\t\tpublic CharSequence stem(CharSequence word) {\r\n\t\t\t\tif (word.length() > buffer.length) {\r\n\t\t\t\t\tbuffer = new char[word.length()];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (int i = 0; i < word.length(); i++) {\r\n\t\t\t\t\tbuffer[i] = word.charAt(i);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tint newLen = normalizer.normalize(buffer, word.length());\r\n\t\t\t\tnewLen = delegate.stem(buffer, newLen);\r\n\r\n\t\t\t\tif (newLen != word.length() || !equals(buffer, newLen, word)) {\r\n\t\t\t\t\treturn CharBuffer.wrap(buffer, 0, newLen);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Same-same.\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter#stem(CharSequence).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter#stem(CharSequence).mjava","sourceNew":"      public CharSequence stem(CharSequence word) {\r\n        if (word.length() > buffer.length) {\r\n          buffer = new char[word.length()];\r\n        }\r\n\r\n        for (int i = 0; i < word.length(); i++) {\r\n          buffer[i] = word.charAt(i);\r\n        }\r\n\r\n        int newLen = normalizer.normalize(buffer, word.length());\r\n        newLen = delegate.stem(buffer, newLen);\r\n\r\n        if (newLen != word.length() || !equals(buffer, newLen, word)) {\r\n          return CharBuffer.wrap(buffer, 0, newLen);\r\n        }\r\n\r\n        // Same-same.\r\n        return null;\r\n      }\r\n\n","sourceOld":"\t\t\tpublic CharSequence stem(CharSequence word) {\r\n\t\t\t\tif (word.length() > buffer.length) {\r\n\t\t\t\t\tbuffer = new char[word.length()];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (int i = 0; i < word.length(); i++) {\r\n\t\t\t\t\tbuffer[i] = word.charAt(i);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tint newLen = normalizer.normalize(buffer, word.length());\r\n\t\t\t\tnewLen = delegate.stem(buffer, newLen);\r\n\r\n\t\t\t\tif (newLen != word.length() || !equals(buffer, newLen, word)) {\r\n\t\t\t\t\treturn CharBuffer.wrap(buffer, 0, newLen);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Same-same.\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","date":1332766738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter#stem(CharSequence).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter#stem(CharSequence).mjava","sourceNew":"      public CharSequence stem(CharSequence word) {\n        if (word.length() > buffer.length) {\n          buffer = new char[word.length()];\n        }\n\n        for (int i = 0; i < word.length(); i++) {\n          buffer[i] = word.charAt(i);\n        }\n\n        int newLen = normalizer.normalize(buffer, word.length());\n        newLen = delegate.stem(buffer, newLen);\n\n        if (newLen != word.length() || !equals(buffer, newLen, word)) {\n          return CharBuffer.wrap(buffer, 0, newLen);\n        }\n\n        // Same-same.\n        return null;\n      }\n\n","sourceOld":"      public CharSequence stem(CharSequence word) {\r\n        if (word.length() > buffer.length) {\r\n          buffer = new char[word.length()];\r\n        }\r\n\r\n        for (int i = 0; i < word.length(); i++) {\r\n          buffer[i] = word.charAt(i);\r\n        }\r\n\r\n        int newLen = normalizer.normalize(buffer, word.length());\r\n        newLen = delegate.stem(buffer, newLen);\r\n\r\n        if (newLen != word.length() || !equals(buffer, newLen, word)) {\r\n          return CharBuffer.wrap(buffer, 0, newLen);\r\n        }\r\n\r\n        // Same-same.\r\n        return null;\r\n      }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter#stem(CharSequence).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter#stem(CharSequence).mjava","sourceNew":"      @Override\n      public CharSequence stem(CharSequence word) {\n        if (word.length() > buffer.length) {\n          buffer = new char[word.length()];\n        }\n\n        for (int i = 0; i < word.length(); i++) {\n          buffer[i] = word.charAt(i);\n        }\n\n        int newLen = normalizer.normalize(buffer, word.length());\n        newLen = delegate.stem(buffer, newLen);\n\n        if (newLen != word.length() || !equals(buffer, newLen, word)) {\n          return CharBuffer.wrap(buffer, 0, newLen);\n        }\n\n        // Same-same.\n        return null;\n      }\n\n","sourceOld":"      public CharSequence stem(CharSequence word) {\n        if (word.length() > buffer.length) {\n          buffer = new char[word.length()];\n        }\n\n        for (int i = 0; i < word.length(); i++) {\n          buffer[i] = word.charAt(i);\n        }\n\n        int newLen = normalizer.normalize(buffer, word.length());\n        newLen = delegate.stem(buffer, newLen);\n\n        if (newLen != word.length() || !equals(buffer, newLen, word)) {\n          return CharBuffer.wrap(buffer, 0, newLen);\n        }\n\n        // Same-same.\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter#stem(CharSequence).mjava","pathOld":"solr/contrib/clustering/src/java/org/apache/solr/handler/clustering/carrot2/LuceneCarrot2StemmerFactory.ArabicStemmerFactory.LuceneStemmerAdapter#stem(CharSequence).mjava","sourceNew":"      @Override\n      public CharSequence stem(CharSequence word) {\n        if (word.length() > buffer.length) {\n          buffer = new char[word.length()];\n        }\n\n        for (int i = 0; i < word.length(); i++) {\n          buffer[i] = word.charAt(i);\n        }\n\n        int newLen = normalizer.normalize(buffer, word.length());\n        newLen = delegate.stem(buffer, newLen);\n\n        if (newLen != word.length() || !equals(buffer, newLen, word)) {\n          return CharBuffer.wrap(buffer, 0, newLen);\n        }\n\n        // Same-same.\n        return null;\n      }\n\n","sourceOld":"      public CharSequence stem(CharSequence word) {\n        if (word.length() > buffer.length) {\n          buffer = new char[word.length()];\n        }\n\n        for (int i = 0; i < word.length(); i++) {\n          buffer[i] = word.charAt(i);\n        }\n\n        int newLen = normalizer.normalize(buffer, word.length());\n        newLen = delegate.stem(buffer, newLen);\n\n        if (newLen != word.length() || !equals(buffer, newLen, word)) {\n          return CharBuffer.wrap(buffer, 0, newLen);\n        }\n\n        // Same-same.\n        return null;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","7530de27b87b961b51f01bd1299b7004d46e8823"],"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["c26f00b574427b55127e869b935845554afde1fa","ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"ef9e7ba08c124ce913ef60415c21ae1ca833d211":["c26f00b574427b55127e869b935845554afde1fa"],"7530de27b87b961b51f01bd1299b7004d46e8823":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7530de27b87b961b51f01bd1299b7004d46e8823"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","ef9e7ba08c124ce913ef60415c21ae1ca833d211"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":[],"ef9e7ba08c124ce913ef60415c21ae1ca833d211":["5a002afd8b1e0d1bbf0debb2ff740b5e77ed8b23","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}