{"path":"src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","commits":[{"id":"5712975970a595c28f1988efd007e1b8a617a92f","date":1219499238,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"/dev/null","sourceNew":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      r3.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      r3.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new StandardAnalyzer(), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      r3.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      r3.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      r3.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      r3.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      r3.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND));\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new StandardAnalyzer(TEST_VERSION_CURRENT))\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new StandardAnalyzer(TEST_VERSION_CURRENT), false, IndexWriter.MaxFieldLength.LIMITED);\n      writer.close();\n\n      r3.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexReader#testReadOnly().mjava","sourceNew":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND));\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new StandardAnalyzer(TEST_VERSION_CURRENT))\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n    }\n\n","sourceOld":"    public void testReadOnly() throws Throwable {\n      RAMDirectory d = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(d, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new StandardAnalyzer(TEST_VERSION_CURRENT)));\n      addDocumentWithFields(writer);\n      writer.commit();\n      addDocumentWithFields(writer);\n      writer.close();\n\n      IndexReader r = IndexReader.open(d, true);\n      try {\n        r.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n      \n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND));\n      addDocumentWithFields(writer);\n      writer.close();\n\n      // Make sure reopen is still readonly:\n      IndexReader r2 = r.reopen();\n      r.close();\n\n      assertFalse(r == r2);\n\n      try {\n        r2.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n        new StandardAnalyzer(TEST_VERSION_CURRENT))\n        .setOpenMode(OpenMode.APPEND));\n      writer.optimize();\n      writer.close();\n\n      // Make sure reopen to a single segment is still readonly:\n      IndexReader r3 = r2.reopen();\n      r2.close();\n      \n      assertFalse(r == r2);\n\n      try {\n        r3.deleteDocument(0);\n        fail();\n      } catch (UnsupportedOperationException uoe) {\n        // expected\n      }\n\n      // Make sure write lock isn't held\n      writer = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new StandardAnalyzer(TEST_VERSION_CURRENT))\n      .setOpenMode(OpenMode.APPEND));\n      writer.close();\n\n      r3.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"5712975970a595c28f1988efd007e1b8a617a92f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["5712975970a595c28f1988efd007e1b8a617a92f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5712975970a595c28f1988efd007e1b8a617a92f":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5712975970a595c28f1988efd007e1b8a617a92f"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}