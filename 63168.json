{"path":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean).mjava","commits":[{"id":"0d1728ac6bfc0cea61f3e27436b418295d9982a3","date":1491423806,"type":1,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean,boolean).mjava","sourceNew":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText,\n                                boolean quoted, boolean fieldAutoGenPhraseQueries, boolean fieldEnableGraphQueries) \n      throws SyntaxError {\n    BooleanClause.Occur occur = operator == Operator.AND ? BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n    setEnableGraphQueries(fieldEnableGraphQueries);\n    Query query = createFieldQuery(analyzer, occur, field, queryText,\n        quoted || fieldAutoGenPhraseQueries || autoGeneratePhraseQueries, phraseSlop);\n    setEnableGraphQueries(true); // reset back to default\n    return query;\n  }\n\n","sourceOld":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText,\n                                boolean quoted, boolean fieldAutoGenPhraseQueries)  throws SyntaxError {\n    BooleanClause.Occur occur = operator == Operator.AND ? BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n    return createFieldQuery(analyzer, occur, field, queryText,\n        quoted || fieldAutoGenPhraseQueries || autoGeneratePhraseQueries, phraseSlop);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText,\n                                boolean quoted, boolean fieldAutoGenPhraseQueries, boolean fieldEnableGraphQueries)\n      throws SyntaxError {\n    BooleanClause.Occur occur = operator == Operator.AND ? BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n    setEnableGraphQueries(fieldEnableGraphQueries);\n    Query query = createFieldQuery(analyzer, occur, field, queryText,\n        quoted || fieldAutoGenPhraseQueries || autoGeneratePhraseQueries, phraseSlop);\n    setEnableGraphQueries(true); // reset back to default\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean).mjava","sourceNew":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText,\n                                boolean quoted, boolean fieldAutoGenPhraseQueries, boolean fieldEnableGraphQueries) \n      throws SyntaxError {\n    BooleanClause.Occur occur = operator == Operator.AND ? BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n    setEnableGraphQueries(fieldEnableGraphQueries);\n    Query query = createFieldQuery(analyzer, occur, field, queryText,\n        quoted || fieldAutoGenPhraseQueries || autoGeneratePhraseQueries, phraseSlop);\n    setEnableGraphQueries(true); // reset back to default\n    return query;\n  }\n\n","sourceOld":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText,\n                                boolean quoted, boolean fieldAutoGenPhraseQueries, boolean fieldEnableGraphQueries)\n      throws SyntaxError {\n    BooleanClause.Occur occur = operator == Operator.AND ? BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n    setEnableGraphQueries(fieldEnableGraphQueries);\n    Query query = createFieldQuery(analyzer, occur, field, queryText,\n        quoted || fieldAutoGenPhraseQueries || autoGeneratePhraseQueries, phraseSlop);\n    setEnableGraphQueries(true); // reset back to default\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47d74fab5d64854ddafa81b65ed399b192f2d947","date":1512411916,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean,SynonymQueryStyle).mjava","pathOld":"solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase#newFieldQuery(Analyzer,String,String,boolean,boolean,boolean).mjava","sourceNew":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText,\n                                boolean quoted, boolean fieldAutoGenPhraseQueries, boolean fieldEnableGraphQueries,\n                                SynonymQueryStyle synonymQueryStyle)\n      throws SyntaxError {\n    BooleanClause.Occur occur = operator == Operator.AND ? BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n    setEnableGraphQueries(fieldEnableGraphQueries);\n    setSynonymQueryStyle(synonymQueryStyle);\n    Query query = createFieldQuery(analyzer, occur, field, queryText,\n        quoted || fieldAutoGenPhraseQueries || autoGeneratePhraseQueries, phraseSlop);\n    setEnableGraphQueries(true); // reset back to default\n    setSynonymQueryStyle(AS_SAME_TERM);\n    return query;\n  }\n\n","sourceOld":"  protected Query newFieldQuery(Analyzer analyzer, String field, String queryText,\n                                boolean quoted, boolean fieldAutoGenPhraseQueries, boolean fieldEnableGraphQueries) \n      throws SyntaxError {\n    BooleanClause.Occur occur = operator == Operator.AND ? BooleanClause.Occur.MUST : BooleanClause.Occur.SHOULD;\n    setEnableGraphQueries(fieldEnableGraphQueries);\n    Query query = createFieldQuery(analyzer, occur, field, queryText,\n        quoted || fieldAutoGenPhraseQueries || autoGeneratePhraseQueries, phraseSlop);\n    setEnableGraphQueries(true); // reset back to default\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0d1728ac6bfc0cea61f3e27436b418295d9982a3"],"47d74fab5d64854ddafa81b65ed399b192f2d947":["0d1728ac6bfc0cea61f3e27436b418295d9982a3"],"0d1728ac6bfc0cea61f3e27436b418295d9982a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["47d74fab5d64854ddafa81b65ed399b192f2d947"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"47d74fab5d64854ddafa81b65ed399b192f2d947":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d1728ac6bfc0cea61f3e27436b418295d9982a3":["e9017cf144952056066919f1ebc7897ff9bd71b1","47d74fab5d64854ddafa81b65ed399b192f2d947"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","0d1728ac6bfc0cea61f3e27436b418295d9982a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}