{"path":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","commits":[{"id":"94df854a0d36420ddbf7a4a21330bd00c2354017","date":1384538000,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrCore core = cc.getCore(\"core1\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/file\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"Testing rewrite of schema.xml file.\" ) );\n      //streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n\n      params = params(\"op\", \"write\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"));\n      assertEquals(\"Schema contents should have changed!\", \"Testing rewrite of schema.xml file.\", contents);\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"));\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      core.close();\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"174cf555ccf6aeb63c765897000c8214a84fe4f1","date":1384563221,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","sourceNew":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrCore core = cc.getCore(\"core1\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/file\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"Testing rewrite of schema.xml file.\" ) );\n      //streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n\n      params = params(\"op\", \"write\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"));\n      assertEquals(\"Schema contents should have changed!\", \"Testing rewrite of schema.xml file.\", contents);\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"));\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n      core.execute(handler, locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n      core.close();\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrCore core = cc.getCore(\"core1\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/file\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"Testing rewrite of schema.xml file.\" ) );\n      //streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n\n      params = params(\"op\", \"write\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"));\n      assertEquals(\"Schema contents should have changed!\", \"Testing rewrite of schema.xml file.\", contents);\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"));\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      core.close();\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8b51e04dc58a1002908e3caba8f5eb8ef59abe00","date":1384906513,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","sourceNew":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrCore core = cc.getCore(\"core1\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/file\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"Testing rewrite of schema.xml file.\" ) );\n\n      params = params(\"op\", \"test\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      assertTrue(\"Schema should have caused core reload to fail!\",\n          rsp.getException().getMessage().indexOf(\"SAXParseException\") != -1);\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"));\n      assertFalse(\"Schema contents should NOT have changed!\", contents.contains(\"Testing rewrite of schema.xml file.\"));\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"));\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n      core.execute(handler, locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n      core.close();\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrCore core = cc.getCore(\"core1\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/file\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"Testing rewrite of schema.xml file.\" ) );\n      //streams.add( new ContentStreamBase.StringStream( \"there\" ) );\n\n      params = params(\"op\", \"write\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"));\n      assertEquals(\"Schema contents should have changed!\", \"Testing rewrite of schema.xml file.\", contents);\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"));\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n      core.execute(handler, locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n      core.close();\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3","date":1385076439,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","sourceNew":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrCore core = cc.getCore(\"core1\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/file\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"Testing rewrite of schema.xml file.\" ) );\n\n      params = params(\"op\", \"test\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      assertTrue(\"Schema should have caused core reload to fail!\",\n          rsp.getException().getMessage().indexOf(\"SAXParseException\") != -1);\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"), Charsets.UTF_8.toString());\n      assertFalse(\"Schema contents should NOT have changed!\", contents.contains(\"Testing rewrite of schema.xml file.\"));\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"), Charsets.UTF_8.toString());\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n      core.execute(handler, locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n      core.close();\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrCore core = cc.getCore(\"core1\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/file\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"Testing rewrite of schema.xml file.\" ) );\n\n      params = params(\"op\", \"test\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      assertTrue(\"Schema should have caused core reload to fail!\",\n          rsp.getException().getMessage().indexOf(\"SAXParseException\") != -1);\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"));\n      assertFalse(\"Schema contents should NOT have changed!\", contents.contains(\"Testing rewrite of schema.xml file.\"));\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"));\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n      core.execute(handler, locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n      core.close();\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","bugFix":["94df854a0d36420ddbf7a4a21330bd00c2354017"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7455ee5c847b2ee7e44656e4218141f62dacb572","date":1386032125,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","sourceNew":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrCore core = cc.getCore(\"core1\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/fileedit\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add(new ContentStreamBase.StringStream(\"Testing rewrite of schema.xml file.\" ) );\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n      String badConf = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"), \"UTF-8\").replace(\"</dataDir>\", \"\");\n\n      params = params(\"op\", \"write\", \"file\", \"solrconfig.xml\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(badConf));\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertTrue(\"should have detected an error early!\",\n          rsp.getException().getMessage().contains(\"\\\"dataDir\\\"\"));\n\n      assertTrue(\"should have detected an error early!\",\n          rsp.getException().getMessage().contains(\"\\\"</dataDir>\\\"\"));\n\n      params = params(\"op\", \"test\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      assertTrue(\"Schema should have caused core reload to fail!\",\n          rsp.getException().getMessage().indexOf(\"SAXParseException\") != -1);\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"), Charsets.UTF_8.toString());\n      assertFalse(\"Schema contents should NOT have changed!\", contents.contains(\"Testing rewrite of schema.xml file.\"));\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"), Charsets.UTF_8.toString());\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n\n      core.execute(core.getRequestHandler(\"/admin/file\"), locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n      core.close();\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrCore core = cc.getCore(\"core1\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/file\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add( new ContentStreamBase.StringStream( \"Testing rewrite of schema.xml file.\" ) );\n\n      params = params(\"op\", \"test\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      assertTrue(\"Schema should have caused core reload to fail!\",\n          rsp.getException().getMessage().indexOf(\"SAXParseException\") != -1);\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"), Charsets.UTF_8.toString());\n      assertFalse(\"Schema contents should NOT have changed!\", contents.contains(\"Testing rewrite of schema.xml file.\"));\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"), Charsets.UTF_8.toString());\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n      core.execute(handler, locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n      core.close();\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"49f5649ff61a6b71b0338e35e9d5209e8ab50e94","date":1387140387,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","sourceNew":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrCore core = cc.getCore(\"core1\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/fileedit\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add(new ContentStreamBase.StringStream(\"Testing rewrite of schema.xml file.\" ) );\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n      String badConf = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"), \"UTF-8\").replace(\"</dataDir>\", \"\");\n\n      params = params(\"op\", \"write\", \"file\", \"solrconfig.xml\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(badConf));\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertThat(\"should have detected an error early!\", rsp.getException().getMessage(), containsString(\"\\\"</dataDir>\\\"\"));\n\n      params = params(\"op\", \"test\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      assertTrue(\"Schema should have caused core reload to fail!\",\n          rsp.getException().getMessage().indexOf(\"SAXParseException\") != -1);\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"), Charsets.UTF_8.toString());\n      assertFalse(\"Schema contents should NOT have changed!\", contents.contains(\"Testing rewrite of schema.xml file.\"));\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"), Charsets.UTF_8.toString());\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n\n      core.execute(core.getRequestHandler(\"/admin/file\"), locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n      core.close();\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrCore core = cc.getCore(\"core1\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/fileedit\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add(new ContentStreamBase.StringStream(\"Testing rewrite of schema.xml file.\" ) );\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n      String badConf = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"), \"UTF-8\").replace(\"</dataDir>\", \"\");\n\n      params = params(\"op\", \"write\", \"file\", \"solrconfig.xml\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(badConf));\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertTrue(\"should have detected an error early!\",\n          rsp.getException().getMessage().contains(\"\\\"dataDir\\\"\"));\n\n      assertTrue(\"should have detected an error early!\",\n          rsp.getException().getMessage().contains(\"\\\"</dataDir>\\\"\"));\n\n      params = params(\"op\", \"test\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      assertTrue(\"Schema should have caused core reload to fail!\",\n          rsp.getException().getMessage().indexOf(\"SAXParseException\") != -1);\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"), Charsets.UTF_8.toString());\n      assertFalse(\"Schema contents should NOT have changed!\", contents.contains(\"Testing rewrite of schema.xml file.\"));\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"), Charsets.UTF_8.toString());\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n\n      core.execute(core.getRequestHandler(\"/admin/file\"), locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n      core.close();\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrCore core = cc.getCore(\"core1\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/fileedit\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add(new ContentStreamBase.StringStream(\"Testing rewrite of schema.xml file.\" ) );\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n      String badConf = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"), \"UTF-8\").replace(\"</dataDir>\", \"\");\n\n      params = params(\"op\", \"write\", \"file\", \"solrconfig.xml\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(badConf));\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertThat(\"should have detected an error early!\", rsp.getException().getMessage(), containsString(\"\\\"</dataDir>\\\"\"));\n\n      params = params(\"op\", \"test\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      assertTrue(\"Schema should have caused core reload to fail!\",\n          rsp.getException().getMessage().indexOf(\"SAXParseException\") != -1);\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"), Charsets.UTF_8.toString());\n      assertFalse(\"Schema contents should NOT have changed!\", contents.contains(\"Testing rewrite of schema.xml file.\"));\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"), Charsets.UTF_8.toString());\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n\n      core.execute(core.getRequestHandler(\"/admin/file\"), locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n      core.close();\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","sourceNew":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrCore core = cc.getCore(\"core1\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/fileedit\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add(new ContentStreamBase.StringStream(\"Testing rewrite of schema.xml file.\" ) );\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n      String badConf = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"), \"UTF-8\").replace(\"</dataDir>\", \"\");\n\n      params = params(\"op\", \"write\", \"file\", \"solrconfig.xml\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(badConf));\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertThat(\"should have detected an error early!\", rsp.getException().getMessage(), containsString(\"\\\"</dataDir>\\\"\"));\n\n      params = params(\"op\", \"test\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      assertTrue(\"Schema should have caused core reload to fail!\",\n          rsp.getException().getMessage().indexOf(\"SAXParseException\") != -1);\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"), Charsets.UTF_8.toString());\n      assertFalse(\"Schema contents should NOT have changed!\", contents.contains(\"Testing rewrite of schema.xml file.\"));\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"), Charsets.UTF_8.toString());\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n\n      core.execute(core.getRequestHandler(\"/admin/file\"), locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n      core.close();\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrCore core = cc.getCore(\"core1\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/fileedit\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n      ArrayList<ContentStream> streams = new ArrayList<ContentStream>( 2 );\n      streams.add(new ContentStreamBase.StringStream(\"Testing rewrite of schema.xml file.\" ) );\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n      String badConf = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"), \"UTF-8\").replace(\"</dataDir>\", \"\");\n\n      params = params(\"op\", \"write\", \"file\", \"solrconfig.xml\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(badConf));\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertThat(\"should have detected an error early!\", rsp.getException().getMessage(), containsString(\"\\\"</dataDir>\\\"\"));\n\n      params = params(\"op\", \"test\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      assertTrue(\"Schema should have caused core reload to fail!\",\n          rsp.getException().getMessage().indexOf(\"SAXParseException\") != -1);\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"), Charsets.UTF_8.toString());\n      assertFalse(\"Schema contents should NOT have changed!\", contents.contains(\"Testing rewrite of schema.xml file.\"));\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"), Charsets.UTF_8.toString());\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n\n      core.execute(core.getRequestHandler(\"/admin/file\"), locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n      core.close();\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e332392bbbdd01cb69ad6a89051f483cda38e15e","date":1395758779,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","sourceNew":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try (SolrCore core = cc.getCore(\"core1\")) {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/fileedit\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add(new ContentStreamBase.StringStream(\"Testing rewrite of schema.xml file.\" ) );\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n      String badConf = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"), \"UTF-8\").replace(\"</dataDir>\", \"\");\n\n      params = params(\"op\", \"write\", \"file\", \"solrconfig.xml\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(badConf));\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertThat(\"should have detected an error early!\", rsp.getException().getMessage(), containsString(\"\\\"</dataDir>\\\"\"));\n\n      params = params(\"op\", \"test\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      assertTrue(\"Schema should have caused core reload to fail!\",\n          rsp.getException().getMessage().indexOf(\"SAXParseException\") != -1);\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"), Charsets.UTF_8.toString());\n      assertFalse(\"Schema contents should NOT have changed!\", contents.contains(\"Testing rewrite of schema.xml file.\"));\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"), Charsets.UTF_8.toString());\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n\n      core.execute(core.getRequestHandler(\"/admin/file\"), locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrCore core = cc.getCore(\"core1\");\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/fileedit\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add(new ContentStreamBase.StringStream(\"Testing rewrite of schema.xml file.\" ) );\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n      String badConf = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"), \"UTF-8\").replace(\"</dataDir>\", \"\");\n\n      params = params(\"op\", \"write\", \"file\", \"solrconfig.xml\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(badConf));\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertThat(\"should have detected an error early!\", rsp.getException().getMessage(), containsString(\"\\\"</dataDir>\\\"\"));\n\n      params = params(\"op\", \"test\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      assertTrue(\"Schema should have caused core reload to fail!\",\n          rsp.getException().getMessage().indexOf(\"SAXParseException\") != -1);\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"), Charsets.UTF_8.toString());\n      assertFalse(\"Schema contents should NOT have changed!\", contents.contains(\"Testing rewrite of schema.xml file.\"));\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"), Charsets.UTF_8.toString());\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n\n      core.execute(core.getRequestHandler(\"/admin/file\"), locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n      core.close();\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e9ce820cd3ed9efb959c181daaafd22f0c70143","date":1396201051,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","sourceNew":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try (SolrCore core = cc.getCore(\"core1\")) {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/fileedit\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add(new ContentStreamBase.StringStream(\"Testing rewrite of schema.xml file.\" ) );\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n      String badConf = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"), \"UTF-8\").replace(\"</dataDir>\", \"\");\n\n      params = params(\"op\", \"write\", \"file\", \"solrconfig.xml\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(badConf));\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertThat(\"should have detected an error early!\", rsp.getException().getMessage(), containsString(\"\\\"</dataDir>\\\"\"));\n\n      params = params(\"op\", \"test\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      assertTrue(\"Schema should have caused core reload to fail!\",\n          rsp.getException().getMessage().indexOf(\"SAXParseException\") != -1);\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"), Charsets.UTF_8.toString());\n      assertFalse(\"Schema contents should NOT have changed!\", contents.contains(\"Testing rewrite of schema.xml file.\"));\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"), Charsets.UTF_8.toString());\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n\n      core.execute(core.getRequestHandler(\"/admin/file\"), locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n    } finally {\n      cc.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try (SolrCore core = cc.getCore(\"core1\")) {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/fileedit\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add(new ContentStreamBase.StringStream(\"Testing rewrite of schema.xml file.\" ) );\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n      String badConf = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"), \"UTF-8\").replace(\"</dataDir>\", \"\");\n\n      params = params(\"op\", \"write\", \"file\", \"solrconfig.xml\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(badConf));\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertThat(\"should have detected an error early!\", rsp.getException().getMessage(), containsString(\"\\\"</dataDir>\\\"\"));\n\n      params = params(\"op\", \"test\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      assertTrue(\"Schema should have caused core reload to fail!\",\n          rsp.getException().getMessage().indexOf(\"SAXParseException\") != -1);\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"), Charsets.UTF_8.toString());\n      assertFalse(\"Schema contents should NOT have changed!\", contents.contains(\"Testing rewrite of schema.xml file.\"));\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"), Charsets.UTF_8.toString());\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n\n      core.execute(core.getRequestHandler(\"/admin/file\"), locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","bugFix":["94df854a0d36420ddbf7a4a21330bd00c2354017"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","sourceNew":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try (SolrCore core = cc.getCore(\"core1\")) {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/fileedit\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add(new ContentStreamBase.StringStream(\"Testing rewrite of schema.xml file.\" ) );\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n      String badConf = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"), \"UTF-8\").replace(\"</dataDir>\", \"\");\n\n      params = params(\"op\", \"write\", \"file\", \"solrconfig.xml\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(badConf));\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertThat(\"should have detected an error early!\", rsp.getException().getMessage(), containsString(\"\\\"</dataDir>\\\"\"));\n\n      params = params(\"op\", \"test\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      assertTrue(\"Schema should have caused core reload to fail!\",\n          rsp.getException().getMessage().indexOf(\"SAXParseException\") != -1);\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"), Charsets.UTF_8.toString());\n      assertFalse(\"Schema contents should NOT have changed!\", contents.contains(\"Testing rewrite of schema.xml file.\"));\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"), Charsets.UTF_8.toString());\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n\n      core.execute(core.getRequestHandler(\"/admin/file\"), locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n    } finally {\n      cc.shutdown();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try (SolrCore core = cc.getCore(\"core1\")) {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/fileedit\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add(new ContentStreamBase.StringStream(\"Testing rewrite of schema.xml file.\" ) );\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n      String badConf = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"), \"UTF-8\").replace(\"</dataDir>\", \"\");\n\n      params = params(\"op\", \"write\", \"file\", \"solrconfig.xml\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(badConf));\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertThat(\"should have detected an error early!\", rsp.getException().getMessage(), containsString(\"\\\"</dataDir>\\\"\"));\n\n      params = params(\"op\", \"test\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      assertTrue(\"Schema should have caused core reload to fail!\",\n          rsp.getException().getMessage().indexOf(\"SAXParseException\") != -1);\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"), Charsets.UTF_8.toString());\n      assertFalse(\"Schema contents should NOT have changed!\", contents.contains(\"Testing rewrite of schema.xml file.\"));\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"), Charsets.UTF_8.toString());\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n\n      core.execute(core.getRequestHandler(\"/admin/file\"), locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n    } finally {\n      cc.shutdown();\n      if (solrHomeDirectory.exists()) {\n        FileUtils.deleteDirectory(solrHomeDirectory);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b20fb0ec13a714c528bd1ff701c977114e476c58","date":1420694146,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/ModifyConfFileTest#testConfigWrite().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testConfigWrite() throws Exception {\n\n    final CoreContainer cc = init();\n    try (SolrCore core = cc.getCore(\"core1\")) {\n      //final CoreAdminHandler admin = new CoreAdminHandler(cc);\n\n      SolrQueryResponse rsp = new SolrQueryResponse();\n      SolrRequestHandler handler = core.getRequestHandler(\"/admin/fileedit\");\n\n      ModifiableSolrParams params = params(\"file\",\"schema.xml\", \"op\",\"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"Input stream list was null for admin file write operation.\");\n\n      params = params(\"op\", \"write\");\n      core.execute(handler, new LocalSolrQueryRequest(core, params), rsp);\n      assertEquals(rsp.getException().getMessage(), \"No file name specified for write operation.\");\n\n      ArrayList<ContentStream> streams = new ArrayList<>( 2 );\n      streams.add(new ContentStreamBase.StringStream(\"Testing rewrite of schema.xml file.\" ) );\n\n      params = params(\"op\", \"write\", \"file\", \"bogus.txt\");\n      LocalSolrQueryRequest locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"Can not access: bogus.txt\");\n\n      String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n      String badConf = FileUtils.readFileToString(new File(top, \"solrconfig-minimal.xml\"), \"UTF-8\").replace(\"</dataDir>\", \"\");\n\n      params = params(\"op\", \"write\", \"file\", \"solrconfig.xml\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(badConf));\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertThat(\"should have detected an error early!\", rsp.getException().getMessage(), containsString(\"\\\"</dataDir>\\\"\"));\n\n      params = params(\"op\", \"test\", \"file\", \"schema.xml\", \"stream.body\", \"Testing rewrite of schema.xml file.\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n\n      assertTrue(\"Schema should have caused core reload to fail!\",\n          rsp.getException().getMessage().indexOf(\"SAXParseException\") != -1);\n      String contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(), \"conf/schema.xml\"), Charsets.UTF_8.toString());\n      assertFalse(\"Schema contents should NOT have changed!\", contents.contains(\"Testing rewrite of schema.xml file.\"));\n\n      streams.add(new ContentStreamBase.StringStream(\"This should barf\"));\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      assertEquals(rsp.getException().getMessage(), \"More than one input stream was found for admin file write operation.\");\n\n      streams.clear();\n      streams.add(new ContentStreamBase.StringStream(\"Some bogus stuff for a test.\"));\n      params = params(\"op\", \"write\", \"file\", \"velocity/test.vm\");\n      locReq = new LocalSolrQueryRequest(core, params);\n      locReq.setContentStreams(streams);\n      core.execute(handler, locReq, rsp);\n      contents = FileUtils.readFileToString(new File(core.getCoreDescriptor().getInstanceDir(),\n          \"conf/velocity/test.vm\"), Charsets.UTF_8.toString());\n      assertEquals(\"Schema contents should have changed!\", \"Some bogus stuff for a test.\", contents);\n\n      streams.clear();\n      params = params();\n      locReq = new LocalSolrQueryRequest(core, params);\n\n      core.execute(core.getRequestHandler(\"/admin/file\"), locReq, rsp);\n\n      NamedList<Object> res = rsp.getValues();\n\n      NamedList files = (NamedList)res.get(\"files\");\n      assertNotNull(\"Should have gotten files back\", files);\n      SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n      assertNotNull(\"Should have a schema returned\", schema);\n      assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n      SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n      assertNotNull(\"Should have velocity dir returned\", velocity);\n\n      assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n\n    } finally {\n      cc.shutdown();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["49f5649ff61a6b71b0338e35e9d5209e8ab50e94"],"49f5649ff61a6b71b0338e35e9d5209e8ab50e94":["7455ee5c847b2ee7e44656e4218141f62dacb572"],"b20fb0ec13a714c528bd1ff701c977114e476c58":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["e332392bbbdd01cb69ad6a89051f483cda38e15e","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"94df854a0d36420ddbf7a4a21330bd00c2354017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7455ee5c847b2ee7e44656e4218141f62dacb572":["acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3"],"174cf555ccf6aeb63c765897000c8214a84fe4f1":["94df854a0d36420ddbf7a4a21330bd00c2354017"],"8b51e04dc58a1002908e3caba8f5eb8ef59abe00":["174cf555ccf6aeb63c765897000c8214a84fe4f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3":["8b51e04dc58a1002908e3caba8f5eb8ef59abe00"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","49f5649ff61a6b71b0338e35e9d5209e8ab50e94"],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b20fb0ec13a714c528bd1ff701c977114e476c58"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"49f5649ff61a6b71b0338e35e9d5209e8ab50e94":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"b20fb0ec13a714c528bd1ff701c977114e476c58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["b20fb0ec13a714c528bd1ff701c977114e476c58"],"94df854a0d36420ddbf7a4a21330bd00c2354017":["174cf555ccf6aeb63c765897000c8214a84fe4f1"],"7455ee5c847b2ee7e44656e4218141f62dacb572":["49f5649ff61a6b71b0338e35e9d5209e8ab50e94"],"174cf555ccf6aeb63c765897000c8214a84fe4f1":["8b51e04dc58a1002908e3caba8f5eb8ef59abe00"],"8b51e04dc58a1002908e3caba8f5eb8ef59abe00":["acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94df854a0d36420ddbf7a4a21330bd00c2354017","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3":["7455ee5c847b2ee7e44656e4218141f62dacb572"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"1e9ce820cd3ed9efb959c181daaafd22f0c70143":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}