{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#refill().mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#refill().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#refill().mjava","sourceNew":"    protected final int refill() throws IOException {\n      final int doc = nextUnreadDoc();\n      count = 0;\n      start = -1;\n      if (doc == NO_MORE_DOCS) {\n        return NO_MORE_DOCS;\n      }\n      final int numDocs = Math.min(docs.length, limit - ord);\n      ord += numDocs;\n      if (indexOmitsTF) {\n        count = fillDocs(numDocs);\n      } else {\n        count = fillDocsAndFreqs(numDocs);\n      }\n      maxBufferedDocId = count > 0 ? docs[count-1] : NO_MORE_DOCS;\n      return doc;\n    }\n\n","sourceOld":"    protected final int refill() throws IOException {\n      final int doc = nextUnreadDoc();\n      count = 0;\n      start = -1;\n      if (doc == NO_MORE_DOCS) {\n        return NO_MORE_DOCS;\n      }\n      final int numDocs = Math.min(docs.length, limit - ord);\n      ord += numDocs;\n      if (indexOmitsTF) {\n        count = fillDocs(numDocs);\n      } else {\n        count = fillDocsAndFreqs(numDocs);\n      }\n      maxBufferedDocId = count > 0 ? docs[count-1] : NO_MORE_DOCS;\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#refill().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsReader.SegmentDocsEnumBase#refill().mjava","sourceNew":"    protected final int refill() throws IOException {\n      final int doc = nextUnreadDoc();\n      count = 0;\n      start = -1;\n      if (doc == NO_MORE_DOCS) {\n        return NO_MORE_DOCS;\n      }\n      final int numDocs = Math.min(docs.length, limit - ord);\n      ord += numDocs;\n      if (indexOmitsTF) {\n        count = fillDocs(numDocs);\n      } else {\n        count = fillDocsAndFreqs(numDocs);\n      }\n      maxBufferedDocId = count > 0 ? docs[count-1] : NO_MORE_DOCS;\n      return doc;\n    }\n\n","sourceOld":"    protected final int refill() throws IOException {\n      final int doc = nextUnreadDoc();\n      count = 0;\n      start = -1;\n      if (doc == NO_MORE_DOCS) {\n        return NO_MORE_DOCS;\n      }\n      final int numDocs = Math.min(docs.length, limit - ord);\n      ord += numDocs;\n      if (indexOmitsTF) {\n        count = fillDocs(numDocs);\n      } else {\n        count = fillDocsAndFreqs(numDocs);\n      }\n      maxBufferedDocId = count > 0 ? docs[count-1] : NO_MORE_DOCS;\n      return doc;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}