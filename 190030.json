{"path":"lucene/backwards/src/test/org/apache/lucene/util/TestNumericUtils#testIntSpecialValues().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/TestNumericUtils#testIntSpecialValues().mjava","pathOld":"backwards/src/test/org/apache/lucene/util/TestNumericUtils#testIntSpecialValues().mjava","sourceNew":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    String[] prefixVals=new String[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i]=NumericUtils.intToPrefixCoded(vals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], NumericUtils.prefixCodedToInt(prefixVals[i]) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        NumericUtils.prefixCodedToLong(prefixVals[i]);\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].compareTo( prefixVals[i] ) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        int prefixVal=NumericUtils.prefixCodedToInt(NumericUtils.intToPrefixCoded(vals[i], j));\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","sourceOld":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    String[] prefixVals=new String[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i]=NumericUtils.intToPrefixCoded(vals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], NumericUtils.prefixCodedToInt(prefixVals[i]) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        NumericUtils.prefixCodedToLong(prefixVals[i]);\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].compareTo( prefixVals[i] ) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        int prefixVal=NumericUtils.prefixCodedToInt(NumericUtils.intToPrefixCoded(vals[i], j));\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/util/TestNumericUtils#testIntSpecialValues().mjava","sourceNew":null,"sourceOld":"  public void testIntSpecialValues() throws Exception {\n    int[] vals=new int[]{\n      Integer.MIN_VALUE, Integer.MIN_VALUE+1, Integer.MIN_VALUE+2, -64765767,\n      -4000, -3000, -2000, -1000, -1, 0, 1, 10, 300, 765878989, Integer.MAX_VALUE-2, Integer.MAX_VALUE-1, Integer.MAX_VALUE\n    };\n    String[] prefixVals=new String[vals.length];\n    \n    for (int i=0; i<vals.length; i++) {\n      prefixVals[i]=NumericUtils.intToPrefixCoded(vals[i]);\n      \n      // check forward and back conversion\n      assertEquals( \"forward and back conversion should generate same int\", vals[i], NumericUtils.prefixCodedToInt(prefixVals[i]) );\n      \n      // test if decoding values as long fails correctly\n      try {\n        NumericUtils.prefixCodedToLong(prefixVals[i]);\n        fail(\"decoding a prefix coded int value as long should fail\");\n      } catch (NumberFormatException e) {\n        // worked\n      }\n    }\n    \n    // check sort order (prefixVals should be ascending)\n    for (int i=1; i<prefixVals.length; i++) {\n      assertTrue( \"check sort order\", prefixVals[i-1].compareTo( prefixVals[i] ) < 0 );\n    }\n    \n    // check the prefix encoding, lower precision should have the difference to original value equal to the lower removed bits\n    for (int i=0; i<vals.length; i++) {\n      for (int j=0; j<32; j++) {\n        int prefixVal=NumericUtils.prefixCodedToInt(NumericUtils.intToPrefixCoded(vals[i], j));\n        int mask=(1 << j) - 1;\n        assertEquals( \"difference between prefix val and original value for \"+vals[i]+\" with shift=\"+j, vals[i] & mask, vals[i]-prefixVal );\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}