{"path":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","commits":[{"id":"0e36f19452726fab77a51c5fcb61fd7d9ee91068","date":1280918442,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(IndexWriter,int).mjava","sourceNew":"  private void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = new Field(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private void addDoc(IndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = new Field(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = new Field(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = new Field(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"/dev/null","sourceNew":"  private void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0762b640e0d0d12b6edb96db68986e13145c3484","date":1307575932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","date":1309476031,"type":4,"author":"Christopher John Male","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":null,"sourceOld":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/FunctionTestSetup#addDoc(RandomIndexWriter,int).mjava","sourceNew":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","sourceOld":"  private static void addDoc(RandomIndexWriter iw, int i) throws Exception {\n    Document d = new Document();\n    Fieldable f;\n    int scoreAndID = i + 1;\n\n    f = newField(ID_FIELD, id2String(scoreAndID), Field.Store.YES, Field.Index.NOT_ANALYZED); // for debug purposes\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(TEXT_FIELD, \"text of doc\" + scoreAndID + textLine(i), Field.Store.NO, Field.Index.ANALYZED); // for regular search\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(INT_FIELD, \"\" + scoreAndID, Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    f = newField(FLOAT_FIELD, scoreAndID + \".000\", Field.Store.NO, Field.Index.NOT_ANALYZED); // for function scoring\n    f.setOmitNorms(true);\n    d.add(f);\n\n    iw.addDocument(d);\n    log(\"added: \" + d);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["132903c28af3aa6f67284b78de91c0f0a99488c2","0762b640e0d0d12b6edb96db68986e13145c3484"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["0762b640e0d0d12b6edb96db68986e13145c3484"],"0762b640e0d0d12b6edb96db68986e13145c3484":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"0e36f19452726fab77a51c5fcb61fd7d9ee91068":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["132903c28af3aa6f67284b78de91c0f0a99488c2","0762b640e0d0d12b6edb96db68986e13145c3484"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["0e36f19452726fab77a51c5fcb61fd7d9ee91068"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","132903c28af3aa6f67284b78de91c0f0a99488c2"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["0762b640e0d0d12b6edb96db68986e13145c3484","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["290622dd4fb1bcc2f06bcd5d4494522d1f24df5c"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"290622dd4fb1bcc2f06bcd5d4494522d1f24df5c":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0762b640e0d0d12b6edb96db68986e13145c3484":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","290622dd4fb1bcc2f06bcd5d4494522d1f24df5c","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"0e36f19452726fab77a51c5fcb61fd7d9ee91068":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e36f19452726fab77a51c5fcb61fd7d9ee91068","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"132903c28af3aa6f67284b78de91c0f0a99488c2":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","0762b640e0d0d12b6edb96db68986e13145c3484","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}