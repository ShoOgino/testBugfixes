{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],int).mjava","commits":[{"id":"75a2078fb7a7fce496e15f7a7ea829a778def1a5","date":1359508846,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],int).mjava","pathOld":"/dev/null","sourceNew":"    private <T> void checkIterator(Iterator<T> iterator, int expectedSize) {\n      for (int i = 0; i < expectedSize; i++) {\n        boolean hasNext = iterator.hasNext();\n        assert hasNext;\n        T v = iterator.next();\n        assert v != null;\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n      assert !iterator.hasNext();\n      try {\n        iterator.next();\n        throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n      } catch (NoSuchElementException expected) {\n        // ok\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],int).mjava","pathOld":"/dev/null","sourceNew":"    private <T> void checkIterator(Iterator<T> iterator, int expectedSize) {\n      for (int i = 0; i < expectedSize; i++) {\n        boolean hasNext = iterator.hasNext();\n        assert hasNext;\n        T v = iterator.next();\n        assert v != null;\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n      assert !iterator.hasNext();\n      try {\n        iterator.next();\n        throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n      } catch (NoSuchElementException expected) {\n        // ok\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"780b011e6e552810161e3c859b4bc270f655f47e","date":1360554192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],int).mjava","sourceNew":"    private <T> void checkIterator(Iterator<T> iterator, long expectedSize) {\n      for (long i = 0; i < expectedSize; i++) {\n        boolean hasNext = iterator.hasNext();\n        assert hasNext;\n        T v = iterator.next();\n        assert v != null;\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n      assert !iterator.hasNext();\n      try {\n        iterator.next();\n        throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n      } catch (NoSuchElementException expected) {\n        // ok\n      }\n    }\n\n","sourceOld":"    private <T> void checkIterator(Iterator<T> iterator, int expectedSize) {\n      for (int i = 0; i < expectedSize; i++) {\n        boolean hasNext = iterator.hasNext();\n        assert hasNext;\n        T v = iterator.next();\n        assert v != null;\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n      assert !iterator.hasNext();\n      try {\n        iterator.next();\n        throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n      } catch (NoSuchElementException expected) {\n        // ok\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],long).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingDocValuesConsumer#[T]_checkIterator(Iterator[T],int).mjava","sourceNew":"    private <T> void checkIterator(Iterator<T> iterator, long expectedSize) {\n      for (long i = 0; i < expectedSize; i++) {\n        boolean hasNext = iterator.hasNext();\n        assert hasNext;\n        T v = iterator.next();\n        assert v != null;\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n      assert !iterator.hasNext();\n      try {\n        iterator.next();\n        throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n      } catch (NoSuchElementException expected) {\n        // ok\n      }\n    }\n\n","sourceOld":"    private <T> void checkIterator(Iterator<T> iterator, int expectedSize) {\n      for (int i = 0; i < expectedSize; i++) {\n        boolean hasNext = iterator.hasNext();\n        assert hasNext;\n        T v = iterator.next();\n        assert v != null;\n        try {\n          iterator.remove();\n          throw new AssertionError(\"broken iterator (supports remove): \" + iterator);\n        } catch (UnsupportedOperationException expected) {\n          // ok\n        }\n      }\n      assert !iterator.hasNext();\n      try {\n        iterator.next();\n        throw new AssertionError(\"broken iterator (allows next() when hasNext==false) \" + iterator);\n      } catch (NoSuchElementException expected) {\n        // ok\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","75a2078fb7a7fce496e15f7a7ea829a778def1a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"780b011e6e552810161e3c859b4bc270f655f47e":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["d4d69c535930b5cce125cff868d40f6373dc27d4","780b011e6e552810161e3c859b4bc270f655f47e"],"75a2078fb7a7fce496e15f7a7ea829a778def1a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddbb72a33557d2b5bc22ee95daf3281c43560502"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["780b011e6e552810161e3c859b4bc270f655f47e","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","75a2078fb7a7fce496e15f7a7ea829a778def1a5"],"780b011e6e552810161e3c859b4bc270f655f47e":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"75a2078fb7a7fce496e15f7a7ea829a778def1a5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}