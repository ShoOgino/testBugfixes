{"path":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(FieldInfo,SegmentWriteState,BinaryDocValuesConsumer).mjava","commits":[{"id":"f44e5a6148908e8393ddd1c2d8b810a385a743c1","date":1352400727,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(FieldInfo,SegmentWriteState,BinaryDocValuesConsumer).mjava","pathOld":"/dev/null","sourceNew":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, BinaryDocValuesConsumer consumer) throws IOException {\n    final int bufferedDocCount = pending.size();\n    BytesRef value = new BytesRef();\n\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      value.bytes = pending.get(docID);\n      value.length = value.bytes.length;\n      consumer.add(value);\n    }\n    final int maxDoc = state.segmentInfo.getDocCount();\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(EMPTY);\n    }\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b637fb447c5b4257f6b4532d84ca91e456c1f2a","date":1352405059,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(FieldInfo,SegmentWriteState,BinaryDocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(FieldInfo,SegmentWriteState,BinaryDocValuesConsumer).mjava","sourceNew":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, BinaryDocValuesConsumer consumer) throws IOException {\n    final int bufferedDocCount = pending.size();\n    BytesRef value = new BytesRef();\n\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      value.bytes = pending.get(docID);\n      value.length = value.bytes.length;\n      consumer.add(value);\n    }\n    final int maxDoc = state.segmentInfo.getDocCount();\n    value.length = 0;\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(value);\n    }\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","sourceOld":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, BinaryDocValuesConsumer consumer) throws IOException {\n    final int bufferedDocCount = pending.size();\n    BytesRef value = new BytesRef();\n\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      value.bytes = pending.get(docID);\n      value.length = value.bytes.length;\n      consumer.add(value);\n    }\n    final int maxDoc = state.segmentInfo.getDocCount();\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(EMPTY);\n    }\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce73f585d17f53055185a19beb46db23d76e0ad9","date":1353077110,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(FieldInfo,SegmentWriteState,BinaryDocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(FieldInfo,SegmentWriteState,BinaryDocValuesConsumer).mjava","sourceNew":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, BinaryDocValuesConsumer consumer) throws IOException {\n    final int bufferedDocCount = addeValues;\n    BytesRef value = new BytesRef();\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      bytesRefArray.get(value, docID);\n      consumer.add(value);\n    }\n    final int maxDoc = state.segmentInfo.getDocCount();\n    value.length = 0;\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(value);\n    }\n    consumer.finish();\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","sourceOld":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, BinaryDocValuesConsumer consumer) throws IOException {\n    final int bufferedDocCount = pending.size();\n    BytesRef value = new BytesRef();\n\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      value.bytes = pending.get(docID);\n      value.length = value.bytes.length;\n      consumer.add(value);\n    }\n    final int maxDoc = state.segmentInfo.getDocCount();\n    value.length = 0;\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(value);\n    }\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ed65f3455364344c6d2ff76ea5421aac754eae7","date":1353261762,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(FieldInfo,SegmentWriteState,BinaryDocValuesConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(FieldInfo,SegmentWriteState,BinaryDocValuesConsumer).mjava","sourceNew":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, BinaryDocValuesConsumer consumer) throws IOException {\n    final int bufferedDocCount = addedValues;\n    BytesRef value = new BytesRef();\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      bytesRefArray.get(value, docID);\n      consumer.add(value);\n    }\n    final int maxDoc = state.segmentInfo.getDocCount();\n    value.length = 0;\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(value);\n    }\n    consumer.finish();\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","sourceOld":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, BinaryDocValuesConsumer consumer) throws IOException {\n    final int bufferedDocCount = addeValues;\n    BytesRef value = new BytesRef();\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      bytesRefArray.get(value, docID);\n      consumer.add(value);\n    }\n    final int maxDoc = state.segmentInfo.getDocCount();\n    value.length = 0;\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(value);\n    }\n    consumer.finish();\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"127981e5a1e1d1425c5fdc816ceacf753ca70ee4","date":1354205321,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(SegmentWriteState,SimpleDVConsumer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#flush(FieldInfo,SegmentWriteState,BinaryDocValuesConsumer).mjava","sourceNew":"  @Override\n  public void flush(SegmentWriteState state, SimpleDVConsumer dvConsumer) throws IOException {\n    BinaryDocValuesConsumer consumer = dvConsumer.addBinaryField(fieldInfo,\n                                                                 fixedLength >= 0,\n                                                                 maxLength);\n    final int bufferedDocCount = addedValues;\n    BytesRef value = new BytesRef();\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      bytesRefArray.get(value, docID);\n      consumer.add(value);\n    }\n    final int maxDoc = state.segmentInfo.getDocCount();\n    value.length = 0;\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(value);\n    }\n    consumer.finish();\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","sourceOld":"  public void flush(FieldInfo fieldInfo, SegmentWriteState state, BinaryDocValuesConsumer consumer) throws IOException {\n    final int bufferedDocCount = addedValues;\n    BytesRef value = new BytesRef();\n    for(int docID=0;docID<bufferedDocCount;docID++) {\n      bytesRefArray.get(value, docID);\n      consumer.add(value);\n    }\n    final int maxDoc = state.segmentInfo.getDocCount();\n    value.length = 0;\n    for(int docID=bufferedDocCount;docID<maxDoc;docID++) {\n      consumer.add(value);\n    }\n    consumer.finish();\n    reset();\n    //System.out.println(\"FLUSH\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ce73f585d17f53055185a19beb46db23d76e0ad9":["9b637fb447c5b4257f6b4532d84ca91e456c1f2a"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"9b637fb447c5b4257f6b4532d84ca91e456c1f2a":["f44e5a6148908e8393ddd1c2d8b810a385a743c1"],"f44e5a6148908e8393ddd1c2d8b810a385a743c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ce73f585d17f53055185a19beb46db23d76e0ad9":["1ed65f3455364344c6d2ff76ea5421aac754eae7"],"1ed65f3455364344c6d2ff76ea5421aac754eae7":["127981e5a1e1d1425c5fdc816ceacf753ca70ee4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f44e5a6148908e8393ddd1c2d8b810a385a743c1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"127981e5a1e1d1425c5fdc816ceacf753ca70ee4":[],"9b637fb447c5b4257f6b4532d84ca91e456c1f2a":["ce73f585d17f53055185a19beb46db23d76e0ad9"],"f44e5a6148908e8393ddd1c2d8b810a385a743c1":["9b637fb447c5b4257f6b4532d84ca91e456c1f2a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["127981e5a1e1d1425c5fdc816ceacf753ca70ee4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}