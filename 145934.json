{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDynamicFieldNames().mjava","commits":[{"id":"ab65b69ad7fcbfcd696a70e7c5fba438e01e181c","date":1477459930,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDynamicFieldNames().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDynamicFieldNames() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n        \"dataConfig\", dataConfigWithDynamicFieldNames);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\", \"//*[@name='101_s']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b363b110592b02d7f488aff0dbe40a53d3ce81df","date":1477469211,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDynamicFieldNames().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDynamicFieldNames() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n        \"dataConfig\", dataConfigWithDynamicFieldNames);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\", \"//*[@name='101_s']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDynamicFieldNames().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDynamicFieldNames() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n        \"dataConfig\", dataConfigWithDynamicFieldNames);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\", \"//*[@name='101_s']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDynamicFieldNames().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDynamicFieldNames().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDynamicFieldNames() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n        \"dataConfig\", DATA_CONFIG_WITH_DYNAMIC_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\", \"//*[@name='101_s']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDynamicFieldNames() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n        \"dataConfig\", dataConfigWithDynamicFieldNames);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\", \"//*[@name='101_s']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDynamicFieldNames().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDynamicFieldNames().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDynamicFieldNames() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n        \"dataConfig\", DATA_CONFIG_WITH_DYNAMIC_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\", \"//*[@name='101_s']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDynamicFieldNames() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n        \"dataConfig\", dataConfigWithDynamicFieldNames);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\", \"//*[@name='101_s']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9","date":1574619880,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDynamicFieldNames().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDynamicFieldNames().mjava","sourceNew":"  @Test\n  public void testDynamicFieldNames() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n        \"dataConfig\", DATA_CONFIG_WITH_DYNAMIC_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\", \"//*[@name='101_s']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDynamicFieldNames() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n        \"dataConfig\", DATA_CONFIG_WITH_DYNAMIC_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\", \"//*[@name='101_s']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9c3baacabd473e8ecd6c4948aabacead49b88e","date":1574700980,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDynamicFieldNames().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDynamicFieldNames().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDynamicFieldNames() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n        \"dataConfig\", DATA_CONFIG_WITH_DYNAMIC_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\", \"//*[@name='101_s']\");\n  }\n\n","sourceOld":"  @Test\n  public void testDynamicFieldNames() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n        \"dataConfig\", DATA_CONFIG_WITH_DYNAMIC_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\", \"//*[@name='101_s']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"024e13388acbf5562fcbb77a129620982a5e2d79","date":1591531835,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDynamicFieldNames().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDynamicFieldNames().mjava","sourceNew":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDynamicFieldNames() throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n        \"dataConfig\", DATA_CONFIG_WITH_DYNAMIC_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\", \"//*[@name='101_s']\");\n  }\n\n","sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDynamicFieldNames() throws Exception {\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n        \"dataConfig\", DATA_CONFIG_WITH_DYNAMIC_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\", \"//*[@name='101_s']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestDocBuilder2#testDynamicFieldNames().mjava","sourceNew":null,"sourceOld":"  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void testDynamicFieldNames() throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    List rows = new ArrayList();\n    rows.add(createMap(\"mypk\", \"101\", \"text\", \"ApacheSolr\"));\n    MockDataSource.setIterator(\"select * from x\", rows.iterator());\n\n    LocalSolrQueryRequest request = lrf.makeRequest(\"command\", \"full-import\",\n        \"debug\", \"on\", \"clean\", \"true\", \"commit\", \"true\",\n        \"dataConfig\", DATA_CONFIG_WITH_DYNAMIC_FIELD_NAMES);\n    h.query(\"/dataimport\", request);\n    assertQ(req(\"id:101\"), \"//*[@numFound='1']\", \"//*[@name='101_s']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["024e13388acbf5562fcbb77a129620982a5e2d79"],"024e13388acbf5562fcbb77a129620982a5e2d79":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["5de502b5478255493125e7e801411ba17a6682ec"],"5de502b5478255493125e7e801411ba17a6682ec":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b363b110592b02d7f488aff0dbe40a53d3ce81df"],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ab65b69ad7fcbfcd696a70e7c5fba438e01e181c"],"ab65b69ad7fcbfcd696a70e7c5fba438e01e181c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"024e13388acbf5562fcbb77a129620982a5e2d79":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9":["bb9c3baacabd473e8ecd6c4948aabacead49b88e"],"5de502b5478255493125e7e801411ba17a6682ec":["a5df378a6155dcc1f4d4ecdcbd8ea5bc058560e9"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","b363b110592b02d7f488aff0dbe40a53d3ce81df","ab65b69ad7fcbfcd696a70e7c5fba438e01e181c"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"bb9c3baacabd473e8ecd6c4948aabacead49b88e":["024e13388acbf5562fcbb77a129620982a5e2d79"],"b363b110592b02d7f488aff0dbe40a53d3ce81df":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"ab65b69ad7fcbfcd696a70e7c5fba438e01e181c":["b363b110592b02d7f488aff0dbe40a53d3ce81df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f20fd35e3055a0c5b387df0b986a68d65d86441","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}