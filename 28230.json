{"path":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,ByteBuffer,int).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,ByteBuffer,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrServer,String,ByteBuffer,int).mjava","sourceNew":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, bytes);\n    String url;\n    Map map;\n    List l;\n    long startTime = System.nanoTime();\n    long maxTimeoutSeconds = 10;\n    while ( true) {\n      url = baseUrl + \"/.system/blob/test\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if(!(\"\"+count).equals(numFound)) {\n        if (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n          Thread.sleep(100);\n          continue;\n        }\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      break;\n    }\n  }\n\n","sourceOld":"  public static void postAndCheck(CloudSolrServer cloudClient, String baseUrl, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, bytes);\n    String url;\n    Map map;\n    List l;\n    long startTime = System.nanoTime();\n    long maxTimeoutSeconds = 10;\n    while ( true) {\n      url = baseUrl + \"/.system/blob/test\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if(!(\"\"+count).equals(numFound)) {\n        if (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n          Thread.sleep(100);\n          continue;\n        }\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf5d1e2ebf4d31138a7dea67029f32e53f8ae821","date":1420627779,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,ByteBuffer,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,ByteBuffer,int).mjava","sourceNew":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n\n    for(int i=0;i<100;i++) {//10secs\n      url = baseUrl + \"/.system/blob/test\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if(!(\"\"+count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(\"Could not successfully add blob \" + getAsString(map));\n  }\n\n","sourceOld":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, bytes);\n    String url;\n    Map map;\n    List l;\n    long startTime = System.nanoTime();\n    long maxTimeoutSeconds = 10;\n    while ( true) {\n      url = baseUrl + \"/.system/blob/test\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if(!(\"\"+count).equals(numFound)) {\n        if (TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds) {\n          Thread.sleep(100);\n          continue;\n        }\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      break;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4620bf9ef8a95eeaa92aa547a4d2aca2ca5d2fb6","date":1420715197,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,ByteBuffer,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,ByteBuffer,int).mjava","sourceNew":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    long start = System.currentTimeMillis();\n    int i=0;\n    for(;i<150;i++) {//10secs\n      url = baseUrl + \"/.system/blob/test\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if(!(\"\"+count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(MessageFormat.format(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i,count, System.currentTimeMillis()-start,  getAsString(map)));\n  }\n\n","sourceOld":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n\n    for(int i=0;i<100;i++) {//10secs\n      url = baseUrl + \"/.system/blob/test\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if(!(\"\"+count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(\"Could not successfully add blob \" + getAsString(map));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"63e47b9375302c261334d5181cae6d68d08ed1a3","date":1423988473,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,ByteBuffer,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,ByteBuffer,int).mjava","sourceNew":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    long start = System.currentTimeMillis();\n    int i=0;\n    for(;i<150;i++) {//15 secs\n      url = baseUrl + \"/.system/blob/test\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if(!(\"\"+count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(MessageFormat.format(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i,count, System.currentTimeMillis()-start,  getAsString(map)));\n  }\n\n","sourceOld":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    long start = System.currentTimeMillis();\n    int i=0;\n    for(;i<150;i++) {//10secs\n      url = baseUrl + \"/.system/blob/test\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if(!(\"\"+count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(MessageFormat.format(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i,count, System.currentTimeMillis()-start,  getAsString(map)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,String,ByteBuffer,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,ByteBuffer,int).mjava","sourceNew":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, String blobName, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, blobName, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    long start = System.currentTimeMillis();\n    int i=0;\n    for(;i<150;i++) {//15 secs\n      url = baseUrl + \"/.system/blob/\" + blobName;\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if(!(\"\"+count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(MessageFormat.format(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i,count, System.currentTimeMillis()-start,  getAsString(map)));\n  }\n\n","sourceOld":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    long start = System.currentTimeMillis();\n    int i=0;\n    for(;i<150;i++) {//15 secs\n      url = baseUrl + \"/.system/blob/test\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if(!(\"\"+count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(MessageFormat.format(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i,count, System.currentTimeMillis()-start,  getAsString(map)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/TestBlobHandler#postAndCheck(CloudSolrClient,String,ByteBuffer,int).mjava","sourceNew":null,"sourceOld":"  public static void postAndCheck(CloudSolrClient cloudClient, String baseUrl, ByteBuffer bytes, int count) throws Exception {\n    postData(cloudClient, baseUrl, bytes);\n\n    String url;\n    Map map = null;\n    List l;\n    long start = System.currentTimeMillis();\n    int i=0;\n    for(;i<150;i++) {//15 secs\n      url = baseUrl + \"/.system/blob/test\";\n      map = TestSolrConfigHandlerConcurrent.getAsMap(url, cloudClient);\n      String numFound = String.valueOf(ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"numFound\")));\n      if(!(\"\"+count).equals(numFound)) {\n        Thread.sleep(100);\n        continue;\n      }\n      l = (List) ConfigOverlay.getObjectByPath(map, false, Arrays.asList(\"response\", \"docs\"));\n      assertNotNull(l);\n      map = (Map) l.get(0);\n      assertEquals(\"\" + bytes.limit(), String.valueOf(map.get(\"size\")));\n      return;\n    }\n    fail(MessageFormat.format(\"Could not successfully add blob after {0} attempts. Expecting {1} items. time elapsed {2}  output  for url is {3}\",\n        i,count, System.currentTimeMillis()-start,  getAsString(map)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["63e47b9375302c261334d5181cae6d68d08ed1a3","9aea0485ecacb6734c17da2d02569816c23a69c1"],"4620bf9ef8a95eeaa92aa547a4d2aca2ca5d2fb6":["bf5d1e2ebf4d31138a7dea67029f32e53f8ae821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bf5d1e2ebf4d31138a7dea67029f32e53f8ae821":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["63e47b9375302c261334d5181cae6d68d08ed1a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"63e47b9375302c261334d5181cae6d68d08ed1a3":["4620bf9ef8a95eeaa92aa547a4d2aca2ca5d2fb6"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"4620bf9ef8a95eeaa92aa547a4d2aca2ca5d2fb6":["63e47b9375302c261334d5181cae6d68d08ed1a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bf5d1e2ebf4d31138a7dea67029f32e53f8ae821":["4620bf9ef8a95eeaa92aa547a4d2aca2ca5d2fb6"],"bafca15d8e408346a67f4282ad1143b88023893b":["bf5d1e2ebf4d31138a7dea67029f32e53f8ae821"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"63e47b9375302c261334d5181cae6d68d08ed1a3":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}