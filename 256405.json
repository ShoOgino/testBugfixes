{"path":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#iterator().mjava","commits":[{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#iterator().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        final DocIdSetIterator childIt = childScorer.iterator();\n\n        @Override\n        public int nextDoc() throws IOException {\n          //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n          if (nextChildDoc == NO_MORE_DOCS) {\n            //System.out.println(\"  end\");\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          // Gather all children sharing the same parent as\n          // nextChildDoc\n\n          parentDoc = parentBits.nextSetBit(nextChildDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          if (nextChildDoc == parentDoc) {\n            throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n          }\n\n          //System.out.println(\"  parentDoc=\" + parentDoc);\n          assert parentDoc != DocIdSetIterator.NO_MORE_DOCS;\n\n          float totalScore = 0;\n          float maxScore = Float.NEGATIVE_INFINITY;\n          float minScore = Float.POSITIVE_INFINITY;\n\n          childDocUpto = 0;\n          parentFreq = 0;\n          do {\n\n            //System.out.println(\"  c=\" + nextChildDoc);\n            if (pendingChildDocs != null && pendingChildDocs.length == childDocUpto) {\n              pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n            }\n            if (pendingChildScores != null && scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {\n              pendingChildScores = ArrayUtil.grow(pendingChildScores);\n            }\n            if (pendingChildDocs != null) {\n              pendingChildDocs[childDocUpto] = nextChildDoc;\n            }\n            if (scoreMode != ScoreMode.None) {\n              // TODO: specialize this into dedicated classes per-scoreMode\n              final float childScore = childScorer.score();\n              final int childFreq = childScorer.freq();\n              if (pendingChildScores != null) {\n                pendingChildScores[childDocUpto] = childScore;\n              }\n              maxScore = Math.max(childScore, maxScore);\n              minScore = Math.min(childScore, minScore);\n              totalScore += childScore;\n              parentFreq += childFreq;\n            }\n            childDocUpto++;\n            nextChildDoc = childIt.nextDoc();\n          } while (nextChildDoc < parentDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          if (nextChildDoc == parentDoc) {\n            throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n          }\n\n          switch(scoreMode) {\n          case Avg:\n            parentScore = totalScore / childDocUpto;\n            break;\n          case Max:\n            parentScore = maxScore;\n            break;\n          case Min:\n            parentScore = minScore;\n            break;\n          case Total:\n            parentScore = totalScore;\n            break;\n          case None:\n            break;\n          }\n\n          //System.out.println(\"  return parentDoc=\" + parentDoc + \" childDocUpto=\" + childDocUpto);\n          return parentDoc;\n        }\n\n        @Override\n        public int advance(int parentTarget) throws IOException {\n\n          //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n          if (parentTarget == NO_MORE_DOCS) {\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          if (parentTarget == 0) {\n            // Callers should only be passing in a docID from\n            // the parent space, so this means this parent\n            // has no children (it got docID 0), so it cannot\n            // possibly match.  We must handle this case\n            // separately otherwise we pass invalid -1 to\n            // prevSetBit below:\n            return nextDoc();\n          }\n\n          prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n          //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n          assert prevParentDoc >= parentDoc;\n          if (prevParentDoc > nextChildDoc) {\n            nextChildDoc = childIt.advance(prevParentDoc);\n            // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n          //} else {\n            //System.out.println(\"  skip childScorer advance\");\n          }\n\n          // Parent & child docs are supposed to be orthogonal:\n          if (nextChildDoc == prevParentDoc) {\n            throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n          }\n\n          final int nd = nextDoc();\n          //System.out.println(\"  return nextParentDoc=\" + nd);\n          return nd;\n        }\n\n        @Override\n        public int docID() {\n          return parentDoc;\n        }\n\n        @Override\n        public long cost() {\n          return childIt.cost();\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37efbd78d0e524f5adef66f50e9d435283012a15","date":1474745518,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#iterator().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        final DocIdSetIterator childIt = childScorer.iterator();\n\n        @Override\n        public int nextDoc() throws IOException {\n          //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n          if (nextChildDoc == NO_MORE_DOCS) {\n            //System.out.println(\"  end\");\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          // Gather all children sharing the same parent as\n          // nextChildDoc\n\n          parentDoc = parentBits.nextSetBit(nextChildDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          checkOrthogonal(nextChildDoc, parentDoc);\n\n          //System.out.println(\"  parentDoc=\" + parentDoc);\n          assert parentDoc != DocIdSetIterator.NO_MORE_DOCS;\n\n          float totalScore = 0;\n          float maxScore = Float.NEGATIVE_INFINITY;\n          float minScore = Float.POSITIVE_INFINITY;\n\n          childDocUpto = 0;\n          parentFreq = 0;\n          do {\n\n            //System.out.println(\"  c=\" + nextChildDoc);\n            if (pendingChildDocs != null && pendingChildDocs.length == childDocUpto) {\n              pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n            }\n            if (pendingChildScores != null && scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {\n              pendingChildScores = ArrayUtil.grow(pendingChildScores);\n            }\n            if (pendingChildDocs != null) {\n              pendingChildDocs[childDocUpto] = nextChildDoc;\n            }\n            if (scoreMode != ScoreMode.None) {\n              // TODO: specialize this into dedicated classes per-scoreMode\n              final float childScore = childScorer.score();\n              final int childFreq = childScorer.freq();\n              if (pendingChildScores != null) {\n                pendingChildScores[childDocUpto] = childScore;\n              }\n              maxScore = Math.max(childScore, maxScore);\n              minScore = Math.min(childScore, minScore);\n              totalScore += childScore;\n              parentFreq += childFreq;\n            }\n            childDocUpto++;\n            nextChildDoc = childIt.nextDoc();\n          } while (nextChildDoc < parentDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          checkOrthogonal(nextChildDoc, parentDoc);\n\n          switch(scoreMode) {\n          case Avg:\n            parentScore = totalScore / childDocUpto;\n            break;\n          case Max:\n            parentScore = maxScore;\n            break;\n          case Min:\n            parentScore = minScore;\n            break;\n          case Total:\n            parentScore = totalScore;\n            break;\n          case None:\n            break;\n          }\n\n          //System.out.println(\"  return parentDoc=\" + parentDoc + \" childDocUpto=\" + childDocUpto);\n          return parentDoc;\n        }\n\n        @Override\n        public int advance(int parentTarget) throws IOException {\n\n          //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n          if (parentTarget == NO_MORE_DOCS) {\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          if (parentTarget == 0) {\n            // Callers should only be passing in a docID from\n            // the parent space, so this means this parent\n            // has no children (it got docID 0), so it cannot\n            // possibly match.  We must handle this case\n            // separately otherwise we pass invalid -1 to\n            // prevSetBit below:\n            return nextDoc();\n          }\n\n          prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n          //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n          assert prevParentDoc >= parentDoc;\n          if (prevParentDoc > nextChildDoc) {\n            nextChildDoc = childIt.advance(prevParentDoc);\n            // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n          //} else {\n            //System.out.println(\"  skip childScorer advance\");\n          }\n\n          // Parent & child docs are supposed to be orthogonal:\n          checkOrthogonal(nextChildDoc, prevParentDoc);\n\n          final int nd = nextDoc();\n          //System.out.println(\"  return nextParentDoc=\" + nd);\n          return nd;\n        }\n\n        @Override\n        public int docID() {\n          return parentDoc;\n        }\n\n        @Override\n        public long cost() {\n          return childIt.cost();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        final DocIdSetIterator childIt = childScorer.iterator();\n\n        @Override\n        public int nextDoc() throws IOException {\n          //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n          if (nextChildDoc == NO_MORE_DOCS) {\n            //System.out.println(\"  end\");\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          // Gather all children sharing the same parent as\n          // nextChildDoc\n\n          parentDoc = parentBits.nextSetBit(nextChildDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          if (nextChildDoc == parentDoc) {\n            throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n          }\n\n          //System.out.println(\"  parentDoc=\" + parentDoc);\n          assert parentDoc != DocIdSetIterator.NO_MORE_DOCS;\n\n          float totalScore = 0;\n          float maxScore = Float.NEGATIVE_INFINITY;\n          float minScore = Float.POSITIVE_INFINITY;\n\n          childDocUpto = 0;\n          parentFreq = 0;\n          do {\n\n            //System.out.println(\"  c=\" + nextChildDoc);\n            if (pendingChildDocs != null && pendingChildDocs.length == childDocUpto) {\n              pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n            }\n            if (pendingChildScores != null && scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {\n              pendingChildScores = ArrayUtil.grow(pendingChildScores);\n            }\n            if (pendingChildDocs != null) {\n              pendingChildDocs[childDocUpto] = nextChildDoc;\n            }\n            if (scoreMode != ScoreMode.None) {\n              // TODO: specialize this into dedicated classes per-scoreMode\n              final float childScore = childScorer.score();\n              final int childFreq = childScorer.freq();\n              if (pendingChildScores != null) {\n                pendingChildScores[childDocUpto] = childScore;\n              }\n              maxScore = Math.max(childScore, maxScore);\n              minScore = Math.min(childScore, minScore);\n              totalScore += childScore;\n              parentFreq += childFreq;\n            }\n            childDocUpto++;\n            nextChildDoc = childIt.nextDoc();\n          } while (nextChildDoc < parentDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          if (nextChildDoc == parentDoc) {\n            throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n          }\n\n          switch(scoreMode) {\n          case Avg:\n            parentScore = totalScore / childDocUpto;\n            break;\n          case Max:\n            parentScore = maxScore;\n            break;\n          case Min:\n            parentScore = minScore;\n            break;\n          case Total:\n            parentScore = totalScore;\n            break;\n          case None:\n            break;\n          }\n\n          //System.out.println(\"  return parentDoc=\" + parentDoc + \" childDocUpto=\" + childDocUpto);\n          return parentDoc;\n        }\n\n        @Override\n        public int advance(int parentTarget) throws IOException {\n\n          //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n          if (parentTarget == NO_MORE_DOCS) {\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          if (parentTarget == 0) {\n            // Callers should only be passing in a docID from\n            // the parent space, so this means this parent\n            // has no children (it got docID 0), so it cannot\n            // possibly match.  We must handle this case\n            // separately otherwise we pass invalid -1 to\n            // prevSetBit below:\n            return nextDoc();\n          }\n\n          prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n          //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n          assert prevParentDoc >= parentDoc;\n          if (prevParentDoc > nextChildDoc) {\n            nextChildDoc = childIt.advance(prevParentDoc);\n            // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n          //} else {\n            //System.out.println(\"  skip childScorer advance\");\n          }\n\n          // Parent & child docs are supposed to be orthogonal:\n          if (nextChildDoc == prevParentDoc) {\n            throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n          }\n\n          final int nd = nextDoc();\n          //System.out.println(\"  return nextParentDoc=\" + nd);\n          return nd;\n        }\n\n        @Override\n        public int docID() {\n          return parentDoc;\n        }\n\n        @Override\n        public long cost() {\n          return childIt.cost();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#iterator().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        final DocIdSetIterator childIt = childScorer.iterator();\n\n        @Override\n        public int nextDoc() throws IOException {\n          //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n          if (nextChildDoc == NO_MORE_DOCS) {\n            //System.out.println(\"  end\");\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          // Gather all children sharing the same parent as\n          // nextChildDoc\n\n          parentDoc = parentBits.nextSetBit(nextChildDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          checkOrthogonal(nextChildDoc, parentDoc);\n\n          //System.out.println(\"  parentDoc=\" + parentDoc);\n          assert parentDoc != DocIdSetIterator.NO_MORE_DOCS;\n\n          float totalScore = 0;\n          float maxScore = Float.NEGATIVE_INFINITY;\n          float minScore = Float.POSITIVE_INFINITY;\n\n          childDocUpto = 0;\n          parentFreq = 0;\n          do {\n\n            //System.out.println(\"  c=\" + nextChildDoc);\n            if (pendingChildDocs != null && pendingChildDocs.length == childDocUpto) {\n              pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n            }\n            if (pendingChildScores != null && scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {\n              pendingChildScores = ArrayUtil.grow(pendingChildScores);\n            }\n            if (pendingChildDocs != null) {\n              pendingChildDocs[childDocUpto] = nextChildDoc;\n            }\n            if (scoreMode != ScoreMode.None) {\n              // TODO: specialize this into dedicated classes per-scoreMode\n              final float childScore = childScorer.score();\n              final int childFreq = childScorer.freq();\n              if (pendingChildScores != null) {\n                pendingChildScores[childDocUpto] = childScore;\n              }\n              maxScore = Math.max(childScore, maxScore);\n              minScore = Math.min(childScore, minScore);\n              totalScore += childScore;\n              parentFreq += childFreq;\n            }\n            childDocUpto++;\n            nextChildDoc = childIt.nextDoc();\n          } while (nextChildDoc < parentDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          checkOrthogonal(nextChildDoc, parentDoc);\n\n          switch(scoreMode) {\n          case Avg:\n            parentScore = totalScore / childDocUpto;\n            break;\n          case Max:\n            parentScore = maxScore;\n            break;\n          case Min:\n            parentScore = minScore;\n            break;\n          case Total:\n            parentScore = totalScore;\n            break;\n          case None:\n            break;\n          }\n\n          //System.out.println(\"  return parentDoc=\" + parentDoc + \" childDocUpto=\" + childDocUpto);\n          return parentDoc;\n        }\n\n        @Override\n        public int advance(int parentTarget) throws IOException {\n\n          //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n          if (parentTarget == NO_MORE_DOCS) {\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          if (parentTarget == 0) {\n            // Callers should only be passing in a docID from\n            // the parent space, so this means this parent\n            // has no children (it got docID 0), so it cannot\n            // possibly match.  We must handle this case\n            // separately otherwise we pass invalid -1 to\n            // prevSetBit below:\n            return nextDoc();\n          }\n\n          prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n          //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n          assert prevParentDoc >= parentDoc;\n          if (prevParentDoc > nextChildDoc) {\n            nextChildDoc = childIt.advance(prevParentDoc);\n            // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n          //} else {\n            //System.out.println(\"  skip childScorer advance\");\n          }\n\n          // Parent & child docs are supposed to be orthogonal:\n          checkOrthogonal(nextChildDoc, prevParentDoc);\n\n          final int nd = nextDoc();\n          //System.out.println(\"  return nextParentDoc=\" + nd);\n          return nd;\n        }\n\n        @Override\n        public int docID() {\n          return parentDoc;\n        }\n\n        @Override\n        public long cost() {\n          return childIt.cost();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        final DocIdSetIterator childIt = childScorer.iterator();\n\n        @Override\n        public int nextDoc() throws IOException {\n          //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n          if (nextChildDoc == NO_MORE_DOCS) {\n            //System.out.println(\"  end\");\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          // Gather all children sharing the same parent as\n          // nextChildDoc\n\n          parentDoc = parentBits.nextSetBit(nextChildDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          if (nextChildDoc == parentDoc) {\n            throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n          }\n\n          //System.out.println(\"  parentDoc=\" + parentDoc);\n          assert parentDoc != DocIdSetIterator.NO_MORE_DOCS;\n\n          float totalScore = 0;\n          float maxScore = Float.NEGATIVE_INFINITY;\n          float minScore = Float.POSITIVE_INFINITY;\n\n          childDocUpto = 0;\n          parentFreq = 0;\n          do {\n\n            //System.out.println(\"  c=\" + nextChildDoc);\n            if (pendingChildDocs != null && pendingChildDocs.length == childDocUpto) {\n              pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n            }\n            if (pendingChildScores != null && scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {\n              pendingChildScores = ArrayUtil.grow(pendingChildScores);\n            }\n            if (pendingChildDocs != null) {\n              pendingChildDocs[childDocUpto] = nextChildDoc;\n            }\n            if (scoreMode != ScoreMode.None) {\n              // TODO: specialize this into dedicated classes per-scoreMode\n              final float childScore = childScorer.score();\n              final int childFreq = childScorer.freq();\n              if (pendingChildScores != null) {\n                pendingChildScores[childDocUpto] = childScore;\n              }\n              maxScore = Math.max(childScore, maxScore);\n              minScore = Math.min(childScore, minScore);\n              totalScore += childScore;\n              parentFreq += childFreq;\n            }\n            childDocUpto++;\n            nextChildDoc = childIt.nextDoc();\n          } while (nextChildDoc < parentDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          if (nextChildDoc == parentDoc) {\n            throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n          }\n\n          switch(scoreMode) {\n          case Avg:\n            parentScore = totalScore / childDocUpto;\n            break;\n          case Max:\n            parentScore = maxScore;\n            break;\n          case Min:\n            parentScore = minScore;\n            break;\n          case Total:\n            parentScore = totalScore;\n            break;\n          case None:\n            break;\n          }\n\n          //System.out.println(\"  return parentDoc=\" + parentDoc + \" childDocUpto=\" + childDocUpto);\n          return parentDoc;\n        }\n\n        @Override\n        public int advance(int parentTarget) throws IOException {\n\n          //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n          if (parentTarget == NO_MORE_DOCS) {\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          if (parentTarget == 0) {\n            // Callers should only be passing in a docID from\n            // the parent space, so this means this parent\n            // has no children (it got docID 0), so it cannot\n            // possibly match.  We must handle this case\n            // separately otherwise we pass invalid -1 to\n            // prevSetBit below:\n            return nextDoc();\n          }\n\n          prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n          //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n          assert prevParentDoc >= parentDoc;\n          if (prevParentDoc > nextChildDoc) {\n            nextChildDoc = childIt.advance(prevParentDoc);\n            // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n          //} else {\n            //System.out.println(\"  skip childScorer advance\");\n          }\n\n          // Parent & child docs are supposed to be orthogonal:\n          if (nextChildDoc == prevParentDoc) {\n            throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n          }\n\n          final int nd = nextDoc();\n          //System.out.println(\"  return nextParentDoc=\" + nd);\n          return nd;\n        }\n\n        @Override\n        public int docID() {\n          return parentDoc;\n        }\n\n        @Override\n        public long cost() {\n          return childIt.cost();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#iterator().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        final DocIdSetIterator childIt = childScorer.iterator();\n\n        @Override\n        public int nextDoc() throws IOException {\n          //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n          if (nextChildDoc == NO_MORE_DOCS) {\n            //System.out.println(\"  end\");\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          // Gather all children sharing the same parent as\n          // nextChildDoc\n\n          parentDoc = parentBits.nextSetBit(nextChildDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          checkOrthogonal(nextChildDoc, parentDoc);\n\n          //System.out.println(\"  parentDoc=\" + parentDoc);\n          assert parentDoc != DocIdSetIterator.NO_MORE_DOCS;\n\n          float totalScore = 0;\n          float maxScore = Float.NEGATIVE_INFINITY;\n          float minScore = Float.POSITIVE_INFINITY;\n\n          childDocUpto = 0;\n          parentFreq = 0;\n          do {\n\n            //System.out.println(\"  c=\" + nextChildDoc);\n            if (pendingChildDocs != null && pendingChildDocs.length == childDocUpto) {\n              pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n            }\n            if (pendingChildScores != null && scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {\n              pendingChildScores = ArrayUtil.grow(pendingChildScores);\n            }\n            if (pendingChildDocs != null) {\n              pendingChildDocs[childDocUpto] = nextChildDoc;\n            }\n            if (scoreMode != ScoreMode.None) {\n              // TODO: specialize this into dedicated classes per-scoreMode\n              final float childScore = childScorer.score();\n              final int childFreq = childScorer.freq();\n              if (pendingChildScores != null) {\n                pendingChildScores[childDocUpto] = childScore;\n              }\n              maxScore = Math.max(childScore, maxScore);\n              minScore = Math.min(childScore, minScore);\n              totalScore += childScore;\n              parentFreq += childFreq;\n            }\n            childDocUpto++;\n            nextChildDoc = childIt.nextDoc();\n          } while (nextChildDoc < parentDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          checkOrthogonal(nextChildDoc, parentDoc);\n\n          switch(scoreMode) {\n          case Avg:\n            parentScore = totalScore / childDocUpto;\n            break;\n          case Max:\n            parentScore = maxScore;\n            break;\n          case Min:\n            parentScore = minScore;\n            break;\n          case Total:\n            parentScore = totalScore;\n            break;\n          case None:\n            break;\n          }\n\n          //System.out.println(\"  return parentDoc=\" + parentDoc + \" childDocUpto=\" + childDocUpto);\n          return parentDoc;\n        }\n\n        @Override\n        public int advance(int parentTarget) throws IOException {\n\n          //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n          if (parentTarget == NO_MORE_DOCS) {\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          if (parentTarget == 0) {\n            // Callers should only be passing in a docID from\n            // the parent space, so this means this parent\n            // has no children (it got docID 0), so it cannot\n            // possibly match.  We must handle this case\n            // separately otherwise we pass invalid -1 to\n            // prevSetBit below:\n            return nextDoc();\n          }\n\n          prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n          //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n          assert prevParentDoc >= parentDoc;\n          if (prevParentDoc > nextChildDoc) {\n            nextChildDoc = childIt.advance(prevParentDoc);\n            // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n          //} else {\n            //System.out.println(\"  skip childScorer advance\");\n          }\n\n          // Parent & child docs are supposed to be orthogonal:\n          checkOrthogonal(nextChildDoc, prevParentDoc);\n\n          final int nd = nextDoc();\n          //System.out.println(\"  return nextParentDoc=\" + nd);\n          return nd;\n        }\n\n        @Override\n        public int docID() {\n          return parentDoc;\n        }\n\n        @Override\n        public long cost() {\n          return childIt.cost();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        final DocIdSetIterator childIt = childScorer.iterator();\n\n        @Override\n        public int nextDoc() throws IOException {\n          //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n          if (nextChildDoc == NO_MORE_DOCS) {\n            //System.out.println(\"  end\");\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          // Gather all children sharing the same parent as\n          // nextChildDoc\n\n          parentDoc = parentBits.nextSetBit(nextChildDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          if (nextChildDoc == parentDoc) {\n            throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n          }\n\n          //System.out.println(\"  parentDoc=\" + parentDoc);\n          assert parentDoc != DocIdSetIterator.NO_MORE_DOCS;\n\n          float totalScore = 0;\n          float maxScore = Float.NEGATIVE_INFINITY;\n          float minScore = Float.POSITIVE_INFINITY;\n\n          childDocUpto = 0;\n          parentFreq = 0;\n          do {\n\n            //System.out.println(\"  c=\" + nextChildDoc);\n            if (pendingChildDocs != null && pendingChildDocs.length == childDocUpto) {\n              pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n            }\n            if (pendingChildScores != null && scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {\n              pendingChildScores = ArrayUtil.grow(pendingChildScores);\n            }\n            if (pendingChildDocs != null) {\n              pendingChildDocs[childDocUpto] = nextChildDoc;\n            }\n            if (scoreMode != ScoreMode.None) {\n              // TODO: specialize this into dedicated classes per-scoreMode\n              final float childScore = childScorer.score();\n              final int childFreq = childScorer.freq();\n              if (pendingChildScores != null) {\n                pendingChildScores[childDocUpto] = childScore;\n              }\n              maxScore = Math.max(childScore, maxScore);\n              minScore = Math.min(childScore, minScore);\n              totalScore += childScore;\n              parentFreq += childFreq;\n            }\n            childDocUpto++;\n            nextChildDoc = childIt.nextDoc();\n          } while (nextChildDoc < parentDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          if (nextChildDoc == parentDoc) {\n            throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n          }\n\n          switch(scoreMode) {\n          case Avg:\n            parentScore = totalScore / childDocUpto;\n            break;\n          case Max:\n            parentScore = maxScore;\n            break;\n          case Min:\n            parentScore = minScore;\n            break;\n          case Total:\n            parentScore = totalScore;\n            break;\n          case None:\n            break;\n          }\n\n          //System.out.println(\"  return parentDoc=\" + parentDoc + \" childDocUpto=\" + childDocUpto);\n          return parentDoc;\n        }\n\n        @Override\n        public int advance(int parentTarget) throws IOException {\n\n          //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n          if (parentTarget == NO_MORE_DOCS) {\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          if (parentTarget == 0) {\n            // Callers should only be passing in a docID from\n            // the parent space, so this means this parent\n            // has no children (it got docID 0), so it cannot\n            // possibly match.  We must handle this case\n            // separately otherwise we pass invalid -1 to\n            // prevSetBit below:\n            return nextDoc();\n          }\n\n          prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n          //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n          assert prevParentDoc >= parentDoc;\n          if (prevParentDoc > nextChildDoc) {\n            nextChildDoc = childIt.advance(prevParentDoc);\n            // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n          //} else {\n            //System.out.println(\"  skip childScorer advance\");\n          }\n\n          // Parent & child docs are supposed to be orthogonal:\n          if (nextChildDoc == prevParentDoc) {\n            throw new IllegalStateException(\"child query must only match non-parent docs, but parent docID=\" + nextChildDoc + \" matched childScorer=\" + childScorer.getClass());\n          }\n\n          final int nd = nextDoc();\n          //System.out.println(\"  return nextParentDoc=\" + nd);\n          return nd;\n        }\n\n        @Override\n        public int docID() {\n          return parentDoc;\n        }\n\n        @Override\n        public long cost() {\n          return childIt.cost();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d9452e13e015fa1187b0b1bed1a1d08b9c96241","date":1485723373,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#iterator().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        final DocIdSetIterator childIt = childScorer.iterator();\n\n        @Override\n        public int nextDoc() throws IOException {\n          //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n          if (nextChildDoc == NO_MORE_DOCS) {\n            //System.out.println(\"  end\");\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          // Gather all children sharing the same parent as\n          // nextChildDoc\n\n          parentDoc = parentBits.nextSetBit(nextChildDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          checkOrthogonal(nextChildDoc, parentDoc);\n\n          //System.out.println(\"  parentDoc=\" + parentDoc);\n          assert parentDoc != DocIdSetIterator.NO_MORE_DOCS;\n\n          float totalScore = 0;\n          float maxScore = Float.NEGATIVE_INFINITY;\n          float minScore = Float.POSITIVE_INFINITY;\n\n          childDocUpto = 0;\n          parentFreq = 0;\n          do {\n\n            //System.out.println(\"  c=\" + nextChildDoc);\n            if (scoreMode != ScoreMode.None) {\n              // TODO: specialize this into dedicated classes per-scoreMode\n              final float childScore = childScorer.score();\n              final int childFreq = childScorer.freq();\n              maxScore = Math.max(childScore, maxScore);\n              minScore = Math.min(childScore, minScore);\n              totalScore += childScore;\n              parentFreq += childFreq;\n            }\n            childDocUpto++;\n            nextChildDoc = childIt.nextDoc();\n          } while (nextChildDoc < parentDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          checkOrthogonal(nextChildDoc, parentDoc);\n\n          switch(scoreMode) {\n          case Avg:\n            parentScore = totalScore / childDocUpto;\n            break;\n          case Max:\n            parentScore = maxScore;\n            break;\n          case Min:\n            parentScore = minScore;\n            break;\n          case Total:\n            parentScore = totalScore;\n            break;\n          case None:\n            break;\n          }\n\n          //System.out.println(\"  return parentDoc=\" + parentDoc + \" childDocUpto=\" + childDocUpto);\n          return parentDoc;\n        }\n\n        @Override\n        public int advance(int parentTarget) throws IOException {\n\n          //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n          if (parentTarget == NO_MORE_DOCS) {\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          if (parentTarget == 0) {\n            // Callers should only be passing in a docID from\n            // the parent space, so this means this parent\n            // has no children (it got docID 0), so it cannot\n            // possibly match.  We must handle this case\n            // separately otherwise we pass invalid -1 to\n            // prevSetBit below:\n            return nextDoc();\n          }\n\n          prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n          //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n          assert prevParentDoc >= parentDoc;\n          if (prevParentDoc > nextChildDoc) {\n            nextChildDoc = childIt.advance(prevParentDoc);\n            // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n          //} else {\n            //System.out.println(\"  skip childScorer advance\");\n          }\n\n          // Parent & child docs are supposed to be orthogonal:\n          checkOrthogonal(nextChildDoc, prevParentDoc);\n\n          final int nd = nextDoc();\n          //System.out.println(\"  return nextParentDoc=\" + nd);\n          return nd;\n        }\n\n        @Override\n        public int docID() {\n          return parentDoc;\n        }\n\n        @Override\n        public long cost() {\n          return childIt.cost();\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        final DocIdSetIterator childIt = childScorer.iterator();\n\n        @Override\n        public int nextDoc() throws IOException {\n          //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n          if (nextChildDoc == NO_MORE_DOCS) {\n            //System.out.println(\"  end\");\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          // Gather all children sharing the same parent as\n          // nextChildDoc\n\n          parentDoc = parentBits.nextSetBit(nextChildDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          checkOrthogonal(nextChildDoc, parentDoc);\n\n          //System.out.println(\"  parentDoc=\" + parentDoc);\n          assert parentDoc != DocIdSetIterator.NO_MORE_DOCS;\n\n          float totalScore = 0;\n          float maxScore = Float.NEGATIVE_INFINITY;\n          float minScore = Float.POSITIVE_INFINITY;\n\n          childDocUpto = 0;\n          parentFreq = 0;\n          do {\n\n            //System.out.println(\"  c=\" + nextChildDoc);\n            if (pendingChildDocs != null && pendingChildDocs.length == childDocUpto) {\n              pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n            }\n            if (pendingChildScores != null && scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {\n              pendingChildScores = ArrayUtil.grow(pendingChildScores);\n            }\n            if (pendingChildDocs != null) {\n              pendingChildDocs[childDocUpto] = nextChildDoc;\n            }\n            if (scoreMode != ScoreMode.None) {\n              // TODO: specialize this into dedicated classes per-scoreMode\n              final float childScore = childScorer.score();\n              final int childFreq = childScorer.freq();\n              if (pendingChildScores != null) {\n                pendingChildScores[childDocUpto] = childScore;\n              }\n              maxScore = Math.max(childScore, maxScore);\n              minScore = Math.min(childScore, minScore);\n              totalScore += childScore;\n              parentFreq += childFreq;\n            }\n            childDocUpto++;\n            nextChildDoc = childIt.nextDoc();\n          } while (nextChildDoc < parentDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          checkOrthogonal(nextChildDoc, parentDoc);\n\n          switch(scoreMode) {\n          case Avg:\n            parentScore = totalScore / childDocUpto;\n            break;\n          case Max:\n            parentScore = maxScore;\n            break;\n          case Min:\n            parentScore = minScore;\n            break;\n          case Total:\n            parentScore = totalScore;\n            break;\n          case None:\n            break;\n          }\n\n          //System.out.println(\"  return parentDoc=\" + parentDoc + \" childDocUpto=\" + childDocUpto);\n          return parentDoc;\n        }\n\n        @Override\n        public int advance(int parentTarget) throws IOException {\n\n          //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n          if (parentTarget == NO_MORE_DOCS) {\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          if (parentTarget == 0) {\n            // Callers should only be passing in a docID from\n            // the parent space, so this means this parent\n            // has no children (it got docID 0), so it cannot\n            // possibly match.  We must handle this case\n            // separately otherwise we pass invalid -1 to\n            // prevSetBit below:\n            return nextDoc();\n          }\n\n          prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n          //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n          assert prevParentDoc >= parentDoc;\n          if (prevParentDoc > nextChildDoc) {\n            nextChildDoc = childIt.advance(prevParentDoc);\n            // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n          //} else {\n            //System.out.println(\"  skip childScorer advance\");\n          }\n\n          // Parent & child docs are supposed to be orthogonal:\n          checkOrthogonal(nextChildDoc, prevParentDoc);\n\n          final int nd = nextDoc();\n          //System.out.println(\"  return nextParentDoc=\" + nd);\n          return nd;\n        }\n\n        @Override\n        public int docID() {\n          return parentDoc;\n        }\n\n        @Override\n        public long cost() {\n          return childIt.cost();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c","date":1485769582,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#iterator().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() {\n      if (parentTwoPhase == null) {\n        // the approximation is exact\n        return parentApproximation;\n      } else {\n        return TwoPhaseIterator.asDocIdSetIterator(parentTwoPhase);\n      }\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        final DocIdSetIterator childIt = childScorer.iterator();\n\n        @Override\n        public int nextDoc() throws IOException {\n          //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n          if (nextChildDoc == NO_MORE_DOCS) {\n            //System.out.println(\"  end\");\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          // Gather all children sharing the same parent as\n          // nextChildDoc\n\n          parentDoc = parentBits.nextSetBit(nextChildDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          checkOrthogonal(nextChildDoc, parentDoc);\n\n          //System.out.println(\"  parentDoc=\" + parentDoc);\n          assert parentDoc != DocIdSetIterator.NO_MORE_DOCS;\n\n          float totalScore = 0;\n          float maxScore = Float.NEGATIVE_INFINITY;\n          float minScore = Float.POSITIVE_INFINITY;\n\n          childDocUpto = 0;\n          parentFreq = 0;\n          do {\n\n            //System.out.println(\"  c=\" + nextChildDoc);\n            if (scoreMode != ScoreMode.None) {\n              // TODO: specialize this into dedicated classes per-scoreMode\n              final float childScore = childScorer.score();\n              final int childFreq = childScorer.freq();\n              maxScore = Math.max(childScore, maxScore);\n              minScore = Math.min(childScore, minScore);\n              totalScore += childScore;\n              parentFreq += childFreq;\n            }\n            childDocUpto++;\n            nextChildDoc = childIt.nextDoc();\n          } while (nextChildDoc < parentDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          checkOrthogonal(nextChildDoc, parentDoc);\n\n          switch(scoreMode) {\n          case Avg:\n            parentScore = totalScore / childDocUpto;\n            break;\n          case Max:\n            parentScore = maxScore;\n            break;\n          case Min:\n            parentScore = minScore;\n            break;\n          case Total:\n            parentScore = totalScore;\n            break;\n          case None:\n            break;\n          }\n\n          //System.out.println(\"  return parentDoc=\" + parentDoc + \" childDocUpto=\" + childDocUpto);\n          return parentDoc;\n        }\n\n        @Override\n        public int advance(int parentTarget) throws IOException {\n\n          //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n          if (parentTarget == NO_MORE_DOCS) {\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          if (parentTarget == 0) {\n            // Callers should only be passing in a docID from\n            // the parent space, so this means this parent\n            // has no children (it got docID 0), so it cannot\n            // possibly match.  We must handle this case\n            // separately otherwise we pass invalid -1 to\n            // prevSetBit below:\n            return nextDoc();\n          }\n\n          prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n          //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n          assert prevParentDoc >= parentDoc;\n          if (prevParentDoc > nextChildDoc) {\n            nextChildDoc = childIt.advance(prevParentDoc);\n            // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n          //} else {\n            //System.out.println(\"  skip childScorer advance\");\n          }\n\n          // Parent & child docs are supposed to be orthogonal:\n          checkOrthogonal(nextChildDoc, prevParentDoc);\n\n          final int nd = nextDoc();\n          //System.out.println(\"  return nextParentDoc=\" + nd);\n          return nd;\n        }\n\n        @Override\n        public int docID() {\n          return parentDoc;\n        }\n\n        @Override\n        public long cost() {\n          return childIt.cost();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#iterator().mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.BlockJoinScorer#iterator().mjava","sourceNew":"    @Override\n    public DocIdSetIterator iterator() {\n      if (parentTwoPhase == null) {\n        // the approximation is exact\n        return parentApproximation;\n      } else {\n        return TwoPhaseIterator.asDocIdSetIterator(parentTwoPhase);\n      }\n    }\n\n","sourceOld":"    @Override\n    public DocIdSetIterator iterator() {\n      return new DocIdSetIterator() {\n        final DocIdSetIterator childIt = childScorer.iterator();\n\n        @Override\n        public int nextDoc() throws IOException {\n          //System.out.println(\"Q.nextDoc() nextChildDoc=\" + nextChildDoc);\n          if (nextChildDoc == NO_MORE_DOCS) {\n            //System.out.println(\"  end\");\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          // Gather all children sharing the same parent as\n          // nextChildDoc\n\n          parentDoc = parentBits.nextSetBit(nextChildDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          checkOrthogonal(nextChildDoc, parentDoc);\n\n          //System.out.println(\"  parentDoc=\" + parentDoc);\n          assert parentDoc != DocIdSetIterator.NO_MORE_DOCS;\n\n          float totalScore = 0;\n          float maxScore = Float.NEGATIVE_INFINITY;\n          float minScore = Float.POSITIVE_INFINITY;\n\n          childDocUpto = 0;\n          parentFreq = 0;\n          do {\n\n            //System.out.println(\"  c=\" + nextChildDoc);\n            if (pendingChildDocs != null && pendingChildDocs.length == childDocUpto) {\n              pendingChildDocs = ArrayUtil.grow(pendingChildDocs);\n            }\n            if (pendingChildScores != null && scoreMode != ScoreMode.None && pendingChildScores.length == childDocUpto) {\n              pendingChildScores = ArrayUtil.grow(pendingChildScores);\n            }\n            if (pendingChildDocs != null) {\n              pendingChildDocs[childDocUpto] = nextChildDoc;\n            }\n            if (scoreMode != ScoreMode.None) {\n              // TODO: specialize this into dedicated classes per-scoreMode\n              final float childScore = childScorer.score();\n              final int childFreq = childScorer.freq();\n              if (pendingChildScores != null) {\n                pendingChildScores[childDocUpto] = childScore;\n              }\n              maxScore = Math.max(childScore, maxScore);\n              minScore = Math.min(childScore, minScore);\n              totalScore += childScore;\n              parentFreq += childFreq;\n            }\n            childDocUpto++;\n            nextChildDoc = childIt.nextDoc();\n          } while (nextChildDoc < parentDoc);\n\n          // Parent & child docs are supposed to be\n          // orthogonal:\n          checkOrthogonal(nextChildDoc, parentDoc);\n\n          switch(scoreMode) {\n          case Avg:\n            parentScore = totalScore / childDocUpto;\n            break;\n          case Max:\n            parentScore = maxScore;\n            break;\n          case Min:\n            parentScore = minScore;\n            break;\n          case Total:\n            parentScore = totalScore;\n            break;\n          case None:\n            break;\n          }\n\n          //System.out.println(\"  return parentDoc=\" + parentDoc + \" childDocUpto=\" + childDocUpto);\n          return parentDoc;\n        }\n\n        @Override\n        public int advance(int parentTarget) throws IOException {\n\n          //System.out.println(\"Q.advance parentTarget=\" + parentTarget);\n          if (parentTarget == NO_MORE_DOCS) {\n            return parentDoc = NO_MORE_DOCS;\n          }\n\n          if (parentTarget == 0) {\n            // Callers should only be passing in a docID from\n            // the parent space, so this means this parent\n            // has no children (it got docID 0), so it cannot\n            // possibly match.  We must handle this case\n            // separately otherwise we pass invalid -1 to\n            // prevSetBit below:\n            return nextDoc();\n          }\n\n          prevParentDoc = parentBits.prevSetBit(parentTarget-1);\n\n          //System.out.println(\"  rolled back to prevParentDoc=\" + prevParentDoc + \" vs parentDoc=\" + parentDoc);\n          assert prevParentDoc >= parentDoc;\n          if (prevParentDoc > nextChildDoc) {\n            nextChildDoc = childIt.advance(prevParentDoc);\n            // System.out.println(\"  childScorer advanced to child docID=\" + nextChildDoc);\n          //} else {\n            //System.out.println(\"  skip childScorer advance\");\n          }\n\n          // Parent & child docs are supposed to be orthogonal:\n          checkOrthogonal(nextChildDoc, prevParentDoc);\n\n          final int nd = nextDoc();\n          //System.out.println(\"  return nextParentDoc=\" + nd);\n          return nd;\n        }\n\n        @Override\n        public int docID() {\n          return parentDoc;\n        }\n\n        @Override\n        public long cost() {\n          return childIt.cost();\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7dd748bb245633a8195281556bb0e68a6ea97d18","37efbd78d0e524f5adef66f50e9d435283012a15"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c"],"ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"37efbd78d0e524f5adef66f50e9d435283012a15":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9d9452e13e015fa1187b0b1bed1a1d08b9c96241","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","37efbd78d0e524f5adef66f50e9d435283012a15","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"37efbd78d0e524f5adef66f50e9d435283012a15":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9d9452e13e015fa1187b0b1bed1a1d08b9c96241":["ef7f129c81e71e8f69a5893aaf8b569bb7fe9b4c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}