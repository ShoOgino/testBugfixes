{"path":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testBasicLeaderElection().mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":1,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testBasicLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OnlyLeaderIndexesTest#basicLeaderElectionTest().mjava","sourceNew":"  public void testBasicLeaderElection() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), collectionName);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .process(cloudClient, collectionName);\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    ChaosMonkey.kill(oldLeaderJetty);\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, collectionName);\n    ChaosMonkey.start(oldLeaderJetty);\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,4, cluster.getJettySolrRunners());\n    new UpdateRequest()\n        .commit(cloudClient, collectionName);\n    waitForNumDocsInAllActiveReplicas(4, 0);\n  }\n\n","sourceOld":"  public void basicLeaderElectionTest() throws Exception {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .process(cloudClient, COLLECTION);\n    String oldLeader = getLeader();\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    ChaosMonkey.kill(oldLeaderJetty);\n    for (int i = 0; i < 60; i++) { // wait till leader is changed\n      if (!oldLeader.equals(getLeader())) {\n        break;\n      }\n      Thread.sleep(100);\n    }\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, COLLECTION);\n    ChaosMonkey.start(oldLeaderJetty);\n    AbstractDistribZkTestBase.waitForRecoveriesToFinish(COLLECTION, cluster.getSolrClient().getZkStateReader(),\n        false, true, 60);\n    checkRTG(1,4, cluster.getJettySolrRunners());\n    new UpdateRequest()\n        .commit(cloudClient, COLLECTION);\n    checkShardConsistency(4,1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testBasicLeaderElection().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicLeaderElection() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), collectionName);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .process(cloudClient, collectionName);\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    ChaosMonkey.kill(oldLeaderJetty);\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, collectionName);\n    ChaosMonkey.start(oldLeaderJetty);\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,4, cluster.getJettySolrRunners());\n    new UpdateRequest()\n        .commit(cloudClient, collectionName);\n    waitForNumDocsInAllActiveReplicas(4, 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testBasicLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testBasicLeaderElection().mjava","sourceNew":"  public void testBasicLeaderElection() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), collectionName);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .process(cloudClient, collectionName);\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, collectionName);\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,4, cluster.getJettySolrRunners());\n    new UpdateRequest()\n        .commit(cloudClient, collectionName);\n    waitForNumDocsInAllActiveReplicas(4, 0);\n  }\n\n","sourceOld":"  public void testBasicLeaderElection() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), collectionName);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .process(cloudClient, collectionName);\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    ChaosMonkey.kill(oldLeaderJetty);\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, collectionName);\n    ChaosMonkey.start(oldLeaderJetty);\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,4, cluster.getJettySolrRunners());\n    new UpdateRequest()\n        .commit(cloudClient, collectionName);\n    waitForNumDocsInAllActiveReplicas(4, 0);\n  }\n\n","bugFix":["61c45e99cf6676da48f19d7511c73712ad39402b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f43ec94a8dd9ee8d862fee49bc3124423c77142b","date":1550813629,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testBasicLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testBasicLeaderElection().mjava","sourceNew":"  public void testBasicLeaderElection() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), collectionName);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .process(cloudClient, collectionName);\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, collectionName);\n    oldLeaderJetty.start();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,4, cluster.getJettySolrRunners());\n    new UpdateRequest()\n        .commit(cloudClient, collectionName);\n    waitForNumDocsInAllActiveReplicas(4, 0);\n  }\n\n","sourceOld":"  public void testBasicLeaderElection() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), collectionName);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .process(cloudClient, collectionName);\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, collectionName);\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,4, cluster.getJettySolrRunners());\n    new UpdateRequest()\n        .commit(cloudClient, collectionName);\n    waitForNumDocsInAllActiveReplicas(4, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4","date":1551083645,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testBasicLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testBasicLeaderElection().mjava","sourceNew":"  public void testBasicLeaderElection() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), collectionName);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .process(cloudClient, collectionName);\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, collectionName);\n    oldLeaderJetty.start();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,4, cluster.getJettySolrRunners());\n    new UpdateRequest()\n        .commit(cloudClient, collectionName);\n    waitForNumDocsInAllActiveReplicas(4, 0);\n  }\n\n","sourceOld":"  public void testBasicLeaderElection() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), collectionName);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .process(cloudClient, collectionName);\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, collectionName);\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,4, cluster.getJettySolrRunners());\n    new UpdateRequest()\n        .commit(cloudClient, collectionName);\n    waitForNumDocsInAllActiveReplicas(4, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf5b93713fb0adca4f2a88e0a629554bf1ac2866","date":1571852796,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testBasicLeaderElection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestTlogReplica#testBasicLeaderElection().mjava","sourceNew":"  public void testBasicLeaderElection() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), collectionName);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .process(cloudClient, collectionName);\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n\n    // Even after the replica is gone, a leader may not be elected yet. Wait for it. \n    waitForLeaderChange(oldLeaderJetty, \"shard1\");\n    \n    new UpdateRequest()   \n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, collectionName);\n    oldLeaderJetty.start();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,4, cluster.getJettySolrRunners());\n    new UpdateRequest()\n        .commit(cloudClient, collectionName);\n    waitForNumDocsInAllActiveReplicas(4, 0);\n  }\n\n","sourceOld":"  public void testBasicLeaderElection() throws Exception {\n    createAndWaitForCollection(1,0,2,0);\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    new UpdateRequest()\n        .deleteByQuery(\"*:*\")\n        .commit(cluster.getSolrClient(), collectionName);\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"1\"))\n        .add(sdoc(\"id\", \"2\"))\n        .process(cloudClient, collectionName);\n    JettySolrRunner oldLeaderJetty = getSolrRunner(true).get(0);\n    oldLeaderJetty.stop();\n    waitForState(\"Replica not removed\", collectionName, activeReplicaCount(0, 1, 0));\n    new UpdateRequest()\n        .add(sdoc(\"id\", \"3\"))\n        .add(sdoc(\"id\", \"4\"))\n        .process(cloudClient, collectionName);\n    oldLeaderJetty.start();\n    waitForState(\"Replica not added\", collectionName, activeReplicaCount(0, 2, 0));\n    checkRTG(1,4, cluster.getJettySolrRunners());\n    new UpdateRequest()\n        .commit(cloudClient, collectionName);\n    waitForNumDocsInAllActiveReplicas(4, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f43ec94a8dd9ee8d862fee49bc3124423c77142b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["61c45e99cf6676da48f19d7511c73712ad39402b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bf5b93713fb0adca4f2a88e0a629554bf1ac2866":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","f43ec94a8dd9ee8d862fee49bc3124423c77142b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf5b93713fb0adca4f2a88e0a629554bf1ac2866"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"61c45e99cf6676da48f19d7511c73712ad39402b":["e9017cf144952056066919f1ebc7897ff9bd71b1","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"f43ec94a8dd9ee8d862fee49bc3124423c77142b":["0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["f43ec94a8dd9ee8d862fee49bc3124423c77142b","0d2d6c361b65277d72b2f3dd0f83b9721875e6b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"bf5b93713fb0adca4f2a88e0a629554bf1ac2866":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0d2d6c361b65277d72b2f3dd0f83b9721875e6b4":["bf5b93713fb0adca4f2a88e0a629554bf1ac2866"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}