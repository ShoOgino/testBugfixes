{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#assertSingleEvent(String,long).mjava","commits":[{"id":"914270355efc1f9583010cb165bb031a1e698f84","date":1546908784,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#assertSingleEvent(String,long).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Helper method for making some common assertions about {@link #events}:\n   * <ul>\n   *  <li>Exactly one event that is not null</li>\n   *  <li>Event refers to exactly one expected {@link TriggerEvent#NODE_NAMES}</li>\n   *  <li>Event has exactly one {@link TriggerEvent#EVENT_TIMES} (which matches {@link TriggerEvent#getEventTime}) which is less then the  <code>maxExpectedEventTimeNs</code></li>\n   * </ul>\n   * @return the event found so that other assertions can be made\n   */\n  private static TriggerEvent assertSingleEvent(final String expectedNodeName,\n                                                final long maxExpectedEventTimeNs) {\n    \n    assertEquals(\"Wrong number of events recorded: \" + events.toString(),\n                 1, events.size());\n    \n    final TriggerEvent event = events.iterator().next();\n    assertNotNull(\"null event???\", event);\n    assertNotNull(\"event is missing NODE_NAMES: \" + event, event.getProperty(TriggerEvent.NODE_NAMES));\n    assertEquals(\"event has incorrect NODE_NAMES: \" + event,\n                 Collections.singletonList(expectedNodeName),\n                 event.getProperty(TriggerEvent.NODE_NAMES));\n    \n    assertTrue(\"event TS is too late, should be before (max) expected TS @ \"\n               + maxExpectedEventTimeNs + \": \" + event,\n               event.getEventTime() < maxExpectedEventTimeNs);\n    \n    assertNotNull(\"event is missing EVENT_TIMES: \" + event, event.getProperty(TriggerEvent.EVENT_TIMES));\n    assertEquals(\"event has unexpeted number of EVENT_TIMES: \" + event,\n                 1, ((Collection)event.getProperty(TriggerEvent.EVENT_TIMES)).size());\n    assertEquals(\"event's TS doesn't match EVENT_TIMES: \" + event,\n                 event.getEventTime(),\n                 ((Collection)event.getProperty(TriggerEvent.EVENT_TIMES)).iterator().next());\n    return event;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#assertSingleEvent(String,long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Helper method for making some common assertions about {@link #events}:\n   * <ul>\n   *  <li>Exactly one event that is not null</li>\n   *  <li>Event refers to exactly one expected {@link TriggerEvent#NODE_NAMES}</li>\n   *  <li>Event has exactly one {@link TriggerEvent#EVENT_TIMES} (which matches {@link TriggerEvent#getEventTime}) which is less then the  <code>maxExpectedEventTimeNs</code></li>\n   * </ul>\n   * @return the event found so that other assertions can be made\n   */\n  private static TriggerEvent assertSingleEvent(final String expectedNodeName,\n                                                final long maxExpectedEventTimeNs) {\n    \n    assertEquals(\"Wrong number of events recorded: \" + events.toString(),\n                 1, events.size());\n    \n    final TriggerEvent event = events.iterator().next();\n    assertNotNull(\"null event???\", event);\n    assertNotNull(\"event is missing NODE_NAMES: \" + event, event.getProperty(TriggerEvent.NODE_NAMES));\n    assertEquals(\"event has incorrect NODE_NAMES: \" + event,\n                 Collections.singletonList(expectedNodeName),\n                 event.getProperty(TriggerEvent.NODE_NAMES));\n    \n    assertTrue(\"event TS is too late, should be before (max) expected TS @ \"\n               + maxExpectedEventTimeNs + \": \" + event,\n               event.getEventTime() < maxExpectedEventTimeNs);\n    \n    assertNotNull(\"event is missing EVENT_TIMES: \" + event, event.getProperty(TriggerEvent.EVENT_TIMES));\n    assertEquals(\"event has unexpeted number of EVENT_TIMES: \" + event,\n                 1, ((Collection)event.getProperty(TriggerEvent.EVENT_TIMES)).size());\n    assertEquals(\"event's TS doesn't match EVENT_TIMES: \" + event,\n                 event.getEventTime(),\n                 ((Collection)event.getProperty(TriggerEvent.EVENT_TIMES)).iterator().next());\n    return event;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"914270355efc1f9583010cb165bb031a1e698f84":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3f504512a03d978990cbff30db0522b354e846db":["914270355efc1f9583010cb165bb031a1e698f84"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"914270355efc1f9583010cb165bb031a1e698f84":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["914270355efc1f9583010cb165bb031a1e698f84"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}