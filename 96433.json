{"path":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.PerThreadPKLookup#lookup(BytesRef).mjava","commits":[{"id":"2ec69b66d099125761703a43f01bc34f1074f1c1","date":1400148734,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.PerThreadPKLookup#lookup(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    /** Returns docID if found, else -1. */\n    public int lookup(BytesRef id) throws IOException {\n      for(int seg=0;seg<numSegs;seg++) {\n        if (termsEnums[seg].seekExact(id)) {\n          docsEnums[seg] = termsEnums[seg].docs(liveDocs[seg], docsEnums[seg], 0);\n          int docID = docsEnums[seg].nextDoc();\n          if (docID != DocsEnum.NO_MORE_DOCS) {\n            return docBases[seg] + docID;\n          }\n          assert hasDeletions;\n        }\n      }\n\n      return -1;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccc69a67d5c846a04c7f71e28cb1914e3af895f3","date":1400252660,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.PerThreadPKLookup#lookup(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    /** Returns docID if found, else -1. */\n    public int lookup(BytesRef id) throws IOException {\n      for(int seg=0;seg<numSegs;seg++) {\n        if (termsEnums[seg].seekExact(id)) {\n          docsEnums[seg] = termsEnums[seg].docs(liveDocs[seg], docsEnums[seg], 0);\n          int docID = docsEnums[seg].nextDoc();\n          if (docID != DocsEnum.NO_MORE_DOCS) {\n            return docBases[seg] + docID;\n          }\n          assert hasDeletions;\n        }\n      }\n\n      return -1;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d615ef411046679022f6728bb2b876273d13ae","date":1400253450,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat.PerThreadVersionPKLookup#lookup(BytesRef,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.PerThreadPKLookup#lookup(BytesRef).mjava","sourceNew":"    /** Returns docID if found, else -1. */\n    public int lookup(BytesRef id, long version) throws IOException {\n      for(int seg=0;seg<numSegs;seg++) {\n        if (((IDVersionSegmentTermsEnum) termsEnums[seg]).seekExact(id, version)) {\n          if (VERBOSE) {\n            System.out.println(\"  found in seg=\" + termsEnums[seg]);\n          }\n          docsEnums[seg] = termsEnums[seg].docs(liveDocs[seg], docsEnums[seg], 0);\n          int docID = docsEnums[seg].nextDoc();\n          if (docID != DocsEnum.NO_MORE_DOCS) {\n            return docBases[seg] + docID;\n          }\n          assert hasDeletions;\n        }\n      }\n\n      return -1;\n    }\n\n","sourceOld":"    /** Returns docID if found, else -1. */\n    public int lookup(BytesRef id) throws IOException {\n      for(int seg=0;seg<numSegs;seg++) {\n        if (termsEnums[seg].seekExact(id)) {\n          docsEnums[seg] = termsEnums[seg].docs(liveDocs[seg], docsEnums[seg], 0);\n          int docID = docsEnums[seg].nextDoc();\n          if (docID != DocsEnum.NO_MORE_DOCS) {\n            return docBases[seg] + docID;\n          }\n          assert hasDeletions;\n        }\n      }\n\n      return -1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/codecs/idversion/TestIDVersionPostingsFormat.PerThreadVersionPKLookup#lookup(BytesRef,long).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTermsEnum.PerThreadPKLookup#lookup(BytesRef).mjava","sourceNew":"    /** Returns docID if found, else -1. */\n    public int lookup(BytesRef id, long version) throws IOException {\n      for(int seg=0;seg<numSegs;seg++) {\n        if (((IDVersionSegmentTermsEnum) termsEnums[seg]).seekExact(id, version)) {\n          if (VERBOSE) {\n            System.out.println(\"  found in seg=\" + termsEnums[seg]);\n          }\n          docsEnums[seg] = termsEnums[seg].docs(liveDocs[seg], docsEnums[seg], 0);\n          int docID = docsEnums[seg].nextDoc();\n          if (docID != DocsEnum.NO_MORE_DOCS) {\n            lastVersion = ((IDVersionSegmentTermsEnum) termsEnums[seg]).getVersion();\n            return docBases[seg] + docID;\n          }\n          assert hasDeletions;\n        }\n      }\n\n      return -1;\n    }\n\n","sourceOld":"    /** Returns docID if found, else -1. */\n    public int lookup(BytesRef id) throws IOException {\n      for(int seg=0;seg<numSegs;seg++) {\n        if (termsEnums[seg].seekExact(id)) {\n          docsEnums[seg] = termsEnums[seg].docs(liveDocs[seg], docsEnums[seg], 0);\n          int docID = docsEnums[seg].nextDoc();\n          if (docID != DocsEnum.NO_MORE_DOCS) {\n            return docBases[seg] + docID;\n          }\n          assert hasDeletions;\n        }\n      }\n\n      return -1;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["2ec69b66d099125761703a43f01bc34f1074f1c1","b7d615ef411046679022f6728bb2b876273d13ae"],"2ec69b66d099125761703a43f01bc34f1074f1c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7d615ef411046679022f6728bb2b876273d13ae":["2ec69b66d099125761703a43f01bc34f1074f1c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ec69b66d099125761703a43f01bc34f1074f1c1"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2ec69b66d099125761703a43f01bc34f1074f1c1":["4d637064d608752565d4f9f41b2497dfdfdde50e","b7d615ef411046679022f6728bb2b876273d13ae","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ec69b66d099125761703a43f01bc34f1074f1c1","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"b7d615ef411046679022f6728bb2b876273d13ae":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}