{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter.PendingOutputs#add(char[],int,int,int,int).mjava","commits":[{"id":"ffbcd36aff3bb411177ed61f02fb3d3aa9588d27","date":1333918532,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter.PendingOutputs#add(char[],int,int,int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter.PendingOutputs#add(char[],int,int,int).mjava","sourceNew":"    public void add(char[] output, int offset, int len, int endOffset, int posLength) {\n      if (count == outputs.length) {\n        final CharsRef[] next = new CharsRef[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(outputs, 0, next, 0, count);\n        outputs = next;\n      }\n      if (count == endOffsets.length) {\n        final int[] next = new int[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_INT)];\n        System.arraycopy(endOffsets, 0, next, 0, count);\n        endOffsets = next;\n      }\n      if (count == posLengths.length) {\n        final int[] next = new int[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_INT)];\n        System.arraycopy(posLengths, 0, next, 0, count);\n        posLengths = next;\n      }\n      if (outputs[count] == null) {\n        outputs[count] = new CharsRef();\n      }\n      outputs[count].copyChars(output, offset, len);\n      // endOffset can be -1, in which case we should simply\n      // use the endOffset of the input token, or X >= 0, in\n      // which case we use X as the endOffset for this output\n      endOffsets[count] = endOffset;\n      posLengths[count] = posLength;\n      count++;\n    }\n\n","sourceOld":"    public void add(char[] output, int offset, int len, int endOffset) {\n      if (count == outputs.length) {\n        final CharsRef[] next = new CharsRef[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(outputs, 0, next, 0, count);\n        outputs = next;\n      }\n      if (count == endOffsets.length) {\n        final int[] next = new int[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_INT)];\n        System.arraycopy(endOffsets, 0, next, 0, count);\n        endOffsets = next;\n      }\n      if (outputs[count] == null) {\n        outputs[count] = new CharsRef();\n      }\n      outputs[count].copyChars(output, offset, len);\n      // endOffset can be -1, in which case we should simply\n      // use the endOffset of the input token, or X >= 0, in\n      // which case we use X as the endOffset for this output\n      endOffsets[count] = endOffset;\n      count++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter.PendingOutputs#add(char[],int,int,int,int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymFilter.PendingOutputs#add(char[],int,int,int,int).mjava","sourceNew":"    public void add(char[] output, int offset, int len, int endOffset, int posLength) {\n      if (count == outputs.length) {\n        final CharsRef[] next = new CharsRef[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(outputs, 0, next, 0, count);\n        outputs = next;\n      }\n      if (count == endOffsets.length) {\n        final int[] next = new int[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_INT)];\n        System.arraycopy(endOffsets, 0, next, 0, count);\n        endOffsets = next;\n      }\n      if (count == posLengths.length) {\n        final int[] next = new int[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_INT)];\n        System.arraycopy(posLengths, 0, next, 0, count);\n        posLengths = next;\n      }\n      if (outputs[count] == null) {\n        outputs[count] = new CharsRef();\n      }\n      outputs[count].copyChars(output, offset, len);\n      // endOffset can be -1, in which case we should simply\n      // use the endOffset of the input token, or X >= 0, in\n      // which case we use X as the endOffset for this output\n      endOffsets[count] = endOffset;\n      posLengths[count] = posLength;\n      count++;\n    }\n\n","sourceOld":"    public void add(char[] output, int offset, int len, int endOffset, int posLength) {\n      if (count == outputs.length) {\n        final CharsRef[] next = new CharsRef[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_OBJECT_REF)];\n        System.arraycopy(outputs, 0, next, 0, count);\n        outputs = next;\n      }\n      if (count == endOffsets.length) {\n        final int[] next = new int[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_INT)];\n        System.arraycopy(endOffsets, 0, next, 0, count);\n        endOffsets = next;\n      }\n      if (count == posLengths.length) {\n        final int[] next = new int[ArrayUtil.oversize(1+count, RamUsageEstimator.NUM_BYTES_INT)];\n        System.arraycopy(posLengths, 0, next, 0, count);\n        posLengths = next;\n      }\n      if (outputs[count] == null) {\n        outputs[count] = new CharsRef();\n      }\n      outputs[count].copyChars(output, offset, len);\n      // endOffset can be -1, in which case we should simply\n      // use the endOffset of the input token, or X >= 0, in\n      // which case we use X as the endOffset for this output\n      endOffsets[count] = endOffset;\n      posLengths[count] = posLength;\n      count++;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ffbcd36aff3bb411177ed61f02fb3d3aa9588d27"],"ffbcd36aff3bb411177ed61f02fb3d3aa9588d27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ffbcd36aff3bb411177ed61f02fb3d3aa9588d27":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ffbcd36aff3bb411177ed61f02fb3d3aa9588d27"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}