{"path":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#getDocComparator(int,SortField).mjava","commits":[{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#getDocComparator(int,SortField).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  Sorter.DocComparator getDocComparator(int maxDoc, SortField sortField) throws IOException {\n    assert sortField instanceof SortedSetSortField;\n    assert finalOrds == null && finalOrdCounts == null && finalSortedValues == null && finalOrdMap == null;\n    int valueCount = hash.size();\n    finalOrds = pending.build();\n    finalOrdCounts = pendingCounts.build();\n    finalSortedValues = hash.sort();\n    finalOrdMap = new int[valueCount];\n    for (int ord = 0; ord < valueCount; ord++) {\n      finalOrdMap[finalSortedValues[ord]] = ord;\n    }\n\n    SortedSetSortField sf = (SortedSetSortField) sortField;\n    final SortedSetDocValues dvs =\n        new BufferedSortedSetDocValues(finalSortedValues, finalOrdMap, hash, finalOrds, finalOrdCounts, maxCount, docsWithField.iterator());\n    return Sorter.getDocComparator(maxDoc, sf, () -> SortedSetSelector.wrap(dvs, sf.getSelector()), () -> null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#getDocComparator(int,SortField).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  Sorter.DocComparator getDocComparator(int maxDoc, SortField sortField) throws IOException {\n    assert sortField instanceof SortedSetSortField;\n    assert finalOrds == null && finalOrdCounts == null && finalSortedValues == null && finalOrdMap == null;\n    int valueCount = hash.size();\n    finalOrds = pending.build();\n    finalOrdCounts = pendingCounts.build();\n    finalSortedValues = hash.sort();\n    finalOrdMap = new int[valueCount];\n    for (int ord = 0; ord < valueCount; ord++) {\n      finalOrdMap[finalSortedValues[ord]] = ord;\n    }\n\n    SortedSetSortField sf = (SortedSetSortField) sortField;\n    final SortedSetDocValues dvs =\n        new BufferedSortedSetDocValues(finalSortedValues, finalOrdMap, hash, finalOrds, finalOrdCounts, maxCount, docsWithField.iterator());\n    return Sorter.getDocComparator(maxDoc, sf, () -> SortedSetSelector.wrap(dvs, sf.getSelector()), () -> null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#getDocComparator(int,SortField).mjava","sourceNew":null,"sourceOld":"  @Override\n  Sorter.DocComparator getDocComparator(int maxDoc, SortField sortField) throws IOException {\n    assert sortField instanceof SortedSetSortField;\n    assert finalOrds == null && finalOrdCounts == null && finalSortedValues == null && finalOrdMap == null;\n    int valueCount = hash.size();\n    finalOrds = pending.build();\n    finalOrdCounts = pendingCounts.build();\n    finalSortedValues = hash.sort();\n    finalOrdMap = new int[valueCount];\n    for (int ord = 0; ord < valueCount; ord++) {\n      finalOrdMap[finalSortedValues[ord]] = ord;\n    }\n\n    SortedSetSortField sf = (SortedSetSortField) sortField;\n    final SortedSetDocValues dvs =\n        new BufferedSortedSetDocValues(finalSortedValues, finalOrdMap, hash, finalOrds, finalOrdCounts, maxCount, docsWithField.iterator());\n    return Sorter.getDocComparator(maxDoc, sf, () -> SortedSetSelector.wrap(dvs, sf.getSelector()), () -> null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"773bf150032d3ef6c95997a154fb914b82875cb8":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["773bf150032d3ef6c95997a154fb914b82875cb8"]},"commit2Childs":{"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"773bf150032d3ef6c95997a154fb914b82875cb8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","773bf150032d3ef6c95997a154fb914b82875cb8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}