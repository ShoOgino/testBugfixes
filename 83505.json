{"path":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","sourceNew":"  public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\", 1.5f));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\", 1.5f));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(random, q, s);\n    \n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n      assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n      assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n      assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n      \n      assertTrue(\"d4 does not have a better score then d3: \" + score0 + \" >? \"\n          + score1, score0 > score1);\n      assertTrue(\"d3 does not have a better score then d2: \" + score1 + \" >? \"\n          + score2, score1 > score2);\n      assertTrue(\"d3 does not have a better score then d1: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreakerAndBoost\", h, s);\n      throw e;\n    }\n  }\n\n","sourceOld":"  public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\", 1.5f));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\", 1.5f));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(random, q, s);\n    \n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n      assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n      assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n      assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n      \n      assertTrue(\"d4 does not have a better score then d3: \" + score0 + \" >? \"\n          + score1, score0 > score1);\n      assertTrue(\"d3 does not have a better score then d2: \" + score1 + \" >? \"\n          + score2, score1 > score2);\n      assertTrue(\"d3 does not have a better score then d1: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreakerAndBoost\", h, s);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","sourceNew":"  public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\", 1.5f));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\", 1.5f));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(random(), q, s);\n    \n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n      assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n      assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n      assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n      \n      assertTrue(\"d4 does not have a better score then d3: \" + score0 + \" >? \"\n          + score1, score0 > score1);\n      assertTrue(\"d3 does not have a better score then d2: \" + score1 + \" >? \"\n          + score2, score1 > score2);\n      assertTrue(\"d3 does not have a better score then d1: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreakerAndBoost\", h, s);\n      throw e;\n    }\n  }\n\n","sourceOld":"  public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\", 1.5f));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\", 1.5f));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(random, q, s);\n    \n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n      assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n      assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n      assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n      \n      assertTrue(\"d4 does not have a better score then d3: \" + score0 + \" >? \"\n          + score1, score0 > score1);\n      assertTrue(\"d3 does not have a better score then d2: \" + score1 + \" >? \"\n          + score2, score1 > score2);\n      assertTrue(\"d3 does not have a better score then d1: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreakerAndBoost\", h, s);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","sourceNew":"  public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\", 1.5f));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\", 1.5f));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(random(), q, s);\n    \n    ScoreDoc[] h = s.search(q, 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n      assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n      assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n      assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n      \n      assertTrue(\"d4 does not have a better score then d3: \" + score0 + \" >? \"\n          + score1, score0 > score1);\n      assertTrue(\"d3 does not have a better score then d2: \" + score1 + \" >? \"\n          + score2, score1 > score2);\n      assertTrue(\"d3 does not have a better score then d1: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreakerAndBoost\", h, s);\n      throw e;\n    }\n  }\n\n","sourceOld":"  public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\", 1.5f));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\", 1.5f));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(random(), q, s);\n    \n    ScoreDoc[] h = s.search(q, null, 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n      assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n      assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n      assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n      \n      assertTrue(\"d4 does not have a better score then d3: \" + score0 + \" >? \"\n          + score1, score0 > score1);\n      assertTrue(\"d3 does not have a better score then d2: \" + score1 + \" >? \"\n          + score2, score1 > score2);\n      assertTrue(\"d3 does not have a better score then d1: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreakerAndBoost\", h, s);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","sourceNew":"  public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n    \n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\", 1.5f));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\", 1.5f));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(random(), q.build(), s);\n    \n    ScoreDoc[] h = s.search(q.build(), 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n      assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n      assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n      assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n      \n      assertTrue(\"d4 does not have a better score then d3: \" + score0 + \" >? \"\n          + score1, score0 > score1);\n      assertTrue(\"d3 does not have a better score then d2: \" + score1 + \" >? \"\n          + score2, score1 > score2);\n      assertTrue(\"d3 does not have a better score then d1: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreakerAndBoost\", h, s);\n      throw e;\n    }\n  }\n\n","sourceOld":"  public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n    \n    BooleanQuery q = new BooleanQuery();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\", 1.5f));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\", 1.5f));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(random(), q, s);\n    \n    ScoreDoc[] h = s.search(q, 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n      assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n      assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n      assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n      \n      assertTrue(\"d4 does not have a better score then d3: \" + score0 + \" >? \"\n          + score1, score0 > score1);\n      assertTrue(\"d3 does not have a better score then d2: \" + score1 + \" >? \"\n          + score2, score1 > score2);\n      assertTrue(\"d3 does not have a better score then d1: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreakerAndBoost\", h, s);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5d3ee590efa5b1f764e8ce985d9125bc97af483","date":1446225158,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDisjunctionMaxQuery#testBooleanOptionalWithTiebreakerAndBoost().mjava","sourceNew":"  public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n    \n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(\n          Arrays.asList(tq(\"hed\", \"albino\", 1.5f), tq(\"dek\", \"albino\")),\n          0.01f);\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(\n          Arrays.asList(tq(\"hed\", \"elephant\", 1.5f), tq(\"dek\", \"elephant\")),\n          0.01f);\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(random(), q.build(), s);\n    \n    ScoreDoc[] h = s.search(q.build(), 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n      assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n      assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n      assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n      \n      assertTrue(\"d4 does not have a better score then d3: \" + score0 + \" >? \"\n          + score1, score0 > score1);\n      assertTrue(\"d3 does not have a better score then d2: \" + score1 + \" >? \"\n          + score2, score1 > score2);\n      assertTrue(\"d3 does not have a better score then d1: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreakerAndBoost\", h, s);\n      throw e;\n    }\n  }\n\n","sourceOld":"  public void testBooleanOptionalWithTiebreakerAndBoost() throws Exception {\n    \n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    {\n      DisjunctionMaxQuery q1 = new DisjunctionMaxQuery(0.01f);\n      q1.add(tq(\"hed\", \"albino\", 1.5f));\n      q1.add(tq(\"dek\", \"albino\"));\n      q.add(q1, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    {\n      DisjunctionMaxQuery q2 = new DisjunctionMaxQuery(0.01f);\n      q2.add(tq(\"hed\", \"elephant\", 1.5f));\n      q2.add(tq(\"dek\", \"elephant\"));\n      q.add(q2, BooleanClause.Occur.SHOULD);// false,false);\n    }\n    QueryUtils.check(random(), q.build(), s);\n    \n    ScoreDoc[] h = s.search(q.build(), 1000).scoreDocs;\n    \n    try {\n      \n      assertEquals(\"4 docs should match \" + q.toString(), 4, h.length);\n      \n      float score0 = h[0].score;\n      float score1 = h[1].score;\n      float score2 = h[2].score;\n      float score3 = h[3].score;\n      \n      String doc0 = s.doc(h[0].doc).get(\"id\");\n      String doc1 = s.doc(h[1].doc).get(\"id\");\n      String doc2 = s.doc(h[2].doc).get(\"id\");\n      String doc3 = s.doc(h[3].doc).get(\"id\");\n      \n      assertEquals(\"doc0 should be d4: \", \"d4\", doc0);\n      assertEquals(\"doc1 should be d3: \", \"d3\", doc1);\n      assertEquals(\"doc2 should be d2: \", \"d2\", doc2);\n      assertEquals(\"doc3 should be d1: \", \"d1\", doc3);\n      \n      assertTrue(\"d4 does not have a better score then d3: \" + score0 + \" >? \"\n          + score1, score0 > score1);\n      assertTrue(\"d3 does not have a better score then d2: \" + score1 + \" >? \"\n          + score2, score1 > score2);\n      assertTrue(\"d3 does not have a better score then d1: \" + score2 + \" >? \"\n          + score3, score2 > score3);\n      \n    } catch (Error e) {\n      printHits(\"testBooleanOptionalWithTiebreakerAndBoost\", h, s);\n      throw e;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["a5d3ee590efa5b1f764e8ce985d9125bc97af483"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a5d3ee590efa5b1f764e8ce985d9125bc97af483":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}