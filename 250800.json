{"path":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#processCommit(CommitUpdateCommand).mjava","commits":[{"id":"9d70e774cb25c8a8d2c3e5e84200f235f9168d87","date":1553016391,"type":0,"author":"Bar Rotstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#processCommit(CommitUpdateCommand).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void processCommit(CommitUpdateCommand cmd) throws IOException {\n\n    assert TestInjection.injectFailUpdateRequests();\n\n    if (isReadOnly()) {\n      throw new SolrException(ErrorCode.FORBIDDEN, \"Collection \" + collection + \" is read-only.\");\n    }\n\n    updateCommand = cmd;\n\n    List<SolrCmdDistributor.Node> nodes = null;\n    Replica leaderReplica = null;\n    zkCheck();\n    try {\n      leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, cloudDesc.getShardId());\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Exception finding leader for shard \" + cloudDesc.getShardId(), e);\n    }\n    isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n    nodes = getCollectionUrls(collection, EnumSet.of(Replica.Type.TLOG,Replica.Type.NRT), true);\n    if (nodes == null) {\n      // This could happen if there are only pull replicas\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unable to distribute commit operation. No replicas available of types \" + Replica.Type.TLOG + \" or \" + Replica.Type.NRT);\n    }\n\n    nodes.removeIf((node) -> node.getNodeProps().getNodeName().equals(zkController.getNodeName())\n        && node.getNodeProps().getCoreName().equals(req.getCore().getName()));\n\n    if (!isLeader && req.getParams().get(COMMIT_END_POINT, \"\").equals(\"replicas\")) {\n      if (replicaType == Replica.Type.PULL) {\n        log.warn(\"Commit not supported on replicas of type \" + Replica.Type.PULL);\n      } else if (replicaType == Replica.Type.NRT) {\n        doLocalCommit(cmd);\n      }\n    } else {\n      // zk\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n\n      List<SolrCmdDistributor.Node> useNodes = null;\n      if (req.getParams().get(COMMIT_END_POINT) == null) {\n        useNodes = nodes;\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n        params.set(COMMIT_END_POINT, \"leaders\");\n        if (useNodes != null) {\n          params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n              zkController.getBaseUrl(), req.getCore().getName()));\n          cmdDistrib.distribCommit(cmd, useNodes, params);\n          cmdDistrib.blockAndDoRetries();\n        }\n      }\n\n      if (isLeader) {\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n\n        params.set(COMMIT_END_POINT, \"replicas\");\n\n        useNodes = getReplicaNodesForLeader(cloudDesc.getShardId(), leaderReplica);\n\n        if (useNodes != null) {\n          params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n              zkController.getBaseUrl(), req.getCore().getName()));\n\n          cmdDistrib.distribCommit(cmd, useNodes, params);\n        }\n\n        doLocalCommit(cmd);\n\n        if (useNodes != null) {\n          cmdDistrib.blockAndDoRetries();\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"88922bf68f0b509aba218f1b9e7ef5981b4d13bc","date":1570820823,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#processCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#processCommit(CommitUpdateCommand).mjava","sourceNew":"  @Override\n  public void processCommit(CommitUpdateCommand cmd) throws IOException {\n    clusterState = zkController.getClusterState();\n\n    assert TestInjection.injectFailUpdateRequests();\n\n    if (isReadOnly()) {\n      throw new SolrException(ErrorCode.FORBIDDEN, \"Collection \" + collection + \" is read-only.\");\n    }\n\n    updateCommand = cmd;\n\n    List<SolrCmdDistributor.Node> nodes = null;\n    Replica leaderReplica = null;\n    zkCheck();\n    try {\n      leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, cloudDesc.getShardId());\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Exception finding leader for shard \" + cloudDesc.getShardId(), e);\n    }\n    isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n    nodes = getCollectionUrls(collection, EnumSet.of(Replica.Type.TLOG,Replica.Type.NRT), true);\n    if (nodes == null) {\n      // This could happen if there are only pull replicas\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unable to distribute commit operation. No replicas available of types \" + Replica.Type.TLOG + \" or \" + Replica.Type.NRT);\n    }\n\n    nodes.removeIf((node) -> node.getNodeProps().getNodeName().equals(zkController.getNodeName())\n        && node.getNodeProps().getCoreName().equals(req.getCore().getName()));\n\n    if (!isLeader && req.getParams().get(COMMIT_END_POINT, \"\").equals(\"replicas\")) {\n      if (replicaType == Replica.Type.PULL) {\n        log.warn(\"Commit not supported on replicas of type \" + Replica.Type.PULL);\n      } else if (replicaType == Replica.Type.NRT) {\n        doLocalCommit(cmd);\n      }\n    } else {\n      // zk\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n\n      List<SolrCmdDistributor.Node> useNodes = null;\n      if (req.getParams().get(COMMIT_END_POINT) == null) {\n        useNodes = nodes;\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n        params.set(COMMIT_END_POINT, \"leaders\");\n        if (useNodes != null) {\n          params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n              zkController.getBaseUrl(), req.getCore().getName()));\n          cmdDistrib.distribCommit(cmd, useNodes, params);\n          cmdDistrib.blockAndDoRetries();\n        }\n      }\n\n      if (isLeader) {\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n\n        params.set(COMMIT_END_POINT, \"replicas\");\n\n        useNodes = getReplicaNodesForLeader(cloudDesc.getShardId(), leaderReplica);\n\n        if (useNodes != null) {\n          params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n              zkController.getBaseUrl(), req.getCore().getName()));\n\n          cmdDistrib.distribCommit(cmd, useNodes, params);\n        }\n\n        doLocalCommit(cmd);\n\n        if (useNodes != null) {\n          cmdDistrib.blockAndDoRetries();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void processCommit(CommitUpdateCommand cmd) throws IOException {\n\n    assert TestInjection.injectFailUpdateRequests();\n\n    if (isReadOnly()) {\n      throw new SolrException(ErrorCode.FORBIDDEN, \"Collection \" + collection + \" is read-only.\");\n    }\n\n    updateCommand = cmd;\n\n    List<SolrCmdDistributor.Node> nodes = null;\n    Replica leaderReplica = null;\n    zkCheck();\n    try {\n      leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, cloudDesc.getShardId());\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Exception finding leader for shard \" + cloudDesc.getShardId(), e);\n    }\n    isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n    nodes = getCollectionUrls(collection, EnumSet.of(Replica.Type.TLOG,Replica.Type.NRT), true);\n    if (nodes == null) {\n      // This could happen if there are only pull replicas\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unable to distribute commit operation. No replicas available of types \" + Replica.Type.TLOG + \" or \" + Replica.Type.NRT);\n    }\n\n    nodes.removeIf((node) -> node.getNodeProps().getNodeName().equals(zkController.getNodeName())\n        && node.getNodeProps().getCoreName().equals(req.getCore().getName()));\n\n    if (!isLeader && req.getParams().get(COMMIT_END_POINT, \"\").equals(\"replicas\")) {\n      if (replicaType == Replica.Type.PULL) {\n        log.warn(\"Commit not supported on replicas of type \" + Replica.Type.PULL);\n      } else if (replicaType == Replica.Type.NRT) {\n        doLocalCommit(cmd);\n      }\n    } else {\n      // zk\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n\n      List<SolrCmdDistributor.Node> useNodes = null;\n      if (req.getParams().get(COMMIT_END_POINT) == null) {\n        useNodes = nodes;\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n        params.set(COMMIT_END_POINT, \"leaders\");\n        if (useNodes != null) {\n          params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n              zkController.getBaseUrl(), req.getCore().getName()));\n          cmdDistrib.distribCommit(cmd, useNodes, params);\n          cmdDistrib.blockAndDoRetries();\n        }\n      }\n\n      if (isLeader) {\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n\n        params.set(COMMIT_END_POINT, \"replicas\");\n\n        useNodes = getReplicaNodesForLeader(cloudDesc.getShardId(), leaderReplica);\n\n        if (useNodes != null) {\n          params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n              zkController.getBaseUrl(), req.getCore().getName()));\n\n          cmdDistrib.distribCommit(cmd, useNodes, params);\n        }\n\n        doLocalCommit(cmd);\n\n        if (useNodes != null) {\n          cmdDistrib.blockAndDoRetries();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#processCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#processCommit(CommitUpdateCommand).mjava","sourceNew":"  @Override\n  public void processCommit(CommitUpdateCommand cmd) throws IOException {\n    clusterState = zkController.getClusterState();\n\n    assert TestInjection.injectFailUpdateRequests();\n\n    if (isReadOnly()) {\n      throw new SolrException(ErrorCode.FORBIDDEN, \"Collection \" + collection + \" is read-only.\");\n    }\n\n    updateCommand = cmd;\n\n    List<SolrCmdDistributor.Node> nodes = null;\n    Replica leaderReplica = null;\n    zkCheck();\n    try {\n      leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, cloudDesc.getShardId());\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Exception finding leader for shard \" + cloudDesc.getShardId(), e);\n    }\n    isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n    nodes = getCollectionUrls(collection, EnumSet.of(Replica.Type.TLOG,Replica.Type.NRT), true);\n    if (nodes == null) {\n      // This could happen if there are only pull replicas\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unable to distribute commit operation. No replicas available of types \" + Replica.Type.TLOG + \" or \" + Replica.Type.NRT);\n    }\n\n    nodes.removeIf((node) -> node.getNodeProps().getNodeName().equals(zkController.getNodeName())\n        && node.getNodeProps().getCoreName().equals(req.getCore().getName()));\n\n    if (!isLeader && req.getParams().get(COMMIT_END_POINT, \"\").equals(\"replicas\")) {\n      if (replicaType == Replica.Type.PULL) {\n        log.warn(\"Commit not supported on replicas of type \" + Replica.Type.PULL);\n      } else if (replicaType == Replica.Type.NRT) {\n        doLocalCommit(cmd);\n      }\n    } else {\n      // zk\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n\n      List<SolrCmdDistributor.Node> useNodes = null;\n      if (req.getParams().get(COMMIT_END_POINT) == null) {\n        useNodes = nodes;\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n        params.set(COMMIT_END_POINT, \"leaders\");\n        if (useNodes != null) {\n          params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n              zkController.getBaseUrl(), req.getCore().getName()));\n          cmdDistrib.distribCommit(cmd, useNodes, params);\n          cmdDistrib.blockAndDoRetries();\n        }\n      }\n\n      if (isLeader) {\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n\n        params.set(COMMIT_END_POINT, \"replicas\");\n\n        useNodes = getReplicaNodesForLeader(cloudDesc.getShardId(), leaderReplica);\n\n        if (useNodes != null) {\n          params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n              zkController.getBaseUrl(), req.getCore().getName()));\n\n          cmdDistrib.distribCommit(cmd, useNodes, params);\n        }\n\n        doLocalCommit(cmd);\n\n        if (useNodes != null) {\n          cmdDistrib.blockAndDoRetries();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void processCommit(CommitUpdateCommand cmd) throws IOException {\n\n    assert TestInjection.injectFailUpdateRequests();\n\n    if (isReadOnly()) {\n      throw new SolrException(ErrorCode.FORBIDDEN, \"Collection \" + collection + \" is read-only.\");\n    }\n\n    updateCommand = cmd;\n\n    List<SolrCmdDistributor.Node> nodes = null;\n    Replica leaderReplica = null;\n    zkCheck();\n    try {\n      leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, cloudDesc.getShardId());\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Exception finding leader for shard \" + cloudDesc.getShardId(), e);\n    }\n    isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n    nodes = getCollectionUrls(collection, EnumSet.of(Replica.Type.TLOG,Replica.Type.NRT), true);\n    if (nodes == null) {\n      // This could happen if there are only pull replicas\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unable to distribute commit operation. No replicas available of types \" + Replica.Type.TLOG + \" or \" + Replica.Type.NRT);\n    }\n\n    nodes.removeIf((node) -> node.getNodeProps().getNodeName().equals(zkController.getNodeName())\n        && node.getNodeProps().getCoreName().equals(req.getCore().getName()));\n\n    if (!isLeader && req.getParams().get(COMMIT_END_POINT, \"\").equals(\"replicas\")) {\n      if (replicaType == Replica.Type.PULL) {\n        log.warn(\"Commit not supported on replicas of type \" + Replica.Type.PULL);\n      } else if (replicaType == Replica.Type.NRT) {\n        doLocalCommit(cmd);\n      }\n    } else {\n      // zk\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n\n      List<SolrCmdDistributor.Node> useNodes = null;\n      if (req.getParams().get(COMMIT_END_POINT) == null) {\n        useNodes = nodes;\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n        params.set(COMMIT_END_POINT, \"leaders\");\n        if (useNodes != null) {\n          params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n              zkController.getBaseUrl(), req.getCore().getName()));\n          cmdDistrib.distribCommit(cmd, useNodes, params);\n          cmdDistrib.blockAndDoRetries();\n        }\n      }\n\n      if (isLeader) {\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n\n        params.set(COMMIT_END_POINT, \"replicas\");\n\n        useNodes = getReplicaNodesForLeader(cloudDesc.getShardId(), leaderReplica);\n\n        if (useNodes != null) {\n          params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n              zkController.getBaseUrl(), req.getCore().getName()));\n\n          cmdDistrib.distribCommit(cmd, useNodes, params);\n        }\n\n        doLocalCommit(cmd);\n\n        if (useNodes != null) {\n          cmdDistrib.blockAndDoRetries();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"740d649f013f07efbeb73ca854f106c60166e7c0","date":1587431295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#processCommit(CommitUpdateCommand).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/processor/DistributedZkUpdateProcessor#processCommit(CommitUpdateCommand).mjava","sourceNew":"  @Override\n  public void processCommit(CommitUpdateCommand cmd) throws IOException {\n    clusterState = zkController.getClusterState();\n\n    assert TestInjection.injectFailUpdateRequests();\n\n    if (isReadOnly()) {\n      throw new SolrException(ErrorCode.FORBIDDEN, \"Collection \" + collection + \" is read-only.\");\n    }\n\n    updateCommand = cmd;\n\n    List<SolrCmdDistributor.Node> nodes = null;\n    Replica leaderReplica = null;\n    zkCheck();\n    try {\n      leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, cloudDesc.getShardId());\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Exception finding leader for shard \" + cloudDesc.getShardId(), e);\n    }\n    isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n    nodes = getCollectionUrls(collection, EnumSet.of(Replica.Type.TLOG,Replica.Type.NRT), true);\n    if (nodes == null) {\n      // This could happen if there are only pull replicas\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unable to distribute commit operation. No replicas available of types \" + Replica.Type.TLOG + \" or \" + Replica.Type.NRT);\n    }\n\n    nodes.removeIf((node) -> node.getNodeProps().getNodeName().equals(zkController.getNodeName())\n        && node.getNodeProps().getCoreName().equals(req.getCore().getName()));\n\n    if (!isLeader && req.getParams().get(COMMIT_END_POINT, \"\").equals(\"replicas\")) {\n      if (replicaType == Replica.Type.PULL) {\n        log.warn(\"Commit not supported on replicas of type {}\", Replica.Type.PULL);\n      } else if (replicaType == Replica.Type.NRT) {\n        doLocalCommit(cmd);\n      }\n    } else {\n      // zk\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n\n      List<SolrCmdDistributor.Node> useNodes = null;\n      if (req.getParams().get(COMMIT_END_POINT) == null) {\n        useNodes = nodes;\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n        params.set(COMMIT_END_POINT, \"leaders\");\n        if (useNodes != null) {\n          params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n              zkController.getBaseUrl(), req.getCore().getName()));\n          cmdDistrib.distribCommit(cmd, useNodes, params);\n          cmdDistrib.blockAndDoRetries();\n        }\n      }\n\n      if (isLeader) {\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n\n        params.set(COMMIT_END_POINT, \"replicas\");\n\n        useNodes = getReplicaNodesForLeader(cloudDesc.getShardId(), leaderReplica);\n\n        if (useNodes != null) {\n          params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n              zkController.getBaseUrl(), req.getCore().getName()));\n\n          cmdDistrib.distribCommit(cmd, useNodes, params);\n        }\n\n        doLocalCommit(cmd);\n\n        if (useNodes != null) {\n          cmdDistrib.blockAndDoRetries();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void processCommit(CommitUpdateCommand cmd) throws IOException {\n    clusterState = zkController.getClusterState();\n\n    assert TestInjection.injectFailUpdateRequests();\n\n    if (isReadOnly()) {\n      throw new SolrException(ErrorCode.FORBIDDEN, \"Collection \" + collection + \" is read-only.\");\n    }\n\n    updateCommand = cmd;\n\n    List<SolrCmdDistributor.Node> nodes = null;\n    Replica leaderReplica = null;\n    zkCheck();\n    try {\n      leaderReplica = zkController.getZkStateReader().getLeaderRetry(collection, cloudDesc.getShardId());\n    } catch (InterruptedException e) {\n      Thread.interrupted();\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE, \"Exception finding leader for shard \" + cloudDesc.getShardId(), e);\n    }\n    isLeader = leaderReplica.getName().equals(cloudDesc.getCoreNodeName());\n\n    nodes = getCollectionUrls(collection, EnumSet.of(Replica.Type.TLOG,Replica.Type.NRT), true);\n    if (nodes == null) {\n      // This could happen if there are only pull replicas\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Unable to distribute commit operation. No replicas available of types \" + Replica.Type.TLOG + \" or \" + Replica.Type.NRT);\n    }\n\n    nodes.removeIf((node) -> node.getNodeProps().getNodeName().equals(zkController.getNodeName())\n        && node.getNodeProps().getCoreName().equals(req.getCore().getName()));\n\n    if (!isLeader && req.getParams().get(COMMIT_END_POINT, \"\").equals(\"replicas\")) {\n      if (replicaType == Replica.Type.PULL) {\n        log.warn(\"Commit not supported on replicas of type \" + Replica.Type.PULL);\n      } else if (replicaType == Replica.Type.NRT) {\n        doLocalCommit(cmd);\n      }\n    } else {\n      // zk\n      ModifiableSolrParams params = new ModifiableSolrParams(filterParams(req.getParams()));\n\n      List<SolrCmdDistributor.Node> useNodes = null;\n      if (req.getParams().get(COMMIT_END_POINT) == null) {\n        useNodes = nodes;\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.TOLEADER.toString());\n        params.set(COMMIT_END_POINT, \"leaders\");\n        if (useNodes != null) {\n          params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n              zkController.getBaseUrl(), req.getCore().getName()));\n          cmdDistrib.distribCommit(cmd, useNodes, params);\n          cmdDistrib.blockAndDoRetries();\n        }\n      }\n\n      if (isLeader) {\n        params.set(DISTRIB_UPDATE_PARAM, DistribPhase.FROMLEADER.toString());\n\n        params.set(COMMIT_END_POINT, \"replicas\");\n\n        useNodes = getReplicaNodesForLeader(cloudDesc.getShardId(), leaderReplica);\n\n        if (useNodes != null) {\n          params.set(DISTRIB_FROM, ZkCoreNodeProps.getCoreUrl(\n              zkController.getBaseUrl(), req.getCore().getName()));\n\n          cmdDistrib.distribCommit(cmd, useNodes, params);\n        }\n\n        doLocalCommit(cmd);\n\n        if (useNodes != null) {\n          cmdDistrib.blockAndDoRetries();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"740d649f013f07efbeb73ca854f106c60166e7c0":["88922bf68f0b509aba218f1b9e7ef5981b4d13bc"],"88922bf68f0b509aba218f1b9e7ef5981b4d13bc":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["740d649f013f07efbeb73ca854f106c60166e7c0"],"b0b597c65628ca9e73913a07e81691f8229bae35":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87","88922bf68f0b509aba218f1b9e7ef5981b4d13bc"]},"commit2Childs":{"740d649f013f07efbeb73ca854f106c60166e7c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"88922bf68f0b509aba218f1b9e7ef5981b4d13bc":["740d649f013f07efbeb73ca854f106c60166e7c0","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d70e774cb25c8a8d2c3e5e84200f235f9168d87"],"9d70e774cb25c8a8d2c3e5e84200f235f9168d87":["88922bf68f0b509aba218f1b9e7ef5981b4d13bc","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}