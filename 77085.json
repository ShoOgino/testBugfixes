{"path":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#bboxContains(double,double,double,double,double,double).mjava","commits":[{"id":"e91b7d9f5000faefb0e81b98e76ad5b9463283e8","date":1433799348,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#bboxContains(double,double,double,double,double,double).mjava","pathOld":"/dev/null","sourceNew":"  public static final boolean bboxContains(final double lon, final double lat, final double minLon,\n                                           final double minLat, final double maxLon, final double maxLat) {\n    return (compare(lon, minLon) >= 0 && compare(lon, maxLon) <= 0\n          && compare(lat, minLat) >= 0 && compare(lat, maxLat) <= 0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":3,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#bboxContains(double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#bboxContains(double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Determine if a bbox (defined by minLon, minLat, maxLon, maxLat) contains the provided point (defined by lon, lat)\n   * NOTE: this is a basic method that does not handle dateline or pole crossing. Unwrapping must be done before\n   * calling this method.\n   */\n  public static boolean bboxContains(final double lon, final double lat, final double minLon,\n                                     final double minLat, final double maxLon, final double maxLat) {\n    return (compare(lon, minLon) >= 0 && compare(lon, maxLon) <= 0\n          && compare(lat, minLat) >= 0 && compare(lat, maxLat) <= 0);\n  }\n\n","sourceOld":"  public static final boolean bboxContains(final double lon, final double lat, final double minLon,\n                                           final double minLat, final double maxLon, final double maxLat) {\n    return (compare(lon, minLon) >= 0 && compare(lon, maxLon) <= 0\n          && compare(lat, minLat) >= 0 && compare(lat, maxLat) <= 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33bb6bd7295e66f93f182556f5353b97243e62ba","date":1449525768,"type":5,"author":"Nick Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/util/GeoRelationUtils#pointInRect(double,double,double,double,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/util/GeoUtils#bboxContains(double,double,double,double,double,double).mjava","sourceNew":"  /**\n   * Determine if a bbox (defined by minLon, minLat, maxLon, maxLat) contains the provided point (defined by lon, lat)\n   * NOTE: this is a basic method that does not handle dateline or pole crossing. Unwrapping must be done before\n   * calling this method.\n   */\n  public static boolean pointInRect(final double lon, final double lat, final double minLon,\n                                    final double minLat, final double maxLon, final double maxLat) {\n    return (GeoUtils.compare(lon, minLon) >= 0 && GeoUtils.compare(lon, maxLon) <= 0\n        && GeoUtils.compare(lat, minLat) >= 0 && GeoUtils.compare(lat, maxLat) <= 0);\n  }\n\n","sourceOld":"  /**\n   * Determine if a bbox (defined by minLon, minLat, maxLon, maxLat) contains the provided point (defined by lon, lat)\n   * NOTE: this is a basic method that does not handle dateline or pole crossing. Unwrapping must be done before\n   * calling this method.\n   */\n  public static boolean bboxContains(final double lon, final double lat, final double minLon,\n                                     final double minLat, final double maxLon, final double maxLat) {\n    return (compare(lon, minLon) >= 0 && compare(lon, maxLon) <= 0\n          && compare(lat, minLat) >= 0 && compare(lat, maxLat) <= 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"33bb6bd7295e66f93f182556f5353b97243e62ba":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["33bb6bd7295e66f93f182556f5353b97243e62ba"],"e91b7d9f5000faefb0e81b98e76ad5b9463283e8":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"33bb6bd7295e66f93f182556f5353b97243e62ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}