{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#testBackupAndRestore(String).mjava","commits":[{"id":"c5c99ad021f3da085fcb66220598a8f91dc5e453","date":1462242046,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#testBackupAndRestore(String).mjava","pathOld":"/dev/null","sourceNew":"  private void testBackupAndRestore(String collectionName) throws Exception {\n    String backupName = \"mytestbackup\";\n\n    CloudSolrClient client = cluster.getSolrClient();\n    DocCollection backupCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n\n    Map<String, Integer> origShardToDocCount = getShardToDocCountMap(client, backupCollection);\n    assert origShardToDocCount.isEmpty() == false;\n\n    String location = createTempDir().toFile().getAbsolutePath();\n\n    log.info(\"Triggering Backup command\");\n\n    {\n      CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n          .setLocation(location);\n      if (random().nextBoolean()) {\n        assertEquals(0, backup.process(client).getStatus());\n      } else {\n        assertEquals(RequestStatusState.COMPLETED, backup.processAndWait(client, 30));//async\n      }\n    }\n\n    log.info(\"Triggering Restore command\");\n\n    String restoreCollectionName = collectionName + \"_restored\";\n    boolean sameConfig = random().nextBoolean();\n\n    {\n      CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n              .setLocation(location);\n      if (origShardToDocCount.size() > cluster.getJettySolrRunners().size()) {\n        // may need to increase maxShardsPerNode (e.g. if it was shard split, then now we need more)\n        restore.setMaxShardsPerNode(origShardToDocCount.size());\n      }\n      Properties props = new Properties();\n      props.setProperty(\"customKey\", \"customVal\");\n      restore.setProperties(props);\n      if (sameConfig==false) {\n        restore.setConfigName(\"customConfigName\");\n      }\n      if (random().nextBoolean()) {\n        assertEquals(0, restore.process(client).getStatus());\n      } else {\n        assertEquals(RequestStatusState.COMPLETED, restore.processAndWait(client, 30));//async\n      }\n      AbstractDistribZkTestBase.waitForRecoveriesToFinish(\n          restoreCollectionName, cluster.getSolrClient().getZkStateReader(), log.isDebugEnabled(), true, 30);\n    }\n\n    //Check the number of results are the same\n    DocCollection restoreCollection = client.getZkStateReader().getClusterState().getCollection(restoreCollectionName);\n    assertEquals(origShardToDocCount, getShardToDocCountMap(client, restoreCollection));\n    //Re-index same docs (should be identical docs given same random seed) and test we have the same result.  Helps\n    //  test we reconstituted the hash ranges / doc router.\n    if (!(restoreCollection.getRouter() instanceof ImplicitDocRouter) && random().nextBoolean()) {\n      indexDocs(restoreCollectionName);\n      assertEquals(origShardToDocCount, getShardToDocCountMap(client, restoreCollection));\n    }\n\n    assertEquals(backupCollection.getReplicationFactor(), restoreCollection.getReplicationFactor());\n    assertEquals(backupCollection.getAutoAddReplicas(), restoreCollection.getAutoAddReplicas());\n    assertEquals(backupCollection.getActiveSlices().iterator().next().getReplicas().size(),\n        restoreCollection.getActiveSlices().iterator().next().getReplicas().size());\n    assertEquals(sameConfig ? \"conf1\" : \"customConfigName\",\n        cluster.getSolrClient().getZkStateReader().readConfigName(restoreCollectionName));\n\n    // assert added core properties:\n    // DWS: did via manual inspection.\n    // TODO Find the applicable core.properties on the file system but how?\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ab6131420a270c49b653c969cc1dbbaf7d1b36e7","ab6131420a270c49b653c969cc1dbbaf7d1b36e7","076d58da25128e8a4c511abf07c5d86c4ebddcbf","076d58da25128e8a4c511abf07c5d86c4ebddcbf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c7a21395bae9e2f61aeb639f47aaca771c426ed","date":1462255690,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#testBackupAndRestore(String).mjava","pathOld":"/dev/null","sourceNew":"  private void testBackupAndRestore(String collectionName) throws Exception {\n    String backupName = \"mytestbackup\";\n\n    CloudSolrClient client = cluster.getSolrClient();\n    DocCollection backupCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n\n    Map<String, Integer> origShardToDocCount = getShardToDocCountMap(client, backupCollection);\n    assert origShardToDocCount.isEmpty() == false;\n\n    String location = createTempDir().toFile().getAbsolutePath();\n\n    log.info(\"Triggering Backup command\");\n\n    {\n      CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n          .setLocation(location);\n      if (random().nextBoolean()) {\n        assertEquals(0, backup.process(client).getStatus());\n      } else {\n        assertEquals(RequestStatusState.COMPLETED, backup.processAndWait(client, 30));//async\n      }\n    }\n\n    log.info(\"Triggering Restore command\");\n\n    String restoreCollectionName = collectionName + \"_restored\";\n    boolean sameConfig = random().nextBoolean();\n\n    {\n      CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n              .setLocation(location);\n      if (origShardToDocCount.size() > cluster.getJettySolrRunners().size()) {\n        // may need to increase maxShardsPerNode (e.g. if it was shard split, then now we need more)\n        restore.setMaxShardsPerNode(origShardToDocCount.size());\n      }\n      Properties props = new Properties();\n      props.setProperty(\"customKey\", \"customVal\");\n      restore.setProperties(props);\n      if (sameConfig==false) {\n        restore.setConfigName(\"customConfigName\");\n      }\n      if (random().nextBoolean()) {\n        assertEquals(0, restore.process(client).getStatus());\n      } else {\n        assertEquals(RequestStatusState.COMPLETED, restore.processAndWait(client, 30));//async\n      }\n      AbstractDistribZkTestBase.waitForRecoveriesToFinish(\n          restoreCollectionName, cluster.getSolrClient().getZkStateReader(), log.isDebugEnabled(), true, 30);\n    }\n\n    //Check the number of results are the same\n    DocCollection restoreCollection = client.getZkStateReader().getClusterState().getCollection(restoreCollectionName);\n    assertEquals(origShardToDocCount, getShardToDocCountMap(client, restoreCollection));\n    //Re-index same docs (should be identical docs given same random seed) and test we have the same result.  Helps\n    //  test we reconstituted the hash ranges / doc router.\n    if (!(restoreCollection.getRouter() instanceof ImplicitDocRouter) && random().nextBoolean()) {\n      indexDocs(restoreCollectionName);\n      assertEquals(origShardToDocCount, getShardToDocCountMap(client, restoreCollection));\n    }\n\n    assertEquals(backupCollection.getReplicationFactor(), restoreCollection.getReplicationFactor());\n    assertEquals(backupCollection.getAutoAddReplicas(), restoreCollection.getAutoAddReplicas());\n    assertEquals(backupCollection.getActiveSlices().iterator().next().getReplicas().size(),\n        restoreCollection.getActiveSlices().iterator().next().getReplicas().size());\n    assertEquals(sameConfig ? \"conf1\" : \"customConfigName\",\n        cluster.getSolrClient().getZkStateReader().readConfigName(restoreCollectionName));\n\n    // assert added core properties:\n    // DWS: did via manual inspection.\n    // TODO Find the applicable core.properties on the file system but how?\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#testBackupAndRestore(String).mjava","pathOld":"/dev/null","sourceNew":"  private void testBackupAndRestore(String collectionName) throws Exception {\n    String backupName = \"mytestbackup\";\n\n    CloudSolrClient client = cluster.getSolrClient();\n    DocCollection backupCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n\n    Map<String, Integer> origShardToDocCount = getShardToDocCountMap(client, backupCollection);\n    assert origShardToDocCount.isEmpty() == false;\n\n    String location = createTempDir().toFile().getAbsolutePath();\n\n    log.info(\"Triggering Backup command\");\n\n    {\n      CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n          .setLocation(location);\n      if (random().nextBoolean()) {\n        assertEquals(0, backup.process(client).getStatus());\n      } else {\n        assertEquals(RequestStatusState.COMPLETED, backup.processAndWait(client, 30));//async\n      }\n    }\n\n    log.info(\"Triggering Restore command\");\n\n    String restoreCollectionName = collectionName + \"_restored\";\n    boolean sameConfig = random().nextBoolean();\n\n    {\n      CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n              .setLocation(location);\n      if (origShardToDocCount.size() > cluster.getJettySolrRunners().size()) {\n        // may need to increase maxShardsPerNode (e.g. if it was shard split, then now we need more)\n        restore.setMaxShardsPerNode(origShardToDocCount.size());\n      }\n      Properties props = new Properties();\n      props.setProperty(\"customKey\", \"customVal\");\n      restore.setProperties(props);\n      if (sameConfig==false) {\n        restore.setConfigName(\"customConfigName\");\n      }\n      if (random().nextBoolean()) {\n        assertEquals(0, restore.process(client).getStatus());\n      } else {\n        assertEquals(RequestStatusState.COMPLETED, restore.processAndWait(client, 30));//async\n      }\n      AbstractDistribZkTestBase.waitForRecoveriesToFinish(\n          restoreCollectionName, cluster.getSolrClient().getZkStateReader(), log.isDebugEnabled(), true, 30);\n    }\n\n    //Check the number of results are the same\n    DocCollection restoreCollection = client.getZkStateReader().getClusterState().getCollection(restoreCollectionName);\n    assertEquals(origShardToDocCount, getShardToDocCountMap(client, restoreCollection));\n    //Re-index same docs (should be identical docs given same random seed) and test we have the same result.  Helps\n    //  test we reconstituted the hash ranges / doc router.\n    if (!(restoreCollection.getRouter() instanceof ImplicitDocRouter) && random().nextBoolean()) {\n      indexDocs(restoreCollectionName);\n      assertEquals(origShardToDocCount, getShardToDocCountMap(client, restoreCollection));\n    }\n\n    assertEquals(backupCollection.getReplicationFactor(), restoreCollection.getReplicationFactor());\n    assertEquals(backupCollection.getAutoAddReplicas(), restoreCollection.getAutoAddReplicas());\n    assertEquals(backupCollection.getActiveSlices().iterator().next().getReplicas().size(),\n        restoreCollection.getActiveSlices().iterator().next().getReplicas().size());\n    assertEquals(sameConfig ? \"conf1\" : \"customConfigName\",\n        cluster.getSolrClient().getZkStateReader().readConfigName(restoreCollectionName));\n\n    // assert added core properties:\n    // DWS: did via manual inspection.\n    // TODO Find the applicable core.properties on the file system but how?\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c623a7f72be34d6c45bee682028c50327d9e4b7","date":1467791293,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AbstractCloudBackupRestoreTestCase#testBackupAndRestore(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#testBackupAndRestore(String).mjava","sourceNew":"  private void testBackupAndRestore(String collectionName) throws Exception {\n    String backupLocation = getBackupLocation();\n    String backupName = \"mytestbackup\";\n\n    CloudSolrClient client = cluster.getSolrClient();\n    DocCollection backupCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n\n    Map<String, Integer> origShardToDocCount = getShardToDocCountMap(client, backupCollection);\n    assert origShardToDocCount.isEmpty() == false;\n\n    log.info(\"Triggering Backup command\");\n\n    {\n      CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n          .setLocation(backupLocation).setRepositoryName(getBackupRepoName());\n      if (random().nextBoolean()) {\n        assertEquals(0, backup.process(client).getStatus());\n      } else {\n        assertEquals(RequestStatusState.COMPLETED, backup.processAndWait(client, 30));//async\n      }\n    }\n\n    log.info(\"Triggering Restore command\");\n\n    String restoreCollectionName = collectionName + \"_restored\";\n    boolean sameConfig = random().nextBoolean();\n\n    {\n      CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n          .setLocation(backupLocation).setRepositoryName(getBackupRepoName());\n\n      if (origShardToDocCount.size() > cluster.getJettySolrRunners().size()) {\n        // may need to increase maxShardsPerNode (e.g. if it was shard split, then now we need more)\n        restore.setMaxShardsPerNode(origShardToDocCount.size());\n      }\n      Properties props = new Properties();\n      props.setProperty(\"customKey\", \"customVal\");\n      restore.setProperties(props);\n      if (sameConfig==false) {\n        restore.setConfigName(\"customConfigName\");\n      }\n      if (random().nextBoolean()) {\n        assertEquals(0, restore.process(client).getStatus());\n      } else {\n        assertEquals(RequestStatusState.COMPLETED, restore.processAndWait(client, 30));//async\n      }\n      AbstractDistribZkTestBase.waitForRecoveriesToFinish(\n          restoreCollectionName, cluster.getSolrClient().getZkStateReader(), log.isDebugEnabled(), true, 30);\n    }\n\n    //Check the number of results are the same\n    DocCollection restoreCollection = client.getZkStateReader().getClusterState().getCollection(restoreCollectionName);\n    assertEquals(origShardToDocCount, getShardToDocCountMap(client, restoreCollection));\n    //Re-index same docs (should be identical docs given same random seed) and test we have the same result.  Helps\n    //  test we reconstituted the hash ranges / doc router.\n    if (!(restoreCollection.getRouter() instanceof ImplicitDocRouter) && random().nextBoolean()) {\n      indexDocs(restoreCollectionName);\n      assertEquals(origShardToDocCount, getShardToDocCountMap(client, restoreCollection));\n    }\n\n    assertEquals(backupCollection.getReplicationFactor(), restoreCollection.getReplicationFactor());\n    assertEquals(backupCollection.getAutoAddReplicas(), restoreCollection.getAutoAddReplicas());\n    assertEquals(backupCollection.getActiveSlices().iterator().next().getReplicas().size(),\n        restoreCollection.getActiveSlices().iterator().next().getReplicas().size());\n    assertEquals(sameConfig ? \"conf1\" : \"customConfigName\",\n        cluster.getSolrClient().getZkStateReader().readConfigName(restoreCollectionName));\n\n    // assert added core properties:\n    // DWS: did via manual inspection.\n    // TODO Find the applicable core.properties on the file system but how?\n  }\n\n","sourceOld":"  private void testBackupAndRestore(String collectionName) throws Exception {\n    String backupName = \"mytestbackup\";\n\n    CloudSolrClient client = cluster.getSolrClient();\n    DocCollection backupCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n\n    Map<String, Integer> origShardToDocCount = getShardToDocCountMap(client, backupCollection);\n    assert origShardToDocCount.isEmpty() == false;\n\n    String location = createTempDir().toFile().getAbsolutePath();\n\n    log.info(\"Triggering Backup command\");\n\n    {\n      CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n          .setLocation(location);\n      if (random().nextBoolean()) {\n        assertEquals(0, backup.process(client).getStatus());\n      } else {\n        assertEquals(RequestStatusState.COMPLETED, backup.processAndWait(client, 30));//async\n      }\n    }\n\n    log.info(\"Triggering Restore command\");\n\n    String restoreCollectionName = collectionName + \"_restored\";\n    boolean sameConfig = random().nextBoolean();\n\n    {\n      CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n              .setLocation(location);\n      if (origShardToDocCount.size() > cluster.getJettySolrRunners().size()) {\n        // may need to increase maxShardsPerNode (e.g. if it was shard split, then now we need more)\n        restore.setMaxShardsPerNode(origShardToDocCount.size());\n      }\n      Properties props = new Properties();\n      props.setProperty(\"customKey\", \"customVal\");\n      restore.setProperties(props);\n      if (sameConfig==false) {\n        restore.setConfigName(\"customConfigName\");\n      }\n      if (random().nextBoolean()) {\n        assertEquals(0, restore.process(client).getStatus());\n      } else {\n        assertEquals(RequestStatusState.COMPLETED, restore.processAndWait(client, 30));//async\n      }\n      AbstractDistribZkTestBase.waitForRecoveriesToFinish(\n          restoreCollectionName, cluster.getSolrClient().getZkStateReader(), log.isDebugEnabled(), true, 30);\n    }\n\n    //Check the number of results are the same\n    DocCollection restoreCollection = client.getZkStateReader().getClusterState().getCollection(restoreCollectionName);\n    assertEquals(origShardToDocCount, getShardToDocCountMap(client, restoreCollection));\n    //Re-index same docs (should be identical docs given same random seed) and test we have the same result.  Helps\n    //  test we reconstituted the hash ranges / doc router.\n    if (!(restoreCollection.getRouter() instanceof ImplicitDocRouter) && random().nextBoolean()) {\n      indexDocs(restoreCollectionName);\n      assertEquals(origShardToDocCount, getShardToDocCountMap(client, restoreCollection));\n    }\n\n    assertEquals(backupCollection.getReplicationFactor(), restoreCollection.getReplicationFactor());\n    assertEquals(backupCollection.getAutoAddReplicas(), restoreCollection.getAutoAddReplicas());\n    assertEquals(backupCollection.getActiveSlices().iterator().next().getReplicas().size(),\n        restoreCollection.getActiveSlices().iterator().next().getReplicas().size());\n    assertEquals(sameConfig ? \"conf1\" : \"customConfigName\",\n        cluster.getSolrClient().getZkStateReader().readConfigName(restoreCollectionName));\n\n    // assert added core properties:\n    // DWS: did via manual inspection.\n    // TODO Find the applicable core.properties on the file system but how?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudBackupRestore#testBackupAndRestore(String).mjava","sourceNew":null,"sourceOld":"  private void testBackupAndRestore(String collectionName) throws Exception {\n    String backupName = \"mytestbackup\";\n\n    CloudSolrClient client = cluster.getSolrClient();\n    DocCollection backupCollection = client.getZkStateReader().getClusterState().getCollection(collectionName);\n\n    Map<String, Integer> origShardToDocCount = getShardToDocCountMap(client, backupCollection);\n    assert origShardToDocCount.isEmpty() == false;\n\n    String location = createTempDir().toFile().getAbsolutePath();\n\n    log.info(\"Triggering Backup command\");\n\n    {\n      CollectionAdminRequest.Backup backup = CollectionAdminRequest.backupCollection(collectionName, backupName)\n          .setLocation(location);\n      if (random().nextBoolean()) {\n        assertEquals(0, backup.process(client).getStatus());\n      } else {\n        assertEquals(RequestStatusState.COMPLETED, backup.processAndWait(client, 30));//async\n      }\n    }\n\n    log.info(\"Triggering Restore command\");\n\n    String restoreCollectionName = collectionName + \"_restored\";\n    boolean sameConfig = random().nextBoolean();\n\n    {\n      CollectionAdminRequest.Restore restore = CollectionAdminRequest.restoreCollection(restoreCollectionName, backupName)\n              .setLocation(location);\n      if (origShardToDocCount.size() > cluster.getJettySolrRunners().size()) {\n        // may need to increase maxShardsPerNode (e.g. if it was shard split, then now we need more)\n        restore.setMaxShardsPerNode(origShardToDocCount.size());\n      }\n      Properties props = new Properties();\n      props.setProperty(\"customKey\", \"customVal\");\n      restore.setProperties(props);\n      if (sameConfig==false) {\n        restore.setConfigName(\"customConfigName\");\n      }\n      if (random().nextBoolean()) {\n        assertEquals(0, restore.process(client).getStatus());\n      } else {\n        assertEquals(RequestStatusState.COMPLETED, restore.processAndWait(client, 30));//async\n      }\n      AbstractDistribZkTestBase.waitForRecoveriesToFinish(\n          restoreCollectionName, cluster.getSolrClient().getZkStateReader(), log.isDebugEnabled(), true, 30);\n    }\n\n    //Check the number of results are the same\n    DocCollection restoreCollection = client.getZkStateReader().getClusterState().getCollection(restoreCollectionName);\n    assertEquals(origShardToDocCount, getShardToDocCountMap(client, restoreCollection));\n    //Re-index same docs (should be identical docs given same random seed) and test we have the same result.  Helps\n    //  test we reconstituted the hash ranges / doc router.\n    if (!(restoreCollection.getRouter() instanceof ImplicitDocRouter) && random().nextBoolean()) {\n      indexDocs(restoreCollectionName);\n      assertEquals(origShardToDocCount, getShardToDocCountMap(client, restoreCollection));\n    }\n\n    assertEquals(backupCollection.getReplicationFactor(), restoreCollection.getReplicationFactor());\n    assertEquals(backupCollection.getAutoAddReplicas(), restoreCollection.getAutoAddReplicas());\n    assertEquals(backupCollection.getActiveSlices().iterator().next().getReplicas().size(),\n        restoreCollection.getActiveSlices().iterator().next().getReplicas().size());\n    assertEquals(sameConfig ? \"conf1\" : \"customConfigName\",\n        cluster.getSolrClient().getZkStateReader().readConfigName(restoreCollectionName));\n\n    // assert added core properties:\n    // DWS: did via manual inspection.\n    // TODO Find the applicable core.properties on the file system but how?\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"c5c99ad021f3da085fcb66220598a8f91dc5e453":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c5c99ad021f3da085fcb66220598a8f91dc5e453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["55b50463286869f584cf849d1587a0fcd54d1dfa","4c623a7f72be34d6c45bee682028c50327d9e4b7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4c623a7f72be34d6c45bee682028c50327d9e4b7"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c7a21395bae9e2f61aeb639f47aaca771c426ed"]},"commit2Childs":{"4c623a7f72be34d6c45bee682028c50327d9e4b7":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c5c99ad021f3da085fcb66220598a8f91dc5e453":["1c7a21395bae9e2f61aeb639f47aaca771c426ed"],"1c7a21395bae9e2f61aeb639f47aaca771c426ed":["4c623a7f72be34d6c45bee682028c50327d9e4b7","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5c99ad021f3da085fcb66220598a8f91dc5e453","1c7a21395bae9e2f61aeb639f47aaca771c426ed","55b50463286869f584cf849d1587a0fcd54d1dfa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}