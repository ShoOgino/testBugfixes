{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.SpanNearWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","commits":[{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.SpanNearWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.SpanNearWeight#getSpans(LeafReaderContext,Bits,SpanCollector).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Postings requiredPostings) throws IOException {\n\n      Terms terms = context.reader().terms(field);\n      if (terms == null) {\n        return null; // field does not exist\n      }\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n      for (SpanWeight w : subWeights) {\n        Spans subSpan = w.getSpans(context, acceptDocs, requiredPostings);\n        if (subSpan != null) {\n          subSpans.add(subSpan);\n        } else {\n          return null; // all required\n        }\n      }\n\n      // all NearSpans require at least two subSpans\n      return (!inOrder) ? new NearSpansUnordered(SpanNearQuery.this, subSpans)\n          : new NearSpansOrdered(SpanNearQuery.this, subSpans);\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, SpanCollector collector) throws IOException {\n\n      Terms terms = context.reader().terms(field);\n      if (terms == null) {\n        return null; // field does not exist\n      }\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n      SpanCollector subSpanCollector = inOrder ? collector.bufferedCollector() : collector;\n      for (SpanWeight w : subWeights) {\n        Spans subSpan = w.getSpans(context, acceptDocs, subSpanCollector);\n        if (subSpan != null) {\n          subSpans.add(subSpan);\n        } else {\n          return null; // all required\n        }\n      }\n\n      // all NearSpans require at least two subSpans\n      return (!inOrder) ? new NearSpansUnordered(SpanNearQuery.this, subSpans)\n          : new NearSpansOrdered(SpanNearQuery.this, subSpans);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.SpanNearWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.SpanNearWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      Terms terms = context.reader().terms(field);\n      if (terms == null) {\n        return null; // field does not exist\n      }\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n      for (SpanWeight w : subWeights) {\n        Spans subSpan = w.getSpans(context, requiredPostings);\n        if (subSpan != null) {\n          subSpans.add(subSpan);\n        } else {\n          return null; // all required\n        }\n      }\n\n      // all NearSpans require at least two subSpans\n      return (!inOrder) ? new NearSpansUnordered(SpanNearQuery.this, subSpans)\n          : new NearSpansOrdered(SpanNearQuery.this, subSpans);\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Postings requiredPostings) throws IOException {\n\n      Terms terms = context.reader().terms(field);\n      if (terms == null) {\n        return null; // field does not exist\n      }\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n      for (SpanWeight w : subWeights) {\n        Spans subSpan = w.getSpans(context, acceptDocs, requiredPostings);\n        if (subSpan != null) {\n          subSpans.add(subSpan);\n        } else {\n          return null; // all required\n        }\n      }\n\n      // all NearSpans require at least two subSpans\n      return (!inOrder) ? new NearSpansUnordered(SpanNearQuery.this, subSpans)\n          : new NearSpansOrdered(SpanNearQuery.this, subSpans);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["29aea3139c4326c0501d75d51059855463220279"],"29aea3139c4326c0501d75d51059855463220279":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29aea3139c4326c0501d75d51059855463220279":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29aea3139c4326c0501d75d51059855463220279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}