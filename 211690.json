{"path":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#assertCorrectResults(Facets).mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#assertCorrectResults(Facets).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/TestMultipleIndexFields#assertCorrectResults(Facets).mjava","sourceNew":"  private void assertCorrectResults(Facets facets) throws IOException {\n    assertEquals(5, facets.getSpecificValue(\"Band\"));\n    assertEquals(\"value=5 childCount=2\\n  Rock & Pop (4)\\n  Punk (1)\\n\", facets.getTopChildren(10, \"Band\").toString());\n    assertEquals(\"value=4 childCount=4\\n  The Beatles (1)\\n  U2 (1)\\n  REM (1)\\n  Dave Matthews Band (1)\\n\", facets.getTopChildren(10, \"Band\", \"Rock & Pop\").toString());\n    assertEquals(\"value=3 childCount=3\\n  Mark Twain (1)\\n  Stephen King (1)\\n  Kurt Vonnegut (1)\\n\", facets.getTopChildren(10, \"Author\").toString());\n  }\n\n","sourceOld":"  private void assertCorrectResults(Facets facets) throws IOException {\n    assertEquals(5, facets.getSpecificValue(\"Band\"));\n    assertEquals(\"value=5 childCount=2\\n  Rock & Pop (4)\\n  Punk (1)\\n\", facets.getTopChildren(10, \"Band\").toString());\n    assertEquals(\"value=4 childCount=4\\n  The Beatles (1)\\n  U2 (1)\\n  REM (1)\\n  Dave Matthews Band (1)\\n\", facets.getTopChildren(10, \"Band\", \"Rock & Pop\").toString());\n    assertEquals(\"value=3 childCount=3\\n  Mark Twain (1)\\n  Stephen King (1)\\n  Kurt Vonnegut (1)\\n\", facets.getTopChildren(10, \"Author\").toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56d44586f4c409c6c6c5942b9f0227df806b7300","date":1386027853,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#assertCorrectResults(Facets).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#assertCorrectResults(Facets).mjava","sourceNew":"  private void assertCorrectResults(Facets facets) throws IOException {\n    assertEquals(5, facets.getSpecificValue(\"Band\"));\n    assertEquals(\"dim=Band path=[] value=5 childCount=2\\n  Rock & Pop (4)\\n  Punk (1)\\n\", facets.getTopChildren(10, \"Band\").toString());\n    assertEquals(\"dim=Band path=[Rock & Pop] value=4 childCount=4\\n  The Beatles (1)\\n  U2 (1)\\n  REM (1)\\n  Dave Matthews Band (1)\\n\", facets.getTopChildren(10, \"Band\", \"Rock & Pop\").toString());\n    assertEquals(\"dim=Author path=[] value=3 childCount=3\\n  Mark Twain (1)\\n  Stephen King (1)\\n  Kurt Vonnegut (1)\\n\", facets.getTopChildren(10, \"Author\").toString());\n  }\n\n","sourceOld":"  private void assertCorrectResults(Facets facets) throws IOException {\n    assertEquals(5, facets.getSpecificValue(\"Band\"));\n    assertEquals(\"value=5 childCount=2\\n  Rock & Pop (4)\\n  Punk (1)\\n\", facets.getTopChildren(10, \"Band\").toString());\n    assertEquals(\"value=4 childCount=4\\n  The Beatles (1)\\n  U2 (1)\\n  REM (1)\\n  Dave Matthews Band (1)\\n\", facets.getTopChildren(10, \"Band\", \"Rock & Pop\").toString());\n    assertEquals(\"value=3 childCount=3\\n  Mark Twain (1)\\n  Stephen King (1)\\n  Kurt Vonnegut (1)\\n\", facets.getTopChildren(10, \"Author\").toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/TestMultipleIndexFields#assertCorrectResults(Facets).mjava","pathOld":"/dev/null","sourceNew":"  private void assertCorrectResults(Facets facets) throws IOException {\n    assertEquals(5, facets.getSpecificValue(\"Band\"));\n    assertEquals(\"dim=Band path=[] value=5 childCount=2\\n  Rock & Pop (4)\\n  Punk (1)\\n\", facets.getTopChildren(10, \"Band\").toString());\n    assertEquals(\"dim=Band path=[Rock & Pop] value=4 childCount=4\\n  The Beatles (1)\\n  U2 (1)\\n  REM (1)\\n  Dave Matthews Band (1)\\n\", facets.getTopChildren(10, \"Band\", \"Rock & Pop\").toString());\n    assertEquals(\"dim=Author path=[] value=3 childCount=3\\n  Mark Twain (1)\\n  Stephen King (1)\\n  Kurt Vonnegut (1)\\n\", facets.getTopChildren(10, \"Author\").toString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["21d36d0db865f7b84026b447bec653469a6e66df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56d44586f4c409c6c6c5942b9f0227df806b7300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"56d44586f4c409c6c6c5942b9f0227df806b7300":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","3cc728b07df73b197e6d940d27f9b08b63918f13"],"21d36d0db865f7b84026b447bec653469a6e66df":["56d44586f4c409c6c6c5942b9f0227df806b7300"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}