{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","sourceNew":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdc8b0f2e9bb213784b4c907405ea1b1825ca6c","date":1341488793,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","sourceNew":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    // props.load always assumes iso8859-1...\n    props.load(new ByteArrayInputStream(sb.toString().getBytes(\"ISO-8859-1\")));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","sourceNew":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    // props.load always assumes iso8859-1...\n    props.load(new ByteArrayInputStream(sb.toString().getBytes(\"ISO-8859-1\")));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","sourceNew":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    // props.load always assumes iso8859-1...\n    props.load(new ByteArrayInputStream(sb.toString().getBytes(\"ISO-8859-1\")));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    // props.load always assumes iso8859-1...\n    props.load(new ByteArrayInputStream(sb.toString().getBytes(\"ISO-8859-1\")));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fd8fc50365ae7bb9c0d47256bc40182559b70d1","date":1373649022,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","sourceNew":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new StringReader(sb.toString()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    // props.load always assumes iso8859-1...\n    props.load(new ByteArrayInputStream(sb.toString().getBytes(\"ISO-8859-1\")));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","sourceNew":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new StringReader(sb.toString()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    // props.load always assumes iso8859-1...\n    props.load(new ByteArrayInputStream(sb.toString().getBytes(\"ISO-8859-1\")));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","sourceNew":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new StringReader(sb.toString()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new StringReader(sb.toString()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["5cdc8b0f2e9bb213784b4c907405ea1b1825ca6c"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"5cdc8b0f2e9bb213784b4c907405ea1b1825ca6c":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","5cdc8b0f2e9bb213784b4c907405ea1b1825ca6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["37a0f60745e53927c4c876cfe5b5a58170f0646c","1fd8fc50365ae7bb9c0d47256bc40182559b70d1"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cdc8b0f2e9bb213784b4c907405ea1b1825ca6c","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"5cdc8b0f2e9bb213784b4c907405ea1b1825ca6c":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"1fd8fc50365ae7bb9c0d47256bc40182559b70d1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}