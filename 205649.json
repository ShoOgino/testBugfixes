{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonTree#testContainsRandom().mjava","commits":[{"id":"034996547ca41c5004216fdd0178acbf06438da2","date":1461284133,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonTree#testContainsRandom().mjava","pathOld":"/dev/null","sourceNew":"  /** test that contains() works the same as brute force */\n  public void testContainsRandom() {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = GeoTestUtil.nextPolygon();\n      LatLonTree tree = new LatLonTree(polygon);\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        boolean expected = polygon.contains(point[0], point[1]);\n        assertEquals(expected, tree.contains(point[0], point[1]));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","date":1461308643,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonTree#testContainsRandom().mjava","pathOld":"/dev/null","sourceNew":"  /** test that contains() works the same as brute force */\n  public void testContainsRandom() {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = GeoTestUtil.nextPolygon();\n      LatLonTree tree = new LatLonTree(polygon);\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        boolean expected = polygon.contains(point[0], point[1]);\n        assertEquals(expected, tree.contains(point[0], point[1]));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"925fce43f3bac029d912b9b7de03c789e258a333","date":1461612714,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonTree#testContainsRandom().mjava","sourceNew":null,"sourceOld":"  /** test that contains() works the same as brute force */\n  public void testContainsRandom() {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = GeoTestUtil.nextPolygon();\n      LatLonTree tree = new LatLonTree(polygon);\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        boolean expected = polygon.contains(point[0], point[1]);\n        assertEquals(expected, tree.contains(point[0], point[1]));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonTree#testContainsRandom().mjava","sourceNew":null,"sourceOld":"  /** test that contains() works the same as brute force */\n  public void testContainsRandom() {\n    for (int i = 0; i < 1000; i++) {\n      Polygon polygon = GeoTestUtil.nextPolygon();\n      LatLonTree tree = new LatLonTree(polygon);\n      for (int j = 0; j < 1000; j++) {\n        double point[] = GeoTestUtil.nextPointNear(polygon);\n        boolean expected = polygon.contains(point[0], point[1]);\n        assertEquals(expected, tree.contains(point[0], point[1]));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","034996547ca41c5004216fdd0178acbf06438da2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","925fce43f3bac029d912b9b7de03c789e258a333"],"034996547ca41c5004216fdd0178acbf06438da2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"925fce43f3bac029d912b9b7de03c789e258a333":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"]},"commit2Childs":{"ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","925fce43f3bac029d912b9b7de03c789e258a333"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca","034996547ca41c5004216fdd0178acbf06438da2"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"034996547ca41c5004216fdd0178acbf06438da2":["ec4dfcb8d7e7f83ca209a5bcc83e8b98658e9dca"],"925fce43f3bac029d912b9b7de03c789e258a333":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}