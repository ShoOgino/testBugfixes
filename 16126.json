{"path":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#IntsWriter(Directory,String,AtomicLong).mjava","commits":[{"id":"605b061fadf71aa6458c0005eaae83a98350c403","date":1307117658,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#IntsWriter(Directory,String,AtomicLong).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/PackedIntsImpl.IntsWriter#IntsWriter(Directory,String,AtomicLong).mjava","sourceNew":"    protected IntsWriter(Directory dir, String id, AtomicLong bytesUsed)\n        throws IOException {\n      super(bytesUsed);\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        this.id = id;\n        docToValue = new long[1];\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG); // TODO the\n                                                               // bitset\n                                                               // needs memory\n                                                               // too\n        success = true;\n      } finally {\n        if (!success) {\n          datOut.close();\n        }\n      }\n    }\n\n","sourceOld":"    protected IntsWriter(Directory dir, String id, AtomicLong bytesUsed)\n        throws IOException {\n      super(bytesUsed);\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        this.id = id;\n        docToValue = new long[1];\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG); // TODO the\n                                                               // bitset\n                                                               // needs memory\n                                                               // too\n        success = true;\n      } finally {\n        if (!success) {\n          datOut.close();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#IntsWriter(Directory,String,AtomicLong).mjava","pathOld":"/dev/null","sourceNew":"    protected IntsWriter(Directory dir, String id, AtomicLong bytesUsed)\n        throws IOException {\n      super(bytesUsed);\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        this.id = id;\n        docToValue = new long[1];\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG); // TODO the\n                                                               // bitset\n                                                               // needs memory\n                                                               // too\n        success = true;\n      } finally {\n        if (!success) {\n          datOut.close();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#IntsWriter(Directory,String,AtomicLong).mjava","pathOld":"/dev/null","sourceNew":"    protected IntsWriter(Directory dir, String id, AtomicLong bytesUsed)\n        throws IOException {\n      super(bytesUsed);\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        this.id = id;\n        docToValue = new long[1];\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG); // TODO the\n                                                               // bitset\n                                                               // needs memory\n                                                               // too\n        success = true;\n      } finally {\n        if (!success) {\n          datOut.close();\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#IntsWriter(Directory,String,AtomicLong,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#IntsWriter(Directory,String,AtomicLong).mjava","sourceNew":"    protected IntsWriter(Directory dir, String id, AtomicLong bytesUsed, IOContext context)\n        throws IOException {\n      super(bytesUsed);\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          DATA_EXTENSION), context);\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        this.id = id;\n        docToValue = new long[1];\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG); // TODO the\n                                                               // bitset\n                                                               // needs memory\n                                                               // too\n        success = true;\n      } finally {\n        if (!success) {\n          datOut.close();\n        }\n      }\n    }\n\n","sourceOld":"    protected IntsWriter(Directory dir, String id, AtomicLong bytesUsed)\n        throws IOException {\n      super(bytesUsed);\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        this.id = id;\n        docToValue = new long[1];\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG); // TODO the\n                                                               // bitset\n                                                               // needs memory\n                                                               // too\n        success = true;\n      } finally {\n        if (!success) {\n          datOut.close();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93c59ad5034eecd863f267bd75e1df7b8a51e427","date":1309162882,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#IntsWriter(Directory,String,AtomicLong).mjava","sourceNew":null,"sourceOld":"    protected IntsWriter(Directory dir, String id, AtomicLong bytesUsed)\n        throws IOException {\n      super(bytesUsed);\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        this.id = id;\n        docToValue = new long[1];\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG); // TODO the\n                                                               // bitset\n                                                               // needs memory\n                                                               // too\n        success = true;\n      } finally {\n        if (!success) {\n          datOut.close();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Floats.FloatsWriter#initDataOut().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/IntsImpl.IntsWriter#IntsWriter(Directory,String,AtomicLong).mjava","sourceNew":"    final void initDataOut() throws IOException {\n      assert datOut == null;\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          Writer.DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        assert datOut.getFilePointer() == CodecUtil.headerLength(CODEC_NAME);\n        datOut.writeByte(this.precision);\n        success = true;\n      } finally {\n        if (!success) {\n          IOUtils.closeSafely(true, datOut);\n        }\n      }\n    }\n\n","sourceOld":"    protected IntsWriter(Directory dir, String id, AtomicLong bytesUsed)\n        throws IOException {\n      super(bytesUsed);\n      datOut = dir.createOutput(IndexFileNames.segmentFileName(id, \"\",\n          DATA_EXTENSION));\n      boolean success = false;\n      try {\n        CodecUtil.writeHeader(datOut, CODEC_NAME, VERSION_CURRENT);\n        this.id = id;\n        docToValue = new long[1];\n        bytesUsed.addAndGet(RamUsageEstimator.NUM_BYTES_LONG); // TODO the\n                                                               // bitset\n                                                               // needs memory\n                                                               // too\n        success = true;\n      } finally {\n        if (!success) {\n          datOut.close();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","605b061fadf71aa6458c0005eaae83a98350c403"],"605b061fadf71aa6458c0005eaae83a98350c403":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"2553b00f699380c64959ccb27991289aae87be2e":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","93c59ad5034eecd863f267bd75e1df7b8a51e427"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93c59ad5034eecd863f267bd75e1df7b8a51e427"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["2553b00f699380c64959ccb27991289aae87be2e"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","93c59ad5034eecd863f267bd75e1df7b8a51e427","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"605b061fadf71aa6458c0005eaae83a98350c403":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"93c59ad5034eecd863f267bd75e1df7b8a51e427":["2553b00f699380c64959ccb27991289aae87be2e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","605b061fadf71aa6458c0005eaae83a98350c403"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":[],"2553b00f699380c64959ccb27991289aae87be2e":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","2553b00f699380c64959ccb27991289aae87be2e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}