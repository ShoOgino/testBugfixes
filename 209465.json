{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucketFromSlot(SimpleOrderedMap[Object],Slot,SlotAcc).mjava","commits":[{"id":"94ce69d020f939568b84a1dbbfbd11bfd9907b73","date":1543618146,"type":1,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucketFromSlot(SimpleOrderedMap[Object],Slot,SlotAcc).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucket(SimpleOrderedMap[Object],int,int,DocSet,Query).mjava","sourceNew":"  /** Helper method used solely when looping over buckets to be returned in findTopSlots */\n  private void fillBucketFromSlot(SimpleOrderedMap<Object> target, Slot slot,\n                                  SlotAcc resortAcc) throws IOException {\n    final int count = countAcc.getCount(slot.slot);\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slot.slot >= 0) {\n      collectAcc.setValues(target, slot.slot);\n    }\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    assert null != slot.bucketFilter;\n    final Query filter = slot.bucketFilter;\n    final DocSet subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        if (acc == resortAcc) {\n          // already collected, just need to get the value from the correct slot\n          acc.setValues(target, slot.resortSlotNum);\n        } else {\n          acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n          acc.collect(subDomain, 0, s -> { return new SlotContext(filter); });\n          acc.setValues(target, 0);\n        }\n      }\n    }\n\n    processSubs(target, filter, subDomain, false, null);\n  }\n\n","sourceOld":"  private void fillBucket(SimpleOrderedMap<Object> target, int count, int slotNum, DocSet subDomain, Query filter) throws IOException {\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slotNum >= 0) {\n      collectAcc.setValues(target, slotNum);\n    }\n\n    createOtherAccs(-1, 1);\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    if (subDomain == null) {\n      subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n    }\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n        acc.collect(subDomain, 0, slot -> { return new SlotContext(filter); });\n        acc.setValues(target, 0);\n      }\n    }\n\n    processSubs(target, filter, subDomain, false, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucketFromSlot(SimpleOrderedMap[Object],Slot,SlotAcc).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucketFromSlot(SimpleOrderedMap[Object],Slot,SlotAcc).mjava","sourceNew":"  /** Helper method used solely when looping over buckets to be returned in findTopSlots */\n  private void fillBucketFromSlot(SimpleOrderedMap<Object> target, Slot slot,\n                                  SlotAcc resortAcc) throws IOException {\n    final long count = countAcc.getCount(slot.slot);\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slot.slot >= 0) {\n      collectAcc.setValues(target, slot.slot);\n    }\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    assert null != slot.bucketFilter;\n    final Query filter = slot.bucketFilter;\n    final DocSet subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        if (acc == resortAcc) {\n          // already collected, just need to get the value from the correct slot\n          acc.setValues(target, slot.resortSlotNum);\n        } else {\n          acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n          acc.collect(subDomain, 0, s -> { return new SlotContext(filter); });\n          acc.setValues(target, 0);\n        }\n      }\n    }\n\n    processSubs(target, filter, subDomain, false, null);\n  }\n\n","sourceOld":"  /** Helper method used solely when looping over buckets to be returned in findTopSlots */\n  private void fillBucketFromSlot(SimpleOrderedMap<Object> target, Slot slot,\n                                  SlotAcc resortAcc) throws IOException {\n    final int count = countAcc.getCount(slot.slot);\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slot.slot >= 0) {\n      collectAcc.setValues(target, slot.slot);\n    }\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    assert null != slot.bucketFilter;\n    final Query filter = slot.bucketFilter;\n    final DocSet subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        if (acc == resortAcc) {\n          // already collected, just need to get the value from the correct slot\n          acc.setValues(target, slot.resortSlotNum);\n        } else {\n          acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n          acc.collect(subDomain, 0, s -> { return new SlotContext(filter); });\n          acc.setValues(target, 0);\n        }\n      }\n    }\n\n    processSubs(target, filter, subDomain, false, null);\n  }\n\n","bugFix":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f9e4bd10604489b5817ee29e35ac96a3148cbec","date":1594345357,"type":3,"author":"Michael Gibney","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucketFromSlot(SimpleOrderedMap[Object],Slot,SlotAcc).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#fillBucketFromSlot(SimpleOrderedMap[Object],Slot,SlotAcc).mjava","sourceNew":"  /** Helper method used solely when looping over buckets to be returned in findTopSlots */\n  private void fillBucketFromSlot(SimpleOrderedMap<Object> target, Slot slot,\n                                  SlotAcc resortAcc) throws IOException {\n    final int slotOrd = slot.slot;\n    countAcc.setValues(target, slotOrd);\n    if (countAcc.getCount(slotOrd) <= 0 && !freq.processEmpty) return;\n\n    if (slotOrd >= 0 && collectAcc != null) {\n      collectAcc.setValues(target, slotOrd);\n    }\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    assert null != slot.bucketFilter;\n    final Query filter = slot.bucketFilter;\n    final DocSet subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        if (acc == resortAcc) {\n          // already collected, just need to get the value from the correct slot\n          acc.setValues(target, slot.resortSlotNum);\n        } else {\n          acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n          acc.collect(subDomain, 0, s -> { return new SlotContext(filter); });\n          acc.setValues(target, 0);\n        }\n      }\n    }\n\n    processSubs(target, filter, subDomain, false, null);\n  }\n\n","sourceOld":"  /** Helper method used solely when looping over buckets to be returned in findTopSlots */\n  private void fillBucketFromSlot(SimpleOrderedMap<Object> target, Slot slot,\n                                  SlotAcc resortAcc) throws IOException {\n    final long count = countAcc.getCount(slot.slot);\n    target.add(\"count\", count);\n    if (count <= 0 && !freq.processEmpty) return;\n\n    if (collectAcc != null && slot.slot >= 0) {\n      collectAcc.setValues(target, slot.slot);\n    }\n\n    if (otherAccs == null && freq.subFacets.isEmpty()) return;\n\n    assert null != slot.bucketFilter;\n    final Query filter = slot.bucketFilter;\n    final DocSet subDomain = fcontext.searcher.getDocSet(filter, fcontext.base);\n\n    // if no subFacets, we only need a DocSet\n    // otherwise we need more?\n    // TODO: save something generic like \"slotNum\" in the context and use that to implement things like filter exclusion if necessary?\n    // Hmmm, but we need to look up some stuff anyway (for the label?)\n    // have a method like \"DocSet applyConstraint(facet context, DocSet parent)\"\n    // that's needed for domain changing things like joins anyway???\n\n    if (otherAccs != null) {\n      // do acc at a time (traversing domain each time) or do all accs for each doc?\n      for (SlotAcc acc : otherAccs) {\n        if (acc == resortAcc) {\n          // already collected, just need to get the value from the correct slot\n          acc.setValues(target, slot.resortSlotNum);\n        } else {\n          acc.reset(); // TODO: only needed if we previously used for allBuckets or missing\n          acc.collect(subDomain, 0, s -> { return new SlotContext(filter); });\n          acc.setValues(target, 0);\n        }\n      }\n    }\n\n    processSubs(target, filter, subDomain, false, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"2f9e4bd10604489b5817ee29e35ac96a3148cbec":["1c841e27891873cab110ebeb89f124a8ec470176"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f9e4bd10604489b5817ee29e35ac96a3148cbec"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["2f9e4bd10604489b5817ee29e35ac96a3148cbec"],"2f9e4bd10604489b5817ee29e35ac96a3148cbec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["1c841e27891873cab110ebeb89f124a8ec470176"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}