{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","commits":[{"id":"ca02638278b6e8ae6b18f9db9e55ddbb3092cd13","date":1417836602,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene50Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"292509a05117b3f385b4b7258087c7c71fa1cc41","date":1419782107,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene50Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      StoredDocument doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene50Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene53Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      StoredDocument doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene50Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      StoredDocument doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene54Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      StoredDocument doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene53Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      StoredDocument doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene60Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      StoredDocument doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene54Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      StoredDocument doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene60Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene60Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      StoredDocument doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8","date":1462567286,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene62Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene60Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene62Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene60Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene62Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene60Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene62Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene60Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene70Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene62Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene70Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene62Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene70Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene60Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6930fc653c2b86e857fce0af7ec99993593d0d89","date":1535014305,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene80Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene70Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"938935e3efe6aaecb925448d7f992783247366de","date":1554389977,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene80Codec(RandomPicks.randomFrom(random(), Mode.values()), Lucene50PostingsFormat.FSTLoadMode.AUTO));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene80Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"763da4a9605e47013078edc323b9d4b608f0f9e0","date":1555353576,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene80Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene80Codec(RandomPicks.randomFrom(random(), Mode.values()), Lucene50PostingsFormat.FSTLoadMode.AUTO));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene84Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene80Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene86Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene84Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9","date":1598432674,"type":6,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene86RWCodec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene86Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9","date":1598432674,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene87/TestLucene87StoredFieldsFormatHighCompression#testMixedCompressions().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestLucene50StoredFieldsFormatHighCompression#testMixedCompressions().mjava","sourceNew":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene87Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","sourceOld":"  /**\n   * Change compression params (leaving it the same for old segments)\n   * and tests that nothing breaks.\n   */\n  public void testMixedCompressions() throws Exception {\n    Directory dir = newDirectory();\n    for (int i = 0; i < 10; i++) {\n      IndexWriterConfig iwc = newIndexWriterConfig();\n      iwc.setCodec(new Lucene86Codec(RandomPicks.randomFrom(random(), Mode.values())));\n      IndexWriter iw = new IndexWriter(dir, newIndexWriterConfig());\n      Document doc = new Document();\n      doc.add(new StoredField(\"field1\", \"value1\"));\n      doc.add(new StoredField(\"field2\", \"value2\"));\n      iw.addDocument(doc);\n      if (random().nextInt(4) == 0) {\n        iw.forceMerge(1);\n      }\n      iw.commit();\n      iw.close();\n    }\n    \n    DirectoryReader ir = DirectoryReader.open(dir);\n    assertEquals(10, ir.numDocs());\n    for (int i = 0; i < 10; i++) {\n      Document doc = ir.document(i);\n      assertEquals(\"value1\", doc.get(\"field1\"));\n      assertEquals(\"value2\", doc.get(\"field2\"));\n    }\n    ir.close();\n    // checkindex\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"292509a05117b3f385b4b7258087c7c71fa1cc41":["ca02638278b6e8ae6b18f9db9e55ddbb3092cd13"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["292509a05117b3f385b4b7258087c7c71fa1cc41"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["d470c8182e92b264680e34081b75e70a9f2b3c89","084884d4602f4d1c7411eab29e897e349ce62675"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["938935e3efe6aaecb925448d7f992783247366de"],"6930fc653c2b86e857fce0af7ec99993593d0d89":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"938935e3efe6aaecb925448d7f992783247366de":["6930fc653c2b86e857fce0af7ec99993593d0d89"],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["773bf150032d3ef6c95997a154fb914b82875cb8"],"0ad30c6a479e764150a3316e57263319775f1df2":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","3d33e731a93d4b57e662ff094f64f94a745422d4"],"a870f9917149dc600c4ad4417d615c1795de5864":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","1967bed916cc89da82a1c2085f27976da6d08cbd"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","0ad30c6a479e764150a3316e57263319775f1df2"],"084884d4602f4d1c7411eab29e897e349ce62675":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"773bf150032d3ef6c95997a154fb914b82875cb8":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["a870f9917149dc600c4ad4417d615c1795de5864"],"ca02638278b6e8ae6b18f9db9e55ddbb3092cd13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1eee4175312c41f89aa23427f9e4edfc00deeaac"]},"commit2Childs":{"292509a05117b3f385b4b7258087c7c71fa1cc41":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["a870f9917149dc600c4ad4417d615c1795de5864"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["773bf150032d3ef6c95997a154fb914b82875cb8"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["6930fc653c2b86e857fce0af7ec99993593d0d89","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"763da4a9605e47013078edc323b9d4b608f0f9e0":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"6930fc653c2b86e857fce0af7ec99993593d0d89":["938935e3efe6aaecb925448d7f992783247366de"],"938935e3efe6aaecb925448d7f992783247366de":["763da4a9605e47013078edc323b9d4b608f0f9e0"],"0db8230c9dbe474fc18e1e71cf04c1ada8046ec9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a870f9917149dc600c4ad4417d615c1795de5864":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["1967bed916cc89da82a1c2085f27976da6d08cbd","084884d4602f4d1c7411eab29e897e349ce62675"],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"773bf150032d3ef6c95997a154fb914b82875cb8":["0db8230c9dbe474fc18e1e71cf04c1ada8046ec9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca02638278b6e8ae6b18f9db9e55ddbb3092cd13"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"ca02638278b6e8ae6b18f9db9e55ddbb3092cd13":["292509a05117b3f385b4b7258087c7c71fa1cc41"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","3d33e731a93d4b57e662ff094f64f94a745422d4","fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}