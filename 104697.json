{"path":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAliasing().mjava","commits":[{"id":"245c71087515ed70d4fb9d9484f9dcbd79eebdfc","date":1331372561,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAliasing().mjava","pathOld":"/dev/null","sourceNew":"  public void testAliasing() throws IOException, Exception {\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n // Aliasing\n    // Single field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\", \"f.myalias.qf\",\"name\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"uf\", \"myalias\", \"q\",\"myalias:(Zapp Obnoxious)\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\", \"mm\", \"50%\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\", \"mm\", \"100%\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"who^10.0 where^3.0\", \"f.who.qf\",\"name^2.0\", \"f.where.qf\", \"mytrait_ss^5.0\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias\", \"f.myalias.qf\",\"name mytrait_ss\", \"uf\", \"myalias\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"who\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\", \"qf\", \"id\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -name\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\"), twor);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAliasing().mjava","pathOld":"/dev/null","sourceNew":"  public void testAliasing() throws IOException, Exception {\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n // Aliasing\n    // Single field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\", \"f.myalias.qf\",\"name\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"uf\", \"myalias\", \"q\",\"myalias:(Zapp Obnoxious)\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\", \"mm\", \"50%\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\", \"mm\", \"100%\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"who^10.0 where^3.0\", \"f.who.qf\",\"name^2.0\", \"f.where.qf\", \"mytrait_ss^5.0\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias\", \"f.myalias.qf\",\"name mytrait_ss\", \"uf\", \"myalias\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"who\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\", \"qf\", \"id\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -name\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\"), twor);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAliasing().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAliasing().mjava","sourceNew":"  public void testAliasing() throws Exception {\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n // Aliasing\n    // Single field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\", \"f.myalias.qf\",\"name\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"uf\", \"myalias\", \"q\",\"myalias:(Zapp Obnoxious)\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\", \"mm\", \"50%\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\", \"mm\", \"100%\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"who^10.0 where^3.0\", \"f.who.qf\",\"name^2.0\", \"f.where.qf\", \"mytrait_ss^5.0\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias\", \"f.myalias.qf\",\"name mytrait_ss\", \"uf\", \"myalias\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"who\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\", \"qf\", \"id\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -name\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\"), twor);\n    \n  }\n\n","sourceOld":"  public void testAliasing() throws IOException, Exception {\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n // Aliasing\n    // Single field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\", \"f.myalias.qf\",\"name\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"uf\", \"myalias\", \"q\",\"myalias:(Zapp Obnoxious)\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\", \"mm\", \"50%\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\", \"mm\", \"100%\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"who^10.0 where^3.0\", \"f.who.qf\",\"name^2.0\", \"f.where.qf\", \"mytrait_ss^5.0\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias\", \"f.myalias.qf\",\"name mytrait_ss\", \"uf\", \"myalias\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"who\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\", \"qf\", \"id\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -name\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\"), twor);\n    \n  }\n\n","bugFix":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAliasing().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAliasing().mjava","sourceNew":"  public void testAliasing() throws Exception {\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n // Aliasing\n    // Single field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\", \"f.myalias.qf\",\"name\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"uf\", \"myalias\", \"q\",\"myalias:(Zapp Obnoxious)\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\", \"mm\", \"50%\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\", \"mm\", \"100%\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"who^10.0 where^3.0\", \"f.who.qf\",\"name^2.0\", \"f.where.qf\", \"mytrait_ss^5.0\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias\", \"f.myalias.qf\",\"name mytrait_ss\", \"uf\", \"myalias\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"who\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\", \"qf\", \"id\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -name\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\"), twor);\n    \n  }\n\n","sourceOld":"  public void testAliasing() throws IOException, Exception {\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n // Aliasing\n    // Single field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\", \"f.myalias.qf\",\"name\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"uf\", \"myalias\", \"q\",\"myalias:(Zapp Obnoxious)\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\", \"mm\", \"50%\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\", \"mm\", \"100%\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"who^10.0 where^3.0\", \"f.who.qf\",\"name^2.0\", \"f.where.qf\", \"mytrait_ss^5.0\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias\", \"f.myalias.qf\",\"name mytrait_ss\", \"uf\", \"myalias\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"who\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\", \"qf\", \"id\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -name\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\"), twor);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAliasing().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAliasing().mjava","sourceNew":"  public void testAliasing() throws Exception {\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n // Aliasing\n    // Single field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\", \"f.myalias.qf\",\"name\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"uf\", \"myalias\", \"q\",\"myalias:(Zapp Obnoxious)\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\", \"mm\", \"50%\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\", \"mm\", \"100%\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"who^10.0 where^3.0\", \"f.who.qf\",\"name^2.0\", \"f.where.qf\", \"mytrait_ss^5.0\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias\", \"f.myalias.qf\",\"name mytrait_ss\", \"uf\", \"myalias\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"who\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\", \"qf\", \"id\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -name\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\"), twor);\n    \n  }\n\n","sourceOld":"  public void testAliasing() throws Exception {\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n // Aliasing\n    // Single field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\", \"f.myalias.qf\",\"name\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"uf\", \"myalias\", \"q\",\"myalias:(Zapp Obnoxious)\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\", \"mm\", \"50%\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\", \"mm\", \"100%\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"who^10.0 where^3.0\", \"f.who.qf\",\"name^2.0\", \"f.where.qf\", \"mytrait_ss^5.0\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias\", \"f.myalias.qf\",\"name mytrait_ss\", \"uf\", \"myalias\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"who\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\", \"qf\", \"id\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -name\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\"), twor);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAliasing().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testAliasing().mjava","sourceNew":"  public void testAliasing() throws Exception {\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n // Aliasing\n    // Single field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\", \"f.myalias.qf\",\"name\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"uf\", \"myalias\", \"q\",\"myalias:(Zapp Obnoxious)\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\", \"mm\", \"50%\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\", \"mm\", \"100%\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"who^10.0 where^3.0\", \"f.who.qf\",\"name^2.0\", \"f.where.qf\", \"mytrait_ss^5.0\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias\", \"f.myalias.qf\",\"name mytrait_ss\", \"uf\", \"myalias\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"who\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\", \"qf\", \"id\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -name\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\"), twor);\n    \n  }\n\n","sourceOld":"  public void testAliasing() throws Exception {\n    String oner = \"*[count(//doc)=1]\";\n    String twor = \"*[count(//doc)=2]\";\n    String nor = \"*[count(//doc)=0]\";\n    \n // Aliasing\n    // Single field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"myalias:Zapp\", \"f.myalias.qf\",\"name\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"uf\", \"myalias\", \"q\",\"myalias:(Zapp Obnoxious)\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\", \"mm\", \"50%\"),\n        oner);\n    \n    // Multi field\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"),\n        nor);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 mytrait_ss^5.0\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias^10.0\", \"f.myalias.qf\",\"name^2.0 trait_ss^5.0\", \"mm\", \"100%\"), oner);\n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"who^10.0 where^3.0\", \"f.who.qf\",\"name^2.0\", \"f.where.qf\", \"mytrait_ss^5.0\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"q\",\"Zapp Obnoxious\", \"qf\",\"myalias\", \"f.myalias.qf\",\"name mytrait_ss\", \"uf\", \"myalias\"), oner);\n    \n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"who\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\", \"qf\", \"id\"), twor);\n    assertQ(req(\"defType\",\"edismax\", \"uf\",\"* -name\", \"q\",\"who:(Zapp Obnoxious)\", \"f.who.qf\", \"name^2.0 trait_ss^5.0\"), twor);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","19275ba31e621f6da1b83bf13af75233876fd3d4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","fe33227f6805edab2036cbb80645cc4e2d1fa424","19275ba31e621f6da1b83bf13af75233876fd3d4"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["38e3b736c7ca086d61b7dbb841c905ee115490da","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}