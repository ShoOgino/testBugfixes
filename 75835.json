{"path":"lucene/src/test/org/apache/lucene/TestSearch#buildQueries().mjava","commits":[{"id":"112629f1dfd1451722c6047bcf593e6efc96f5f4","date":1309910887,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#buildQueries().mjava","pathOld":"/dev/null","sourceNew":"  private List<Query> buildQueries() {\n    List<Query> queries = new ArrayList<Query>();\n\n    BooleanQuery booleanAB = new BooleanQuery();\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"b\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAB);\n\n    PhraseQuery phraseAB = new PhraseQuery();\n    phraseAB.add(new Term(\"contents\", \"a\"));\n    phraseAB.add(new Term(\"contents\", \"b\"));\n    queries.add(phraseAB);\n\n    PhraseQuery phraseABC = new PhraseQuery();\n    phraseABC.add(new Term(\"contents\", \"a\"));\n    phraseABC.add(new Term(\"contents\", \"b\"));\n    phraseABC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseABC);\n\n    BooleanQuery booleanAC = new BooleanQuery();\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"c\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAC);\n\n    PhraseQuery phraseAC = new PhraseQuery();\n    phraseAC.add(new Term(\"contents\", \"a\"));\n    phraseAC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseAC);\n\n    PhraseQuery phraseACE = new PhraseQuery();\n    phraseACE.add(new Term(\"contents\", \"a\"));\n    phraseACE.add(new Term(\"contents\", \"c\"));\n    phraseACE.add(new Term(\"contents\", \"e\"));\n    queries.add(phraseACE);\n\n    return queries;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#buildQueries().mjava","pathOld":"/dev/null","sourceNew":"  private List<Query> buildQueries() {\n    List<Query> queries = new ArrayList<Query>();\n\n    BooleanQuery booleanAB = new BooleanQuery();\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"b\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAB);\n\n    PhraseQuery phraseAB = new PhraseQuery();\n    phraseAB.add(new Term(\"contents\", \"a\"));\n    phraseAB.add(new Term(\"contents\", \"b\"));\n    queries.add(phraseAB);\n\n    PhraseQuery phraseABC = new PhraseQuery();\n    phraseABC.add(new Term(\"contents\", \"a\"));\n    phraseABC.add(new Term(\"contents\", \"b\"));\n    phraseABC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseABC);\n\n    BooleanQuery booleanAC = new BooleanQuery();\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"c\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAC);\n\n    PhraseQuery phraseAC = new PhraseQuery();\n    phraseAC.add(new Term(\"contents\", \"a\"));\n    phraseAC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseAC);\n\n    PhraseQuery phraseACE = new PhraseQuery();\n    phraseACE.add(new Term(\"contents\", \"a\"));\n    phraseACE.add(new Term(\"contents\", \"c\"));\n    phraseACE.add(new Term(\"contents\", \"e\"));\n    queries.add(phraseACE);\n\n    return queries;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/TestSearch#buildQueries().mjava","pathOld":"/dev/null","sourceNew":"  private List<Query> buildQueries() {\n    List<Query> queries = new ArrayList<Query>();\n\n    BooleanQuery booleanAB = new BooleanQuery();\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"b\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAB);\n\n    PhraseQuery phraseAB = new PhraseQuery();\n    phraseAB.add(new Term(\"contents\", \"a\"));\n    phraseAB.add(new Term(\"contents\", \"b\"));\n    queries.add(phraseAB);\n\n    PhraseQuery phraseABC = new PhraseQuery();\n    phraseABC.add(new Term(\"contents\", \"a\"));\n    phraseABC.add(new Term(\"contents\", \"b\"));\n    phraseABC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseABC);\n\n    BooleanQuery booleanAC = new BooleanQuery();\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"c\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAC);\n\n    PhraseQuery phraseAC = new PhraseQuery();\n    phraseAC.add(new Term(\"contents\", \"a\"));\n    phraseAC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseAC);\n\n    PhraseQuery phraseACE = new PhraseQuery();\n    phraseACE.add(new Term(\"contents\", \"a\"));\n    phraseACE.add(new Term(\"contents\", \"c\"));\n    phraseACE.add(new Term(\"contents\", \"e\"));\n    queries.add(phraseACE);\n\n    return queries;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/TestSearch#buildQueries().mjava","pathOld":"lucene/src/test/org/apache/lucene/TestSearch#buildQueries().mjava","sourceNew":"  private List<Query> buildQueries() {\n    List<Query> queries = new ArrayList<Query>();\n\n    BooleanQuery booleanAB = new BooleanQuery();\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"b\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAB);\n\n    PhraseQuery phraseAB = new PhraseQuery();\n    phraseAB.add(new Term(\"contents\", \"a\"));\n    phraseAB.add(new Term(\"contents\", \"b\"));\n    queries.add(phraseAB);\n\n    PhraseQuery phraseABC = new PhraseQuery();\n    phraseABC.add(new Term(\"contents\", \"a\"));\n    phraseABC.add(new Term(\"contents\", \"b\"));\n    phraseABC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseABC);\n\n    BooleanQuery booleanAC = new BooleanQuery();\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"c\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAC);\n\n    PhraseQuery phraseAC = new PhraseQuery();\n    phraseAC.add(new Term(\"contents\", \"a\"));\n    phraseAC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseAC);\n\n    PhraseQuery phraseACE = new PhraseQuery();\n    phraseACE.add(new Term(\"contents\", \"a\"));\n    phraseACE.add(new Term(\"contents\", \"c\"));\n    phraseACE.add(new Term(\"contents\", \"e\"));\n    queries.add(phraseACE);\n\n    return queries;\n  }\n\n","sourceOld":"  private List<Query> buildQueries() {\n    List<Query> queries = new ArrayList<Query>();\n\n    BooleanQuery booleanAB = new BooleanQuery();\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAB.add(new TermQuery(new Term(\"contents\", \"b\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAB);\n\n    PhraseQuery phraseAB = new PhraseQuery();\n    phraseAB.add(new Term(\"contents\", \"a\"));\n    phraseAB.add(new Term(\"contents\", \"b\"));\n    queries.add(phraseAB);\n\n    PhraseQuery phraseABC = new PhraseQuery();\n    phraseABC.add(new Term(\"contents\", \"a\"));\n    phraseABC.add(new Term(\"contents\", \"b\"));\n    phraseABC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseABC);\n\n    BooleanQuery booleanAC = new BooleanQuery();\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"a\")), BooleanClause.Occur.SHOULD);\n    booleanAC.add(new TermQuery(new Term(\"contents\", \"c\")), BooleanClause.Occur.SHOULD);\n    queries.add(booleanAC);\n\n    PhraseQuery phraseAC = new PhraseQuery();\n    phraseAC.add(new Term(\"contents\", \"a\"));\n    phraseAC.add(new Term(\"contents\", \"c\"));\n    queries.add(phraseAC);\n\n    PhraseQuery phraseACE = new PhraseQuery();\n    phraseACE.add(new Term(\"contents\", \"a\"));\n    phraseACE.add(new Term(\"contents\", \"c\"));\n    phraseACE.add(new Term(\"contents\", \"e\"));\n    queries.add(phraseACE);\n\n    return queries;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["112629f1dfd1451722c6047bcf593e6efc96f5f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["112629f1dfd1451722c6047bcf593e6efc96f5f4","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"112629f1dfd1451722c6047bcf593e6efc96f5f4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}