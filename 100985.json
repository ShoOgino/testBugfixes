{"path":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.TopFieldLeafCollector#setScorer(Scorable).mjava","commits":[{"id":"b9bcfed304f4a24121ffcf592ea90abdda674363","date":1582808749,"type":0,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.TopFieldLeafCollector#setScorer(Scorable).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void setScorer(Scorable scorer) throws IOException {\n      super.setScorer(scorer);\n      minCompetitiveScore = 0f;\n      updateMinCompetitiveScore(scorer);\n      if (minScoreAcc != null) {\n        updateGlobalMinCompetitiveScore(scorer);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e18fac0122568cb02eb2c92608ca703a723bbbd6","date":1592942698,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.TopFieldLeafCollector#setScorer(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.TopFieldLeafCollector#setScorer(Scorable).mjava","sourceNew":"    @Override\n    public void setScorer(Scorable scorer) throws IOException {\n      super.setScorer(scorer);\n      minCompetitiveScore = 0f;\n      updateMinCompetitiveScore(scorer);\n      if (minScoreAcc != null) {\n        updateGlobalMinCompetitiveScore(scorer);\n      }\n      if (filteringLeafComparator != null && queueFull && hitsThresholdChecker.isThresholdReached()) {\n        // if queue became full and hitsThreshold was reached in previous segments,\n        // notify this segment's leaf comparator that its competitive iterator can be updated\n        filteringLeafComparator.setCanUpdateIterator();\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setScorer(Scorable scorer) throws IOException {\n      super.setScorer(scorer);\n      minCompetitiveScore = 0f;\n      updateMinCompetitiveScore(scorer);\n      if (minScoreAcc != null) {\n        updateGlobalMinCompetitiveScore(scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241","date":1599588987,"type":3,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.TopFieldLeafCollector#setScorer(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/TopFieldCollector.TopFieldLeafCollector#setScorer(Scorable).mjava","sourceNew":"    @Override\n    public void setScorer(Scorable scorer) throws IOException {\n      super.setScorer(scorer);\n      minCompetitiveScore = 0f;\n      updateMinCompetitiveScore(scorer);\n      if (minScoreAcc != null) {\n        updateGlobalMinCompetitiveScore(scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setScorer(Scorable scorer) throws IOException {\n      super.setScorer(scorer);\n      minCompetitiveScore = 0f;\n      updateMinCompetitiveScore(scorer);\n      if (minScoreAcc != null) {\n        updateGlobalMinCompetitiveScore(scorer);\n      }\n      if (filteringLeafComparator != null && queueFull && hitsThresholdChecker.isThresholdReached()) {\n        // if queue became full and hitsThreshold was reached in previous segments,\n        // notify this segment's leaf comparator that its competitive iterator can be updated\n        filteringLeafComparator.setCanUpdateIterator();\n        totalHitsRelation = TotalHits.Relation.GREATER_THAN_OR_EQUAL_TO;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b9bcfed304f4a24121ffcf592ea90abdda674363":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["b9bcfed304f4a24121ffcf592ea90abdda674363"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["e18fac0122568cb02eb2c92608ca703a723bbbd6"]},"commit2Childs":{"b9bcfed304f4a24121ffcf592ea90abdda674363":["e18fac0122568cb02eb2c92608ca703a723bbbd6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b9bcfed304f4a24121ffcf592ea90abdda674363"],"e18fac0122568cb02eb2c92608ca703a723bbbd6":["e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e3d1c24d2bbe79dcf77ffcb104706e42ae3c9241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}