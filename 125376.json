{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMatrix().mjava","commits":[{"id":"12cbb60ff5c08b2405e2cd399e4de97375ebe669","date":1509325197,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMatrix().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"matrix(array(1, 2, 3), rev(array(4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"return-value\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6","date":1516045834,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMatrix().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMatrix().mjava","sourceNew":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setColumnLabels(matrix(array(1, 2, 3), \" +\n        \"                                        rev(array(4,5,6))),\" +\n        \"                                 array(col1, col2, col3)),\" +\n        \"               b=rowAt(a, 1),\" +\n        \"               c=colAt(a, 2),\" +\n        \"               d=getColumnLabels(a),\" +\n        \"               e=topFeatures(a, 1))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> row = (List<Number>)tuples.get(0).get(\"b\");\n\n    assertEquals(row.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> col = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(col.size(), 2);\n    assertEquals(col.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(col.get(1).doubleValue(), 4.0, 0.0);\n\n    List<String> colLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(colLabels.size(), 3);\n    assertEquals(colLabels.get(0), \"col1\");\n    assertEquals(colLabels.get(1), \"col2\");\n    assertEquals(colLabels.get(2), \"col3\");\n\n    List<List<String>> features  = (List<List<String>>)tuples.get(0).get(\"e\");\n    assertEquals(features.size(), 2);\n    assertEquals(features.get(0).size(), 1);\n    assertEquals(features.get(1).size(), 1);\n    assertEquals(features.get(0).get(0), \"col3\");\n    assertEquals(features.get(1).get(0), \"col1\");\n  }\n\n","sourceOld":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"matrix(array(1, 2, 3), rev(array(4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"return-value\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17131c75d55e6aebac087f57f6e99f937386ebe9","date":1516221785,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMatrix().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMatrix().mjava","sourceNew":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setColumnLabels(matrix(array(1, 2, 3), \" +\n        \"                                        rev(array(4,5,6))),\" +\n        \"                                        array(col1, col2, col3)),\" +\n        \"               b=rowAt(a, 1),\" +\n        \"               c=colAt(a, 2),\" +\n        \"               d=getColumnLabels(a),\" +\n        \"               e=topFeatures(a, 1),\" +\n        \"               f=rowCount(a),\" +\n        \"               g=columnCount(a),\" +\n        \"               h=indexOf(d, \\\"col2\\\"),\" +\n        \"               i=indexOf(d, col3))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> row = (List<Number>)tuples.get(0).get(\"b\");\n\n    assertEquals(row.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> col = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(col.size(), 2);\n    assertEquals(col.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(col.get(1).doubleValue(), 4.0, 0.0);\n\n    List<String> colLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(colLabels.size(), 3);\n    assertEquals(colLabels.get(0), \"col1\");\n    assertEquals(colLabels.get(1), \"col2\");\n    assertEquals(colLabels.get(2), \"col3\");\n\n    List<List<String>> features  = (List<List<String>>)tuples.get(0).get(\"e\");\n    assertEquals(features.size(), 2);\n    assertEquals(features.get(0).size(), 1);\n    assertEquals(features.get(1).size(), 1);\n    assertEquals(features.get(0).get(0), \"col3\");\n    assertEquals(features.get(1).get(0), \"col1\");\n\n    assertTrue(tuples.get(0).getLong(\"f\") == 2);\n    assertTrue(tuples.get(0).getLong(\"g\")== 3);\n    assertTrue(tuples.get(0).getLong(\"h\")== 1);\n    assertTrue(tuples.get(0).getLong(\"i\")== 2);\n  }\n\n","sourceOld":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setColumnLabels(matrix(array(1, 2, 3), \" +\n        \"                                        rev(array(4,5,6))),\" +\n        \"                                 array(col1, col2, col3)),\" +\n        \"               b=rowAt(a, 1),\" +\n        \"               c=colAt(a, 2),\" +\n        \"               d=getColumnLabels(a),\" +\n        \"               e=topFeatures(a, 1))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> row = (List<Number>)tuples.get(0).get(\"b\");\n\n    assertEquals(row.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> col = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(col.size(), 2);\n    assertEquals(col.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(col.get(1).doubleValue(), 4.0, 0.0);\n\n    List<String> colLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(colLabels.size(), 3);\n    assertEquals(colLabels.get(0), \"col1\");\n    assertEquals(colLabels.get(1), \"col2\");\n    assertEquals(colLabels.get(2), \"col3\");\n\n    List<List<String>> features  = (List<List<String>>)tuples.get(0).get(\"e\");\n    assertEquals(features.size(), 2);\n    assertEquals(features.get(0).size(), 1);\n    assertEquals(features.get(1).size(), 1);\n    assertEquals(features.get(0).get(0), \"col3\");\n    assertEquals(features.get(1).get(0), \"col1\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMatrix().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMatrix().mjava","sourceNew":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setColumnLabels(matrix(array(1, 2, 3), \" +\n        \"                                        rev(array(4,5,6))),\" +\n        \"                                        array(col1, col2, col3)),\" +\n        \"               b=rowAt(a, 1),\" +\n        \"               c=colAt(a, 2),\" +\n        \"               d=getColumnLabels(a),\" +\n        \"               e=topFeatures(a, 1),\" +\n        \"               f=rowCount(a),\" +\n        \"               g=columnCount(a),\" +\n        \"               h=indexOf(d, \\\"col2\\\"),\" +\n        \"               i=indexOf(d, col3))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> row = (List<Number>)tuples.get(0).get(\"b\");\n\n    assertEquals(row.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> col = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(col.size(), 2);\n    assertEquals(col.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(col.get(1).doubleValue(), 4.0, 0.0);\n\n    List<String> colLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(colLabels.size(), 3);\n    assertEquals(colLabels.get(0), \"col1\");\n    assertEquals(colLabels.get(1), \"col2\");\n    assertEquals(colLabels.get(2), \"col3\");\n\n    List<List<String>> features  = (List<List<String>>)tuples.get(0).get(\"e\");\n    assertEquals(features.size(), 2);\n    assertEquals(features.get(0).size(), 1);\n    assertEquals(features.get(1).size(), 1);\n    assertEquals(features.get(0).get(0), \"col3\");\n    assertEquals(features.get(1).get(0), \"col1\");\n\n    assertTrue(tuples.get(0).getLong(\"f\") == 2);\n    assertTrue(tuples.get(0).getLong(\"g\")== 3);\n    assertTrue(tuples.get(0).getLong(\"h\")== 1);\n    assertTrue(tuples.get(0).getLong(\"i\")== 2);\n  }\n\n","sourceOld":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"matrix(array(1, 2, 3), rev(array(4,5,6)))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"return-value\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf","date":1522951207,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testMatrix().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testMatrix().mjava","sourceNew":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setColumnLabels(matrix(array(1, 2, 3), \" +\n        \"                                        rev(array(4,5,6))),\" +\n        \"                                        array(col1, col2, col3)),\" +\n        \"               b=rowAt(a, 1),\" +\n        \"               c=colAt(a, 2),\" +\n        \"               d=getColumnLabels(a),\" +\n        \"               e=topFeatures(a, 1),\" +\n        \"               f=rowCount(a),\" +\n        \"               g=columnCount(a),\" +\n        \"               h=indexOf(d, \\\"col2\\\"),\" +\n        \"               i=indexOf(d, col3))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> row = (List<Number>)tuples.get(0).get(\"b\");\n\n    assertEquals(row.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> col = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(col.size(), 2);\n    assertEquals(col.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(col.get(1).doubleValue(), 4.0, 0.0);\n\n    List<String> colLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(colLabels.size(), 3);\n    assertEquals(colLabels.get(0), \"col1\");\n    assertEquals(colLabels.get(1), \"col2\");\n    assertEquals(colLabels.get(2), \"col3\");\n\n    List<List<String>> features  = (List<List<String>>)tuples.get(0).get(\"e\");\n    assertEquals(features.size(), 2);\n    assertEquals(features.get(0).size(), 1);\n    assertEquals(features.get(1).size(), 1);\n    assertEquals(features.get(0).get(0), \"col3\");\n    assertEquals(features.get(1).get(0), \"col1\");\n\n    assertTrue(tuples.get(0).getLong(\"f\") == 2);\n    assertTrue(tuples.get(0).getLong(\"g\")== 3);\n    assertTrue(tuples.get(0).getLong(\"h\")== 1);\n    assertTrue(tuples.get(0).getLong(\"i\")== 2);\n  }\n\n","sourceOld":"  @Test\n  public void testMatrix() throws Exception {\n    String cexpr = \"let(echo=true,\" +\n        \"               a=setColumnLabels(matrix(array(1, 2, 3), \" +\n        \"                                        rev(array(4,5,6))),\" +\n        \"                                        array(col1, col2, col3)),\" +\n        \"               b=rowAt(a, 1),\" +\n        \"               c=colAt(a, 2),\" +\n        \"               d=getColumnLabels(a),\" +\n        \"               e=topFeatures(a, 1),\" +\n        \"               f=rowCount(a),\" +\n        \"               g=columnCount(a),\" +\n        \"               h=indexOf(d, \\\"col2\\\"),\" +\n        \"               i=indexOf(d, col3))\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    List<List<Number>> out = (List<List<Number>>)tuples.get(0).get(\"a\");\n\n    List<Number> array1 = out.get(0);\n    assertEquals(array1.size(), 3);\n    assertEquals(array1.get(0).doubleValue(), 1.0, 0.0);\n    assertEquals(array1.get(1).doubleValue(), 2.0, 0.0);\n    assertEquals(array1.get(2).doubleValue(), 3.0, 0.0);\n\n    List<Number> array2 = out.get(1);\n    assertEquals(array2.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> row = (List<Number>)tuples.get(0).get(\"b\");\n\n    assertEquals(row.size(), 3);\n    assertEquals(array2.get(0).doubleValue(), 6.0, 0.0);\n    assertEquals(array2.get(1).doubleValue(), 5.0, 0.0);\n    assertEquals(array2.get(2).doubleValue(), 4.0, 0.0);\n\n    List<Number> col = (List<Number>)tuples.get(0).get(\"c\");\n    assertEquals(col.size(), 2);\n    assertEquals(col.get(0).doubleValue(), 3.0, 0.0);\n    assertEquals(col.get(1).doubleValue(), 4.0, 0.0);\n\n    List<String> colLabels = (List<String>)tuples.get(0).get(\"d\");\n    assertEquals(colLabels.size(), 3);\n    assertEquals(colLabels.get(0), \"col1\");\n    assertEquals(colLabels.get(1), \"col2\");\n    assertEquals(colLabels.get(2), \"col3\");\n\n    List<List<String>> features  = (List<List<String>>)tuples.get(0).get(\"e\");\n    assertEquals(features.size(), 2);\n    assertEquals(features.get(0).size(), 1);\n    assertEquals(features.get(1).size(), 1);\n    assertEquals(features.get(0).get(0), \"col3\");\n    assertEquals(features.get(1).get(0), \"col1\");\n\n    assertTrue(tuples.get(0).getLong(\"f\") == 2);\n    assertTrue(tuples.get(0).getLong(\"g\")== 3);\n    assertTrue(tuples.get(0).getLong(\"h\")== 1);\n    assertTrue(tuples.get(0).getLong(\"i\")== 2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["12cbb60ff5c08b2405e2cd399e4de97375ebe669","17131c75d55e6aebac087f57f6e99f937386ebe9"],"12cbb60ff5c08b2405e2cd399e4de97375ebe669":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6":["12cbb60ff5c08b2405e2cd399e4de97375ebe669"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["b94236357aaa22b76c10629851fe4e376e0cea82"],"17131c75d55e6aebac087f57f6e99f937386ebe9":["5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf"],"12cbb60ff5c08b2405e2cd399e4de97375ebe669":["b94236357aaa22b76c10629851fe4e376e0cea82","5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12cbb60ff5c08b2405e2cd399e4de97375ebe669"],"5f0ec25ba9bff9e87e402c4fe0afe87f877bccd6":["17131c75d55e6aebac087f57f6e99f937386ebe9"],"17131c75d55e6aebac087f57f6e99f937386ebe9":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8ff654a6d1fb7a79aedaa65c23cc052fdc770aaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}