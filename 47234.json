{"path":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","commits":[{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","pathOld":"/dev/null","sourceNew":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < 39; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","pathOld":"/dev/null","sourceNew":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < 39; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","pathOld":"/dev/null","sourceNew":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < 39; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","sourceNew":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < 39; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < 39; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","sourceNew":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < 39; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < 39; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","sourceNew":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < 39; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < 39; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","sourceNew":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < 39; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < 39; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","sourceNew":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 13); i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < 39; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","sourceNew":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 13); i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < 39; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cca56866c19997e28ef073622656669c15210540","date":1307449014,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","sourceNew":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 3); i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 13); i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0762b640e0d0d12b6edb96db68986e13145c3484","date":1307575932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","sourceNew":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 3); i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","sourceNew":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < 39; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","sourceNew":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    for (int i = 0; i < (TEST_NIGHTLY ? 39 : 13); i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","sourceNew":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", TextField.TYPE_STORED, \"d1 first field\"));\n      d.add(new Field(\"f2\", TextField.TYPE_STORED, \"d1 second field\"));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", TextField.TYPE_STORED, \"d2 first field\"));\n      d.add(new BinaryField(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", TextField.TYPE_STORED, \"d2 first field\"));\n      d.add(new BinaryField(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f2\", \"d1 second field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", Store.YES, Index.ANALYZED,\n          TermVector.NO));\n      d.add(new Field(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd","date":1317197236,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","sourceNew":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", TextField.TYPE_STORED));\n      d.add(new Field(\"f2\", \"d1 second field\", TextField.TYPE_STORED));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", TextField.TYPE_STORED));\n      d.add(new BinaryField(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", TextField.TYPE_STORED));\n      d.add(new BinaryField(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", TextField.TYPE_STORED, \"d1 first field\"));\n      d.add(new Field(\"f2\", TextField.TYPE_STORED, \"d1 second field\"));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", TextField.TYPE_STORED, \"d2 first field\"));\n      d.add(new BinaryField(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", TextField.TYPE_STORED, \"d2 first field\"));\n      d.add(new BinaryField(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","sourceNew":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", TextField.TYPE_STORED));\n      d.add(new Field(\"f2\", \"d1 second field\", TextField.TYPE_STORED));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"_1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", TextField.TYPE_STORED));\n      d.add(new BinaryField(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"_1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"_1.fnx\", \"_2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", TextField.TYPE_STORED));\n      d.add(new BinaryField(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"_1.fnx\", \"_2.fnx\", \"_3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"_1.fnx\", \"_2.fnx\", \"_3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"_3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"_3.fnx\");\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", TextField.TYPE_STORED));\n      d.add(new Field(\"f2\", \"d1 second field\", TextField.TYPE_STORED));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", TextField.TYPE_STORED));\n      d.add(new BinaryField(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", TextField.TYPE_STORED));\n      d.add(new BinaryField(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"1.fnx\", \"2.fnx\", \"3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"3.fnx\");\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"319624eb66a10b717d3e66af448543e7dc5c479d","date":1322741556,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestGlobalFieldNumbers#testGlobalFieldNumberOnOldCommit().mjava","sourceNew":null,"sourceOld":"  public void testGlobalFieldNumberOnOldCommit() throws IOException {\n    int num = atLeast(3);\n    for (int i = 0; i < num; i++) {\n      Directory dir = newDirectory();\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n          TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()));\n      Document d = new Document();\n      d.add(new Field(\"f1\", \"d1 first field\", TextField.TYPE_STORED));\n      d.add(new Field(\"f2\", \"d1 second field\", TextField.TYPE_STORED));\n      writer.addDocument(d);\n      writer.commit();\n      assertFNXFiles(dir, \"_1.fnx\");\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", TextField.TYPE_STORED));\n      d.add(new BinaryField(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      assertFNXFiles(dir, \"_1.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"_1.fnx\", \"_2.fnx\");\n      // open first commit\n      List<IndexCommit> listCommits = IndexReader.listCommits(dir);\n      assertEquals(2, listCommits.size());\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setIndexDeletionPolicy(\n          new KeepAllDeletionPolicy()).setIndexCommit(listCommits.get(0)));\n\n      d = new Document();\n      d.add(new Field(\"f1\", \"d2 first field\", TextField.TYPE_STORED));\n      d.add(new BinaryField(\"f3\", new byte[] { 1, 2, 3 }));\n      writer.addDocument(d);\n      writer.commit();\n      // now we have 3 files since f3 is not present in the first commit\n      assertFNXFiles(dir, \"_1.fnx\", \"_2.fnx\", \"_3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"_1.fnx\", \"_2.fnx\", \"_3.fnx\");\n\n      writer = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)));\n      writer.commit();\n      listCommits = IndexReader.listCommits(dir);\n      assertEquals(1, listCommits.size());\n      assertFNXFiles(dir, \"_3.fnx\");\n      writer.close();\n      assertFNXFiles(dir, \"_3.fnx\");\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["79c2cb24929f2649a8875fb629086171f914d5ce","0762b640e0d0d12b6edb96db68986e13145c3484"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"0762b640e0d0d12b6edb96db68986e13145c3484":["cca56866c19997e28ef073622656669c15210540"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7b91922b55d15444d554721b352861d028eb8278":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1224a4027481acce15495b03bce9b48b93b42722"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1224a4027481acce15495b03bce9b48b93b42722"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1224a4027481acce15495b03bce9b48b93b42722"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1224a4027481acce15495b03bce9b48b93b42722","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","0762b640e0d0d12b6edb96db68986e13145c3484"],"319624eb66a10b717d3e66af448543e7dc5c479d":["7b91922b55d15444d554721b352861d028eb8278"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["0762b640e0d0d12b6edb96db68986e13145c3484"],"cca56866c19997e28ef073622656669c15210540":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["319624eb66a10b717d3e66af448543e7dc5c479d"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1224a4027481acce15495b03bce9b48b93b42722":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","cca56866c19997e28ef073622656669c15210540"],"0762b640e0d0d12b6edb96db68986e13145c3484":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"962d04139994fce5193143ef35615499a9a96d78":[],"7b91922b55d15444d554721b352861d028eb8278":["319624eb66a10b717d3e66af448543e7dc5c479d"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","1224a4027481acce15495b03bce9b48b93b42722"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"319624eb66a10b717d3e66af448543e7dc5c479d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"cca56866c19997e28ef073622656669c15210540":["0762b640e0d0d12b6edb96db68986e13145c3484"],"7e4db59c6b6c10e25322cfb41c4c19d78b4298bd":["7b91922b55d15444d554721b352861d028eb8278"],"1224a4027481acce15495b03bce9b48b93b42722":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","f2c5f0cb44df114db4228c8f77861714b5cabaea","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}