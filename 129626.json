{"path":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        final DocumentsWriter writer = this.writer.get();\n        if (writer.infoStream.isEnabled(\"FP\")) {\n          writer.infoStream.message(\"FP\", \"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        final DocumentsWriter writer = this.writer.get();\n        if (writer.infoStream.isEnabled(\"FP\")) {\n          writer.infoStream.message(\"FP\", \"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","date":1329061481,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.dwpt.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        final DocumentsWriter writer = this.writer.get();\n        if (writer.infoStream.isEnabled(\"FP\")) {\n          writer.infoStream.message(\"FP\", \"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        final DocumentsWriter writer = this.writer.get();\n        if (writer.infoStream.isEnabled(\"FP\")) {\n          writer.infoStream.message(\"FP\", \"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7af110b00ea8df9429309d83e38e0533d82e144f","date":1376924768,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.dwpt.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        if (infoStream.isEnabled(\"FP\")) {\n          infoStream.message(\"FP\", \"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.dwpt.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        final DocumentsWriter writer = this.writer.get();\n        if (writer.infoStream.isEnabled(\"FP\")) {\n          writer.infoStream.message(\"FP\", \"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d4861802ca404d78ca1d15f4550eec415b9199","date":1376947894,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.dwpt.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        if (infoStream.isEnabled(\"FP\")) {\n          infoStream.message(\"FP\", \"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.dwpt.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        final DocumentsWriter writer = this.writer.get();\n        if (writer.infoStream.isEnabled(\"FP\")) {\n          writer.infoStream.message(\"FP\", \"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.dwpt.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        if (infoStream.isEnabled(\"FP\")) {\n          infoStream.message(\"FP\", \"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.dwpt.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        final DocumentsWriter writer = this.writer.get();\n        if (writer.infoStream.isEnabled(\"FP\")) {\n          writer.infoStream.message(\"FP\", \"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b22f57666273c2c1f71d0151a6a35245741fcd06","date":1399627618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.dwpt.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        if (infoStream.isEnabled(\"FP\")) {\n          infoStream.message(\"FP\", \"trigger flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.dwpt.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        if (infoStream.isEnabled(\"FP\")) {\n          infoStream.message(\"FP\", \"flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"264935965977b4a9e2f3920420647072c9c49176","date":1586600626,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,DocumentsWriterPerThread).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/FlushByRamOrCountsPolicy#onInsert(DocumentsWriterFlushControl,ThreadState).mjava","sourceNew":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, DocumentsWriterPerThread perThread) {\n    if (flushOnDocCount()\n        && perThread.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(perThread);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        if (infoStream.isEnabled(\"FP\")) {\n          infoStream.message(\"FP\", \"trigger flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, perThread);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void onInsert(DocumentsWriterFlushControl control, ThreadState state) {\n    if (flushOnDocCount()\n        && state.dwpt.getNumDocsInRAM() >= indexWriterConfig\n            .getMaxBufferedDocs()) {\n      // Flush this state by num docs\n      control.setFlushPending(state);\n    } else if (flushOnRAM()) {// flush by RAM\n      final long limit = (long) (indexWriterConfig.getRAMBufferSizeMB() * 1024.d * 1024.d);\n      final long totalRam = control.activeBytes() + control.getDeleteBytesUsed();\n      if (totalRam >= limit) {\n        if (infoStream.isEnabled(\"FP\")) {\n          infoStream.message(\"FP\", \"trigger flush: activeBytes=\" + control.activeBytes() + \" deleteBytes=\" + control.getDeleteBytesUsed() + \" vs limit=\" + limit);\n        }\n        markLargestWriterPending(control, state, totalRam);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"264935965977b4a9e2f3920420647072c9c49176":["b22f57666273c2c1f71d0151a6a35245741fcd06"],"7af110b00ea8df9429309d83e38e0533d82e144f":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","7af110b00ea8df9429309d83e38e0533d82e144f"],"31d4861802ca404d78ca1d15f4550eec415b9199":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600","7af110b00ea8df9429309d83e38e0533d82e144f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b22f57666273c2c1f71d0151a6a35245741fcd06":["7af110b00ea8df9429309d83e38e0533d82e144f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["264935965977b4a9e2f3920420647072c9c49176"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"264935965977b4a9e2f3920420647072c9c49176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7af110b00ea8df9429309d83e38e0533d82e144f":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","b22f57666273c2c1f71d0151a6a35245741fcd06"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f64b5c281a42c5a4634b39a4fcb8f21a0cba1600"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"31d4861802ca404d78ca1d15f4550eec415b9199":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b22f57666273c2c1f71d0151a6a35245741fcd06":["264935965977b4a9e2f3920420647072c9c49176"],"f64b5c281a42c5a4634b39a4fcb8f21a0cba1600":["7af110b00ea8df9429309d83e38e0533d82e144f","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","31d4861802ca404d78ca1d15f4550eec415b9199","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}