{"path":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#getDocuments(SolrQueryRequest).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#getDocuments(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the documents returned by the query and filter queries included in the request.\n   * \n   * @param req the request sent to the handler\n   * @return the set of documents matching the query\n   * @throws SyntaxError if there is a syntax error in the queries\n   * @throws IOException if an error occurs while searching the index\n   */\n  private DocSet getDocuments(SolrQueryRequest req) throws SyntaxError, IOException {\n    SolrParams params = req.getParams();\n    ArrayList<Query> queries = new ArrayList<>();\n\n    // Query Param\n    String queryString = params.get( CommonParams.Q );\n    \n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n\n    QParser parser = QParser.getParser(queryString, defType, req);\n    Query query = parser.getQuery();\n    if (query == null) {\n      // normalize a null query to a query that matches nothing\n      query = new MatchNoDocsQuery();\n    }\n    queries.add(query);\n\n    // Filter Params\n    String[] fqs = req.getParams().getParams(CommonParams.FQ);\n    if (fqs!=null) {\n      for (String fq : fqs) {\n        if (fq != null && fq.trim().length()!=0) {\n          QParser fqp = QParser.getParser(fq, req);\n          queries.add(fqp.getQuery());\n        }\n      }\n    }\n    return req.getSearcher().getDocSet(queries);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#getDocuments(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the documents returned by the query and filter queries included in the request.\n   * \n   * @param req the request sent to the handler\n   * @return the set of documents matching the query\n   * @throws SyntaxError if there is a syntax error in the queries\n   * @throws IOException if an error occurs while searching the index\n   */\n  private DocSet getDocuments(SolrQueryRequest req) throws SyntaxError, IOException {\n    SolrParams params = req.getParams();\n    ArrayList<Query> queries = new ArrayList<>();\n\n    // Query Param\n    String queryString = params.get( CommonParams.Q );\n    \n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n\n    QParser parser = QParser.getParser(queryString, defType, req);\n    Query query = parser.getQuery();\n    if (query == null) {\n      // normalize a null query to a query that matches nothing\n      query = new MatchNoDocsQuery();\n    }\n    queries.add(query);\n\n    // Filter Params\n    String[] fqs = req.getParams().getParams(CommonParams.FQ);\n    if (fqs!=null) {\n      for (String fq : fqs) {\n        if (fq != null && fq.trim().length()!=0) {\n          QParser fqp = QParser.getParser(fq, req);\n          queries.add(fqp.getQuery());\n        }\n      }\n    }\n    return req.getSearcher().getDocSet(queries);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#getDocuments(SolrQueryRequest).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get the documents returned by the query and filter queries included in the request.\n   * \n   * @param req the request sent to the handler\n   * @return the set of documents matching the query\n   * @throws SyntaxError if there is a syntax error in the queries\n   * @throws IOException if an error occurs while searching the index\n   */\n  private DocSet getDocuments(SolrQueryRequest req) throws SyntaxError, IOException {\n    SolrParams params = req.getParams();\n    ArrayList<Query> queries = new ArrayList<>();\n\n    // Query Param\n    String queryString = params.get( CommonParams.Q );\n    \n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n\n    QParser parser = QParser.getParser(queryString, defType, req);\n    Query query = parser.getQuery();\n    if (query == null) {\n      // normalize a null query to a query that matches nothing\n      query = new MatchNoDocsQuery();\n    }\n    queries.add(query);\n\n    // Filter Params\n    String[] fqs = req.getParams().getParams(CommonParams.FQ);\n    if (fqs!=null) {\n      for (String fq : fqs) {\n        if (fq != null && fq.trim().length()!=0) {\n          QParser fqp = QParser.getParser(fq, req);\n          queries.add(fqp.getQuery());\n        }\n      }\n    }\n    return req.getSearcher().getDocSet(queries);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#getDocuments(SolrQueryRequest).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#getDocuments(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Get the documents returned by the query and filter queries included in the request.\n   *\n   * @param req the request sent to the handler\n   * @return the set of documents matching the query\n   * @throws SyntaxError if there is a syntax error in the queries\n   * @throws IOException if an error occurs while searching the index\n   */\n  private DocSet getDocuments(SolrQueryRequest req) throws SyntaxError, IOException {\n    SolrParams params = req.getParams();\n    ArrayList<Query> queries = new ArrayList<>();\n\n    // Query Param\n    String queryString = params.get( CommonParams.Q );\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n\n    QParser parser = QParser.getParser(queryString, defType, req);\n    Query query = parser.getQuery();\n    if (query == null) {\n      // normalize a null query to a query that matches nothing\n      query = new MatchNoDocsQuery();\n    }\n    queries.add(query);\n\n    // Filter Params\n    String[] fqs = req.getParams().getParams(CommonParams.FQ);\n    if (fqs!=null) {\n      for (String fq : fqs) {\n        if (fq != null && fq.trim().length()!=0) {\n          QParser fqp = QParser.getParser(fq, req);\n          queries.add(fqp.getQuery());\n        }\n      }\n    }\n    return req.getSearcher().getDocSet(queries);\n  }\n\n","sourceOld":"  /**\n   * Get the documents returned by the query and filter queries included in the request.\n   * \n   * @param req the request sent to the handler\n   * @return the set of documents matching the query\n   * @throws SyntaxError if there is a syntax error in the queries\n   * @throws IOException if an error occurs while searching the index\n   */\n  private DocSet getDocuments(SolrQueryRequest req) throws SyntaxError, IOException {\n    SolrParams params = req.getParams();\n    ArrayList<Query> queries = new ArrayList<>();\n\n    // Query Param\n    String queryString = params.get( CommonParams.Q );\n    \n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n\n    QParser parser = QParser.getParser(queryString, defType, req);\n    Query query = parser.getQuery();\n    if (query == null) {\n      // normalize a null query to a query that matches nothing\n      query = new MatchNoDocsQuery();\n    }\n    queries.add(query);\n\n    // Filter Params\n    String[] fqs = req.getParams().getParams(CommonParams.FQ);\n    if (fqs!=null) {\n      for (String fq : fqs) {\n        if (fq != null && fq.trim().length()!=0) {\n          QParser fqp = QParser.getParser(fq, req);\n          queries.add(fqp.getQuery());\n        }\n      }\n    }\n    return req.getSearcher().getDocSet(queries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#getDocuments(SolrQueryRequest).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/handler/AnalyticsHandler#getDocuments(SolrQueryRequest).mjava","sourceNew":"  /**\n   * Get the documents returned by the query and filter queries included in the request.\n   *\n   * @param req the request sent to the handler\n   * @return the set of documents matching the query\n   * @throws SyntaxError if there is a syntax error in the queries\n   * @throws IOException if an error occurs while searching the index\n   */\n  private DocSet getDocuments(SolrQueryRequest req) throws SyntaxError, IOException {\n    SolrParams params = req.getParams();\n    ArrayList<Query> queries = new ArrayList<>();\n\n    // Query Param\n    String queryString = params.get( CommonParams.Q );\n\n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n\n    QParser parser = QParser.getParser(queryString, defType, req);\n    Query query = parser.getQuery();\n    if (query == null) {\n      // normalize a null query to a query that matches nothing\n      query = new MatchNoDocsQuery();\n    }\n    queries.add(query);\n\n    // Filter Params\n    String[] fqs = req.getParams().getParams(CommonParams.FQ);\n    if (fqs!=null) {\n      for (String fq : fqs) {\n        if (fq != null && fq.trim().length()!=0) {\n          QParser fqp = QParser.getParser(fq, req);\n          queries.add(fqp.getQuery());\n        }\n      }\n    }\n    return req.getSearcher().getDocSet(queries);\n  }\n\n","sourceOld":"  /**\n   * Get the documents returned by the query and filter queries included in the request.\n   * \n   * @param req the request sent to the handler\n   * @return the set of documents matching the query\n   * @throws SyntaxError if there is a syntax error in the queries\n   * @throws IOException if an error occurs while searching the index\n   */\n  private DocSet getDocuments(SolrQueryRequest req) throws SyntaxError, IOException {\n    SolrParams params = req.getParams();\n    ArrayList<Query> queries = new ArrayList<>();\n\n    // Query Param\n    String queryString = params.get( CommonParams.Q );\n    \n    String defType = params.get(QueryParsing.DEFTYPE, QParserPlugin.DEFAULT_QTYPE);\n\n    QParser parser = QParser.getParser(queryString, defType, req);\n    Query query = parser.getQuery();\n    if (query == null) {\n      // normalize a null query to a query that matches nothing\n      query = new MatchNoDocsQuery();\n    }\n    queries.add(query);\n\n    // Filter Params\n    String[] fqs = req.getParams().getParams(CommonParams.FQ);\n    if (fqs!=null) {\n      for (String fq : fqs) {\n        if (fq != null && fq.trim().length()!=0) {\n          QParser fqp = QParser.getParser(fq, req);\n          queries.add(fqp.getQuery());\n        }\n      }\n    }\n    return req.getSearcher().getDocSet(queries);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["28288370235ed02234a64753cdbf0c6ec096304a","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["1e4e64b7199d2f2a17be7f3926c7532553910dce","30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}