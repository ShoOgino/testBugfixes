{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","commits":[{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        byte id[] = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        String suffix = input.readString();\n        if (!suffix.isEmpty()) {\n          throw new CorruptIndexException(\"invalid codec header: got unexpected suffix: \" + suffix, input);\n        }\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                     Lucene50SegmentInfoFormat.VERSION_START,\n                                     Lucene50SegmentInfoFormat.VERSION_CURRENT);\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        byte[] id = new byte[StringHelper.ID_LENGTH];\n        input.readBytes(id, 0, id.length);\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, id);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8521d944f9dfb45692ec28235dbf116d47ef69ba","date":1417535150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        final Map<String,String> attributes = input.readStringStringMap();\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, Collections.unmodifiableMap(attributes));\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":["3384e6013a93e4d11b7d75388693f8d0388602bf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79700663e164dece87bed4adfd3e28bab6cb1385","date":1425241849,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        final Map<String,String> attributes = input.readStringStringMap();\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, Collections.unmodifiableMap(attributes));\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"299a2348fa24151d150182211b6208a38e5e3450","date":1425304608,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        final Map<String,String> attributes = input.readStringStringMap();\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, Collections.unmodifiableMap(attributes));\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        final Map<String,String> diagnostics = input.readStringStringMap();\n        final Set<String> files = input.readStringSet();\n        final Map<String,String> attributes = input.readStringStringMap();\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, Collections.unmodifiableMap(attributes));\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f8973f28b29873ff0d7a016e562c9036ae649a9","date":1428098193,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, null);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8","date":1462567286,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, null);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, null);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8","date":1462567286,"type":6,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50RWSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, null);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, null);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, null);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":6,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50RWSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, null);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, null);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":6,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50RWSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, null);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, null);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":6,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50RWSegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes, null);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#read(Directory,String,byte[],IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public SegmentInfo read(Directory dir, String segment, byte[] segmentID, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segment, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    try (ChecksumIndexInput input = dir.openChecksumInput(fileName, context)) {\n      Throwable priorE = null;\n      SegmentInfo si = null;\n      try {\n        int format = CodecUtil.checkIndexHeader(input, Lucene50SegmentInfoFormat.CODEC_NAME,\n                                          Lucene50SegmentInfoFormat.VERSION_START,\n                                          Lucene50SegmentInfoFormat.VERSION_CURRENT,\n                                          segmentID, \"\");\n        final Version version = Version.fromBits(input.readInt(), input.readInt(), input.readInt());\n        \n        final int docCount = input.readInt();\n        if (docCount < 0) {\n          throw new CorruptIndexException(\"invalid docCount: \" + docCount, input);\n        }\n        final boolean isCompoundFile = input.readByte() == SegmentInfo.YES;\n        \n        final Map<String,String> diagnostics;\n        final Set<String> files;\n        final Map<String,String> attributes;\n        \n        if (format >= VERSION_SAFE_MAPS) {\n          diagnostics = input.readMapOfStrings();\n          files = input.readSetOfStrings();\n          attributes = input.readMapOfStrings();\n        } else {\n          diagnostics = Collections.unmodifiableMap(input.readStringStringMap());\n          files = Collections.unmodifiableSet(input.readStringSet());\n          attributes = Collections.unmodifiableMap(input.readStringStringMap());\n        }\n        \n        si = new SegmentInfo(dir, version, segment, docCount, isCompoundFile, null, diagnostics, segmentID, attributes);\n        si.setFiles(files);\n      } catch (Throwable exception) {\n        priorE = exception;\n      } finally {\n        CodecUtil.checkFooter(input, priorE);\n      }\n      return si;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3384e6013a93e4d11b7d75388693f8d0388602bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0ad30c6a479e764150a3316e57263319775f1df2":["3f8973f28b29873ff0d7a016e562c9036ae649a9","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["79700663e164dece87bed4adfd3e28bab6cb1385"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3f8973f28b29873ff0d7a016e562c9036ae649a9","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["3f8973f28b29873ff0d7a016e562c9036ae649a9","0ad30c6a479e764150a3316e57263319775f1df2"],"8521d944f9dfb45692ec28235dbf116d47ef69ba":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["8521d944f9dfb45692ec28235dbf116d47ef69ba","79700663e164dece87bed4adfd3e28bab6cb1385"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3f8973f28b29873ff0d7a016e562c9036ae649a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"79700663e164dece87bed4adfd3e28bab6cb1385":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3384e6013a93e4d11b7d75388693f8d0388602bf"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["3f8973f28b29873ff0d7a016e562c9036ae649a9","fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"299a2348fa24151d150182211b6208a38e5e3450":["8521d944f9dfb45692ec28235dbf116d47ef69ba","79700663e164dece87bed4adfd3e28bab6cb1385"],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"commit2Childs":{"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3f8973f28b29873ff0d7a016e562c9036ae649a9":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8521d944f9dfb45692ec28235dbf116d47ef69ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","79700663e164dece87bed4adfd3e28bab6cb1385","299a2348fa24151d150182211b6208a38e5e3450"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3384e6013a93e4d11b7d75388693f8d0388602bf","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"79700663e164dece87bed4adfd3e28bab6cb1385":["3f8973f28b29873ff0d7a016e562c9036ae649a9","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","299a2348fa24151d150182211b6208a38e5e3450"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"299a2348fa24151d150182211b6208a38e5e3450":[],"fbe8fc0e68a5e2e7acce82ba880a982bd15cfab8":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","299a2348fa24151d150182211b6208a38e5e3450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}