{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testRandomRegexps().mjava","commits":[{"id":"089745617a0f9c49f3719652025f61c07e5ce4ae","date":1381543020,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testRandomRegexps().mjava","pathOld":"/dev/null","sourceNew":"  /** blast some random strings through differently configured tokenizers */\n  public void testRandomRegexps() throws Exception {\n    int iters = atLeast(30);\n    for (int i = 0; i < iters; i++) {\n      final CharacterRunAutomaton dfa = new CharacterRunAutomaton(AutomatonTestUtil.randomAutomaton(random()));\n      final boolean lowercase = random().nextBoolean();\n      final int limit = _TestUtil.nextInt(random(), 0, 500);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer t = new MockTokenizer(reader, dfa, lowercase, limit);\n          return new TokenStreamComponents(t, t);\n        }\n      };\n      checkRandomData(random(), a, 100);\n      a.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7c69b0e51e02e191025c0417fcecfd32205f5d45"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testRandomRegexps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testRandomRegexps().mjava","sourceNew":"  /** blast some random strings through differently configured tokenizers */\n  public void testRandomRegexps() throws Exception {\n    int iters = atLeast(30);\n    for (int i = 0; i < iters; i++) {\n      final CharacterRunAutomaton dfa = new CharacterRunAutomaton(AutomatonTestUtil.randomAutomaton(random()));\n      final boolean lowercase = random().nextBoolean();\n      final int limit = _TestUtil.nextInt(random(), 0, 500);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer t = new MockTokenizer(dfa, lowercase, limit);\n          return new TokenStreamComponents(t, t);\n        }\n      };\n      checkRandomData(random(), a, 100);\n      a.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through differently configured tokenizers */\n  public void testRandomRegexps() throws Exception {\n    int iters = atLeast(30);\n    for (int i = 0; i < iters; i++) {\n      final CharacterRunAutomaton dfa = new CharacterRunAutomaton(AutomatonTestUtil.randomAutomaton(random()));\n      final boolean lowercase = random().nextBoolean();\n      final int limit = _TestUtil.nextInt(random(), 0, 500);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer t = new MockTokenizer(reader, dfa, lowercase, limit);\n          return new TokenStreamComponents(t, t);\n        }\n      };\n      checkRandomData(random(), a, 100);\n      a.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testRandomRegexps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testRandomRegexps().mjava","sourceNew":"  /** blast some random strings through differently configured tokenizers */\n  public void testRandomRegexps() throws Exception {\n    int iters = atLeast(30);\n    for (int i = 0; i < iters; i++) {\n      final CharacterRunAutomaton dfa = new CharacterRunAutomaton(AutomatonTestUtil.randomAutomaton(random()));\n      final boolean lowercase = random().nextBoolean();\n      final int limit = TestUtil.nextInt(random(), 0, 500);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer t = new MockTokenizer(dfa, lowercase, limit);\n          return new TokenStreamComponents(t, t);\n        }\n      };\n      checkRandomData(random(), a, 100);\n      a.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through differently configured tokenizers */\n  public void testRandomRegexps() throws Exception {\n    int iters = atLeast(30);\n    for (int i = 0; i < iters; i++) {\n      final CharacterRunAutomaton dfa = new CharacterRunAutomaton(AutomatonTestUtil.randomAutomaton(random()));\n      final boolean lowercase = random().nextBoolean();\n      final int limit = _TestUtil.nextInt(random(), 0, 500);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer t = new MockTokenizer(dfa, lowercase, limit);\n          return new TokenStreamComponents(t, t);\n        }\n      };\n      checkRandomData(random(), a, 100);\n      a.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c69b0e51e02e191025c0417fcecfd32205f5d45","date":1415272618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testRandomRegexps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testRandomRegexps().mjava","sourceNew":"  /** blast some random strings through differently configured tokenizers */\n  public void testRandomRegexps() throws Exception {\n    int iters = atLeast(30);\n    for (int i = 0; i < iters; i++) {\n      final CharacterRunAutomaton dfa = new CharacterRunAutomaton(AutomatonTestUtil.randomAutomaton(random()), Integer.MAX_VALUE);\n      final boolean lowercase = random().nextBoolean();\n      final int limit = TestUtil.nextInt(random(), 0, 500);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer t = new MockTokenizer(dfa, lowercase, limit);\n          return new TokenStreamComponents(t, t);\n        }\n      };\n      checkRandomData(random(), a, 100);\n      a.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through differently configured tokenizers */\n  public void testRandomRegexps() throws Exception {\n    int iters = atLeast(30);\n    for (int i = 0; i < iters; i++) {\n      final CharacterRunAutomaton dfa = new CharacterRunAutomaton(AutomatonTestUtil.randomAutomaton(random()));\n      final boolean lowercase = random().nextBoolean();\n      final int limit = TestUtil.nextInt(random(), 0, 500);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer t = new MockTokenizer(dfa, lowercase, limit);\n          return new TokenStreamComponents(t, t);\n        }\n      };\n      checkRandomData(random(), a, 100);\n      a.close();\n    }\n  }\n\n","bugFix":["089745617a0f9c49f3719652025f61c07e5ce4ae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bbc7f6a833b883b37b6474ecdce0973a9bf09c8","date":1417050396,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testRandomRegexps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testRandomRegexps().mjava","sourceNew":"  /** blast some random strings through differently configured tokenizers */\n  public void testRandomRegexps() throws Exception {\n    int iters = TEST_NIGHTLY ? atLeast(30) : atLeast(1);\n    for (int i = 0; i < iters; i++) {\n      final CharacterRunAutomaton dfa = new CharacterRunAutomaton(AutomatonTestUtil.randomAutomaton(random()), Integer.MAX_VALUE);\n      final boolean lowercase = random().nextBoolean();\n      final int limit = TestUtil.nextInt(random(), 0, 500);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer t = new MockTokenizer(dfa, lowercase, limit);\n          return new TokenStreamComponents(t, t);\n        }\n      };\n      checkRandomData(random(), a, 100);\n      a.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through differently configured tokenizers */\n  public void testRandomRegexps() throws Exception {\n    int iters = atLeast(30);\n    for (int i = 0; i < iters; i++) {\n      final CharacterRunAutomaton dfa = new CharacterRunAutomaton(AutomatonTestUtil.randomAutomaton(random()), Integer.MAX_VALUE);\n      final boolean lowercase = random().nextBoolean();\n      final int limit = TestUtil.nextInt(random(), 0, 500);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer t = new MockTokenizer(dfa, lowercase, limit);\n          return new TokenStreamComponents(t, t);\n        }\n      };\n      checkRandomData(random(), a, 100);\n      a.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testRandomRegexps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestMockAnalyzer#testRandomRegexps().mjava","sourceNew":"  /** blast some random strings through differently configured tokenizers */\n  public void testRandomRegexps() throws Exception {\n    int iters = TEST_NIGHTLY ? atLeast(30) : atLeast(1);\n    for (int i = 0; i < iters; i++) {\n      final CharacterRunAutomaton dfa = new CharacterRunAutomaton(AutomatonTestUtil.randomAutomaton(random()), Integer.MAX_VALUE);\n      final boolean lowercase = random().nextBoolean();\n      final int limit = TestUtil.nextInt(random(), 0, 500);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer t = new MockTokenizer(dfa, lowercase, limit);\n          return new TokenStreamComponents(t, t);\n        }\n      };\n      checkRandomData(random(), a, 100);\n      a.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through differently configured tokenizers */\n  public void testRandomRegexps() throws Exception {\n    int iters = TEST_NIGHTLY ? atLeast(30) : atLeast(1);\n    for (int i = 0; i < iters; i++) {\n      final CharacterRunAutomaton dfa = new CharacterRunAutomaton(AutomatonTestUtil.randomAutomaton(random()), Integer.MAX_VALUE);\n      final boolean lowercase = random().nextBoolean();\n      final int limit = TestUtil.nextInt(random(), 0, 500);\n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer t = new MockTokenizer(dfa, lowercase, limit);\n          return new TokenStreamComponents(t, t);\n        }\n      };\n      checkRandomData(random(), a, 100);\n      a.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3bbc7f6a833b883b37b6474ecdce0973a9bf09c8":["7c69b0e51e02e191025c0417fcecfd32205f5d45"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["089745617a0f9c49f3719652025f61c07e5ce4ae"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"7c69b0e51e02e191025c0417fcecfd32205f5d45":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["3bbc7f6a833b883b37b6474ecdce0973a9bf09c8"],"089745617a0f9c49f3719652025f61c07e5ce4ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"3bbc7f6a833b883b37b6474ecdce0973a9bf09c8":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["7c69b0e51e02e191025c0417fcecfd32205f5d45"],"7c69b0e51e02e191025c0417fcecfd32205f5d45":["3bbc7f6a833b883b37b6474ecdce0973a9bf09c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["089745617a0f9c49f3719652025f61c07e5ce4ae"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"089745617a0f9c49f3719652025f61c07e5ce4ae":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}