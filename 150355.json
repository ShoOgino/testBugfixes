{"path":"lucene/tools/src/java/org/apache/lucene/dependencies/InterpolatedProperties#interpolate().mjava","commits":[{"id":"b3e4bd3aed493904d0bbb6c6e0394f619e175087","date":1401446035,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/InterpolatedProperties#interpolate().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Perform non-recursive Ant-like property value interpolation\n   */\n  private void interpolate() {\n    StringBuffer buffer = new StringBuffer();\n    for (Map.Entry entry : entrySet()) {\n      buffer.setLength(0);\n      Matcher matcher = PROPERTY_REFERENCE_PATTERN.matcher(entry.getValue().toString());\n      while (matcher.find()) {\n        String interpolatedValue = getProperty(matcher.group(1));\n        if (null != interpolatedValue) {\n          matcher.appendReplacement(buffer, interpolatedValue);\n        }\n      }\n      matcher.appendTail(buffer);\n      setProperty((String) entry.getKey(), buffer.toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec1a71fbd0f533ceb6c940816637d33e90394dc1","date":1439660103,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/InterpolatedProperties#interpolate().mjava","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/InterpolatedProperties#interpolate().mjava","sourceNew":"  /**\n   * Perform non-recursive Ant-like property value interpolation\n   */\n  private void interpolate() {\n    StringBuffer buffer = new StringBuffer();\n    for (Map.Entry<?,?> entry : entrySet()) {\n      buffer.setLength(0);\n      Matcher matcher = PROPERTY_REFERENCE_PATTERN.matcher(entry.getValue().toString());\n      while (matcher.find()) {\n        String interpolatedValue = getProperty(matcher.group(1));\n        if (null != interpolatedValue) {\n          matcher.appendReplacement(buffer, interpolatedValue);\n        }\n      }\n      matcher.appendTail(buffer);\n      setProperty((String) entry.getKey(), buffer.toString());\n    }\n  }\n\n","sourceOld":"  /**\n   * Perform non-recursive Ant-like property value interpolation\n   */\n  private void interpolate() {\n    StringBuffer buffer = new StringBuffer();\n    for (Map.Entry entry : entrySet()) {\n      buffer.setLength(0);\n      Matcher matcher = PROPERTY_REFERENCE_PATTERN.matcher(entry.getValue().toString());\n      while (matcher.find()) {\n        String interpolatedValue = getProperty(matcher.group(1));\n        if (null != interpolatedValue) {\n          matcher.appendReplacement(buffer, interpolatedValue);\n        }\n      }\n      matcher.appendTail(buffer);\n      setProperty((String) entry.getKey(), buffer.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61a7cdcdcc2cb2867472e1cfc130786166636143","date":1525692131,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/InterpolatedProperties#interpolate().mjava","sourceNew":null,"sourceOld":"  /**\n   * Perform non-recursive Ant-like property value interpolation\n   */\n  private void interpolate() {\n    StringBuffer buffer = new StringBuffer();\n    for (Map.Entry<?,?> entry : entrySet()) {\n      buffer.setLength(0);\n      Matcher matcher = PROPERTY_REFERENCE_PATTERN.matcher(entry.getValue().toString());\n      while (matcher.find()) {\n        String interpolatedValue = getProperty(matcher.group(1));\n        if (null != interpolatedValue) {\n          matcher.appendReplacement(buffer, interpolatedValue);\n        }\n      }\n      matcher.appendTail(buffer);\n      setProperty((String) entry.getKey(), buffer.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"61a7cdcdcc2cb2867472e1cfc130786166636143":["ec1a71fbd0f533ceb6c940816637d33e90394dc1"],"ec1a71fbd0f533ceb6c940816637d33e90394dc1":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61a7cdcdcc2cb2867472e1cfc130786166636143"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b3e4bd3aed493904d0bbb6c6e0394f619e175087"],"61a7cdcdcc2cb2867472e1cfc130786166636143":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec1a71fbd0f533ceb6c940816637d33e90394dc1":["61a7cdcdcc2cb2867472e1cfc130786166636143"],"b3e4bd3aed493904d0bbb6c6e0394f619e175087":["ec1a71fbd0f533ceb6c940816637d33e90394dc1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}