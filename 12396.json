{"path":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#testReloadSuccess(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","commits":[{"id":"8b51e04dc58a1002908e3caba8f5eb8ef59abe00","date":1384906513,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#testReloadSuccess(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"/dev/null","sourceNew":"  private boolean testReloadSuccess(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) {\n    // Try writing the config to a temporary core and reloading to see that we don't allow people to shoot themselves\n    // in the foot.\n    File home = null;\n    try {\n      home = new File(FileUtils.getTempDirectory(), \"SOLR_5459\"); // Unlikely to name a core or collection this!\n      FileUtils.writeStringToFile(new File(home, \"solr.xml\"), \"<solr></solr>\"); // Use auto-discovery\n      File coll = new File(home, \"SOLR_5459\");\n\n      SolrCore core = req.getCore();\n      CoreDescriptor desc = core.getCoreDescriptor();\n      CoreContainer coreContainer = desc.getCoreContainer();\n\n      if (coreContainer.isZooKeeperAware()) {\n        try {\n          String confPath = ((ZkSolrResourceLoader) core.getResourceLoader()).getCollectionZkPath();\n\n          ZkController.downloadConfigDir(coreContainer.getZkController().getZkClient(), confPath,\n              new File(coll, \"conf\"));\n        } catch (Exception ex) {\n          log.error(\"Error when attempting to download conf from ZooKeeper: \" + ex.getMessage());\n          rsp.setException(new SolrException(ErrorCode.BAD_REQUEST,\n              \"Error when attempting to download conf from ZooKeeper\" + ex.getMessage()));\n          return false;\n        }\n      } else {\n        FileUtils.copyDirectory(new File(desc.getInstanceDir(), \"conf\"),\n            new File(coll, \"conf\"));\n      }\n\n      FileUtils.writeStringToFile(new File(coll, \"core.properties\"), \"name=SOLR_5459\");\n\n      FileUtils.copyInputStreamToFile(stream.getStream(),\n          new File(new File(coll, \"conf\"), req.getParams().get(\"file\", null)));\n\n      return tryReloading(rsp, home);\n\n    } catch (IOException ex) {\n      log.warn(\"Caught IO exception when trying to verify configs. \" + ex.getMessage());\n      rsp.setException(new SolrException(ErrorCode.SERVER_ERROR,\n          \"Caught IO exception when trying to verify configs. \" + ex.getMessage()));\n      return false;\n    } finally {\n      if (home != null) {\n        try {\n          FileUtils.deleteDirectory(home);\n        } catch (IOException e) {\n          log.warn(\"Caught IO exception trying to delete temporary directory \" + home + e.getMessage());\n          return true; // Don't fail for this reason!\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3","1e9ce820cd3ed9efb959c181daaafd22f0c70143"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3","date":1385076439,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#testReloadSuccess(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#testReloadSuccess(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  private boolean testReloadSuccess(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) {\n    // Try writing the config to a temporary core and reloading to see that we don't allow people to shoot themselves\n    // in the foot.\n    File home = null;\n    try {\n      home = new File(FileUtils.getTempDirectory(), \"SOLR_5459\"); // Unlikely to name a core or collection this!\n      FileUtils.writeStringToFile(new File(home, \"solr.xml\"), \"<solr></solr>\", \"UTF-8\"); // Use auto-discovery\n      File coll = new File(home, \"SOLR_5459\");\n\n      SolrCore core = req.getCore();\n      CoreDescriptor desc = core.getCoreDescriptor();\n      CoreContainer coreContainer = desc.getCoreContainer();\n\n      if (coreContainer.isZooKeeperAware()) {\n        try {\n          String confPath = ((ZkSolrResourceLoader) core.getResourceLoader()).getCollectionZkPath();\n\n          ZkController.downloadConfigDir(coreContainer.getZkController().getZkClient(), confPath,\n              new File(coll, \"conf\"));\n        } catch (Exception ex) {\n          log.error(\"Error when attempting to download conf from ZooKeeper: \" + ex.getMessage());\n          rsp.setException(new SolrException(ErrorCode.BAD_REQUEST,\n              \"Error when attempting to download conf from ZooKeeper\" + ex.getMessage()));\n          return false;\n        }\n      } else {\n        FileUtils.copyDirectory(new File(desc.getInstanceDir(), \"conf\"),\n            new File(coll, \"conf\"));\n      }\n\n      FileUtils.writeStringToFile(new File(coll, \"core.properties\"), \"name=SOLR_5459\", \"UTF-8\");\n\n      FileUtils.copyInputStreamToFile(stream.getStream(),\n          new File(new File(coll, \"conf\"), req.getParams().get(\"file\", null)));\n\n      return tryReloading(rsp, home);\n\n    } catch (IOException ex) {\n      log.warn(\"Caught IO exception when trying to verify configs. \" + ex.getMessage());\n      rsp.setException(new SolrException(ErrorCode.SERVER_ERROR,\n          \"Caught IO exception when trying to verify configs. \" + ex.getMessage()));\n      return false;\n    } finally {\n      if (home != null) {\n        try {\n          FileUtils.deleteDirectory(home);\n        } catch (IOException e) {\n          log.warn(\"Caught IO exception trying to delete temporary directory \" + home + e.getMessage());\n          return true; // Don't fail for this reason!\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private boolean testReloadSuccess(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) {\n    // Try writing the config to a temporary core and reloading to see that we don't allow people to shoot themselves\n    // in the foot.\n    File home = null;\n    try {\n      home = new File(FileUtils.getTempDirectory(), \"SOLR_5459\"); // Unlikely to name a core or collection this!\n      FileUtils.writeStringToFile(new File(home, \"solr.xml\"), \"<solr></solr>\"); // Use auto-discovery\n      File coll = new File(home, \"SOLR_5459\");\n\n      SolrCore core = req.getCore();\n      CoreDescriptor desc = core.getCoreDescriptor();\n      CoreContainer coreContainer = desc.getCoreContainer();\n\n      if (coreContainer.isZooKeeperAware()) {\n        try {\n          String confPath = ((ZkSolrResourceLoader) core.getResourceLoader()).getCollectionZkPath();\n\n          ZkController.downloadConfigDir(coreContainer.getZkController().getZkClient(), confPath,\n              new File(coll, \"conf\"));\n        } catch (Exception ex) {\n          log.error(\"Error when attempting to download conf from ZooKeeper: \" + ex.getMessage());\n          rsp.setException(new SolrException(ErrorCode.BAD_REQUEST,\n              \"Error when attempting to download conf from ZooKeeper\" + ex.getMessage()));\n          return false;\n        }\n      } else {\n        FileUtils.copyDirectory(new File(desc.getInstanceDir(), \"conf\"),\n            new File(coll, \"conf\"));\n      }\n\n      FileUtils.writeStringToFile(new File(coll, \"core.properties\"), \"name=SOLR_5459\");\n\n      FileUtils.copyInputStreamToFile(stream.getStream(),\n          new File(new File(coll, \"conf\"), req.getParams().get(\"file\", null)));\n\n      return tryReloading(rsp, home);\n\n    } catch (IOException ex) {\n      log.warn(\"Caught IO exception when trying to verify configs. \" + ex.getMessage());\n      rsp.setException(new SolrException(ErrorCode.SERVER_ERROR,\n          \"Caught IO exception when trying to verify configs. \" + ex.getMessage()));\n      return false;\n    } finally {\n      if (home != null) {\n        try {\n          FileUtils.deleteDirectory(home);\n        } catch (IOException e) {\n          log.warn(\"Caught IO exception trying to delete temporary directory \" + home + e.getMessage());\n          return true; // Don't fail for this reason!\n        }\n      }\n    }\n  }\n\n","bugFix":["8b51e04dc58a1002908e3caba8f5eb8ef59abe00"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7455ee5c847b2ee7e44656e4218141f62dacb572","date":1386032125,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/EditFileRequestHandler#testReloadSuccess(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler#testReloadSuccess(SolrQueryRequest,SolrQueryResponse,ContentStream).mjava","sourceNew":"  private boolean testReloadSuccess(SolrQueryRequest req, SolrQueryResponse rsp) {\n    // Try writing the config to a temporary core and reloading to see that we don't allow people to shoot themselves\n    // in the foot.\n    File home = null;\n    try {\n      home = new File(FileUtils.getTempDirectory(), \"SOLR_5459\"); // Unlikely to name a core or collection this!\n      FileUtils.writeStringToFile(new File(home, \"solr.xml\"), \"<solr></solr>\", \"UTF-8\"); // Use auto-discovery\n      File coll = new File(home, \"SOLR_5459\");\n\n      SolrCore core = req.getCore();\n      CoreDescriptor desc = core.getCoreDescriptor();\n      CoreContainer coreContainer = desc.getCoreContainer();\n\n      if (coreContainer.isZooKeeperAware()) {\n        try {\n          String confPath = ((ZkSolrResourceLoader) core.getResourceLoader()).getCollectionZkPath();\n\n          ZkController.downloadConfigDir(coreContainer.getZkController().getZkClient(), confPath,\n              new File(coll, \"conf\"));\n        } catch (Exception ex) {\n          log.error(\"Error when attempting to download conf from ZooKeeper: \" + ex.getMessage());\n          rsp.setException(new SolrException(ErrorCode.BAD_REQUEST,\n              \"Error when attempting to download conf from ZooKeeper\" + ex.getMessage()));\n          return false;\n        }\n      } else {\n        FileUtils.copyDirectory(new File(desc.getInstanceDir(), \"conf\"),\n            new File(coll, \"conf\"));\n      }\n\n      FileUtils.writeStringToFile(new File(coll, \"core.properties\"), \"name=SOLR_5459\", \"UTF-8\");\n\n      FileUtils.writeByteArrayToFile(new File(new File(coll, \"conf\"), req.getParams().get(\"file\", null)), data);\n\n      return tryReloading(rsp, home);\n\n    } catch (IOException ex) {\n      log.warn(\"Caught IO exception when trying to verify configs. \" + ex.getMessage());\n      rsp.setException(new SolrException(ErrorCode.SERVER_ERROR,\n          \"Caught IO exception when trying to verify configs. \" + ex.getMessage()));\n      return false;\n    } finally {\n      if (home != null) {\n        try {\n          FileUtils.deleteDirectory(home);\n        } catch (IOException e) {\n          log.warn(\"Caught IO exception trying to delete temporary directory \" + home + e.getMessage());\n          return true; // Don't fail for this reason!\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private boolean testReloadSuccess(SolrQueryRequest req, SolrQueryResponse rsp, ContentStream stream) {\n    // Try writing the config to a temporary core and reloading to see that we don't allow people to shoot themselves\n    // in the foot.\n    File home = null;\n    try {\n      home = new File(FileUtils.getTempDirectory(), \"SOLR_5459\"); // Unlikely to name a core or collection this!\n      FileUtils.writeStringToFile(new File(home, \"solr.xml\"), \"<solr></solr>\", \"UTF-8\"); // Use auto-discovery\n      File coll = new File(home, \"SOLR_5459\");\n\n      SolrCore core = req.getCore();\n      CoreDescriptor desc = core.getCoreDescriptor();\n      CoreContainer coreContainer = desc.getCoreContainer();\n\n      if (coreContainer.isZooKeeperAware()) {\n        try {\n          String confPath = ((ZkSolrResourceLoader) core.getResourceLoader()).getCollectionZkPath();\n\n          ZkController.downloadConfigDir(coreContainer.getZkController().getZkClient(), confPath,\n              new File(coll, \"conf\"));\n        } catch (Exception ex) {\n          log.error(\"Error when attempting to download conf from ZooKeeper: \" + ex.getMessage());\n          rsp.setException(new SolrException(ErrorCode.BAD_REQUEST,\n              \"Error when attempting to download conf from ZooKeeper\" + ex.getMessage()));\n          return false;\n        }\n      } else {\n        FileUtils.copyDirectory(new File(desc.getInstanceDir(), \"conf\"),\n            new File(coll, \"conf\"));\n      }\n\n      FileUtils.writeStringToFile(new File(coll, \"core.properties\"), \"name=SOLR_5459\", \"UTF-8\");\n\n      FileUtils.copyInputStreamToFile(stream.getStream(),\n          new File(new File(coll, \"conf\"), req.getParams().get(\"file\", null)));\n\n      return tryReloading(rsp, home);\n\n    } catch (IOException ex) {\n      log.warn(\"Caught IO exception when trying to verify configs. \" + ex.getMessage());\n      rsp.setException(new SolrException(ErrorCode.SERVER_ERROR,\n          \"Caught IO exception when trying to verify configs. \" + ex.getMessage()));\n      return false;\n    } finally {\n      if (home != null) {\n        try {\n          FileUtils.deleteDirectory(home);\n        } catch (IOException e) {\n          log.warn(\"Caught IO exception trying to delete temporary directory \" + home + e.getMessage());\n          return true; // Don't fail for this reason!\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8b51e04dc58a1002908e3caba8f5eb8ef59abe00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7455ee5c847b2ee7e44656e4218141f62dacb572":["acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3"],"acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3":["8b51e04dc58a1002908e3caba8f5eb8ef59abe00"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7455ee5c847b2ee7e44656e4218141f62dacb572"]},"commit2Childs":{"8b51e04dc58a1002908e3caba8f5eb8ef59abe00":["acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b51e04dc58a1002908e3caba8f5eb8ef59abe00"],"7455ee5c847b2ee7e44656e4218141f62dacb572":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"acf4cf32816bb6a86c3e6e7ed852b60c02f9aac3":["7455ee5c847b2ee7e44656e4218141f62dacb572"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}