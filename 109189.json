{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Predicate[String],long).mjava","commits":[{"id":"1e4014209b24e71d602e579a316f994355596012","date":1465717267,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Predicate[String],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Set[String],long).mjava","sourceNew":"  public List<QueueEvent> peekTopN(int n, Predicate<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (Pair<String, byte[]> element : peekElements(n, waitMillis, child -> !excludeSet.test(dir + \"/\" + child))) {\n        topN.add(new QueueEvent(dir + \"/\" + element.first(),\n            element.second(), null));\n      }\n      printQueueEventsListElementIds(topN);\n      return topN;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  public List<QueueEvent> peekTopN(int n, Set<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (Pair<String, byte[]> element : peekElements(n, waitMillis, child -> !excludeSet.contains(dir + \"/\" + child))) {\n        topN.add(new QueueEvent(dir + \"/\" + element.first(),\n            element.second(), null));\n      }\n      printQueueEventsListElementIds(topN);\n      return topN;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Predicate[String],long).mjava","pathOld":"/dev/null","sourceNew":"  public List<QueueEvent> peekTopN(int n, Predicate<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (Pair<String, byte[]> element : peekElements(n, waitMillis, child -> !excludeSet.test(dir + \"/\" + child))) {\n        topN.add(new QueueEvent(dir + \"/\" + element.first(),\n            element.second(), null));\n      }\n      printQueueEventsListElementIds(topN);\n      return topN;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3e7752e8a5e963c6939aaa99c36134147a5ece","date":1479805653,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Predicate[String],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Predicate[String],long).mjava","sourceNew":"  public List<QueueEvent> peekTopN(int n, Predicate<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    Timer.Context time;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (Pair<String, byte[]> element : peekElements(n, waitMillis, child -> !excludeSet.test(dir + \"/\" + child))) {\n        topN.add(new QueueEvent(dir + \"/\" + element.first(),\n            element.second(), null));\n      }\n      printQueueEventsListElementIds(topN);\n      return topN;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  public List<QueueEvent> peekTopN(int n, Predicate<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (Pair<String, byte[]> element : peekElements(n, waitMillis, child -> !excludeSet.test(dir + \"/\" + child))) {\n        topN.add(new QueueEvent(dir + \"/\" + element.first(),\n            element.second(), null));\n      }\n      printQueueEventsListElementIds(topN);\n      return topN;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Predicate[String],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Predicate[String],long).mjava","sourceNew":"  public List<QueueEvent> peekTopN(int n, Predicate<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    Timer.Context time;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (Pair<String, byte[]> element : peekElements(n, waitMillis, child -> !excludeSet.test(dir + \"/\" + child))) {\n        topN.add(new QueueEvent(dir + \"/\" + element.first(),\n            element.second(), null));\n      }\n      printQueueEventsListElementIds(topN);\n      return topN;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  public List<QueueEvent> peekTopN(int n, Predicate<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    TimerContext time;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (Pair<String, byte[]> element : peekElements(n, waitMillis, child -> !excludeSet.test(dir + \"/\" + child))) {\n        topN.add(new QueueEvent(dir + \"/\" + element.first(),\n            element.second(), null));\n      }\n      printQueueEventsListElementIds(topN);\n      return topN;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Predicate[String],long).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue#peekTopN(int,Predicate[String],long).mjava","sourceNew":"  public List<QueueEvent> peekTopN(int n, Predicate<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    log.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    Timer.Context time;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (Pair<String, byte[]> element : peekElements(n, waitMillis, child -> !excludeSet.test(dir + \"/\" + child))) {\n        topN.add(new QueueEvent(dir + \"/\" + element.first(),\n            element.second(), null));\n      }\n      printQueueEventsListElementIds(topN);\n      return topN;\n    } finally {\n      time.stop();\n    }\n  }\n\n","sourceOld":"  public List<QueueEvent> peekTopN(int n, Predicate<String> excludeSet, long waitMillis)\n      throws KeeperException, InterruptedException {\n    ArrayList<QueueEvent> topN = new ArrayList<>();\n\n    LOG.debug(\"Peeking for top {} elements. ExcludeSet: {}\", n, excludeSet);\n    Timer.Context time;\n    if (waitMillis == Long.MAX_VALUE) time = stats.time(dir + \"_peekTopN_wait_forever\");\n    else time = stats.time(dir + \"_peekTopN_wait\" + waitMillis);\n\n    try {\n      for (Pair<String, byte[]> element : peekElements(n, waitMillis, child -> !excludeSet.test(dir + \"/\" + child))) {\n        topN.add(new QueueEvent(dir + \"/\" + element.first(),\n            element.second(), null));\n      }\n      printQueueEventsListElementIds(topN);\n      return topN;\n    } finally {\n      time.stop();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["1e4014209b24e71d602e579a316f994355596012"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"1e4014209b24e71d602e579a316f994355596012":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e4014209b24e71d602e579a316f994355596012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"]},"commit2Childs":{"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["727bb765ff2542275f6d31f67be18d7104bae148","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"1e4014209b24e71d602e579a316f994355596012":["0f3e7752e8a5e963c6939aaa99c36134147a5ece","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e4014209b24e71d602e579a316f994355596012","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}