{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testCopyCompressedData().mjava","commits":[{"id":"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","date":1349450075,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testCopyCompressedData().mjava","pathOld":"/dev/null","sourceNew":"  public void testCopyCompressedData() throws IOException {\n    final byte[] uncompressed = randomArray();\n    final byte[] compressed = compress(uncompressed);\n    GrowableByteArrayDataOutput out = new GrowableByteArrayDataOutput(uncompressed.length);\n    mode.newUncompressor().copyCompressedData(new ByteArrayDataInput(compressed), out);\n    assertArrayEquals(compressed, Arrays.copyOf(out.bytes, out.length));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc37197c294c6ecfdf2d133b3bb323be2e71a4e2","date":1351440252,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testCopyCompressedData().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testCopyCompressedData().mjava","sourceNew":"  public void testCopyCompressedData() throws IOException {\n    final byte[] uncompressed = randomArray();\n    final byte[] compressed = compress(uncompressed);\n    assertArrayEquals(compressed, copyCompressedData(compressed));\n  }\n\n","sourceOld":"  public void testCopyCompressedData() throws IOException {\n    final byte[] uncompressed = randomArray();\n    final byte[] compressed = compress(uncompressed);\n    GrowableByteArrayDataOutput out = new GrowableByteArrayDataOutput(uncompressed.length);\n    mode.newUncompressor().copyCompressedData(new ByteArrayDataInput(compressed), out);\n    assertArrayEquals(compressed, Arrays.copyOf(out.bytes, out.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testCopyCompressedData().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testCopyCompressedData().mjava","sourceNew":"  public void testCopyCompressedData() throws IOException {\n    final byte[] uncompressed = randomArray();\n    final byte[] compressed = compress(uncompressed);\n    assertArrayEquals(compressed, copyCompressedData(compressed));\n  }\n\n","sourceOld":"  public void testCopyCompressedData() throws IOException {\n    final byte[] uncompressed = randomArray();\n    final byte[] compressed = compress(uncompressed);\n    GrowableByteArrayDataOutput out = new GrowableByteArrayDataOutput(uncompressed.length);\n    mode.newUncompressor().copyCompressedData(new ByteArrayDataInput(compressed), out);\n    assertArrayEquals(compressed, Arrays.copyOf(out.bytes, out.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1","date":1351696336,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testCopyCompressedData().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testCopyCompressedData().mjava","sourceNew":"  public void testCopyCompressedData() throws IOException {\n    final byte[] decompressed = randomArray();\n    final byte[] compressed = compress(decompressed);\n    assertArrayEquals(compressed, copyCompressedData(compressed));\n  }\n\n","sourceOld":"  public void testCopyCompressedData() throws IOException {\n    final byte[] uncompressed = randomArray();\n    final byte[] compressed = compress(uncompressed);\n    assertArrayEquals(compressed, copyCompressedData(compressed));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ee663728a95682ffb5dee37517ac9e863cd0820","date":1352758633,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testCopyCompressedData().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testCopyCompressedData().mjava","sourceNew":"  public void testCopyCompressedData() throws IOException {\n    final byte[] decompressed = randomArray();\n    final byte[] compressed = compress(decompressed);\n    assertArrayEquals(compressed, copyCompressedData(compressed, decompressed.length));\n  }\n\n","sourceOld":"  public void testCopyCompressedData() throws IOException {\n    final byte[] decompressed = randomArray();\n    final byte[] compressed = compress(decompressed);\n    assertArrayEquals(compressed, copyCompressedData(compressed));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab","date":1354403647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testCopyCompressedData().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testCopyCompressedData().mjava","sourceNew":"  public void testCopyCompressedData() throws IOException {\n    final byte[] decompressed = randomArray();\n    final byte[] compressed = compress(decompressed);\n    assertArrayEquals(compressed, copyCompressedData(compressed, decompressed.length));\n  }\n\n","sourceOld":"  public void testCopyCompressedData() throws IOException {\n    final byte[] decompressed = randomArray();\n    final byte[] compressed = compress(decompressed);\n    assertArrayEquals(compressed, copyCompressedData(compressed, decompressed.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#testCopyCompressedData().mjava","sourceNew":null,"sourceOld":"  public void testCopyCompressedData() throws IOException {\n    final byte[] decompressed = randomArray();\n    final byte[] compressed = compress(decompressed);\n    assertArrayEquals(compressed, copyCompressedData(compressed));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1":["dc37197c294c6ecfdf2d133b3bb323be2e71a4e2"],"9ee663728a95682ffb5dee37517ac9e863cd0820":["5af6a67fb827380f7fe2fdf3baa34b10b783f2f1"],"dc37197c294c6ecfdf2d133b3bb323be2e71a4e2":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["5af6a67fb827380f7fe2fdf3baa34b10b783f2f1","1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"f2126b84bd093fa3d921582a109a0ee578c28126":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","dc37197c294c6ecfdf2d133b3bb323be2e71a4e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["9ee663728a95682ffb5dee37517ac9e863cd0820"]},"commit2Childs":{"5af6a67fb827380f7fe2fdf3baa34b10b783f2f1":["9ee663728a95682ffb5dee37517ac9e863cd0820","407687e67faf6e1f02a211ca078d8e3eed631027"],"dc37197c294c6ecfdf2d133b3bb323be2e71a4e2":["5af6a67fb827380f7fe2fdf3baa34b10b783f2f1","f2126b84bd093fa3d921582a109a0ee578c28126"],"9ee663728a95682ffb5dee37517ac9e863cd0820":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["dc37197c294c6ecfdf2d133b3bb323be2e71a4e2","f2126b84bd093fa3d921582a109a0ee578c28126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}