{"path":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testGetEntry().mjava","commits":[{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testGetEntry().mjava","pathOld":"contrib/gdata-server/src/core/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testGetEntry().mjava","sourceNew":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.getEntry(ServerBaseEntry)'\n     */\n    public void testGetEntry() throws StorageException {\n        storeServerBaseFeed();\n        Storage storage = this.controller.getStorage();\n        ServerBaseEntry exEntry = createServerBaseEntry();\n        exEntry.setId(null);\n        try{\n        storage.getEntry(exEntry);\n        fail(\"id is null\");\n        }catch (StorageException e) {\n\n        }\n        ServerBaseEntry e = createServerBaseEntry();\n        storage.storeEntry(e);\n        ServerBaseEntry e1 = createServerBaseEntry();\n        storage.storeEntry(e1);\n        \n        storage = this.controller.getStorage();\n        BaseEntry result = storage.getEntry(e);\n        assertNotNull(result);\n        assertEquals(e.getId(), result.getId());\n        try {\n            e1.setId(\"hello\");\n            result = storage.getEntry(e1);\n            fail(\"no such entry\");\n        } catch (StorageException ex) {\n            ex.printStackTrace();\n        }\n\n    }\n\n","sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.getEntry(ServerBaseEntry)'\n     */\n    public void testGetEntry() throws StorageException {\n        storeServerBaseFeed();\n        Storage storage = this.controller.getStorage();\n        ServerBaseEntry exEntry = createServerBaseEntry();\n        exEntry.setId(null);\n        try{\n        storage.getEntry(exEntry);\n        fail(\"id is null\");\n        }catch (StorageException e) {\n\n        }\n        ServerBaseEntry e = createServerBaseEntry();\n        storage.storeEntry(e);\n        ServerBaseEntry e1 = createServerBaseEntry();\n        storage.storeEntry(e1);\n        \n        storage = this.controller.getStorage();\n        BaseEntry result = storage.getEntry(e);\n        assertNotNull(result);\n        assertEquals(e.getId(), result.getId());\n        try {\n            e1.setId(\"hello\");\n            result = storage.getEntry(e1);\n            fail(\"no such entry\");\n        } catch (StorageException ex) {\n            ex.printStackTrace();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe","date":1195519587,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/gdata-server/src/core/src/test/org/apache/lucene/gdata/storage/db4o/TestDb4oStorage#testGetEntry().mjava","sourceNew":null,"sourceOld":"    /*\n     * Test method for\n     * 'org.apache.lucene.gdata.storage.db4o.DB4oStorage.getEntry(ServerBaseEntry)'\n     */\n    public void testGetEntry() throws StorageException {\n        storeServerBaseFeed();\n        Storage storage = this.controller.getStorage();\n        ServerBaseEntry exEntry = createServerBaseEntry();\n        exEntry.setId(null);\n        try{\n        storage.getEntry(exEntry);\n        fail(\"id is null\");\n        }catch (StorageException e) {\n\n        }\n        ServerBaseEntry e = createServerBaseEntry();\n        storage.storeEntry(e);\n        ServerBaseEntry e1 = createServerBaseEntry();\n        storage.storeEntry(e1);\n        \n        storage = this.controller.getStorage();\n        BaseEntry result = storage.getEntry(e);\n        assertNotNull(result);\n        assertEquals(e.getId(), result.getId());\n        try {\n            e1.setId(\"hello\");\n            result = storage.getEntry(e1);\n            fail(\"no such entry\");\n        } catch (StorageException ex) {\n            ex.printStackTrace();\n        }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["353a38bbb8d8067d74d6039986c7ce44c2f6cdbe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"353a38bbb8d8067d74d6039986c7ce44c2f6cdbe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}