{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon#intersects(GeoShape).mjava","commits":[{"id":"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705","date":1501767131,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon#intersects(GeoShape).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean intersects(GeoShape geoShape) {\n    // Create the intersector\n    final EdgeIterator intersector = new IntersectorShapeIterator(geoShape);\n    // First, compute the bounds for the the plane\n    final XYZBounds xyzBounds = new XYZBounds();\n    geoShape.getBounds(xyzBounds);\n\n    // Figure out which tree likely works best\n    final double xDelta = xyzBounds.getMaximumX() - xyzBounds.getMinimumX();\n    final double yDelta = xyzBounds.getMaximumY() - xyzBounds.getMinimumY();\n    final double zDelta = xyzBounds.getMaximumZ() - xyzBounds.getMinimumZ();\n    // Select the smallest range\n    if (xDelta <= yDelta && xDelta <= zDelta) {\n      // Drill down in x\n      return !xTree.traverse(intersector, xyzBounds.getMinimumX(), xyzBounds.getMaximumX());\n    } else if (yDelta <= xDelta && yDelta <= zDelta) {\n      // Drill down in y\n      return !yTree.traverse(intersector, xyzBounds.getMinimumY(), xyzBounds.getMaximumY());\n    } else if (zDelta <= xDelta && zDelta <= yDelta) {\n      // Drill down in z\n      return !zTree.traverse(intersector, xyzBounds.getMinimumZ(), xyzBounds.getMaximumZ());\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon#intersects(GeoShape).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean intersects(GeoShape geoShape) {\n    // Create the intersector\n    final EdgeIterator intersector = new IntersectorShapeIterator(geoShape);\n    // First, compute the bounds for the the plane\n    final XYZBounds xyzBounds = new XYZBounds();\n    geoShape.getBounds(xyzBounds);\n\n    // Figure out which tree likely works best\n    final double xDelta = xyzBounds.getMaximumX() - xyzBounds.getMinimumX();\n    final double yDelta = xyzBounds.getMaximumY() - xyzBounds.getMinimumY();\n    final double zDelta = xyzBounds.getMaximumZ() - xyzBounds.getMinimumZ();\n    // Select the smallest range\n    if (xDelta <= yDelta && xDelta <= zDelta) {\n      // Drill down in x\n      return !xTree.traverse(intersector, xyzBounds.getMinimumX(), xyzBounds.getMaximumX());\n    } else if (yDelta <= xDelta && yDelta <= zDelta) {\n      // Drill down in y\n      return !yTree.traverse(intersector, xyzBounds.getMinimumY(), xyzBounds.getMaximumY());\n    } else if (zDelta <= xDelta && zDelta <= yDelta) {\n      // Drill down in z\n      return !zTree.traverse(intersector, xyzBounds.getMinimumZ(), xyzBounds.getMaximumZ());\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3c9c955664ed32e2bf97b3da26467354673ea18","date":1522944427,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon#intersects(GeoShape).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon#intersects(GeoShape).mjava","sourceNew":"  @Override\n  public boolean intersects(GeoShape geoShape) {\n    // Create the intersector\n    final EdgeIterator intersector = new IntersectorShapeIterator(geoShape);\n    // First, compute the bounds for the the plane\n    final XYZBounds xyzBounds = new XYZBounds();\n    geoShape.getBounds(xyzBounds);\n\n    // Figure out which tree likely works best\n    final double xDelta = xyzBounds.getMaximumX() - xyzBounds.getMinimumX();\n    final double yDelta = xyzBounds.getMaximumY() - xyzBounds.getMinimumY();\n    final double zDelta = xyzBounds.getMaximumZ() - xyzBounds.getMinimumZ();\n    // Select the smallest range\n    // Select the smallest range\n    if (xDelta <= yDelta && xDelta <= zDelta) {\n      // Drill down in x\n      return !xTree.traverse(intersector, xyzBounds.getMinimumX(), xyzBounds.getMaximumX());\n    } else if (yDelta <= xDelta && yDelta <= zDelta) {\n      // Drill down in y\n      return !yTree.traverse(intersector, xyzBounds.getMinimumY(), xyzBounds.getMaximumY());\n    } else if (zDelta <= xDelta && zDelta <= yDelta) {\n      // Drill down in z\n      return !zTree.traverse(intersector, xyzBounds.getMinimumZ(), xyzBounds.getMaximumZ());\n    }\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean intersects(GeoShape geoShape) {\n    // Create the intersector\n    final EdgeIterator intersector = new IntersectorShapeIterator(geoShape);\n    // First, compute the bounds for the the plane\n    final XYZBounds xyzBounds = new XYZBounds();\n    geoShape.getBounds(xyzBounds);\n\n    // Figure out which tree likely works best\n    final double xDelta = xyzBounds.getMaximumX() - xyzBounds.getMinimumX();\n    final double yDelta = xyzBounds.getMaximumY() - xyzBounds.getMinimumY();\n    final double zDelta = xyzBounds.getMaximumZ() - xyzBounds.getMinimumZ();\n    // Select the smallest range\n    if (xDelta <= yDelta && xDelta <= zDelta) {\n      // Drill down in x\n      return !xTree.traverse(intersector, xyzBounds.getMinimumX(), xyzBounds.getMaximumX());\n    } else if (yDelta <= xDelta && yDelta <= zDelta) {\n      // Drill down in y\n      return !yTree.traverse(intersector, xyzBounds.getMinimumY(), xyzBounds.getMaximumY());\n    } else if (zDelta <= xDelta && zDelta <= yDelta) {\n      // Drill down in z\n      return !zTree.traverse(intersector, xyzBounds.getMinimumZ(), xyzBounds.getMaximumZ());\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"d3c9c955664ed32e2bf97b3da26467354673ea18":["0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d3c9c955664ed32e2bf97b3da26467354673ea18"]},"commit2Childs":{"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"d3c9c955664ed32e2bf97b3da26467354673ea18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","0ca94ad4d6120f10fa13ce40a60a7fd1ede51705"],"0ca94ad4d6120f10fa13ce40a60a7fd1ede51705":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","d3c9c955664ed32e2bf97b3da26467354673ea18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}