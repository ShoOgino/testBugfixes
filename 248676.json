{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertDocsAndPositionsEnum(PostingsEnum,PostingsEnum).mjava","commits":[{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertDocsAndPositionsEnum(PostingsEnum,PostingsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertDocsAndPositionsEnum(PostingsEnum,PostingsEnum).mjava","sourceNew":"  /**\n   * checks docs + freqs + positions + payloads, sequentially\n   */\n  public void assertDocsAndPositionsEnum(PostingsEnum leftDocs, PostingsEnum rightDocs) throws Exception {\n    assertNotNull(leftDocs);\n    assertNotNull(rightDocs);\n    assertEquals(-1, leftDocs.docID());\n    assertEquals(-1, rightDocs.docID());\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(docid, rightDocs.nextDoc());\n      int freq = leftDocs.freq();\n      assertEquals(freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(leftDocs.nextPosition(), rightDocs.nextPosition());\n        // we don't assert offsets/payloads, they are allowed to be different\n      }\n    }\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","sourceOld":"  /**\n   * checks docs + freqs + positions + payloads, sequentially\n   */\n  public void assertDocsAndPositionsEnum(PostingsEnum leftDocs, PostingsEnum rightDocs) throws Exception {\n    assertNotNull(leftDocs);\n    assertNotNull(rightDocs);\n    assertEquals(-1, leftDocs.docID());\n    assertEquals(-1, rightDocs.docID());\n    int docid;\n    while ((docid = leftDocs.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n      assertEquals(docid, rightDocs.nextDoc());\n      int freq = leftDocs.freq();\n      assertEquals(freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(leftDocs.nextPosition(), rightDocs.nextPosition());\n        // we don't assert offsets/payloads, they are allowed to be different\n      }\n    }\n    assertEquals(DocIdSetIterator.NO_MORE_DOCS, rightDocs.nextDoc());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}