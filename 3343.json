{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrServer#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionList(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName());\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionList(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName());\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c2f5223cebd58879933670af3e599b10d7e8f1a","date":1422450178,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName());\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionList(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName());\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":["9279b175e5e66258442d2123a50f052219a9cc1b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a20a867de92263c94258f9778db64a5efc7956d","date":1424955868,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection,null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n      Object o = resp.get(STATE_VERSION, resp.size()-1);\n      if(o != null && o instanceof Map) {\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(), (Integer)e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName(),null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName());\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":["68d375435a7d781d574bf36337c6dd4760ea6c0f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"52c915962577cbfc75e6ffc1cac50a1988829b9d","date":1424980397,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection,null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp.get(STATE_VERSION, resp.size()-1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(), (Integer)e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName(),null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection,null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n      Object o = resp.get(STATE_VERSION, resp.size()-1);\n      if(o != null && o instanceof Map) {\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(), (Integer)e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName(),null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection,null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp.get(STATE_VERSION, resp.size()-1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(), (Integer)e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName(),null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection,null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp.get(STATE_VERSION, resp.size()-1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(), (Integer)e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName(),null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection,null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp.get(STATE_VERSION, resp.size()-1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(), (Integer)e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName(),null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request);\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName());\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"015571db92de1e6f75d89f34faeb520f99f07b97","date":1431466334,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection,null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp.get(STATE_VERSION, resp.size()-1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(), (Integer)e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName(),null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection,null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp.get(STATE_VERSION, resp.size()-1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(), (Integer)e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName(),null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":["9279b175e5e66258442d2123a50f052219a9cc1b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e78c35bca3e32dfc7a695136fa2b5de1ae135c22","date":1441118240,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection,null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp.get(STATE_VERSION, resp.size()-1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(), (Integer)e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || isAdmin) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName(),null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    if (collection != null && !request.getPath().startsWith(\"/admin\")) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection,null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp.get(STATE_VERSION, resp.size()-1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(), (Integer)e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || request.getPath().startsWith(\"/admin\")) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName(),null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":["9279b175e5e66258442d2123a50f052219a9cc1b"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"68d375435a7d781d574bf36337c6dd4760ea6c0f","date":1469518708,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection,null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(), (Integer)e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || isAdmin) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName(),null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection,null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp.get(STATE_VERSION, resp.size()-1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(), (Integer)e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || isAdmin) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName(),null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":["0a20a867de92263c94258f9778db64a5efc7956d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection,null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(), (Integer)e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || isAdmin) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName(),null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection,null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp.get(STATE_VERSION, resp.size()-1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(), (Integer)e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || isAdmin) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName(),null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3eaeb36333664e8cb92108ef03f68a7b90beb759","date":1480015298,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || isAdmin) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retired\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, collection);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection,null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(), (Integer)e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || isAdmin) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName(),null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":["800636a2ee361ff8c5aaab84db67cafad7fdcac1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || isAdmin) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retired\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, collection);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(getZkStateReader().getClusterState(), collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(getZkStateReader().getClusterState(), requestedCollection,null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection(getZkStateReader().getClusterState(),(String)e.getKey(), (Integer)e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || isAdmin) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(zkStateReader.getClusterState(), ext.getName(),null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e83c877790b7f4ea5dfb59843a8b7a1a98917266","date":1487986392,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || isAdmin) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retired\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, collection);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || isAdmin) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retired\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, collection);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"767d389403b701039ee599ec2ac8a838f45d8cb7","date":1494468363,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = getCollectionNames(collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (collection == null || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retired\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, collection);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || isAdmin) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retired\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, collection);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b31ebc7a867ddea79d438a8fca876a94e644d11a","date":1494496172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = getCollectionNames(collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (collection == null || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retired\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, collection);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || isAdmin) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retired\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, collection);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = getCollectionNames(collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (collection == null || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retired\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, collection);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin) { // don't do _stateVer_ checking for admin requests\n      Set<String> requestedCollectionNames = getCollectionNames(collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests or if the request doesn't have a collection specified\n      if (collection == null || isAdmin) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retired\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, collection);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3fc88a06a44fc3112186e9be4562b36713955d","date":1497587751,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n    SolrRequest originalRequest = request;\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = getCollectionNames(collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (collection == null || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retired\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, collection);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = getCollectionNames(collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (collection == null || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retired\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, collection);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n    SolrRequest originalRequest = request;\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = getCollectionNames(collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (collection == null || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retired\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, collection);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = getCollectionNames(collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (collection == null || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retired\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, collection);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n    SolrRequest originalRequest = request;\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = getCollectionNames(collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (collection == null || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retired\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, collection);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = getCollectionNames(collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (collection == null || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retired\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, collection);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#requestWithRetryOnStaleState(SolrRequest,int,String).mjava","sourceNew":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, List<String> inputCollections)\n      throws SolrServerException, IOException {\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (!inputCollections.isEmpty() && !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = resolveAliases(inputCollections);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, inputCollections);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (inputCollections.isEmpty() || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\" + errorCode + \") {}, retry? \" + retryCount,\n          inputCollections, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retried\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, inputCollections);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+inputCollections+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, inputCollections);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","sourceOld":"  /**\n   * As this class doesn't watch external collections on the client side,\n   * there's a chance that the request will fail due to cached stale state,\n   * which means the state must be refreshed from ZK and retried.\n   */\n  protected NamedList<Object> requestWithRetryOnStaleState(SolrRequest request, int retryCount, String collection)\n      throws SolrServerException, IOException {\n    SolrRequest originalRequest = request;\n\n    connect(); // important to call this before you start working with the ZkStateReader\n\n    // build up a _stateVer_ param to pass to the server containing all of the\n    // external collection state versions involved in this request, which allows\n    // the server to notify us that our cached state for one or more of the external\n    // collections is stale and needs to be refreshed ... this code has no impact on internal collections\n    String stateVerParam = null;\n    List<DocCollection> requestedCollections = null;\n    boolean isCollectionRequestOfV2 = false;\n    if (request instanceof V2RequestSupport) {\n      request = ((V2RequestSupport) request).getV2Request();\n    }\n    if (request instanceof V2Request) {\n      isCollectionRequestOfV2 = ((V2Request) request).isPerCollectionRequest();\n    }\n    boolean isAdmin = ADMIN_PATHS.contains(request.getPath());\n    if (collection != null &&  !isAdmin && !isCollectionRequestOfV2) { // don't do _stateVer_ checking for admin, v2 api requests\n      Set<String> requestedCollectionNames = getCollectionNames(collection);\n\n      StringBuilder stateVerParamBuilder = null;\n      for (String requestedCollection : requestedCollectionNames) {\n        // track the version of state we're using on the client side using the _stateVer_ param\n        DocCollection coll = getDocCollection(requestedCollection, null);\n        if (coll == null) {\n          throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection not found: \" + requestedCollection);\n        }\n        int collVer = coll.getZNodeVersion();\n        if (coll.getStateFormat()>1) {\n          if(requestedCollections == null) requestedCollections = new ArrayList<>(requestedCollectionNames.size());\n          requestedCollections.add(coll);\n\n          if (stateVerParamBuilder == null) {\n            stateVerParamBuilder = new StringBuilder();\n          } else {\n            stateVerParamBuilder.append(\"|\"); // hopefully pipe is not an allowed char in a collection name\n          }\n\n          stateVerParamBuilder.append(coll.getName()).append(\":\").append(collVer);\n        }\n      }\n\n      if (stateVerParamBuilder != null) {\n        stateVerParam = stateVerParamBuilder.toString();\n      }\n    }\n\n    if (request.getParams() instanceof ModifiableSolrParams) {\n      ModifiableSolrParams params = (ModifiableSolrParams) request.getParams();\n      if (stateVerParam != null) {\n        params.set(STATE_VERSION, stateVerParam);\n      } else {\n        params.remove(STATE_VERSION);\n      }\n    } // else: ??? how to set this ???\n\n    NamedList<Object> resp = null;\n    try {\n      resp = sendRequest(request, collection);\n      //to avoid an O(n) operation we always add STATE_VERSION to the last and try to read it from there\n      Object o = resp == null || resp.size() == 0 ? null : resp.get(STATE_VERSION, resp.size() - 1);\n      if(o != null && o instanceof Map) {\n        //remove this because no one else needs this and tests would fail if they are comparing responses\n        resp.remove(resp.size()-1);\n        Map invalidStates = (Map) o;\n        for (Object invalidEntries : invalidStates.entrySet()) {\n          Map.Entry e = (Map.Entry) invalidEntries;\n          getDocCollection((String) e.getKey(), (Integer) e.getValue());\n        }\n\n      }\n    } catch (Exception exc) {\n\n      Throwable rootCause = SolrException.getRootCause(exc);\n      // don't do retry support for admin requests\n      // or if the request doesn't have a collection specified\n      // or request is v2 api and its method is not GET\n      if (collection == null || isAdmin || (request instanceof V2Request && request.getMethod() != SolrRequest.METHOD.GET)) {\n        if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        }else if (exc instanceof RuntimeException) {\n          throw (RuntimeException) exc;\n        }\n        else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n\n      int errorCode = (rootCause instanceof SolrException) ?\n          ((SolrException)rootCause).code() : SolrException.ErrorCode.UNKNOWN.code;\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n      boolean wasCommError =\n          (rootCause instanceof ConnectException ||\n              rootCause instanceof ConnectTimeoutException ||\n              rootCause instanceof NoHttpResponseException ||\n              rootCause instanceof SocketException);\n\n      if (wasCommError) {\n        // it was a communication error. it is likely that\n        // the node to which the request to be sent is down . So , expire the state\n        // so that the next attempt would fetch the fresh state\n        // just re-read state for all of them, if it has not been retired\n        // in retryExpiryTime time\n        for (DocCollection ext : requestedCollections) {\n          ExpiringCachedDocCollection cacheEntry = collectionStateCache.get(ext.getName());\n          if (cacheEntry == null) continue;\n          cacheEntry.maybeStale = true;\n        }\n        if (retryCount < MAX_STALE_RETRIES) {//if it is a communication error , we must try again\n          //may be, we have a stale version of the collection state\n          // and we could not get any information from the server\n          //it is probably not worth trying again and again because\n          // the state would not have been updated\n          return requestWithRetryOnStaleState(request, retryCount + 1, collection);\n        }\n      }\n\n      boolean stateWasStale = false;\n      if (retryCount < MAX_STALE_RETRIES  &&\n          requestedCollections != null    &&\n          !requestedCollections.isEmpty() &&\n          SolrException.ErrorCode.getErrorCode(errorCode) == SolrException.ErrorCode.INVALID_STATE)\n      {\n        // cached state for one or more external collections was stale\n        // re-issue request using updated state\n        stateWasStale = true;\n\n        // just re-read state for all of them, which is a little heavy handed but hopefully a rare occurrence\n        for (DocCollection ext : requestedCollections) {\n          collectionStateCache.remove(ext.getName());\n        }\n      }\n\n      // if we experienced a communication error, it's worth checking the state\n      // with ZK just to make sure the node we're trying to hit is still part of the collection\n      if (retryCount < MAX_STALE_RETRIES &&\n          !stateWasStale &&\n          requestedCollections != null &&\n          !requestedCollections.isEmpty() &&\n          wasCommError) {\n        for (DocCollection ext : requestedCollections) {\n          DocCollection latestStateFromZk = getDocCollection(ext.getName(), null);\n          if (latestStateFromZk.getZNodeVersion() != ext.getZNodeVersion()) {\n            // looks like we couldn't reach the server because the state was stale == retry\n            stateWasStale = true;\n            // we just pulled state from ZK, so update the cache so that the retry uses it\n            collectionStateCache.put(ext.getName(), new ExpiringCachedDocCollection(latestStateFromZk));\n          }\n        }\n      }\n\n      if (requestedCollections != null) {\n        requestedCollections.clear(); // done with this\n      }\n\n      // if the state was stale, then we retry the request once with new state pulled from Zk\n      if (stateWasStale) {\n        log.warn(\"Re-trying request to  collection(s) \"+collection+\" after stale state error from server.\");\n        resp = requestWithRetryOnStaleState(request, retryCount+1, collection);\n      } else {\n        if(exc instanceof SolrException) {\n          throw exc;\n        } if (exc instanceof SolrServerException) {\n          throw (SolrServerException)exc;\n        } else if (exc instanceof IOException) {\n          throw (IOException)exc;\n        } else {\n          throw new SolrServerException(rootCause);\n        }\n      }\n    }\n\n    return resp;\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["28288370235ed02234a64753cdbf0c6ec096304a"],"0a20a867de92263c94258f9778db64a5efc7956d":["4c2f5223cebd58879933670af3e599b10d7e8f1a"],"4d3fc88a06a44fc3112186e9be4562b36713955d":["767d389403b701039ee599ec2ac8a838f45d8cb7"],"b31ebc7a867ddea79d438a8fca876a94e644d11a":["e83c877790b7f4ea5dfb59843a8b7a1a98917266","767d389403b701039ee599ec2ac8a838f45d8cb7"],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["68d375435a7d781d574bf36337c6dd4760ea6c0f"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"767d389403b701039ee599ec2ac8a838f45d8cb7":["e83c877790b7f4ea5dfb59843a8b7a1a98917266"],"e83c877790b7f4ea5dfb59843a8b7a1a98917266":["3eaeb36333664e8cb92108ef03f68a7b90beb759"],"015571db92de1e6f75d89f34faeb520f99f07b97":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"28288370235ed02234a64753cdbf0c6ec096304a":["767d389403b701039ee599ec2ac8a838f45d8cb7","4d3fc88a06a44fc3112186e9be4562b36713955d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22","68d375435a7d781d574bf36337c6dd4760ea6c0f"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["52c915962577cbfc75e6ffc1cac50a1988829b9d"],"4c2f5223cebd58879933670af3e599b10d7e8f1a":["bafca15d8e408346a67f4282ad1143b88023893b"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["e83c877790b7f4ea5dfb59843a8b7a1a98917266","767d389403b701039ee599ec2ac8a838f45d8cb7"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["4c2f5223cebd58879933670af3e599b10d7e8f1a","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3eaeb36333664e8cb92108ef03f68a7b90beb759"],"68d375435a7d781d574bf36337c6dd4760ea6c0f":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22"],"e78c35bca3e32dfc7a695136fa2b5de1ae135c22":["015571db92de1e6f75d89f34faeb520f99f07b97"],"52c915962577cbfc75e6ffc1cac50a1988829b9d":["0a20a867de92263c94258f9778db64a5efc7956d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","4d3fc88a06a44fc3112186e9be4562b36713955d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"]},"commit2Childs":{"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0a20a867de92263c94258f9778db64a5efc7956d":["52c915962577cbfc75e6ffc1cac50a1988829b9d"],"4d3fc88a06a44fc3112186e9be4562b36713955d":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"b31ebc7a867ddea79d438a8fca876a94e644d11a":[],"3eaeb36333664e8cb92108ef03f68a7b90beb759":["e83c877790b7f4ea5dfb59843a8b7a1a98917266","727bb765ff2542275f6d31f67be18d7104bae148"],"bafca15d8e408346a67f4282ad1143b88023893b":["4c2f5223cebd58879933670af3e599b10d7e8f1a"],"767d389403b701039ee599ec2ac8a838f45d8cb7":["4d3fc88a06a44fc3112186e9be4562b36713955d","b31ebc7a867ddea79d438a8fca876a94e644d11a","28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"28288370235ed02234a64753cdbf0c6ec096304a":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"e83c877790b7f4ea5dfb59843a8b7a1a98917266":["b31ebc7a867ddea79d438a8fca876a94e644d11a","767d389403b701039ee599ec2ac8a838f45d8cb7","e9017cf144952056066919f1ebc7897ff9bd71b1"],"015571db92de1e6f75d89f34faeb520f99f07b97":["e78c35bca3e32dfc7a695136fa2b5de1ae135c22"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["015571db92de1e6f75d89f34faeb520f99f07b97","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"4c2f5223cebd58879933670af3e599b10d7e8f1a":["0a20a867de92263c94258f9778db64a5efc7956d","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"727bb765ff2542275f6d31f67be18d7104bae148":[],"68d375435a7d781d574bf36337c6dd4760ea6c0f":["3eaeb36333664e8cb92108ef03f68a7b90beb759","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"e78c35bca3e32dfc7a695136fa2b5de1ae135c22":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","68d375435a7d781d574bf36337c6dd4760ea6c0f"],"52c915962577cbfc75e6ffc1cac50a1988829b9d":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b31ebc7a867ddea79d438a8fca876a94e644d11a","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","727bb765ff2542275f6d31f67be18d7104bae148","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}