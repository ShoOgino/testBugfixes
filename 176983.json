{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","sourceNew":"  private Term findTermThatWouldBeAtIndex(SegmentTermEnum termEnum, int index) throws IOException {\n    int termPosition = index * termIndexInterval * indexDivisor;\n    for (int i = 0; i < termPosition; i++) {\n      // TODO: this test just uses random terms, so this is always possible\n      assumeTrue(\"ran out of terms.\", termEnum.next());\n    }\n    return termEnum.term();\n  }\n\n","sourceOld":"  private Term findTermThatWouldBeAtIndex(SegmentTermEnum termEnum, int index) throws IOException {\n    int termPosition = index * termIndexInterval * indexDivisor;\n    for (int i = 0; i < termPosition; i++) {\n      // TODO: this test just uses random terms, so this is always possible\n      assumeTrue(\"ran out of terms.\", termEnum.next());\n    }\n    return termEnum.term();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6ef1ac57615594df99b4d227449fa09de6c255f","date":1331046752,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","sourceNew":"  private Term findTermThatWouldBeAtIndex(SegmentTermEnum termEnum, int index) throws IOException {\n    int termPosition = index * termIndexInterval * indexDivisor;\n    for (int i = 0; i < termPosition; i++) {\n      // TODO: this test just uses random terms, so this is always possible\n      assumeTrue(\"ran out of terms\", termEnum.next());\n    }\n    final Term term = termEnum.term();\n    // An indexed term is only written when the term after\n    // it exists, so, if the number of terms is 0 mod\n    // termIndexInterval, the last index term will not be\n    // written; so we require a term after this term\n    // as well:\n    assumeTrue(\"ran out of terms\", termEnum.next());\n    return term;\n  }\n\n","sourceOld":"  private Term findTermThatWouldBeAtIndex(SegmentTermEnum termEnum, int index) throws IOException {\n    int termPosition = index * termIndexInterval * indexDivisor;\n    for (int i = 0; i < termPosition; i++) {\n      // TODO: this test just uses random terms, so this is always possible\n      assumeTrue(\"ran out of terms.\", termEnum.next());\n    }\n    return termEnum.term();\n  }\n\n","bugFix":["8be580b58bcc650d428f3f22de81cadcf51d650a","39509e0276e70b38a5e76aa9d2c468955a1c7855"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","sourceNew":"  private Term findTermThatWouldBeAtIndex(SegmentTermEnum termEnum, int index) throws IOException {\n    int termPosition = index * termIndexInterval * indexDivisor;\n    for (int i = 0; i < termPosition; i++) {\n      // TODO: this test just uses random terms, so this is always possible\n      assumeTrue(\"ran out of terms\", termEnum.next());\n    }\n    final Term term = termEnum.term();\n    // An indexed term is only written when the term after\n    // it exists, so, if the number of terms is 0 mod\n    // termIndexInterval, the last index term will not be\n    // written; so we require a term after this term\n    // as well:\n    assumeTrue(\"ran out of terms\", termEnum.next());\n    return term;\n  }\n\n","sourceOld":"  private Term findTermThatWouldBeAtIndex(SegmentTermEnum termEnum, int index) throws IOException {\n    int termPosition = index * termIndexInterval * indexDivisor;\n    for (int i = 0; i < termPosition; i++) {\n      // TODO: this test just uses random terms, so this is always possible\n      assumeTrue(\"ran out of terms.\", termEnum.next());\n    }\n    return termEnum.term();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene3x/TestTermInfosReaderIndex#findTermThatWouldBeAtIndex(SegmentTermEnum,int).mjava","sourceNew":null,"sourceOld":"  private Term findTermThatWouldBeAtIndex(SegmentTermEnum termEnum, int index) throws IOException {\n    int termPosition = index * termIndexInterval * indexDivisor;\n    for (int i = 0; i < termPosition; i++) {\n      // TODO: this test just uses random terms, so this is always possible\n      assumeTrue(\"ran out of terms\", termEnum.next());\n    }\n    final Term term = termEnum.term();\n    // An indexed term is only written when the term after\n    // it exists, so, if the number of terms is 0 mod\n    // termIndexInterval, the last index term will not be\n    // written; so we require a term after this term\n    // as well:\n    assumeTrue(\"ran out of terms\", termEnum.next());\n    return term;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["b6ef1ac57615594df99b4d227449fa09de6c255f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b6ef1ac57615594df99b4d227449fa09de6c255f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6ef1ac57615594df99b4d227449fa09de6c255f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b6ef1ac57615594df99b4d227449fa09de6c255f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b6ef1ac57615594df99b4d227449fa09de6c255f":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}