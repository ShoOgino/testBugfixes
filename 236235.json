{"path":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestMinMaxNormalizer#implTestMinMax(Map[String,Object],float,float).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestMinMaxNormalizer#implTestMinMax(Map[String,Object],float,float).mjava","pathOld":"/dev/null","sourceNew":"  private Normalizer implTestMinMax(Map<String,Object> params,\n      float expectedMin, float expectedMax) {\n    final Normalizer n = Normalizer.getInstance(\n        solrResourceLoader,\n        MinMaxNormalizer.class.getCanonicalName(),\n        params);\n    assertTrue(n instanceof MinMaxNormalizer);\n    final MinMaxNormalizer mmn = (MinMaxNormalizer)n;\n    assertEquals(mmn.getMin(), expectedMin, 0.0);\n    assertEquals(mmn.getMax(), expectedMax, 0.0);\n    return n;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bf344c7efad3160a74c52ef1fd53f535978fc5b7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestMinMaxNormalizer#implTestMinMax(Map[String,Object],float,float).mjava","pathOld":"/dev/null","sourceNew":"  private Normalizer implTestMinMax(Map<String,Object> params,\n      float expectedMin, float expectedMax) {\n    final Normalizer n = Normalizer.getInstance(\n        solrResourceLoader,\n        MinMaxNormalizer.class.getCanonicalName(),\n        params);\n    assertTrue(n instanceof MinMaxNormalizer);\n    final MinMaxNormalizer mmn = (MinMaxNormalizer)n;\n    assertEquals(mmn.getMin(), expectedMin, 0.0);\n    assertEquals(mmn.getMax(), expectedMax, 0.0);\n    return n;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d96925d05b738bc6535eea66b6cc65eb8bfba69","date":1491389413,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestMinMaxNormalizer#implTestMinMax(Map[String,Object],float,float).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestMinMaxNormalizer#implTestMinMax(Map[String,Object],float,float).mjava","sourceNew":"  private Normalizer implTestMinMax(Map<String,Object> params,\n      float expectedMin, float expectedMax) {\n    final Normalizer n = Normalizer.getInstance(\n        solrResourceLoader,\n        MinMaxNormalizer.class.getCanonicalName(),\n        params);\n    assertTrue(n instanceof MinMaxNormalizer);\n    final MinMaxNormalizer mmn = (MinMaxNormalizer)n;\n    assertEquals(mmn.getMin(), expectedMin, 0.0);\n    assertEquals(mmn.getMax(), expectedMax, 0.0);\n    assertEquals(\"{min=\\\"\"+expectedMin+\"\\\", max=\\\"\"+expectedMax+\"\\\"}\", mmn.paramsToMap().toString());\n    return n;\n  }\n\n","sourceOld":"  private Normalizer implTestMinMax(Map<String,Object> params,\n      float expectedMin, float expectedMax) {\n    final Normalizer n = Normalizer.getInstance(\n        solrResourceLoader,\n        MinMaxNormalizer.class.getCanonicalName(),\n        params);\n    assertTrue(n instanceof MinMaxNormalizer);\n    final MinMaxNormalizer mmn = (MinMaxNormalizer)n;\n    assertEquals(mmn.getMin(), expectedMin, 0.0);\n    assertEquals(mmn.getMax(), expectedMax, 0.0);\n    return n;\n  }\n\n","bugFix":null,"bugIntro":["71de52d9a1541112145bb5f013afacbbd5437f14"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestMinMaxNormalizer#implTestMinMax(Map[String,Object],float,float).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestMinMaxNormalizer#implTestMinMax(Map[String,Object],float,float).mjava","sourceNew":"  private Normalizer implTestMinMax(Map<String,Object> params,\n      float expectedMin, float expectedMax) {\n    final Normalizer n = Normalizer.getInstance(\n        solrResourceLoader,\n        MinMaxNormalizer.class.getCanonicalName(),\n        params);\n    assertTrue(n instanceof MinMaxNormalizer);\n    final MinMaxNormalizer mmn = (MinMaxNormalizer)n;\n    assertEquals(mmn.getMin(), expectedMin, 0.0);\n    assertEquals(mmn.getMax(), expectedMax, 0.0);\n    assertEquals(\"{min=\\\"\"+expectedMin+\"\\\", max=\\\"\"+expectedMax+\"\\\"}\", mmn.paramsToMap().toString());\n    return n;\n  }\n\n","sourceOld":"  private Normalizer implTestMinMax(Map<String,Object> params,\n      float expectedMin, float expectedMax) {\n    final Normalizer n = Normalizer.getInstance(\n        solrResourceLoader,\n        MinMaxNormalizer.class.getCanonicalName(),\n        params);\n    assertTrue(n instanceof MinMaxNormalizer);\n    final MinMaxNormalizer mmn = (MinMaxNormalizer)n;\n    assertEquals(mmn.getMin(), expectedMin, 0.0);\n    assertEquals(mmn.getMax(), expectedMax, 0.0);\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71de52d9a1541112145bb5f013afacbbd5437f14","date":1501772860,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestMinMaxNormalizer#implTestMinMax(Map[String,Object],float,float).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestMinMaxNormalizer#implTestMinMax(Map[String,Object],float,float).mjava","sourceNew":"  private Normalizer implTestMinMax(Map<String,Object> params,\n      float expectedMin, float expectedMax) {\n    final Normalizer n = Normalizer.getInstance(\n        solrResourceLoader,\n        MinMaxNormalizer.class.getCanonicalName(),\n        params);\n    assertTrue(n instanceof MinMaxNormalizer);\n    final MinMaxNormalizer mmn = (MinMaxNormalizer)n;\n    assertEquals(mmn.getMin(), expectedMin, 0.0);\n    assertEquals(mmn.getMax(), expectedMax, 0.0);\n    assertEquals(\"{min=\"+expectedMin+\", max=\"+expectedMax+\"}\", mmn.paramsToMap().toString());\n    return n;\n  }\n\n","sourceOld":"  private Normalizer implTestMinMax(Map<String,Object> params,\n      float expectedMin, float expectedMax) {\n    final Normalizer n = Normalizer.getInstance(\n        solrResourceLoader,\n        MinMaxNormalizer.class.getCanonicalName(),\n        params);\n    assertTrue(n instanceof MinMaxNormalizer);\n    final MinMaxNormalizer mmn = (MinMaxNormalizer)n;\n    assertEquals(mmn.getMin(), expectedMin, 0.0);\n    assertEquals(mmn.getMax(), expectedMax, 0.0);\n    assertEquals(\"{min=\\\"\"+expectedMin+\"\\\", max=\\\"\"+expectedMax+\"\\\"}\", mmn.paramsToMap().toString());\n    return n;\n  }\n\n","bugFix":["1d96925d05b738bc6535eea66b6cc65eb8bfba69"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162","date":1501774011,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestMinMaxNormalizer#implTestMinMax(Map[String,Object],float,float).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestMinMaxNormalizer#implTestMinMax(Map[String,Object],float,float).mjava","sourceNew":"  private Normalizer implTestMinMax(Map<String,Object> params,\n      float expectedMin, float expectedMax) {\n    final Normalizer n = Normalizer.getInstance(\n        solrResourceLoader,\n        MinMaxNormalizer.class.getCanonicalName(),\n        params);\n    assertTrue(n instanceof MinMaxNormalizer);\n    final MinMaxNormalizer mmn = (MinMaxNormalizer)n;\n    assertEquals(mmn.getMin(), expectedMin, 0.0);\n    assertEquals(mmn.getMax(), expectedMax, 0.0);\n    assertEquals(\"{min=\"+expectedMin+\", max=\"+expectedMax+\"}\", mmn.paramsToMap().toString());\n    return n;\n  }\n\n","sourceOld":"  private Normalizer implTestMinMax(Map<String,Object> params,\n      float expectedMin, float expectedMax) {\n    final Normalizer n = Normalizer.getInstance(\n        solrResourceLoader,\n        MinMaxNormalizer.class.getCanonicalName(),\n        params);\n    assertTrue(n instanceof MinMaxNormalizer);\n    final MinMaxNormalizer mmn = (MinMaxNormalizer)n;\n    assertEquals(mmn.getMin(), expectedMin, 0.0);\n    assertEquals(mmn.getMax(), expectedMax, 0.0);\n    assertEquals(\"{min=\\\"\"+expectedMin+\"\\\", max=\\\"\"+expectedMax+\"\\\"}\", mmn.paramsToMap().toString());\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestMinMaxNormalizer#implTestMinMax(Map[String,Object],float,float).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestMinMaxNormalizer#implTestMinMax(Map[String,Object],float,float).mjava","sourceNew":"  private Normalizer implTestMinMax(Map<String,Object> params,\n      float expectedMin, float expectedMax) {\n    final Normalizer n = Normalizer.getInstance(\n        solrResourceLoader,\n        MinMaxNormalizer.class.getCanonicalName(),\n        params);\n    assertTrue(n instanceof MinMaxNormalizer);\n    final MinMaxNormalizer mmn = (MinMaxNormalizer)n;\n    assertEquals(mmn.getMin(), expectedMin, 0.0);\n    assertEquals(mmn.getMax(), expectedMax, 0.0);\n    assertEquals(\"{min=\"+expectedMin+\", max=\"+expectedMax+\"}\", mmn.paramsToMap().toString());\n    return n;\n  }\n\n","sourceOld":"  private Normalizer implTestMinMax(Map<String,Object> params,\n      float expectedMin, float expectedMax) {\n    final Normalizer n = Normalizer.getInstance(\n        solrResourceLoader,\n        MinMaxNormalizer.class.getCanonicalName(),\n        params);\n    assertTrue(n instanceof MinMaxNormalizer);\n    final MinMaxNormalizer mmn = (MinMaxNormalizer)n;\n    assertEquals(mmn.getMin(), expectedMin, 0.0);\n    assertEquals(mmn.getMax(), expectedMax, 0.0);\n    assertEquals(\"{min=\\\"\"+expectedMin+\"\\\", max=\\\"\"+expectedMax+\"\\\"}\", mmn.paramsToMap().toString());\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf344c7efad3160a74c52ef1fd53f535978fc5b7","date":1518199939,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestMinMaxNormalizer#implTestMinMax(Map[String,Object],float,float).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestMinMaxNormalizer#implTestMinMax(Map[String,Object],float,float).mjava","sourceNew":"  private Normalizer implTestMinMax(Map<String,Object> params,\n      float expectedMin, float expectedMax) {\n    final Normalizer n = Normalizer.getInstance(\n        solrResourceLoader,\n        MinMaxNormalizer.class.getName(),\n        params);\n    assertTrue(n instanceof MinMaxNormalizer);\n    final MinMaxNormalizer mmn = (MinMaxNormalizer)n;\n    assertEquals(mmn.getMin(), expectedMin, 0.0);\n    assertEquals(mmn.getMax(), expectedMax, 0.0);\n    assertEquals(\"{min=\"+expectedMin+\", max=\"+expectedMax+\"}\", mmn.paramsToMap().toString());\n    return n;\n  }\n\n","sourceOld":"  private Normalizer implTestMinMax(Map<String,Object> params,\n      float expectedMin, float expectedMax) {\n    final Normalizer n = Normalizer.getInstance(\n        solrResourceLoader,\n        MinMaxNormalizer.class.getCanonicalName(),\n        params);\n    assertTrue(n instanceof MinMaxNormalizer);\n    final MinMaxNormalizer mmn = (MinMaxNormalizer)n;\n    assertEquals(mmn.getMin(), expectedMin, 0.0);\n    assertEquals(mmn.getMax(), expectedMax, 0.0);\n    assertEquals(\"{min=\"+expectedMin+\", max=\"+expectedMax+\"}\", mmn.paramsToMap().toString());\n    return n;\n  }\n\n","bugFix":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f906c3206e7eb174774f938416460e39170d819","date":1518202619,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestMinMaxNormalizer#implTestMinMax(Map[String,Object],float,float).mjava","pathOld":"solr/contrib/ltr/src/test/org/apache/solr/ltr/norm/TestMinMaxNormalizer#implTestMinMax(Map[String,Object],float,float).mjava","sourceNew":"  private Normalizer implTestMinMax(Map<String,Object> params,\n      float expectedMin, float expectedMax) {\n    final Normalizer n = Normalizer.getInstance(\n        solrResourceLoader,\n        MinMaxNormalizer.class.getName(),\n        params);\n    assertTrue(n instanceof MinMaxNormalizer);\n    final MinMaxNormalizer mmn = (MinMaxNormalizer)n;\n    assertEquals(mmn.getMin(), expectedMin, 0.0);\n    assertEquals(mmn.getMax(), expectedMax, 0.0);\n    assertEquals(\"{min=\"+expectedMin+\", max=\"+expectedMax+\"}\", mmn.paramsToMap().toString());\n    return n;\n  }\n\n","sourceOld":"  private Normalizer implTestMinMax(Map<String,Object> params,\n      float expectedMin, float expectedMax) {\n    final Normalizer n = Normalizer.getInstance(\n        solrResourceLoader,\n        MinMaxNormalizer.class.getCanonicalName(),\n        params);\n    assertTrue(n instanceof MinMaxNormalizer);\n    final MinMaxNormalizer mmn = (MinMaxNormalizer)n;\n    assertEquals(mmn.getMin(), expectedMin, 0.0);\n    assertEquals(mmn.getMax(), expectedMax, 0.0);\n    assertEquals(\"{min=\"+expectedMin+\", max=\"+expectedMax+\"}\", mmn.paramsToMap().toString());\n    return n;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bf344c7efad3160a74c52ef1fd53f535978fc5b7":["b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162"],"1d96925d05b738bc6535eea66b6cc65eb8bfba69":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162":["1d96925d05b738bc6535eea66b6cc65eb8bfba69","71de52d9a1541112145bb5f013afacbbd5437f14"],"71de52d9a1541112145bb5f013afacbbd5437f14":["1d96925d05b738bc6535eea66b6cc65eb8bfba69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f906c3206e7eb174774f938416460e39170d819"],"3f906c3206e7eb174774f938416460e39170d819":["b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162","bf344c7efad3160a74c52ef1fd53f535978fc5b7"]},"commit2Childs":{"bf344c7efad3160a74c52ef1fd53f535978fc5b7":["3f906c3206e7eb174774f938416460e39170d819"],"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","1d96925d05b738bc6535eea66b6cc65eb8bfba69","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"1d96925d05b738bc6535eea66b6cc65eb8bfba69":["b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162","71de52d9a1541112145bb5f013afacbbd5437f14"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162":["bf344c7efad3160a74c52ef1fd53f535978fc5b7","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","3f906c3206e7eb174774f938416460e39170d819"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"71de52d9a1541112145bb5f013afacbbd5437f14":["b12a45e4bfdf664da77cb3d2ba1ebc43bf0ba162"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3f906c3206e7eb174774f938416460e39170d819":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","9720b151fde2073f4e401450f4574e5f31c2d0ff","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}