{"path":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.Elevation#Elevation(Set[BytesRef],Set[BytesRef],String).mjava","commits":[{"id":"2ad458affd82a1d762eb506003907d9363a333cb","date":1528558344,"type":0,"author":"broustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.Elevation#Elevation(Set[BytesRef],Set[BytesRef],String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Constructs an elevation.\n     * @param elevatedIds           The ids of the elevated documents that should appear on top of search results; can be <code>null</code>.\n     *                              In configured order.\n     * @param excludedIds           The ids of the excluded documents that should not appear in search results; can be <code>null</code>.\n     * @param queryFieldName        The field name to use to create query terms.\n     */\n    public Elevation(Set<BytesRef> elevatedIds, Set<BytesRef> excludedIds,\n                      String queryFieldName) {\n      if (elevatedIds == null || elevatedIds.isEmpty()) {\n        includeQuery = EMPTY_QUERY;\n        this.elevatedIds = Collections.emptySet();\n      } else {\n        this.elevatedIds = new LinkedHashSet<>(elevatedIds);\n        BooleanQuery.Builder includeQueryBuilder = new BooleanQuery.Builder();\n        for (BytesRef elevatedId : elevatedIds) {\n          includeQueryBuilder.add(new TermQuery(new Term(queryFieldName, elevatedId)), BooleanClause.Occur.SHOULD);\n        }\n        includeQuery = includeQueryBuilder.build();\n      }\n\n      if (excludedIds == null || excludedIds.isEmpty()) {\n        this.excludedIds = Collections.emptySet();\n        excludeQueries = null;\n      } else {\n        this.excludedIds = ImmutableSet.copyOf(excludedIds);\n        List<TermQuery> excludeQueriesBuilder = new ArrayList<>(excludedIds.size());\n        for (BytesRef excludedId : excludedIds) {\n          excludeQueriesBuilder.add(new TermQuery(new Term(queryFieldName, excludedId)));\n        }\n        excludeQueries = excludeQueriesBuilder.toArray(new TermQuery[excludeQueriesBuilder.size()]);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.Elevation#Elevation(Set[BytesRef],Set[BytesRef],String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Constructs an elevation.\n     * @param elevatedIds           The ids of the elevated documents that should appear on top of search results; can be <code>null</code>.\n     *                              In configured order.\n     * @param excludedIds           The ids of the excluded documents that should not appear in search results; can be <code>null</code>.\n     * @param queryFieldName        The field name to use to create query terms.\n     */\n    public Elevation(Set<BytesRef> elevatedIds, Set<BytesRef> excludedIds,\n                      String queryFieldName) {\n      if (elevatedIds == null || elevatedIds.isEmpty()) {\n        includeQuery = EMPTY_QUERY;\n        this.elevatedIds = Collections.emptySet();\n      } else {\n        this.elevatedIds = new LinkedHashSet<>(elevatedIds);\n        BooleanQuery.Builder includeQueryBuilder = new BooleanQuery.Builder();\n        for (BytesRef elevatedId : elevatedIds) {\n          includeQueryBuilder.add(new TermQuery(new Term(queryFieldName, elevatedId)), BooleanClause.Occur.SHOULD);\n        }\n        includeQuery = includeQueryBuilder.build();\n      }\n\n      if (excludedIds == null || excludedIds.isEmpty()) {\n        this.excludedIds = Collections.emptySet();\n        excludeQueries = null;\n      } else {\n        this.excludedIds = ImmutableSet.copyOf(excludedIds);\n        List<TermQuery> excludeQueriesBuilder = new ArrayList<>(excludedIds.size());\n        for (BytesRef excludedId : excludedIds) {\n          excludeQueriesBuilder.add(new TermQuery(new Term(queryFieldName, excludedId)));\n        }\n        excludeQueries = excludeQueriesBuilder.toArray(new TermQuery[excludeQueriesBuilder.size()]);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.Elevation#Elevation(Set[BytesRef],Set[BytesRef],String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Constructs an elevation.\n     * @param elevatedIds           The ids of the elevated documents that should appear on top of search results; can be <code>null</code>.\n     *                              In configured order.\n     * @param excludedIds           The ids of the excluded documents that should not appear in search results; can be <code>null</code>.\n     * @param queryFieldName        The field name to use to create query terms.\n     */\n    public Elevation(Set<BytesRef> elevatedIds, Set<BytesRef> excludedIds,\n                      String queryFieldName) {\n      if (elevatedIds == null || elevatedIds.isEmpty()) {\n        includeQuery = EMPTY_QUERY;\n        this.elevatedIds = Collections.emptySet();\n      } else {\n        this.elevatedIds = new LinkedHashSet<>(elevatedIds);\n        BooleanQuery.Builder includeQueryBuilder = new BooleanQuery.Builder();\n        for (BytesRef elevatedId : elevatedIds) {\n          includeQueryBuilder.add(new TermQuery(new Term(queryFieldName, elevatedId)), BooleanClause.Occur.SHOULD);\n        }\n        includeQuery = includeQueryBuilder.build();\n      }\n\n      if (excludedIds == null || excludedIds.isEmpty()) {\n        this.excludedIds = Collections.emptySet();\n        excludeQueries = null;\n      } else {\n        this.excludedIds = ImmutableSet.copyOf(excludedIds);\n        List<TermQuery> excludeQueriesBuilder = new ArrayList<>(excludedIds.size());\n        for (BytesRef excludedId : excludedIds) {\n          excludeQueriesBuilder.add(new TermQuery(new Term(queryFieldName, excludedId)));\n        }\n        excludeQueries = excludeQueriesBuilder.toArray(new TermQuery[excludeQueriesBuilder.size()]);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6046c615b67e878b7c0ab9257d01dd759493f06","date":1564997027,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.Elevation#Elevation(Set[BytesRef],Set[BytesRef],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.Elevation#Elevation(Set[BytesRef],Set[BytesRef],String).mjava","sourceNew":"    /**\n     * Constructs an elevation.\n     *\n     * @param elevatedIds    The ids of the elevated documents that should appear on top of search results, in configured order;\n     *                       can be <code>null</code>.\n     * @param excludedIds    The ids of the excluded documents that should not appear in search results; can be <code>null</code>.\n     * @param queryFieldName The field name to use to create query terms.\n     */\n    public Elevation(Set<BytesRef> elevatedIds, Set<BytesRef> excludedIds, String queryFieldName) {\n      if (elevatedIds == null || elevatedIds.isEmpty()) {\n        includeQuery = EMPTY_QUERY;\n        this.elevatedIds = Collections.emptySet();\n      } else {\n        this.elevatedIds = ImmutableSet.copyOf(elevatedIds);\n        BooleanQuery.Builder includeQueryBuilder = new BooleanQuery.Builder();\n        for (BytesRef elevatedId : elevatedIds) {\n          includeQueryBuilder.add(new TermQuery(new Term(queryFieldName, elevatedId)), BooleanClause.Occur.SHOULD);\n        }\n        includeQuery = includeQueryBuilder.build();\n      }\n\n      if (excludedIds == null || excludedIds.isEmpty()) {\n        this.excludedIds = Collections.emptySet();\n        excludeQueries = null;\n      } else {\n        this.excludedIds = ImmutableSet.copyOf(excludedIds);\n        List<TermQuery> excludeQueriesBuilder = new ArrayList<>(excludedIds.size());\n        for (BytesRef excludedId : excludedIds) {\n          excludeQueriesBuilder.add(new TermQuery(new Term(queryFieldName, excludedId)));\n        }\n        excludeQueries = excludeQueriesBuilder.toArray(new TermQuery[0]);\n      }\n    }\n\n","sourceOld":"    /**\n     * Constructs an elevation.\n     * @param elevatedIds           The ids of the elevated documents that should appear on top of search results; can be <code>null</code>.\n     *                              In configured order.\n     * @param excludedIds           The ids of the excluded documents that should not appear in search results; can be <code>null</code>.\n     * @param queryFieldName        The field name to use to create query terms.\n     */\n    public Elevation(Set<BytesRef> elevatedIds, Set<BytesRef> excludedIds,\n                      String queryFieldName) {\n      if (elevatedIds == null || elevatedIds.isEmpty()) {\n        includeQuery = EMPTY_QUERY;\n        this.elevatedIds = Collections.emptySet();\n      } else {\n        this.elevatedIds = new LinkedHashSet<>(elevatedIds);\n        BooleanQuery.Builder includeQueryBuilder = new BooleanQuery.Builder();\n        for (BytesRef elevatedId : elevatedIds) {\n          includeQueryBuilder.add(new TermQuery(new Term(queryFieldName, elevatedId)), BooleanClause.Occur.SHOULD);\n        }\n        includeQuery = includeQueryBuilder.build();\n      }\n\n      if (excludedIds == null || excludedIds.isEmpty()) {\n        this.excludedIds = Collections.emptySet();\n        excludeQueries = null;\n      } else {\n        this.excludedIds = ImmutableSet.copyOf(excludedIds);\n        List<TermQuery> excludeQueriesBuilder = new ArrayList<>(excludedIds.size());\n        for (BytesRef excludedId : excludedIds) {\n          excludeQueriesBuilder.add(new TermQuery(new Term(queryFieldName, excludedId)));\n        }\n        excludeQueries = excludeQueriesBuilder.toArray(new TermQuery[excludeQueriesBuilder.size()]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.Elevation#Elevation(Set[BytesRef],Set[BytesRef],String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/QueryElevationComponent.Elevation#Elevation(Set[BytesRef],Set[BytesRef],String).mjava","sourceNew":"    /**\n     * Constructs an elevation.\n     *\n     * @param elevatedIds    The ids of the elevated documents that should appear on top of search results, in configured order;\n     *                       can be <code>null</code>.\n     * @param excludedIds    The ids of the excluded documents that should not appear in search results; can be <code>null</code>.\n     * @param queryFieldName The field name to use to create query terms.\n     */\n    public Elevation(Set<BytesRef> elevatedIds, Set<BytesRef> excludedIds, String queryFieldName) {\n      if (elevatedIds == null || elevatedIds.isEmpty()) {\n        includeQuery = EMPTY_QUERY;\n        this.elevatedIds = Collections.emptySet();\n      } else {\n        this.elevatedIds = ImmutableSet.copyOf(elevatedIds);\n        BooleanQuery.Builder includeQueryBuilder = new BooleanQuery.Builder();\n        for (BytesRef elevatedId : elevatedIds) {\n          includeQueryBuilder.add(new TermQuery(new Term(queryFieldName, elevatedId)), BooleanClause.Occur.SHOULD);\n        }\n        includeQuery = includeQueryBuilder.build();\n      }\n\n      if (excludedIds == null || excludedIds.isEmpty()) {\n        this.excludedIds = Collections.emptySet();\n        excludeQueries = null;\n      } else {\n        this.excludedIds = ImmutableSet.copyOf(excludedIds);\n        List<TermQuery> excludeQueriesBuilder = new ArrayList<>(excludedIds.size());\n        for (BytesRef excludedId : excludedIds) {\n          excludeQueriesBuilder.add(new TermQuery(new Term(queryFieldName, excludedId)));\n        }\n        excludeQueries = excludeQueriesBuilder.toArray(new TermQuery[0]);\n      }\n    }\n\n","sourceOld":"    /**\n     * Constructs an elevation.\n     * @param elevatedIds           The ids of the elevated documents that should appear on top of search results; can be <code>null</code>.\n     *                              In configured order.\n     * @param excludedIds           The ids of the excluded documents that should not appear in search results; can be <code>null</code>.\n     * @param queryFieldName        The field name to use to create query terms.\n     */\n    public Elevation(Set<BytesRef> elevatedIds, Set<BytesRef> excludedIds,\n                      String queryFieldName) {\n      if (elevatedIds == null || elevatedIds.isEmpty()) {\n        includeQuery = EMPTY_QUERY;\n        this.elevatedIds = Collections.emptySet();\n      } else {\n        this.elevatedIds = new LinkedHashSet<>(elevatedIds);\n        BooleanQuery.Builder includeQueryBuilder = new BooleanQuery.Builder();\n        for (BytesRef elevatedId : elevatedIds) {\n          includeQueryBuilder.add(new TermQuery(new Term(queryFieldName, elevatedId)), BooleanClause.Occur.SHOULD);\n        }\n        includeQuery = includeQueryBuilder.build();\n      }\n\n      if (excludedIds == null || excludedIds.isEmpty()) {\n        this.excludedIds = Collections.emptySet();\n        excludeQueries = null;\n      } else {\n        this.excludedIds = ImmutableSet.copyOf(excludedIds);\n        List<TermQuery> excludeQueriesBuilder = new ArrayList<>(excludedIds.size());\n        for (BytesRef excludedId : excludedIds) {\n          excludeQueriesBuilder.add(new TermQuery(new Term(queryFieldName, excludedId)));\n        }\n        excludeQueries = excludeQueriesBuilder.toArray(new TermQuery[excludeQueriesBuilder.size()]);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ad458affd82a1d762eb506003907d9363a333cb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2ad458affd82a1d762eb506003907d9363a333cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["2ad458affd82a1d762eb506003907d9363a333cb"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["2ad458affd82a1d762eb506003907d9363a333cb","e6046c615b67e878b7c0ab9257d01dd759493f06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e6046c615b67e878b7c0ab9257d01dd759493f06"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ad458affd82a1d762eb506003907d9363a333cb"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","2ad458affd82a1d762eb506003907d9363a333cb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"2ad458affd82a1d762eb506003907d9363a333cb":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","e6046c615b67e878b7c0ab9257d01dd759493f06","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}