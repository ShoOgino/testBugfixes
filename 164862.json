{"path":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#doRandomSets(int,int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#doRandomSets(int,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestOpenBitSet#doRandomSets(int,int,int).mjava","sourceNew":"  void doRandomSets(int maxSize, int iter, int mode) {\n    BitSet a0=null;\n    OpenBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = random.nextInt(maxSize);\n      BitSet a = new BitSet(sz);\n      OpenBitSet b = new OpenBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random.nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random.nextInt(sz);\n          a.set(idx);\n          b.fastSet(idx);\n          \n          idx = random.nextInt(sz);\n          a.set(idx);\n          b.fastSet((long) idx);\n          \n          idx = random.nextInt(sz);\n          a.clear(idx);\n          b.fastClear(idx);\n          \n          idx = random.nextInt(sz);\n          a.clear(idx);\n          b.fastClear((long) idx);\n          \n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.fastFlip(idx);\n\n          boolean val = b.flipAndGet(idx);\n          boolean val2 = b.flipAndGet(idx);\n          assertTrue(val != val2);\n\n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.fastFlip((long) idx);\n\n          val = b.flipAndGet((long) idx);\n          val2 = b.flipAndGet((long) idx);\n          assertTrue(val != val2);\n\n          val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.fastClear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n      doGetFast(a, b, sz);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random.nextInt(sz+80);\n      toIndex = fromIndex + random.nextInt((sz>>1)+1);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      OpenBitSet bb = (OpenBitSet)b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random.nextInt(sz+80);\n      toIndex = fromIndex + random.nextInt((sz>>1)+1);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = (OpenBitSet)b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      doNextSetBitLong(aa,bb);\n      \n      doPrevSetBit(aa,bb);\n      doPrevSetBitLong(aa,bb);\n\n      fromIndex = random.nextInt(sz+80);\n      toIndex = fromIndex + random.nextInt((sz>>1)+1);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = (OpenBitSet)b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n      doNextSetBitLong(aa,bb);\n    \n      doPrevSetBit(aa,bb);\n      doPrevSetBitLong(aa,bb);\n\n      if (a0 != null) {\n        assertEquals( a.equals(a0), b.equals(b0));\n\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        OpenBitSet b_and = (OpenBitSet)b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        OpenBitSet b_or = (OpenBitSet)b.clone(); b_or.or(b0);\n        OpenBitSet b_xor = (OpenBitSet)b.clone(); b_xor.xor(b0);\n        OpenBitSet b_andn = (OpenBitSet)b.clone(); b_andn.andNot(b0);\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_xor,b_xor, mode);\n        doIterate(a_andn,b_andn, mode);\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n\n        // test non-mutating popcounts\n        assertEquals(b_and.cardinality(), OpenBitSet.intersectionCount(b,b0));\n        assertEquals(b_or.cardinality(), OpenBitSet.unionCount(b,b0));\n        assertEquals(b_xor.cardinality(), OpenBitSet.xorCount(b,b0));\n        assertEquals(b_andn.cardinality(), OpenBitSet.andNotCount(b,b0));\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","sourceOld":"  void doRandomSets(int maxSize, int iter, int mode) {\n    BitSet a0=null;\n    OpenBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = random.nextInt(maxSize);\n      BitSet a = new BitSet(sz);\n      OpenBitSet b = new OpenBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random.nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random.nextInt(sz);\n          a.set(idx);\n          b.fastSet(idx);\n          \n          idx = random.nextInt(sz);\n          a.set(idx);\n          b.fastSet((long) idx);\n          \n          idx = random.nextInt(sz);\n          a.clear(idx);\n          b.fastClear(idx);\n          \n          idx = random.nextInt(sz);\n          a.clear(idx);\n          b.fastClear((long) idx);\n          \n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.fastFlip(idx);\n\n          boolean val = b.flipAndGet(idx);\n          boolean val2 = b.flipAndGet(idx);\n          assertTrue(val != val2);\n\n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.fastFlip((long) idx);\n\n          val = b.flipAndGet((long) idx);\n          val2 = b.flipAndGet((long) idx);\n          assertTrue(val != val2);\n\n          val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.fastClear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n      doGetFast(a, b, sz);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random.nextInt(sz+80);\n      toIndex = fromIndex + random.nextInt((sz>>1)+1);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      OpenBitSet bb = (OpenBitSet)b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random.nextInt(sz+80);\n      toIndex = fromIndex + random.nextInt((sz>>1)+1);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = (OpenBitSet)b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      doNextSetBitLong(aa,bb);\n      \n      doPrevSetBit(aa,bb);\n      doPrevSetBitLong(aa,bb);\n\n      fromIndex = random.nextInt(sz+80);\n      toIndex = fromIndex + random.nextInt((sz>>1)+1);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = (OpenBitSet)b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n      doNextSetBitLong(aa,bb);\n    \n      doPrevSetBit(aa,bb);\n      doPrevSetBitLong(aa,bb);\n\n      if (a0 != null) {\n        assertEquals( a.equals(a0), b.equals(b0));\n\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        OpenBitSet b_and = (OpenBitSet)b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        OpenBitSet b_or = (OpenBitSet)b.clone(); b_or.or(b0);\n        OpenBitSet b_xor = (OpenBitSet)b.clone(); b_xor.xor(b0);\n        OpenBitSet b_andn = (OpenBitSet)b.clone(); b_andn.andNot(b0);\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_xor,b_xor, mode);\n        doIterate(a_andn,b_andn, mode);\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n\n        // test non-mutating popcounts\n        assertEquals(b_and.cardinality(), OpenBitSet.intersectionCount(b,b0));\n        assertEquals(b_or.cardinality(), OpenBitSet.unionCount(b,b0));\n        assertEquals(b_xor.cardinality(), OpenBitSet.xorCount(b,b0));\n        assertEquals(b_andn.cardinality(), OpenBitSet.andNotCount(b,b0));\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76c5c188431927c412f7c71546c5cfcccdc327f8","date":1333289294,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#doRandomSets(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#doRandomSets(int,int,int).mjava","sourceNew":"  void doRandomSets(int maxSize, int iter, int mode) {\n    BitSet a0=null;\n    OpenBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = random.nextInt(maxSize);\n      BitSet a = new BitSet(sz);\n      OpenBitSet b = new OpenBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random.nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random.nextInt(sz);\n          a.set(idx);\n          b.fastSet(idx);\n          \n          idx = random.nextInt(sz);\n          a.set(idx);\n          b.fastSet((long) idx);\n          \n          idx = random.nextInt(sz);\n          a.clear(idx);\n          b.fastClear(idx);\n          \n          idx = random.nextInt(sz);\n          a.clear(idx);\n          b.fastClear((long) idx);\n          \n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.fastFlip(idx);\n\n          boolean val = b.flipAndGet(idx);\n          boolean val2 = b.flipAndGet(idx);\n          assertTrue(val != val2);\n\n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.fastFlip((long) idx);\n\n          val = b.flipAndGet((long) idx);\n          val2 = b.flipAndGet((long) idx);\n          assertTrue(val != val2);\n\n          val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.fastClear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n      doGetFast(a, b, sz);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random.nextInt(sz+80);\n      toIndex = fromIndex + random.nextInt((sz>>1)+1);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      OpenBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random.nextInt(sz+80);\n      toIndex = fromIndex + random.nextInt((sz>>1)+1);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      doNextSetBitLong(aa,bb);\n      \n      doPrevSetBit(aa,bb);\n      doPrevSetBitLong(aa,bb);\n\n      fromIndex = random.nextInt(sz+80);\n      toIndex = fromIndex + random.nextInt((sz>>1)+1);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n      doNextSetBitLong(aa,bb);\n    \n      doPrevSetBit(aa,bb);\n      doPrevSetBitLong(aa,bb);\n\n      if (a0 != null) {\n        assertEquals( a.equals(a0), b.equals(b0));\n\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        OpenBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        OpenBitSet b_or = b.clone(); b_or.or(b0);\n        OpenBitSet b_xor = b.clone(); b_xor.xor(b0);\n        OpenBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_xor,b_xor, mode);\n        doIterate(a_andn,b_andn, mode);\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n\n        // test non-mutating popcounts\n        assertEquals(b_and.cardinality(), OpenBitSet.intersectionCount(b,b0));\n        assertEquals(b_or.cardinality(), OpenBitSet.unionCount(b,b0));\n        assertEquals(b_xor.cardinality(), OpenBitSet.xorCount(b,b0));\n        assertEquals(b_andn.cardinality(), OpenBitSet.andNotCount(b,b0));\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","sourceOld":"  void doRandomSets(int maxSize, int iter, int mode) {\n    BitSet a0=null;\n    OpenBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = random.nextInt(maxSize);\n      BitSet a = new BitSet(sz);\n      OpenBitSet b = new OpenBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random.nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random.nextInt(sz);\n          a.set(idx);\n          b.fastSet(idx);\n          \n          idx = random.nextInt(sz);\n          a.set(idx);\n          b.fastSet((long) idx);\n          \n          idx = random.nextInt(sz);\n          a.clear(idx);\n          b.fastClear(idx);\n          \n          idx = random.nextInt(sz);\n          a.clear(idx);\n          b.fastClear((long) idx);\n          \n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.fastFlip(idx);\n\n          boolean val = b.flipAndGet(idx);\n          boolean val2 = b.flipAndGet(idx);\n          assertTrue(val != val2);\n\n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.fastFlip((long) idx);\n\n          val = b.flipAndGet((long) idx);\n          val2 = b.flipAndGet((long) idx);\n          assertTrue(val != val2);\n\n          val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.fastClear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n      doGetFast(a, b, sz);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random.nextInt(sz+80);\n      toIndex = fromIndex + random.nextInt((sz>>1)+1);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      OpenBitSet bb = (OpenBitSet)b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random.nextInt(sz+80);\n      toIndex = fromIndex + random.nextInt((sz>>1)+1);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = (OpenBitSet)b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      doNextSetBitLong(aa,bb);\n      \n      doPrevSetBit(aa,bb);\n      doPrevSetBitLong(aa,bb);\n\n      fromIndex = random.nextInt(sz+80);\n      toIndex = fromIndex + random.nextInt((sz>>1)+1);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = (OpenBitSet)b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n      doNextSetBitLong(aa,bb);\n    \n      doPrevSetBit(aa,bb);\n      doPrevSetBitLong(aa,bb);\n\n      if (a0 != null) {\n        assertEquals( a.equals(a0), b.equals(b0));\n\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        OpenBitSet b_and = (OpenBitSet)b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        OpenBitSet b_or = (OpenBitSet)b.clone(); b_or.or(b0);\n        OpenBitSet b_xor = (OpenBitSet)b.clone(); b_xor.xor(b0);\n        OpenBitSet b_andn = (OpenBitSet)b.clone(); b_andn.andNot(b0);\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_xor,b_xor, mode);\n        doIterate(a_andn,b_andn, mode);\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n\n        // test non-mutating popcounts\n        assertEquals(b_and.cardinality(), OpenBitSet.intersectionCount(b,b0));\n        assertEquals(b_or.cardinality(), OpenBitSet.unionCount(b,b0));\n        assertEquals(b_xor.cardinality(), OpenBitSet.xorCount(b,b0));\n        assertEquals(b_andn.cardinality(), OpenBitSet.andNotCount(b,b0));\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#doRandomSets(int,int,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#doRandomSets(int,int,int).mjava","sourceNew":"  void doRandomSets(int maxSize, int iter, int mode) {\n    BitSet a0=null;\n    OpenBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = random().nextInt(maxSize);\n      BitSet a = new BitSet(sz);\n      OpenBitSet b = new OpenBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.fastSet(idx);\n          \n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.fastSet((long) idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.fastClear(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.fastClear((long) idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.fastFlip(idx);\n\n          boolean val = b.flipAndGet(idx);\n          boolean val2 = b.flipAndGet(idx);\n          assertTrue(val != val2);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.fastFlip((long) idx);\n\n          val = b.flipAndGet((long) idx);\n          val2 = b.flipAndGet((long) idx);\n          assertTrue(val != val2);\n\n          val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.fastClear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n      doGetFast(a, b, sz);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz+80);\n      toIndex = fromIndex + random().nextInt((sz>>1)+1);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      OpenBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random().nextInt(sz+80);\n      toIndex = fromIndex + random().nextInt((sz>>1)+1);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      doNextSetBitLong(aa,bb);\n      \n      doPrevSetBit(aa,bb);\n      doPrevSetBitLong(aa,bb);\n\n      fromIndex = random().nextInt(sz+80);\n      toIndex = fromIndex + random().nextInt((sz>>1)+1);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n      doNextSetBitLong(aa,bb);\n    \n      doPrevSetBit(aa,bb);\n      doPrevSetBitLong(aa,bb);\n\n      if (a0 != null) {\n        assertEquals( a.equals(a0), b.equals(b0));\n\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        OpenBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        OpenBitSet b_or = b.clone(); b_or.or(b0);\n        OpenBitSet b_xor = b.clone(); b_xor.xor(b0);\n        OpenBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_xor,b_xor, mode);\n        doIterate(a_andn,b_andn, mode);\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n\n        // test non-mutating popcounts\n        assertEquals(b_and.cardinality(), OpenBitSet.intersectionCount(b,b0));\n        assertEquals(b_or.cardinality(), OpenBitSet.unionCount(b,b0));\n        assertEquals(b_xor.cardinality(), OpenBitSet.xorCount(b,b0));\n        assertEquals(b_andn.cardinality(), OpenBitSet.andNotCount(b,b0));\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","sourceOld":"  void doRandomSets(int maxSize, int iter, int mode) {\n    BitSet a0=null;\n    OpenBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = random.nextInt(maxSize);\n      BitSet a = new BitSet(sz);\n      OpenBitSet b = new OpenBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random.nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random.nextInt(sz);\n          a.set(idx);\n          b.fastSet(idx);\n          \n          idx = random.nextInt(sz);\n          a.set(idx);\n          b.fastSet((long) idx);\n          \n          idx = random.nextInt(sz);\n          a.clear(idx);\n          b.fastClear(idx);\n          \n          idx = random.nextInt(sz);\n          a.clear(idx);\n          b.fastClear((long) idx);\n          \n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.fastFlip(idx);\n\n          boolean val = b.flipAndGet(idx);\n          boolean val2 = b.flipAndGet(idx);\n          assertTrue(val != val2);\n\n          idx = random.nextInt(sz);\n          a.flip(idx);\n          b.fastFlip((long) idx);\n\n          val = b.flipAndGet((long) idx);\n          val2 = b.flipAndGet((long) idx);\n          assertTrue(val != val2);\n\n          val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.fastClear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n      doGetFast(a, b, sz);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random.nextInt(sz+80);\n      toIndex = fromIndex + random.nextInt((sz>>1)+1);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      OpenBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random.nextInt(sz+80);\n      toIndex = fromIndex + random.nextInt((sz>>1)+1);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      doNextSetBitLong(aa,bb);\n      \n      doPrevSetBit(aa,bb);\n      doPrevSetBitLong(aa,bb);\n\n      fromIndex = random.nextInt(sz+80);\n      toIndex = fromIndex + random.nextInt((sz>>1)+1);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n      doNextSetBitLong(aa,bb);\n    \n      doPrevSetBit(aa,bb);\n      doPrevSetBitLong(aa,bb);\n\n      if (a0 != null) {\n        assertEquals( a.equals(a0), b.equals(b0));\n\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        OpenBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        OpenBitSet b_or = b.clone(); b_or.or(b0);\n        OpenBitSet b_xor = b.clone(); b_xor.xor(b0);\n        OpenBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_xor,b_xor, mode);\n        doIterate(a_andn,b_andn, mode);\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n\n        // test non-mutating popcounts\n        assertEquals(b_and.cardinality(), OpenBitSet.intersectionCount(b,b0));\n        assertEquals(b_or.cardinality(), OpenBitSet.unionCount(b,b0));\n        assertEquals(b_xor.cardinality(), OpenBitSet.xorCount(b,b0));\n        assertEquals(b_andn.cardinality(), OpenBitSet.andNotCount(b,b0));\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4","date":1413466868,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#doRandomSets(int,int,int).mjava","sourceNew":null,"sourceOld":"  void doRandomSets(int maxSize, int iter, int mode) {\n    BitSet a0=null;\n    OpenBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = random().nextInt(maxSize);\n      BitSet a = new BitSet(sz);\n      OpenBitSet b = new OpenBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.fastSet(idx);\n          \n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.fastSet((long) idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.fastClear(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.fastClear((long) idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.fastFlip(idx);\n\n          boolean val = b.flipAndGet(idx);\n          boolean val2 = b.flipAndGet(idx);\n          assertTrue(val != val2);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.fastFlip((long) idx);\n\n          val = b.flipAndGet((long) idx);\n          val2 = b.flipAndGet((long) idx);\n          assertTrue(val != val2);\n\n          val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.fastClear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n      doGetFast(a, b, sz);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz+80);\n      toIndex = fromIndex + random().nextInt((sz>>1)+1);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      OpenBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random().nextInt(sz+80);\n      toIndex = fromIndex + random().nextInt((sz>>1)+1);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      doNextSetBitLong(aa,bb);\n      \n      doPrevSetBit(aa,bb);\n      doPrevSetBitLong(aa,bb);\n\n      fromIndex = random().nextInt(sz+80);\n      toIndex = fromIndex + random().nextInt((sz>>1)+1);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n      doNextSetBitLong(aa,bb);\n    \n      doPrevSetBit(aa,bb);\n      doPrevSetBitLong(aa,bb);\n\n      if (a0 != null) {\n        assertEquals( a.equals(a0), b.equals(b0));\n\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        OpenBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        OpenBitSet b_or = b.clone(); b_or.or(b0);\n        OpenBitSet b_xor = b.clone(); b_xor.xor(b0);\n        OpenBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_xor,b_xor, mode);\n        doIterate(a_andn,b_andn, mode);\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n\n        // test non-mutating popcounts\n        assertEquals(b_and.cardinality(), OpenBitSet.intersectionCount(b,b0));\n        assertEquals(b_or.cardinality(), OpenBitSet.unionCount(b,b0));\n        assertEquals(b_xor.cardinality(), OpenBitSet.xorCount(b,b0));\n        assertEquals(b_andn.cardinality(), OpenBitSet.andNotCount(b,b0));\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet#doRandomSets(int,int,int).mjava","sourceNew":null,"sourceOld":"  void doRandomSets(int maxSize, int iter, int mode) {\n    BitSet a0=null;\n    OpenBitSet b0=null;\n\n    for (int i=0; i<iter; i++) {\n      int sz = random().nextInt(maxSize);\n      BitSet a = new BitSet(sz);\n      OpenBitSet b = new OpenBitSet(sz);\n\n      // test the various ways of setting bits\n      if (sz>0) {\n        int nOper = random().nextInt(sz);\n        for (int j=0; j<nOper; j++) {\n          int idx;         \n\n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.fastSet(idx);\n          \n          idx = random().nextInt(sz);\n          a.set(idx);\n          b.fastSet((long) idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.fastClear(idx);\n          \n          idx = random().nextInt(sz);\n          a.clear(idx);\n          b.fastClear((long) idx);\n          \n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.fastFlip(idx);\n\n          boolean val = b.flipAndGet(idx);\n          boolean val2 = b.flipAndGet(idx);\n          assertTrue(val != val2);\n\n          idx = random().nextInt(sz);\n          a.flip(idx);\n          b.fastFlip((long) idx);\n\n          val = b.flipAndGet((long) idx);\n          val2 = b.flipAndGet((long) idx);\n          assertTrue(val != val2);\n\n          val = b.getAndSet(idx);\n          assertTrue(val2 == val);\n          assertTrue(b.get(idx));\n          \n          if (!val) b.fastClear(idx);\n          assertTrue(b.get(idx) == val);\n        }\n      }\n\n      // test that the various ways of accessing the bits are equivalent\n      doGet(a,b);\n      doGetFast(a, b, sz);\n\n      // test ranges, including possible extension\n      int fromIndex, toIndex;\n      fromIndex = random().nextInt(sz+80);\n      toIndex = fromIndex + random().nextInt((sz>>1)+1);\n      BitSet aa = (BitSet)a.clone(); aa.flip(fromIndex,toIndex);\n      OpenBitSet bb = b.clone(); bb.flip(fromIndex,toIndex);\n\n      doIterate(aa,bb, mode);   // a problem here is from flip or doIterate\n\n      fromIndex = random().nextInt(sz+80);\n      toIndex = fromIndex + random().nextInt((sz>>1)+1);\n      aa = (BitSet)a.clone(); aa.clear(fromIndex,toIndex);\n      bb = b.clone(); bb.clear(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from clear() or nextSetBit\n      doNextSetBitLong(aa,bb);\n      \n      doPrevSetBit(aa,bb);\n      doPrevSetBitLong(aa,bb);\n\n      fromIndex = random().nextInt(sz+80);\n      toIndex = fromIndex + random().nextInt((sz>>1)+1);\n      aa = (BitSet)a.clone(); aa.set(fromIndex,toIndex);\n      bb = b.clone(); bb.set(fromIndex,toIndex);\n\n      doNextSetBit(aa,bb); // a problem here is from set() or nextSetBit\n      doNextSetBitLong(aa,bb);\n    \n      doPrevSetBit(aa,bb);\n      doPrevSetBitLong(aa,bb);\n\n      if (a0 != null) {\n        assertEquals( a.equals(a0), b.equals(b0));\n\n        assertEquals(a.cardinality(), b.cardinality());\n\n        BitSet a_and = (BitSet)a.clone(); a_and.and(a0);\n        BitSet a_or = (BitSet)a.clone(); a_or.or(a0);\n        BitSet a_xor = (BitSet)a.clone(); a_xor.xor(a0);\n        BitSet a_andn = (BitSet)a.clone(); a_andn.andNot(a0);\n\n        OpenBitSet b_and = b.clone(); assertEquals(b,b_and); b_and.and(b0);\n        OpenBitSet b_or = b.clone(); b_or.or(b0);\n        OpenBitSet b_xor = b.clone(); b_xor.xor(b0);\n        OpenBitSet b_andn = b.clone(); b_andn.andNot(b0);\n\n        doIterate(a_and,b_and, mode);\n        doIterate(a_or,b_or, mode);\n        doIterate(a_xor,b_xor, mode);\n        doIterate(a_andn,b_andn, mode);\n\n        assertEquals(a_and.cardinality(), b_and.cardinality());\n        assertEquals(a_or.cardinality(), b_or.cardinality());\n        assertEquals(a_xor.cardinality(), b_xor.cardinality());\n        assertEquals(a_andn.cardinality(), b_andn.cardinality());\n\n        // test non-mutating popcounts\n        assertEquals(b_and.cardinality(), OpenBitSet.intersectionCount(b,b0));\n        assertEquals(b_or.cardinality(), OpenBitSet.unionCount(b,b0));\n        assertEquals(b_xor.cardinality(), OpenBitSet.xorCount(b,b0));\n        assertEquals(b_andn.cardinality(), OpenBitSet.andNotCount(b,b0));\n      }\n\n      a0=a;\n      b0=b;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76c5c188431927c412f7c71546c5cfcccdc327f8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["76c5c188431927c412f7c71546c5cfcccdc327f8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"]},"commit2Childs":{"76c5c188431927c412f7c71546c5cfcccdc327f8":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76c5c188431927c412f7c71546c5cfcccdc327f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}