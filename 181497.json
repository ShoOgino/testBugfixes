{"path":"src/test-deprecated/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","commits":[{"id":"5b5461affe637a07375542c763a4805300802be8","date":1102270918,"type":0,"author":"Bernhard Messer","isMerge":false,"pathNew":"src/test-deprecated/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","pathOld":"/dev/null","sourceNew":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new WhitespaceAnalyzer());\n    assertTrue(result != null);\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test-deprecated/org/apache/lucene/search/TestQueryTermVector#testConstructor().mjava","sourceNew":null,"sourceOld":"  public void testConstructor() {\n    String [] queryTerm = {\"foo\", \"bar\", \"foo\", \"again\", \"foo\", \"bar\", \"go\", \"go\", \"go\"};\n    //Items are sorted lexicographically\n    String [] gold = {\"again\", \"bar\", \"foo\", \"go\"};\n    int [] goldFreqs = {1, 2, 3, 3};\n    QueryTermVector result = new QueryTermVector(queryTerm);\n    assertTrue(result != null);\n    String [] terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    int [] freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n    result = new QueryTermVector(null);\n    assertTrue(result.getTerms().length == 0);\n    \n    result = new QueryTermVector(\"foo bar foo again foo bar go go go\", new WhitespaceAnalyzer());\n    assertTrue(result != null);\n    terms = result.getTerms();\n    assertTrue(terms.length == 4);\n    freq = result.getTermFrequencies();\n    assertTrue(freq.length == 4);\n    checkGold(terms, gold, freq, goldFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b5461affe637a07375542c763a4805300802be8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["5b5461affe637a07375542c763a4805300802be8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"5b5461affe637a07375542c763a4805300802be8":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b5461affe637a07375542c763a4805300802be8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}