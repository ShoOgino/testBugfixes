{"path":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTerms#intersect(CompiledAutomaton,BytesRef).mjava","commits":[{"id":"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","date":1419346542,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/sorter/SortingLeafReader.SortingTerms#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm)\n        throws IOException {\n      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions);\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm)\n        throws IOException {\n      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5311f0bff57ce15a23909f4cfb953773630534","date":1424827033,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTerms#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm)\n        throws IOException {\n      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions, hasPositions());\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm)\n        throws IOException {\n      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTerms#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm)\n        throws IOException {\n      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions, hasPositions());\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm)\n        throws IOException {\n      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTerms#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm)\n        throws IOException {\n      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions, hasPositions());\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm)\n        throws IOException {\n      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions, hasPositions());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTerms#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm)\n        throws IOException {\n      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions, hasPositions());\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm)\n        throws IOException {\n      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions, hasPositions());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTerms#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm)\n        throws IOException {\n      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions, hasPositions());\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm)\n        throws IOException {\n      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions, hasPositions());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTerms#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm)\n        throws IOException {\n      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions, hasPositions());\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm)\n        throws IOException {\n      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions, hasPositions());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingTerms#intersect(CompiledAutomaton,BytesRef).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/index/SortingLeafReader.SortingTerms#intersect(CompiledAutomaton,BytesRef).mjava","sourceNew":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm)\n        throws IOException {\n      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions, hasPositions());\n    }\n\n","sourceOld":"    @Override\n    public TermsEnum intersect(CompiledAutomaton compiled, BytesRef startTerm)\n        throws IOException {\n      return new SortingTermsEnum(in.intersect(compiled, startTerm), docMap, indexOptions, hasPositions());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cb5311f0bff57ce15a23909f4cfb953773630534":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e","cb5311f0bff57ce15a23909f4cfb953773630534"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["6b4e3cd382d0d075a0f1725649c084bb6510c483","3d33e731a93d4b57e662ff094f64f94a745422d4"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["6b4e3cd382d0d075a0f1725649c084bb6510c483","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6b4e3cd382d0d075a0f1725649c084bb6510c483","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["6b4e3cd382d0d075a0f1725649c084bb6510c483","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"cb5311f0bff57ce15a23909f4cfb953773630534":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"82dc51e5dcd7a80b71e40ebe8959b1c43b63f95e":["cb5311f0bff57ce15a23909f4cfb953773630534","6b4e3cd382d0d075a0f1725649c084bb6510c483"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}