{"path":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#partitionTLDprefixesBySuffixLength().mjava","commits":[{"id":"2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8","date":1528751370,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#partitionTLDprefixesBySuffixLength().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Partition TLDs by whether they are prefixes of other TLDs and then by suffix length.\n   * We only care about TLDs that are prefixes and are exactly one character shorter than another TLD.\n   * See LUCENE-8278 and LUCENE-5391.\n   */\n  private void partitionTLDprefixesBySuffixLength() {\n    TLDsBySuffixLength.add(new TreeSet<>());            // initialize set for zero-suffix TLDs\n    for (SortedMap.Entry<String,Boolean> entry : processedTLDsLongestFirst.entrySet()) {\n      String TLD = entry.getKey();\n      if (entry.getValue()) {\n        // System.out.println(\"Skipping already processed: \" + TLD);\n        continue;\n      }\n      // System.out.println(\"Adding zero-suffix TLD: \" + TLD);\n      TLDsBySuffixLength.get(0).add(TLD);\n      for (int suffixLength = 1 ; (TLD.length() - suffixLength) >= 2 ; ++suffixLength) {\n        String TLDprefix = TLD.substring(0, TLD.length() - suffixLength);\n        if (false == processedTLDsLongestFirst.containsKey(TLDprefix)) {\n          // System.out.println(\"Ignoring non-TLD prefix: \" + TLDprefix);\n          break;                                        // shorter prefixes can be ignored\n        }\n        if (processedTLDsLongestFirst.get(TLDprefix)) {\n          // System.out.println(\"Skipping already processed prefix: \" + TLDprefix);\n          break;                                        // shorter prefixes have already been processed \n        }\n\n        processedTLDsLongestFirst.put(TLDprefix, true); // mark as processed\n        if (TLDsBySuffixLength.size() == suffixLength)\n          TLDsBySuffixLength.add(new TreeSet<>());\n        SortedSet<String> TLDbucket = TLDsBySuffixLength.get(suffixLength);\n        TLDbucket.add(TLDprefix);\n        // System.out.println(\"Adding TLD prefix of \" + TLD + \" with suffix length \" + suffixLength + \": \" + TLDprefix);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#partitionTLDprefixesBySuffixLength().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Partition TLDs by whether they are prefixes of other TLDs and then by suffix length.\n   * We only care about TLDs that are prefixes and are exactly one character shorter than another TLD.\n   * See LUCENE-8278 and LUCENE-5391.\n   */\n  private void partitionTLDprefixesBySuffixLength() {\n    TLDsBySuffixLength.add(new TreeSet<>());            // initialize set for zero-suffix TLDs\n    for (SortedMap.Entry<String,Boolean> entry : processedTLDsLongestFirst.entrySet()) {\n      String TLD = entry.getKey();\n      if (entry.getValue()) {\n        // System.out.println(\"Skipping already processed: \" + TLD);\n        continue;\n      }\n      // System.out.println(\"Adding zero-suffix TLD: \" + TLD);\n      TLDsBySuffixLength.get(0).add(TLD);\n      for (int suffixLength = 1 ; (TLD.length() - suffixLength) >= 2 ; ++suffixLength) {\n        String TLDprefix = TLD.substring(0, TLD.length() - suffixLength);\n        if (false == processedTLDsLongestFirst.containsKey(TLDprefix)) {\n          // System.out.println(\"Ignoring non-TLD prefix: \" + TLDprefix);\n          break;                                        // shorter prefixes can be ignored\n        }\n        if (processedTLDsLongestFirst.get(TLDprefix)) {\n          // System.out.println(\"Skipping already processed prefix: \" + TLDprefix);\n          break;                                        // shorter prefixes have already been processed \n        }\n\n        processedTLDsLongestFirst.put(TLDprefix, true); // mark as processed\n        if (TLDsBySuffixLength.size() == suffixLength)\n          TLDsBySuffixLength.add(new TreeSet<>());\n        SortedSet<String> TLDbucket = TLDsBySuffixLength.get(suffixLength);\n        TLDbucket.add(TLDprefix);\n        // System.out.println(\"Adding TLD prefix of \" + TLD + \" with suffix length \" + suffixLength + \": \" + TLDprefix);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros#partitionTLDprefixesBySuffixLength().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Partition TLDs by whether they are prefixes of other TLDs and then by suffix length.\n   * We only care about TLDs that are prefixes and are exactly one character shorter than another TLD.\n   * See LUCENE-8278 and LUCENE-5391.\n   */\n  private void partitionTLDprefixesBySuffixLength() {\n    TLDsBySuffixLength.add(new TreeSet<>());            // initialize set for zero-suffix TLDs\n    for (SortedMap.Entry<String,Boolean> entry : processedTLDsLongestFirst.entrySet()) {\n      String TLD = entry.getKey();\n      if (entry.getValue()) {\n        // System.out.println(\"Skipping already processed: \" + TLD);\n        continue;\n      }\n      // System.out.println(\"Adding zero-suffix TLD: \" + TLD);\n      TLDsBySuffixLength.get(0).add(TLD);\n      for (int suffixLength = 1 ; (TLD.length() - suffixLength) >= 2 ; ++suffixLength) {\n        String TLDprefix = TLD.substring(0, TLD.length() - suffixLength);\n        if (false == processedTLDsLongestFirst.containsKey(TLDprefix)) {\n          // System.out.println(\"Ignoring non-TLD prefix: \" + TLDprefix);\n          break;                                        // shorter prefixes can be ignored\n        }\n        if (processedTLDsLongestFirst.get(TLDprefix)) {\n          // System.out.println(\"Skipping already processed prefix: \" + TLDprefix);\n          break;                                        // shorter prefixes have already been processed \n        }\n\n        processedTLDsLongestFirst.put(TLDprefix, true); // mark as processed\n        if (TLDsBySuffixLength.size() == suffixLength)\n          TLDsBySuffixLength.add(new TreeSet<>());\n        SortedSet<String> TLDbucket = TLDsBySuffixLength.get(suffixLength);\n        TLDbucket.add(TLDprefix);\n        // System.out.println(\"Adding TLD prefix of \" + TLD + \" with suffix length \" + suffixLength + \": \" + TLDprefix);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8"]},"commit2Childs":{"2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2ea68a9006c842dc3e3978ff2bd9baa53bc50eb8","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}