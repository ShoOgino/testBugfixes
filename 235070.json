{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,Predicate[DocCollection]).mjava","commits":[{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,Predicate[DocCollection]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Block until a Predicate returns true, or the wait times out\n   *\n   * <p>\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   * </p>\n   *\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException on timeout\n   */\n  public void waitForState(final String collection, long wait, TimeUnit unit, Predicate<DocCollection> predicate)\n      throws InterruptedException, TimeoutException {\n\n    if (closed) {\n      throw new AlreadyClosedException();\n    }\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    waitLatches.add(latch);\n    AtomicReference<DocCollection> docCollection = new AtomicReference<>();\n    DocCollectionWatcher watcher = (c) -> {\n      docCollection.set(c);\n      boolean matches = predicate.test(c);\n      if (matches)\n        latch.countDown();\n\n      return matches;\n    };\n    registerDocCollectionWatcher(collection, watcher);\n\n    try {\n      // wait for the watcher predicate to return true, or time out\n      if (!latch.await(wait, unit))\n        throw new TimeoutException(\"Timeout waiting to see state for collection=\" + collection + \" :\" + docCollection.get());\n\n    }\n    finally {\n      removeDocCollectionWatcher(collection, watcher);\n      waitLatches.remove(latch);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,Predicate[DocCollection]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader#waitForState(String,long,TimeUnit,Predicate[DocCollection]).mjava","sourceNew":"  /**\n   * Block until a Predicate returns true, or the wait times out\n   *\n   * <p>\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   * </p>\n   *\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException     on timeout\n   */\n  public void waitForState(final String collection, long wait, TimeUnit unit, Predicate<DocCollection> predicate)\n      throws InterruptedException, TimeoutException {\n\n    if (closed) {\n      throw new AlreadyClosedException();\n    }\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    waitLatches.add(latch);\n    AtomicReference<DocCollection> docCollection = new AtomicReference<>();\n    DocCollectionWatcher watcher = (c) -> {\n      docCollection.set(c);\n      boolean matches = predicate.test(c);\n      if (matches)\n        latch.countDown();\n\n      return matches;\n    };\n    registerDocCollectionWatcher(collection, watcher);\n\n    try {\n      // wait for the watcher predicate to return true, or time out\n      if (!latch.await(wait, unit))\n        throw new TimeoutException(\"Timeout waiting to see state for collection=\" + collection + \" :\" + docCollection.get());\n\n    } finally {\n      removeDocCollectionWatcher(collection, watcher);\n      waitLatches.remove(latch);\n    }\n  }\n\n","sourceOld":"  /**\n   * Block until a Predicate returns true, or the wait times out\n   *\n   * <p>\n   * Note that the predicate may be called again even after it has returned true, so\n   * implementors should avoid changing state within the predicate call itself.\n   * </p>\n   *\n   * @param collection the collection to watch\n   * @param wait       how long to wait\n   * @param unit       the units of the wait parameter\n   * @param predicate  the predicate to call on state changes\n   * @throws InterruptedException on interrupt\n   * @throws TimeoutException on timeout\n   */\n  public void waitForState(final String collection, long wait, TimeUnit unit, Predicate<DocCollection> predicate)\n      throws InterruptedException, TimeoutException {\n\n    if (closed) {\n      throw new AlreadyClosedException();\n    }\n\n    final CountDownLatch latch = new CountDownLatch(1);\n    waitLatches.add(latch);\n    AtomicReference<DocCollection> docCollection = new AtomicReference<>();\n    DocCollectionWatcher watcher = (c) -> {\n      docCollection.set(c);\n      boolean matches = predicate.test(c);\n      if (matches)\n        latch.countDown();\n\n      return matches;\n    };\n    registerDocCollectionWatcher(collection, watcher);\n\n    try {\n      // wait for the watcher predicate to return true, or time out\n      if (!latch.await(wait, unit))\n        throw new TimeoutException(\"Timeout waiting to see state for collection=\" + collection + \" :\" + docCollection.get());\n\n    }\n    finally {\n      removeDocCollectionWatcher(collection, watcher);\n      waitLatches.remove(latch);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["7b366e7dd3172289251a86be96031af4002cd19c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b366e7dd3172289251a86be96031af4002cd19c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b366e7dd3172289251a86be96031af4002cd19c"],"7b366e7dd3172289251a86be96031af4002cd19c":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}