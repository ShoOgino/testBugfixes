{"path":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#getSslAwareClientWithNoClientCerts().mjava","commits":[{"id":"e58bb31b4af6b8eeb1539849575c59df745bc6e6","date":1461874681,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#getSslAwareClientWithNoClientCerts().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a new HttpClient that supports both HTTP and HTTPS (with the default test truststore), but \n   * has no keystore -- so servers requiring client authentication should fail.\n   */\n  private static CloseableHttpClient getSslAwareClientWithNoClientCerts() throws Exception {\n    \n    // NOTE: This method explicitly does *NOT* use HttpClientUtil code because that\n    // will muck with the global static HttpClientBuilder / SchemeRegistryProvider\n    // and we can't do that and still test the entire purpose of what we are trying to test here.\n\n    final SSLTestConfig clientConfig = new SSLTestConfig(true, false);\n    \n    final SSLConnectionSocketFactory sslFactory = clientConfig.buildClientSSLConnectionSocketFactory();\n    assert null != sslFactory;\n\n    final Registry<ConnectionSocketFactory> socketFactoryReg = \n      RegistryBuilder.<ConnectionSocketFactory> create()\n      .register(\"https\", sslFactory)\n      .register(\"http\", PlainConnectionSocketFactory.INSTANCE )\n      .build();\n    \n    final HttpClientBuilder builder = HttpClientBuilder.create();\n    builder.setConnectionManager(new PoolingHttpClientConnectionManager(socketFactoryReg));\n\n    return builder.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudClusterSSL#getSslAwareClientWithNoClientCerts().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a new HttpClient that supports both HTTP and HTTPS (with the default test truststore), but \n   * has no keystore -- so servers requiring client authentication should fail.\n   */\n  private static CloseableHttpClient getSslAwareClientWithNoClientCerts() throws Exception {\n    \n    // NOTE: This method explicitly does *NOT* use HttpClientUtil code because that\n    // will muck with the global static HttpClientBuilder / SchemeRegistryProvider\n    // and we can't do that and still test the entire purpose of what we are trying to test here.\n\n    final SSLTestConfig clientConfig = new SSLTestConfig(true, false);\n    \n    final SSLConnectionSocketFactory sslFactory = clientConfig.buildClientSSLConnectionSocketFactory();\n    assert null != sslFactory;\n\n    final Registry<ConnectionSocketFactory> socketFactoryReg = \n      RegistryBuilder.<ConnectionSocketFactory> create()\n      .register(\"https\", sslFactory)\n      .register(\"http\", PlainConnectionSocketFactory.INSTANCE )\n      .build();\n    \n    final HttpClientBuilder builder = HttpClientBuilder.create();\n    builder.setConnectionManager(new PoolingHttpClientConnectionManager(socketFactoryReg));\n\n    return builder.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e58bb31b4af6b8eeb1539849575c59df745bc6e6"]},"commit2Childs":{"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e58bb31b4af6b8eeb1539849575c59df745bc6e6","55b50463286869f584cf849d1587a0fcd54d1dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}