{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#fillSingleContentStream(Collection[ContentStream],HttpEntityEnclosingRequestBase).mjava","commits":[{"id":"97bcd657104d24ce5e89db102939e68a6784bdda","date":1509417991,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#fillSingleContentStream(Collection[ContentStream],HttpEntityEnclosingRequestBase).mjava","pathOld":"/dev/null","sourceNew":"  private void fillSingleContentStream(Collection<ContentStream> streams, HttpEntityEnclosingRequestBase postOrPut) throws IOException {\n    // Single stream as body\n    // Using a loop just to get the first one\n    final ContentStream[] contentStream = new ContentStream[1];\n    for (ContentStream content : streams) {\n      contentStream[0] = content;\n      break;\n    }\n    if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n      Long size = contentStream[0].getSize();\n      postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n        @Override\n        public Header getContentType() {\n          return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n        }\n\n        @Override\n        public boolean isRepeatable() {\n          return false;\n        }\n\n      });\n    } else {\n      Long size = contentStream[0].getSize();\n      postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n        @Override\n        public Header getContentType() {\n          return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n        }\n\n        @Override\n        public boolean isRepeatable() {\n          return false;\n        }\n      });\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f9ab9cbda608d22a023db8b8ab48348e5f19bd7","date":1509526582,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#fillSingleContentStream(Collection[ContentStream],HttpEntityEnclosingRequestBase).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#fillSingleContentStream(Collection[ContentStream],HttpEntityEnclosingRequestBase).mjava","sourceNew":"  private void fillSingleContentStream(Collection<ContentStream> streams, HttpEntityEnclosingRequestBase postOrPut) throws IOException {\n    // Single stream as body\n    // Using a loop just to get the first one\n    final ContentStream[] contentStream = new ContentStream[1];\n    for (ContentStream content : streams) {\n      contentStream[0] = content;\n      break;\n    }\n    Long size = contentStream[0].getSize();\n    postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n      @Override\n      public Header getContentType() {\n        return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n      }\n\n      @Override\n      public boolean isRepeatable() {\n        return false;\n      }\n    });\n\n  }\n\n","sourceOld":"  private void fillSingleContentStream(Collection<ContentStream> streams, HttpEntityEnclosingRequestBase postOrPut) throws IOException {\n    // Single stream as body\n    // Using a loop just to get the first one\n    final ContentStream[] contentStream = new ContentStream[1];\n    for (ContentStream content : streams) {\n      contentStream[0] = content;\n      break;\n    }\n    if (contentStream[0] instanceof RequestWriter.LazyContentStream) {\n      Long size = contentStream[0].getSize();\n      postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n        @Override\n        public Header getContentType() {\n          return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n        }\n\n        @Override\n        public boolean isRepeatable() {\n          return false;\n        }\n\n      });\n    } else {\n      Long size = contentStream[0].getSize();\n      postOrPut.setEntity(new InputStreamEntity(contentStream[0].getStream(), size == null ? -1 : size) {\n        @Override\n        public Header getContentType() {\n          return new BasicHeader(\"Content-Type\", contentStream[0].getContentType());\n        }\n\n        @Override\n        public boolean isRepeatable() {\n          return false;\n        }\n      });\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"97bcd657104d24ce5e89db102939e68a6784bdda":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f9ab9cbda608d22a023db8b8ab48348e5f19bd7":["97bcd657104d24ce5e89db102939e68a6784bdda"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f9ab9cbda608d22a023db8b8ab48348e5f19bd7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97bcd657104d24ce5e89db102939e68a6784bdda"],"97bcd657104d24ce5e89db102939e68a6784bdda":["7f9ab9cbda608d22a023db8b8ab48348e5f19bd7"],"7f9ab9cbda608d22a023db8b8ab48348e5f19bd7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}