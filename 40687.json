{"path":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeightsParallel(IndexSearcher,boolean,float,List[Feature.FeatureWeight],Collection[Feature]).mjava","commits":[{"id":"58c36d634c9789cb739fbd175c1a8d50b3303f6b","date":1478022614,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeightsParallel(IndexSearcher,boolean,float,List[Feature.FeatureWeight],Collection[Feature]).mjava","pathOld":"/dev/null","sourceNew":"  private void createWeightsParallel(IndexSearcher searcher, boolean needsScores, float boost,\n      List<Feature.FeatureWeight > featureWeights, Collection<Feature> features) throws RuntimeException {\n\n    final SolrQueryRequest req = getRequest();\n    List<Future<Feature.FeatureWeight> > futures = new ArrayList<>(features.size());\n    try{\n      for (final Feature f : features) {\n        CreateWeightCallable callable = new CreateWeightCallable(f, searcher, needsScores, req);\n        RunnableFuture<Feature.FeatureWeight> runnableFuture = new FutureTask<>(callable);\n        querySemaphore.acquire(); // always acquire before the ltrSemaphore is acquired, to guarantee a that the current query is within the limit for max. threads\n        ltrThreadMgr.acquireLTRSemaphore();//may block and/or interrupt\n        ltrThreadMgr.execute(runnableFuture);//releases semaphore when done\n        futures.add(runnableFuture);\n      }\n      //Loop over futures to get the feature weight objects\n      for (final Future<Feature.FeatureWeight> future : futures) {\n        featureWeights.add(future.get()); // future.get() will block if the job is still running\n      }\n    } catch (Exception e) { // To catch InterruptedException and ExecutionException\n      log.info(\"Error while creating weights in LTR: InterruptedException\", e);\n      throw new RuntimeException(\"Error while creating weights in LTR: \" + e.getMessage(), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeightsParallel(IndexSearcher,boolean,float,List[Feature.FeatureWeight],Collection[Feature]).mjava","pathOld":"/dev/null","sourceNew":"  private void createWeightsParallel(IndexSearcher searcher, boolean needsScores, float boost,\n      List<Feature.FeatureWeight > featureWeights, Collection<Feature> features) throws RuntimeException {\n\n    final SolrQueryRequest req = getRequest();\n    List<Future<Feature.FeatureWeight> > futures = new ArrayList<>(features.size());\n    try{\n      for (final Feature f : features) {\n        CreateWeightCallable callable = new CreateWeightCallable(f, searcher, needsScores, req);\n        RunnableFuture<Feature.FeatureWeight> runnableFuture = new FutureTask<>(callable);\n        querySemaphore.acquire(); // always acquire before the ltrSemaphore is acquired, to guarantee a that the current query is within the limit for max. threads\n        ltrThreadMgr.acquireLTRSemaphore();//may block and/or interrupt\n        ltrThreadMgr.execute(runnableFuture);//releases semaphore when done\n        futures.add(runnableFuture);\n      }\n      //Loop over futures to get the feature weight objects\n      for (final Future<Feature.FeatureWeight> future : futures) {\n        featureWeights.add(future.get()); // future.get() will block if the job is still running\n      }\n    } catch (Exception e) { // To catch InterruptedException and ExecutionException\n      log.info(\"Error while creating weights in LTR: InterruptedException\", e);\n      throw new RuntimeException(\"Error while creating weights in LTR: \" + e.getMessage(), e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07ef8d46ad3265812d247126beb45b283763afee","date":1481143602,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeightsParallel(IndexSearcher,boolean,List[Feature.FeatureWeight],Collection[Feature]).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeightsParallel(IndexSearcher,boolean,float,List[Feature.FeatureWeight],Collection[Feature]).mjava","sourceNew":"  private void createWeightsParallel(IndexSearcher searcher, boolean needsScores,\n      List<Feature.FeatureWeight > featureWeights, Collection<Feature> features) throws RuntimeException {\n\n    final SolrQueryRequest req = getRequest();\n    List<Future<Feature.FeatureWeight> > futures = new ArrayList<>(features.size());\n    try{\n      for (final Feature f : features) {\n        CreateWeightCallable callable = new CreateWeightCallable(f, searcher, needsScores, req);\n        RunnableFuture<Feature.FeatureWeight> runnableFuture = new FutureTask<>(callable);\n        querySemaphore.acquire(); // always acquire before the ltrSemaphore is acquired, to guarantee a that the current query is within the limit for max. threads\n        ltrThreadMgr.acquireLTRSemaphore();//may block and/or interrupt\n        ltrThreadMgr.execute(runnableFuture);//releases semaphore when done\n        futures.add(runnableFuture);\n      }\n      //Loop over futures to get the feature weight objects\n      for (final Future<Feature.FeatureWeight> future : futures) {\n        featureWeights.add(future.get()); // future.get() will block if the job is still running\n      }\n    } catch (Exception e) { // To catch InterruptedException and ExecutionException\n      log.info(\"Error while creating weights in LTR: InterruptedException\", e);\n      throw new RuntimeException(\"Error while creating weights in LTR: \" + e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  private void createWeightsParallel(IndexSearcher searcher, boolean needsScores, float boost,\n      List<Feature.FeatureWeight > featureWeights, Collection<Feature> features) throws RuntimeException {\n\n    final SolrQueryRequest req = getRequest();\n    List<Future<Feature.FeatureWeight> > futures = new ArrayList<>(features.size());\n    try{\n      for (final Feature f : features) {\n        CreateWeightCallable callable = new CreateWeightCallable(f, searcher, needsScores, req);\n        RunnableFuture<Feature.FeatureWeight> runnableFuture = new FutureTask<>(callable);\n        querySemaphore.acquire(); // always acquire before the ltrSemaphore is acquired, to guarantee a that the current query is within the limit for max. threads\n        ltrThreadMgr.acquireLTRSemaphore();//may block and/or interrupt\n        ltrThreadMgr.execute(runnableFuture);//releases semaphore when done\n        futures.add(runnableFuture);\n      }\n      //Loop over futures to get the feature weight objects\n      for (final Future<Feature.FeatureWeight> future : futures) {\n        featureWeights.add(future.get()); // future.get() will block if the job is still running\n      }\n    } catch (Exception e) { // To catch InterruptedException and ExecutionException\n      log.info(\"Error while creating weights in LTR: InterruptedException\", e);\n      throw new RuntimeException(\"Error while creating weights in LTR: \" + e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeightsParallel(IndexSearcher,boolean,List[Feature.FeatureWeight],Collection[Feature]).mjava","pathOld":"solr/contrib/ltr/src/java/org/apache/solr/ltr/LTRScoringQuery#createWeightsParallel(IndexSearcher,boolean,float,List[Feature.FeatureWeight],Collection[Feature]).mjava","sourceNew":"  private void createWeightsParallel(IndexSearcher searcher, boolean needsScores,\n      List<Feature.FeatureWeight > featureWeights, Collection<Feature> features) throws RuntimeException {\n\n    final SolrQueryRequest req = getRequest();\n    List<Future<Feature.FeatureWeight> > futures = new ArrayList<>(features.size());\n    try{\n      for (final Feature f : features) {\n        CreateWeightCallable callable = new CreateWeightCallable(f, searcher, needsScores, req);\n        RunnableFuture<Feature.FeatureWeight> runnableFuture = new FutureTask<>(callable);\n        querySemaphore.acquire(); // always acquire before the ltrSemaphore is acquired, to guarantee a that the current query is within the limit for max. threads\n        ltrThreadMgr.acquireLTRSemaphore();//may block and/or interrupt\n        ltrThreadMgr.execute(runnableFuture);//releases semaphore when done\n        futures.add(runnableFuture);\n      }\n      //Loop over futures to get the feature weight objects\n      for (final Future<Feature.FeatureWeight> future : futures) {\n        featureWeights.add(future.get()); // future.get() will block if the job is still running\n      }\n    } catch (Exception e) { // To catch InterruptedException and ExecutionException\n      log.info(\"Error while creating weights in LTR: InterruptedException\", e);\n      throw new RuntimeException(\"Error while creating weights in LTR: \" + e.getMessage(), e);\n    }\n  }\n\n","sourceOld":"  private void createWeightsParallel(IndexSearcher searcher, boolean needsScores, float boost,\n      List<Feature.FeatureWeight > featureWeights, Collection<Feature> features) throws RuntimeException {\n\n    final SolrQueryRequest req = getRequest();\n    List<Future<Feature.FeatureWeight> > futures = new ArrayList<>(features.size());\n    try{\n      for (final Feature f : features) {\n        CreateWeightCallable callable = new CreateWeightCallable(f, searcher, needsScores, req);\n        RunnableFuture<Feature.FeatureWeight> runnableFuture = new FutureTask<>(callable);\n        querySemaphore.acquire(); // always acquire before the ltrSemaphore is acquired, to guarantee a that the current query is within the limit for max. threads\n        ltrThreadMgr.acquireLTRSemaphore();//may block and/or interrupt\n        ltrThreadMgr.execute(runnableFuture);//releases semaphore when done\n        futures.add(runnableFuture);\n      }\n      //Loop over futures to get the feature weight objects\n      for (final Future<Feature.FeatureWeight> future : futures) {\n        featureWeights.add(future.get()); // future.get() will block if the job is still running\n      }\n    } catch (Exception e) { // To catch InterruptedException and ExecutionException\n      log.info(\"Error while creating weights in LTR: InterruptedException\", e);\n      throw new RuntimeException(\"Error while creating weights in LTR: \" + e.getMessage(), e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"07ef8d46ad3265812d247126beb45b283763afee":["58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58c36d634c9789cb739fbd175c1a8d50b3303f6b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["9720b151fde2073f4e401450f4574e5f31c2d0ff","07ef8d46ad3265812d247126beb45b283763afee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07ef8d46ad3265812d247126beb45b283763afee"]},"commit2Childs":{"58c36d634c9789cb739fbd175c1a8d50b3303f6b":["07ef8d46ad3265812d247126beb45b283763afee","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"07ef8d46ad3265812d247126beb45b283763afee":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58c36d634c9789cb739fbd175c1a8d50b3303f6b","9720b151fde2073f4e401450f4574e5f31c2d0ff"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}